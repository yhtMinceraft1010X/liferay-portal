<?xml version="1.0"?>

<project basedir="." name="portal-test-elasticsearch" xmlns:antelope="antlib:ise.antelope.tasks" xmlns:if="ant:if" xmlns:unless="ant:unless">
	<import file="build-test.xml" />

	<get-testcase-property if:set="env.JENKINS_HOME" property.name="elastic.override.version" />
	<propertycopy from="suite.elastic.version[${env.CI_TEST_SUITE}]" name="suite.elastic.version" silent="true" />

	<if>
		<isset property="elastic.override.version" />
		<then>
			<property name="elasticsearch.version" value="${elastic.override.version}" />
		</then>
		<elseif>
			<isset property="suite.elastic.version" />
			<then>
				<property name="elasticsearch.version" value="${suite.elastic.version}" />
			</then>
		</elseif>
		<else>
			<property name="elasticsearch.version" value="7.17.0" />
		</else>
	</if>

	<property name="elastic.kibana.dir" value="${app.server.parent.dir}/kibana-${elasticsearch.version}" />
	<property name="elastic.kibana.tar.name.linux" value="kibana-${elasticsearch.version}-linux-x86_64.tar.gz" />
	<property name="elastic.kibana.tar.name.mac" value="kibana-${elasticsearch.version}-darwin-x86_64.tar.gz" />
	<property name="elastic.kibana.tar.url.linux" value="https://artifacts.elastic.co/downloads/kibana/${elastic.kibana.tar.name.linux}" />
	<property name="elastic.kibana.tar.url.mac" value="https://artifacts.elastic.co/downloads/kibana/${elastic.kibana.tar.name.mac}" />
	<property name="elastic.kibana.zip.name.windows" value="kibana-${elasticsearch.version}-windows-x86_64.zip" />
	<property name="elastic.kibana.zip.url.windows" value="https://artifacts.elastic.co/downloads/kibana/${elastic.kibana.zip.name.windows}" />
	<property name="elasticsearch.dir" value="${app.server.parent.dir}/elasticsearch-${elasticsearch.version}" />
	<property name="elasticsearch.analysis-icu.zip.name" value="analysis-icu-${elasticsearch.version}.zip" />
	<property name="elasticsearch.analysis-icu.zip.url" value="https://artifacts.elastic.co/downloads/elasticsearch-plugins/analysis-icu/${elasticsearch.analysis-icu.zip.name}" />
	<property name="elasticsearch.analysis-kuromoji.zip.name" value="analysis-kuromoji-${elasticsearch.version}.zip" />
	<property name="elasticsearch.analysis-kuromoji.zip.url" value="https://artifacts.elastic.co/downloads/elasticsearch-plugins/analysis-kuromoji/${elasticsearch.analysis-kuromoji.zip.name}" />
	<property name="elasticsearch.analysis-smartcn.zip.name" value="analysis-smartcn-${elasticsearch.version}.zip" />
	<property name="elasticsearch.analysis-smartcn.zip.url" value="https://artifacts.elastic.co/downloads/elasticsearch-plugins/analysis-smartcn/${elasticsearch.analysis-smartcn.zip.name}" />
	<property name="elasticsearch.analysis-stempel.zip.name" value="analysis-stempel-${elasticsearch.version}.zip" />
	<property name="elasticsearch.analysis-stempel.zip.url" value="https://artifacts.elastic.co/downloads/elasticsearch-plugins/analysis-stempel/${elasticsearch.analysis-stempel.zip.name}" />
	<property name="elasticsearch.tar.name.linux" value="elasticsearch-${elasticsearch.version}-linux-x86_64.tar.gz" />
	<property name="elasticsearch.tar.name.mac" value="elasticsearch-${elasticsearch.version}-darwin-x86_64.tar.gz" />
	<property name="elasticsearch.zip.name.windows" value="elasticsearch-${elasticsearch.version}-windows-x86_64.zip" />
	<property name="elasticsearch.tar.url.linux" value="https://artifacts.elastic.co/downloads/elasticsearch/${elasticsearch.tar.name.linux}" />
	<property name="elasticsearch.tar.url.mac" value="https://artifacts.elastic.co/downloads/elasticsearch/${elasticsearch.tar.name.mac}" />
	<property name="elasticsearch.zip.url.windows" value="https://artifacts.elastic.co/downloads/elasticsearch/${elasticsearch.zip.name.windows}" />
	<property name="elasticsearch.sidecar.version" value="7.17.0" />
	<property name="elasticsearch.sidecar.analysis-icu.zip.url" value="https://artifacts.elastic.co/downloads/elasticsearch-plugins/analysis-icu/analysis-icu-${elasticsearch.sidecar.version}.zip" />
	<property name="elasticsearch.sidecar.analysis-kuromoji.zip.url" value="https://artifacts.elastic.co/downloads/elasticsearch-plugins/analysis-kuromoji/analysis-kuromoji-${elasticsearch.sidecar.version}.zip" />
	<property name="elasticsearch.sidecar.analysis-smartcn.zip.url" value="https://artifacts.elastic.co/downloads/elasticsearch-plugins/analysis-smartcn/analysis-smartcn-${elasticsearch.sidecar.version}.zip" />
	<property name="elasticsearch.sidecar.analysis-stempel.zip.url" value="https://artifacts.elastic.co/downloads/elasticsearch-plugins/analysis-stempel/analysis-stempel-${elasticsearch.sidecar.version}.zip" />
	<property name="elasticsearch.sidecar.no.jdk.tar.url" value="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-${elasticsearch.sidecar.version}-no-jdk-linux-x86_64.tar.gz" />

	<macrodef name="check-elasticsearch-security">
		<attribute name="authentication.type" />

		<sequential>
			<if>
				<equals arg1="@{authentication.type}" arg2="basic" />
				<then>
					<exec executable="curl" outputproperty="curl.elasticsearch.check.output">
						<arg value="-ku" />
						<arg value="elastic:${elastic.xpack.elastic.user.password}" />
						<arg value="https://localhost:9200" />
					</exec>
				</then>
				<elseif>
					<equals arg1="@{authentication.type}" arg2="PKI" />
					<then>
						<exec executable="curl" outputproperty="curl.elasticsearch.check.output">
							<arg value="--cert" />
							<arg value="${elasticsearch.dir}/config/certs/elastic-certificates.crt" />
							<arg value="--key" />
							<arg value="${elasticsearch.dir}/config/certs/elastic-certificates.key" />
							<arg value="-k" />
							<arg value="https://localhost:9200" />
						</exec>
					</then>
				</elseif>
			</if>

			<echo>${curl.elasticsearch.check.output}</echo>

			<fail message="Unable to reach Elasticsearch server using @{authentication.type} authentication">
				<condition>
					<not>
						<contains string="${curl.elasticsearch.check.output}" substring="cluster_name" />
					</not>
				</condition>
			</fail>
		</sequential>
	</macrodef>

	<macrodef name="configure-elasticsearch-discovery-type-single-node">
		<sequential>
			<echo append="true" file="${elasticsearch.dir}/config/elasticsearch.yml">${line.separator}discovery.type: single-node</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-elasticsearch-jdk11">
		<sequential>
			<replace
				file="${elasticsearch.dir}/bin/elasticsearch-env"
			>
				<replacetoken><![CDATA[JAVA="$JAVA_HOME/bin/java"]]></replacetoken>
				<replacevalue><![CDATA[JAVA="/opt/java/jdk11/bin/java"]]></replacevalue>
			</replace>
		</sequential>
	</macrodef>

	<macrodef name="configure-elasticsearch-ltr-properties">
		<sequential>
			<echo append="true" file="${elasticsearch.dir}/config/elasticsearch.yml">${line.separator}xpack.ml.enabled: false
path.repo: ${liferay.home}/data/elasticsearch7/repo</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-elasticsearch-monitoring-property">
		<sequential>
			<echo append="true" file="${elasticsearch.dir}/config/elasticsearch.yml">${line.separator}xpack.monitoring.collection.enabled: true</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-elasticsearch-properties">
		<sequential>
			<echo append="true" file="${elasticsearch.dir}/config/elasticsearch.yml">${line.separator}bootstrap.system_call_filter: false
cluster.name: LiferayElasticsearchCluster
ingest.geoip.downloader.enabled: false
xpack.license.self_generated.type: trial</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-elasticsearch-second-cluster-properties">
		<sequential>
			<echo file="${elasticsearch.dir}-2/config/elasticsearch.yml">${line.separator}bootstrap.system_call_filter: false
cluster.name: LiferayElasticsearchClusterTwo
http.port: 9202
ingest.geoip.downloader.enabled: false
transport.port: 9500-9600
xpack.license.self_generated.type: trial</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-elasticsearch-x-pack-pki-security-properties">
		<sequential>
			<echo append="true" file="${elasticsearch.dir}/config/elasticsearch.yml">${line.separator}xpack.security.enabled: true
xpack.security.http.ssl.certificate: certs/elastic-certificates.crt
xpack.security.http.ssl.certificate_authorities : [ "certs/ca.crt" ]
xpack.security.http.ssl.client_authentication: required
xpack.security.http.ssl.enabled: true
xpack.security.http.ssl.key: certs/elastic-certificates.key
xpack.security.http.ssl.verification_mode: certificate
xpack.security.transport.ssl.certificate: certs/elastic-certificates.crt
xpack.security.transport.ssl.certificate_authorities : [ "certs/ca.crt" ]
xpack.security.transport.ssl.client_authentication: required
xpack.security.transport.ssl.enabled: true
xpack.security.transport.ssl.key: certs/elastic-certificates.key
xpack.security.transport.ssl.verification_mode: certificate
xpack:
  security:
    authc:
      realms:
        pki:
          pki1:
            order: 0</echo>

			<echo append="true" file="${elasticsearch.dir}/config/role_mapping.yml">${line.separator}superuser:
  - "CN=liferay.com,OU=Search,DC=liferay,DC=com"
kibana_system:
  - "CN=liferay.com,OU=Search,DC=liferay,DC=com"</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-elasticsearch-x-pack-security-properties">
		<sequential>
			<echo append="true" file="${elasticsearch.dir}/config/elasticsearch.yml">${line.separator}xpack.security.enabled: true
xpack.security.http.ssl.enabled: true
xpack.security.http.ssl.keystore.path: certs/elastic-certificates.p12
xpack.security.http.ssl.truststore.path: certs/elastic-certificates.p12
xpack.security.transport.ssl.certificate: certs/elastic-certificates.crt
xpack.security.transport.ssl.certificate_authorities: [ "certs/ca.crt" ]
xpack.security.transport.ssl.enabled: true
xpack.security.transport.ssl.key: certs/elastic-certificates.key
xpack.security.transport.ssl.verification_mode: certificate</echo>

			<get-testcase-property if:set="env.JENKINS_HOME" property.name="elasticsearch.jdk11.enabled" />

			<echo append="true" file="${elasticsearch.dir}/config/elasticsearch.yml" if:true="${elasticsearch.jdk11.enabled}">${line.separator}xpack.security.transport.ssl.supported_protocols: [ "TLSv1.1", "TLSv1.2" ]
xpack.security.http.ssl.supported_protocols: [ "TLSv1.1", "TLSv1.2" ]</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-elasticsearch-x-pack-security-tls-cipher-suites-properties">
		<sequential>
			<echo append="true" file="${elasticsearch.dir}/config/elasticsearch.yml">${line.separator}xpack.security.enabled: true
xpack.security.http.ssl.enabled: true
xpack.security.http.ssl.keystore.path: certs/elastic-certificates.p12
xpack.security.http.ssl.supported_protocols: [ "TLSv1.2" ]
xpack.security.http.ssl.truststore.path: certs/elastic-certificates.p12
xpack.security.transport.ssl.certificate: certs/elastic-certificates.crt
xpack.security.transport.ssl.certificate_authorities: [ "certs/ca.crt" ]
xpack.security.transport.ssl.cipher_suites : TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
xpack.security.transport.ssl.enabled: true
xpack.security.transport.ssl.key: certs/elastic-certificates.key
xpack.security.transport.ssl.supported_protocols: [ "TLSv1.2" ]
xpack.security.transport.ssl.verification_mode: certificate</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-kibana-properties">
		<sequential>
			<echo append="true" file="${elastic.kibana.dir}/config/kibana.yml">
elasticsearch.hosts: "http://localhost:9200"
pid.file: ${elastic.kibana.dir}/bin/pid-kibana
server.basePath: "/o/portal-search-elasticsearch-monitoring/monitoring-proxy"
server.rewriteBasePath: false</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-kibana-x-pack-security-properties">
		<sequential>
			<replace
				file="${elastic.kibana.dir}/config/kibana.yml"
			>
				<replacetoken><![CDATA[elasticsearch.hosts: "http://localhost:9200"]]></replacetoken>
				<replacevalue><![CDATA[elasticsearch.hosts: "https://localhost:9200"]]></replacevalue>
			</replace>

			<echo append="true" file="${elastic.kibana.dir}/config/kibana.yml">
elasticsearch.ssl.certificateAuthorities: [ "${elasticsearch.dir}/config/certs/ca.crt" ]
server.ssl.certificate: ${elasticsearch.dir}/config/certs/elastic-certificates.crt
server.ssl.enabled: true
server.ssl.key: ${elasticsearch.dir}/config/certs/elastic-certificates.key
xpack.security.encryptionKey: "xsomethingxatxleastx32xcharactersx"
xpack.security.sessionTimeout: 600000</echo>

			<if>
				<equals arg1="${elastic.pki.authentication.enabled}" arg2="true" />
				<then>
					<echo append="true" file="${elastic.kibana.dir}/config/kibana.yml">
elasticsearch.ssl.alwaysPresentCertificate: true
elasticsearch.ssl.certificate: ${elasticsearch.dir}/config/certs/elastic-certificates.crt
elasticsearch.ssl.key: ${elasticsearch.dir}/config/certs/elastic-certificates.key
elasticsearch.ssl.verificationMode: certificate
server.ssl.certificateAuthorities: [ "${elasticsearch.dir}/config/certs/ca.crt" ]</echo>
				</then>
				<else>
					<echo append="true" file="${elastic.kibana.dir}/config/kibana.yml">
elasticsearch.password: "${elastic.xpack.elastic.user.password}"
elasticsearch.username: "elastic"</echo>
				</else>
			</if>

			<get-testcase-property if:set="env.JENKINS_HOME" property.name="elasticsearch.jdk11.enabled" />

			<echo append="true" file="${elastic.kibana.dir}/config/node.options" if:true="${elasticsearch.jdk11.enabled}">${line.separator}--tls-max-v1.2</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-portal-ccr-osgi-properties">
		<sequential>
			<replaceregexp
				file="${liferay.home}/osgi/configs/com.liferay.portal.search.elasticsearch7.configuration.ElasticsearchConfiguration.config"
				match="(?&lt;=logExceptionsOnly=B?&quot;)false"
				replace="true"
			/>

			<configure-portal-second-connection-osgi-properties connection.name="localcluster" />
		</sequential>
	</macrodef>

	<macrodef name="configure-portal-remote-elasticsearch-osgi-properties">
		<sequential>
			<echo append="true" file="${liferay.home}/osgi/configs/com.liferay.portal.search.elasticsearch7.configuration.ElasticsearchConfiguration.config">${line.separator}minimumRequiredNodeVersion="${elasticsearch.version}"
productionModeEnabled="true"</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-portal-second-connection-osgi-properties">
		<attribute name="connection.name" />

		<sequential>
			<echo file="${liferay.home}/osgi/configs/com.liferay.portal.search.elasticsearch7.configuration.ElasticsearchConnectionConfiguration~@{connection.name}.config">active=&quot;true&quot;
connectionId=&quot;@{connection.name}&quot;
networkHostAddresses=[&quot;http://localhost:9202&quot;]</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-portal-x-pack-osgi-properties">
		<sequential>
			<echo append="true" file="${liferay.home}/osgi/configs/com.liferay.portal.search.elasticsearch7.configuration.ElasticsearchConfiguration.config">${line.separator}remoteClusterConnectionId="xpack"</echo>

			<propertyregex
				defaultValue="${elastic.xpack.elastic.user.password}"
				input="${elastic.xpack.elastic.user.password}"
				override="true"
				property="osgi.config.elastic.user.password"
				regexp="="
				replace="\\\\="
			/>

			<echo file="${liferay.home}/osgi/configs/com.liferay.portal.search.elasticsearch.monitoring.web.internal.configuration.MonitoringConfiguration.config">kibanaPassword="${osgi.config.elastic.user.password}"
kibanaURL="https://localhost:5601"
proxyServletLogEnable="true"</echo>

			<echo file="${liferay.home}/osgi/configs/com.liferay.portal.search.elasticsearch7.configuration.ElasticsearchConnectionConfiguration~xpack.config">active="true"
authenticationEnabled="true"
connectionId="xpack"
httpSSLEnabled="true"
networkHostAddresses=["https://localhost:9200"]
password="${osgi.config.elastic.user.password}"
truststorePassword="liferay"
truststorePath="${elasticsearch.dir}/config/certs/elastic-certificates.p12"
truststoreType="pkcs12"
username="elastic"</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-portal-x-pack-pki-osgi-properties">
		<sequential>
			<echo append="true" file="${liferay.home}/osgi/configs/com.liferay.portal.search.elasticsearch7.configuration.ElasticsearchConfiguration.config">${line.separator}remoteClusterConnectionId="pki"</echo>

			<propertyregex
				defaultValue="${elastic.xpack.elastic.user.password}"
				input="${elastic.xpack.elastic.user.password}"
				override="true"
				property="osgi.config.elastic.user.password"
				regexp="="
				replace="\\\\="
			/>

			<echo file="${liferay.home}/osgi/configs/com.liferay.portal.search.elasticsearch.monitoring.web.internal.configuration.MonitoringConfiguration.config">kibanaPassword="${osgi.config.elastic.user.password}"
kibanaURL="https://localhost:5601"
proxyServletLogEnable="true"</echo>

			<echo file="${liferay.home}/osgi/configs/com.liferay.portal.search.elasticsearch7.configuration.ElasticsearchConnectionConfiguration~pki.config">active="true"
authenticationEnabled="false"
connectionId="pki"
httpSSLEnabled="true"
networkHostAddresses=["https://localhost:9200"]
truststorePassword="liferay"
truststorePath="${elasticsearch.dir}/config/certs/elastic-certificates.p12"
truststoreType="pkcs12"</echo>
		</sequential>
	</macrodef>

	<macrodef name="configure-portal-x-pack-security-tls-cipher-suites">
		<sequential>
			<if>
				<equals arg1="${app.server.type}" arg2="tomcat" />
				<then>
					<echo append="true" file="${app.server.tomcat.dir}/bin/setenv.bat">
${line.separator}CATALINA_OPTS="${CATALINA_OPTS} -Djdk.tls.client.cipherSuites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 -Djdk.tls.client.protocols=TLSv1.2"</echo>

					<echo append="true" file="${app.server.tomcat.dir}/bin/setenv.sh">
${line.separator}CATALINA_OPTS="${CATALINA_OPTS} -Djdk.tls.client.cipherSuites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 -Djdk.tls.client.protocols=TLSv1.2"</echo>
				</then>
				<else>
					<echo>Set setenv.bat and setenv.sh manually before attempting to connect with portal.</echo>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="configure-portal-x-pack-security-truststore">
		<sequential>
			<if>
				<equals arg1="${app.server.type}" arg2="tomcat" />
				<then>
					<echo append="true" file="${app.server.tomcat.dir}/bin/setenv.bat">
${line.separator}CATALINA_OPTS="${CATALINA_OPTS} -Djavax.net.ssl.trustStore=${elasticsearch.dir}/config/certs/elastic-certificates.jks -Djavax.net.ssl.trustStorePassword=liferay"</echo>

					<echo append="true" file="${app.server.tomcat.dir}/bin/setenv.sh">
${line.separator}CATALINA_OPTS="${CATALINA_OPTS} -Djavax.net.ssl.trustStore=${elasticsearch.dir}/config/certs/elastic-certificates.jks -Djavax.net.ssl.trustStorePassword=liferay"</echo>
				</then>
				<else>
					<echo>Set setenv.bat and setenv.sh manually before attempting to connect with portal.</echo>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="generate-x-pack-security-certificates">
		<sequential>
			<exec dir="${elasticsearch.dir}/bin" executable="/bin/bash" osfamily="unix">
				<arg value="-c" />
				<arg value="./elasticsearch-certutil ca --pem --out ${elasticsearch.dir}/bin/elastic-stack-ca.zip" />
			</exec>

			<exec dir="${elasticsearch.dir}/bin" executable="cmd" osfamily="windows">
				<arg value="/c" />
				<arg value="elasticsearch-certutil ca --pem --out ${elasticsearch.dir}/bin/elastic-stack-ca.zip" />
			</exec>

			<unzip
				dest="${elasticsearch.dir}/bin"
				src="${elasticsearch.dir}/bin/elastic-stack-ca.zip"
			/>

			<exec dir="${elasticsearch.dir}/bin" executable="/bin/bash" osfamily="unix">
				<arg value="-c" />
				<arg value="./elasticsearch-certutil cert --ca-cert ${elasticsearch.dir}/bin/ca/ca.crt --ca-key ${elasticsearch.dir}/bin/ca/ca.key --pem --ip 127.0.0.1 --dns localhost --name &quot;CN=liferay.com,OU=Search,DC=liferay,DC=com&quot; --out ${elasticsearch.dir}/bin/elastic-certificates.zip" />
			</exec>

			<exec dir="${elasticsearch.dir}/bin" executable="cmd" osfamily="windows">
				<arg value="/c" />
				<arg value="elasticsearch-certutil cert --ca-cert ${elasticsearch.dir}/bin/ca/ca.crt --ca-key ${elasticsearch.dir}/bin/ca/ca.key --pem --ip 127.0.0.1 --dns localhost --name &quot;CN=liferay.com,OU=Search,DC=liferay,DC=com&quot; --out ${elasticsearch.dir}/bin/elastic-certificates.zip" />
			</exec>

			<unzip
				dest="${elasticsearch.dir}/bin"
				src="${elasticsearch.dir}/bin/elastic-certificates.zip"
			/>

			<move
				todir="${elasticsearch.dir}/config/certs"
			>
				<fileset
					dir="${elasticsearch.dir}/bin/CN=liferay.com,OU=Search,DC=liferay,DC=com"
				/>
				<mapper
					from="CN=liferay.com,OU=Search,DC=liferay,DC=com.*"
					to="elastic-certificates.*"
					type="glob"
				/>
			</move>

			<move
				todir="${elasticsearch.dir}/config/certs"
			>
				<fileset
					dir="${elasticsearch.dir}/bin/ca"
				/>
			</move>

			<delete file="${elasticsearch.dir}/bin/elastic-stack-ca.zip" />
			<delete file="${elasticsearch.dir}/bin/elastic-certificates.zip" />
			<delete dir="${elasticsearch.dir}/bin/CN=liferay.com,OU=Search,DC=liferay,DC=com" />
		</sequential>
	</macrodef>

	<macrodef name="generate-x-pack-security-truststores">
		<sequential>
			<if>
				<os family="unix" />
				<then>
					<exec dir="${elasticsearch.dir}/bin" executable="/bin/bash">
						<arg value="-c" />
						<arg value="./elasticsearch-certutil cert --ca-cert ${elasticsearch.dir}/config/certs/ca.crt --ca-key ${elasticsearch.dir}/config/certs/ca.key --pass liferay --ip 127.0.0.1 --dns localhost --name &quot;CN=liferay.com,OU=Search,DC=liferay,DC=com&quot; --out ${elasticsearch.dir}/config/certs/elastic-certificates.p12" />
					</exec>

					<exec dir="${elasticsearch.dir}/bin" executable="/bin/bash">
						<arg value="-c" />
						<arg value="keytool -importkeystore -deststorepass liferay -destkeystore ${elasticsearch.dir}/config/certs/elastic-certificates.jks -srckeystore ${elasticsearch.dir}/config/certs/elastic-certificates.p12 -srcstoretype PKCS12 -srcstorepass liferay" />
					</exec>

					<exec dir="${elasticsearch.dir}/bin" executable="/bin/bash">
						<arg value="-c" />
						<arg value="./elasticsearch-keystore create" />
					</exec>

					<exec dir="${elasticsearch.dir}/bin" executable="/bin/bash" inputstring="liferay&#x0A;">
						<arg value="-c" />
						<arg value="./elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password" />
					</exec>

					<exec dir="${elasticsearch.dir}/bin" executable="/bin/bash" inputstring="liferay&#x0A;">
						<arg value="-c" />
						<arg value="./elasticsearch-keystore add xpack.security.http.ssl.truststore.secure_password" />
					</exec>
				</then>
				<elseif>
					<os family="windows" />
					<then>
						<exec dir="${elasticsearch.dir}/bin" executable="cmd">
							<arg value="/c" />
							<arg value="elasticsearch-certutil cert --ca-cert ${elasticsearch.dir}/config/certs/ca.crt --ca-key ${elasticsearch.dir}/config/certs/ca.key --pass liferay --ip 127.0.0.1 --dns localhost --name &quot;CN=liferay.com,OU=Search,DC=liferay,DC=com&quot; --out ${elasticsearch.dir}/config/certs/elastic-certificates.p12" />
						</exec>

						<exec dir="${elasticsearch.dir}/bin" executable="cmd">
							<arg value="/c" />
							<arg value="keytool -importkeystore -deststorepass liferay -destkeystore ${elasticsearch.dir}/config/certs/elastic-certificates.jks -srckeystore ${elasticsearch.dir}/config/certs/elastic-certificates.p12 -srcstoretype PKCS12 -srcstorepass liferay" />
						</exec>

						<exec dir="${elasticsearch.dir}/bin" executable="cmd">
							<arg value="/c" />
							<arg value="elasticsearch-keystore create" />
						</exec>

						<exec dir="${elasticsearch.dir}/bin" executable="cmd" inputstring="liferay&#x0A;">
							<arg value="/c" />
							<arg value="elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password" />
						</exec>

						<exec dir="${elasticsearch.dir}/bin" executable="cmd" inputstring="liferay&#x0A;">
							<arg value="/c" />
							<arg value="elasticsearch-keystore add xpack.security.http.ssl.truststore.secure_password" />
						</exec>
					</then>
				</elseif>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="prepare-additional-elasticsearch-bundles">
		<attribute name="total.bundles" />

		<sequential>
			<delete dir="${elasticsearch.dir}-1" />

			<move
				file="${elasticsearch.dir}"
				tofile="${elasticsearch.dir}-1"
			/>

			<var name="elasticsearch.bundle.copy.count" value="0" />

			<math
				datatype="int"
				operand1="@{total.bundles}"
				operand2="1"
				operation="-"
				result="elasticsearch.bundle.copy.count"
			/>

			<var name="elasticsearch.bundle.counter" value="1" />

			<antelope:repeat count="${elasticsearch.bundle.copy.count}">
				<math
					datatype="int"
					operand1="${elasticsearch.bundle.counter}"
					operand2="1"
					operation="+"
					result="elasticsearch.bundle.counter"
				/>

				<delete dir="${elasticsearch.dir}-${elasticsearch.bundle.counter}" />

				<copy
					todir="${elasticsearch.dir}-${elasticsearch.bundle.counter}"
				>
					<fileset
						dir="${elasticsearch.dir}-1"
					/>
				</copy>
			</antelope:repeat>
		</sequential>
	</macrodef>

	<macrodef name="prepare-elasticsearch-analyzers">
		<sequential>
			<lstopwatch action="start" name="prepare.elasticsearch.analyzers" />

			<if>
				<not>
					<available file="${elasticsearch.dir}/${elasticsearch.analysis-icu.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${elasticsearch.dir}/${elasticsearch.analysis-icu.zip.name}"
						skipChecksum="true"
						src="${elasticsearch.analysis-icu.zip.url}"
					/>
				</then>
			</if>

			<if>
				<not>
					<available file="${elasticsearch.dir}/${elasticsearch.analysis-kuromoji.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${elasticsearch.dir}/${elasticsearch.analysis-kuromoji.zip.name}"
						skipChecksum="true"
						src="${elasticsearch.analysis-kuromoji.zip.url}"
					/>
				</then>
			</if>

			<if>
				<not>
					<available file="${elasticsearch.dir}/${elasticsearch.analysis-smartcn.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${elasticsearch.dir}/${elasticsearch.analysis-smartcn.zip.name}"
						skipChecksum="true"
						src="${elasticsearch.analysis-smartcn.zip.url}"
					/>
				</then>
			</if>

			<if>
				<not>
					<available file="${elasticsearch.dir}/${elasticsearch.analysis-stempel.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${elasticsearch.dir}/${elasticsearch.analysis-stempel.zip.name}"
						skipChecksum="true"
						src="${elasticsearch.analysis-stempel.zip.url}"
					/>
				</then>
			</if>

			<if>
				<os family="unix" />
				<then>
					<for list="${elasticsearch.analysis-icu.zip.name},${elasticsearch.analysis-kuromoji.zip.name},${elasticsearch.analysis-smartcn.zip.name},${elasticsearch.analysis-stempel.zip.name}" param="elasticsearch.plugin.name">
						<sequential>
							<exec dir="${elasticsearch.dir}/bin" executable="/bin/bash">
								<arg value="-c" />
								<arg value="./elasticsearch-plugin install file:///${elasticsearch.dir}/@{elasticsearch.plugin.name}" />
							</exec>
						</sequential>
					</for>
				</then>
				<elseif>
					<os family="windows" />
					<then>
						<for list="${elasticsearch.analysis-icu.zip.name},${elasticsearch.analysis-kuromoji.zip.name},${elasticsearch.analysis-smartcn.zip.name},${elasticsearch.analysis-stempel.zip.name}" param="elasticsearch.plugin.name">
							<sequential>
								<exec dir="${elasticsearch.dir}/bin" executable="cmd">
									<arg value="/c" />
									<arg value="elasticsearch-plugin install file:///${elasticsearch.dir}/@{elasticsearch.plugin.name}" />
								</exec>
							</sequential>
						</for>
					</then>
				</elseif>
			</if>

			<lstopwatch action="total" name="prepare.elasticsearch.analyzers" />
		</sequential>
	</macrodef>

	<macrodef name="prepare-elasticsearch-ltr">
		<sequential>
			<lstopwatch action="start" name="prepare.elasticsearch.ltr" />

			<property name="ltr.plugin.version" value="1.5.7" />

			<property name="elasticsearch.ltr.zip.name" value="ltr-plugin-v${ltr.plugin.version}-es${elasticsearch.version}.zip" />

			<if>
				<not>
					<available file="${elasticsearch.dir}/${elasticsearch.ltr.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${elasticsearch.dir}/${elasticsearch.ltr.zip.name}"
						skipChecksum="true"
						src="https://github.com/o19s/elasticsearch-learning-to-rank/releases/download/v${ltr.plugin.version}-es${elasticsearch.version}/${elasticsearch.ltr.zip.name}"
					/>
				</then>
			</if>

			<exec dir="${elasticsearch.dir}/bin" executable="/bin/bash" inputstring="y&#x0A;" osfamily="unix">
				<arg value="-c" />
				<arg value="./elasticsearch-plugin install file:///${elasticsearch.dir}/${elasticsearch.ltr.zip.name}" />
			</exec>

			<exec dir="${elasticsearch.dir}/bin" executable="cmd" inputstring="y&#x0A;" osfamily="windows">
				<arg value="/c" />
				<arg value="elasticsearch-plugin install file:///${elasticsearch.dir}/${elasticsearch.ltr.zip.name}" />
			</exec>

			<lstopwatch action="total" name="prepare.elasticsearch.ltr" />
		</sequential>
	</macrodef>

	<macrodef name="set-up-standard-elasticsearch">
		<sequential>
			<unzip-elasticsearch />

			<prepare-elasticsearch-analyzers />

			<configure-elasticsearch-properties />

			<configure-portal-remote-elasticsearch-osgi-properties />
		</sequential>
	</macrodef>

	<macrodef name="set-x-pack-user-passwords">
		<sequential>
			<exec dir="${elasticsearch.dir}/bin" executable="/bin/bash" osfamily="unix" outputproperty="elastic.xpack.user.passwords">
				<arg value="-c" />
				<arg value="./elasticsearch-setup-passwords auto --batch" />
			</exec>

			<exec dir="${elasticsearch.dir}/bin" executable="cmd" osfamily="windows" outputproperty="elastic.xpack.user.passwords">
				<arg value="/c" />
				<arg value="elasticsearch-setup-passwords auto --batch" />
			</exec>

			<propertyregex
				input="${elastic.xpack.user.passwords}"
				override="true"
				property="elastic.xpack.elastic.user.password"
				regexp="(PASSWORD elastic = )(\S*)"
				select="\2"
			/>
		</sequential>
	</macrodef>

	<macrodef name="start-elasticsearch-with-clustering">
		<sequential>
			<set-up-standard-elasticsearch />

			<prepare-additional-elasticsearch-bundles total.bundles="${elasticsearch.cluster.size}" />

			<var name="elasticsearch.node.number" value="1" />
			<var name="elasticsearch.port.number" value="9200" />

			<antelope:repeat count="${elasticsearch.cluster.size}">
				<antcall target="start-elasticsearch-node">
					<param name="elasticsearch.bundle.number" value="${elasticsearch.node.number}" />
					<param name="elasticsearch.port" value="${elasticsearch.port.number}" />
				</antcall>

				<math
					datatype="int"
					operand1="${elasticsearch.node.number}"
					operand2="1"
					operation="+"
					result="elasticsearch.node.number"
				/>

				<math
					datatype="int"
					operand1="${elasticsearch.port.number}"
					operand2="1"
					operation="+"
					result="elasticsearch.port.number"
				/>
			</antelope:repeat>
		</sequential>
	</macrodef>

	<macrodef name="start-elasticsearch-with-ltr">
		<sequential>
			<set-up-standard-elasticsearch />

			<configure-elasticsearch-discovery-type-single-node />

			<configure-elasticsearch-ltr-properties />

			<prepare-elasticsearch-ltr />

			<if>
				<not>
					<available file="${liferay.home}/data/elasticsearch7/repo" type="dir" />
				</not>
				<then>
					<mkdir dir="${liferay.home}/data/elasticsearch7/repo" />
				</then>
			</if>

			<chmod
				maxparallel="10"
				perm="a+rwx"
				type="both"
			>
				<fileset
					dir="${liferay.home}/data/elasticsearch7/repo"
				/>
			</chmod>

			<antcall target="start-elasticsearch-node" />
		</sequential>
	</macrodef>

	<macrodef name="start-elasticsearch-with-multiple-connections">
		<sequential>
			<set-up-standard-elasticsearch />

			<configure-elasticsearch-discovery-type-single-node />

			<prepare-additional-elasticsearch-bundles total.bundles="2" />

			<configure-elasticsearch-second-cluster-properties />

			<antcall target="start-elasticsearch-node">
				<param name="elasticsearch.bundle.number" value="1" />
			</antcall>

			<antcall target="start-elasticsearch-node">
				<param name="elasticsearch.bundle.number" value="2" />
				<param name="elasticsearch.port" value="9202" />
			</antcall>

			<if>
				<istrue value="${elasticsearch.ccr.enabled}" />
				<then>
					<configure-portal-ccr-osgi-properties />
				</then>
				<else>
					<configure-portal-second-connection-osgi-properties connection.name="connection2" />
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="start-elasticsearch-with-xpack">
		<sequential>
			<set-up-standard-elasticsearch />

			<configure-elasticsearch-discovery-type-single-node />

			<generate-x-pack-security-certificates />

			<generate-x-pack-security-truststores />

			<configure-portal-x-pack-security-truststore />

			<if>
				<equals arg1="${elastic.xpack.configure.tls.cipher.suites}" arg2="true" />
				<then>
					<configure-portal-x-pack-security-tls-cipher-suites />
				</then>
			</if>

			<configure-elasticsearch-monitoring-property />

			<if>
				<equals arg1="${elastic.pki.authentication.enabled}" arg2="true" />
				<then>
					<configure-elasticsearch-x-pack-pki-security-properties />
				</then>
				<elseif>
					<equals arg1="${elastic.xpack.configure.tls.cipher.suites}" arg2="true" />
					<then>
						<configure-elasticsearch-x-pack-security-tls-cipher-suites-properties />
					</then>
				</elseif>
				<else>
					<configure-elasticsearch-x-pack-security-properties />
				</else>
			</if>

			<get-testcase-property if:set="env.JENKINS_HOME" property.name="elasticsearch.jdk11.enabled" />

			<configure-elasticsearch-jdk11 if:true="${elasticsearch.jdk11.enabled}" />

			<antcall target="start-elasticsearch-node" />

			<set-x-pack-user-passwords />

			<if>
				<equals arg1="${elastic.pki.authentication.enabled}" arg2="true" />
				<then>
					<check-elasticsearch-security authentication.type="PKI" />

					<configure-portal-x-pack-pki-osgi-properties />
				</then>
				<else>
					<check-elasticsearch-security authentication.type="basic" />

					<configure-portal-x-pack-osgi-properties />
				</else>
			</if>

			<antcall target="start-kibana" />
		</sequential>
	</macrodef>

	<macrodef name="unzip-boston-dataset-index">
		<sequential>
			<property name="boston-dataset-index.zip.name" value="boston-dataset-index.zip" />

			<if>
				<not>
					<available file="${liferay.home}/${boston-dataset-index.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${liferay.home}/${boston-dataset-index.zip.name}"
						skipChecksum="true"
						src="http://files.liferay.com/private/apps/elastic/elasticsearch/${boston-dataset-index.zip.name}"
					/>
				</then>
			</if>

			<unzip
				dest="${liferay.home}/data/elasticsearch7/repo"
				src="${liferay.home}/${boston-dataset-index.zip.name}"
			/>
		</sequential>
	</macrodef>

	<macrodef name="unzip-elasticsearch">
		<sequential>
			<delete dir="${elasticsearch.dir}" />

			<if>
				<os family="mac" />
				<then>
					<if>
						<not>
							<available file="${app.server.parent.dir}/${elasticsearch.tar.name.mac}" />
						</not>
						<then>
							<mirrors-get
								dest="${app.server.parent.dir}/${elasticsearch.tar.name.mac}"
								skipChecksum="true"
								src="${elasticsearch.tar.url.mac}"
							/>
						</then>
					</if>

					<untar
						compression="gzip"
						dest="${app.server.parent.dir}"
						src="${app.server.parent.dir}/${elasticsearch.tar.name.mac}"
					/>
				</then>
			</if>

			<if>
				<and>
					<not>
						<os family="mac" />
					</not>
					<os family="unix" />
				</and>
				<then>
					<if>
						<not>
							<available file="${app.server.parent.dir}/${elasticsearch.tar.name.linux}" />
						</not>
						<then>
							<mirrors-get
								dest="${app.server.parent.dir}/${elasticsearch.tar.name.linux}"
								skipChecksum="true"
								src="${elasticsearch.tar.url.linux}"
							/>
						</then>
					</if>

					<untar
						compression="gzip"
						dest="${app.server.parent.dir}"
						src="${app.server.parent.dir}/${elasticsearch.tar.name.linux}"
					/>
				</then>
			</if>

			<if>
				<os family="windows" />
				<then>
					<if>
						<not>
							<available file="${app.server.parent.dir}/${elasticsearch.zip.name.windows}" />
						</not>
						<then>
							<mirrors-get
								dest="${app.server.parent.dir}/${elasticsearch.zip.name.windows}"
								skipChecksum="true"
								src="${elasticsearch.zip.url.windows}"
							/>
						</then>
					</if>

					<unzip
						dest="${app.server.parent.dir}"
						src="${app.server.parent.dir}/${elasticsearch.zip.name.windows}"
					/>
				</then>
			</if>

			<chmod
				maxparallel="10"
				perm="a+rwx"
				type="both"
			>
				<fileset
					dir="${elasticsearch.dir}"
				/>
			</chmod>
		</sequential>
	</macrodef>

	<macrodef name="unzip-kibana">
		<sequential>
			<delete dir="${elastic.kibana.dir}" />

			<if>
				<os family="mac" />
				<then>
					<if>
						<not>
							<available file="${app.server.parent.dir}/${elastic.kibana.tar.name.mac}" />
						</not>
						<then>
							<mirrors-get
								dest="${app.server.parent.dir}/${elastic.kibana.tar.name.mac}"
								skipChecksum="true"
								src="${elastic.kibana.tar.url.mac}"
							/>
						</then>
					</if>

					<exec dir="${app.server.parent.dir}" executable="/bin/bash">
						<arg value="-c" />
						<arg value="tar -zxf ${elastic.kibana.tar.name.mac}" />
					</exec>

					<move
						file="${app.server.parent.dir}/kibana-${elasticsearch.version}-darwin-x86_64"
						tofile="${elastic.kibana.dir}"
					/>
				</then>
			</if>

			<if>
				<and>
					<not>
						<os family="mac" />
					</not>
					<os family="unix" />
				</and>
				<then>
					<if>
						<not>
							<available file="${app.server.parent.dir}/${elastic.kibana.tar.name.linux}" />
						</not>
						<then>
							<mirrors-get
								dest="${app.server.parent.dir}/${elastic.kibana.tar.name.linux}"
								skipChecksum="true"
								src="${elastic.kibana.tar.url.linux}"
							/>
						</then>
					</if>

					<untar
						compression="gzip"
						dest="${app.server.parent.dir}"
						src="${app.server.parent.dir}/${elastic.kibana.tar.name.linux}"
					/>

					<move
						file="${app.server.parent.dir}/kibana-${elasticsearch.version}-linux-x86_64"
						tofile="${elastic.kibana.dir}"
					/>
				</then>
			</if>

			<if>
				<os family="windows" />
				<then>
					<if>
						<not>
							<available file="${app.server.parent.dir}/${elastic.kibana.zip.name}" />
						</not>
						<then>
							<mirrors-get
								dest="${app.server.parent.dir}/${elastic.kibana.zip.name.windows}"
								skipChecksum="true"
								src="${elastic.kibana.zip.url.windows}"
							/>
						</then>
					</if>

					<unzip
						dest="${app.server.parent.dir}"
						src="${app.server.parent.dir}/${elastic.kibana.zip.name.windows}"
					/>

					<move
						file="${app.server.parent.dir}/kibana-${elasticsearch.version}-windows-x86"
						tofile="${elastic.kibana.dir}"
					/>
				</then>
			</if>

			<chmod
				maxparallel="10"
				perm="a+rwx"
				type="both"
			>
				<fileset
					dir="${elastic.kibana.dir}"
				/>
			</chmod>
		</sequential>
	</macrodef>

	<macrodef name="unzip-ltr-linear-regression-model">
		<sequential>
			<property name="ltr-linear-regression-model.zip.name" value="ltr-linear-regression-model.zip" />

			<if>
				<not>
					<available file="${liferay.home}/${ltr-linear-regression-model.zip.name}" />
				</not>
				<then>
					<mirrors-get
						dest="${liferay.home}/${ltr-linear-regression-model.zip.name}"
						skipChecksum="true"
						src="http://files.liferay.com/private/apps/elastic/elasticsearch/${ltr-linear-regression-model.zip.name}"
					/>
				</then>
			</if>

			<unzip
				dest="${liferay.home}/data/elasticsearch7/repo"
				src="${liferay.home}/${ltr-linear-regression-model.zip.name}"
			/>
		</sequential>
	</macrodef>

	<target name="add-boston-dataset-index">
		<unzip-boston-dataset-index />

		<antcall target="restore-backup">
			<param name="backup.index" value="${backup.index}" />
			<param name="elasticsearch.port" value="${elasticsearch.port}" />
		</antcall>

		<echo>Finished adding Boston dataset index.</echo>
	</target>

	<target name="add-ltr-linear-regression-model">
		<unzip-ltr-linear-regression-model />

		<antcall target="restore-backup">
			<param name="backup.index" value="${backup.index}" />
			<param name="elasticsearch.port" value="${elasticsearch.port}" />
		</antcall>

		<echo>Finished adding LTR linear regression model.</echo>
	</target>

	<target name="get-sidecar-binaries">
		<mirrors-get
			dest="${liferay.home}"
			skipChecksum="true"
			src="${elasticsearch.sidecar.analysis-icu.zip.url}"
		/>

		<mirrors-get
			dest="${liferay.home}"
			skipChecksum="true"
			src="${elasticsearch.sidecar.analysis-kuromoji.zip.url}"
		/>

		<mirrors-get
			dest="${liferay.home}"
			skipChecksum="true"
			src="${elasticsearch.sidecar.analysis-smartcn.zip.url}"
		/>

		<mirrors-get
			dest="${liferay.home}"
			skipChecksum="true"
			src="${elasticsearch.sidecar.analysis-stempel.zip.url}"
		/>

		<mirrors-get
			dest="${liferay.home}"
			skipChecksum="true"
			src="${elasticsearch.sidecar.no.jdk.tar.url}"
		/>
	</target>

	<target name="print-elasticsearch-indices">
		<if>
			<http url="http://localhost:${elasticsearch.port}" />
			<then>
				<exec executable="curl" outputproperty="curl.output.elasticsearch.indices">
					<arg value="localhost:${elasticsearch.port}/_cat/indices" />
					<arg value="--silent" />
				</exec>

				<echo></echo>
				<echo>##</echo>
				<echo>## All Elasticsearch Indices on Port ${elasticsearch.port}</echo>
				<echo>##</echo>
				<echo></echo>
				<echo>${curl.output.elasticsearch.indices}</echo>
				<echo></echo>

				<propertyregex
					input="${curl.output.elasticsearch.indices}"
					property="liferay.company.index"
					regexp="liferay-\d{5}"
					select="\0"
				/>

				<property name="company.index.query">
					<![CDATA[
						{
							"query": {
								"bool": {
									"must": [
										{
											"match": {
												"userName": "test test"
											}
										}
									],
									"must_not": [
										{
											"match": {
												"entryClassName": "com.liferay.calendar.model.Calendar"
											}
										},
										{
											"match": {
												"entryClassName": "com.liferay.portal.kernel.model.Layout"
											}
										},
										{
											"match": {
												"hidden": "true"
											}
										}
									]
								}
							}
						}
					]]>
				</property>

				<exec executable="curl" outputproperty="curl.output.company.index">
					<arg value="-H" />
					<arg value="Content-Type: application/json" />
					<arg value="localhost:${elasticsearch.port}/${liferay.company.index}/_search?pretty" />
					<arg value="-d" />
					<arg value="${company.index.query}" />
					<arg value="--silent" />
				</exec>

				<echo></echo>
				<echo>##</echo>
				<echo>## Elasticsearch Liferay Company Index ${liferay.company.index} on Port ${elasticsearch.port}</echo>
				<echo>##</echo>
				<echo></echo>
				<echo>${curl.output.company.index}</echo>
				<echo></echo>
			</then>
			<else>
				<echo>Unable to print Elasticsearch indices at localhost:${elasticsearch.port}</echo>
			</else>
		</if>
	</target>

	<target name="restore-backup">
		<property name="register.repository">
			<![CDATA[
				{
					"settings": {
						"location": "${liferay.home}/data/elasticsearch7/repo"
					},
					"type": "fs"
				}
			]]>
		</property>

		<exec executable="curl" outputproperty="curl.output">
			<arg value="-H" />
			<arg value="Content-Type: application/json" />
			<arg value="-X" />
			<arg value="PUT" />
			<arg value="localhost:${elasticsearch.port}/_snapshot/my_backup" />
			<arg value="-d" />
			<arg value="${register.repository}" />
		</exec>

		<echo>Defining snapshot repository.${line.separator}${curl.output}</echo>

		<property name="restore.repository">
			<![CDATA[
				{
					"ignore_unavailable": true,
					"include_global_state": true,
					"indices": "${backup.index}",
					"rename_pattern": "index_(.+)",
					"rename_replacement": "restored_index_$1"
				}
			]]>
		</property>

		<exec executable="curl" outputproperty="curl.output">
			<arg value="-H" />
			<arg value="Content-Type: application/json" />
			<arg value="-X" />
			<arg value="POST" />
			<arg value="localhost:${elasticsearch.port}/_snapshot/my_backup/snapshot_2/_restore" />
			<arg value="-d" />
			<arg value="${restore.repository}" />
		</exec>

		<echo>Restoring snapshot.${line.separator}${curl.output}</echo>
	</target>

	<target name="start-elasticsearch">
		<lstopwatch action="start" name="start.elasticsearch" />

		<if>
			<isset property="env.JENKINS_HOME" />
			<then>
				<get-testcase-property property.name="elastic.pki.authentication.enabled" />
				<get-testcase-property property.name="elastic.xpack.configure.tls.cipher.suites" />
				<get-testcase-property property.name="elastic.xpack.enabled" />
				<get-testcase-property property.name="elasticsearch.ccr.enabled" />
				<get-testcase-property property.name="elasticsearch.cluster.size" />
				<get-testcase-property property.name="elasticsearch.ltr.enabled" />
				<get-testcase-property property.name="elasticsearch.multiple.connections" />
			</then>
		</if>

		<local name="setup.type" />

		<property if:true="${elastic.pki.authentication.enabled}" name="setup.type" value="elastic.xpack.enabled" />
		<property if:true="${elastic.xpack.enabled}" name="setup.type" value="elastic.xpack.enabled" />
		<property if:true="${elasticsearch.ccr.enabled}" name="setup.type" value="elasticsearch.multiple.connections" />
		<property if:set="elasticsearch.cluster.size" name="setup.type" value="elasticsearch.cluster.size" />
		<property if:true="${elasticsearch.ltr.enabled}" name="setup.type" value="elasticsearch.ltr.enabled" />
		<property if:true="${elasticsearch.multiple.connections}" name="setup.type" value="elasticsearch.multiple.connections" />

		<switch value="${setup.type}">
			<case value="elastic.xpack.enabled">
				<start-elasticsearch-with-xpack />
			</case>
			<case value="elasticsearch.cluster.size">
				<start-elasticsearch-with-clustering />
			</case>
			<case value="elasticsearch.ltr.enabled">
				<start-elasticsearch-with-ltr />
			</case>
			<case value="elasticsearch.multiple.connections">
				<start-elasticsearch-with-multiple-connections />
			</case>
			<default>
				<set-up-standard-elasticsearch />

				<configure-elasticsearch-discovery-type-single-node />

				<antcall target="start-elasticsearch-node" unless:true="${skip.server.startup}" />
			</default>
		</switch>

		<lstopwatch action="total" name="start.elasticsearch" />
	</target>

	<target name="start-elasticsearch-node">
		<lstopwatch action="start" name="start.elasticsearch.node" />

		<condition else="${elasticsearch.dir}" property="elasticsearch.start.dir" value="${elasticsearch.dir}-${elasticsearch.bundle.number}">
			<isset property="elasticsearch.bundle.number" />
		</condition>

		<chmod
			maxparallel="10"
			perm="a+rwx"
			type="both"
		>
			<fileset
				dir="${elasticsearch.start.dir}"
			/>
		</chmod>

		<exec dir="${elasticsearch.start.dir}/bin" executable="/bin/bash" osfamily="unix">
			<arg value="-c" />
			<arg if:set="env.JENKINS_HOME" value="sudo -H -u shutdown bash -c './elasticsearch -d -p pid-elasticsearch'" />
			<arg unless:set="env.JENKINS_HOME" value="./elasticsearch -d -p pid-elasticsearch" />
		</exec>

		<exec dir="${elasticsearch.start.dir}/bin" executable="cmd" osfamily="windows" spawn="true">
			<arg value="/c" />
			<arg value="elasticsearch -d -p pid-elasticsearch" />
		</exec>

		<property name="elasticsearch.port" unless:set="elasticsearch.port" value="9200" />

		<waitfor maxwait="120" maxwaitunit="second" timeoutproperty="elasticsearch.server.not.started">
			<socket port="${elasticsearch.port}" server="localhost" />
		</waitfor>

		<print-files dir="${elasticsearch.start.dir}/logs/" exclude="*_*" include="LiferayElasticsearchCluster*.log" />

		<lstopwatch action="total" name="start.elasticsearch.node" />

		<fail if="elasticsearch.server.not.started" message="Elasticsearch server on port ${elasticsearch.port} failed to initialize." />
	</target>

	<target name="start-kibana">
		<lstopwatch action="start" name="start.kibana" />

		<unzip-kibana />

		<configure-kibana-properties />

		<configure-kibana-x-pack-security-properties if:true="${elastic.xpack.enabled}" />

		<antcall target="start-kibana-server" unless:true="${skip.server.startup}" />

		<lstopwatch action="total" name="start.kibana" />
	</target>

	<target name="start-kibana-server">
		<exec dir="${elastic.kibana.dir}/bin" executable="/bin/bash" osfamily="unix">
			<arg value="-c" />
			<arg value="./kibana --allow-root &gt; kibana.log 2&gt;&amp;1 &amp;" />
		</exec>

		<exec dir="${elastic.kibana.dir}/bin" executable="cmd" osfamily="windows">
			<arg value="/c" />
			<arg value="kibana" />
		</exec>

		<waitfor maxwait="60" maxwaitunit="second" timeoutproperty="kibana.server.not.started">
			<socket port="5601" server="localhost" />
		</waitfor>

		<if>
			<isset property="kibana.server.not.started" />
			<then>
				<lstopwatch action="total" name="start.kibana" />

				<fail message="Kibana failed to start on port 5601." />
			</then>
		</if>
	</target>

	<target name="stop-elasticsearch">
		<condition else="${elasticsearch.dir}" property="elasticsearch.stop.dir" value="${elasticsearch.dir}-${elasticsearch.bundle.number}">
			<isset property="elasticsearch.bundle.number" />
		</condition>

		<if>
			<available file="${elasticsearch.stop.dir}/pid-elasticsearch" />
			<then>
				<exec dir="${elasticsearch.stop.dir}" executable="/bin/bash" osfamily="unix">
					<arg value="-c" />
					<arg value="pkill -F pid-elasticsearch" />
				</exec>

				<exec dir="${elasticsearch.stop.dir}/bin" executable="cmd" osfamily="windows" spawn="true">
					<arg value="/c" />
					<arg value="for /f %x in (pid-elasticsearch) do taskkill /f /pid %x" />
				</exec>

				<print-files dir="${elasticsearch.stop.dir}/logs/" exclude="*_*" include="LiferayElasticsearchCluster*.log" />
			</then>
			<else>
				<echo>The Elasticsearch server in ${elasticsearch.stop.dir} has already been stopped</echo>
			</else>
		</if>
	</target>

	<target name="stop-kibana">
		<if>
			<available file="${elastic.kibana.dir}/bin" type="dir" />
			<then>
				<exec dir="${elastic.kibana.dir}/bin" executable="/bin/bash" osfamily="unix">
					<arg value="-c" />
					<arg value="pkill -F pid-kibana" />
				</exec>

				<print-file file.name="${elastic.kibana.dir}/bin/kibana.log" />
			</then>
			<else>
				<exec executable="/bin/bash" osfamily="unix">
					<arg value="-c" />
					<arg value="fuser -k 5601/tcp" />
				</exec>
			</else>
		</if>
	</target>
</project>