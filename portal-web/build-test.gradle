import com.liferay.gradle.plugins.defaults.tasks.ReplaceRegexTask
import com.liferay.gradle.util.GradleUtil

import java.util.regex.Matcher

import org.gradle.api.artifacts.Configuration
import org.gradle.api.artifacts.ResolvedArtifact
import org.gradle.util.GUtil

buildscript {
	dependencies {
		classpath group: "com.liferay", name: "com.liferay.gradle.plugins.defaults", version: "7.0.325"
		classpath group: "com.liferay", name: "com.liferay.gradle.plugins.maven.plugin.builder", version: "1.2.3"
		classpath group: "de.undercouch", name: "gradle-download-task", version: "3.3.0"
		classpath group: "gradle.plugin.org.ysb33r.gradle", name: "gradletest", version: "1.1"
	}

	repositories {
		if (!Boolean.getBoolean("maven.local.ignore")) {
			mavenLocal()

			File tmpMavenRepositoryDir = null

			if (hasProperty("tmp.maven.repository.dir")) {
				tmpMavenRepositoryDir = file(properties["tmp.maven.repository.dir"])
			}
			else {
				tmpMavenRepositoryDir = file("../.m2-tmp")
			}

			if (tmpMavenRepositoryDir.exists()) {
				maven {
					url tmpMavenRepositoryDir
				}
			}
		}

		maven {
			url System.properties["repository.url"] ?: "https://repository-cdn.liferay.com/nexus/content/groups/public"
		}
	}
}

apply plugin: "com.liferay.poshi.runner"
apply plugin: "com.liferay.poshi.runner.resources.defaults"

poshiRunner {
	if (project.hasProperty("poshiRunnerExtProperties")) {
		poshiPropertiesFile = new File(projectDir.parentFile, project.properties["poshiRunnerExtProperties"])
	}

	openCVVersion = "2.4.10-0.10"
}

task updateGradleCache
task updatePoshiCore(type: ReplaceRegexTask)

configurations {
	sikuliComplete
}

dependencies {
	if (poshiRunner.poshiPropertiesFile && poshiRunner.poshiPropertiesFile.exists()) {
		Properties poshiRunnerProperties = GUtil.loadProperties(poshiRunner.poshiPropertiesFile)

		String testBaseDirName = poshiRunnerProperties.getProperty("test.base.dir.name")

		if (testBaseDirName) {
			Matcher matcher = testBaseDirName =~ /.*liferay-qa-portal-legacy-ee.*\/(?<portalVersion>\d+(\.\d+)*).*/

			if (matcher.find()) {
				String portalVersion = matcher.group("portalVersion")

				if (portalVersion.startsWith("6.1")) {
					poshiRunnerResources group: "com.liferay.poshi.runner.resources", name: "portal-ee-6.1.x", version: "202+"
				}
				else if (portalVersion.startsWith("6.2")) {
					poshiRunnerResources group: "com.liferay.poshi.runner.resources", name: "portal-ee-6.2.x", version: "202+"
				}
				else if (portalVersion.startsWith("7.0")) {
					poshiRunnerResources group: "com.liferay.poshi.runner.resources", name: "portal-7.0.x", version: "202+"
				}
				else if (portalVersion.startsWith("7.1")) {
					poshiRunnerResources group: "com.liferay.poshi.runner.resources", name: "portal-7.1.x", version: "202+"
				}
				else if (portalVersion.startsWith("7.2")) {
					poshiRunnerResources group: "com.liferay.poshi.runner.resources", name: "portal-7.2.x", version: "202+"
				}
				else if (portalVersion.startsWith("7.3")) {
					poshiRunnerResources group: "com.liferay.poshi.runner.resources", name: "portal-7.3.x", version: "202+"
				}
				else if (portalVersion.startsWith("7.4")) {
					poshiRunnerResources group: "com.liferay.poshi.runner.resources", name: "portal-master", version: "202+"
				}
			}
		}
	}

	["x86", "x86_64"].each {
		sikuliComplete classifier: "linux-${it}", group: "org.bytedeco.javacpp-presets", name: "opencv", version: poshiRunner.openCVVersion
		sikuliComplete classifier: "windows-${it}", group: "org.bytedeco.javacpp-presets", name: "opencv", version: poshiRunner.openCVVersion
	}

	sikuliComplete classifier: "macosx-x86_64", group: "org.bytedeco.javacpp-presets", name: "opencv", version: poshiRunner.openCVVersion
}

poshiRunnerResources {
	baseName "portal"

	Properties testProperties = GUtil.loadProperties(file("poshi.properties"))

	String testBaseDirName = testProperties.getProperty("test.base.dir.name")

	if ((testBaseDirName != null) && !testBaseDirName.isEmpty()) {
		dirs.add(testBaseDirName)
	}

	String testDirs = testProperties.getProperty("test.dirs")

	if ((testDirs != null) && !testDirs.isEmpty()) {
		dirs.addAll(testDirs.split(","))
	}
}

repositories {
	if (!Boolean.getBoolean("maven.local.ignore")) {
		mavenLocal()

		if (project.hasProperty("tmp.maven.repository.dir")) {
			File tmpMavenRepositoryDir = file(project.properties["tmp.maven.repository.dir"])

			if (tmpMavenRepositoryDir.exists()) {
				maven {
					url tmpMavenRepositoryDir
				}
			}
		}
	}

	maven {
		url "https://repository-cdn.liferay.com/nexus/content/groups/public"
	}
}

updateGradleCache {
	doLast {
		configurations.poshiRunner.resolve()
		configurations.sikuliComplete.resolve()
	}
}

updatePoshiCore {
	Configuration compileConfiguration = project.configurations.getByName("poshiRunner")

	ResolvedArtifact resolvedArtifact = compileConfiguration.resolvedConfiguration.resolvedArtifacts.find {
		it.name.contains('com.liferay.poshi.core')
	}

	setReplacement(resolvedArtifact.moduleVersion.id.version)

	match(/group: "com\.liferay", name: "com\.liferay\.poshi\.core", version: "(\d.+)"/, "../modules/test/jenkins-results-parser/build.gradle", "../modules/util/source-formatter/build.gradle", "../modules/util/source-formatter-standalone/build.gradle")
}