definition {

	macro _saveDisplaySettings {
		PortletEntry.save();
	}

	macro addLDAPServer {
		PortalSettings.gotoConfiguration(
			baseURL = "${baseURL}",
			configurationCategory = "LDAP",
			configurationName = "Servers",
			configurationScope = "Virtual Instance Scope");

		AssertClick(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_LDAP_ADD_BUTTON",
			value1 = "Add");

		if (!(isSet(ldapServerName))) {
			var ldapServerName = "ApacheDS Server";
		}

		Type(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_SERVER_NAME",
			value1 = "${ldapServerName}");

		Click(locator1 = "PortalSettingsAuthentication#LDAP_SERVER_DEFAULT_VALUES_APACHE_DIRECTORY_SERVER_RADIO");

		Button.clickSave();
	}

	macro configureAudienceTargetingAnalytics {
		if (isSet(enableAnalyticsList)) {
			for (var enableAnalytics : list "${enableAnalyticsList}") {
				Check.checkToggleSwitch(
					key_toggleSwitchLabel = "${enableAnalytics}",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
		}

		if (isSet(disableAnalyticsList)) {
			for (var disableAnalytics : list "${disableAnalyticsList}") {
				Uncheck.uncheckToggleSwitch(
					key_toggleSwitchLabel = "${disableAnalytics}",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
		}

		PortletEntry.save();
	}

	macro configureContentSharingAcrossSitesCP {
		if ("${enableAcrossSite}" == "true") {
			Check(locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_CHECKBOX");

			PortletEntry.save();

			AssertChecked(locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_CHECKBOX");
		}
		else if ("${enableAcrossSite}" == "false") {
			Uncheck(locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_CHECKBOX");

			PortletEntry.save();

			AssertNotChecked(locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_CHECKBOX");
		}
	}

	macro configureContentSharingSubSitesCP {
		if ("${subSites}" == "enabledByDefault") {
			Select(
				locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_SELECTOR",
				value1 = "Enabled by Default");

			PortletEntry.save();

			AssertSelectedLabel(
				locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_SELECTOR",
				value1 = "Enabled by Default");
		}
		else if ("${subSites}" == "disabledByDefault") {
			Select(
				locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_SELECTOR",
				value1 = "Disabled by Default");

			PortletEntry.save();

			AssertSelectedLabel(
				locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_SELECTOR",
				value1 = "Disabled by Default");
		}
		else if ("${subSites}" == "disabled") {
			Select(
				locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_SELECTOR",
				value1 = "Disabled");

			PortletEntry.save();

			AssertSelectedLabel(
				locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_SELECTOR",
				value1 = "Disabled");
		}
	}

	macro configureCurrentLanguagesCP {
		if (isSet(currentPortalLanguages)) {
			while (IsElementPresent(locator1 = "LanguageConfiguration#LANGUAGES_CURRENT_SELECT")) {
				AddSelection(
					locator1 = "LanguageConfiguration#LANGUAGES_CURRENT",
					value1 = "index=0");

				Click(locator1 = "Button#MOVE_CURRENT_TO_AVAILABLE");
			}

			for (var currentPortalLanguage : list "${currentPortalLanguages}") {
				var currentPortalLanguage = "${currentPortalLanguage}";

				AddSelection(
					locator1 = "LanguageConfiguration#LANGUAGES_AVAILABLE",
					value1 = "${currentPortalLanguage}");

				Click(locator1 = "Button#MOVE_AVAILABLE_TO_CURRENT");

				AssertTextEquals.assertPartialText(
					locator1 = "LanguageConfiguration#LANGUAGES_CURRENT",
					value1 = "${currentPortalLanguage}");
			}
		}

		if (isSet(defaultPortalLanguage)) {
			var defaultPortalLanguage = "${defaultPortalLanguage}";

			Select(
				locator1 = "Select#DEFAULT_LANGUAGE",
				value1 = "${defaultPortalLanguage}");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_3",
				value1 = "This change will only affect the newly created localized content.");
		}

		if ("${failExpected}" == "true") {
			Button.clickSave();

			Alert.viewErrorMessage(errorMessage = "${errorMessage}");
		}
		else {
			PortletEntry.save();
		}
	}

	macro configureEmailSender {
		Type(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_SENDER_NAME_FIELD",
			value1 = "${emailSenderName}");

		Type(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_SENDER_ADDRESS_FIELD",
			value1 = "${emailAddress}");

		PortalSettings._saveDisplaySettings();
	}

	macro configureGoogleDrive {
		Type(
			key_text = "clientId",
			locator1 = "TextArea#ANY",
			value1 = "${googleClientId}");

		Type(
			key_text = "clientSecret",
			locator1 = "TextArea#ANY",
			value1 = "${googleClientSecret}");

		if (isSet(googlePickerApiKey)) {
			Type(
				key_text = "pickerAPIKey",
				locator1 = "TextArea#ANY",
				value1 = "${googlePickerApiKey}");
		}

		AssertClick(
			locator1 = "Button#SAVE",
			value1 = "Save");

		VerifyElementPresent(locator1 = "Message#SUCCESS");
	}

	macro configureLDAPSetting {
		for (var enableSetting : list "${enableSettingList}") {
			if ("${enableSetting}" == "enabled") {
				PortalSettings.gotoConfiguration(
					configurationCategory = "LDAP",
					configurationName = "General",
					configurationScope = "Virtual Instance Scope");
			}

			if ("${enableSetting}" == "ldapImportEnabled") {
				PortalSettings.gotoConfiguration(
					configurationCategory = "LDAP",
					configurationName = "Import",
					configurationScope = "Virtual Instance Scope");
			}

			if ("${enableSetting}" == "importOnStartup") {
				PortalSettings.gotoConfiguration(
					configurationCategory = "LDAP",
					configurationName = "Import",
					configurationScope = "Virtual Instance Scope");
			}

			FormFields.enableCheckbox(fieldName = "InstanceSettingsPortlet_${enableSetting}");

			PortletEntry.save();
		}
	}

	macro configureOpenSSO {
		Check(locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_ENABLED_CHECKBOX");

		FormFields.editText(
			fieldName = "loginURL",
			fieldValue = "${openSsoLoginURL}");

		FormFields.editText(
			fieldName = "logoutURL",
			fieldValue = "${openSsoLogoutURL}");

		FormFields.editText(
			fieldName = "serviceURL",
			fieldValue = "${openSsoServiceURL}");

		PortletEntry.save();
	}

	macro configureRatingType {
		if ("${configureBlogsRatingType}" == "true") {
			Select(
				locator1 = "Select#BLOGS_RATING",
				value1 = "${ratingType}");
		}

		if ("${configureKbRatingType}" == "true") {
			Select(
				locator1 = "Select#KNOWLEDGE_BASE_RATING",
				value1 = "${ratingType}");
		}

		AssertClickNoError(
			locator1 = "Button#SAVE",
			value1 = "Save");

		AssertConfirm(value1 = "Existing ratings data values will be adapted to match the new ratings type even though it may not be accurate. Do you want to continue?");
	}

	macro configureTimeZone {
		Select(
			locator1 = "Select#TIME_ZONE",
			value1 = "${timeZone}");

		PortalSettings._saveDisplaySettings();
	}

	macro configureWikiService {
		var key_counter = "${counter}";

		Type(
			locator1 = "TextArea#CONFIGURATION",
			value1 = "${editor}");
	}

	macro disableApplicationsMenu {
		PortalSettings.gotoConfiguration(
			configurationCategory = "Navigation",
			configurationName = "Applications Menu",
			configurationScope = "Virtual Instance Scope");

		AssertElementNotPresent(locator1 = "ProductMenu#TOGGLE");

		AssertElementPresent(locator1 = "ApplicationsMenu#TOGGLE");

		FormFields.disableCheckbox(fieldName = "enableApplicationsMenu");

		if (IsElementPresent(locator1 = "Button#SAVE")) {
			AssertClick(
				locator1 = "Button#SAVE",
				value1 = "Save");
		}
		else if (IsElementPresent(locator1 = "Button#UPDATE")) {
			AssertClick(
				locator1 = "Button#UPDATE",
				value1 = "Update");
		}

		Alert.viewSuccessMessage();

		AssertElementPresent(locator1 = "ProductMenu#TOGGLE");

		AssertElementNotPresent(locator1 = "ApplicationsMenu#TOGGLE");
	}

	macro editConfigurationAuthenticationFacebook {
		Check(locator1 = "PortalSettingsAuthentication#AUTHENTICATION_FACEBOOK_ENABLED_CHECKBOX");

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_FACEBOOK_APPLICATION_ID",
			value1 = "${facebookApplicationId}");

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_FACEBOOK_APPLICATION_SECRET",
			value1 = "${facebookApplicationSecret}");

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_FACEBOOK_GRAPH_URL",
			value1 = "https://graph.facebook.com");

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_FACEBOOK_OAUTH_AUTHENTICATION_URL",
			value1 = "https://graph.facebook.com/oauth/authorize");

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_FACEBOOK_OAUTH_TOKEN_URL",
			value1 = "https://graph.facebook.com/oauth/access_token");

		Type(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_FACEBOOK_REDIRECT_URL",
			value1 = "https://localhost:8443/c/portal/facebook_connect_oauth");

		PortletEntry.save();
	}

	macro editConfigurationAuthenticationGeneral {
		if ("${enableRequireStrangers}" == "true") {
			Check(locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_REQUIRE_STRANGERS_TO_VERIFY_THEIR_EMAIL_ADDRESS_CHECKBOX");
		}
		else {
			Select(
				locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_HOW_DO_USERS_AUTHENTICATE_SELECT",
				value1 = "${authenticationMethod}");
		}

		PortletEntry.save();
	}

	macro editConfigurationUsersDefaultUserAssociationsCP {
		PortalSettings.gotoConfiguration(
			configurationCategory = "Users",
			configurationName = "Default User Associations",
			configurationScope = "Virtual Instance Scope");

		if (isSet(orgName)) {
			AssertTextEquals.assertPartialText(
				locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ORGANIZATION_SITES_HEADER",
				value1 = "Organization Sites");

			Type(
				locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ORGANIZATION_SITES_FIELD",
				value1 = "${orgName}");

			PortletEntry.save();

			AssertTextEquals(
				locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ORGANIZATION_SITES_FIELD",
				value1 = "${orgName}");
		}

		if (isSet(roleTitle)) {
			AssertTextEquals.assertPartialText(
				locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ROLES_HEADER",
				value1 = "Roles");

			Type(
				locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ROLES_FIELD",
				value1 = "${roleTitle}");

			PortletEntry.save();

			AssertTextEquals(
				locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ROLES_FIELD",
				value1 = "${roleTitle}");
		}

		if (isSet(userGroupName)) {
			AssertTextEquals.assertPartialText(
				locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_USER_GROUPS_HEADER",
				value1 = "User Groups");

			Type(
				locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_USER_GROUPS_FIELD",
				value1 = "${userGroupName}");

			PortletEntry.save();

			AssertTextEquals(
				locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_USER_GROUPS_FIELD",
				value1 = "${userGroupName}");
		}

		if (isSet(siteName)) {
			AssertTextEquals.assertPartialText(
				locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ORGANIZATION_SITES_HEADER",
				value1 = "Organization Sites");

			Type(
				locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_SITES_FIELD",
				value1 = "${siteName}");

			PortletEntry.save();

			AssertTextEquals(
				locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_SITES_FIELD",
				value1 = "${siteName}");
		}
	}

	macro editConfigurationUsersEmailNotificationsCP {
		PortalSettings.gotoConfiguration(
			configurationCategory = "Email",
			configurationName = "${configurationName}",
			configurationScope = "Virtual Instance Scope");

		if (isSet(notificationsSubject)) {
			FormFields.editText(
				fieldName = "Subject",
				fieldValue = "${notificationsSubject}");
		}

		if (isSet(notificationsBody)) {
			Type.typeCKEditor(
				locator1 = "CKEditor#BODY_FIELD",
				value1 = "${notificationsBody}");
		}

		PortletEntry.save();
	}

	macro editConfigurationUsersPersonalMenuPersonalApplicationLookAndFeel {
		SystemSettings.selectOptionSetting(
			fieldName = "Personal Applications Look and Feel",
			selectOption = "${selectOption}");

		if (IsElementPresent(locator1 = "Button#UPDATE")) {
			PortletEntry.update();
		}
		else if (IsElementPresent(locator1 = "Button#SAVE")) {
			PortletEntry.save();
		}
	}

	macro editConfigurationUsersPersonalMenuShowInControlMenu {
		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "${toggleSwitchLabel}",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		if (IsElementPresent(locator1 = "Button#UPDATE")) {
			PortletEntry.update();
		}
		else if (IsElementPresent(locator1 = "Button#SAVE")) {
			PortletEntry.save();
		}
	}

	macro editDefaultLandingPageCP {
		Type(
			locator1 = "PortalSettings#DEFAULT_LANDING_PAGE_FIELD",
			value1 = "${defaultLandingPage}");

		PortletEntry.save();
	}

	macro editLDAPServer {
		PortalSettings.gotoConfiguration(
			baseURL = "${baseURL}",
			configurationCategory = "LDAP",
			configurationName = "Servers",
			configurationScope = "Virtual Instance Scope");

		if (!(isSet(ldapServerName))) {
			var ldapServerName = "ApacheDS Server";
		}

		var key_ldapServerName = "${ldapServerName}";

		Click(locator1 = "PortalSettingsAuthentication#LDAP_SERVERS_TABLE_EDIT");
	}

	macro editVirtualHostCP {
		Type(
			locator1 = "PortalSettings#VIRTUAL_HOST_FIELD",
			value1 = "${virtualHostName}");

		PortletEntry.save();

		AssertTextEquals(
			locator1 = "PortalSettings#VIRTUAL_HOST_FIELD",
			value1 = "${virtualHostName}");
	}

	macro enableApplicationsMenu {
		ProductMenu.gotoPortletWhenDisableApplicationsMenu(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Navigation",
			configurationName = "Applications Menu",
			configurationScope = "Virtual Instance Scope");

		AssertElementPresent(locator1 = "ProductMenu#TOGGLE");

		AssertElementNotPresent(locator1 = "ApplicationsMenu#TOGGLE");

		FormFields.enableCheckbox(fieldName = "enableApplicationsMenu");

		if (IsElementPresent(locator1 = "Button#SAVE")) {
			AssertClick(
				locator1 = "Button#SAVE",
				value1 = "Save");
		}
		else if (IsElementPresent(locator1 = "Button#UPDATE")) {
			AssertClick(
				locator1 = "Button#UPDATE",
				value1 = "Update");
		}

		Alert.viewSuccessMessage();

		AssertElementNotPresent(locator1 = "ProductMenu#TOGGLE");

		AssertElementPresent(locator1 = "ApplicationsMenu#TOGGLE");
	}

	macro enableGoogleSSOCP {
		Check(locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GOOGLE_ENABLED_CHECKBOX");

		FormFields.editText(
			fieldName = "clientId",
			fieldValue = "${googleClientId}");

		FormFields.editText(
			fieldName = "clientSecret",
			fieldValue = "${googleClientSecret}");

		PortletEntry.save();
	}

	macro enableOpenIDConnectCP {
		if (isSet(systemLevel)) {
			Click.clickAtNotVisible(locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_ID_CONNECT_ENABLED_CHECKBOX_SYSTEM_LEVEL");

			PortletEntry.save();

			AssertChecked.assertCheckedNotVisible(locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_ID_CONNECT_ENABLED_CHECKBOX_SYSTEM_LEVEL");
		}
		else {
			Click.clickAtNotVisible(locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_ID_CONNECT_ENABLED_CHECKBOX");

			PortletEntry.save();

			AssertChecked.assertCheckedNotVisible(locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_ID_CONNECT_ENABLED_CHECKBOX");
		}
	}

	macro enterReservedEmailAddressCP {
		PortalSettings.gotoConfiguration(
			configurationCategory = "User Authentication",
			configurationName = "Reserved Credentials",
			configurationScope = "Virtual Instance Scope");

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_EMAIL_ADDRESSES_HEADER",
			value1 = "Email Addresses");

		Type(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_EMAIL_ADDRESSES_FIELD",
			value1 = "${userEmailAddress}");

		PortletEntry.save();

		PortalSettings.gotoConfiguration(
			configurationCategory = "User Authentication",
			configurationName = "Reserved Credentials",
			configurationScope = "Virtual Instance Scope");

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_EMAIL_ADDRESSES_FIELD",
			value1 = "${userEmailAddress}");
	}

	macro enterReservedScreenNameCP {
		PortalSettings.gotoConfiguration(
			configurationCategory = "User Authentication",
			configurationName = "Reserved Credentials",
			configurationScope = "Virtual Instance Scope");

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_SCREEN_NAMES_HEADER",
			value1 = "Screen Names");

		Type(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_SCREEN_NAMES_FIELD",
			value1 = "${userScreenName}");

		PortletEntry.save();

		PortalSettings.gotoConfiguration(
			configurationCategory = "User Authentication",
			configurationName = "Reserved Credentials",
			configurationScope = "Virtual Instance Scope");

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_SCREEN_NAMES_FIELD",
			value1 = "${userScreenName}");
	}

	macro gotoConfiguration {
		PortalSettings.openInstanceSettingsAdmin(baseURL = "${baseURL}");

		SystemSettings.gotoConfiguration(
			configurationCategory = "${configurationCategory}",
			configurationName = "${configurationName}",
			configurationScope = "${configurationScope}");
	}

	macro gotoPortalSettings {
		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Instance Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Portal Settings",
			configurationName = "Portal Settings",
			configurationScope = "Virtual Instance Scope");
	}

	macro openInstanceSettingsAdmin {
		Navigator.openWithAppendToBaseURL(
			baseURL = "${baseURL}",
			urlAppend = "group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_InstanceSettingsPortlet");
	}

	macro openToConfigInInstanceSettings {
		if (!(isSet(baseURL))) {
			var baseURL = PropsUtil.get("portal.url");
		}

		if ("${portlet}" == "Language") {
			var portletKey = "language";
		}

		Open(locator1 = "${baseURL}/group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_InstanceSettingsPortlet&_com_liferay_configuration_admin_web_portlet_InstanceSettingsPortlet_mvcRenderCommandName=%2Fconfiguration_admin%2Fview_configuration_screen&_com_liferay_configuration_admin_web_portlet_InstanceSettingsPortlet_configurationScreenKey=${portletKey}");
	}

	macro setCurrentInstanceLanguageCP {
		PortalSettings.gotoConfiguration(
			configurationCategory = "Localization",
			configurationName = "Language",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.configureCurrentLanguagesCP(defaultPortalLanguage = "${newLanguage}");
	}

	macro setImportIntervalTime {
		Variables.assertDefined(parameterList = "${importIntervalTime}");

		PortalSettings.gotoConfiguration(
			configurationCategory = "LDAP",
			configurationName = "Import",
			configurationScope = "Virtual Instance Scope");

		Type(
			locator1 = "PortalSettingsAuthentication#LDAP_IMPORT_INTERVAL",
			value1 = "${importIntervalTime}");

		PortletEntry.save();
	}

	macro tearDownAuthenticationCP {
		PortalSettings.gotoConfiguration(
			configurationCategory = "User Authentication",
			configurationName = "General",
			configurationScope = "Virtual Instance Scope");

		Select(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_HOW_DO_USERS_AUTHENTICATE_SELECT",
			value1 = "By Email Address");

		PortletEntry.save();
	}

	macro tearDownCP {
		PortalSettings.gotoConfiguration(
			configurationCategory = "Users",
			configurationName = "Default User Associations",
			configurationScope = "Virtual Instance Scope");

		Type(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ORGANIZATION_SITES_FIELD",
			value1 = "");

		Type(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ROLES_FIELD",
			value1 = "Power User\nUser");

		Type(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_SITES_FIELD",
			value1 = "");

		Type(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_USER_GROUPS_FIELD",
			value1 = "");

		PortalSettings.gotoConfiguration(
			configurationCategory = "User Authentication",
			configurationName = "Reserved Credentials",
			configurationScope = "Virtual Instance Scope");

		Type(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_EMAIL_ADDRESSES_FIELD",
			value1 = "");

		Type(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_SCREEN_NAMES_FIELD",
			value1 = "");

		PortletEntry.save();

		PortalSettings.configureContentSharingAcrossSitesCP(enableAcrossSite = "true");
	}

	macro testLDAPConnection {
		AssertClick(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_TEST_LDAP_CONNECTION_BUTTON",
			value1 = "Test LDAP Connection");

		AssertTextEquals(
			locator1 = "Modal#BODY",
			value1 = "Liferay has successfully connected to the LDAP server.");

		var key_modalTitle = "LDAP";

		Click(locator1 = "Button#CLOSE_MODAL");

		AssertClick(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_TEST_LDAP_USERS_BUTTON",
			value1 = "Test LDAP Users");

		AssertTextEquals.assertPartialText(
			locator1 = "Modal#BODY",
			value1 = "A subset of users has been displayed for you to review.");

		Click(locator1 = "Button#CLOSE_MODAL");

		AssertClick(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_TEST_LDAP_GROUPS_BUTTON",
			value1 = "Test LDAP Groups");

		AssertTextEquals.assertPartialText(
			locator1 = "Modal#BODY",
			value1 = "A subset of groups has been displayed for you to review.");

		Click(locator1 = "Button#CLOSE_MODAL");
	}

	macro testOpenSSOConnection {
		Click.waitForMenuToggleJSClick(locator1 = "PortalSettingsAuthentication#VERTICAL_ELLIPSIS");

		AssertClick(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_TEST_OPEN_SSO_CONFIGURATION_BUTTON",
			value1 = "Test OpenSSO Configuration");

		AssertTextEquals(
			locator1 = "Modal#BODY",
			value1 = "Liferay has successfully connected to the OpenSSO server.");

		var key_modalTitle = "OpenSSO";

		Click(locator1 = "Button#CLOSE_MODAL");
	}

	macro uncheckStrangersVerifyEmailCheckbox {
		Uncheck(locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_REQUIRE_STRANGERS_TO_VERIFY_THEIR_EMAIL_ADDRESS_CHECKBOX");

		PortletEntry.save();
	}

	macro viewAuthenticationGeneralCP {
		PortalSettings.gotoConfiguration(
			configurationCategory = "User Authentication",
			configurationName = "General",
			configurationScope = "Virtual Instance Scope");

		AssertSelectedLabel(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_HOW_DO_USERS_AUTHENTICATE_SELECT",
			value1 = "By Email Address");

		AssertElementPresent(locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_ALLOW_USERS_TO_AUTOMATICALLY_LOGIN_CHECKBOX");

		AssertElementPresent(locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_ALLOW_USERS_TO_REQUEST_FORGOTTEN_PASSWORDS_CHECKBOX");

		AssertElementPresent(locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_ALLOW_USERS_TO_REQUEST_PASSWORD_RESET_LINKS_CHECKBOX");

		AssertElementPresent(locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_ALLOW_STRANGERS_TO_CREATE_ACCOUNTS_CHECKBOX");

		AssertElementPresent(locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_ALLOW_STRANGERS_TO_CREATE_ACCOUNTS_WITH_A_COMPANY_EMAIL_ADDRESS_CHECKBOX");

		AssertElementPresent(locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_REQUIRE_STRANGERS_TO_VERIFY_THEIR_EMAIL_ADDRESS_CHECKBOX");
	}

	macro viewAuthenticationLDAPCP {
		PortalSettings.gotoConfiguration(
			configurationCategory = "LDAP",
			configurationName = "Export",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewCheckboxNotChecked(fieldName = "ldapExportEnabled");

		PortalSettings.gotoConfiguration(
			configurationCategory = "LDAP",
			configurationName = "General",
			configurationScope = "Virtual Instance Scope");

		for (var fieldName : list "enabled,required,passwordPolicyEnabled") {
			var fieldName = "InstanceSettingsPortlet_${fieldName}";

			FormFields.viewCheckboxNotChecked(fieldName = "${fieldName}");
		}

		PortalSettings.gotoConfiguration(
			configurationCategory = "LDAP",
			configurationName = "Import",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewCheckboxNotChecked(fieldName = "ldapImportEnabled");

		PortalSettings.gotoConfiguration(
			configurationCategory = "LDAP",
			configurationName = "Servers",
			configurationScope = "Virtual Instance Scope");

		AssertClick(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_LDAP_ADD_BUTTON",
			value1 = "Add");

		Click(locator1 = "PortalSettingsAuthentication#LDAP_SERVER_DEFAULT_VALUES_MICROSOFT_ACTIVE_DIRECTORY_SERVER_RADIO");

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_CONNECTION_BASE_PROVIDER_URL_HEADER",
			value1 = "Base Provider URL");

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_CONNECTION_BASE_PROVIDER_URL_FIELD",
			value1 = "ldap://localhost:389");

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_CONNECTION_BASE_DN_HEADER",
			value1 = "Base DN");

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_CONNECTION_BASE_DN_FIELD",
			value1 = "dc=example,dc=com");

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_CONNECTION_PRINCIPAL_HEADER",
			value1 = "Principal");

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_CONNECTION_PRINCIPAL_FIELD",
			value1 = "admin");

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_CONNECTION_CREDENTIALS_HEADER",
			value1 = "Credentials");

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#LDAP_SERVER_CONNECTION_CREDENTIALS_FIELD",
			value1 = "secret");

		AssertElementPresent(locator1 = "PortalSettingsAuthentication#LDAP_SERVER_TEST_LDAP_CONNECTION_BUTTON");

		AssertElementPresent(locator1 = "PortalSettingsAuthentication#LDAP_SERVER_TEST_LDAP_USERS_BUTTON");

		AssertElementPresent(locator1 = "PortalSettingsAuthentication#LDAP_SERVER_TEST_LDAP_GROUPS_BUTTON");
	}

	macro viewAuthenticationOpenSSOCP {
		PortalSettings.gotoConfiguration(
			configurationCategory = "SSO",
			configurationName = "OpenSSO",
			configurationScope = "Virtual Instance Scope");

		AssertElementPresent(locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_ENABLED_CHECKBOX");

		AssertElementPresent(locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_IMPORT_FROM_LDAP_CHECKBOX");

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_LOGIN_URL_HEADER",
			value1 = "Login URL");

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_LOGIN_URL_FIELD",
			value1 = "http://openssohost.example.com:8080/opensso/UI/Login?goto=http://portalhost.example.com:8080/c/portal/login");

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_LOGOUT_URL_HEADER",
			value1 = "Logout URL");

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_LOGOUT_URL_FIELD",
			value1 = "http://openssohost.example.com:8080/opensso/UI/Logout?goto=http://portalhost.example.com:8080/web/guest/home");

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_SERVICE_URL_HEADER",
			value1 = "Service URL");

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_SERVICE_URL_FIELD",
			value1 = "http://openssohost.example.com:8080/opensso");

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_SCREEN_NAME_ATTRIBUTE_HEADER",
			value1 = "Screen Name Attribute");

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_SCREEN_NAME_ATTRIBUTE_FIELD",
			value1 = "uid");

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_EMAIL_ADDRESS_ATTRIBUTE_HEADER",
			value1 = "Email Address Attribute");

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_EMAIL_ADDRESS_ATTRIBUTE_FIELD",
			value1 = "mail");

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_FIRST_NAME_ATTRIBUTE_HEADER",
			value1 = "First Name Attribute");

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_FIRST_NAME_ATTRIBUTE_FIELD",
			value1 = "givenName");

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_LAST_NAME_ATTRIBUTE_HEADER",
			value1 = "Last Name Attribute");

		AssertTextEquals(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_LAST_NAME_ATTRIBUTE_FIELD",
			value1 = "sn");

		AssertElementPresent(locator1 = "PortalSettingsAuthentication#AUTHENTICATION_OPEN_SSO_TEST_OPEN_SSO_CONFIGURATION_BUTTON");
	}

	macro viewCurrentDefaultPortalLanguageCP {
		var configuration = "Localization";

		if (isSet(localizationTranslation)) {
			var configuration = "${localizationTranslation}";
		}

		Click(
			key_itemName = "${configuration}",
			locator1 = "ListGroupItem#ITEM_TEXT");

		AssertSelectedLabel(
			locator1 = "Select#DEFAULT_LANGUAGE",
			value1 = "${defaultPortalLanguage}");
	}

	macro viewDefaultLanguageCP {
		AssertSelectedLabel(
			locator1 = "Select#DEFAULT_LANGUAGE",
			value1 = "${defaultPortalLanguage}");
	}

	macro viewDefaultUserAssociationsCP {
		PortalSettings.gotoConfiguration(
			configurationCategory = "Users",
			configurationName = "Default User Associations",
			configurationScope = "Virtual Instance Scope");

		AssertElementPresent(locator1 = "PortalSettingsUsers#APPLY_TO_EXISTING_USERS_CHECKBOX");

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_SITES_HEADER",
			value1 = "Sites");

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_SITES_FIELD",
			value1 = "");

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ORGANIZATION_SITES_HEADER",
			value1 = "Organization Sites");

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ORGANIZATION_SITES_FIELD",
			value1 = "");

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ROLES_HEADER",
			value1 = "Roles");

		Type.clickAtType(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_ROLES_FIELD",
			value1 = "Power User\nUser");

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_USER_GROUPS_HEADER",
			value1 = "User Groups");

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#DEFAULT_USER_ASSOCIATIONS_USER_GROUPS_FIELD",
			value1 = "");
	}

	macro viewEmailNotificationsAccountCreatedNotificationCP {
		PortalSettings.gotoConfiguration(
			configurationCategory = "Email",
			configurationName = "Account Created Notification",
			configurationScope = "Virtual Instance Scope");

		AssertElementPresent(locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_ACCOUNT_CREATED_NOTIFICATION_ENABLED_CHECKBOX");

		AssertTextEquals(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_ACCOUNT_CREATED_NOTIFICATION_SUBJECT_HEADER",
			value1 = "Subject");

		AssertTextEquals(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_ACCOUNT_CREATED_NOTIFICATION_SUBJECT_FIELD",
			value1 = "[$PORTAL_URL$]: Your New Account");

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_ACCOUNT_CREATED_NOTIFICATION_BODY_WITH_PASSWORD_LINK_HEADER",
			value1 = "Body with Password Link");

		AssertElementPresent(locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_ACCOUNT_CREATED_NOTIFICATION_BODY_WITH_PASSWORD_LINK_FIELD");

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_ACCOUNT_CREATED_NOTIFICATION_BODY_WITHOUT_PASSWORD_HEADER",
			value1 = "Body without Password");

		AssertElementPresent(locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_ACCOUNT_CREATED_NOTIFICATION_BODY_WITHOUT_PASSWORD_FIELD");
	}

	macro viewEmailNotificationsPasswordChangedNotificationCP {
		PortalSettings.gotoConfiguration(
			configurationCategory = "Email",
			configurationName = "Password Changed Notification",
			configurationScope = "Virtual Instance Scope");

		AssertElementPresent(locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_PASSWORD_CHANGED_NOTIFICATION_SUBJECT_HEADER");

		AssertTextEquals(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_PASSWORD_CHANGED_NOTIFICATION_SUBJECT_FIELD",
			value1 = "[$PORTAL_URL$]: Your Password Has Been Changed");

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_PASSWORD_CHANGED_NOTIFICATION_BODY_HEADER",
			value1 = "Body");

		AssertElementPresent(locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_PASSWORD_CHANGED_NOTIFICATION_BODY_FIELD");
	}

	macro viewEmailNotificationsSenderCP {
		PortalSettings.gotoConfiguration(
			configurationCategory = "Email",
			configurationName = "Email Sender",
			configurationScope = "Virtual Instance Scope");

		AssertTextEquals(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_SENDER_NAME_HEADER",
			value1 = "Name");

		AssertTextEquals(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_SENDER_NAME_FIELD",
			value1 = "Joe Bloggs");

		AssertTextEquals(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_SENDER_ADDRESS_HEADER",
			value1 = "Address");

		AssertTextEquals(
			locator1 = "PortalSettingsEmailNotifications#EMAIL_NOTIFICATIONS_SENDER_ADDRESS_FIELD",
			value1 = "test@liferay.com");
	}

	macro viewEnabledLDAPSetting {
		for (var enableSetting : list "${enableSettingList}") {
			if ("${enableSetting}" == "enabled") {
				PortalSettings.gotoConfiguration(
					configurationCategory = "LDAP",
					configurationName = "General",
					configurationScope = "Virtual Instance Scope");
			}

			if ("${enableSetting}" == "ldapImportEnabled") {
				PortalSettings.gotoConfiguration(
					configurationCategory = "LDAP",
					configurationName = "Import",
					configurationScope = "Virtual Instance Scope");
			}

			if ("${enableSetting}" == "importOnStartup") {
				PortalSettings.gotoConfiguration(
					configurationCategory = "LDAP",
					configurationName = "Import",
					configurationScope = "Virtual Instance Scope");
			}

			FormFields.viewCheckboxChecked(fieldName = "InstanceSettingsPortlet_${enableSetting}");
		}
	}

	macro viewReservedCredentialsScreenNamesCP {
		PortalSettings.gotoConfiguration(
			configurationCategory = "User Authentication",
			configurationName = "Reserved Credentials",
			configurationScope = "Virtual Instance Scope");

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_SCREEN_NAMES_HEADER",
			value1 = "Screen Names");

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_SCREEN_NAMES_FIELD",
			value1 = "");

		AssertTextEquals.assertPartialText(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_EMAIL_ADDRESSES_HEADER",
			value1 = "Email Addresses");

		AssertTextEquals(
			locator1 = "PortalSettingsUsers#RESERVED_CREDENTIALS_EMAIL_ADDRESSES_FIELD",
			value1 = "");
	}

	macro viewToggleSwitchChecked {
		AssertChecked.assertCheckedNotVisible(
			key_toggleSwitchLabel = "${portalSetting}",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
	}

	macro viewToggleSwitchNotChecked {
		AssertNotChecked.assertNotCheckedNotVisible(
			key_toggleSwitchLabel = "${portalSetting}",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
	}

}