definition {

	macro addAndEditTranslations {
		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		Translations.gotoTranslate(webContentTitle = "WC WebContent Title Side By Side");

		Translations.changeTargetLocale(
			currentTargetLocale = "ar-SA",
			newTargetLocale = "ja-JP");

		Translations.viewBaseFields(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		Translations.translateFields(
			webContentContent = "wc webcontentコンテンツ 編集",
			webContentDescription = "wc webcontent記述 編集",
			webContentTitle = "wc webcontentタイトルを並べて 編集");

		PortletEntry.publish();

		Translations.gotoTranslate(webContentTitle = "WC WebContent Title Side By Side");

		Translations.changeTargetLocale(
			currentTargetLocale = "ar-SA",
			newTargetLocale = "es-ES");

		Translations.viewBaseFields(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		Translations.translateFields(
			webContentContent = "Contenido de WC WebContent",
			webContentTitle = "Título del contenido web de WC");

		PortletEntry.publish();
	}

	macro addAndViewAccountGroup {
		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Control Panel",
			portlet = "Account Groups");

		AccountGroups.addCP(
			accountGroupDescription = "${accountGroupDescription}",
			accountGroupName = "${accountGroupName}");

		AccountGroups.openAccountGroupsAdmin();

		LexiconEntry.viewEntryName(rowEntry = "${accountGroupName}");
	}

	macro addAndViewBusinessAccount {
		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Control Panel",
			portlet = "Accounts");

		Accounts.addBusinessAccount(
			accountDescription = "${accountDescription}",
			accountName = "${accountName}",
			accountTaxId = "${accountTaxId}");

		Accounts.openAccountsAdmin();

		LexiconEntry.viewEntryName(rowEntry = "${accountName}");
	}

	macro addAutoTaggedBlogsEntry {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

		Blogs.addEntry(
			entryContent = "${entryContent}",
			entryTitle = "${entryTitle}");

		Pause(locator1 = "3000");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/site-name/test-page");

		AssertClick.assertTextClickAt(
			key_entryTitle = "${entryTitle}",
			locator1 = "BlogsEntry#TITLE_LINK",
			value1 = "${entryTitle}");

		BlogsEntry.viewAutoTag(
			entryTitle = "${entryTitle}",
			tagName = "${tagName}");
	}

	macro addAutoTaggedDM {
		if (isSet(depotName)) {
			DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");
		}
		else {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");
		}

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "${dmDocumentFile}",
			dmDocumentTitle = "${dmDocumentTitle}");

		Pause(locator1 = "3000");

		if (isSet(depotName)) {
			DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");
		}
		else {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");
		}

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "${dmDocumentTitle}");

		DMDocument.viewCP(dmDocumentTitle = "${dmDocumentTitle}");

		DMDocument.viewTagInfo(tagName = "${tagName}");
	}

	macro addAutoTaggedWebContent {
		if (isSet(depotName)) {
			DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");
		}
		else {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");
		}

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "${webContentContent}",
			webContentTitle = "${webContentTitle}");

		PortletEntry.publish();

		if (isSet(depotName)) {
			DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");
		}
		else {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");
		}

		WebContentNavigator.gotoEditCP(webContentTitle = "${webContentTitle}");

		Panel.expandPanel(panel = "Categorization");

		AssertTextEquals(
			key_tagName = "${tagName}",
			locator1 = "AssetCategorization#TAG",
			value1 = "${tagName}");
	}

	macro addAutoTagViaGogoShell {
		var companyId = JSONCompany.getCompanyId();

		GogoShell.openGogoShellAdmin();

		GogoShell.executeCommand(commandName = "assetAutoTagger:tagAllUntagged ${companyId}");

		if (isSet(blogEntryTitle)) {
			GogoShell.viewOutput(outputContent = "Added ${blogTagNum} tags to asset entry ${blogEntryTitle}");
		}

		GogoShell.viewOutput(outputContent = "Added ${dmTagNum} tags to asset entry ${dmDocumentTitle}");

		GogoShell.viewOutput(outputContent = "Added ${wcTagNum} tags to asset entry ${webContentTitleXml}");

		if (isSet(blogEntryTitle)) {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

			BlogsNavigator.gotoEntryCP(entryTitle = "${blogEntryTitle}");

			Panel.expandPanel(panel = "Categorization");

			for (var tagName : list "${blogTagName}") {
				AssetCategorization.viewTag(tagName = "${tagName}");
			}
		}

		if (isSet(depotName)) {
			DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");
		}
		else {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");
		}

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "${dmDocumentTitle}");

		DMDocument.viewCP(dmDocumentTitle = "${dmDocumentTitle}");

		for (var tagName : list "${dmTagName}") {
			DMDocument.viewTagInfo(tagName = "${tagName}");
		}

		if (isSet(depotName)) {
			DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");
		}
		else {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");
		}

		WebContentNavigator.gotoEditCP(webContentTitle = "${webContentTitle}");

		Panel.expandPanel(panel = "Categorization");

		for (var tagName : list "${wcTagName}") {
			AssetCategorization.viewTag(tagName = "${tagName}");
		}
	}

	macro addContentPage {
		task ("Add a content page in Test Site Name site") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPublicPage(pageName = "Test Content Page Name");
		}

		task ("Add a Title fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title");
		}

		task ("Add a Rich Text fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text",
				targetFragmentName = "Title");
		}

		task ("Add a Button fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Button",
				targetFragmentName = "Rich Text");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Navigate to the content page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");
		}

		task ("Assert the Title fragment is present") {
			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "header",
				text = "Lorem ipsum dolor sit amet");
		}

		task ("Assert the Rich Text fragment is present") {
			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "rich-text",
				text = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.");
		}

		task ("Assert the Button fragment is present") {
			var n = "1";

			for (var text : list "Submit,Cancel") {
				ContentPages.viewFragmentText(
					contributed = "false",
					fragmentName = "footer",
					position = "${n}",
					text = "${text}");

				var n = ${n} + 1;
			}
		}

		task ("Navigate to regular content page from 7.1") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-regular-content-page");
		}

		task ("Navigate to the content page's 'Edit Mode'") {
			ContentPages.gotoPageEditor();
		}

		task ("Edit the Title fragment's editable text") {
			PageEditor.editFragmentText(
				className = "header",
				contributed = "false",
				fragmentName = "Title",
				text = "New editable fragment text");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Assert the Title fragment is updated") {
			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "header",
				text = "New editable fragment text");
		}

		task ("Navigate to content page created from page template from 7.1") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-template-content-page");
		}

		task ("Navigate to the content page's 'Edit Mode'") {
			ContentPages.gotoPageEditor();
		}

		task ("Add a Rich Text fragment to the content page") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Rich Text",
				targetFragmentName = "Button");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Assert the Button fragment is present") {
			var n = "1";

			for (var text : list "Submit,Cancel") {
				ContentPages.viewFragmentText(
					contributed = "false",
					fragmentName = "footer",
					position = "${n}",
					text = "${text}");

				var n = ${n} + 1;
			}
		}

		task ("Assert the Rich Text fragment is present") {
			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "rich-text",
				text = "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.");
		}
	}

	macro addDataDefinitionWithDB2 {
		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Dynamic Data Lists",
			site = "${site}");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no lists.");

		DDLNavigator.gotoManageDataDefinitions();

		for (var ddlDataDefinitionName : list "Contacts,Events,Inventory,Issues Tracking,Meeting Minutes,To Do") {
			DDLDataDefinition.viewName(ddlDataDefinitionName = "${ddlDataDefinitionName}");
		}

		AssertConsoleTextNotPresent(value1 = "SQLCODE=-134");

		AssertConsoleTextNotPresent(value1 = "SQLCODE=-727");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Dynamic Data Lists");

		DDLDataDefinition.addCP(ddlDataDefinitionName = "Data Definition");

		DynamicDataMapping.addField(
			field = "Text",
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DDLDataDefinition.save();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Dynamic Data Lists");

		DDLDataDefinition.viewCP(
			ddlDataDefinitionName = "Data Definition",
			fieldFieldLabel = "Text");

		AssertConsoleTextNotPresent(value1 = "SQLCODE=-134");

		AssertConsoleTextNotPresent(value1 = "SQLCODE=-727");
	}

	macro addDMWithDocumentTypesAndMetadataSets {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Type Description",
			dmDocumentFile = "Document_2.doc",
			dmDocumentTitle = "DM Document Type Title After Upgrade",
			dmDocumentTypeName = "DM Document Type Name",
			documentsAndMediaField = "DM Document JPG",
			fieldFieldLabel = "Documents and Media",
			navTab = "Documents and Media",
			numberField = "1234");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type Title After Upgrade");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Type Title After Upgrade");
	}

	macro addForm {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms",
			site = "${site}");

		AssertElementPresent(locator1 = "Message#EMPTY_INFO_TAGLIB");

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form Name");

		Form.editDescription(formDescription = "Form Description");

		Form.addTextField(fieldPositionNumber = "0");

		var fieldName = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Text Field");

		Form.closeSidebar();

		PortletEntry.publish();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdmin.viewForm(
			formDescription = "Form Description",
			formName = "Form Name");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Form Page");

		Navigator.gotoPage(pageName = "Form Page");

		Portlet.addPG(
			pageName = "Form Page",
			portletName = "Form");

		FormPortletNavigator.gotoSelectForm(formName = "Form Name");

		FormPortletConfiguration.selectForm(formName = "Form Name");

		PortletEntry.save();

		Navigator.gotoPage(pageName = "Form Page");

		FormFields.viewTextField(
			fieldLabel = "Text Field",
			fieldName = "${fieldName}");
	}

	macro addMessageBoards {
		Navigator.gotoPage(pageName = "Message Boards");

		MessageboardsThread.addPG(
			threadBody = "Message Boards Body",
			threadSubject = "Message Boards Subject 3");
	}

	macro addOneDriveDocument {
		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "${dmDocumentTypeName}");

		OneDrive.AddDocument(
			dmDocumentTitle = "${dmDocumentTypeName} Title After Upgrade",
			dmDocumentTypeName = "${dmDocumentTypeName}");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewCheckedoutPG(
			dmDocumentTitle = "${dmDocumentTypeName} Title After Upgrade",
			status = "Draft");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.checkinPG(dmDocumentTitle = "${dmDocumentTypeName} Title After Upgrade");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		AssertTextEquals.assertPartialText(
			key_dmDocumentTitle = "${dmDocumentTypeName} Title After Upgrade",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "${dmDocumentTypeName} Title After Upgrade");
	}

	macro addOrganization {
		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		Organization.addCP(
			orgName = "Organization Name",
			orgType = "Organization");
	}

	macro addStyleBook {
		task ("Add a style book") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.addStyleBooks(styleBookName = "Test Style Book Name 2");
		}

		task ("Define the Font Family") {
			var fontFamily = '''"Courier New"''';

			StyleBooks.selectForm(formName = "Typography");

			StyleBooks.expandSection(sectionName = "Font Family");

			PortletEntry.inputText(
				fieldLabel = "Font Family Base",
				text = "${fontFamily}");

			StyleBooks.clickManagementBar();

			StyleBooks.waitForAutoSave();
		}

		task ("Publish the style book") {
			StyleBooks.clickPublish();
		}

		task ("Assert the Style Books") {
			StyleBooksAdmin.viewStyleBooksPresent(styleBookName = "Test Style Book Name");

			StyleBooksAdmin.viewStyleBooksPresent(styleBookName = "Test Style Book Name 2");
		}
	}

	macro addUserAndSuborganization {
		JSONOrganization.addOrganization(organizationName = "Organization2");

		JSONOrganization.addOrganization(
			organizationName = "Sub-organization2",
			parentOrganizationName = "Organization2");

		JSONOrganization.addOrganization(
			organizationName = "Sub-organization1",
			parentOrganizationName = "Organization1");

		JSONUser.addUser(
			userEmailAddress = "user2@liferay.com",
			userFirstName = "user2",
			userLastName = "user2",
			userScreenName = "user2");

		JSONOrganization.assignUserToOrganization(
			organizationName = "Organization1",
			userEmailAddress = "user2@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.assignUser(
			orgName = "Sub-organization1",
			userFirstName = "user2",
			userLastName = "user2",
			userName = "user2 user2",
			userScreenName = "user2");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.gotoCP(
			orgName = "Organization1",
			searchToken = "Organization1");

		User.searchCP(searchTerm = "usersn");

		Organization.viewAssignMemberCP(
			userName = "userfn userln",
			userScreenName = "usersn");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.viewSubOrganizationCP(
			orgName = "Organization1",
			orgType = "Organization",
			suborgName = "Sub-organization-Pre",
			suborgType = "Organization");

		Organization.gotoCP(
			orgName = "Sub-organization-Pre",
			searchToken = "Sub-organization-Pre");

		Organization.viewAssignMemberCP(
			userName = "userfn userln",
			userScreenName = "usersn");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.editSiteCP(
			orgName = "Organization1",
			orgNameEdit = "Organization1 Edit");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.editSiteCP(
			orgName = "Sub-organization1",
			orgNameEdit = "Sub-organization1 Edit");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.deleteCP(orgName = "Sub-organization2");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.deleteCP(orgName = "Organization2");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.removeMemberCP(
			orgName = "Sub-organization1 Edit",
			userFullName = "user2 user2");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.deleteCP(orgName = "Sub-organization1 Edit");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.searchCP(
			orgName = "Organization1 Edit",
			searchTerm = "Organization1 Edit");

		Organization.viewCP(
			orgName = "Organization1 Edit",
			orgType = "Organization");
	}

	macro addUserToBusinessAccount {
		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Control Panel",
			portlet = "Account Users");

		AccountUsers.addUser(
			accountName = "${accountName}",
			userEmailAddress = "${userEmailAddress}",
			userFirstName = "${userFirstName}",
			userLastName = "${userLastName}",
			userScreenName = "${userScreenName}");

		AccountUsers.openAccountUsersAdmin();

		LexiconEntry.viewEntryName(rowEntry = "${userFirstName} ${userLastName}");
	}

	macro addWCStructureAndTemplate {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		Navigator.gotoNavItem(navItem = "Structures");

		AssertElementNotPresent(locator1 = "Message#ERROR");

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		Navigator.gotoNavItem(navItem = "Templates");

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			structureName = "WC Structure Name",
			webContentText = "WC WebContent Text",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		WebContent.viewWithStructureCP(
			webContentText = "WC WebContent Text",
			webContentTitle = "WC WebContent Title");
	}

	macro approveWorkflow {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		Workflow.viewWebContentWithWorkflowCP(
			webContentTitle = "WC Workflow Title",
			workflowTask = "Review");

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

		Workflow.viewTaskAssignedToMyRoles(
			workflowAssetTitle = "WC Workflow Title",
			workflowAssetType = "Web Content Article",
			workflowTask = "Review");

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "My Submissions");

		Workflow.viewMySubmissions(
			workflowAssetTitle = "WC Workflow Title",
			workflowAssetType = "Web Content Article",
			workflowDefinition = "Single Approver",
			workflowTask = "Review");

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

		Workflow.assignToMeTaskByActions(
			workflowAssetTitle = "WC Workflow Title",
			workflowAssetType = "Web Content Article",
			workflowTask = "Review");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		Workflow.viewWebContentWithWorkflowCP(
			webContentTitle = "WC Workflow Title",
			workflowTask = "Review");

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

		Workflow.approveTaskByActions(
			workflowAssetTitle = "WC Workflow Title",
			workflowAssetType = "Web Content Article",
			workflowTask = "Review");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC Workflow Title");

		Workflow.viewWebContentWithWorkflowStatus(
			webContentStatus = "Approved",
			webContentTitle = "WC Workflow Title");

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "My Submissions");

		Workflow.gotoViewCompletedAssetViaMySubmissions(workflowAssetTitle = "WC Workflow Title");

		WebContent.viewEntryAsWorkflowAsset(
			webContentContent = "WC Workflow Content",
			webContentTitle = "WC Workflow Title");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		BlogsEntry.viewWithWorkflowCP(
			entryContent = "Blogs Workflow Content",
			entryTitle = "Blogs Workflow Title");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		BlogsEntry.viewWithWorkflowCP(
			entryContent = "Blogs Workflow Content",
			entryTitle = "Blogs Workflow Title");

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

		Workflow.viewTaskAssignedToMyRoles(
			workflowAssetTitle = "Blogs Workflow Title",
			workflowAssetType = "Blogs Entry",
			workflowTask = "Review");

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "My Submissions");

		Workflow.viewMySubmissions(
			workflowAssetTitle = "Blogs Workflow Title",
			workflowAssetType = "Blogs Entry",
			workflowDefinition = "Single Approver",
			workflowTask = "Review");

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

		Workflow.assignToMeTaskByActions(
			workflowAssetTitle = "Blogs Workflow Title",
			workflowAssetType = "Blogs Entry",
			workflowTask = "Review");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		BlogsEntry.viewWithWorkflowCP(
			entryContent = "Blogs Workflow Content",
			entryTitle = "Blogs Workflow Title");

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

		Workflow.approveTaskByActions(
			workflowAssetTitle = "Blogs Workflow Title",
			workflowAssetType = "Blogs Entry",
			workflowTask = "Review");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		BlogsEntry.viewEntryTable(entryTitle = "Blogs Workflow Title");

		LexiconEntry.changeDisplayStyle(displayStyle = "cards");

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Workflow Title");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Workflow Content",
			entryTitle = "Blogs Workflow Title");

		BlogsEntry.viewStatus(entryStatus = "Approved");
	}

	macro configurePageEditor {
		task ("View fragment persists and could add another fragment in page editor") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.viewEntryPresent(entry = "Fragment Name");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Fragment Content Page",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Card",
				targetFragmentName = "Fragment Name");
		}

		task ("Assert could edit fragment upgrading from 7.2") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdminNavigator.gotoEntry(entry = "Fragment Name");

			FragmentsEditor.typeFileContent(fileName = "fragment_title.html");

			FragmentsEditor.typeFileContent(fileName = "fragment_title.css");

			FragmentsEditor.assertFragmentPreview(
				fragmentLocator = "//div[@class='fragment-title']/h1[@class='title']",
				text = "LOREM IPSUM DOLOR SIT AMET");

			PortletEntry.publish();
		}

		task ("Assert could delete fragment upgrading from 7.2") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Fragment Content Page",
				siteName = "Test Site Name");

			PageEditor.removeFragment(fragmentName = "Fragment Name");

			PageEditor.viewFragmentNotPresent(fragmentName = "Fragment Name");
		}

		task ("Assert the experience survived and could edit") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Experience Content Page",
				siteName = "Test Site Name");

			PageEditor.changeExperience(newExperience = "New Experience Name");

			PageEditor.addComment(
				fragmentComment = "This is a fragment comment.",
				fragmentName = "Title");

			PageEditor.changeExperience(newExperience = "Default");

			PageEditor.removeFragment(fragmentName = "Title");

			AssertTextEquals(
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_CENTER_TEXT",
				value1 = "There are no comments yet.");

			PageEditor.changeExperience(newExperience = "New Experience Name");

			PageEditor.viewCommentList(
				commentCount = "1 Comment",
				fragmentName = "Title",
				openComment = "true");
		}

		task ("Assert layout has been converted to a section with columns inside") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Layout Content Page",
				siteName = "Test Site Name");

			for (var fragmentName : list "Container,Grid") {
				PageEditor.viewFragment(fragmentName = "${fragmentName}");
			}
		}

		task ("Assert translation is working after migration") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Translation Content Page",
				siteName = "Test Site Name");

			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "New editable fragment en-US text",
				fragmentName = "Rich Text");

			PageEditor.changeLocale(
				currentLocale = "en-US",
				locale = "zh-CN");

			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "New editable fragment zh-CN text",
				fragmentName = "Rich Text");
		}

		task ("Assert mapped content is working after migration") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title");

			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "header",
				text = "Webcontent Title");

			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "rich-text",
				text = "Webcontent Content");

			DisplayPageTemplate.clickPencilItem(item = "Edit Webcontent Title");

			WebContent.addCP(
				webContentContent = "Webcontent Content Edit",
				webContentTitle = "Webcontent Title Edit");

			PortletEntry.publish();

			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "header",
				text = "Webcontent Title Edit");

			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "rich-text",
				text = "Webcontent Content Edit");
		}

		task ("Assert could add fragment added to display page after upgrading") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Edit");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Rich Text");
		}
	}

	macro deleteDocumentTypesAndMetadataSets {
		JSONRecycleBin.emptyRecycleBin();

		DMNavigator.openDocumentTypesAdmin(siteURLKey = "guest");

		DMDocumentType.delete(dmDocumentTypeName = "DM Document Type Name Edit");

		DMNavigator.gotoMetadataSets();

		DMMetadataSet.delete(metadataSetName = "Document Metadata Set Name Edit");
	}

	macro deleteImageResolution {
		AdaptiveMedia.openAdaptiveMediaAdmin();

		AdaptiveMedia.disableImageResolution(
			imageName = "Low Resolution",
			imageState = "Disabled",
			percentAdapted = "0");

		AdaptiveMedia.deleteImageResolution(imageName = "Low Resolution");
	}

	macro editAndDeleteBlogEntry {
		if (isSet(video)) {
			Navigator.gotoPage(pageName = "Blogs");

			BlogsEntry.moveToRecycleBinPG(
				assetType = "Blogs Entry",
				entryContent = "video",
				entryTitle = "Blogs Entry Title With Video");
		}

		Navigator.gotoPage(pageName = "Blogs");

		Ratings.rateThumb(
			blogRating = "true",
			ratingResult = "Rate this as good");

		Ratings.viewRateThumb(
			ratingResult = "You have rated this as good",
			voteCount = "1");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as bad",
			voteCount = "0");

		Ratings.rateThumb(
			blogRating = "true",
			ratingResult = "You have rated this as good");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as good",
			voteCount = "0");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as bad",
			voteCount = "0");

		Blogs.editEntryPG(
			embedVideo = "https://www.youtube.com/watch?v=HOdbzGCI5MEU",
			entryContent = "Blogs Entry Content",
			entryContentEdit = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title",
			entryTitleEdit = "Blogs Entry Title Edit",
			uploadFileName = "Document_2.jpg");

		Navigator.gotoPage(pageName = "Blogs");

		BlogsEntry.moveToRecycleBinPG(
			assetType = "Blogs Entry",
			entryContent = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title Edit");
	}

	macro editAndDeleteDocuments {
		Navigator.gotoPage(pageName = "Documents");

		DMDocument.editCmdPG(
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentFileNameEdit = "DM Document Video Edit.mp4",
			dmDocumentTitle = "DM Document Video",
			dmDocumentTitleEdit = "DM Document Video Edit");

		PortletEntry.publish();

		Navigator.gotoPage(pageName = "Documents");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description Edit",
			dmDocumentFileName = "DM Document Video Edit.mp4",
			dmDocumentTitle = "DM Document Video Edit",
			dmDocumentVersionNumber = "1.1");

		Navigator.gotoPage(pageName = "Documents");

		DMDocument.deletePG(dmDocumentTitle = "DM Document JPG");

		Navigator.gotoPage(pageName = "Documents");

		PortletEntry.selectAll();

		ClickNoError(locator1 = "Icon#DELETE");

		Alert.viewSuccessMessage();

		Navigator.gotoPage(pageName = "Documents");

		DMDocument.viewDefault();
	}

	macro editAndDeleteKBArticle {
		Navigator.gotoPage(pageName = "Knowledge Base");

		Ratings.rateThumb(
			blogRating = "true",
			ratingResult = "Rate this as bad");

		Ratings.viewRateThumb(
			ratingResult = "You have rated this as bad",
			voteCount = "1");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as good",
			voteCount = "0");

		Ratings.rateThumb(
			blogRating = "true",
			ratingResult = "You have rated this as bad");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as good",
			voteCount = "0");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as bad",
			voteCount = "0");

		KBArticle.editPGViaKBDisplay(
			kbArticleContentEdit = "Knowledge Base Video Content Edit",
			kbArticleTitle = "Knowledge Base Article Title",
			kbArticleTitleEdit = "Knowledge Base Article Title Edit");

		Navigator.gotoPage(pageName = "Knowledge Base");

		KBArticle.deletePG();

		KBArticle.viewNoPGViaKBDisplay(kbArticleTitle = "Knowledge Base Article Title Edit");
	}

	macro editAndDeleteMessageBoard {
		Navigator.gotoPage(pageName = "Message Boards");

		MessageboardsThread.gotoPG(
			lastPostUserName = "Test Test",
			replyCount = "0",
			threadBody = "",
			threadSubject = "Message Boards Subject");

		Ratings.rateThumb(
			blogRating = "true",
			ratingResult = "Rate this as bad");

		Ratings.viewRateThumb(
			ratingResult = "You have rated this as bad",
			voteCount = "1");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as good",
			voteCount = "0");

		Ratings.rateThumb(
			blogRating = "true",
			ratingResult = "You have rated this as bad");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as good",
			voteCount = "0");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as bad",
			voteCount = "0");

		Navigator.gotoPage(pageName = "Message Boards");

		MessageboardsThread.editPG(
			threadBodyEdit = "Message Boards Body Edit",
			threadSubject = "Message Boards Subject",
			threadSubjectEdit = "Message Boards Subject Edit");

		MessageboardsThread.viewPG(
			threadBody = "Message Boards Body Edit",
			threadSubject = "Message Boards Subject Edit",
			userName = "Test Test");

		Navigator.gotoPage(pageName = "Message Boards");

		MessageboardsThread.deletePG(threadSubject = "Message Boards Subject Edit");
	}

	macro editAndDeleteRedirects {
		var portalURL = PropsUtil.get("portal.url");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.editEntry(
			destinationURLEdit = "${portalURL}/web/test-site-name/test-destination-temporary-page-edit",
			sourceURL = "test-source-temporary-page");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.deleteEntry(sourceURL = "test-source-permanent-page");
	}

	macro editAndDeleteWiki {
		Navigator.gotoPage(pageName = "Wiki");

		Ratings.revokeStarsRating();

		Ratings.rateStar(ratingStarCount = "3");

		Ratings.viewRateStar(
			averageRatingStarCount = "3.0",
			ratingStarCount = "3");

		WikiPage.editFrontPagePG(wikiPageContentEdit = "Wiki FrontPage Content Edit");

		Navigator.gotoPage(pageName = "Wiki");

		WikiNavigator.gotoPG(
			wikiPageContent = "Wiki FrontPage Content Edit",
			wikiPageRevision = "1.2",
			wikiPageTitle = "FrontPage",
			wikiPageUsername = "Test Test");

		WikiPage.viewPG(
			wikiPageContent = "Wiki FrontPage Content Edit",
			wikiPageTitle = "FrontPage");

		Navigator.gotoPage(pageName = "Wiki");

		WikiNavigator.gotoAllPagesPG();

		WikiPage.deletePG(wikiPageTitle = "FrontPage");
	}

	macro editDocumentTypesAndMetadataSets {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoMetadataSets();

		DMDocumentType.edit(
			dmDocumentTypeName = "Document Metadata Set Name",
			dmDocumentTypeNameEdit = "Document Metadata Set Name Edit",
			fieldFieldLabel = "Number",
			fieldFieldLabelEdit = "Phone Number");

		DMNavigator.gotoDocumentType();

		DMDocumentType.edit(
			dmDocumentTypeFieldNameEdit = "Address",
			dmDocumentTypeName = "DM Document Type Name",
			dmDocumentTypeNameEdit = "DM Document Type Name Edit",
			fieldFieldLabel = "Text",
			fieldFieldLabelEdit = "Address");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Document Type Title");

		AssertElementPresent(
			key_fieldFieldLabel = "Address",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		AssertElementPresent(
			key_fieldFieldLabel = "Phone Number",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
	}

	macro editImageResolution {
		AdaptiveMedia.openAdaptiveMediaAdmin();

		AdaptiveMedia.editImageResolution(
			imageName = "Low Resolution",
			imageNameEdit = "Low Resolution Edited",
			maxHeightEdit = "480",
			maxWidthEdit = "320");

		AdaptiveMedia.selectAdaptiveMediaImage(imageName = "Low Resolution Edited");

		AdaptiveMedia.viewNumberOfAdaptedImages(numberOfAdaptedImages = "0/1");
	}

	macro editTagsAndDeleteAutoTaggedBlogsEntry {
		BlogsNavigator.openToBlogEntry(
			entryTitle = "${entryTitleKey}",
			layoutName = "test-page",
			siteURLKey = "site-name");

		BlogsEntry.viewAutoTag(
			entryTitle = "${entryTitle}",
			tagName = "${tagName}");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

		BlogsNavigator.gotoEditCP(entryTitle = "${entryTitle}");

		Panel.expandPanel(panel = "Categorization");

		AssetCategorization.removeTag(tagName = "${tagName}");

		AssetCategorization.addTag(tagName = "new tag");

		PortletEntry.publish();

		BlogsNavigator.openToBlogEntry(
			entryTitle = "${entryTitleKey}",
			layoutName = "test-page",
			siteURLKey = "site-name");

		BlogsEntry.viewNoTag(
			entryTitle = "${entryTitle}",
			tagName = "${tagName}");

		BlogsEntry.viewAutoTag(
			entryTitle = "${entryTitle}",
			tagName = "new tag");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/site-name/test-page");

		BlogsEntry.moveToRecycleBinPG(
			assetType = "Blogs Entry",
			entryContent = "${entryContent}",
			entryTitle = "${entryTitle}");

		BlogsEntry.viewNoPG(
			entryContent = "${entryContent}",
			entryTitle = "${entryTitle}");
	}

	macro editTagsAndDeleteAutoTaggedDM {
		if (isSet(depotName)) {
			DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");
		}
		else {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");
		}

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "${dmDocumentTitle}");

		DMDocument.viewCP(dmDocumentTitle = "${dmDocumentTitle}");

		DMDocument.viewTagInfo(tagName = "${tagName}");

		if (isSet(depotName)) {
			DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");
		}
		else {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");
		}

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.selectDocuments(dmDocumentTitle = "${dmDocumentTitle}");

		Click(locator1 = "Icon#EDIT_TAGS");

		DMDocument.editTags(tagName = "new tag");

		if (isSet(depotName)) {
			DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");
		}
		else {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");
		}

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "${dmDocumentTitle}");

		DMDocument.viewCP(dmDocumentTitle = "${dmDocumentTitle}");

		DMDocument.viewTagInfo(tagName = "new tag");

		if (isSet(depotName)) {
			DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");
		}
		else {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");
		}

		DMDocument.deleteCP(dmDocumentTitle = "${dmDocumentTitle}");
	}

	macro editTagsAndDeleteAutoTaggedWebContent {
		if (isSet(depotName)) {
			DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");
		}
		else {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");
		}

		WebContentNavigator.gotoEditCP(webContentTitle = "${webContentTitle}");

		Panel.expandPanel(panel = "Categorization");

		AssetCategorization.viewTag(tagName = "${tagName}");

		if (isSet(depotName)) {
			DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");
		}
		else {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");
		}

		WebContentNavigator.gotoEditCP(webContentTitle = "${webContentTitle}");

		Panel.expandPanel(panel = "Categorization");

		AssetCategorization.removeTag(tagName = "${tagName}");

		AssetCategorization.addTag(tagName = "new tag");

		Button.clickPublish();

		WebContentNavigator.gotoEditCP(webContentTitle = "${webContentTitle}");

		Panel.expandPanel(panel = "Categorization");

		AssetCategorization.viewNoTag(tagName = "${tagName}");

		AssetCategorization.viewTag(tagName = "new tag");

		if (isSet(depotName)) {
			DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");
		}
		else {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");
		}

		WebContent.moveToRecycleBinCP(webContentTitle = "${webContentTitle}");
	}

	macro EditWCStructureAndTemplateAndViewInWCDandAssetPublisher {
		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		Navigator.gotoNavItem(navItem = "Structures");

		WebContentNavigator.gotoEditStructure(structureName = "WC Structure Name");

		DataEngine.editFieldLabel(
			fieldFieldLabel = "Boolean",
			fieldFieldLabelEdit = "Boolean Edit",
			fieldName = "Boolean");

		if ("${webContentColor}" == "true") {
			DataEngine.editFieldLabel(
				fieldFieldLabel = "Color",
				fieldFieldLabelEdit = "Color Edit");
		}

		for (var fieldFieldLabel : list "Date,Decimal,Documents and Media,Geolocation,HTML,Image,Integer,Link to Page,Number,Radio,Select,Separator,Text,Text Box,Web Content") {
			DataEngine.editFieldLabel(
				fieldFieldLabel = "${fieldFieldLabel}",
				fieldFieldLabelEdit = "${fieldFieldLabel} Edit");
		}

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContent.viewWithStructureCP(
			webContentText = "This is a Text field Edit",
			webContentTextFieldLabel = "Text Edit",
			webContentTitle = "Web Content Title Edit");

		Navigator.gotoPage(pageName = "Web Content Display");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "This is a Text field Edit",
			webContentTitle = "Web Content Title Edit");

		Navigator.gotoPage(pageName = "Asset Publisher");

		AssetPublisherPortlet.viewAssetDetailsPG(
			assetContent = "This is a Text field Edit",
			assetTitle = "Web Content Title Edit");
	}

	macro EditWebContentAndViewInWCDandAssetPublisher {
		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

		WebContent.addWithStructureCP(
			webContentText = "This is a Text field Edit",
			webContentTitle = "Web Content Title Edit");

		PortletEntry.publish();

		WebContent.viewWithStructureCP(
			webContentText = "This is a Text field Edit",
			webContentTitle = "Web Content Title Edit");

		Navigator.gotoPage(pageName = "Web Content Display");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "This is a Text field Edit",
			webContentTitle = "Web Content Title Edit");

		Navigator.gotoPage(pageName = "Asset Publisher");

		Portlet.gotoPortletOptions(
			portletName = "Asset Publisher",
			portletOption = "Configuration");

		AssetPublisherPortlet.configureDisplayTemplatePG(displayTemplate = "Full Content");

		Navigator.gotoPage(pageName = "Asset Publisher");

		AssetPublisherPortlet.viewAssetDetailsPG(
			assetContent = "This is a Text field Edit",
			assetTitle = "Web Content Title Edit");
	}

	macro exportAndImportTranslations {
		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(webContentTitle = "WebContentTitle");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Japanese (Japan)");

		Translations.translateFile(
			contentTranslation = "Webコンテンツ",
			descriptionTranslation = "",
			encoding = "utf8",
			operation = "unzip",
			titleTranslation = "Webコンテンツのタイトル",
			translationFileName = "WebContentTitle-en_US-ja_JP",
			translationZipFileName = "WebContentTitle-en_US",
			webContentContent = "WebContent",
			webContentDescription = "",
			webContentTitle = "WebContentTitle");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		Translations.importTranslation(
			fileName = "WebContentTitle-en_US-ja_JP.xlf",
			filePath = "/WebContentTitle-en_US",
			webContentTitle = "WebContentTitle");

		WebContentNavigator.gotoEditCP(webContentTitle = "WebContentTitle");

		PortletEntry.changeLocale(locale = "ja-JP");

		WebContent.viewCP(
			webContentContent = "Webコンテンツ",
			webContentTitle = "Webコンテンツのタイトル");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		Translations.importTranslation(
			archive = "true",
			dependencyfile = "true",
			fileName = "WebContentTitle-en_US.zip",
			webContentTitle = "WebContentTitle");

		WebContentNavigator.gotoEditCP(webContentTitle = "WebContentTitle");

		PortletEntry.changeLocale(locale = "de-DE");

		WebContent.viewCP(
			webContentContent = "Internetinhalt",
			webContentTitle = "TiteldesWebinhalts");
	}

	macro exportDefaultSiteIntoNewSite {
		task ("View displayed asset on Asset Publisher on default site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "home",
				siteName = "Guest");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Web Content Content Edit",
				assetTitle = "Web Content Title 2");
		}

		task ("View the two versions of the web content on default site") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "View History",
				rowEntry = "Web Content Title 2");

			for (var n : list "1,2") {
				WebContent.viewSpecificVersionHistoryCP(
					webContentStatus = "Approved",
					webContentTitle = "Web Content Title ${n}");
			}
		}

		task ("Export the default site") {
			LAR.exportSiteCP(siteScopeName = "guest");

			var larFileName = LAR.getLarFileName();

			LAR.downloadLar();
		}

		task ("Import the default site into the new site") {
			LAR.importSiteCP(
				larFileName = "${larFileName}",
				siteName = "Test Site Name");
		}

		task ("View displayed asset on Asset Publisher on the new site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "home",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Web Content Content Edit",
				assetTitle = "Web Content Title 2");
		}

		task ("View the two versions of the web content on the new site") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "View History",
				rowEntry = "Web Content Title 2");

			for (var n : list "1,2") {
				WebContent.viewSpecificVersionHistoryCP(
					webContentStatus = "Approved",
					webContentTitle = "Web Content Title ${n}");
			}
		}
	}

	macro ignore404URLs {
		var portalURL = PropsUtil.get("portal.url");

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		Redirect.view404URLs(
			ignoreURL = "${portalURL}/web/test-site-name/test-destination-page1",
			requestNumber = "1");

		Redirect.view404URLs(
			ignoreURL = "${portalURL}/web/test-site-name/test-destination-page2",
			requestNumber = "1");

		Redirect.ignoreEntry(
			ignoreURL = "${portalURL}/web/test-site-name/test-destination-page1",
			skipNavigation = "true");

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		Redirect.addEntryVia404URLs(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-temporary-page",
			ignoredURL = "${portalURL}/web/test-site-name/test-destination-page1",
			siteName = "test-site-name",
			skipNavigation = "true",
			sourceURL = "test-destination-page1");

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		Redirect.addEntryVia404URLs(
			activeIgnoreURL = "${portalURL}/web/test-site-name/test-destination-page2",
			destinationURL = "${portalURL}/web/test-site-name/test-destination-temporary-page",
			siteName = "test-site-name",
			skipNavigation = "true",
			sourceURL = "test-destination-page2");

		Redirect.view404URLsDefault();
	}

	macro publishCollectionsInRemoteStagingDepot {
		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.selectAsset(
			assetListName = "Depot Manual Asset List",
			assetName = "DM Document Title Without Publish",
			assetType = "Basic Document",
			itemSubtype = "Basic Document",
			itemType = "Document");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive(remoteStaging = "true");

		Navigator.gotoSitePage(
			pageName = "Test Page Collections",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "DM Document Description",
			assetTitle = "DM Document Title Without Publish");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		Navigator.gotoSitePage(
			pageName = "Test Page Collections",
			siteName = "Remote Site");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "DM Document Description",
			assetTitle = "DM Document Title Without Publish");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.deleteEntry(assetListTitle = "Depot Manual Asset List");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive(remoteStaging = "true");

		Navigator.gotoSitePage(
			pageName = "Test Page Collections",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetNotPresentPG(assetTitle = "Document Title For Collections");

		AssetPublisherPortlet.viewAssetNotPresentPG(assetTitle = "DM Document Title Without Publish");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		Navigator.openSitePage(
			pageName = "Test Page Collections",
			siteName = "Remote Site");

		AssetPublisherPortlet.viewAssetNotPresentPG(assetTitle = "Document Title For Collections");

		AssetPublisherPortlet.viewAssetNotPresentPG(assetTitle = "DM Document Title Without Publish");
	}

	macro publishCollectionsInStagingDepot {
		DepotNavigator.openDepotAssetListsAdminStaging(depotName = "Test Depot Name Local Staging");

		AssetListsAdmin.selectAsset(
			assetListName = "Depot Manual Asset List",
			assetName = "DM Document Title Without Publish",
			assetType = "Basic Document",
			itemSubtype = "Basic Document",
			itemType = "Document");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page Collections",
			siteName = "Site Name Local Staging");

		AssertTextEquals(
			key_assetTitle = "DM Document Title Without Publish",
			locator1 = "AP#ASSET_ABSTRACT_TITLE",
			value1 = "DM Document Title Without Publish");

		Navigator.openSiteURL(siteName = "Site Name Local Staging");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Test Page Collections",
			siteName = "Site Name Local Staging");

		AssertTextEquals(
			key_assetTitle = "DM Document Title Without Publish",
			locator1 = "AP#ASSET_ABSTRACT_TITLE",
			value1 = "DM Document Title Without Publish");

		DepotNavigator.openDepotAssetListsAdminStaging(depotName = "Test Depot Name Local Staging");

		AssetListsAdmin.deleteEntry(assetListTitle = "Depot Manual Asset List");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page Collections",
			siteName = "Site Name Local Staging");

		AssertElementNotPresent(
			key_assetTitle = "Document Title For Collections",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		AssertElementNotPresent(
			key_assetTitle = "DM Document Title Without Publish",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSitePage(
			pageName = "Test Page Collections",
			siteName = "Site Name Local Staging");

		AssertElementNotPresent(
			key_assetTitle = "Document Title For Collections",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		AssertElementNotPresent(
			key_assetTitle = "DM Document Title Without Publish",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");
	}

	macro publishDMsInRemoteStagingDepot {
		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive(remoteStaging = "true");

		Navigator.gotoSitePage(
			pageName = "Test Page DM",
			siteName = "Site Name");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "DM Document Title Without Publish",
			assetType = "Basic Document",
			depotName = "Test Depot Name");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "DM Document Description",
			assetTitle = "DM Document Title Without Publish");

		Navigator.gotoSitePage(
			pageName = "Test Page DM",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		Navigator.openSitePage(
			pageName = "Test Page DM",
			siteName = "Remote Site");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "DM Document Description",
			assetTitle = "DM Document Title Without Publish");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMDocument.editCP(
			dmDocumentFileEdit = "Document_2.jpg",
			dmDocumentTitle = "Document_1.jpg",
			dmDocumentTitleEdit = "Document_2.jpg");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive(remoteStaging = "true");

		Navigator.gotoSitePage(
			pageName = "Test Page DM",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "DM Document Description",
			assetTitle = "Document_2.jpg");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		Navigator.openSitePage(
			pageName = "Test Page DM",
			siteName = "Remote Site");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "DM Document Description",
			assetTitle = "Document_2.jpg");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMDocument.deleteCP(dmDocumentTitle = "Document_2.jpg");

		DepotNavigator.openDepotRecycleBinAdmin(depotName = "Test Depot Name");

		RecycleBin.deleteCP(
			assetName = "Document_2.jpg",
			assetType = "Document");

		DepotNavigator.openDepotRecycleBinAdmin(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive(remoteStaging = "true");

		Navigator.gotoSitePage(
			pageName = "Test Page DM",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetNotPresentPG(assetTitle = "Document_2.jpg");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		Navigator.openSitePage(
			pageName = "Test Page DM",
			siteName = "Remote Site");

		AssetPublisherPortlet.viewAssetNotPresentPG(assetTitle = "Document_2.jpg");
	}

	macro publishDMsInStagingDepot {
		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name Local Staging");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page DM",
			siteName = "Site Name Local Staging");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "DM Document Title Without Publish",
			assetType = "Basic Document",
			depotName = "Test Depot Name Local Staging");

		AssertVisible(
			key_assetTitle = "DM Document Title Without Publish",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		Navigator.openSiteURL(siteName = "Site Name Local Staging");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSitePage(
			pageName = "Test Page DM",
			siteName = "Site Name Local Staging");

		AssertVisible(
			key_assetTitle = "DM Document Title Without Publish",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name Local Staging");

		DMDocument.editCP(
			dmDocumentFileEdit = "Document_2.jpg",
			dmDocumentTitle = "Document_1.jpg",
			dmDocumentTitleEdit = "Document_2.jpg");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page DM",
			siteName = "Site Name Local Staging");

		AssertVisible(
			key_assetTitle = "Document_2.jpg",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		Navigator.openSiteURL(siteName = "Site Name Local Staging");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSitePage(
			pageName = "Test Page DM",
			siteName = "Site Name Local Staging");

		AssertVisible(
			key_assetTitle = "Document_2.jpg",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		DepotNavigator.openDepotDocumentsAndMediaAdminStaging(depotName = "Test Depot Name Local Staging");

		DMDocument.deleteCP(dmDocumentTitle = "Document_2.jpg");

		DepotNavigator.openDepotRecycleBinAdminStaging(depotName = "Test Depot Name Local Staging");

		RecycleBin.deleteCP(
			assetName = "Document_2.jpg",
			assetType = "Document");

		DepotNavigator.openDepotRecycleBinAdminStaging(depotName = "Test Depot Name Local Staging");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page DM",
			siteName = "Site Name Local Staging");

		AssertElementNotPresent(
			key_assetTitle = "Document_2.jpg",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSitePage(
			pageName = "Test Page DM",
			siteName = "Site Name Local Staging");

		AssertElementNotPresent(
			key_assetTitle = "Document_2.jpg",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");
	}

	macro publishStagedSite {
		Navigator.openSiteURL(siteName = "Staging Site Staging");

		AssertElementNotPresent(locator1 = "Home#PORTLET");

		ProductMenu.gotoStagingSite(site = "Staging Site");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		ProductMenu.gotoLiveSite(site = "Staging Site");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");
	}

	macro publishWCDraft {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoViewStatus(
			webContentStatus = "DRAFT",
			webContentTitle = "Web Content Draft Title");

		WebContent.viewStatus(
			webContentContent = "Web Content Draft Content",
			webContentStatus = "Draft",
			webContentTitle = "Web Content Draft Title");

		WebContent.editCP(
			webContentContentEdit = "Web Content Content",
			webContentTitle = "Web Content Draft Title",
			webContentTitleEdit = "Web Content Title");

		WebContentNavigator.gotoViewStatus(
			webContentStatus = "APPROVED",
			webContentTitle = "Web Content Title");

		WebContent.viewStatus(
			webContentContent = "Web Content Content",
			webContentStatus = "Approved",
			webContentTitle = "Web Content Title");
	}

	macro publishWCsInRemoteStagingDepot {
		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive(remoteStaging = "true");

		Navigator.gotoSitePage(
			pageName = "Test Page WC",
			siteName = "Site Name");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "WebContent Title Without Publish",
			assetType = "Basic Web Content",
			depotName = "Test Depot Name");

		Navigator.gotoSitePage(
			pageName = "Test Page WC",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		Navigator.openSitePage(
			pageName = "Test Page WC",
			siteName = "Remote Site");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "WebContent Content",
			assetTitle = "WebContent Title Without Publish");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive(remoteStaging = "true");

		Navigator.gotoSitePage(
			pageName = "Test Page WC",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "WC WebContent Content",
			assetTitle = "WC WebContent Title Edit");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		Navigator.openSitePage(
			pageName = "Test Page WC",
			siteName = "Remote Site");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "WC WebContent Content",
			assetTitle = "WC WebContent Title Edit");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		WebContent.deleteCP(
			depotName = "Test Depot Name",
			webContentTitle = "WC WebContent Title Edit");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive(remoteStaging = "true");

		Navigator.gotoSitePage(
			pageName = "Test Page WC",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetNotPresentPG(assetTitle = "WC WebContent Title Edit");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		Navigator.openSitePage(
			pageName = "Test Page WC",
			siteName = "Remote Site");

		AssetPublisherPortlet.viewAssetNotPresentPG(assetTitle = "WC WebContent Title Edit");
	}

	macro publishWCsInStagingDepot {
		DepotNavigator.openDepotWebContentAdminStaging(depotName = "Test Depot Name Local Staging");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page WC",
			siteName = "Site Name Local Staging");

		AssetPublisherPortlet.configureManualAssetSelectionPG(
			assetTitle = "WebContent Title Without Publish",
			assetType = "Basic Web Content",
			depotName = "Test Depot Name Local Staging");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page WC",
			siteName = "Site Name Local Staging");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSitePage(
			pageName = "Test Page WC",
			siteName = "Site Name Local Staging");

		AssertTextEquals(
			key_assetTitle = "WebContent Title Without Publish",
			locator1 = "AP#ASSET_ABSTRACT_TITLE",
			value1 = "WebContent Title Without Publish");

		DepotNavigator.openDepotWebContentAdminStaging(depotName = "Test Depot Name Local Staging");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page WC",
			siteName = "Site Name Local Staging");

		AssertTextEquals(
			key_assetTitle = "WC WebContent Title Edit",
			locator1 = "AP#ASSET_ABSTRACT_TITLE",
			value1 = "WC WebContent Title Edit");

		Navigator.openSiteURL(siteName = "Site Name Local Staging");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSitePage(
			pageName = "Test Page WC",
			siteName = "Site Name Local Staging");

		AssertTextEquals(
			key_assetTitle = "WC WebContent Title Edit",
			locator1 = "AP#ASSET_ABSTRACT_TITLE",
			value1 = "WC WebContent Title Edit");

		DepotNavigator.openDepotWebContentAdminStaging(depotName = "Test Depot Name Local Staging");

		WebContent.deleteStagedCP(
			depotName = "Test Depot Name Local Staging",
			webContentTitle = "WC WebContent Title Edit");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		Navigator.gotoStagedSitePage(
			pageName = "Test Page WC",
			siteName = "Site Name Local Staging");

		AssertElementNotPresent(
			key_assetTitle = "WC WebContent Title Edit",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSitePage(
			pageName = "Test Page WC",
			siteName = "Site Name Local Staging");

		AssertElementNotPresent(
			key_assetTitle = "WC WebContent Title Edit",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");
	}

	macro publishWorkflowDefinition {
		var testRunEnvironment = PropsUtil.get("test.run.environment");

		if ("${testRunEnvironment}" == "EE") {
			ApplicationsMenu.gotoPortlet(
				category = "Workflow",
				panel = "Applications",
				portlet = "Process Builder");

			Workflow.viewDefinitionUnpublished(workflowDefinitionTitle = "New Workflow Definition Draft");

			Workflow.publishExistingWorkflowDefinition(workflowDefinitionTitle = "New Workflow Definition Draft");

			Navigator.gotoBack();

			Workflow.viewDefinitionPublished(workflowDefinitionTitle = "New Workflow Definition Draft");
		}
	}

	macro resetTestUserPassword {
		Type(
			locator1 = "TextInput#EMAIL",
			value1 = "${administratorEmail}");

		SetupWizard.finishConfigurationPG();

		Portlet.shutdownServer();

		Portlet.startServer(deleteLiferayHome = "false");

		Navigator.openURL();

		if (IsElementPresent(locator1 = "UserBar#USER_SIGN_IN")) {
			User.loginPG(
				newPassword = "test2",
				password = "test",
				userEmailAddress = "test@liferay.com");
		}
		else {
			User.acceptEndUserLicenseAgreement();

			User.resetPassword(newPassword = "test2");

			User.answerPasswordReminder();

			AssertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");
		}

		User.logoutPG();

		User.firstLoginUI(
			password = "test2",
			userEmailAddress = "test@liferay.com");
	}

	macro revokeAndUpdateSharedEntry {
		Asset.openTosharedContent(
			navTab = "Shared by Me",
			siteURLKey = "guest");

		Asset.gotoManageCollaboratorsViaSharedByMe(contentTitle = "${dmDocumentTitleView}");

		DMDocumentSharing.removeCollaborator(
			collaboratorList = "user1fn",
			sharedByMe = "true");

		Asset.openTosharedContent(
			navTab = "Shared by Me",
			siteURLKey = "guest");

		if (isSet(blogsEntryTitleView)) {
			Asset.gotoManageCollaboratorsViaSharedByMe(contentTitle = "${blogsEntryTitleView}");

			DMDocumentSharing.removeCollaborator(
				collaboratorList = "user2fn",
				sharedByMe = "true");

			User.logoutPG();

			User.loginUserPG(
				password = "test",
				userEmailAddress = "user2@liferay.com");

			DMDocumentSharing.editViaSharedwithMe(
				entryTitle = "${blogsEntryTitleUpdate}",
				entryTitleEdit = "${blogsEntryTitleUpdate} Edit");
		}

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "user1@liferay.com");

		DMDocumentSharing.editViaSharedwithMe(
			dmDocumentTitle = "${dmDocumentTitleUpdate}",
			entryTitleEdit = "${dmDocumentTitleUpdate} Edit");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	macro submitNewWorkflow {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			portlet = "Workflow");

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Blogs Entry");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		Pause(locator1 = "3000");

		Blogs.addWithWorkflow(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Subtitle",
			entryTitle = "New Blog After Upgrade");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		BlogsEntry.viewWithWorkflowCP(
			entryContent = "Blogs Entry Content",
			entryTitle = "New Blog After Upgrade");

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

		Workflow.assignToMeTaskByActions(
			workflowAssetTitle = "New Blog After Upgrade",
			workflowAssetType = "Blogs Entry",
			workflowTask = "Review");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		BlogsEntry.viewWithWorkflowCP(
			entryContent = "Blogs Entry Content",
			entryTitle = "New Blog After Upgrade");

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

		Workflow.approveTaskByActions(
			workflowAssetTitle = "New Blog After Upgrade",
			workflowAssetType = "Blogs Entry",
			workflowTask = "Review");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		BlogsEntry.viewEntryTable(entryTitle = "New Blog After Upgrade");

		LexiconEntry.changeDisplayStyle(displayStyle = "cards");

		BlogsNavigator.gotoEntryCP(entryTitle = "New Blog After Upgrade");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entryTitle = "New Blog After Upgrade");

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "My Submissions");

		Workflow.gotoViewCompletedAssetViaMySubmissions(workflowAssetTitle = "New Blog After Upgrade");

		BlogsEntry.viewEntryAsWorkflowAsset(
			entryContent = "Blogs Entry Content",
			entryTitle = "New Blog After Upgrade");
	}

	macro validateCollections {
		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssetPublisherPortlet.selectAssetList(
			assetListName = "Depot Dynamic Asset List",
			depotName = "Test Depot Name");

		for (var assetTitle : list "DM Without Autotagging,DM Document Title Sharing,DM Document Title In Site") {
			AssetPublisherPortlet.viewAssetPG(assetTitle = "${assetTitle}");
		}

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.removeScope(
			assetListTitle = "Depot Dynamic Asset List",
			scopeName = "Current Asset Library");

		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(assetTitle = "DM Document Title In Site");

		for (var assetTitle : list "DM Without Autotagging,DM Document Title Sharing") {
			AssetPublisherPortlet.viewAssetNotPresentPG(assetTitle = "${assetTitle}");
		}

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.deleteEntry(assetListTitle = "Depot Dynamic Asset List");
	}

	macro validateDepotDMAndType {
		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_assetTitle = "DM Document Title In Depot",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		Search.searchCP(searchTerm = "DM Document Title In Depot");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "DM Document Title In Depot",
			searchAssetType = "Document");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMDocument.editCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentFileEdit = "Document_1.txt",
			dmDocumentFileNameEdit = "DM Document Title In Depot.txt",
			dmDocumentTitle = "DM Document Title In Depot",
			dmDocumentTitleEdit = "DM Document Title In Depot Edit");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title In Depot Edit");

		DMDocument.viewCP(
			dmDocumentFileName = "DM Document Title In Depot.txt",
			dmDocumentTitle = "DM Document Title In Depot Edit");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMDocument.deleteCP(dmDocumentTitle = "DM Document Title In Depot Edit");

		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertElementNotPresent(
			key_assetTitle = "DM Document Title In Depot Edit",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document with DM Document Type Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Title With DM Type",
			dmDocumentTypeName = "DM Document Type Name",
			numericField = "1234",
			numericFieldFieldLabel = "Number");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title With DM Type");

		DMDocument.viewDocumentTypePG(
			numericFieldLabel = "Number",
			numericValue = "1234");

		DepotNavigator.openDepotDocumentTypeAdmin(depotName = "Test Depot Name");

		DMDocumentType.edit(
			dmDocumentTypeName = "DM Document Type Name",
			fieldFieldLabel = "Number",
			fieldFieldLabelEdit = "Amount");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title With DM Type");

		DMDocument.viewDocumentTypePG(
			numericFieldLabel = "Amount",
			numericValue = "1234");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.deleteCP(dmDocumentTitle = "DM Document Title With DM Type");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name");

		RecycleBin.deleteCP(
			assetName = "DM Document Title With DM Type",
			assetType = "Document");

		DepotNavigator.openDepotDocumentTypeAdmin(depotName = "Test Depot Name");

		DMDocumentType.delete(dmDocumentTypeName = "DM Document Type Name");
	}

	macro validateDepotEntries {
		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Test Depot Name");

		DepotNavigator.openDepotSiteSettings(depotName = "Test Depot Name");

		Depot.viewConnectedSite(
			depotName = "Test Depot Name",
			siteList = "Site Name");

		DepotNavigator.openDepotAdmin();

		Depot.editDepot(
			depotDescriptionEdit = "This is an edited description of a depot",
			depotName = "Test Depot Name",
			depotNameEdit = "Edited Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.deleteCP(depotName = "Edited Test Depot Name");

		AssertElementNotPresent(
			key_card = "Edited Test Depot Name",
			locator1 = "Card#CARD_TITLE_LINK");
	}

	macro validateDepotSettings {
		DepotNavigator.openDepotAdmin();

		Depot.viewApplication(
			applicationList = "Collections",
			depotName = "Test Depot Name For Settings",
			noApplication = "true");

		DepotNavigator.gotoPortlet(
			depotName = "Test Depot Name For Settings",
			portlet = "Asset Library Settings");

		for (var toggleSwitchLabel : list "Enable Auto Tagging,Enable Sharing") {
			Depot.viewDepotConfiguration(
				configuration = "disabled",
				toggleSwitchLabel = "${toggleSwitchLabel}");
		}

		Depot.configureAutoTagging(autoTagging = "Enabled");

		Depot.configureSharing(sharing = "Enabled");

		for (var toggleSwitchLabel : list "Enable Auto Tagging,Enable Sharing") {
			Depot.viewDepotConfiguration(
				configuration = "enabled",
				toggleSwitchLabel = "${toggleSwitchLabel}");
		}

		DepotNavigator.gotoLanguages();

		Depot.viewDefaultLanguage(defaultDepotLanguage = "Spanish (Spain)");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Test Depot Name");

		DepotNavigator.gotoPortlet(
			depotName = "Test Depot Name",
			portlet = "Asset Library Settings");

		Depot.configureAutoTagging(autoTagging = "Disabled");

		Depot.configureSharing(sharing = "Disabled");

		for (var toggleSwitchLabel : list "Enable Auto Tagging,Enable Sharing") {
			Depot.viewDepotConfiguration(
				configuration = "disabled",
				toggleSwitchLabel = "${toggleSwitchLabel}");
		}
	}

	macro validateDepotWCAndStructure {
		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_assetTitle = "WC WebContent Title",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		Search.searchCP(searchTerm = "WC WebContent Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content Article");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssertVisible(
			key_assetTitle = "WC WebContent Title Edit",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		WebContent.deleteCP(
			depotName = "Test Depot Name",
			webContentTitle = "WC WebContent Title Edit");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			structureName = "WC Structure Name",
			webContentText = "This is a Text field",
			webContentTitle = "Web Content Title With Structure");

		PortletEntry.publish();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContent.viewWithStructureCP(
			webContentText = "This is a Text field",
			webContentTitle = "Web Content Title With Structure");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		NavItem.gotoStructures();

		WebContentNavigator.gotoEditStructure(structureName = "WC Structure Name");

		DataEngine.editFieldLabel(
			fieldFieldLabel = "Text",
			fieldFieldLabelEdit = "Text Edit");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContent.viewWithStructureCP(
			webContentText = "This is a Text field",
			webContentTextFieldLabel = "Text Edit",
			webContentTitle = "Web Content Title With Structure");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContent.deleteCP(
			siteURLKey = "site-name",
			webContentTitle = "Web Content Title With Structure");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		WebContentStructures.deleteCP(structureName = "WC Structure Name");
	}

	macro viewAndAccessRedirects {
		var portalURL = PropsUtil.get("portal.url");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-permanent-page",
			redirectType = "Temporary",
			sourceURL = "${portalURL}/web/test-site-name/test-source-permanent-page");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-permanent-page");

		SelectWindow(locator1 = "title=Test Destination Permanent Page - Test Site Name - Liferay DXP");

		AssertLocation(value1 = "${portalURL}/web/test-site-name/test-destination-permanent-page");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-source-temporary-page",
			redirectType = "Temporary",
			sourceURL = "${portalURL}/web/test-site-name/test-destination-temporary-page");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-temporary-page");

		AssertLocation(value1 = "${portalURL}/web/test-site-name/test-destination-temporary-page");

		for (var i : list "1,2") {
			Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-without-references-page${i}");

			AssertLocation(value1 = "${portalURL}/web/test-site-name/test-without-references-page3");
		}

		for (var i : list "1,2") {
			Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-with-references-page${i}");

			AssertLocation(value1 = "${portalURL}/web/test-site-name/test-with-references-page3");
		}
	}

	macro viewAndAddBlogEntry {
		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Blogs",
			siteURLKey = "guest");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			uploadFileName = "Document_1.jpg");

		if (isSet(video)) {
			BlogsNavigator.openToBlogEntry(
				entryTitle = "Blogs Entry Title With Video",
				layoutName = "Blogs",
				siteURLKey = "guest");

			BlogsEntry.viewEntryPG(
				embedVideo = "true",
				entryContent = "video",
				entryTitle = "Blogs Entry Title With Video");
		}

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "user1@liferay.com");

		Navigator.gotoPage(pageName = "Blogs");

		AssertVisible(locator1 = "Blogs#UNSUBSCRIBE_LINK");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoPage(pageName = "Blogs");

		Ratings.viewRateThumb(
			ratingResult = "Rate this as good",
			voteCount = "0");

		Ratings.viewRateThumb(
			ratingResult = "You have rated this as bad",
			voteCount = "1");

		Blogs.addEntry(
			entryContent = "Blogs Entry After Upgrade Content",
			entrySubtitle = "Blogs Entry After Upgrade Subtitle",
			entryTitle = "Blogs Entry After Upgrade Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry After Upgrade Content",
			entryTitle = "Blogs Entry After Upgrade Title");
	}

	macro viewAndAddImageResolution {
		AdaptiveMedia.openAdaptiveMediaAdmin();

		AdaptiveMedia.viewImageResolutionTableEntry(
			imageName = "Preview",
			maxHeight = "Auto",
			maxWidth = "1000");

		AdaptiveMedia.selectAdaptiveMediaImage(imageName = "Thumbnail 300x300");

		AdaptiveMedia.viewNumberOfAdaptedImages(numberOfAdaptedImages = "1/1");

		AdaptiveMedia.openToAddImageResolution();

		AdaptiveMedia.addImageResolution(
			imageName = "Low Resolution",
			maxHeight = "480",
			maxWidth = "320");

		AdaptiveMedia.viewImageResolutionTableEntry(
			imageName = "Low Resolution",
			maxHeight = "480",
			maxWidth = "320",
			percentAdapted = "0");
	}

	macro viewAndAddKBArticle {
		Navigator.gotoPage(pageName = "Knowledge Base");

		KBArticle.viewPG(
			embedVideo = "true",
			kbArticleContent = "Knowledge Base Video Content",
			kbArticleTitle = "Knowledge Base Article Title");

		Navigator.gotoPage(pageName = "Knowledge Base");

		Ratings.viewRateThumb(
			ratingResult = "You have rated this as good",
			voteCount = "1");

		KBAdmin.openKBAdmin(siteURLKey = "guest");

		KBArticle.addCP(
			kbArticleContent = "Knowledge Base Article Content After Upgrade",
			kbArticleTitle = "Knowledge Base Article Title After Upgrade");

		Navigator.gotoPage(pageName = "Knowledge Base");

		KBArticle.gotoViaKBDisplayPG(kbArticleTitle = "Knowledge Base Article Title After Upgrade");

		KBArticle.viewPG(
			kbArticleContent = "Knowledge Base Article Content After Upgrade",
			kbArticleTitle = "Knowledge Base Article Title After Upgrade");
	}

	macro viewAndAddMessageBoard {
		Navigator.gotoPage(pageName = "Message Boards");

		MessageboardsThread.gotoPG(
			lastPostUserName = "Test Test",
			replyCount = "0",
			threadBody = "Message Boards Body",
			threadSubject = "Message Boards Subject");

		MessageboardsThread.viewPG(
			threadBody = "Message Boards Body",
			threadSubject = "Message Boards Subject");

		Ratings.viewRateThumb(
			ratingResult = "You have rated this as good",
			voteCount = "1");

		Navigator.gotoPage(pageName = "Message Boards");

		MessageboardsThread.addPG(
			threadBody = "Message Boards Body After Upgrade",
			threadSubject = "Message Boards Subject After Upgrade");

		MessageboardsThread.viewPG(
			threadBody = "Message Boards Body After Upgrade",
			threadSubject = "Message Boards Subject After Upgrade");
	}

	macro viewAndAddWiki {
		Navigator.gotoPage(pageName = "Wiki");

		WikiNavigator.gotoFrontPagePG();

		WikiPage.viewFrontPagePG(
			wikiPageContent = "Wiki Front Page Content",
			wikiPageTitle = "FrontPage");

		Navigator.gotoPage(pageName = "Wiki");

		Ratings.viewRateStar(
			averageRatingStarCount = "4.0",
			ratingStarCount = "4");

		WikiNavigator.gotoAllPagesPG();

		WikiPage.addPG(
			wikiPageContent = "Wiki Page Content After Upgrade",
			wikiPageTitle = "Wiki Page Title After Upgrade");

		WikiNavigator.gotoPG(wikiPageTitle = "Wiki Page Title After Upgrade");

		WikiPage.viewPagePG(
			wikiPageContent = "Wiki Page Content After Upgrade",
			wikiPageTitle = "Wiki Page Title After Upgrade");
	}

	macro viewAndDeleteFormEntry {
		Navigator.openURL();

		Navigator.gotoPage(pageName = "Form Page");

		FormFields.viewParagraphField(
			fieldTitle = "Paragraph",
			fieldValue = "Paragraph body text.");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Status",
			fieldValue = "Approved");

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Checkbox",
			fieldValue = "Checkbox");

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Multiple Selection",
			fieldValue = "1, 2, 4");

		FormsAdminNavigator.gotoView();

		FormFields.viewParagraphField(
			fieldTitle = "Paragraph",
			fieldValue = "Paragraph body text.");

		FormsAdmin.viewTextEntry(
			fieldLabel = "SingleLineText",
			fieldName = "SingleLineText",
			fieldValue = "Single Line Text");

		FormsAdmin.viewMultilineTextEntry(
			fieldLabel = "MultilineText",
			fieldName = "MultilineText",
			fieldValue = "Multiline Text");

		FormsAdmin.viewSelectEntry(
			fieldLabel = "Select",
			fieldName = "Select",
			selectOption = "Select 1");

		FormsAdmin.viewRadioEntry(
			fieldLabel = "Radio",
			fieldName = "Radio",
			fieldValue = "Option 1");

		FormsAdmin.viewDateEntry(
			fieldLabel = "Date",
			fieldName = "Date",
			fieldValue = "05/02/2016");

		FormsAdmin.viewCheckboxEntry(
			fieldName = "Checkbox",
			fieldValue = "Checkbox");

		FormPortlet.clickNextPage();

		FormsAdmin.viewTextEntry(
			fieldLabel = "SingleLineText2",
			fieldName = "SingleLineText2",
			fieldValue = "SingleLineText2");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.deleteFormEntry(formEntryValue = "Option 1");

		FormsAdmin.viewNoFormEntries();
	}

	macro viewAndDeleteGoogleDriveDocuments {
		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.deletePG(dmDocumentTitle = "Edited Google Document");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.deletePG(dmDocumentTitle = "Edited Google Sheet");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.deletePG(dmDocumentTitle = "Edited Google Slide");
	}

	macro viewAndDeleteOneDriveDocument {
		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		AssertTextEquals(
			key_dmDocumentTitle = "OneDrive ${dmDocumentTypeName} Title",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "OneDrive ${dmDocumentTypeName} Title");

		DMDocument.deletePG(dmDocumentTitle = "OneDrive ${dmDocumentTypeName} Title");
	}

	macro viewAndEditContentPageReview {
		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.gotoPageEditor();

		PageEditor.gotoTab(tabName = "Comments");

		PageEditor.clickConfigurableField(fragmentName = "Static Text");

		PageEditor.viewComment(fragmentComment = "This is a fragment comment");

		PageEditor.viewCommentReply(
			commentReply = "Fragment Comment 1",
			user = "Test Test");

		PageEditor.deleteComment(fragmentComment = "This is a fragment comment");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.gotoPageEditor();

		PageEditor.addComment(
			fragmentComment = "This is a new fragment comment",
			fragmentName = "Static Text");

		PageEditor.replyToComment(commentReply = "Fragment Comment 2");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.gotoPageEditor();

		PageEditor.gotoTab(tabName = "Comments");

		PageEditor.clickConfigurableField(fragmentName = "Static Text");

		PageEditor.viewComment(fragmentComment = "This is a new fragment comment");

		PageEditor.viewCommentReply(
			commentReply = "Fragment Comment 2",
			user = "Test Test");
	}

	macro viewAndEditCustomMetaTag {
		var portalURL = PropsUtil.get("portal.url");

		User.logoutPG();

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-page-name");

		CustomMetaTags.viewTags(customMetaTagsList = '''property="custom Tag 1 property" content="custom Tag 1 content",property="custom Tag 2 property" content="custom Tag 2 content"''');

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Test Page Name");

		Navigator.gotoNavTab(navTab = "Custom Meta Tags");

		CustomMetaTags.editTag(
			customContent = "custom Tag 1 content",
			customProperty = "custom Tag 1 property",
			newCustomContent = "custom Tag 1 content edit",
			newCustomProperty = "custom Tag 1 property edit");

		CustomMetaTags.removeTag(tagNum = "2");

		CustomMetaTags.addMultipleTags(customTagsList = "custom Tag 3");

		User.logoutPG();

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-page-name");

		CustomMetaTags.viewTags(customMetaTagsList = '''property="custom Tag 1 property edit" content="custom Tag 1 content edit",property="custom Tag 3 property" content="custom Tag 3 content"''');
	}

	macro viewAndEditGoogleDriveDocuments {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		var key_dmDocumentTitle = "Untitled (1)";

		Click(locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Edit in Google Sheets");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay");

		GoogleDoc.editTitleInGoogleDoc(dmDocumentTitle = "Edited Google Sheet");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		AssertTextEquals(
			key_dmDocumentTitle = "Edited Google Sheet",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Edited Google Sheet");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		GoogleDoc.gotoEdit(
			dmDocumentTitle = "Untitled (2)",
			dmDocumentTypeName = "Google Slides");

		GoogleDoc.editTitleInGoogleDoc(dmDocumentTitle = "Edited Google Slide");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		AssertTextEquals(
			key_dmDocumentTitle = "Edited Google Slide",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Edited Google Slide");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		GoogleDoc.gotoEdit(
			dmDocumentTitle = "Untitled",
			dmDocumentTypeName = "Google Docs");

		GoogleDoc.editTitleInGoogleDoc(dmDocumentTitle = "Edited Google Document");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		AssertTextEquals(
			key_dmDocumentTitle = "Edited Google Document",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Edited Google Document");
	}

	macro viewAndEditOpenGraph {
		var portalURL = PropsUtil.get("portal.url");

		var siteId = JSONGroupSetter.setGroupId(groupName = "Test Site Name");

		Navigator.openToGroupPagesPortlet(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			portlet = "Open Graph",
			siteURLKey = "test-site-name");

		Page.viewPreview(
			description = "This is a custom description",
			htmlTitle = "This is a custom title",
			key_imageName = "Document_1.jpg",
			openGraph = "true",
			portalURL = "${portalURL}",
			siteNameURL = "test-site-name");

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-page-name");

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''"og:title" content="This is a custom title","og:description" content="This is a custom description","og:image" content="${portalURL}/documents/${siteId}/0/Document_1.jpg''');

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.openToGroupPagesPortlet(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			portlet = "Open Graph",
			siteURLKey = "test-site-name");

		OpenGraph.configureOpenGraph(
			customDescription = "This is a custom description edit",
			customImage = "true",
			customTitle = "This is a custom title edit",
			pageName = "Test Page Name",
			uploadFileName = "Document_2.jpg");

		Page.viewPreview(
			description = "This is a custom description edit",
			htmlTitle = "This is a custom title edit",
			key_imageName = "Document_2.jpg",
			openGraph = "true",
			portalURL = "${portalURL}",
			siteNameURL = "test-site-name");

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-page-name");

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''"og:title" content="This is a custom title edit","og:description" content="This is a custom description edit","og:image" content="${portalURL}/documents/${siteId}/0/Document_2.jpg''');

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.openToGroupPagesPortlet(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			portlet = "Open Graph",
			siteURLKey = "test-site-name");

		OpenGraph.clearImage();

		Button.click(button = "Save");

		Site.openToSiteSettingsPages(
			portlet = "Open Graph",
			siteURLKey = "test-site-name");

		OpenGraph.configureOpenGraph(
			customImage = "true",
			uploadFileName = "Document_3.jpg");

		Site.openToSiteSettingsPages(
			portlet = "Open Graph",
			siteURLKey = "test-site-name");

		OpenGraph.viewPreviewImage(imageName = "Document_3.jpg");

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-page-name");

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''"og:image" content="${portalURL}/documents/${siteId}/0/Document_3.jpg''');
	}

	macro viewAndEditSERPPreview {
		var portalURL = PropsUtil.get("portal.url");

		Navigator.gotoPage(pageName = "Test Page");

		Navigator.gotoEditPageViaControlMenu(pageName = "Test Page");

		Navigator.gotoNavTab(navTab = "SEO");

		Page.viewPreview(
			description = "Description",
			htmlTitle = "Page HTML Title - Liferay DXP",
			pageName = "Test Page",
			portalURL = "${portalURL}");

		Navigator.gotoNavTab(navTab = "Open Graph");

		Page.viewPreview(
			description = "Description",
			htmlTitle = "Page HTML Title - Liferay DXP",
			openGraph = "true",
			pageName = "Test Page",
			portalURL = "${portalURL}");

		Navigator.gotoNavTab(navTab = "SEO");

		PortletEntry.inputText(
			fieldLabel = "HTML Title",
			text = "Page HTML Title Edit");

		PortletEntry.inputText(
			fieldLabel = "Description",
			text = "Page Description Edit");

		Button.clickSave();

		Page.viewPreview(
			description = "Page Description Edit",
			htmlTitle = "Page HTML Title Edit - Liferay DXP",
			pageName = "Test Page",
			portalURL = "${portalURL}");
	}

	macro viewAndEditUser {
		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.viewCP(
			userBirthday = "09/09/1999",
			userEmailAddress = "user@liferay.com",
			userFirstName = "userfn",
			userJobTitle = "PhD",
			userLastName = "userln",
			userScreenName = "usersn");

		AssertTextEquals(
			key_tagName = "tag1",
			locator1 = "AssetCategorization#TAG",
			value1 = "tag1");

		AssertTextEquals(
			locator1 = "TextArea#COMMENTS",
			value1 = "This is a pre-upgrade comment!");

		UserNavigator.gotoContact();

		var testName = TestCase.getTestName();

		if (contains("${testName}", "72")) {
			var postalCode = "91765";
		}
		else {
			var postalCode = "91789";
		}

		User.viewAddress(
			addressType = "Business",
			city = "Walnut",
			country = "United States",
			postalCode = "${postalCode}",
			region = "California",
			street1 = "1220 Brea Canyon Rd");

		Navigator.gotoNavNested(navNested = "Contact Information");

		User.viewContactInformation(
			number = "555-555-5555",
			numberType = "Business",
			searchContainerType = "phonesSearchContainer");

		User.viewContactInformation(
			addressCount = "10",
			addressPrefix = "test",
			searchContainerType = "emailAddressesSearchContainer");

		User.viewContactInformation(
			searchContainerType = "websitesSearchContainer",
			url = "https://www.google.com/");

		User.viewContactInformation(skype = "orgusersnskype");

		UserNavigator.gotoPreferences();

		var testName = TestCase.getTestName();

		// Ignore these steps for 73 due to LPS-121271

		if (!(contains("${testName}", "73"))) {
			for (var announcementType : list "General,News,Test") {
				AssertChecked(
					key_announcementType = "${announcementType}",
					key_notificationType = "Email",
					locator1 = "UsersAndOrganizationsEditUser#ALERTS_AND_ANNOUNCEMENTS_DELIVERY_CHECKBOX");
			}
		}

		Navigator.gotoNavNested(navNested = "Display Settings");

		if (IsTextNotEqual(locator1 = "Select#LOS_ANGELES_TIME_ZONE", value1 = "(UTC -07:00) Pacific Daylight Time")) {
			AssertSelectedLabel(
				locator1 = "Select#TIME_ZONE",
				value1 = "(UTC -08:00) Pacific Standard Time");
		}
		else {
			AssertSelectedLabel(
				locator1 = "Select#TIME_ZONE",
				value1 = "(UTC -07:00) Pacific Daylight Time");
		}

		AssertTextEquals(
			locator1 = "UsersAndOrganizationsEditUser#DISPLAY_SETTINGS_GREETING_FIELD",
			value1 = "Welcome Organization Usersn! This is a pre-upgrade edit!");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.gotoEditCP(userScreenName = "usersn");

		UserNavigator.gotoOrganizations();

		AssertTextEquals(
			key_orgName = "Organization1",
			locator1 = "ContentRow#ORGANIZATION_TABLE_NAME",
			value1 = "Organization1");

		User.viewUserInfomationSitesCP(siteName = "Test Site Name");

		User.viewUserInfomationRolesCP(roleTitle = "Administrator");

		AssertTextEquals(
			key_roleTitle = "Organization Administrator",
			locator1 = "Permissions#CONTENT_PERMISSIONS_ROLE_NAME",
			value1 = "Organization Administrator");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			requirePasswordReset = "true",
			userEmailAddress = "user@liferay.com",
			userScreenName = "usersn");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "user@liferay.com");

		UserBar.gotoDropdownItem(dropdownItem = "My Profile");

		BlogsEntry.viewEntryPG(
			entryContent = "Usersn Blog Entry Content",
			entryTitle = "Usersn Blog Entry Title");

		UserBar.gotoDropdownItem(dropdownItem = "My Dashboard");

		AssertClick(
			key_pageName = "Documents and Media",
			locator1 = "Home#PAGE",
			value1 = "Documents and Media");

		LiferayEvent.waitForPortletReady();

		DMDocument.viewPG(dmDocumentTitle = "Document txt Title");

		Navigator.gotoBack();

		DMDocument.viewPG(dmDocumentTitle = "Document doc Title");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.gotoEditCP(userScreenName = "usersn");

		User.deleteProfileImage();

		User.editUserInformation(
			userFirstNameEdit = "userfn1",
			userLastNameEdit = "userln1",
			userScreenNameEdit = "usersn1");

		Type(
			locator1 = "TextArea#COMMENTS",
			value1 = "This is a post-upgrade comment!");

		PortletEntry.save();

		User.editAddressCP(
			addressType = "Personal",
			city = "Diamond Bar",
			postalCode = "91765",
			street1 = "1400 Montefino Ave");

		UserNavigator.gotoDisplaySettings();

		User.editUserDisplaySettingsTimeZonePacific(displaySettingsGreeting = "Welcome Organization Usersn! This is a post-upgrade edit!");

		PortletEntry.save();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.viewCP(
			userEmailAddress = "user@liferay.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1");

		AssertTextEquals(
			locator1 = "TextArea#COMMENTS",
			value1 = "This is a post-upgrade comment!");

		UserNavigator.gotoContact();

		User.viewAddress(
			addressType = "Personal",
			city = "Diamond Bar",
			country = "United States",
			postalCode = "91765",
			region = "California",
			street1 = "1400 Montefino Ave");

		UserNavigator.gotoDisplaySettings();

		AssertTextEquals(
			locator1 = "UsersAndOrganizationsEditUser#DISPLAY_SETTINGS_GREETING_FIELD",
			value1 = "Welcome Organization Usersn! This is a post-upgrade edit!");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.gotoEditCP(userScreenName = "usersn1");

		AssetCategorization.removeTag(tagName = "tag1");

		PortletEntry.save();

		UserNavigator.gotoOrganizations();

		Click(locator1 = "Icon#DELETE");

		PortletEntry.save();

		UserNavigator.gotoMemberships();

		Click(locator1 = "Icon#DELETE");

		PortletEntry.save();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.unassignRegularRoleCP(
			regularRoleName = "Administrator",
			userScreenName = "usersn1");

		UserNavigator.gotoContact();

		User.removeContactInformation(rowEntry = "1400 Montefino Ave");

		Navigator.gotoNavNested(navNested = "Contact Information");

		User.removeContactInformation(rowEntry = "555-555-5555");

		User.removeContactInformation(rowEntry = "test1@liferay.com");

		User.removeContactInformation(rowEntry = "https://www.google.com/");

		PortletEntry.save();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.deactivateCP(userFirstName = "userfn1");

		User.deleteCP();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.searchCP(searchTerm = "usersn");

		User.viewNoUsersFoundCP();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		UsersAndOrganizationsNavigator.gotoOrganizations();

		Organization.deleteCP(orgName = "Organization1");
	}

	macro viewAssetPublisher {
		task ("Configure the Asset Publisher to show full content") {
			Navigator.gotoPage(pageName = "Asset Publisher");

			AssetPublisherPortlet.configureAssetLinkBehaviorPG(assetLinkBehavior = "Show Full Content");
		}

		task ("View the dynamic selection asset in Asset Publisher") {
			AssertTextEquals(
				key_portletName = "Asset Publisher",
				locator1 = "Portlet#TITLE",
				value1 = "Asset Publisher");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Web Content Content",
				assetTitle = "Web Content Title");
		}

		task ("View category shown in Asset Publisher") {
			if (isSet(categoryName)) {
				AssetPublisherPortlet.viewAssetMetadataPG(categoryName = "${categoryName}");
			}
		}

		task ("View the manual selection asset in Asset Publisher") {
			if (IsElementPresent(key_pageName = "Asset Publisher Test 2", locator1 = "Home#PAGE")) {
				Navigator.gotoPage(pageName = "Asset Publisher Test 2");

				AssertTextEquals(
					key_portletName = "Asset Publisher",
					locator1 = "Portlet#TITLE",
					value1 = "Asset Publisher");

				AssetPublisherPortlet.viewAssetPG(
					assetContent = "Web Content Content",
					assetTitle = "Web Content Title");
			}
		}
	}

	macro viewCalendar {
		Navigator.gotoPage(pageName = "Calendar");

		ProductMenuHelper.closeProductMenu();

		CalendarEvent.view(eventTitle = "Calendar Event Title");

		CalendarNavigator.gotoEditEvent(eventTitle = "Calendar Event Title");

		CalendarEvent.editTitle(eventTitle = "Calendar Event Title Edited");

		CalendarEvent.publishRepeating(saveOption = "Entire Series");

		Navigator.gotoPage(pageName = "Calendar");

		ProductMenuHelper.closeProductMenu();

		CalendarEvent.view(eventTitle = "Calendar Event Title Edited");

		Navigator.gotoPage(pageName = "Calendar");

		CalendarNavigator.gotoAddEvent();

		CalendarEvent.add(
			eventTitle = "Post Upgrade Calendar Event",
			eventType = "Regular",
			pageName = "Calendar");

		Navigator.gotoPage(pageName = "Calendar");

		ProductMenuHelper.closeProductMenu();

		CalendarEvent.view(eventTitle = "Post Upgrade Calendar Event");
	}

	macro viewCardWithThreeColumnsInMobileBreakpoint {
		task ("Select Mobile Device in simulation menu") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			MobileDevice.previewPG(deviceType = "smartphone");
		}

		task ("View Card fragment width is same as column width at mobile mode") {
			var columnWidth = selenium.getElementWidth("//div[contains(@class,'flex-row')]");
			var cardFragmentWidth = selenium.getElementWidth("xpath=(//div[contains(@class,'col-md')])[2]");

			TestUtils.assertEquals(
				actual = "${cardFragmentWidth}",
				expected = "${columnWidth}");
		}
	}

	macro viewClassicSearchPortletConfiguration {
		Navigator.gotoSitePage(
			pageName = "Site Page",
			siteName = "Site Name");

		ClassicSearch.gotoOptions(portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		AssertTextEquals(
			key_scopeName = "Everything",
			locator1 = "Select#SCOPE_SELECTED",
			value1 = "Everything");

		FormFields.viewCheckboxNotChecked(fieldName = "UserSearchFacet");

		Navigator.gotoNavTab(navTab = "Spell Check Settings");

		FormFields.viewCheckboxChecked(fieldName = "collatedSpellCheckResultEnabled");

		IFrame.closeFrame();

		Navigator.gotoSitePage(
			pageName = "Site Page",
			siteName = "Site Name");

		ClassicSearch.search(searchTerm = "WC Title");

		ClassicSearch.viewSearchResultPG(
			searchAssetTitle = "WC Title 1",
			searchAssetType = "Web Content Article");

		ClassicSearch.viewSearchResultPG(
			searchAssetTitle = "WC Title 2",
			searchAssetType = "Web Content Article");

		AssertElementNotPresent(locator1 = "SearchResults#USER_FACET_ANY_USER");
	}

	macro viewContributedFragmentStyle {
		task ("Navigate to page in view mode") {
			ApplicationsMenu.gotoSite(site = "Test Site Name");

			Navigator._gotoPage(pageName = "Test Fragment Content Page");

			Pause(locator1 = "5000");

			Refresh();

			WaitForPageLoad();
		}

		task ("Assert styles of Container in view mode") {
			var screenWidth = selenium.getElementWidth("//body");
			var containerWidth = selenium.getElementWidth("//div[contains(@class,'container')][contains(@class,'pb-3')][contains(@class,'pt-3')]");

			TestUtils.assertNotEquals(
				actual = "${containerWidth}",
				expected = "${screenWidth}");

			AssertVisible(locator1 = "//div[contains(@class,'container')][contains(@class,'pb-3')][contains(@class,'pt-3')]");

			AssertCssValue(
				locator1 = "//div[contains(@class,'container')][contains(@class,'pb-3')][contains(@class,'pt-3')]//parent::div",
				locator2 = "background-color",
				value1 = "rgba(46, 90, 172, 1)");

			AssertCssValue(
				locator1 = "//div[contains(@class,'container')][contains(@class,'pb-3')][contains(@class,'pt-3')]",
				locator2 = "max-width",
				value1 = "${containerWidth}px");
		}

		task ("Assert styles of Button in view mode") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "Button",
				marginBottom = "1",
				size = "lg",
				type = "link");
		}

		task ("Assert styles of Card in view mode") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				borderRadius = "0.375rem",
				boxShadow = "0 1rem 3rem rgba(0, 0, 0, .175)",
				fragmentName = "Card",
				imageSize = "0",
				marginBottom = "1");
		}

		task ("Assert styles of Heading in view mode") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "Heading",
				headingLevel = "h2",
				marginBottom = "1",
				textColor = "#287D3C");
		}

		task ("Assert styles of HTML in view mode") {
			PageEditor.viewFragmentStyle(
				fragmentName = "HTML",
				marginBottom = "1");
		}

		task ("Assert styles of Image in view mode") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "Image",
				imageSize = "0",
				marginBottom = "1");
		}

		task ("Assert styles of Paragraph in view mode") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "Paragraph",
				marginBottom = "1",
				textColor = "#B95000");
		}

		task ("Assert styles of Separator in view mode") {
			PageEditor.viewFragmentStyle(
				bottomSpacing = "1",
				separatorColor = "dark");
		}

		task ("Assert styles of Spacer in view mode") {
			PageEditor.viewFragmentStyle(height = "5");
		}

		task ("Assert styles of Video in view mode") {
			AssertElementPresent(
				key_alignment = "center",
				locator1 = "Fragment#ALIGN");

			AssertElementPresent(
				key_height = "300px",
				locator1 = "Fragment#VIDEO_HEIGHT");

			AssertElementPresent(
				key_width = "300px",
				locator1 = "Fragment#VIDEO_WIDTH");

			AssertElementPresent(locator1 = "//div[contains(@class,'video')]/parent::div/parent::div/parent::div[contains(@class,'mb-1')]");
		}

		task ("Navigate to page in edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Fragment Content Page",
				siteName = "Test Site Name");

			WaitForPageLoad();
		}

		task ("Assert styles of Container in edit mode") {
			PageEditor.viewContainerStyle(
				containerWidth = "Fixed Width",
				paddingBottom = "3",
				paddingTop = "3",
				position = "2");

			AssertCssValue(
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONTAINER",
				locator2 = "background-color",
				value1 = "rgba(46, 90, 172, 1)");
		}

		task ("Assert styles of Button in edit mode") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "button",
				marginBottom = "1",
				size = "lg",
				type = "link");
		}

		task ("Assert styles of Card in edit mode") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				borderRadius = "0.375rem",
				boxShadow = "rgba(0, 0, 0, 0.176) 0px 1rem 3rem",
				fragmentName = "Card",
				imageSize = "0",
				marginBottom = "1");
		}

		task ("Assert styles of Heading in edit mode") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "heading",
				headingLevel = "h2",
				marginBottom = "1",
				textColor = "rgb(40, 125, 60)");
		}

		task ("Assert styles of HTML in edit mode") {
			PageEditor.viewFragmentStyle(
				fragmentName = "HTML",
				marginBottom = "1");
		}

		task ("Assert styles of Image in edit mode") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "image",
				imageSize = "0",
				marginBottom = "1");
		}

		task ("Assert styles of Paragraph in edit mode") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "paragraph",
				marginBottom = "1",
				textColor = "rgb(185, 80, 0)");
		}

		task ("Assert styles of Separator in edit mode") {
			PageEditor.viewFragmentStyle(
				bottomSpacing = "1",
				separatorColor = "dark");
		}

		task ("Assert styles of Spacer in edit mode") {
			PageEditor.viewFragmentStyle(height = "5");
		}

		task ("Assert styles of Video in edit mode") {
			AssertElementPresent(
				key_alignment = "center",
				locator1 = "Fragment#ALIGN");

			AssertElementPresent(
				key_height = "300px",
				locator1 = "Fragment#VIDEO_HEIGHT");

			AssertElementPresent(
				key_width = "300px",
				locator1 = "Fragment#VIDEO_WIDTH");

			PageEditor.viewFragmentStyle(
				fragmentName = "video",
				marginBottom = "1");
		}
	}

	macro viewCustomSiteSetting {
		task ("Get the default site name") {
			Navigator.openURL();

			var siteName = selenium.getText("Home#SITE_NAME");
		}

		task ("Navigate to Site Settings admin in custom site") {
			ApplicationsMenu.gotoSite(site = "Test Site Name");

			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Site Settings");
		}

		task ("View the custom site URL") {
			AssertLocation.assertPartialLocation(value1 = "/beijing2008");

			Click(
				key_itemName = "Site Configuration",
				locator1 = "ListGroupItem#ITEM_TEXT");

			Navigator.gotoNavTab(navTab = "Site URL");

			AssertTextEquals(
				locator1 = "TextInput#FRIENDLY_URL_SITE_SETTINGS",
				value1 = "/beijing2008");
		}

		task ("View the selected parent site") {
			Navigator.gotoNavTab(navTab = "Details");

			AssertTextEquals(
				key_fieldFieldLabel = "Parent Site",
				locator1 = "TextInput#SELECTOR_INPUT",
				value1 = "${siteName} (Open)");

			Navigator.gotoBack();

			Site.openSitesAdmin();

			Site.viewChildCP(
				childSiteName = "Test Site Name",
				siteName = "${siteName}");
		}

		task ("View the site default language") {
			Site.openSiteSettingsAdmin(siteURLKey = "beijing2008");

			Click(
				key_itemName = "Localization",
				locator1 = "ListGroupItem#ITEM_TEXT");

			AssertSelectedLabel(
				locator1 = "SiteSettingsDisplaySettings#DEFAULT_LANGUAGE_SELECT_FIELD",
				value1 = "Chinese (China)");
		}
	}

	macro viewDefaultPage {
		Navigator.openURL();

		// Assert the Home/Welcome page is a widget page in the default site when upgrade from 7.2/7.1/7.0

		AssertElementNotPresent(locator1 = "Icon#EDIT_PENCIL");

		AssertVisible(locator1 = "ControlMenu#ADD");
	}

	macro viewDefinedGridLayout {
		task ("Navigate to page in edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");
		}

		task ("View the Grid Styles") {
			PageEditor.gotoConfiguration(fragmentName = "Grid");

			PageEditor.viewGridStyle(
				columnCount = "6",
				position = "1");

			PageEditor.switchViewport(deviceType = "Tablet");

			AssertSelectedLabel(
				key_fieldLabel = "Layout",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "1 Module per Row");

			PageEditor.switchViewport(deviceType = "Landscape Phone");

			AssertSelectedLabel(
				key_fieldLabel = "Layout",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "3 Modules per Row");

			PageEditor.switchViewport(deviceType = "Portrait Phone");

			AssertSelectedLabel(
				key_fieldLabel = "Layout",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "2 Modules per Row");
		}

		task ("Change to the Desktop viewport") {
			PageEditor.switchViewport(deviceType = "Desktop");
		}

		task ("Configure the Grid") {
			PageEditor.editLayoutGrid(
				columnCount = "3",
				panel = "General");
		}

		task ("View the Grid Styles after updating") {
			PageEditor.viewGridStyle(
				columnCount = "3",
				position = "1");

			PageEditor.switchViewport(deviceType = "Tablet");

			AssertSelectedLabel(
				key_fieldLabel = "Layout",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "3 Modules per Row");

			PageEditor.switchViewport(deviceType = "Landscape Phone");

			AssertSelectedLabel(
				key_fieldLabel = "Layout",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "1 Module per Row");

			PageEditor.switchViewport(deviceType = "Portrait Phone");

			AssertSelectedLabel(
				key_fieldLabel = "Layout",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "1 Module per Row");
		}
	}

	macro viewDocument {
		Navigator.gotoPage(pageName = "Document");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.enableActionsMenuOnPortlet();

		Navigator.gotoPage(pageName = "Document");

		DMDocument.viewAllPG(
			commentBody = "Document Comment",
			dmDocumentTitle = "Document1");

		DMDocument.viewDocumentDetailsCmdPG(dmDocumentTitle = "Document1");

		DMDocument.viewDocumentMetadataCP(
			metadataData = "application/msword",
			metadataLabel = "Content Type");

		DMDocument.viewDocumentMetadataCP(
			metadataData = "Liferay",
			metadataLabel = "Creator");
	}

	macro viewDocuments {
		var portalURL = PropsUtil.get("portal.url");

		var siteId = JSONGroupAPI._getGroupIdByName(
			groupName = "Guest",
			site = "true");

		Navigator.gotoPage(pageName = "Documents");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Type Description",
			dmDocumentFileName = "DM Document Type Title.doc",
			dmDocumentTitle = "DM Document Type Title",
			dmDocumentType = "DM Document Type Name");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "DM Document Type Title",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewEntryInEdit(
			dmDocumentFileName = "DM Document Type Title.doc",
			dmDocumentTitle = "DM Document Type Title");

		Navigator.gotoPage(pageName = "Documents");

		DMNavigator.gotoDocumentPG(dmDocumentTitle = "DM Document Type Title");

		DMDocument.viewDocumentTypePG(
			booleanValue = "checked",
			checkboxName = "Boolean",
			numericFieldLabel = "Number",
			numericValue = "1234");

		Navigator.gotoPage(pageName = "Documents");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFileName = "DM Document Video.mp4",
			dmDocumentTitle = "DM Document Video");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "DM Document Video",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewEntryInEdit(
			dmDocumentFileName = "DM Document Video.mp4",
			dmDocumentTitle = "DM Document Video");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteId}/0/DM Document Video.mp4");

		DownloadTempFile();

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(fileName = "DM Document Video.mp4");

		Navigator.gotoPage(pageName = "Documents");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFileName = "DM Document JPG.jpg",
			dmDocumentTitle = "DM Document JPG");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "DM Document JPG",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewEntryInEdit(
			dmDocumentFileName = "DM Document JPG.jpg",
			dmDocumentTitle = "DM Document JPG");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteId}/0/DM Document JPG");

		var key_imageSourceURL = "${portalURL}/documents/${siteId}/0/DM";

		AssertElementPresent.pauseAssertVisible(locator1 = "DocumentsAndMediaDocument#DOCUMENT_VIEWPORT_PREVIEW");

		Navigator.gotoPage(pageName = "Documents");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFileName = "DM Document DOC With A Long Title DM Document DOC With A Long Title DM Document DOC With A Long Title DM Document DOC With A Long Title.doc",
			dmDocumentTitle = "DM Document DOC With A Long Title DM Document DOC With A Long Title DM Document DOC With A Long Title DM Document DOC With A Long Title");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "DM Document DOC With A Long Title DM Document DOC With A Long Title DM Document DOC With A Long Title DM Document DOC With A Long Title",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewEntryInEdit(
			dmDocumentFileName = "DM Document DOC With A Long Title DM Document DOC With A Long Title DM Document DOC With A Long Title DM Document DOC With A Long Title.doc",
			dmDocumentTitle = "DM Document DOC With A Long Title DM Document DOC With A Long Title DM Document DOC With A Long Title DM Document DOC With A Long Title");
	}

	macro viewDocumentTypesAndMetadataSets {
		DMNavigator.openDocumentTypesAdmin(siteURLKey = "guest");

		DMDocumentType.viewCP(dmDocumentTypeName = "DM Document Type Name");

		LexiconEntry.gotoEntry(rowEntry = "DM Document Type Name");

		WaitForPageLoad();

		DataEngine.viewField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DataEngine.viewField(
			fieldFieldLabel = "Documents and Media",
			fieldName = "Upload");

		DMDocumentType.gotoTab(tabName = "Additional Metadata Fields");

		AssertTextEquals(
			key_metadataSetName = "Document Metadata Set Name",
			locator1 = "DocumentsAndMediaDocumentTypes#METADATA_SETS_NAME",
			value1 = "Document Metadata Set Name");

		DMNavigator.openMetadataSetsAdmin(siteURLKey = "guest");

		DMDocumentType.viewCP(dmDocumentTypeName = "Document Metadata Set Name");

		LexiconEntry.openEntryMenu(rowEntry = "Document Metadata Set Name");

		MenuItem.click(menuItem = "Edit");

		WaitForPageLoad();

		FormFields.viewBooleanField(fieldValue = "Boolean");

		DataEngine.viewField(
			fieldFieldLabel = "Number",
			fieldName = "Numeric");
	}

	macro ViewDroolsAppManager {
		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "App Manager");

		AppManager.viewApp(
			appName = "Liferay Drools",
			appStatus = "Active",
			searchTerm = "Drools");

		AppManager.viewApp(
			appName = "Liferay Portal Rules Engine Drools",
			appStatus = "Active",
			searchTerm = "Drools");
	}

	macro viewEditableCardFragment {
		task ("View the inline text of the card fragment at view mode after Upgrade") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "card",
				text = "Test Title");
		}

		task ("View the inline text of the card fragment at edit mode after Upgrade") {
			ContentPages.gotoPageEditor();

			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "Test Title",
				fragmentName = "Card");
		}

		task ("Edit the inline text of the Card fragment") {
			PageEditor.gotoTab(tabName = "Browser");

			Navigator.gotoNavTab(navTab = "Page Content");

			PageEditor.editFragmentTextViaPageContentPanel(
				itemName = "Test Title",
				text = "Editable Title");
		}

		task ("View the updated inline text of the card fragment") {
			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "card",
				text = "Editable Title");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("View the inline text of the card fragment at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "card",
				text = "Editable Title");
		}
	}

	macro viewInstanceSettings {
		PortalSettings.gotoConfiguration(
			configurationCategory = "Instance Configuration",
			configurationName = "General",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewTextValue(
			fieldName = "homeURL",
			fieldValue = "/web/test/home");

		FormFields.viewTextValue(
			fieldName = "default-logout-page",
			fieldValue = "/web/test/home");

		FormFields.viewTextValue(
			fieldName = "default-landing-page",
			fieldValue = "/web/test/home");

		PortalSettings.gotoConfiguration(
			configurationCategory = "User Authentication",
			configurationName = "General",
			configurationScope = "Virtual Instance Scope");

		AssertSelectedLabel(
			locator1 = "PortalSettingsAuthentication#AUTHENTICATION_GENERAL_HOW_DO_USERS_AUTHENTICATE_SELECT",
			value1 = "By Screen Name");

		FormFields.viewCheckboxNotChecked(fieldName = "company-security-auto-login");

		FormFields.viewCheckboxNotChecked(fieldName = "company-security-send-password");

		FormFields.viewCheckboxNotChecked(fieldName = "company-security-send-password-reset-link");

		FormFields.viewCheckboxNotChecked(fieldName = "company-security-strangers");

		FormFields.viewCheckboxNotChecked(fieldName = "company-security-strangers-with-mx");

		PortalSettings.gotoConfiguration(
			configurationCategory = "User Authentication",
			configurationName = "Reserved Credentials",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewTextMultilineValue(
			fieldName = "reserved.screen.names",
			fieldValue = "usersn");

		FormFields.viewTextMultilineValue(
			fieldName = "reserved.email.addresses",
			fieldValue = "userea@liferay.com");

		// Ignore test until LPS-98192 is resolved

		/*
		PortalSettings.gotoConfiguration(
			configurationCategory = "Users",
			configurationName = "Fields",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewCheckboxChecked(fieldName = "users-screen-name-always-autogenerate");

		FormFields.viewCheckboxNotChecked(fieldName = "field-enable-com-liferay-portal-kernel-model-Contact-birthday");

		FormFields.viewCheckboxNotChecked(fieldName = "field-enable-com-liferay-portal-kernel-model-Contact-male");*/

		PortalSettings.gotoConfiguration(
			configurationCategory = "Users",
			configurationName = "Default User Associations",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewTextMultilineValue(
			fieldName = "default.group.names",
			fieldValue = "Liferay");

		FormFields.viewTextMultilineValue(
			fieldName = "default.role.names",
			fieldValue = "Administrator");

		PortalSettings.gotoConfiguration(
			configurationCategory = "Email",
			configurationName = "Email Sender",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewTextValue(
			fieldName = "email.from.name",
			fieldValue = "Test Test");

		PortalSettings.gotoConfiguration(
			configurationCategory = "Sharing",
			configurationName = "Content Sharing",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewCheckboxNotChecked(fieldName = "sites-content-sharing-through-administrators-enabled");

		AssertSelectedLabel(
			locator1 = "PortalSettingsContentSharing#CONTENT_SHARING_SELECTOR",
			value1 = "Disabled by Default");

		PortalSettings.gotoConfiguration(
			configurationCategory = "Localization",
			configurationName = "Language",
			configurationScope = "Virtual Instance Scope");

		AssertTextEquals.assertPartialText(
			locator1 = "LanguageConfiguration#LANGUAGES_CURRENT",
			value1 = "English (United States)");

		AssertTextEquals.assertPartialText(
			locator1 = "LanguageConfiguration#LANGUAGES_CURRENT",
			value1 = "Spanish (Spain)");

		PortalSettings.gotoConfiguration(
			configurationCategory = "Localization",
			configurationName = "Time Zone",
			configurationScope = "Virtual Instance Scope");

		AssertSelectedLabel(
			locator1 = "Select#TIME_ZONE",
			value1 = "(UTC +03:00) Eastern European Time");
	}

	macro viewLDAPConfiguration {
		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "LDAP",
			configurationName = "Authentication",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewCheckboxChecked(fieldName = "enabled");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "LDAP",
			configurationName = "Import",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewCheckboxChecked(fieldName = "importEnabled");

		FormFields.viewCheckboxChecked(fieldName = "importOnStartup");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "LDAP",
			configurationName = "Export",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewCheckboxChecked(fieldName = "exportEnabled");
	}

	macro viewMatchingCalendarIndexesInPartitionedDatabase {
		var baseSchemaIndex = SQL.executeMySQLStatement(mysqlStatement = "SHOW INDEX FROM lportal.Calendar;");

		var partitionSchemaIndex = SQL.executeMySQLStatement(mysqlStatement = "SHOW INDEX FROM lpartition_41246.Calendar;");

		if ("${baseSchemaIndex}" == "${partitionSchemaIndex}") {
			echo("Calendar Index matches: ${baseSchemaIndex}");
		}
		else {
			echo("Calendar Index does not match between database schemas");

			fail("Base schema index is ${baseSchemaIndex} but partitioned schema index is ${partitionSchemaIndex}");
		}
	}

	macro viewMessageBoards {
		Navigator.gotoPage(pageName = "Message Boards");

		MessageboardsThread.viewLockedPG(threadSubject = "Message Boards Subject 2");
	}

	macro viewMSBUpgrade {
		task ("Assert the fragments survived") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.viewEntryPresent(entry = "Content");

			FragmentsAdmin.viewEntryPresent(entry = "Image");

			FragmentsAdmin.viewEntryPresent(entry = "Button");

			FragmentsAdmin.viewEntryPresent(entry = "Multiple Editables");

			FragmentsAdmin.viewEntryPresent(entry = "Static Text");

			FragmentsAdmin.viewEntryPresent(entry = "Image 2");

			FragmentsAdmin.viewEntryPresent(entry = "Rich Text");

			FragmentsAdmin.viewEntryPresent(entry = "Title 2");

			FragmentsAdmin.viewEntryPresent(entry = "Title");

			FragmentsAdminNavigator.gotoEntryEllipsisItem(
				entry = "Button",
				item = "Edit");

			SelectFrame.selectFrameNoLoading(locator1 = "FragmentEditor#PREVIEW_IFRAME");

			AssertElementPresent(locator1 = "Button#SUBMIT");

			AssertElementPresent(locator1 = "Button#CANCEL");

			SelectFrameTop();
		}

		task ("Assert the content page template survived") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			var n = "1";

			for (var text : list "Submit,Cancel") {
				PageEditor.viewFragmentEditableText(
					className = "footer",
					contributed = "false",
					editableText = "${text}",
					fragmentName = "Button",
					position = "${n}");

				var n = ${n} + 1;
			}
		}

		task ("Assert the content pages and Navigation Menu widget configuration survived") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name");

			Click(
				key_pageName = "Test Template Content Page",
				locator1 = "Home#PAGE");

			var n = "1";

			for (var text : list "Submit,Cancel") {
				ContentPages.viewFragmentText(
					contributed = "false",
					fragmentName = "footer",
					position = "${n}",
					text = "${text}");

				var n = ${n} + 1;
			}

			Click(
				key_pageName = "Test Regular Content Page",
				locator1 = "Home#PAGE");

			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "header",
				text = "Lorem ipsum dolor sit amet");

			AssertVisible(
				key_href = "https://www.liferay.com/",
				key_pageName = "Liferay",
				locator1 = "Home#PAGE_HREF");
		}

		task ("Assert the navigation menu survived") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name");

			AssertVisible(
				key_rowEntry = "Test Navigation Menu Name",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME_LINK");
		}

		task ("Assert the display page survived") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.viewDisplayPagePresent(displayPageName = "Display Page Name");

			DisplayPageTemplatesAdmin.viewDisplayPagePresent(displayPageName = "Non-Default Display Page");
		}

		task ("Assert the web content articles that use display pages are viewable through display page template") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title-1");

			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "header",
				text = "Webcontent Title 1");

			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "rich-text",
				text = "Webcontent Content 1");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title-2");

			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "rich-text",
				text = "Webcontent Content 2");

			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "header",
				text = "Lorem ipsum dolor sit amet");
		}

		task ("Assert the web content article that has no display page is not viewable through display page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/webcontent-title-3");

			AssertTextPresent(value1 = "The requested resource could not be found.");
		}
	}

	macro viewNestedPortlets {
		Navigator.gotoPage(pageName = "Nested Portlets");

		AssertTextEquals(
			key_portletName = "Nested Applications",
			locator1 = "Portlet#TITLE",
			value1 = "Nested Applications");

		AssertTextNotEquals(
			locator1 = "Message#INFO",
			value1 = "Drag applications below to nest them.");

		NestedPortlets.viewPG(
			nestedColumnNumber = "1",
			portletName = "Web Content Display");
	}

	macro viewNoShareOptionAfterDisabled {
		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@www.able.com",
			virtualHostsURL = "http://www.able.com:8080");

		DMNavigator.openDocumentsAndMediaAdmin(
			baseURL = "http://www.able.com:8080",
			siteURLKey = "guest");

		LexiconEntry.viewNoEntryMenuItem(
			menuItem = "Share",
			rowEntry = "Document with sharing disabled");

		BlogsNavigator.openBlogsAdmin(
			baseURL = "http://www.able.com:8080",
			siteURLKey = "guest");

		LexiconEntry.viewNoEntryMenuItem(
			menuItem = "Share",
			rowEntry = "Blogs Entry with sharing disabled");
	}

	macro viewNotifications {
		Navigator.openURL();

		Notifications.gotoNotifications();

		Notifications.viewNewContent(
			assetType = "message boards message",
			contentBody = "Message Boards Subject 1",
			user = "Test Test");

		Notifications.navigateToContent(contentBody = "Message Boards Subject 1");

		MessageboardsThread.viewPG(
			threadBody = "Message Boards Body",
			threadSubject = "Message Boards Subject 1");

		Notifications.viewBadgeCount(
			activePanel = "Notifications",
			notificationCount = "2");

		Notifications.gotoNotifications();

		Notifications.viewNewContent(
			assetType = "message boards message",
			contentBody = "Message Boards Subject 2",
			user = "Test Test");

		Notifications.navigateToContent(contentBody = "Message Boards Subject 2");

		MessageboardsThread.viewPG(
			threadBody = "Message Boards Body",
			threadSubject = "Message Boards Subject 2");

		Notifications.viewBadgeCount(
			activePanel = "Notifications",
			notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewNewContent(
			assetType = "message boards message",
			contentBody = "Message Boards Subject 3",
			user = "Test Test");

		Notifications.navigateToContent(contentBody = "Message Boards Subject 3");

		MessageboardsThread.viewPG(
			threadBody = "Message Boards Body",
			threadSubject = "Message Boards Subject 3");
	}

	macro viewOrderOfAssetsOnMostedViewedAssets {
		task ("View order of displayed assets on Mosted Viewed Assets") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewAssetOrderPG(assetTitleList = "Web Content Title 3,Web Content Title 1,Web Content Title 2");
		}

		task ("View count of the assets on Mosted Viewed Assets") {
			var n = "1";

			for (var count : list "3,2,5") {
				AssetPublisherPortlet.viewAssetViewCount(
					assetTitle = "Web Content Title ${n}",
					viewCount = "${count} Views");

				var n = ${n} + 1;
			}
		}

		task ("View the Web Content Title 1 twice") {
			var count = "0";

			while ("${count}" != "2") {
				Navigator.gotoSitePage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				AssetPublisherPortlet.viewAssetDetailsPG(
					assetContent = "Web Content Content 1",
					assetTitle = "Web Content Title 1");

				var count = ${count} + 1;
			}
		}

		task ("View the Web Content Title 2 five times") {
			var count = "0";

			while ("${count}" != "5") {
				Navigator.gotoSitePage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				AssetPublisherPortlet.viewAssetDetailsPG(
					assetContent = "Web Content Content 2",
					assetTitle = "Web Content Title 2");

				var count = ${count} + 1;
			}
		}

		task ("View the Web Content Title 3 once") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewAssetDetailsPG(
				assetContent = "Web Content Content 3",
				assetTitle = "Web Content Title 3");
		}

		task ("View the new order of displayed assets on Mosted Viewed Assets") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewAssetOrderPG(assetTitleList = "Web Content Title 2,Web Content Title 3,Web Content Title 1");
		}

		task ("View the new count of the assets on Mosted Viewed Assets") {
			var n = "1";

			for (var count : list "5,7,6") {
				AssetPublisherPortlet.viewAssetViewCount(
					assetTitle = "Web Content Title ${n}",
					viewCount = "${count} Views");

				var n = ${n} + 1;
			}
		}
	}

	macro viewPortalCORS {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "${name}");

		AssertTextEquals(
			key_configurationValue = "filter.mapping.url.pattern",
			locator1 = "SystemSettings#CORS_CONFIGURATION",
			value1 = "${urlPattern}");

		AssertTextEquals(
			key_configurationValue = "header",
			locator1 = "SystemSettings#CORS_CONFIGURATION",
			value1 = "${header}");
	}

	macro ViewPortletsPermissions {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea1@liferay.com",
			userLoginFullName = "userfn1 userln1");

		Navigator.gotoSitePage(
			pageName = "Message Boards Page",
			siteName = "Site Name 1");

		MessageboardsThread.gotoPG(
			lastPostUserName = "Test Test",
			replyCount = "0",
			threadSubject = "Message Boards Subject");

		MessageboardsThread.viewPG(
			threadBody = "Message Boards Body",
			threadSubject = "Message Boards Subject");

		Navigator.gotoSitePage(
			pageName = "Message Boards Page",
			siteName = "Site Name 1");

		AssertElementNotPresent(locator1 = "Portlet#OPTIONS_ICON");

		Navigator.gotoSitePage(
			pageName = "Web Content Page",
			siteName = "Site Name 1");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		Navigator.openSpecificURL(url = "http://localhost:8080/web/site-name-2/blogs-page");

		Portlet.viewNoPermissionPG();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea2@liferay.com",
			userLoginFullName = "userfn2 userln2");

		Navigator.gotoSitePage(
			pageName = "Wiki Page",
			siteName = "Site Name 2");

		WikiPage.viewFrontPagePG(wikiPageContent = "Wiki Front Page Content");

		Navigator.gotoSitePage(
			pageName = "Wiki Page",
			siteName = "Site Name 2");

		Portlet.viewPortletOptions(optionsName = "Configuration");

		Navigator.gotoSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name 2");

		DMDocument.viewPG(dmDocumentTitle = "Document1");

		Navigator.gotoSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name 2");

		Portlet.viewPortletOptions(optionsName = "Permissions");

		Navigator.gotoSitePage(
			pageName = "Blogs Page",
			siteName = "Site Name 2");

		Portlet.viewNoPermissionPG();
	}

	macro viewResultRankingsEntry {
		SearchTuning.openResultRankingsAdmin();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Article");

		AssertElementPresent(
			key_assetTitle = "Article 4",
			locator1 = "SearchTuning#RESULT_RANKINGS_RESULT_PINNED");

		AssertElementNotPresent(
			key_assetTitle = "Article 2",
			locator1 = "SearchTuning#RESULT_RANKINGS_RESULT");
	}

	macro viewSAMLGeneralConfiguration {
		SAML.goToSAMLAdmin();

		FormFields.viewCheckboxChecked(fieldName = "enabled");

		if (isSet(samlRoleType)) {
			AssertTextEquals(
				locator1 = "CPSAMLAdmin#SAML_SELECTED_ROLE",
				value1 = "${samlRoleType}");
		}

		AssertTextEquals(
			locator1 = "CPSAMLAdmin#SAML_ENTITY_ID_FIELD",
			value1 = "samlidp");
	}

	macro viewSAMLSPConnectionConfiguration {
		SAMLNavigation.gotoServiceProviderConnection();

		Click(locator1 = "CPSAMLAdminServiceProviderConnections#SERVICE_PROVIDER_CONNECTION_DROPDOWN");

		MenuItem.click(menuItem = "Edit");

		AssertTextEquals(
			locator1 = "TextInput#NAME",
			value1 = "samlsp");

		AssertTextEquals(
			locator1 = "CPSAMLAdminServiceProviderConnections#SERVICE_PROVIDER_CONNECTION_ENTITY_ID_FIELD",
			value1 = "samlsp");

		FormFields.viewCheckboxChecked(fieldName = "enabled");

		if (isSet(forceEncryption)) {
			FormFields.viewCheckboxChecked(fieldName = "encryptionForced");
		}

		AssertTextEquals(
			locator1 = "TextInput#SAML_METADATA_URL_FIELD",
			value1 = "http://www.able.com:9080//c/portal/saml/metadata");

		AssertTextEquals(
			locator1 = "CPSAMLAdminServiceProviderConnections#SERVICE_PROVIDER_CONNECTION_NAME_IDENTIFIER_ATTRIBUTE_NAME_FIELD",
			value1 = "emailAddress");
	}

	macro viewSearchPortletsConfiguration {
		Navigator.gotoSitePage(
			pageName = "Site Page",
			siteName = "Site Name");

		SearchPortlets.gotoEmbeddedOptions(portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		FormFields.viewTextValue(
			fieldName = "destination",
			fieldValue = "site-page");

		IFrame.closeFrame();

		Portlet.gotoPortletOptions(
			portletName = "Search Result",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		FormFields.viewTextValue(
			fieldName = "paginationDelta",
			fieldValue = "2");

		IFrame.closeFrame();

		Portlet.gotoPortletOptions(
			portletName = "Search Options",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		FormFields.viewCheckboxChecked(fieldName = "allowEmptySearches");

		IFrame.closeFrame();

		Portlet.gotoPortletOptions(
			portletName = "Suggestion",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		FormFields.viewCheckboxChecked(fieldName = "spellCheckSuggestionEnabled");

		IFrame.closeFrame();

		Portlet.gotoPortletOptions(
			portletName = "Type Facet",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		FormFields.viewCheckboxNotChecked(fieldName = "frequenciesVisible");

		IFrame.closeFrame();

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		Pagination.viewResults(results = "Showing 1 to 2 of 3 entries.");

		AssertElementNotPresent(locator1 = "Search#SEARCH_TYPE_FACET_TERM_COUNT");
	}

	macro viewSharedBlog {
		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "user2@liferay.com");

		Notifications.viewBadgeCount(notificationCount = "2");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "viewing",
			contentTitle = "Blogs Entry Title",
			openNotification = "true",
			ownerName = "Test Test");

		BlogsEntry.viewSharedAsset(
			contentSharingPermission = "View",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	macro viewSharedDocument {
		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "user1@liferay.com");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "viewing",
			contentTitle = "${dmDocumentTitle}",
			openNotification = "true",
			ownerName = "Test Test");

		DMDocumentSharing.viewDocumentViaSharedContent(
			contentSharingPermission = "View",
			dmDocumentTitle = "${dmDocumentTitle}");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	macro viewSpecificDisplayPageTemplateViaAssetPublisher {
		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/Document Display Page");

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "DM Document Title");

		AssertElementPresent(
			key_text = "DM Document Title",
			locator1 = "Fragment#EDITABLE_FIELD_CONTENT");
	}

	macro viewStagingConfiguration {
		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Infrastructure",
			configurationName = "Export/Import, Staging",
			configurationScope = "Virtual Instance Scope");

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Infrastructure",
			configurationName = "Staging",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.gotoConfiguration(
			configurationCategory = "Infrastructure",
			configurationName = "Export/Import, Staging",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.gotoConfiguration(
			configurationCategory = "Infrastructure",
			configurationName = "Staging",
			configurationScope = "Virtual Instance Scope");
	}

	macro viewStagingNestedPortlets {
		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Staging Site");

		AssertTextEquals(
			key_portletName = "Nested Applications",
			locator1 = "Portlet#TITLE",
			value1 = "Nested Applications");

		AssertTextNotEquals(
			locator1 = "Message#INFO",
			value1 = "Drag applications below to nest them.");

		NestedPortlets.viewPG(
			nestedColumnNumber = "1",
			portletName = "Web Content Display");

		NestedPortlets.viewPG(
			nestedColumnNumber = "1",
			portletName = "Blogs");
	}

	macro viewSystemSettings {
		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Web Content",
			configurationName = "Web Content",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewCheckboxNotChecked(fieldName = "addDefaultStructures");

		SystemSettings.viewTextareaValue(
			fieldName = "charactersblacklist",
			fieldValue = "test");

		SystemSettings.viewTextareaValue(
			fieldName = "errorTemplateFTL",
			fieldValue = "errortest.ftl");

		FormFields.viewTextValue(
			fieldName = "checkInterval",
			fieldValue = "5");

		SystemSettings.viewTextareaValue(
			fieldName = "customTokenNames",
			fieldValue = "Custom Token Name1");

		SystemSettings.viewTextareaValue(
			fieldName = "customTokenValues",
			fieldValue = "Custom Token Value1");

		FormFields.viewCheckboxNotChecked(fieldName = "articleCommentsEnabled");

		FormFields.viewCheckboxNotChecked(fieldName = "databaseContentKeywordSearchEnabled");

		FormFields.viewCheckboxNotChecked(fieldName = "expireAllArticleVersionsEnabled");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Web Content",
			configurationName = "Administration",
			configurationScope = "System Scope");

		FormFields.viewCheckboxChecked(fieldName = "changeableDefaultLanguage");

		SystemSettings.viewTextareaValue(
			fieldName = "defaultDisplayView",
			fieldValue = "list");

		FormFields.viewCheckboxNotChecked(fieldName = "journalArticleForceAutogenerateId");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Web Content",
			configurationName = "Service",
			configurationScope = "Site Scope");

		SystemSettings.viewTextareaValue(
			fieldName = "emailFromName",
			fieldValue = "test name");

		SystemSettings.viewTextareaValue(
			fieldName = "emailFromAddress",
			fieldValue = "test@liferay.com");

		FormFields.viewCheckboxNotChecked(fieldName = "emailArticleAddedEnabled");

		FormFields.viewCheckboxNotChecked(fieldName = "emailArticleUpdatedEnabled");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Wiki",
			configurationName = "Wiki Service",
			configurationScope = "Site Scope");

		SystemSettings.viewTextareaValue(
			fieldName = "emailFromAddress",
			fieldValue = "test@liferay.com");

		SystemSettings.viewTextareaValue(
			fieldName = "emailFromName",
			fieldValue = "test name");

		FormFields.viewCheckboxNotChecked(fieldName = "emailPageAddedEnabled");

		FormFields.viewCheckboxNotChecked(fieldName = "emailPageUpdatedEnabled");

		SystemSettings.viewTextareaValue(
			fieldName = "frontPageName",
			fieldValue = "TestFrontPage");

		SystemSettings.viewTextareaValue(
			fieldName = "getCreoleEditor",
			fieldValue = "ckeditor_creole");

		SystemSettings.viewTextareaValue(
			fieldName = "getHTMLEditor",
			fieldValue = "creole");

		SystemSettings.viewTextareaValue(
			fieldName = "initialNodeName",
			fieldValue = "TestMainNode");

		FormFields.viewCheckboxNotChecked(fieldName = "pageCommentsEnabled");

		FormFields.viewCheckboxNotChecked(fieldName = "pageMinorEditAddSocialActivity");

		FormFields.viewTextValue(
			fieldName = "rssAbstractLength",
			fieldValue = "500");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Wiki",
			configurationName = "Widgets Display",
			configurationScope = "Widget Scope");

		FormFields.viewCheckboxNotChecked(fieldName = "enableCommentRatings");

		FormFields.viewCheckboxNotChecked(fieldName = "enableComments");

		FormFields.viewCheckboxNotChecked(fieldName = "enableHighlighting");

		FormFields.viewCheckboxNotChecked(fieldName = "enablePageRatings");

		FormFields.viewCheckboxNotChecked(fieldName = "enableRelatedAssets");

		// Ignore test until LPS-97976 is resolved

		/*
		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Dynamic Data Mapping",
			configurationName = "Dynamic Data Mapping Service",
			configurationScope = "Site Scope");

		SystemSettings.viewTextareaValue(
			fieldName = "smallImageExtensions",
			fieldValue = ".svg",
			repeatableFieldNumber = "4");

		SystemSettings.viewTextareaValue(
			fieldName = "smallImageExtensions",
			fieldValue = "*",
			repeatableFieldNumber = "5");

		FormFields.viewTextValue(
			fieldName = "smallImageMaxSize",
			fieldValue = "5120");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Dynamic Data Mapping",
			configurationName = "Dynamic Data Mapping Web",
			configurationScope = "System Scope");

		FormFields.viewCheckboxNotChecked(fieldName = "autogenerateStructureKey");

		FormFields.viewCheckboxNotChecked(fieldName = "autogenerateTemplateKey");*/
	}

	macro viewTranslations {
		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContentNavigator.gotoEditCP(webContentTitle = "WebContentTitle");

		PortletEntry.changeLocale(locale = "es-ES");

		WebContent.viewCP(
			webContentContent = "Contenidoweb",
			webContentDescription = "Descripcion",
			webContentTitle = "Titulodelcontenidoweb");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title Side By Side");

		PortletEntry.changeLocale(locale = "ja-JP");

		WebContent.viewCP(
			webContentContent = "wc webcontentコンテンツ",
			webContentDescription = "wc webcontent記述",
			webContentTitle = "wc webcontentタイトルを並べて");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		Translations.gotoTranslate(webContentTitle = "WC WebContent Title Side By Side");

		Translations.changeTargetLocale(
			currentTargetLocale = "ar-SA",
			newTargetLocale = "ja-JP");

		Translations.viewTargetFields(
			webContentContent = "wc webcontentコンテンツ",
			webContentDescription = "wc webcontent記述",
			webContentTitle = "wc webcontentタイトルを並べて");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		Translations.gotoTranslate(webContentTitle = "WC WebContent Title Side By Side");

		Translations.changeTargetLocale(
			currentTargetLocale = "ar-SA",
			newTargetLocale = "ja-JP");

		Translations.viewBaseFields(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		Translations.translateFields(
			webContentContent = "wc webcontentコンテンツ 編集",
			webContentDescription = "wc webcontent記述 編集",
			webContentTitle = "wc webcontentタイトルを並べて 編集");

		PortletEntry.publish();

		Translations.gotoTranslate(webContentTitle = "WC WebContent Title Side By Side");

		Translations.changeTargetLocale(
			currentTargetLocale = "ar-SA",
			newTargetLocale = "es-ES");

		Translations.viewBaseFields(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		Translations.translateFields(
			webContentContent = "Contenido de WC WebContent",
			webContentTitle = "Título del contenido web de WC");

		PortletEntry.publish();
	}

	macro viewUpgrade {
		Navigator.gotoPage(pageName = "Web Content");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		Navigator.gotoPage(pageName = "Document");

		task ("Change document view type but account for flakiness seen in test execution history") {
			WaitForPageLoad();

			Click(locator1 = "Icon#CURRENT_DISPLAY_STYLE");

			if (IsElementNotPresent(key_menuItem = "List", locator1 = "MenuItem#ANY_MENU_ITEM")) {
				Refresh();

				WaitForPageLoad();

				Click.mouseOverClick(locator1 = "Icon#CURRENT_DISPLAY_STYLE");
			}

			MenuItem.click(menuItem = "List");
		}

		DMDocument.viewPG(dmDocumentTitle = "Document1");

		DMDocument.expandInfo();

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_UPLOADED_BY",
			value1 = "Test Test");

		AssertTextEquals(
			key_dmDocumentVersionNumber = "1.0",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_VERSION",
			value1 = "VERSION 1.0");

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_WORKFLOW_STATUS",
			value1 = "APPROVED");

		var key_text = "Download";

		AssertTextEquals(
			locator1 = "Button#ANY",
			value1 = "Download");

		Navigator.gotoPage(pageName = "Message Boards");

		MessageboardsThread.gotoPG(
			lastPostUserName = "Test Test",
			replyCount = "0",
			startedByUserName = "Test Test",
			threadBody = "Message Boards Body",
			threadSubject = "Message Boards Subject");

		MessageboardsThread.viewPG(
			threadBody = "Message Boards Body",
			threadSubject = "Message Boards Subject");

		Navigator.gotoPage(pageName = "Wiki");

		WikiPage.viewFrontPagePG(
			wikiPageContent = "Wiki Front Page Content",
			wikiPageTitle = "FrontPage");

		Navigator.gotoPage(pageName = "Blogs");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.openSiteURL(siteName = "Site Name");

		AssertVisible(
			key_pageName = "Site Page",
			locator1 = "Home#PAGE_ACTIVE");

		SignOut.signOut();

		SignIn.signIn(userEmailAddress = "user@liferay.com");

		Navigator.gotoPage(pageName = "Web Content");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		Navigator.gotoPage(pageName = "Document");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.viewPG(dmDocumentTitle = "Document1");

		DMDocument.expandInfo();

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_UPLOADED_BY",
			value1 = "Test Test");

		AssertTextEquals(
			key_dmDocumentVersionNumber = "1.0",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_VERSION",
			value1 = "VERSION 1.0");

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_WORKFLOW_STATUS",
			value1 = "APPROVED");

		AssertTextEquals(
			key_dmDocumentSize = "22 KB",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_DOWNLOAD",
			value1 = "Download");

		Navigator.gotoPage(pageName = "Message Boards");

		MessageboardsThread.gotoPG(
			lastPostUserName = "Test Test",
			replyCount = "0",
			startedByUserName = "Test Test",
			threadBody = "Message Boards Body",
			threadSubject = "Message Boards Subject");

		MessageboardsThread.viewPG(
			threadBody = "Message Boards Body",
			threadSubject = "Message Boards Subject");

		Navigator.gotoPage(pageName = "Wiki");

		WikiPage.viewFrontPagePG(
			wikiPageContent = "Wiki Front Page Content",
			wikiPageTitle = "FrontPage");

		Navigator.gotoPage(pageName = "Blogs");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.openSiteURL(siteName = "Site Name");

		AssertVisible(
			key_pageName = "Site Page",
			locator1 = "Home#PAGE_ACTIVE");

		SignOut.signOut();

		SignIn.signIn();
	}

	macro viewUpgradeDBPartition {
		SignOut.signOut();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.able.com:8080",
			userEmailAddress = "test@www.able.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.viewCP(
			userEmailAddress = "test1@www.able.com",
			userFirstName = "Test1",
			userLastName = "Test1",
			userScreenName = "test1");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.searchCP(searchTerm = "test2");

		User.viewNoUsersFoundCP();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.viewCP(
			roleTitle = "Roles Regrole1 Name",
			roleType = "Regular");

		Navigator.openSpecificURL(url = "http://www.able.com:8080");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document1 Title");

		DMDocument.viewCP(dmDocumentTitle = "DM Document1 Title");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent1 Title");

		WebContent.viewCP(
			webContentContent = "WC WebContent1 Content",
			webContentTitle = "WC WebContent1 Title");

		SignOut.signOut();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.baker.com:8080",
			userEmailAddress = "test@www.baker.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.viewCP(
			userEmailAddress = "test2@www.baker.com",
			userFirstName = "Test2",
			userLastName = "Test2",
			userScreenName = "test2");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.searchCP(searchTerm = "test1");

		User.viewNoUsersFoundCP();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.viewCP(
			roleTitle = "Roles Regrole2 Name",
			roleType = "Regular");

		Navigator.openSpecificURL(url = "http://www.baker.com:8080");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document2 Title");

		DMDocument.viewCP(dmDocumentTitle = "DM Document2 Title");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent2 Title");

		WebContent.viewCP(
			webContentContent = "WC WebContent2 Content",
			webContentTitle = "WC WebContent2 Title");

		Upgrade.viewMatchingCalendarIndexesInPartitionedDatabase();
	}

	macro ViewWebContentWCStructureWCTemplateWCDandAssetPublisher {
		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		if ("${webContentColor}" == "false") {
			WebContent.viewWithStructureCP(
				linkedPageName = "Home",
				linkFieldName = "LinktoPage",
				menuItem = "Basic Document",
				structureName = "WC Structure Name",
				webContentBoolean = "true",
				webContentDate = "01/29/2021",
				webContentDecimal = "0.5",
				webContentDocumentsAndMedia = "DM Document Title",
				webContentHtml = "This is a HTML field",
				webContentImage = "Document_1.jpg",
				webContentInteger = "9",
				webContentNumber = "-1",
				webContentRadio = "option 1",
				webContentSelect = "option 2",
				webContentSelectWcFile = "WC WebContent 1 Title",
				webContentText = "This is a Text field",
				webContentTextBox = "This is a Text Box field",
				webContentTitle = "Web Content Title");
		}
		else {
			WebContent.viewWithStructureCP(
				linkedPageName = "Home",
				linkFieldName = "LinktoPage",
				menuItem = "Basic Document",
				structureName = "WC Structure Name",
				webContentBoolean = "true",
				webContentColor = "000000",
				webContentDate = "01/29/2021",
				webContentDecimal = "0.5",
				webContentDocumentsAndMedia = "DM Document Title",
				webContentHtml = "This is a HTML field",
				webContentImage = "Document_1.jpg",
				webContentImageDescription = "Image Description",
				webContentInteger = "9",
				webContentNumber = "-1",
				webContentRadio = "option 1",
				webContentSelect = "option 2",
				webContentSelectWcFile = "WC WebContent 1 Title",
				webContentText = "This is a Text field",
				webContentTextBox = "This is a Text Box field",
				webContentTitle = "Web Content Title");
		}

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		Navigator.gotoNavItem(navItem = "Structures");

		WebContentStructures.viewCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		Navigator.gotoNavItem(navItem = "Templates");

		WebContentTemplates.viewCP(
			templateDescription = "WC Template Description",
			templateName = "WC Template Name");

		Navigator.gotoPage(pageName = "Web Content Display");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "This is a Text Box field",
			webContentTitle = "Web Content Title");

		Navigator.gotoPage(pageName = "Asset Publisher");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "This is a HTML field",
			assetTitle = "Web Content Title");
	}

	macro viewWebContentWithAllFields {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content",
			site = "${siteName}");

		for (var fieldName : list "Boolean,Date,Decimal,Documents and Media,HTML,Image,Integer,Link to Page,Number,Radio,Select,Separator,Text,Text Box") {
			WebContentAdmin.viewEntryWorkflowStatus(
				entry = "${fieldName} Web Content",
				workflowStatus = "Approved");
		}

		WebContent.viewWithStructureCP(
			webContentBoolean = "true",
			webContentBooleanFieldLabel = "Boolean",
			webContentTitle = "Boolean Web Content");

		Navigator.gotoBack();

		WebContent.viewWithStructureCP(
			webContentDate = "10/10/2020",
			webContentTitle = "Date Web Content");

		Navigator.gotoBack();

		WebContent.viewWithStructureCP(
			webContentNumeric = "0.5",
			webContentNumericFieldLabel = "Decimal",
			webContentTitle = "Decimal Web Content");

		Navigator.gotoBack();

		WebContent.viewWithStructureCP(
			webContentTitle = "Documents and Media Web Content",
			webContentUpload = "Document Title",
			webContentUploadFieldLabel = "Documents and Media");

		Navigator.gotoBack();

		WebContent.viewWithStructureCP(
			webContentRichText = "This is a HTML field",
			webContentRichTextFieldLabel = "HTML",
			webContentTitle = "HTML Web Content");

		Navigator.gotoBack();

		WebContent.viewWithStructureCP(
			webContentNumeric = "9",
			webContentNumericFieldLabel = "Integer",
			webContentTitle = "Integer Web Content");

		Navigator.gotoBack();

		WebContent.viewWithStructureCP(
			webContentLinkToPage = "Welcome",
			webContentTitle = "Link to Page Web Content");

		Navigator.gotoBack();

		WebContent.viewWithStructureCP(
			webContentNumeric = "-1",
			webContentNumericFieldLabel = "Number",
			webContentTitle = "Number Web Content");

		Navigator.gotoBack();

		WebContent.viewWithStructureCP(
			webContentSingleSelection = "option 1",
			webContentSingleSelectionFieldLabel = "Radio",
			webContentTitle = "Radio Web Content");

		Navigator.gotoBack();

		WebContent.viewWithStructureCP(
			webContentSelectFromList = "option 2",
			webContentSelectFromListFieldLabel = "Select",
			webContentTitle = "Select Web Content");

		Navigator.gotoBack();

		WebContent.viewWithStructureCP(
			webContentSeparator = "true",
			webContentTitle = "Separator Web Content");

		Navigator.gotoBack();

		WebContent.viewWithStructureCP(
			webContentText = "This is a Text field",
			webContentTitle = "Text Web Content");

		Navigator.gotoBack();

		WebContent.viewWithStructureCP(
			fieldType = "Multiple Lines",
			webContentText = "This is a Text Box field",
			webContentTextFieldLabel = "Text Box",
			webContentTitle = "Text Box Web Content");

		Navigator.gotoBack();

		WebContentNavigator.gotoEditCP(webContentTitle = "Image Web Content");

		AssertTextEquals(
			locator1 = "TextInput#TITLE",
			value1 = "Image Web Content");

		var imageFieldValue = selenium.getElementValue("//label[contains(@class,'ddm-label')][normalize-space(text())='Image']/following-sibling::div//div[contains(@class,'input-group')]//input[contains(@type,'text')]");

		TestUtils.assertNotEquals(
			actual = "${imageFieldValue}",
			expected = "");

		AssertElementPresent(
			key_fieldFieldLabel = "Image",
			key_image = "/documents/",
			locator1 = "WCEditWebContent#IMAGE_PICKER_PREVIEW");

		Click(
			fieldLabel = "Image",
			locator1 = "Button#BUTTON_LABEL",
			text = "Clear");

		AssertElementNotPresent(
			key_fieldFieldLabel = "Image",
			key_image = "/documents/",
			locator1 = "WCEditWebContent#IMAGE_PICKER_PREVIEW");
	}

	macro viewWebContentWithNoDisplayPageTemplate {
		task ("View the View Content action not shown in dropdown list and the None is selected in Display Page Template field") {
			for (var n : list "1,2") {
				WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

				Click(
					key_webContentTitle = "Web Content Title ${n} Edit",
					locator1 = "WC#ENTRY_LIST_MENULIST_ICON");

				MenuItem.viewNotPresent(menuItem = "View Content");

				MenuItem.click(menuItem = "Edit");

				WebContent.viewSelectedDisplayPageTemplateCP(displayPageTemplateType = "None");
			}
		}
	}

	macro viewWebContentWithPredefinedValueInWebContentField {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		for (var webContentTitle : list "Web Content Title,Web Content With Predefined Value") {
			WebContentAdmin.viewEntryWorkflowStatus(
				entry = "${webContentTitle}",
				workflowStatus = "Approved");
		}

		WebContent.viewWithStructureCP(
			webContentTitle = "Web Content With Predefined Value",
			webContentWebContent = "Web Content Title");
	}

	macro viewWebContextsCORS {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "${filter}");

		AssertTextEquals(
			key_configurationValue = "filter.mapping.url.pattern",
			locator1 = "SystemSettings#CORS_CONFIGURATION",
			value1 = "${urlPattern}");
	}

}