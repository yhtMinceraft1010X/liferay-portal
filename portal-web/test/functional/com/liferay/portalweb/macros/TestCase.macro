definition {

	macro enableMetal {
		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Forms",
			configurationName = "Forms",
			configurationScope = "Site Scope");

		SystemSettings.saveConfiguration();

		SystemSettings.resetConfiguration();

		Click(locator1 = "Checkbox#ENABLE_EXPERIMENTAL_INTERFACE");

		SystemSettings.saveConfiguration();
	}

	macro getDependenciesDirPath {
		var projectDir = PropsUtil.get("project.dir");
		var testBaseDir = PropsUtil.get("test.base.dir.name");
		var testDependenciesDir = PropsUtil.get("test.dependencies.dir.name");
		var testName = selenium.getTestName();
		var testName = StringUtil.extractLast("${testName}", ".");
		var testName = StringUtil.extractFirst("${testName}", "#");

		var testFileName = StringUtil.split("**/${testName}.testcase");
		var testFilePaths = FileUtil.getIncludedResourceURLs("${testFileName}", "${projectDir}/portal-web");
		var testFilePaths = StringUtil.valueOf("${testFilePaths}");

		if ("${testFilePaths}" == "[]") {
			var testFilePaths = FileUtil.getIncludedResourceURLs("${testFileName}", "${projectDir}/modules");
			var testFilePaths = StringUtil.valueOf("${testFilePaths}");
		}

		var testFilePath = RegexUtil.replace("${testFilePaths}", "\[(.*)\]", "1");
		var testFilePath = StringUtil.extractLast("${testFilePath}", "file:");
		var testFileParentDir = StringUtil.extractFirst("${testFilePath}", "${testName}.testcase");
		var dependenciesDir = "${testFileParentDir}${testDependenciesDir}";

		if (isSet(filePath)) {
			var dependenciesDir = "${dependenciesDir}/${filePath}";
		}

		var dependencyFilePath = "${dependenciesDir}/${fileName}";
		var fileExists = FileUtil.exists("${dependencyFilePath}");

		if ("${fileExists}" == "false") {
			var dependencyFilePath = "${testBaseDir}${testDependenciesDir}/${fileName}";
			var globalFileExists = FileUtil.exists("${dependencyFilePath}");

			if ("${globalFileExists}" == "false") {
				fail("Unable to find dependency file at ${dependenciesDir}/${fileName} or ${dependencyFilePath}");
			}
		}

		return "${dependencyFilePath}";
	}

	macro getDownloadedTempFileName {
		var tempDir = PropsUtil.get("output.dir.name");

		var pattern = StringUtil.split("**/${fileNamePattern}");
		var filePath = FileUtil.getIncludedResourceURLs("${pattern}", "${tempDir}");
		var filePath = StringUtil.valueOf("${filePath}");
		var filePath = RegexUtil.replace("${filePath}", "\[(.*)\]", "1");
		var filePath = StringUtil.replace("${filePath}", "file:/", "");
		var fileName = FileUtil.getFileName("${filePath}");

		return "${fileName}";
	}

	macro getFileContent {
		var dependencyFilePath = TestCase.getDependenciesDirPath(fileName = "${fileName}");

		var fileContent = FileUtil.read("${dependencyFilePath}");

		return "${fileContent}";
	}

	macro getSiteName {
		var testNameSkipPortalInstance = PropsUtil.get("test.name.skip.portal.instance");
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (("${siteName}" == "Liferay") || !(isSet(siteName))) {
			if (("${testPortalInstance}" == "true") && !(IsTestName(locator1 = "", value1 = "${testNameSkipPortalInstance}"))) {
				var portalURL = PropsUtil.get("portal.url");
				var portalURL = StringUtil.replace("${portalURL}", "http://", "");
				var portalURL = StringUtil.replace("${portalURL}", ":8080", "");

				return "${portalURL}";
			}
			else {
				var testRunEnvironment = PropsUtil.get("test.run.environment");

				if ("${testRunEnvironment}" == "EE") {
					return "Liferay DXP";
				}
				else {
					return "Liferay";
				}
			}
		}
		else {
			return "${siteName}";
		}
	}

	macro getTempFileContent {
		var tempDir = PropsUtil.get("output.dir.name");
		var tempFile = "${tempDir}/${fileName}";
		var tempFileExists = FileUtil.exists("${tempFile}");

		if ("${tempFileExists}" == "true") {
			echo("Fetching ${fileName} content.");
		}
		else {
			fail("Temp file not found at ${tempFile}");
		}

		var fileContent = FileUtil.read("${tempFile}");

		return "${fileContent}";
	}

	macro getTestName {
		var testName = PropsUtil.get("test.name");
		var testName = RegexUtil.replace("${testName}", "[^\.]*\.(.*)", "1");

		return "${testName}";
	}

	macro setUpPortalInstance {
		var testNameSkipPortalInstance = PropsUtil.get("test.name.skip.portal.instance");
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (!(IsTestName(locator1 = "", value1 = "${testNameSkipPortalInstance}"))) {
			HeadlessPortalInstanceAPI.cleanAllPortalInstances(authenticationMethod = "${authenticationMethod}");

			if ("${testPortalInstance}" == "true") {
				SignIn.signInPortalInstanceSetUp();
			}
		}
	}

}