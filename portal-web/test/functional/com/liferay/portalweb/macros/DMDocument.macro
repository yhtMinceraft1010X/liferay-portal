definition {

	var assetType = "Document";
	var dmDocumentTypeName = "File Upload";

	macro addCategories {
		Panel.expandPanel(panel = "Categorization");

		AssetCategorization.addMultipleCategories(
			categoryNameList = "${categoryNameList}",
			vocabularyName = "${vocabularyName}");
	}

	macro addCP {
		if (isSet(siteURLKey)) {
			DMNavigator.openToAddEntry(
				documentTypeName = "${documentTypeName}",
				folderName = "${folderName}",
				groupName = "${groupName}",
				siteURLKey = "${siteURLKey}");
		}
		else {
			DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "${dmDocumentTypeName}");
		}

		var key_dmDocumentTitle = "${dmDocumentTitle}";

		if ("${uploadTempFile}" == "true") {
			UploadTempFile(
				locator1 = "TextInput#FILE",
				value1 = "${dmDocumentFile}");
		}
		else if ("${nullFile}" == "true") {
			AssertElementNotPresent(locator1 = "TextInput#FILE_PRESENT");
		}
		else {
			if (isSet(dmDocumentFile)) {
				UploadDependencyFile.uploadFile(fileName = "${dmDocumentFile}");
			}
		}

		if (isSet(customFieldText)) {
			Panel.expandPanel(panel = "Custom Fields");

			Type(
				locator1 = "TextInput#CUSTOM_FIELD",
				value1 = "${customFieldText}");
		}

		if (isSet(tagNameList)) {
			Panel.expandPanel(panel = "Categorization");

			for (var tagName : list "${tagNameList}") {
				AssetCategorization.addTag(tagName = "${tagName}");
			}
		}

		if (isSet(displayPageTemplateDisabled)) {
			Portlet.waitForForm();

			var key_panel = "Display Page";

			AssertElementNotPresent(locator1 = "Panel#PANEL");
		}

		if (isSet(vocabularyName)) {
			DMDocument.addCategories(
				categoryNameList = "${categoryNameList}",
				vocabularyName = "${vocabularyName}");
		}

		if (isSet(useCurrentTitle)) {
			echo("Use the title automatically added after uploading a file.");
		}
		else {
			PortletEntry.inputTitle(title = "${dmDocumentTitle}");
		}

		if (isSet(dmDocumentDescription)) {
			PortletEntry.inputDescription(description = "${dmDocumentDescription}");
		}

		if (isSet(dateValue)) {
			if (!(isSet(dateFieldLabel))) {
				var dateFieldLabel = "Date";
			}

			Type(
				key_fieldFieldLabel = "${dateFieldLabel}",
				locator1 = "WCEditWebContent#DATE_INPUT",
				value1 = "${dateValue}");
		}

		if (isSet(dmDocumentFileName)) {
			PortletEntry.inputText(
				fieldLabel = "File Name",
				text = "${dmDocumentFileName}");
		}

		if (isSet(documentsAndMediaField)) {
			if (isSet(fieldFieldLabel)) {
				var key_fieldFieldLabel = "${fieldFieldLabel}";
			}
			else {
				var key_fieldFieldLabel = "Upload";
			}

			Click(
				fieldLabel = "${key_fieldFieldLabel}",
				locator1 = "Button#BUTTON_LABEL",
				text = "Select");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			if ("${navTab}" == "Documents and Media") {
				AssertClick(
					key_navTab = "${navTab}",
					locator1 = "ItemSelector#NAVIGATION_SPECIFIC_TAB",
					value1 = "${navTab}");
			}

			AssertClick.assertPartialTextClickAt(
				key_dmDocumentTitle = "${documentsAndMediaField}",
				locator1 = "WC#ICON_DOCUMENT_TITLE",
				value1 = "${documentsAndMediaField}");
		}

		if (isSet(linkedPageName)) {
			if (!(isSet(linkToPageFieldLabel))) {
				var linkToPageFieldLabel = "Link to Page";
			}

			WaitForLiferayEvent.initializeLiferayEventLog();

			Click(
				fieldLabel = "${linkToPageFieldLabel}",
				locator1 = "Button#BUTTON_LABEL",
				text = "Select");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Portlet.expandTree();

			AssertClick.assertPartialTextClickAt(
				key_nodeName = "${linkedPageName}",
				locator1 = "Treeview#NODE_UNSELECTED",
				value1 = "${linkedPageName}");

			SelectFrameTop();
		}

		if (isSet(imageField)) {
			if (isSet(fieldFieldLabel)) {
				var key_fieldFieldLabel = "${fieldFieldLabel}";
			}
			else {
				var key_fieldFieldLabel = "Image";
			}

			Click(
				fieldLabel = "${key_fieldFieldLabel}",
				locator1 = "Button#BUTTON_LABEL",
				text = "Select");

			if ("${navTab}" == "Documents and Media") {
				if (isSet(imageFileName)) {
					ItemSelector.selectDMImage(
						imageFileName = "${imageField}",
						navTab = "${navTab}");
				}
				else {
					ItemSelector.uploadFile(
						invalidFileValidation = "${invalidFileValidation}",
						navTab = "${navTab}",
						uploadFileName = "${imageField}");
				}
			}

			if (isSet(imageDescription)) {
				Type(
					locator1 = "TextInput#IMAGE_DESCRIPTION",
					value1 = "${imageDescription}");
			}
		}

		if (isSet(textField)) {
			if (isSet(fieldFieldLabel)) {
				var key_fieldLabel = "${fieldFieldLabel}";
			}
			else {
				var key_fieldLabel = "Text";
			}

			Type(
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "${textField}");
		}

		if (isSet(numericField)) {
			if (isSet(numericFieldFieldLabel)) {
				var key_fieldLabel = "${numericFieldFieldLabel}";
			}
			else {
				var key_fieldLabel = "Numeric";
			}

			Type(
				locator1 = "TextInput#NUMERIC",
				value1 = "${numericField}");
		}

		if (isSet(selectFromListField)) {
			if (isSet(fieldFieldLabel)) {
				var key_fieldFieldLabel = "${fieldFieldLabel}";
			}
			else {
				var key_fieldFieldLabel = "Select from List";
			}

			Click(locator1 = "WCEditWebContent#SELECT_FIELD_TRIGGER");

			DropdownMenuItem.click(menuItem = "${selectFromListField}");
		}

		if (isSet(validationError)) {
			Button.clickPublish();

			AssertTextEquals.assertPartialText(
				key_alertMessage = "${validationError}",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE",
				value1 = "${validationError}");
		}
		else if (isSet(validateFileNameRestriction)) {
			AssertElementPresent(locator1 = "TextInput#FILE_PRESENT");

			Button.clickPublish();

			Alert.viewRequestFailedToComplete();

			AssertTextEquals.assertPartialText(
				key_alertMessage = "Please enter a file with a valid file name.",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE",
				value1 = "Please enter a file with a valid file name.");

			AssertTextEquals.assertPartialText(
				key_alertMessage = "Please select the file again.",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE",
				value1 = "Please select the file again.");

			AssertElementNotPresent(locator1 = "TextInput#FILE_PRESENT");
		}
		else if (isSet(emptyFileNameRestriction)) {
			Button.clickPublish();

			Alert.viewRequestFailedToComplete();

			AssertTextEquals.assertPartialText(
				key_alertMessage = "The file name cannot be empty or without extension.",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE",
				value1 = "The file name cannot be empty or without extension.");

			AssertTextEquals.assertPartialText(
				key_alertMessage = "Please select the file again.",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE",
				value1 = "Please select the file again.");

			AssertElementNotPresent(locator1 = "TextInput#FILE_PRESENT");
		}
		else if (isSet(validateStorageQuota)) {
			Button.clickPublish();

			Alert.viewRequestFailedToComplete();

			AssertTextEquals.assertPartialText(
				key_alertMessage = "You have exceeded the ${storageQuota} storage quota for this instance.",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE",
				value1 = "You have exceeded the ${storageQuota} storage quota for this instance.");

			AssertTextEquals.assertPartialText(
				key_alertMessage = "Please select the file again.",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE",
				value1 = "Please select the file again.");
		}
		else if (isSet(requiredFieldValidation)) {
			Button.clickPublish();

			AssertElementPresent(
				key_fieldFieldLabel = "${fieldFieldLabel}",
				locator1 = "DocumentsAndMediaDocument#CUSTOM_FIELD_REQUIRED_ALERT",
				value1 = "This field is required.");
		}
		else if (isSet(warningForSizeLimits)) {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "${warningForSizeLimits}");

			PortletEntry.publish();
		}
		else {
			PortletEntry.publish();
		}
	}

	macro addDMShortcutCP {
		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "Shortcut");

		Click(locator1 = "DocumentsAndMediaAddShortcut#SELECT_DOCUMENT_BUTTON");

		var key_siteName = "${siteName}";

		SelectFrame(locator1 = "ItemSelector#ITEM_SELECTOR_IFRAME");

		if (isSet(stagingSiteName)) {
			AssertVisible(
				key_card = "${dmDocumentTitle}",
				locator1 = "Card#CARD");
		}
		else {
			AssertClick(
				key_breadcrumbName = "Sites and Libraries",
				locator1 = "Breadcrumb#BREADCRUMB_ENTRY",
				value1 = "Sites and Libraries");
		}

		if (isSet(siteName)) {
			LexiconCard.clickCardTitleLink(card = "${siteName}");
		}

		if (isSet(depotName)) {
			AssertClick(
				key_groupTab = "Asset Library",
				locator1 = "ItemSelector#NAVIGATION_GROUP_TAB",
				value1 = "Asset Library");

			LexiconCard.clickCard(card = "${depotName}");
		}

		LexiconCard.clickCard(card = "${dmDocumentTitle}");

		SelectFrameTop(value1 = "relative=top");

		PortletEntry.save();
	}

	macro addDMShortcutPG {
		DMNavigator.gotoAddDocumentTypePG(
			contentPage = "${contentPage}",
			dmDocumentTypeName = "Shortcut");

		Click(locator1 = "DocumentsAndMediaAddShortcut#SELECT_DOCUMENT_BUTTON");

		SelectFrame(locator1 = "ItemSelector#ITEM_SELECTOR_IFRAME");

		AssertClick(
			key_breadcrumbName = "Sites and Libraries",
			locator1 = "Breadcrumb#BREADCRUMB_ENTRY",
			value1 = "Sites and Libraries");

		if (isSet(siteName)) {
			LexiconCard.clickCardTitleLink(card = "${siteName}");
		}

		if (isSet(depotName)) {
			AssertClick(
				key_groupTab = "Asset Library",
				locator1 = "ItemSelector#NAVIGATION_GROUP_TAB",
				value1 = "Asset Library");

			LexiconCard.clickCard(card = "${depotName}");
		}

		LexiconCard.clickCard(card = "${dmDocumentTitle}");

		SelectFrameTop(value1 = "relative=top");

		PortletEntry.save();
	}

	macro addDocumentTypePG {
		var key_dmDocumentTypeName = "${dmDocumentTypeName}";

		Portlet.clickPortletPlusIconPG(portletName = "Documents and Media");

		MenuItem.click(menuItem = "${dmDocumentTypeName}");

		DMDocument.editDocument(
			dmDocumentDescription = "${dmDocumentDescription}",
			dmDocumentFile = "${dmDocumentFile}",
			dmDocumentTitle = "${dmDocumentTitle}");

		if (isSet(selectOption)) {
			Select(
				locator1 = "DocumentsAndMediaEditCustomDocumentType#SELECT_OPTIONS_SELECT",
				value1 = "${selectOption}");
		}

		if (isSet(textField)) {
			var key_fieldName = "Text";

			Type(
				locator1 = "TextInput#TEXT_SPECIFIC",
				value1 = "${textField}");
		}

		if (isSet(numericField)) {
			var key_fieldLabel = "Numeric";

			Type(
				locator1 = "TextInput#NUMERIC",
				value1 = "${numericField}");
		}

		if (isSet(dateValue)) {
			if (!(isSet(dateFieldLabel))) {
				var dateFieldLabel = "Date";
			}

			Type(
				key_fieldFieldLabel = "${dateFieldLabel}",
				locator1 = "WCEditWebContent#DATE_INPUT",
				value1 = "${dateValue}");
		}

		if (isSet(booleanField)) {
			var key_fieldName = "Boolean";

			Check(
				locator1 = "TextInput#DDM",
				value1 = "${booleanField}");
		}

		if (isSet(webcontentField)) {
			Click(
				fieldLabel = "Web Content",
				locator1 = "Button#BUTTON_LABEL",
				text = "Select");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			AssertClick(
				key_contentName = "${webcontentField}",
				locator1 = "ItemSelector#SELECT_FILE_WEB_CONTENT",
				value1 = "${webcontentField}");

			SelectFrame(value1 = "relative=top");
		}

		AssertClick(
			locator1 = "Button#PUBLISH",
			value1 = "Publish");

		Alert.viewSuccessMessage();
	}

	macro addImageField {
		DMNavigator.openToAddDocumentType(siteURLKey = "guest");

		PortletEntry.inputName(name = "DM Document Type Name");

		DataEngine.addField(
			fieldFieldLabel = "Image",
			fieldName = "Image");
	}

	macro addMultipleCP {
		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "Multiple Files Upload");

		if (isSet(dmDocumentFileList)) {
			for (var dmDocumentFile : list "${dmDocumentFileList}") {
				var key_dmDocumentFile = "${dmDocumentFile}";

				AssertElementPresent(locator1 = "Button#SELECT_FILES");

				if ("${uploadTempFile}" == "true") {
					UploadTempFile.uploadTempFileHiddenNoMouseOver(
						locator1 = "TextInput#FILE",
						value1 = "${dmDocumentFile}");
				}
				else {
					UploadDependencyFile.uploadFile(fileName = "${dmDocumentFile}");
				}

				AssertChecked(locator1 = "DynamicUploader#SELECT_ALL_CHECKBOX");

				AssertElementPresent(
					key_documentName = "${dmDocumentFile}",
					locator1 = "DynamicUploader#ALL_FILES_READY_TO_BE_SAVED_DOCUMENT_TITLE");
			}
		}

		if (isSet(documentType)) {
			Panel.expandPanel(panel = "Document Type");

			if (isSet(currentDocumentType)) {
				Click(
					key_toggleButtonName = "${currentDocumentType}",
					locator1 = "Dropdown#DROPDOWN_TOGGLE_BUTTON");
			}
			else {
				Click(
					key_toggleButtonName = "Basic Document",
					locator1 = "Dropdown#DROPDOWN_TOGGLE_BUTTON");
			}

			Click(
				key_menuItem = "${documentType}",
				locator1 = "MenuItem#DROPDOWN_MENU_ITEM");

			Panel.expandPanel(panel = "Document Type");

			AssertTextEquals.assertPartialText(
				key_toggleButtonName = "${documentType}",
				locator1 = "Dropdown#DROPDOWN_TOGGLE_BUTTON",
				value1 = "${documentType}");

			if (isSet(dateValue)) {
				if (!(isSet(dateFieldLabel))) {
					var dateFieldLabel = "Date";
				}

				Type(
					key_fieldFieldLabel = "${dateFieldLabel}",
					locator1 = "WCEditWebContent#DATE_INPUT",
					value1 = "${dateValue}");
			}
		}

		if (isSet(viewableBy)) {
			Select(
				locator1 = "Select#PERMISSIONS",
				value1 = "${viewableBy}");
		}

		AssertElementPresent(
			locator1 = "Button#PUBLISH",
			value1 = "Publish");

		AssertClick(
			locator1 = "Button#PUBLISH",
			value1 = "Publish");

		if (isSet(validationError)) {
			var list1 = ListUtil.newListFromString("${dmDocumentFileFailed}");
			var list2 = ListUtil.newListFromString("${validationError}");
			var size = ListUtil.size("${list1}");
			var i = "0";

			while ("${i}" != "${size}") {
				var dmDocumentFileFailed = ListUtil.get("${list1}", "${i}");
				var validationError = ListUtil.get("${list2}", "${i}");

				AssertTextEquals.assertPartialText(
					dmDocumentFile = "${dmDocumentFileFailed}",
					key_alertMessage = "${validationError}",
					locator1 = "Message#ERROR_MULTIPLE_UPLOAD_INVALID",
					value1 = "${validationError}");

				var i = ${i} + 1;
				var i = StringUtil.valueOf("${i}");
			}
		}
		else {
			AssertElementPresent.pauseAssertVisible(locator1 = "DocumentsAndMedia#BREADCRUMB_HOME");

			VerifyElementPresent(locator1 = "Message#SUCCESS");
		}
	}

	macro addMultiplePG {
		if (isSet(contentPage)) {
			LexiconEntry.gotoAdd();
		}
		else {
			Portlet.clickPortletPlusIconPG(portletName = "Documents and Media");
		}

		MenuItem.click(menuItem = "Multiple Files Upload");

		if (isSet(dmDocumentFileList)) {
			for (var dmDocumentFile : list "${dmDocumentFileList}") {
				var key_dmDocumentFile = "${dmDocumentFile}";

				AssertElementPresent(locator1 = "Button#SELECT_FILES");

				if ("${uploadTempFile}" == "true") {
					UploadTempFile(
						locator1 = "OS#FILE_DIALOG_BOX_FILE_NAME_FIELD_PNG",
						value1 = "${dmDocumentFile}");
				}
				else {
					UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
						locator1 = "TextInput#FILE",
						value1 = "${dmDocumentFile}");
				}

				AssertChecked(locator1 = "DynamicUploader#SELECT_ALL_CHECKBOX");

				AssertElementPresent(
					key_documentName = "${dmDocumentFile}",
					locator1 = "DynamicUploader#ALL_FILES_READY_TO_BE_SAVED_DOCUMENT_TITLE");
			}
		}

		if (isSet(viewableBy)) {
			Select(
				locator1 = "Select#PERMISSIONS",
				value1 = "${viewableBy}");
		}

		if (isSet(validateStorageQuota)) {
			AssertTextEquals.assertPartialText(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_EXCEED_STORAGE_QUOTA_ERROR",
				value1 = "You have exceeded the ${storageQuota} storage quota for this instance.");
		}

		AssertClick(
			locator1 = "Button#PUBLISH",
			value1 = "Publish");

		VerifyElementPresent(locator1 = "Message#SUCCESS");

		Alert.closeMessage(messageType = "SUCCESS");
	}

	macro addPG {
		if ("${stagingActivated}" == "true") {
			AssertElementNotPresent(locator1 = "Message#WORKFLOW_UNAPPROVED");
		}

		Portlet.clickPortletPlusIconPG(portletName = "Documents and Media");

		if (isSet(dmDocumentTypeName)) {
			var key_dmDocumentTypeName = "${dmDocumentTypeName}";

			MenuItem.click(menuItem = "${dmDocumentTypeName}");
		}
		else {
			MenuItem.click(menuItem = "File Upload");
		}

		DMDocument.editDocument(
			dmDocumentDescription = "${dmDocumentDescription}",
			dmDocumentFile = "${dmDocumentFile}",
			dmDocumentTitle = "${dmDocumentTitle}",
			useCurrentTitle = "${useCurrentTitle}");

		if (isSet(categoryName)) {
			var key_categoryName = "${categoryName}";

			Panel.expandPanel(panel = "Categorization");

			AssetCategorization.addCategory(
				categoryName = "${categoryName}",
				vocabularyName = "${vocabularyName}");
		}

		if (isSet(dmDocumentRelatedAsset)) {
			RelatedAssets.selectAsset(
				assetTitle = "${assetTitle}",
				assetType = "${assetType}");
		}

		if (isSet(tagNameList)) {
			Panel.expandPanel(panel = "Categorization");

			for (var tagName : list "${tagNameList}") {
				AssetCategorization.addTag(tagName = "${tagName}");
			}
		}

		if (isSet(viewableBy)) {
			Panel.expandPanel(panel = "Permissions");

			Select(
				locator1 = "Select#PERMISSIONS",
				value1 = "${viewableBy}");
		}

		if (isSet(textField)) {
			if (isSet(fieldFieldLabel)) {
				var key_fieldLabel = "${fieldFieldLabel}";
			}
			else {
				var key_fieldLabel = "Text";
			}

			Type(
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "${textField}");
		}

		AssertClick(
			locator1 = "Button#PUBLISH",
			value1 = "Publish");

		if ("${dmDocument}" == "Duplicate") {
			Alert.viewRequestFailedToComplete();

			AssertTextEquals.assertPartialText(
				locator1 = "DocumentsAndMediaEditDocument#UNIQUE_DOCUMENT_ERROR_MESSAGE",
				value1 = "Please enter a unique document name.");
		}
		else if ("${dmDocument}" == "Invalid") {
			Alert.viewRequestFailedToComplete();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_2",
				value1 = "Please enter a file with a valid file name.");
		}
		else {
			Alert.viewSuccessMessage();
		}
	}

	macro addPGViaAP {
		AssetPublisherPortlet.addAsset(assetType = "Basic Document");

		DMDocument.editDocument(
			dmDocumentDescription = "${dmDocumentDescription}",
			dmDocumentFile = "${dmDocumentFile}",
			dmDocumentTitle = "${dmDocumentTitle}");

		AssertClick(
			locator1 = "Button#PUBLISH",
			value1 = "Publish");

		SelectFrame(locator1 = "relative=top");
	}

	macro addPGViaAPWithValidationPosition {
		AssetPublisherPortlet.addAsset(assetType = "Basic Document");

		DMDocument.editDocument(
			dmDocumentDescription = "${dmDocumentDescription}",
			dmDocumentFile = "${dmDocumentFile}",
			dmDocumentTitle = "${dmDocumentTitle}");

		AssertVisible(locator1 = "Button#PUBLISH");

		AssertVisible(locator1 = "Button#CANCEL");

		Button.clickPublish();

		SelectFrame(locator1 = "relative=top");
	}

	macro addPGViaMG {
		if (isSet(siteURLKey)) {
			DMNavigator.openToAddEntry(
				groupName = "${groupName}",
				layoutName = "${layoutName}",
				mediaGallery = "${mediaGallery}",
				siteURLKey = "${siteURLKey}");
		}
		else {
			Portlet.clickPortletPlusIconPG(portletName = "Media Gallery");

			MenuItem.click(menuItem = "File Upload");
		}

		UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
			locator1 = "TextInput#FILE",
			value1 = "${mgDocumentFile}");

		if (isSet(warningFeedback)) {
			AssertTextEquals(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "${warningFeedback}");

			AssertElementNotPresent(locator1 = "TextInput#FILE_PRESENT");
		}

		PortletEntry.inputTitle(title = "${mgDocumentTitle}");

		PortletEntry.inputDescription(description = "${mgDocumentDescription}");

		if (isSet(validationError)) {
			Button.clickPublish();

			AssertTextEquals.assertPartialText(
				key_alertMessage = "${validationError}",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE",
				value1 = "${validationError}");
		}
		else {
			PortletEntry.publish();
		}
	}

	macro addRelatedAssetPG {
		Panel.expandPanel(panel = "Related Assets");

		var key_assetType = "${assetType}";

		AssertClick(
			locator1 = "AssetRelatedAssets#RELATED_ASSETS_SELECT",
			value1 = "Select");

		AssertClick(
			locator1 = "APConfiguration#ASSET_SELECTION_MANUAL_ASSET_ENTRIES_ASSET",
			value1 = "${assetType}");

		var key_assetTitle = "${assetTitle}";

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertClick.assertPartialTextClickAt(
			locator1 = "AssetRelatedAssets#ASSET_TABLE_CHOOSE",
			value1 = "${assetType}");

		SelectFrame(value1 = "relative=top");
	}

	macro addWithWorkflowCP {
		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "${dmDocumentTypeName}");

		DMDocument.editDocument(
			dmDocumentDescription = "${dmDocumentDescription}",
			dmDocumentFile = "${dmDocumentFile}",
			dmDocumentTitle = "${dmDocumentTitle}");

		Button.clickSubmitForPublication();

		var key_dmDocumentTitle = "${dmDocumentTitle}";

		LexiconEntry.viewEntryName(rowEntry = "${dmDocumentTitle}");
	}

	macro assertDownloadedFileContent {
		var fileContent = TestCase.getTempFileContent(fileName = "${fileName}");

		if (contains("${fileContent}", "${downloadedContent}")) {
			echo("The downloaded file content matches the expected file content.");
		}
		else {
			fail("The downloaded file content does not match the expected file content.");
		}
	}

	macro assertFileNameFromTempFolder {
		var tempDir = PropsUtil.get("output.dir.name");
		var downloadedFile = FileUtil.exists("${tempDir}/${fileName}");

		if ("${downloadedFile}" == "true") {
			echo("This is a correct file name.");
		}
		else {
			fail("FAIL!");
		}
	}

	macro assertNoFileNameFromTempFolder {
		var tempDir = PropsUtil.get("output.dir.name");
		var exportedFile = FileUtil.exists("${tempDir}/${fileName}");

		if ("${exportedFile}" == "true") {
			fail("FAIL! There is a file named ${fileName}.");
		}
		else {
			echo("This is no file named ${fileName}.");
		}
	}

	macro cancelCheckoutCP {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		if ("${dmRepositoryName}" == "true") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#INFO",
				value1 = "You now have an indefinite lock on this document. No one else can edit this document until you unlock it. This lock will never expire.");

			LexiconEntry.gotoHeaderMenuItem(menuItem = "Cancel Checkout");
		}
		else {
			var key_dmDocumentTitle = "${dmDocumentTitle}";

			DMNavigator.gotoDocumentCP(dmDocumentTitle = "${dmDocumentTitle}");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#CHECKOUT_SUCCESS",
				value1 = "You now have a lock on this document. No one else can edit this document until you unlock it. This lock will automatically expire in 1 day.");

			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			Click(locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Cancel Checkout");
		}

		Alert.viewSuccessMessage();
	}

	macro cancelCheckoutPG {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		AssertClick(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "${dmDocumentTitle}");

		AssertTextEquals(
			locator1 = "Message#CHECKOUT_SUCCESS",
			value1 = "You now have a lock on this document. No one else can edit this document until you unlock it. This lock will automatically expire in 1 day.");

		AssertClick(
			locator1 = "Button#CANCEL_CHECKOUT",
			value1 = "Cancel Checkout");

		Alert.viewSuccessMessage();
	}

	macro cannotViewCP {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		AssertElementNotPresent(locator1 = "DocumentsAndMedia#ICON_DOCUMENT");
	}

	macro cannotViewDocumentMetadataCP {
		var key_metadataData = "${metadataData}";
		var key_metadataLabel = "${metadataLabel}";

		if (IsElementNotPresent(locator1 = "//span[normalize-space(text())='Automatically Extracted Metadata']")) {
			Refresh();

			DMDocument.expandInfo();
		}

		AssertElementNotPresent(locator1 = "DocumentsAndMediaDocument#DOCUMENT_EXTRACTED_METADATA_FIELD");
	}

	macro checkDocumentCheckboxCP {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		Check(locator1 = "DocumentsAndMedia#ICON_DOCUMENT_CHECKBOX");
	}

	macro checkDocumentCheckboxPG {
		var key_listEntry = "${dmDocumentTitle}";

		Check(locator1 = "LexiconList#LIST_ENTRY_CHECKBOX");
	}

	macro checkinCP {
		if ("${dmRepositoryName}" == "true") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#CHECKOUT_SUCCESS",
				value1 = "You now have an indefinite lock on this document. No one else can edit this document until you unlock it. This lock will never expire.");
		}
		else {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#CHECKOUT_SUCCESS",
				value1 = "You now have a lock on this document. No one else can edit this document until you unlock it. This lock will automatically expire in 1 day.");
		}

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Checkin");

		if (IsElementPresent(locator1 = "DocumentsAndMedia#CHECKIN_DIALOG_TITLE")) {
			if ("${revision}" == "Major") {
				Click(locator1 = "Radio#MAJOR_VERSION");
			}
			else if ("${revision}" == "Minor") {
				Click(locator1 = "Radio#MINOR_VERSION");
			}
			else if ("${revision}" == "Current") {
				Click(locator1 = "Radio#CURRENT_VERSION");

				AssertElementNotPresent(
					key_fieldLabel = "Version Notes",
					locator1 = "TextInput#GENERIC_TEXT_INPUT");
			}

			if (isSet(changeLog)) {
				Type(
					locator1 = "TextArea#CHANGE_LOG",
					value1 = "${changeLog}");
			}

			Click(locator1 = "Button#SAVE");
		}

		Alert.viewSuccessMessage();
	}

	macro checkinManagementBar {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		if ("${allFiles}" == "true") {
			PortletEntry.selectAll();
		}
		else {
			Check(locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_CHECKBOX");
		}

		Click(locator1 = "Icon#TOOLBAR_ELLIPSIS");

		MenuItem.click(menuItem = "Checkin");

		if (IsElementPresent(locator1 = "DocumentsAndMedia#CHECKIN_DIALOG_TITLE")) {
			if ("${revision}" == "Major") {
				Click(locator1 = "Radio#MAJOR_VERSION");
			}
			else if ("${revision}" == "Minor") {
				Click(locator1 = "Radio#MINOR_VERSION");
			}
			else if ("${revision}" == "Current") {
				Click(locator1 = "Radio#CURRENT_VERSION");
			}

			if (isSet(changeLog)) {
				Type(
					locator1 = "TextArea#CHANGE_LOG",
					value1 = "${changeLog}");
			}

			Click(locator1 = "Button#SAVE");
		}

		Alert.viewSuccessMessage();
	}

	macro checkinPG {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		AssertClick(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "${dmDocumentTitle}");

		AssertTextEquals(
			locator1 = "Message#CHECKOUT_SUCCESS",
			value1 = "You now have a lock on this document. No one else can edit this document until you unlock it. This lock will automatically expire in 1 day.");

		AssertClick(
			locator1 = "Button#CHECKIN",
			value1 = "Checkin");

		if (IsElementPresent(locator1 = "DocumentsAndMedia#CHECKIN_DIALOG_TITLE")) {
			if ("${revision}" == "Major") {
				Click(locator1 = "Radio#MAJOR_VERSION");
			}
			else if ("${revision}" == "Minor") {
				Click(locator1 = "Radio#MINOR_VERSION");
			}

			if (isSet(changeLog)) {
				Type(
					locator1 = "TextArea#CHANGE_LOG",
					value1 = "${changeLog}");
			}

			Click(locator1 = "Button#SAVE");
		}

		Alert.viewSuccessMessage();
	}

	macro checkoutCP {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		if (isSet(editStatus)) {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Edit",
				rowEntry = "${dmDocumentTitle}");

			PortletEntry.checkOut();
		}
		else {
			Click(locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Checkout");

			Alert.viewSuccessMessage();

			AssertClick(
				locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
				value1 = "${dmDocumentTitle}");
		}

		if ("${dmRepositoryName}" == "true") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#CHECKOUT_SUCCESS",
				value1 = "You now have an indefinite lock on this document. No one else can edit this document until you unlock it. This lock will never expire.");
		}
		else if (isSet(editStatus)) {
			AssertClick(
				locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
				value1 = "${dmDocumentTitle}");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#CHECKOUT_SUCCESS",
				value1 = "You now have a lock on this document. No one else can edit this document until you unlock it. This lock will automatically expire in 1 day.");
		}
		else {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#CHECKOUT_SUCCESS",
				value1 = "You now have a lock on this document. No one else can edit this document until you unlock it. This lock will automatically expire in 1 day.");
		}
	}

	macro checkoutPG {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		AssertClick(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "${dmDocumentTitle}");

		AssertClick(
			locator1 = "Button#CHECKOUT",
			value1 = "Checkout");

		Alert.viewSuccessMessage();

		AssertTextEquals(
			locator1 = "Message#CHECKOUT_SUCCESS",
			value1 = "You now have a lock on this document. No one else can edit this document until you unlock it. This lock will automatically expire in 1 day.");
	}

	macro configureCacheControl {
		if (isSet(systemSettingsInstanceScope)) {
			DMNavigator.openToConfigInSystemSettings(portlet = "Cache Control");
		}
		else {
			DMNavigator.openToConfigInInstanceSettings(portlet = "Cache Control");
		}

		if (isSet(cacheControl)) {
			AssertTextEquals(
				key_fieldName = "cacheControl",
				locator1 = "FormFields#HELP_TEXT",
				value1 = "Set the cache control policy for documents with view permissions for guests.");

			Click(locator1 = "Dropdown#TRIGGER");

			DropdownMenuItem.click(menuItem = "${cacheControl}");

			AssertTextEquals(
				locator1 = "Dropdown#SELECTED_VALUE",
				value1 = "${cacheControl}");
		}

		if (isSet(maxAge)) {
			AssertTextEquals(
				key_fieldName = "maxAge",
				locator1 = "FormFields#HELP_TEXT",
				value1 = "Set the number of seconds after a response is generated in which a response will be considered fresh.");

			Type(
				key_text = "Max Age",
				locator1 = "TextInput#ANY",
				value1 = "${maxAge}");
		}

		if (isSet(uncacheableMimeTypes)) {
			AssertTextEquals(
				key_fieldName = "notCacheableMimeTypes",
				locator1 = "FormFields#HELP_TEXT",
				value1 = "Set a list of mime types that will be uncacheable.");

			var count = "1";

			for (var uncacheableMimeType : list "${uncacheableMimeTypes}") {
				if ("${count}" != "1") {
					Click(locator1 = "Icon#PLUS_LAST");
				}

				Type(
					key_position = "${count}",
					locator1 = "DDMField#CUSTOM_TEXT_BOX",
					value1 = "${uncacheableMimeType}");

				var count = ${count} + 1;
			}
		}

		SystemSettings.saveConfiguration();
	}

	macro configureDocumentEmailSenderInfo {
		Portlet.gotoPortletOptions(portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		Click(
			key_navTab = "Email From",
			locator1 = "DocumentsAndMediaConfiguration#CONFIGURATION_NAV_ITEM");

		if (isSet(senderName)) {
			Type(
				key_text = "Name",
				locator1 = "TextInput#ANY",
				value1 = "${senderName}");
		}

		if (isSet(senderEmail)) {
			Type(
				key_text = "Address",
				locator1 = "TextInput#ANY",
				value1 = "${senderEmail}");
		}

		SelectFrame(value1 = "relative=top");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		if (isSet(cancel)) {
			Button.clickCancel();
		}
		else {
			PortletEntry.save();
		}
	}

	macro configureDocumentEmailTemplate {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "${siteURLKey}");

		Click(locator1 = "Portlet#OPTIONS_ICON");

		MenuItem.click(menuItem = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		AssertClick(
			key_navTab = "${navTab}",
			locator1 = "DocumentsAndMediaConfiguration#CONFIGURATION_NAV_ITEM",
			value1 = "${navTab}");

		if (isSet(bodyContent)) {
			SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME");

			Type(
				locator1 = "CKEditor#BODY",
				value1 = "${bodyContent}");

			SelectFrame(value1 = "relative=top");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");
		}

		PortletEntry.save();
	}

	macro deleteCP {
		if (isSet(recycleBinDisabled)) {
			LexiconEntry.delete(rowEntry = "${dmDocumentTitle}");
		}
		else if (isSet(deleteAll)) {
			PortletEntry.selectAll();

			Button.click(button = "Select All");

			AssertTextEquals(
				locator1 = "ManagementBar#NAVBAR_TEXT",
				value1 = "All Selected");

			Click(locator1 = "Icon#DELETE");

			Alert.viewSuccessMessage();
		}
		else {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Delete",
				rowEntry = "${dmDocumentTitle}");

			Alert.viewSuccessMessage();
		}
	}

	macro deletePG {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		AssertClick(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "${dmDocumentTitle}");

		DMDocument.viewDocumentTitleCmdPG(dmDocumentTitle = "${dmDocumentTitle}");

		AssertClick(
			locator1 = "Button#MOVE_TO_RECYCLE_BIN",
			value1 = "Delete");

		Alert.viewSuccessMessage();
	}

	macro deletePGViaMG {
		Click(
			key_rowEntry = "${mgDocumentTitle}",
			locator1 = "Icon#ROW_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Delete");

		VerifyElementPresent(locator1 = "Message#SUCCESS");

		AssertElementNotPresent(
			key_mgDocumentTitle = "${mgDocumentTitle}",
			locator1 = "MediaGallery#IMAGE_TITLE");
	}

	macro deleteVersion {
		DMDocument.expandInfo();

		DMNavigator.gotoDocumentVersion();

		var key_dmDocumentVersionNumber = "Version ${dmDocumentVersionNumber}";

		Click(locator1 = "DocumentsAndMedia#DOCUMENT_VERSION_VERTICAL_ELLIPSIS");

		MenuItem.clickNoError(menuItem = "Delete Version");

		AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

		Alert.viewSuccessMessage();
	}

	macro deleteViaActionsPG {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		AssertTextEquals(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "${dmDocumentTitle}");

		Check(locator1 = "DocumentsAndMedia#ICON_DOCUMENT_CHECKBOX");

		Click(locator1 = "Icon#MOVE_TO_RECYCLE_BIN");

		VerifyElementPresent(locator1 = "Message#SUCCESS");
	}

	macro downloadCP {
		Click.waitForMenuToggleJSClick(
			key_rowEntry = "${dmDocumentTitle}",
			locator1 = "Icon#ROW_VERTICAL_ELLIPSIS");

		AssertClick.assertPartialTextClickAt(
			locator1 = "MenuItem#DOWNLOAD",
			value1 = "Download");

		DownloadTempFile();
	}

	macro downloadMultipleCP {
		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		for (var dmDocumentTitle : list "${dmDocumentTitleList}") {
			Check(
				key_dmDocumentTitle = "${dmDocumentTitle}",
				locator1 = "DocumentsAndMedia#ICON_DOCUMENT_CHECKBOX");
		}

		Click(
			key_text = "download",
			locator1 = "ManagementBar#ANY_ICON");

		DownloadTempFile();
	}

	macro downloadPG {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		AssertClick(
			locator1 = "DocumentsAndMedia#PAGE_DOCUMENT_TITLE",
			value1 = "${dmDocumentTitle}");

		DMDocument.expandInfo();

		AssertClick.assertPartialTextClickAt(
			locator1 = "Button#DOWNLOAD_SIDEBAR",
			value1 = "Download");
	}

	macro downloadWithDirectoryIndexing {
		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteURLKey}/");

		AssertClick(
			key_text = "${dmDocumentTitle}",
			locator1 = "Link#ANY",
			value1 = "${dmDocumentTitle}");

		DownloadTempFile();
	}

	macro editCategoryTags {
		SelectFrame(value1 = "relative=top");

		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "Edit Categories");

		if ("${multipleDocuments}" == "true") {
			AssertTextEquals.assertPartialText(
				locator1 = "Modal#BODY",
				value1 = "You are editing the common categories for ${itemNumber} items. Select edit or replace current categories.");

			Click(locator1 = "Modal#BODY");

			if ("${editAction}" == "Append") {
				FormFields.selectRadioOption(
					fieldName = "add",
					radioOption = "Add");
			}
			else if ("${editAction}" == "Replace") {
				FormFields.selectRadioOption(
					fieldName = "replace",
					radioOption = "Replace");
			}
		}
		else {
			AssertTextEquals.assertPartialText(
				locator1 = "Modal#BODY",
				value1 = "You are editing the categories for the selected item.");
		}

		for (var categoryName : list "${categoryNameList}") {
			Type(
				locator1 = "DocumentsAndMedia#EDIT_TAGS_FIELD",
				value1 = "${categoryName}");

			KeyPress(
				locator1 = "DocumentsAndMedia#EDIT_TAGS_FIELD",
				value1 = "\RETURN");
		}

		Button.clickSave();

		SelectFrame(value1 = "relative=top");

		Alert.viewSuccessMessageText(successMessage = "Changes Saved");
	}

	macro editCmd {
		if (isSet(dmDocumentFileEdit)) {
			UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
				locator1 = "TextInput#FILE",
				value1 = "${dmDocumentFileEdit}");
		}

		if (isSet(dmDocumentTitleEdit)) {
			PortletEntry.inputTitle(title = "${dmDocumentTitleEdit}");
		}

		if (isSet(dmDocumentDescriptionEdit)) {
			PortletEntry.inputDescription(description = "${dmDocumentDescriptionEdit}");
		}

		if (isSet(dmDocumentFileNameEdit)) {
			PortletEntry.inputText(
				fieldLabel = "File Name",
				text = "${dmDocumentFileNameEdit}");

			AssertTextEquals(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "Warning: Changing the filename will affect existing links to this document.");
		}

		if (isSet(dmDocumentTypeEdit)) {
			Select(
				key_selectFieldLabel = "Document Type",
				locator1 = "Select#ANY",
				value1 = "${dmDocumentTypeEdit}");
		}
	}

	macro editCmdPG {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		AssertClick(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "${dmDocumentTitle}");

		if ("${checkedOut}" == "true") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_2",
				value1 = "You cannot modify this document because it was locked by ${userName}");
		}
		else {
			AssertClick(
				locator1 = "Button#EDIT",
				value1 = "Edit");
		}

		if (isSet(dmDocumentFileEdit)) {
			UploadCommonFile(
				locator1 = "TextInput#FILE",
				value1 = "${dmDocumentFileEdit}");
		}

		if (isSet(dmDocumentTitleEdit)) {
			Type(
				locator1 = "TextInput#TITLE",
				value1 = "${dmDocumentTitleEdit}");

			if (isSet(checkFileNameText)) {
				var fileNameText = selenium.getElementValue("//div[label[contains(.,'File Name')]]//input[@type='text']");

				if ("${dmDocumentTitleEdit}" == "${fileNameText}") {
					fail("FAIL!");
				}
			}
		}

		if (isSet(dmDocumentFileNameEdit)) {
			PortletEntry.inputText(
				fieldLabel = "File Name",
				text = "${dmDocumentFileNameEdit}");

			if (isSet(checkTitleText)) {
				var titleText = selenium.getElementValue("TextInput#TITLE");

				if ("${dmDocumentFileNameEdit}" == "${titleText}") {
					fail("FAIL!");
				}
			}
		}

		if (isSet(dmDocumentDescriptionEdit)) {
			PortletEntry.inputDescription(description = "${dmDocumentDescriptionEdit}");
		}

		if (isSet(dmDocumentTagName)) {
			Panel.expandPanel(panel = "Categorization");

			Type(
				locator1 = "AssetCategorization#TAGS_FIELD",
				value1 = "${dmDocumentTagName}");
		}

		if (isSet(revision)) {
			if ("${revision}" == "Major") {
				Click(locator1 = "DocumentsAndMediaEditDocument#MAJOR_REVISION_BUTTON");
			}
			else {
				Click(locator1 = "DocumentsAndMediaEditDocument#MINOR_REVISION_BUTTON");
			}
		}

		if (isSet(changeLog)) {
			Type(
				locator1 = "TextArea#CHANGE_LOG",
				value1 = "${changeLog}");
		}
	}

	macro editCP {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "${dmDocumentTitle}");

		DMDocument.editCmd(
			dmDocumentDescriptionEdit = "${dmDocumentDescriptionEdit}",
			dmDocumentFileEdit = "${dmDocumentFileEdit}",
			dmDocumentFileNameEdit = "${dmDocumentFileNameEdit}",
			dmDocumentTitleEdit = "${dmDocumentTitleEdit}",
			dmDocumentTypeEdit = "${dmDocumentTypeEdit}");

		if (isSet(versioning)) {
			Panel.expandPanel(panel = "Versioning");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Customize the Version Number Increment and Describe My Changes",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			if ("${revision}" == "Major") {
				Click(locator1 = "Radio#MAJOR_VERSION");
			}
			else if ("${revision}" == "Minor") {
				Click(locator1 = "Radio#MINOR_VERSION");
			}
			else if ("${revision}" == "Current") {
				Click(locator1 = "Radio#CURRENT_VERSION");
			}

			if (isSet(versionNotes)) {
				Type(
					key_fieldLabel = "Version Notes",
					locator1 = "TextInput#GENERIC_TEXT_INPUT",
					value1 = "${versionNotes}");
			}
		}

		if (isSet(displayPageTemplateDisabled)) {
			Portlet.waitForForm();

			var key_panel = "Display Page";

			AssertElementNotPresent(locator1 = "Panel#PANEL");
		}

		if (isSet(customFieldTextEdit)) {
			Panel.expandPanel(panel = "Custom Fields");

			Type(
				locator1 = "TextInput#CUSTOM_FIELD",
				value1 = "${customFieldTextEdit}");
		}

		if (isSet(imageFieldEdit)) {
			if (isSet(fieldFieldLabel)) {
				var key_fieldFieldLabel = "${fieldFieldLabel}";
			}
			else {
				var key_fieldFieldLabel = "Image";
			}

			Click(
				fieldLabel = "${key_fieldFieldLabel}",
				locator1 = "Button#BUTTON_LABEL",
				text = "Select");

			if ("${navTab}" == "Documents and Media") {
				if (isSet(imageFileNameEdit)) {
					ItemSelector.selectDMImage(
						imageFileName = "${imageFieldEdit}",
						navTab = "${navTab}");
				}
				else {
					ItemSelector.uploadFile(
						navTab = "${navTab}",
						uploadFileName = "${imageFieldEdit}");
				}
			}

			if (isSet(imageDescription)) {
				Type(
					locator1 = "TextInput#IMAGE_DESCRIPTION",
					value1 = "${imageDescriptionEdit}");
			}
		}

		if (isSet(checkedOut)) {
			Click(locator1 = "Button#SAVE");
		}
		else {
			Click(locator1 = "Button#PUBLISH");
		}

		Alert.viewSuccessMessage();
	}

	macro editDMShortcutCP {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "${dmDocumentTitle}");

		Click(locator1 = "DocumentsAndMediaAddShortcut#SELECT_DOCUMENT_BUTTON");

		var key_siteName = "${siteName}";

		SelectFrame(locator1 = "ItemSelector#ITEM_SELECTOR_IFRAME");

		AssertClick(
			key_breadcrumbName = "Sites and Libraries",
			locator1 = "Breadcrumb#BREADCRUMB_ENTRY",
			value1 = "Sites and Libraries");

		if (isSet(siteName)) {
			LexiconCard.clickCardTitleLink(card = "${siteName}");
		}

		if (isSet(depotName)) {
			AssertClick(
				key_groupTab = "Asset Library",
				locator1 = "ItemSelector#NAVIGATION_GROUP_TAB",
				value1 = "Asset Library");

			LexiconCard.clickCard(card = "${depotName}");
		}

		LexiconCard.clickCard(card = "${dmNewDocumentTitle}");

		SelectFrameTop(value1 = "relative=top");

		PortletEntry.save();
	}

	macro editDocument {
		UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
			locator1 = "TextInput#FILE",
			value1 = "${dmDocumentFile}");

		AssertElementPresent(locator1 = "TextInput#FILE_PRESENT");

		if (isSet(useCurrentTitle)) {
			echo("Use the title automatically added after uploading a file.");
		}
		else {
			PortletEntry.inputTitle(title = "${dmDocumentTitle}");
		}

		if (isSet(dmDocumentDescription)) {
			PortletEntry.inputDescription(description = "${dmDocumentDescription}");
		}

		if (isSet(viewableBy)) {
			Panel.expandPanel(panel = "Permissions");

			Select(
				locator1 = "Select#PERMISSIONS",
				value1 = "${viewableBy}");
		}
	}

	macro editPG {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		if (isSet(siteURLKey)) {
			DMNavigator.openToEditEntryInSite(
				dmDocumentTitle = "${dmDocumentTitle}",
				folderName = "${folderName}",
				groupName = "${groupName}",
				siteURLKey = "${siteURLKey}");
		}
		else {
			AssertClick(
				locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
				value1 = "${dmDocumentTitle}");

			Click(locator1 = "Button#EDIT");
		}

		DMDocument.editCmd(
			dmDocumentDescriptionEdit = "${dmDocumentDescriptionEdit}",
			dmDocumentFileEdit = "${dmDocumentFileEdit}",
			dmDocumentFileNameEdit = "${dmDocumentFileNameEdit}",
			dmDocumentTitleEdit = "${dmDocumentTitleEdit}");

		PortletEntry.publish();
	}

	macro editPGViaAP {
		var key_assetTitle = "${assetTitle}";
		var key_portletName = "${portletName}";

		Click(locator1 = "AP#ASSET_ABSTRACT_EDIT");

		ScrollWebElementIntoView(locator1 = "Portlet#TITLE");

		MouseOver.mouseOverNotVisible(locator1 = "AP#ASSET_EDIT");

		Click.clickNoMouseOver(locator1 = "AP#ASSET_EDIT");

		if (isSet(dmDocumentTitleEdit)) {
			Type(
				locator1 = "TextInput#TITLE",
				value1 = "${dmDocumentTitleEdit}");
		}

		AssertClick(
			locator1 = "Button#PUBLISH",
			value1 = "Publish");

		SelectFrame(locator1 = "relative=top");
	}

	macro editPGViaMG {
		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Edit");

		PortletEntry.inputTitle(title = "${mgDocumentTitleEdit}");

		PortletEntry.inputDescription(description = "${mgDocumentDescriptionEdit}");

		PortletEntry.publish();

		AssertTextEquals(
			key_mgDocumentTitle = "${mgDocumentTitleEdit}",
			locator1 = "MediaGallery#IMAGE_TITLE",
			value1 = "${mgDocumentTitleEdit}");
	}

	macro editSavePG {
		DMDocument.editCmdPG(
			changeLog = "${changeLog}",
			checkedOut = "${checkedOut}",
			dmDocumentDescriptionEdit = "${dmDocumentDescriptionEdit}",
			dmDocumentFileEdit = "${dmDocumentFileEdit}",
			dmDocumentTagName = "${dmDocumentTagName}",
			dmDocumentTitle = "${dmDocumentTitle}",
			dmDocumentTitleEdit = "${dmDocumentTitleEdit}",
			revision = "${revision}",
			userName = "${userName}");

		AssertClick(
			locator1 = "Button#SAVE",
			value1 = "Save");

		Alert.viewSuccessMessage();
	}

	macro editTags {
		SelectFrame(value1 = "relative=top");

		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "Edit Tags");

		if ("${multipleDocuments}" == "true") {
			AssertTextEquals.assertPartialText(
				locator1 = "Modal#BODY",
				value1 = "You are editing the common tags for ${itemNumber} items. Select edit or replace current tags.");

			Click(locator1 = "Modal#BODY");

			if ("${editAction}" == "Append") {
				FormFields.selectRadioOption(
					fieldName = "add",
					radioOption = "Add");
			}
			else if ("${editAction}" == "Replace") {
				FormFields.selectRadioOption(
					fieldName = "replace",
					radioOption = "Replace");
			}
		}
		else {
			AssertTextEquals.assertPartialText(
				locator1 = "Modal#BODY",
				value1 = "You are editing the tags for the selected item.");
		}

		Type(
			locator1 = "DocumentsAndMedia#EDIT_TAGS_FIELD",
			value1 = "${tagName}");

		KeyPress(
			locator1 = "DocumentsAndMedia#EDIT_TAGS_FIELD",
			value1 = ",");

		Button.clickSave();

		SelectFrame(value1 = "relative=top");

		Alert.viewSuccessMessageText(successMessage = "Changes Saved");
	}

	macro enableActionsMenuOnPortlet {
		Portlet.gotoPortletOptions(
			portletName = "Documents and Media",
			portletOption = "Configuration");

		SelectFrame.selectFrameNoLoading(locator1 = "DocumentsAndMedia#CONFIGURATION_IFRAME");

		AssertElementPresent.pauseAssertVisible(locator1 = "Checkbox#SHOW_ACTIONS_CHECKBOX");

		Check(locator1 = "Checkbox#SHOW_ACTIONS_CHECKBOX");

		PortletEntry.save();

		IFrame.closeFrame();
	}

	macro enableDirectoryIndexing {
		DMNavigator.openToConfigInSiteSettings(
			portlet = "Documents and Media",
			siteURLKey = "${siteURLKey}");

		FormFields.enableSwitch(fieldName = "Enable Directory Indexing");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	macro expandInfo {
		WaitForPageLoad();

		if (IsElementPresent(locator1 = "Button#INFO")) {
			WaitForElementPresent(
				key_href = "infoPanel",
				locator1 = "DocumentsAndMedia#DOCUMENT_ANY_HREF");
		}

		if (IsElementNotPresent(locator1 = "DocumentsAndMedia#SIDEBAR_INFO_ACTIVE")) {
			ManagementBar.clickInfo();
		}

		// Sometimes the info panel doesn't load. If that happens then collapse then expand the panel again.

		while (IsElementNotPresent(locator1 = "DocumentsAndMedia#SIDEBAR_INFO_ACTIVE")) {
			Refresh();

			ManagementBar.clickInfo();
		}

		AssertVisible(locator1 = "DocumentsAndMedia#SIDEBAR_INFO_ACTIVE");
	}

	macro getDMLatestVersionURL {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "${siteURLKey}");

		if (isSet(dmFolderName)) {
			DMNavigator.gotoFolder(dmFolderName = "${dmFolderName}");
		}

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "${dmDocumentTitle}");

		DMDocument.expandInfo();

		var portalURL = PropsUtil.get("portal.url");
		var dmLatestVersionURL = selenium.getAttribute("//input[contains(@id,'urlInput')]@value");
		var dmDocumentURL = StringUtil.extractLast("${dmLatestVersionURL}", "${portalURL}");

		echo("## * Document URL: ${dmDocumentURL}");

		return "${dmDocumentURL}";
	}

	macro getFileResponseHeader {
		WaitForElementPresent(
			key_dmDocumentFileName = "${dmDocumentFileName}",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");

		var dmDocumentURL = selenium.getAttribute("//img[contains(@class,'preview-file-image') and contains(@src,'${dmDocumentFileName}')]@src");

		var curl = '''${dmDocumentURL} -I''';
		var responseHeader = JSONCurlUtil.post("${curl}");

		return "${responseHeader}";
	}

	macro getLatestVersionURL {
		var latestVersionURL = selenium.getAttribute("//input[contains(@id,'urlInput')]@value");

		return "${latestVersionURL}";

		echo("## * latestVersionURL: ${latestVersionURL}");
	}

	macro gotoEntry {
		Click(
			key_card = "${dmDocumentTitle}",
			locator1 = "Card#CARD_TITLE");
	}

	macro gotoMenuItemViaInfoPanel {
		DMDocument.expandInfo();

		Click(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS");

		if (isSet(menuItem)) {
			Click(
				key_menuItem = "${menuItem}",
				locator1 = "DocumentsAndMedia#SIDEBAR_MENU_ITEM");
		}
	}

	macro linkImage {
		ItemSelector.gotoItemSelectorViaAlloyEditor();

		ItemSelector.addImageFromURL(
			imageSourceURL = "${dmDocumentURL}",
			navTab = "${navTab}");

		AssertElementPresent(locator1 = "CKEditor#CONTENT_IMAGE_LINK_IMAGE");
	}

	macro moveAllToRecycleBinCP {
		WaitForPageLoad();

		PortletEntry.selectAll();

		Click(locator1 = "Icon#MOVE_TO_RECYCLE_BIN");

		Alert.viewSuccessMessage();

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no documents or media files in this folder.");
	}

	macro moveToFolderCP {
		if (isSet(selectAll)) {
			PortletEntry.selectAll();

			AssertClick(
				locator1 = "Button#SELECT_ALL",
				value1 = "Select All");

			Click(locator1 = "Icon#MOVE");
		}
		else {
			var key_dmDocumentTitle = "${dmDocumentTitle}";

			Click(locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Move");
		}

		SelectFrame(locator1 = "DocumentsAndMediaSelectFolder#SELECT_FOLDER_IFRAME");

		if ("${dmFolderName}" == "Home") {
			if (IsElementPresent(key_breadcrumbName = "Home", locator1 = "BreadcrumbPortlet#BREADCRUMB_FOLDER")) {
				AssertVisible(
					key_text = "Select This Folder",
					locator1 = "Button#ANY_DISABLED");

				AssertClick(
					key_breadcrumbName = "Home",
					locator1 = "BreadcrumbPortlet#BREADCRUMB_FOLDER",
					value1 = "Home");
			}

			var key_text = "Select This Folder";

			AssertClick(
				locator1 = "Button#ANY",
				value1 = "Select This Folder");
		}
		else {
			if (IsElementPresent(key_breadcrumbName = "Home", locator1 = "BreadcrumbPortlet#BREADCRUMB_FOLDER")) {
				AssertClick(
					key_breadcrumbName = "Home",
					locator1 = "BreadcrumbPortlet#BREADCRUMB_FOLDER",
					value1 = "Home");
			}

			var key_dmFolderName = "${dmFolderName}";

			AssertClick(
				locator1 = "DocumentsAndMedia#SELECT_FOLDER_BUTTON",
				value1 = "Select");
		}

		SelectFrame(locator1 = "relative=top");

		Alert.viewSuccessMessage();
	}

	macro moveToFolderPG {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		WaitForLiferayEvent.initializeLiferayEventLog();

		if (isSet(bulkSelection)) {
			AssertTextEquals(
				locator1 = "ManagementBar#NAVBAR_TEXT",
				value1 = "${bulkSelection}");

			Click(locator1 = "Icon#MOVE");
		}
		else {
			Click(locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Move");
		}

		SelectFrame(locator1 = "IFrame#SELECT_FOLDER");

		var key_dmFolderName = "${dmFolderName}";

		if (IsElementPresent(key_breadcrumbName = "Home", locator1 = "BreadcrumbPortlet#BREADCRUMB_FOLDER")) {
			AssertClick(
				key_breadcrumbName = "Home",
				locator1 = "BreadcrumbPortlet#BREADCRUMB_FOLDER",
				value1 = "Home");
		}

		AssertClick(
			locator1 = "DocumentsAndMediaSelectFolder#SELECT_BUTTON",
			value1 = "Select");

		SelectFrameTop();

		if (isSet(dmDuplicateDocument)) {
			Alert.viewRequestFailedToComplete();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_MOVE_DUPLICATE_CONTENT",
				value1 = "The folder you selected already has an entry with this name. Please select a different folder.");
		}
		else {
			Alert.viewSuccessMessage();
		}
	}

	macro moveToRecycleBinCP {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		AssertElementPresent(locator1 = "DocumentsAndMedia#ICON_DOCUMENT");

		DMDocument.viewCardTitle(dmDocumentTitle = "${dmDocumentTitle}");

		MouseOver(locator1 = "DocumentsAndMedia#ICON_DOCUMENT");

		LexiconCard.checkCardCheckbox(card = "${dmDocumentTitle}");

		Click(locator1 = "Icon#MOVE_TO_RECYCLE_BIN");

		VerifyElementPresent(locator1 = "Message#SUCCESS");

		if (IsElementNotPresent(locator1 = "DocumentsAndMedia#ICON_DOCUMENT_GENERIC")) {
			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "There are no documents or media files in this folder.");
		}
	}

	macro moveToSubFolderCP {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		Click(locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Move");

		SelectFrame(locator1 = "DocumentsAndMediaSelectFolder#SELECT_FOLDER_IFRAME");

		var key_dmFolderName = "${dmSubFolderName}";

		AssertTextEquals(
			locator1 = "DocumentsAndMediaSelectFolder#FOLDER",
			value1 = "${dmSubFolderName}");

		AssertClick(
			locator1 = "DocumentsAndMediaSelectFolder#SELECT_BUTTON",
			value1 = "Select");

		SelectFrame(locator1 = "relative=top");

		Alert.viewSuccessMessage();
	}

	macro navigateHomeViaDocumentViewPG {
		var key_breadcrumbName = "Home";

		AssertClick(
			locator1 = "BreadcrumbPortlet#BREADCRUMB_PAGE",
			value1 = "Home");
	}

	macro openDocumentsAndMediaAdmin {
		Navigator.openWithAppendToBaseURL(urlAppend = "group/${siteURLKey}/~/control_panel/manage?p_p_id=com_liferay_document_library_web_portlet_DLAdminPortlet");
	}

	macro previewImage {
		while (IsElementNotPresent(key_dmDocumentFileName = "${dmDocumentFileName}", locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW")) {
			Refresh();
		}
	}

	macro publishExpiredDocument {
		AssertTextEquals(
			locator1 = "TextInput#TITLE",
			value1 = "${dmDocumentTitle}");

		AssertNotChecked.assertNotCheckedNotVisible(
			checkboxName = "Never Expire",
			locator1 = "Checkbox#ANY_CHECKBOX");

		if (isSet(disableExpirationDate)) {
			Check(
				checkboxName = "Never Expire",
				locator1 = "Checkbox#ANY_CHECKBOX");

			AssertElementPresent(locator1 = "TextInput#EXPIRATION_DATE_DISABLED");

			AssertElementPresent(locator1 = "TextInput#EXPIRATION_DATE_TIME_DISABLED");
		}

		Button.clickPublish();

		Alert.viewSuccessMessage();
	}

	macro removeCategories {
		SelectFrame(value1 = "relative=top");

		for (var categoryName : list "${categoriesNameList}") {
			Click(
				key_categoryName = "${categoryName}",
				locator1 = "Icon#REMOVE_CATEGORY");
		}

		Button.clickSave();

		SelectFrame(value1 = "relative=top");

		Alert.viewSuccessMessageText(successMessage = "Changes Saved");
	}

	macro removeTag {
		if (IsElementPresent(locator1 = "Button#EDIT")) {
			Click(locator1 = "Button#EDIT");
		}
		else {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Edit",
				rowEntry = "DM Document Title");
		}

		Panel.expandPanel(panel = "Categorization");

		var key_removeTag = "${removeTag}";

		Click(
			locator1 = "Icon#REMOVE_TAG",
			value1 = "${removeTag}");
	}

	macro revertPG {
		DMNavigator.gotoDocumentVersion();

		var key_dmDocumentVersionNumber = "${dmDocumentVersionNumber}";
		var documentCreationDate = DateUtil.getFormattedCurrentDate("M/d/yy");

		AssertTextEquals.assertPartialText(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_VERSIONS_CREATION_DATE",
			value1 = "${documentCreationDate}",
			versionNumber = "${key_dmDocumentVersionNumber}");

		Click(locator1 = "DocumentsAndMedia#DOCUMENT_VERSION_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Revert");

		Alert.viewSuccessMessage();
	}

	macro reviewDocument {
		AssertTextEquals(
			locator1 = "TextInput#TITLE",
			value1 = "${dmDocumentTitle}");

		AssertNotChecked.assertNotCheckedNotVisible(
			checkboxName = "Never Review",
			locator1 = "Checkbox#ANY_CHECKBOX");

		if (isSet(disableReviewDate)) {
			Check(
				checkboxName = "Never Review",
				locator1 = "Checkbox#ANY_CHECKBOX");

			AssertElementPresent(locator1 = "TextInput#REVIEW_DATE_DISABLED");

			AssertElementPresent(locator1 = "TextInput#REVIEW_DATE_TIME_DISABLED");
		}

		Button.clickPublish();

		Alert.viewSuccessMessage();
	}

	macro saveAndCheckinEditedDocumentPG {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "${dmDocumentTitle}");

		if (isSet(dmDocumentDescriptionEdit)) {
			PortletEntry.inputDescription(description = "${dmDocumentDescriptionEdit}");
		}

		AssertClick(
			locator1 = "Button#SAVE_AND_CHECKIN",
			value1 = "Save and Check In");

		if (IsElementPresent(locator1 = "DocumentsAndMedia#CHECKIN_DIALOG_TITLE")) {
			if ("${revision}" == "Major Version") {
				Click(locator1 = "Radio#MAJOR_VERSION");
			}
			else if ("${revision}" == "Minor Version") {
				Click(locator1 = "Radio#MINOR_VERSION");
			}

			if (isSet(changeLog)) {
				Type(
					locator1 = "TextArea#CHANGE_LOG",
					value1 = "${changeLog}");
			}

			Click(locator1 = "Button#SAVE");

			Alert.viewSuccessMessage();
		}
	}

	macro selectDocuments {
		for (var key_dmDocumentTitle : list "${dmDocumentTitle}") {
			Check(locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_CHECKBOX");
		}
	}

	macro setExpirationDate {
		Panel.expandPanel(panel = "Expiration Date");

		if (isSet(enableExpirationDate)) {
			Uncheck(
				checkboxName = "Never Expire",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		var expirationDate = DateUtil.getFormattedCurrentDate("MM/dd/yyyy");

		echo("## * reviewDate: ${expirationDate}");

		if ("${invalidExpirationDate}" == "true") {
			var expirationDate = DateUtil.getDateOffsetByYears("-1", "MM/dd/yyyy");
		}

		var expirationDateTime = DateUtil.getDateOffsetByMinutes("${increaseMinutes}", "hh:mm a");

		echo("## * expirationDateTime: ${expirationDateTime}");

		Type(
			locator1 = "TextInput#EXPIRATION_DATE",
			value1 = "${expirationDate}");

		Type(
			locator1 = "TextInput#EXPIRATION_DATE_TIME",
			value1 = "${expirationDateTime}");

		ScrollWebElementIntoView(locator1 = "Button#PUBLISH");

		takeScreenshot();

		Button.clickPublish();

		if ("${invalidExpirationDate}" == "true") {
			AssertTextEquals.assertPartialText(
				key_alertMessage = "Please enter a valid expiration date.",
				locator1 = "Message#ERROR_ENTER_A_VALID_VALUE",
				value1 = "Please enter a valid expiration date.");
		}
		else {
			Alert.viewSuccessMessage();
		}
	}

	macro setReviewDate {
		Panel.expandPanel(panel = "Expiration Date");

		if (isSet(enableReviewDate)) {
			Uncheck(
				checkboxName = "Never Review",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		var reviewDate = DateUtil.getFormattedCurrentDate("MM/dd/yyyy");

		echo("## * reviewDate: ${reviewDate}");

		var reviewDateTime = DateUtil.getDateOffsetByMinutes("${increaseMinutes}", "hh:mm a");

		echo("## * reviewDateTime: ${reviewDateTime}");

		Type(
			locator1 = "TextInput#REVIEW_DATE",
			value1 = "${reviewDate}");

		Type(
			locator1 = "TextInput#REVIEW_DATE_TIME",
			value1 = "${reviewDateTime}");

		ScrollWebElementIntoView(locator1 = "Button#PUBLISH");

		takeScreenshot();

		Button.clickPublish();

		Alert.viewSuccessMessage();
	}

	macro setRootFolder {
		Portlet.gotoPortletOptions(portletOption = "Configuration");

		SelectFrame(locator1 = "DocumentsAndMedia#CONFIGURATION_IFRAME");

		Panel.expandPanel(panel = "Folders Listing");

		AssertClick(
			locator1 = "Button#SELECT",
			value1 = "Select");

		SelectFrame.selectSecondFrame(
			key_title = "Select Folder",
			locator1 = "IFrame#MODAL_ANY");

		if (isSet(depotName)) {
			AssertClick(
				key_breadcrumbName = "Sites and Libraries",
				locator1 = "Breadcrumb#BREADCRUMB_ENTRY",
				value1 = "Sites and Libraries");

			AssertClick(
				key_groupTab = "Asset Library",
				locator1 = "ItemSelector#NAVIGATION_GROUP_TAB",
				value1 = "Asset Library");

			LexiconCard.clickCard(card = "${depotName}");
		}

		if (isSet(selectRootFolder)) {
			AssertClick(
				key_text = "Select This Folder",
				locator1 = "Button#ANY",
				value1 = "Select This Folder");
		}
		else {
			if (isSet(selectBreadcrumb)) {
				AssertClick(
					key_breadcrumbName = "${breadcrumbName}",
					locator1 = "BreadcrumbPortlet#BREADCRUMB_FOLDER",
					value1 = "${breadcrumbName}");
			}

			AssertClick(
				key_dmFolderName = "${dmRootFolderName}",
				locator1 = "DocumentsAndMedia#SELECT_FOLDER_BUTTON",
				value1 = "Select");
		}

		SelectFrame(locator1 = "relative=top");

		SelectFrame(locator1 = "DocumentsAndMedia#CONFIGURATION_IFRAME");

		PortletEntry.save();

		IFrame.closeFrame();
	}

	macro sharePG {
		IFrame.selectModalFrame();

		if (isSet(noAutocomplete)) {
			Type.sendKeys(
				locator1 = "Sharing#MODAL_INVITE_TO_COLLABORATE_INPUT",
				value1 = "${userEmailAddress},");
		}
		else {
			Type.sendKeys(
				locator1 = "Sharing#MODAL_INVITE_TO_COLLABORATE_INPUT",
				value1 = "${userEmailAddress}");

			Click(locator1 = "Sharing#MODAL_INVITE_TO_COLLABORATE_DROPDOWN");

			var key_userName = "${userName}";

			AssertElementPresent(locator1 = "Sharing#MODAL_INVITE_TO_COLLABORATE_TAG");
		}

		if (isSet(shareable)) {
			FormFields.enableCheckbox(fieldName = "shareable");
		}
		else {
			FormFields.disableCheckbox(fieldName = "shareable");
		}

		if ("${sharingPermissions}" == "Update") {
			FormFields.selectRadioOption(
				fieldName = "sharingEntryPermission",
				radioOption = "Update");
		}
		else if ("${sharingPermissions}" == "Comment") {
			FormFields.selectRadioOption(
				fieldName = "sharingEntryPermission",
				radioOption = "Comment");
		}
		else {
			FormFields.viewRadioValue(
				fieldName = "sharingEntryPermission",
				fieldValue = "View");
		}

		Button.clickShare();

		SelectFrame(value1 = "relative=top");

		Alert.viewSuccessMessageText(successMessage = "The item was shared successfully.");
	}

	macro shareWithNoSharingPermissionsUser {
		IFrame.selectModalFrame();

		Type(
			locator1 = "Sharing#MODAL_INVITE_TO_COLLABORATE_INPUT",
			value1 = "${userEmailAddress}");

		AssertElementNotPresent(locator1 = "Sharing#MODAL_INVITE_TO_COLLABORATE_DROPDOWN");

		KeyPress(
			locator1 = "Sharing#MODAL_INVITE_TO_COLLABORATE_INPUT",
			value1 = "\RETURN");

		if ("${sharingPermissions}" == "Update") {
			FormFields.selectRadioOption(
				fieldName = "sharingEntryPermission",
				radioOption = "Update");
		}
		else if ("${sharingPermissions}" == "Comment") {
			FormFields.selectRadioOption(
				fieldName = "sharingEntryPermission",
				radioOption = "Comment");
		}
		else {
			FormFields.viewRadioValue(
				fieldName = "sharingEntryPermission",
				fieldValue = "View");
		}

		Button.clickShare();

		SelectFrame(value1 = "relative=top");
	}

	macro tearDownCP {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		if (IsElementNotPresent(locator1 = "Message#EMPTY_INFO")) {
			Click.clickNoMouseOverNoWaitForVisible(locator1 = "DocumentsAndMedia#TOOLBAR_SELECT_ALL_CHECKBOX");

			Click(locator1 = "DocumentsAndMedia#TOOLBAR_ACTIONS");

			MenuItem.viewPresent(menuItem = "Delete");

			PortletEntry.clickMoveToRecycleBin();
		}

		JSONRecycleBin.emptyRecycleBin();
	}

	macro uncheckDocumentCheckboxCP {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		Uncheck(locator1 = "DocumentsAndMedia#ICON_DOCUMENT_CHECKBOX");
	}

	macro unselectDocuments {
		for (var key_dmDocumentTitle : list "${dmDocumentTitle}") {
			Uncheck(locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_CHECKBOX");
		}
	}

	macro updateCheckInterval {
		DMNavigator.openToConfigInSystemSettings(portlet = "Service");

		Type(
			key_text = "Check Interval",
			locator1 = "TextInput#ANY",
			value1 = "${fieldValue}");

		SystemSettings.saveConfiguration();
	}

	macro updateFileExtensions {
		DMNavigator.openToConfigInSystemSettings(portlet = "Service");

		ScrollWebElementIntoView(
			key_text = "fileExtensions",
			locator1 = "TextArea#ANY");

		if ("${indexNumber}" == "2") {
			Click(
				key_label = "Add Duplicate Field File Extensions",
				locator1 = "Button#DUPLICATE_SPECIFIC");

			Type(
				key_indexNumber = "${indexNumber}",
				key_label = "File Extensions",
				locator1 = "TextArea#ANY_LABELED_N",
				value1 = "${fieldValue}");
		}
		else {
			Type(
				key_text = "fileExtensions",
				locator1 = "TextArea#ANY",
				value1 = "${fieldValue}");
		}

		SystemSettings.saveConfiguration();
	}

	macro updateMaximumFileSize {
		if (isSet(instanceSettings)) {
			DMNavigator.openToConfigInInstanceSettings(portlet = "Documents and Media Size Limits");
		}
		else if (isSet(siteSettings)) {
			DMNavigator.openToConfigInSiteSettings(
				portlet = "Documents and Media Size Limits",
				siteURLKey = "${siteURLKey}");
		}
		else {
			DMNavigator.openToConfigInSystemSettings(portlet = "Documents and Media Size Limits");
		}

		Type(
			key_fieldLabel = "Maximum File Size",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldValue}");

		SystemSettings.saveConfiguration();
	}

	macro updateMaximumVersions {
		DMNavigator.openToConfigInSystemSettings(portlet = "Service");

		Type(
			key_fieldLabel = "Maximum Number Of Versions",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${fieldValue}");

		SystemSettings.saveConfiguration();
	}

	macro updateMimeTypeSizeLimit {
		if (isSet(instanceSettings)) {
			DMNavigator.openToConfigInInstanceSettings(portlet = "Documents and Media Size Limits");
		}
		else if (isSet(siteSettings)) {
			DMNavigator.openToConfigInSiteSettings(
				portlet = "Documents and Media Size Limits",
				siteURLKey = "${siteURLKey}");
		}
		else {
			DMNavigator.openToConfigInSystemSettings(portlet = "Documents and Media Size Limits");
		}

		if ("${indexNumber}" == "2") {
			Click(locator1 = "Button#DUPLICATE");

			Type(
				key_indexNumber = "${indexNumber}",
				key_label = "Mime Type Size Limit",
				locator1 = "TextArea#ANY_LABELED_N",
				value1 = "${fieldValue}");
		}
		else {
			Type(
				key_label = "Mime Type Size Limit",
				locator1 = "TextArea#ANY_LABELED",
				value1 = "${fieldValue}");
		}

		SystemSettings.saveConfiguration();
	}

	macro viewAllPG {
		DMDocument.viewPG(
			categoryName = "${categoryName}",
			dmDocumentDescription = "${dmDocumentDescription}",
			dmDocumentFileName = "${dmDocumentFileName}",
			dmDocumentFileType = "${dmDocumentFileType}",
			dmDocumentTitle = "${dmDocumentTitle}",
			dmDocumentType = "${dmDocumentType}",
			tagName = "${tagName}",
			tagNameList = "${tagNameList}");

		AssertElementPresent(locator1 = "Icon#ANGLE_LEFT_BACK");

		DMDocument.viewDocumentToolbarCmdPG();

		DMDocument.viewDocumentAuthorCmdPG(dmDocumentAuthor = "${dmDocumentAuthor}");

		if (isSet(commentBody)) {
			var key_entryComment = "${commentBody}";

			AssertTextEquals(
				locator1 = "Comments#COMMENT_BODY_SPECIFIC",
				value1 = "${commentBody}");
		}
		else {
			DMDocument.viewDocumentNoCommentsCmdPG();
		}

		DMDocument.viewDocumentVersionNumberCmdPG(dmDocumentVersionNumber = "${dmDocumentVersionNumber}");

		DMDocument.viewDocumentDetailsCmdPG();
	}

	macro viewAudioPreview {
		AssertElementPresent(
			key_audioName = "${audioName}",
			locator1 = "DocumentsAndMediaDocument#AUDIO_PREVIEW");
	}

	macro viewAudioPreviewGeneratingInfo {
		if (isSet(disabled)) {
			AssertTextEquals.assertPartialText(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_EMPTY_STATE_PREVIEW",
				value1 = "No preview available");
		}
		else {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#INFO",
				value1 = "Generating preview will take a few minutes.");

			while (IsElementPresent(locator1 = "Message#INFO")) {
				Pause(locator1 = "1000");

				Refresh();
			}
		}
	}

	macro viewCacheControlConfigurationInConsole {
		if (isSet(uncacheableMimeType)) {
			if (contains("${responseHeader}", "Cache-Control: private, no-cache, no-store, must-revalidate")) {
				echo("This file can not be cached");
			}
			else {
				fail("The cache control setting is incorrect");
			}
		}
		else {
			var cacheControlAttribute = "Cache-Control: ${cacheControl}, max-age: ${maxAge}";

			if (contains("${responseHeader}", "${cacheControlAttribute}")) {
				echo("The cache control setting is correct");
			}
			else {
				fail("The cache control setting is incorrect");
			}
		}
	}

	macro viewCannotAddRepository {
		Portlet.clickPortletPlusIconPG(portletName = "Documents and Media");

		AssertElementNotPresent(locator1 = "HOME_MENULIST_ADD_REPOSITORY");
	}

	macro viewCardTitle {
		LexiconCard.viewCardTitle(card = "${dmDocumentTitle}");
	}

	macro viewCategories {
		Panel.expandPanel(panel = "Categorization");

		for (var categoryName : list "${categoryNameList}") {
			var key_categoryName = "${categoryName}";

			AssertTextEquals(
				locator1 = "AssetCategorization#CATEGORY",
				value1 = "${categoryName}");
		}
	}

	macro viewCategoriesInfo {
		DMDocument.expandInfo();

		if (isSet(categoryNameList)) {
			for (var categoryName : list "${categoryNameList}") {
				AssertTextEquals(
					key_categoryName = "${categoryName}",
					locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_CATEGORIES",
					value1 = "${categoryName}");
			}
		}
		else {
			AssertTextEquals(
				key_categoryName = "${categoryName}",
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_CATEGORIES",
				value1 = "${categoryName}");
		}
	}

	macro viewCheckedinCP {
		DMDocument.expandInfo();

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_VERSION",
			value1 = "VERSION ${dmDocumentVersionNumber}");

		AssertElementNotPresent(locator1 = "Message#INFO");

		if ("${dmRepositoryName}" == "true") {
			AssertTextNotPresent(value1 = "You now have an indefinite lock on this document. No one else can edit this document until you unlock it. This lock will never expire.");
		}
		else {
			AssertTextNotPresent(value1 = "You now have a lock on this document. No one else can edit this document until you unlock it. This lock will automatically expire in 1 day.");
		}
	}

	macro viewCheckedoutCP {
		if ("${dmRepositoryName}" == "true") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#INFO",
				value1 = "You now have an indefinite lock on this document. No one else can edit this document until you unlock it. This lock will never expire.");
		}
		else {
			AssertVisible(locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_VERSION_LOCKED");

			VerifyElementPresent(locator1 = "Message#SUCCESS");
		}
	}

	macro viewCheckedoutPG {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		AssertElementPresent(locator1 = "DocumentsAndMedia#ICON_DOCUMENT_ICON_LOCKED");

		AssertTextEquals(
			locator1 = "DocumentsAndMedia#ICON_DOCUMENT_WORKFLOW_STATUS",
			value1 = "${status}");

		AssertClick(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "${dmDocumentTitle}");

		AssertElementPresent(locator1 = "Message#CHECKOUT_SUCCESS");

		AssertClick(
			locator1 = "Button#EDIT",
			value1 = "Edit");

		VerifyElementPresent(locator1 = "Message#SUCCESS");
	}

	macro viewCP {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_TITLE",
			value1 = "${dmDocumentTitle}");

		if (isSet(previewImage)) {
			AssertElementPresent(
				key_dmDocumentFileName = "${previewImage}",
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");
		}

		DMDocument.expandInfo();

		if (isSet(dmDocumentDescription)) {
			var key_dmDocumentDescription = "${dmDocumentDescription}";

			ScrollWebElementIntoView(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_DESCRIPTION");

			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_DESCRIPTION",
				value1 = "${dmDocumentDescription}");
		}

		if (isSet(dmDocumentSize)) {
			var key_dmDocumentSize = "${dmDocumentSize}";

			AssertVisible(locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_SIZE");

			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_SIZE",
				value1 = "${dmDocumentSize}");
		}

		if (isSet(customFieldName)) {
			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#CUSTOM_FIELD_NAME",
				value1 = "${customFieldName}");

			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#CUSTOM_FIELD_VALUE",
				value1 = "${customFieldValue}");
		}

		if (isSet(locationFieldName)) {
			DMDocument.viewLocation(dmFolderName = "${dmFolderName}");
		}

		if (isSet(dmDocumentFileName)) {
			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_FILE_NAME",
				value1 = "${dmDocumentFileName}");
		}

		if (isSet(dmDocumentType)) {
			AssertTextEquals(
				key_dmDocumentType = "${dmDocumentType}",
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_DOCUMENT_TYPE",
				value1 = "${dmDocumentType}");
		}

		if (isSet(relatedAssetsTitle)) {
			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_RELATED_ASSETS_TITLE",
				value1 = "${relatedAssetsTitle}");
		}

		if (isSet(reviewDate)) {
			if (isSet(disabledReviewDate)) {
				AssertElementPresent(
					key_reviewDateField = "Never Review",
					locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_REVIEW_DATE");
			}
			else {
				AssertElementPresent(
					key_reviewDateField = "${user}",
					locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_REVIEW_DATE");
			}
		}
	}

	macro viewCustomFieldLocalizableLanguages {
		Panel.expandPanel(panel = "Custom Fields");

		Click(locator1 = "Button#LOCALIZATION_GENERIC");

		for (var language : list "${localizableLanguages}") {
			AssertVisible(
				key_menuItem = "${language}",
				locator1 = "DocumentsAndMedia#SIDEBAR_MENU_ITEM");
		}
	}

	macro viewDefault {
		AssertElementNotPresent(locator1 = "DocumentsAndMedia#ICON_DOCUMENT_GENERIC");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no documents or media files in this folder.");
	}

	macro viewDMMarketingBannerPG {
		var key_assetTitle = "${assetTitle}";

		AssetPublisherPortlet.clickAssetTitle(assetTitle = "${assetTitle}");

		DMNavigator.gotoDocumentDetails();

		var key_marketingSelect = "${marketingSelect}";

		AssertTextEquals.assertPartialText(
			locator1 = "DocumentsAndMediaDocument#MARKETING_SELECT",
			value1 = "${marketingSelect}");

		var key_campaignTheme = "${campaignTheme}";

		AssertTextEquals.assertPartialText(
			locator1 = "DocumentsAndMediaDocument#MARKETING_CAMPAIGN_THEME",
			value1 = "${campaignTheme}");

		var key_legalReview = "${legalReview}";

		AssertTextEquals.assertPartialText(
			locator1 = "DocumentsAndMediaDocument#MARKETING_NEEDS_LEGAL_REVIEW",
			value1 = "${legalReview}");

		var key_bannerName = "${bannerName}";

		AssertTextEquals.assertPartialText(
			locator1 = "DocumentsAndMediaDocument#MARKETING_BANNER_NAME",
			value1 = "${bannerName}");

		var key_bannerDescription = "${bannerDescription}";

		AssertTextEquals.assertPartialText(
			locator1 = "DocumentsAndMediaDocument#MARKETING_BANNER_DESCRIPTION",
			value1 = "${bannerDescription}");
	}

	macro viewDocumentAuthorCmdPG {
		if (isSet(dmDocumentAuthor)) {
			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_UPLOADED_BY",
				value1 = "${dmDocumentAuthor}");
		}
		else {
			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_UPLOADED_BY",
				value1 = "Test Test");
		}
	}

	macro viewDocumentDetailsCmdPG {
		AssertElementPresent(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_CREATED_DATE");

		AssertElementPresent(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_WORKFLOW_STATUS");

		var key_dmDocumentSize = "${dmDocumentSize}";

		AssertElementPresent(locator1 = "Button#DOWNLOAD_SIDEBAR");

		AssertElementPresent(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_GET_URL_OR_WEBDAV_URL");

		Panel.expandPanel(panel = "Automatically Extracted Metadata");
	}

	macro viewDocumentMetadataCP {
		var key_metadataData = "${metadataData}";
		var key_metadataLabel = "${metadataLabel}";

		AssertElementPresent(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_EXTRACTED_METADATA_FIELD",
			value1 = "${metadataData}");
	}

	macro viewDocumentNoCommentsCmdPG {
		AssertTextEquals(
			locator1 = "Button#SUBSCRIBE",
			value1 = "Subscribe");
	}

	macro viewDocumentNoCustomFieldCP {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_TITLE",
			value1 = "${dmDocumentTitle}");

		DMDocument.expandInfo();

		AssertTextNotPresent(
			locator1 = "DocumentsAndMediaDocument#CUSTOM_FIELD_NAME",
			value1 = "${customFieldName}");

		AssertTextNotPresent(
			locator1 = "DocumentsAndMediaDocument#CUSTOM_FIELD_VALUE",
			value1 = "${customFieldValue}");
	}

	macro viewDocumentTitleCmdPG {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_TITLE",
			value1 = "${dmDocumentTitle}");
	}

	macro viewDocumentToolbarCmdAsGuestPG {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		AssertClick(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "${dmDocumentTitle}");

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_TITLE",
			value1 = "${dmDocumentTitle}");

		DMDocument.expandInfo();

		AssertTextEquals.assertPartialText(
			locator1 = "Link#DOWNLOAD",
			value1 = "Download");

		AssertElementNotPresent(locator1 = "Button#EDIT");

		AssertElementNotPresent(locator1 = "Button#MOVE");

		AssertElementNotPresent(locator1 = "Button#CHECKOUT");

		AssertElementNotPresent(locator1 = "Button#PERMISSIONS");

		AssertElementNotPresent(locator1 = "Button#MOVE_TO_RECYCLE_BIN");
	}

	macro viewDocumentToolbarCmdPG {
		AssertVisible(
			locator1 = "Button#DOWNLOAD",
			value1 = "Download");

		AssertTextEquals.assertPartialText(
			locator1 = "Button#DOWNLOAD",
			value1 = "Download");

		AssertTextEquals(
			locator1 = "Button#EDIT",
			value1 = "Edit");

		AssertTextEquals(
			locator1 = "Button#MOVE",
			value1 = "Move");

		AssertTextEquals(
			locator1 = "Button#CHECKOUT",
			value1 = "Checkout");

		AssertTextEquals(
			locator1 = "Button#PERMISSIONS",
			value1 = "Permissions");

		AssertTextEquals(
			locator1 = "Button#MOVE_TO_RECYCLE_BIN",
			value1 = "Delete");
	}

	macro viewDocumentTypePG {
		if (IsElementNotPresent(locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_DROPDOWN")) {
			Refresh();
		}

		if (isSet(locale)) {
			Navigator.ensureLocaleURL(locale = "es");
		}

		DMDocument.expandInfo();

		if (isSet(booleanValue)) {
			if ("${booleanValue}" == "checked") {
				AssertElementPresent(locator1 = "FormFields#ANY_CHECKBOX_CHECKED");
			}
			else {
				AssertElementNotPresent(locator1 = "FormFields#ANY_CHECKBOX_CHECKED");
			}
		}

		if (isSet(imageName)) {
			if (isSet(fieldFieldLabel)) {
				var key_fieldFieldLabel = "${fieldFieldLabel}";
			}
			else {
				var key_fieldFieldLabel = "Image";
			}

			AssertVisible(locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

			AssertElementPresent(
				key_imageName = "${imageName}",
				locator1 = "DocumentsAndMediaDocument#METADATA_PANEL_IMAGE");
		}

		if (isSet(selectOption)) {
			var key_selectOption = "${selectOption}";

			AssertTextEquals.assertPartialText(
				locator1 = "DocumentsAndMediaDocument#METADATA_PANEL_SELECT",
				value1 = "${selectOption}");
		}

		if (isSet(radioOption)) {
			var key_radioOption = "${radioOption}";

			AssertTextEquals.assertPartialText(
				locator1 = "DocumentsAndMediaDocument#METADATA_PANEL_RADIO",
				value1 = "${radioOption}");
		}

		if (isSet(textContent)) {
			if (!(isSet(textFieldLabel))) {
				var textFieldLabel = "Text";
			}

			AssertTextEquals.assertValue(
				key_fieldFieldLabel = "${textFieldLabel}",
				locator1 = "DocumentsAndMediaDocument#METADATA_PANEL_TEXT_INPUT",
				value1 = "${textContent}");
		}

		if (isSet(uploadFile)) {
			if (!(isSet(uploadFieldLabel))) {
				var uploadFieldLabel = "Upload";
			}

			AssertTextEquals(
				key_fieldFieldLabel = "${uploadFieldLabel}",
				locator1 = "DocumentsAndMediaDocument#METADATA_PANEL_UPLOAD",
				value1 = "${uploadFile}");
		}

		if (isSet(numericValue)) {
			if (!(isSet(numericFieldLabel))) {
				var numericFieldLabel = "Numeric";
			}

			AssertTextEquals.assertValue(
				key_fieldFieldLabel = "${numericFieldLabel}",
				locator1 = "DocumentsAndMediaDocument#METADATA_PANEL_TEXT_INPUT",
				value1 = "${numericValue}");
		}

		if (isSet(dateValue)) {
			if (!(isSet(dateFieldLabel))) {
				var dateFieldLabel = "Date";
			}

			AssertAttributeValue(
				attribute1 = "value",
				key_fieldFieldLabel = "${dateFieldLabel}",
				locator1 = "DocumentsAndMediaDocument#METADATA_PANEL_DATE",
				value1 = "${dateValue}");
		}
	}

	macro viewDocumentVersionNumberCmdPG {
		DMDocument.expandInfo();

		if (isSet(dmDocumentVersionNumber)) {
			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_VERSION",
				value1 = "VERSION ${dmDocumentVersionNumber}");
		}
		else {
			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_VERSION",
				value1 = "VERSION 1.0");
		}
	}

	macro viewEditCP {
		var key_dmDocumentTitle = "${dmDocumentTitleEdit}";

		AssertElementPresent(locator1 = "DocumentsAndMedia#ICON_DOCUMENT");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "${dmDocumentTitleEdit}");

		if (isSet(dmDocumentVersionNumber)) {
			DMDocument.viewDocumentVersionNumberCmdPG(dmDocumentVersionNumber = "${dmDocumentVersionNumber}");
		}

		if (isSet(dmDocumentFileName)) {
			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_FILE_NAME",
				value1 = "${dmDocumentFileName}");
		}
	}

	macro viewEntryInEdit {
		if (isSet(dmDocumentTitle)) {
			AssertTextEquals.assertValue(
				key_fieldLabel = "Title",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "${dmDocumentTitle}");
		}

		if (isSet(dmDocumentFileName)) {
			AssertTextEquals.assertValue(
				key_fieldLabel = "File Name",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "${dmDocumentFileName}");
		}
	}

	macro viewFieldLabels {
		for (var fieldFieldLabels : list "${labels}") {
			AssertTextEquals.assertPartialText(
				key_fieldFieldLabel = "${fieldFieldLabels}",
				locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL",
				value1 = "${fieldFieldLabels}");
		}
	}

	macro viewFileSizeByVersion {
		DMNavigator.gotoDocumentVersion();

		Click(
			key_dmDocumentVersionNumber = "Version ${dmDocumentVersionNumber}",
			locator1 = "DocumentsAndMedia#DOCUMENT_VERSION_VERTICAL_ELLIPSIS");

		AssertTextEquals.assertPartialText(
			key_menuItem = "Download (${dmDocumentSize})",
			locator1 = "MenuItem#DROPDOWN_MENU_ITEM",
			value1 = "Download (${dmDocumentSize})");

		Click(
			key_menuItem = "View",
			locator1 = "MenuItem#DROPDOWN_MENU_ITEM");

		AssertTextEquals(
			key_dmDocumentSize = "${dmDocumentSize}",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_TOOLBAR_DOWNLOAD",
			value1 = "Download");

		Click(locator1 = "DocumentsAndMediaDocument#DOCUMENT_TOOLBAR_VERTICAL_ELLIPSIS");

		AssertTextEquals.assertPartialText(
			key_menuItem = "Download (${dmDocumentSize})",
			locator1 = "MenuItem#DROPDOWN_MENU_ITEM",
			value1 = "Download (${dmDocumentSize})");

		DMDocument.expandInfo();

		AssertTextEquals(
			key_dmDocumentSize = "${dmDocumentSize}",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_DOWNLOAD",
			value1 = "Download");

		AssertVisible(
			key_dmDocumentSize = "${dmDocumentSize}",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_SIZE");
	}

	macro viewIconLockedCP {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		AssertVisible(locator1 = "DocumentsAndMedia#ICON_DOCUMENT_ICON_LOCKED");
	}

	macro viewInternalVideoPreview {
		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#EMBEDDED_VIDEO_IFRAME");

		AssertVisible(
			key_videoName = "${videoName}",
			locator1 = "DocumentsAndMediaDocument#VIDEO_PREVIEW");

		SelectFrame.selectFrameTop();
	}

	macro viewLatestVersionURL {
		DMDocument.expandInfo();

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_URL",
			value1 = "Latest Version URL");

		var portalURL = PropsUtil.get("portal.url");

		if (isSet(remoteStaging)) {
			var portalURL = StringUtil.replace("${portalURL}", ":8080", ":9080");
		}

		var latestVersionURL = "${portalURL}/documents/${siteId}/0/${dmDocumentFileName}";

		AssertElementPresent(
			key_latestVersionURL = "${latestVersionURL}",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_LATEST_VERSION_URL");
	}

	macro viewLocation {
		var key_dmFolderName = "${dmFolderName}";

		AssertElementPresent(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_LOCATION");

		Click(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_LOCATION");

		AssertTextEquals(
			locator1 = "DocumentsAndMedia#BREADCRUMB_FOLDER_NAME",
			value1 = "${dmFolderName}");
	}

	macro viewMovedToFolderCP {
		var key_dmDocumentTitle = "${dmDocumentTitle}";
		var key_dmFolderName = "${dmFolderName}";

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		AssertElementPresent(locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_FOLDER_ICON");

		AssertTextEquals(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_FOLDER_TITLE",
			value1 = "${dmFolderName}");

		AssertClick(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_FOLDER_TITLE",
			value1 = "${dmFolderName}");

		AssertTextEquals(
			locator1 = "DocumentsAndMedia#BREADCRUMB_FOLDER_NAME",
			value1 = "${dmFolderName}");

		AssertElementPresent(locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_ICON");

		AssertTextEquals(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "${dmDocumentTitle}");
	}

	macro viewNoAddPermission {
		AssertElementNotPresent(locator1 = "Button#PLUS");
	}

	macro viewNoCacheControlConfigurationInConsole {
		if (!(contains("${responseHeader}", "${cacheControlAttribute}"))) {
			echo("No configured cache control property in the console.");
		}
		else {
			fail("The configured cache control property can be viewed in the console.");
		}
	}

	macro viewNoCategoriesPG {
		if (isSet(categoryNameList)) {
			for (var categoryName : list "${categoryNameList}") {
				AssertElementNotPresent(
					key_categoryName = "${categoryName}",
					locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_CATEGORIES");
			}
		}
		else {
			AssertElementNotPresent(
				key_categoryName = "${categoryName}",
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_CATEGORIES");
		}
	}

	macro viewNoFilesViaMG {
		if (isSet(mgImagePreview)) {
			AssertElementNotPresent(
				key_mgImageName = "${mgImagePreview}",
				locator1 = "MediaGallery#ENTRY_IMAGE_PREVIEW");
		}
		else {
			AssertElementNotPresent(
				key_mgDocumentTitle = "${mgDocumentTitle}",
				locator1 = "MediaGallery#IMAGE_TITLE");
		}
	}

	macro viewNoItemInVersionMenu {
		DMNavigator.gotoDocumentVersion();

		var key_dmDocumentVersionNumber = "Version ${dmDocumentVersionNumber}";

		Click(locator1 = "DocumentsAndMedia#DOCUMENT_VERSION_VERTICAL_ELLIPSIS");

		MenuItem.viewNotPresent(menuItem = "${menuItem}");
	}

	macro viewNoPermission {
		Click(
			key_rowEntry = "${rowEntry}",
			locator1 = "Icon#ROW_VERTICAL_ELLIPSIS");

		MenuItem.viewNotPresent(menuItem = "${menuItem}");
	}

	macro viewNoTagInfo {
		for (var tagName : list "${tagName}") {
			AssertElementNotPresent(
				key_tagName = StringUtil.lowerCase("${tagName}"),
				locator1 = "DocumentsAndMedia#TAG");
		}
	}

	macro viewOlderVersionPG {
		DMNavigator.gotoDocumentVersion();

		var key_dmDocumentVersionNumber = "Version ${dmDocumentVersionNumber}";

		Click(locator1 = "DocumentsAndMedia#DOCUMENT_VERSION_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "View");

		var key_dmDocumentDescription = "${dmDocumentDescription}";
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		DMDocument.expandInfo();

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_TITLE",
			value1 = "${dmDocumentTitle} (Version ${dmDocumentVersionNumber})");

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_DESCRIPTION",
			value1 = "${dmDocumentDescription}");

		DMDocument.viewDocumentVersionNumberCmdPG(dmDocumentVersionNumber = "${dmDocumentVersionNumber}");
	}

	macro viewPG {
		var key_dmDocumentTitle = "${dmDocumentTitle}";
		var key_dmDocumentType = "${dmDocumentType}";

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		if (isSet(dmDocumentType)) {
			AssertTextEquals(
				locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TYPE",
				value1 = "${dmDocumentType}");
		}

		if (isSet(specialCharacters)) {
			var key_dmDocumentTitle = "${escapedTitle}";
		}

		AssertClick(
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "${dmDocumentTitle}");

		DMDocument.expandInfo();

		DMDocument.viewDocumentTitleCmdPG(dmDocumentTitle = "${dmDocumentTitle}");

		if (isSet(dmDocumentDescription)) {
			var key_dmDocumentDescription = "${dmDocumentDescription}";

			ScrollWebElementIntoView(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_DESCRIPTION");

			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_DESCRIPTION",
				value1 = "${dmDocumentDescription}");
		}

		if (isSet(dmDocumentFileName)) {
			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_FILE_NAME",
				value1 = "${dmDocumentFileName}");
		}

		if (isSet(dmDocumentVersionNumber)) {
			AssertTextEquals(
				key_dmDocumentVersionNumber = "${dmDocumentVersionNumber}",
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_VERSION",
				value1 = "VERSION ${dmDocumentVersionNumber}");
		}

		if ("${dmDocumentFileType}" == "Image") {
			if (!(isSet(dmDocumentFileName))) {
				var dmDocumentFileName = "${dmDocumentTitle}";
			}

			AssertElementPresent(
				key_dmDocumentFileName = "${dmDocumentFileName}",
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");
		}

		if ("${dmDocumentFileTypeInfo}" == "Image") {
			AssertVisible(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_THUMBNAIL");
		}

		if (isSet(dmDocumentType)) {
			AssertTextEquals(
				key_dmDocumentType = "${dmDocumentType}",
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_DOCUMENT_TYPE",
				value1 = "${dmDocumentType}");
		}

		if (isSet(dmDocumentExtension)) {
			AssertTextEquals(
				key_dmDocumentExtension = "${dmDocumentExtension}",
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_EXTENSION",
				value1 = "${dmDocumentExtension}");
		}

		if (isSet(dmDocumentSize)) {
			AssertTextEquals(
				key_dmDocumentSize = "${dmDocumentSize}",
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_DOWNLOAD",
				value1 = "Download");
		}

		if (isSet(dmDocumentUploader)) {
			AssertTextEquals.assertPartialText(
				key_dmDocumentUploader = "${dmDocumentUploader}",
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_UPLOADER",
				value1 = "by ${dmDocumentUploader}");
		}

		if (isSet(locationFieldName)) {
			DMDocument.viewLocation(dmFolderName = "${dmFolderName}");

			AssertClick(
				locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
				value1 = "${dmDocumentTitle}");

			DMDocument.expandInfo();
		}

		if (isSet(tagNameList)) {
			for (var tagName : list "${tagNameList}") {
				AssertTextEquals.assertPartialText(
					locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_TAGS",
					value1 = "${tagName}");
			}
		}

		if (isSet(categoryName)) {
			var key_categoryName = "${categoryName}";

			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_CATEGORIES",
				value1 = "${categoryName}");
		}

		if ("${dmRepositoryName}" == "true") {
			AssertElementNotPresent(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_RATING");
		}
		else {
			AssertElementPresent(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_RATING");
		}

		if (isSet(averageRatingStarCount)) {
			AssertTextEquals.assertPartialText(
				locator1 = "Ratings#AVERAGE_STAR_RESULT",
				value1 = "${averageRatingStarCount}");
		}
	}

	macro viewPGDetails {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		AssertTextPresent(
			locator1 = "DocumentsAndMedia#BREADCRUMB_HOME",
			value1 = "Home");

		Search.searchPG(
			portletName = "${portletName}",
			searchTerm = "${searchTerm}");

		AssertClick.assertPartialTextClickAt(
			locator1 = "DocumentsAndMedia#SEARCH_TITLE",
			value1 = "${dmDocumentTitle}");

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_TITLE",
			value1 = "${dmDocumentTitle}");

		DMDocument.expandInfo();

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_RELATED_ASSETS_TITLE",
			value1 = "${assetTitle}");

		// LRCI-276

		//AssertElementPresent(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_THUMBNAIL");

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_UPLOADED_BY",
			value1 = "${dmDocumentUploader}");

		AssertElementPresent(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_RATING");

		AssertTextEquals(
			locator1 = "Button#SUBSCRIBE",
			value1 = "Subscribe");

		DMDocument.expandInfo();

		var key_dmDocumentSize = "${dmDocumentSize}";
		var key_dmDocumentUploader = "${dmDocumentUploader}";
		var key_dmDocumentVersionNumber = "${dmDocumentVersionNumber}";

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_VERSION",
			value1 = "VERSION ${dmDocumentVersionNumber}");

		AssertTextEquals.assertPartialText(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_UPLOADER",
			value1 = "by ${dmDocumentUploader}");

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_WORKFLOW",
			value1 = "${workflow}");

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_DOWNLOAD",
			value1 = "Download");

		AssertTextEquals.assertPartialText(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_WEBDAV_URL",
			value1 = "WebDAV URL");

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_URL",
			value1 = "Latest Version URL");
	}

	macro viewPGViaAP {
		var key_assetContent = "${dmDocumentDescription}";
		var key_assetTitle = "${dmDocumentTitle}";

		AssertTextEquals(
			locator1 = "AP#ASSET_ABSTRACT_TITLE",
			value1 = "${dmDocumentTitle}");

		AssertTextEquals.assertPartialText(
			locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
			value1 = "${dmDocumentDescription}");

		if (IsElementPresent(locator1 = "Link#READ_MORE")) {
			AssertClick.assertPartialTextClickAt(
				locator1 = "Link#READ_MORE",
				value1 = "Read More");

			AssertTextEquals(
				locator1 = "AP#ASSET_ABSTRACT_TITLE",
				value1 = "${dmDocumentTitle}");

			AssertTextEquals.assertPartialText(
				locator1 = "APAsset#ASSET_CONTENT",
				value1 = "${dmDocumentDescription}");
		}

		if (isSet(customFieldName)) {
			AssertClick(
				locator1 = "AP#ASSET_ABSTRACT_TITLE",
				value1 = "${dmDocumentTitle}");

			DMDocument.expandInfo();

			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#CUSTOM_FIELD_NAME",
				value1 = "${customFieldName}");

			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#CUSTOM_FIELD_VALUE",
				value1 = "${customFieldValue}");
		}

		if (isSet(displayPageTemplate)) {
			AssertClick(
				locator1 = "AP#ASSET_ABSTRACT_TITLE",
				value1 = "${dmDocumentTitle}");

			for (var content : list "${contentList}") {
				AssertElementPresent(
					key_text = "${content}",
					locator1 = "Fragment#EDITABLE_FIELD_CONTENT");
			}
		}
	}

	macro viewPGViaMG {
		var key_mgDocumentTitle = "${mgDocumentTitle}";

		if (isSet(mgVideoPreview)) {
			Click(
				key_mgDocumentTitle = "${mgDocumentTitle}",
				locator1 = "MediaGallery#ENTRY_THUMBNAIL");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#SELECT_MEDIA_GALLERY_VIDEO");

			AssertElementPresent(locator1 = "MediaGallery#ENTRY_VIDEO_PLAYED");
		}
		else if (isSet(staging)) {
			AssertVisible(
				key_mgImageName = "${mgDocumentTitle}",
				locator1 = "MediaGallery#ENTRY_IMAGE_PREVIEW");
		}
		else {
			AssertElementPresent(locator1 = "MediaGallery#ENTRY_THUMBNAIL");

			AssertElementPresent(locator1 = "MediaGallery#IMAGE_TITLE");
		}
	}

	macro viewPGViaSearch {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		DMDocument.viewDocumentTitleCmdPG(dmDocumentTitle = "${dmDocumentTitle}");

		AssertElementPresent(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_THUMBNAIL");

		AssertElementPresent(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_RATING");

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_DESCRIPTION",
			value1 = "${dmDocumentDescription}");
	}

	macro viewPGviaStagingLocalLive {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		if ("${documentAdded}" == "true") {
			DMDocument.viewCardTitle(dmDocumentTitle = "${dmDocumentTitle}");

			AssertClick.assertPartialTextClickAt(
				locator1 = "Staging#LIVE_BUTTON",
				value1 = "Live");

			LexiconCard.viewCardNotPresent(card = "${dmDocumentTitle}");

			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "There are no documents or media files in this folder.");
		}
		else if ("${documentAdded}" == "false") {
			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "There are no documents or media files in this folder.");

			AssertClick.assertPartialTextClickAt(
				locator1 = "Staging#LIVE_BUTTON",
				value1 = "Live");

			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "There are no documents or media files in this folder.");
		}
	}

	macro viewSearchResultsCP {
		var key_dmDocumentTitle = "${dmDocumentTitle}";
		var key_dmRepositoryName = "${dmRepositoryName}";

		if (isSet(dmRepositoryName)) {
			AssertClick.assertTextClickAtAndPause(
				locator1 = "DocumentsAndMedia#SEARCH_REPOSITORY_TAB",
				value1 = "${dmRepositoryName}");

			if (IsElementNotPresent(locator1 = "DocumentsAndMedia#SEARCH_TITLE")) {
				Click(locator1 = "Icon#BASIC_SEARCH");
			}
		}

		AssertTextEquals.assertPartialText(
			locator1 = "DocumentsAndMedia#SEARCH_TITLE",
			value1 = "${dmDocumentTitle}");
	}

	macro viewSearchResultsPG {
		AssertTextEquals.assertPartialText(
			key_dmDocumentTitle = "${dmDocumentTitle}",
			locator1 = "DocumentsAndMedia#SEARCH_TITLE",
			value1 = "${dmDocumentTitle}");
	}

	macro viewStagingDetailsManagementBar {
		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		var key_dmDocumentTitle = "${dmDocumentTitle}";

		Check(locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_CHECKBOX");

		Click(locator1 = "Icon#TOOLBAR_ELLIPSIS");

		MenuItem.viewPresent(menuItem = "Download");

		MenuItem.viewPresent(menuItem = "Edit Tags");

		MenuItem.viewPresent(menuItem = "Move");

		MenuItem.viewPresent(menuItem = "Checkout");

		MenuItem.viewPresent(menuItem = "Delete");
	}

	macro viewStagingDetailsPG {
		Portlet.clickPortletPlusIconPG(portletName = "Documents and Media");

		MenuItem.viewPresent(menuItem = "Folder");

		MenuItem.viewPresent(menuItem = "Shortcut");

		MenuItem.viewPresent(menuItem = "Repository");

		MenuItem.viewPresent(menuItem = "Multiple Files Upload");

		MenuItem.viewPresent(menuItem = "File Upload");

		SelectFrameTop();

		var key_dmDocumentTitle = "Document_1";

		Check(locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_CHECKBOX");

		Click(locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_VERTICAL_ELLIPSIS");

		AssertTextEquals.assertPartialText(
			locator1 = "MenuItem#DOWNLOAD",
			value1 = "Download");

		MenuItem.viewPresent(menuItem = "Edit");

		MenuItem.viewPresent(menuItem = "Move");

		MenuItem.viewPresent(menuItem = "Checkout");

		MenuItem.viewPresent(menuItem = "Permissions");

		MenuItem.viewPresent(menuItem = "Delete");

		Check(locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_CHECKBOX");

		Click(locator1 = "Icon#TOOLBAR_ELLIPSIS");

		MenuItem.viewPresent(menuItem = "Checkout");

		MenuItem.viewPresent(menuItem = "Checkin");

		MenuItem.viewPresent(menuItem = "Move");

		MenuItem.viewPresent(menuItem = "Delete");

		Navigator.gotoSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		AssertElementNotPresent(locator1 = "Portlet#ICON_PLUS_SIGN");

		var key_dmDocumentTitle = "Document_1";

		Click(locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_VERTICAL_ELLIPSIS");

		AssertTextEquals.assertPartialText(
			locator1 = "MenuItem#DOWNLOAD",
			value1 = "Download");

		MenuItem.viewPresent(menuItem = "Delete");

		Click(locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_CHECKBOX");

		AssertVisible(locator1 = "Icon#MOVE_TO_RECYCLE_BIN");
	}

	macro viewStatus {
		var key_dmDocumentTitle = "${dmDocumentTitle}";

		if ("${dmDocumentStatus}" == "Approved") {
			AssertTextEquals(
				locator1 = "DocumentsAndMedia#ICON_DOCUMENT_WORKFLOW_STATUS",
				value1 = "Approved");
		}
		else {
			AssertTextEquals(
				locator1 = "DocumentsAndMedia#ICON_DOCUMENT_WORKFLOW_STATUS",
				value1 = "${dmDocumentStatus}");

			DMDocument.gotoEntry(dmDocumentTitle = "${dmDocumentTitle}");

			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_TITLE",
				value1 = "${dmDocumentTitle}");
		}
	}

	macro viewTagInfo {
		DMDocument.expandInfo();

		for (var tagName : list "${tagName}") {
			var tagName = StringUtil.lowerCase("${tagName}");
			var key_tagName = "${tagName}";

			AssertTextEquals(
				locator1 = "DocumentsAndMedia#TAG",
				value1 = "${tagName}");
		}
	}

	macro viewTypeFieldLocalizableLanguages {
		if (!(isSet(currentLocale))) {
			var key_currentLocale = "en-us";
		}

		Click(locator1 = "DocumentsAndMediaDocument#CUSTOM_FIELD_LOCALIZATION_DROPDOWN_TOGGLE");

		for (var language : list "${localizableLanguages}") {
			AssertVisible(
				key_locale = "${language}",
				locator1 = "Translation#DROPDOWN_MENU_ITEM");
		}
	}

	macro viewVideoPreviewGeneratingInfo {
		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#EMBEDDED_VIDEO_IFRAME");

		if (isSet(disabled)) {
			AssertTextEquals.assertPartialText(
				key_text = "No video preview available.",
				locator1 = "DocumentsAndMediaDocument#VIDEO_GENERATION_INFO",
				value1 = "No video preview available.");
		}
		else {
			VerifyElementPresent(
				key_text = "Generating video preview will take a few minutes.",
				locator1 = "DocumentsAndMediaDocument#VIDEO_GENERATION_INFO");

			while (IsElementPresent(key_text = "Generating video preview will take a few minutes.", locator1 = "DocumentsAndMediaDocument#VIDEO_GENERATION_INFO")) {
				Pause(locator1 = "1000");

				Refresh();

				SelectFrame.selectFrameNoLoading(locator1 = "IFrame#EMBEDDED_VIDEO_IFRAME");
			}
		}

		SelectFrame.selectFrameTop();
	}

	macro viewWebDAVURL {
		DMDocument.expandInfo();

		AssertTextEquals.assertPartialText(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_WEBDAV_URL",
			value1 = "WebDAV URL");

		var portalURL = PropsUtil.get("portal.url");

		if (isSet(remoteStaging)) {
			var portalURL = StringUtil.replace("${portalURL}", ":8080", ":9080");
		}

		var webDavurl = "${portalURL}/webdav/${siteName}/document_library/${dmDocumentFileName}";

		AssertElementPresent(
			key_webDavurl = "${webDavurl}",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_WEBDAV_URL_LINK");
	}

}