definition {

	macro assertEngineVendorAndVersions {
		AssertTextEquals.assertPartialText(
			locator1 = "SearchAdmin#SEARCH_ENGINE_VENDOR",
			value1 = "${engineVendor}");

		AssertTextEquals.assertPartialText(
			locator1 = "SearchAdmin#CLIENT_VERSION",
			value1 = "${clientVersion}");

		Panel.expandPanel(panel = "Nodes (1)");

		AssertTextEquals.assertPartialText(
			locator1 = "SearchAdmin#SERVER_VERSION",
			value1 = "${serverVersion}");
	}

	macro executeReindex {
		SearchAdministration.openIndexActions();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Search");

		if ("${executionScope}" == "All Instances") {
			Check.checkNotVisible(
				locator1 = "Radio#ANY",
				radioLabel = "${executionScope}");

			AssertElementNotPresent(
				key_executionScope = "System",
				locator1 = "SearchAdmin#SELECTED_INSTANCE_INDEX_CHECKBOX");
		}
		else if (isSet(executionScope)) {
			Check.checkNotVisible(
				locator1 = "Radio#ANY",
				radioLabel = "Selected Instances");

			Check.checkNotVisible(
				key_executionScope = "${executionScope}",
				locator1 = "SearchAdmin#SELECTED_INSTANCE_INDEX_CHECKBOX");
		}

		var port = Elasticsearch.getServerPort();

		var portalHostname = PropsUtil.get("portal.hostname");
		var curl = "http://${portalHostname}:${port}/_tasks";

		while (!(isSet(reindexStartTime)) || ("${retryReindex}" == "true") && (maxIterations = "2")) {
			if (isSet(action)) {
				Click(
					key_action = "${action}",
					locator1 = "SearchAdmin#EXECUTE_REINDEX_BUTTON");
			}
			else {
				Click(
					key_action = "Reindex search indexes.",
					locator1 = "SearchAdmin#EXECUTE_REINDEX_BUTTON");
			}

			var reindexStartTime = "0";

			while (!(contains("${elasticsearchTasks}", "indices:data/write/bulk")) && ("${reindexStartTime}" != "60")) {
				Pause.pauseNoSPARefresh(locator1 = "1000");

				var reindexStartTime = ${reindexStartTime} + 1;

				echo("Current Elasticsearch Tasks:");

				var elasticsearchTasks = JSONCurlUtil.get("${curl}");
			}

			if ("${reindexStartTime}" == "60") {
				echo("Elasticsearch failed to receive reindex request after 60 seconds.");
			}
			else {
				echo("Started reindexing ${reindexStartTime} second(s) after clicking 'Execute'.");
			}

			var reindexElapsedTime = "0";

			while ((contains("${elasticsearchTasks}", "indices:data/write/bulk") || (IsElementPresent.isElementPresentNoSPARefresh(locator1 = "ControlMenu#RELOAD_TOOLTIP")) || (IsElementPresent.isElementPresentNoSPARefresh(locator1 = "//html[contains(@class,'lfr-spa-loading')]"))) && ("${reindexElapsedTime}" != "240") && (maxIterations = "24")) {
				Pause.pauseNoSPARefresh(locator1 = "10000");

				var reindexElapsedTime = ${reindexElapsedTime} + 10;

				echo("Current Elasticsearch Tasks:");

				var elasticsearchTasks = JSONCurlUtil.get("${curl}");
			}

			if ("${reindexElapsedTime}" == "0") {
				echo("Elasticsearch failed to receive reindex request.");

				takeScreenshot();

				Refresh();

				var retryReindex = "true";
			}
			else if ("${reindexElapsedTime}" == "240") {
				echo("Reindex timed out after 240 seconds.");

				takeScreenshot();

				Refresh();

				var retryReindex = "true";
			}
			else {
				echo("Finished reindexing after ${reindexElapsedTime} seconds.");
			}
		}
	}

	macro getServerVersion {
		SearchAdministration.openSearchAdmin();

		Panel.expandPanel(panel = "Nodes (1)");

		var serverVersion = selenium.getText("SearchAdmin#SERVER_VERSION");

		return "${serverVersion}";
	}

	macro openIndexActions {
		Navigator.openWithAppendToBaseURL(
			baseURL = "${baseURL}",
			urlAppend = "group/control_panel/manage?p_p_id=com_liferay_portal_search_admin_web_portlet_SearchAdminPortlet&_com_liferay_portal_search_admin_web_portlet_SearchAdminPortlet_tabs1=index-actions");
	}

	macro openSearchAdmin {
		Navigator.openWithAppendToBaseURL(
			baseURL = "${baseURL}",
			urlAppend = "group/control_panel/manage?p_p_id=com_liferay_portal_search_admin_web_portlet_SearchAdminPortlet");
	}

}