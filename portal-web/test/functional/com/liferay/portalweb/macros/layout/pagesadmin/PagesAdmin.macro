definition {

	macro _addPage {
		PagesAdmin._selectPageType(
			collectionName = "${collectionName}",
			pageTemplateName = "${pageTemplateName}",
			sitePageType = "${sitePageType}");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		PagesAdmin._addPageToNavigationMenu(
			assertCheckboxMissing = "${assertCheckboxMissing}",
			navigationMenus = "${navigationMenus}");

		PortletEntry.inputName(name = "${pageName}");

		if (isSet(categoryName)) {
			AssetCategorization.addCategory(
				categoryName = "${categoryName}",
				vocabularyName = "${vocabularyName}");
		}

		Button.clickAdd();

		SelectFrame.selectFrameTop();

		Alert.viewSuccessMessage();

		if ("${sitePageType}" == "Embedded") {
			PagesAdmin._addPageTypeEmbedded(pageTypeURL = "${pageTypeURL}");
		}
		else if ("${sitePageType}" == "Full Page Application") {
			if (isSet(portlet)) {
				PagesAdmin._addPageTypeFullPageApplication(portlet = "${portlet}");
			}
		}
		else if ("${sitePageType}" == "Link to a Page of This Site") {
			if (isSet(linkPageName)) {
				Click(
					buttonId = "selectLayoutButton",
					locator1 = "Button#BUTTON_ID");

				SelectFrame(locator1 = "IFrame#MODAL_BODY");

				Pause(locator1 = "3000");

				AssertClick.assertPartialTextClickAt(
					key_nodeName = "${linkPageName}",
					locator1 = "Treeview#NODE_UNSELECTED",
					value1 = "${linkPageName}");

				SelectFrameTop();
			}
		}
		else if ("${sitePageType}" == "Link to URL") {
			Type(
				locator1 = "TextInput#URL",
				value1 = "${pageTypeURL}");
		}
		else if ("${sitePageType}" == "Panel") {
			if (isSet(componentName)) {
				PagesAdmin._addPageTypePanel(componentName = "${componentName}");
			}
		}

		if (isSet(inheritChanges)) {
			PagesAdmin.togglePageTemplateInheritChanges(toggleValue = "${inheritChanges}");
		}

		AssertVisible(locator1 = "TextInput#NAME");

		if (isSet(openGraph)) {
			PagesAdmin._configureOpenGraph(
				customDescription = "${customDescription}",
				customTitle = "${customTitle}");
		}

		if (isSet(sitePageType) || isSet(inheritChanges) || isSet(openGraph)) {
			Button.click(button = "Save");
		}
	}

	@summary = "Add newly created pages to specified navigation menus or assert that the option to add the pages to navigation menus is missing."
	macro _addPageToNavigationMenu {
		if (isSet(navigationMenus)) {
			Pause(locator1 = "5000");

			for (var navigationMenu : list "${navigationMenus}") {
				if ("${assertCheckboxMissing}" == "true") {
					AssertElementNotPresent(
						checkboxName = "${navigationMenu}",
						locator1 = "Checkbox#ANY_CHECKBOX");
				}
				else {
					Check(
						checkboxName = "${navigationMenu}",
						locator1 = "Checkbox#ANY_CHECKBOX");

					AssertChecked(
						checkboxName = "${navigationMenu}",
						locator1 = "Checkbox#ANY_CHECKBOX");
				}
			}
		}
	}

	macro _addPageTypeEmbedded {
		Type(
			locator1 = "TextInput#URL",
			value1 = "${pageTypeURL}");

		AssertTextEquals.assertPartialText(
			locator1 = "PagesAdmin#PAGE_TYPE_DESCRIPTION",
			value1 = "Show content from another website.");
	}

	macro _addPageTypeFullPageApplication {
		Select(
			key_fieldLabel = "Full Page Application",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "${portlet}");
	}

	macro _addPageTypePanel {
		var key_componentOrPortletName = "${componentName}";

		Click(locator1 = "PagesAdmin#PAGE_TYPE_PANEL_CHECKBOX");

		var key_componentOrPortletName = StringUtil.lowerCase("${componentName}");

		AssertElementPresent(locator1 = "PagesAdmin#PAGE_TYPE_PANEL_CHECKBOX_INPUT");
	}

	@summary = "Configures openGraph for a site page. This should be moved outside of _addPage for stability."
	macro _configureOpenGraph {
		Navigator.gotoNavTab(navTab = "Open Graph");

		var checkboxName = "Use Custom Title";

		if (IsNotChecked(locator1 = "Checkbox#ANY_CHECKBOX")) {
			Click(locator1 = "Checkbox#ANY_CHECKBOX");
		}

		Type(
			locator1 = "TextInput#OPEN_GRAPH_CUSTOM_TITLE",
			value1 = "${customTitle}");

		var checkboxName = "Use Custom Description";

		if (IsNotChecked(locator1 = "Checkbox#ANY_CHECKBOX")) {
			Click(locator1 = "Checkbox#ANY_CHECKBOX");
		}

		Type(
			key_text = "openGraphDescription",
			locator1 = "TextArea#ANY",
			value1 = "${customDescription}");
	}

	macro _configurePage {
		if ("${sitePageType}" == "Embedded") {
			PagesAdmin._addPageTypeEmbedded(pageTypeURL = "${pageTypeURL}");
		}
		else if ("${sitePageType}" == "Panel") {
			PagesAdmin._addPageTypePanel(componentName = "${componentName}");
		}
		else if ("${sitePageType}" == "Widget Page") {
			Click(
				key_card = "${columnName}",
				locator1 = "Card#CARD");
		}
		else if ("${sitePageType}" == "Full Page Application") {
			PagesAdmin._addPageTypeFullPageApplication(portlet = "${portlet}");
		}
	}

	macro _selectPageType {
		if (isSet(pageTemplateName)) {
			var sitePageType = "${pageTemplateName}";

			if (isSet(collectionName)) {
				Navigator.gotoNavNested(navNested = "${collectionName}");
			}
			else {
				Navigator.gotoNavNested(navNested = "Global Templates");
			}
		}
		else if (isSet(sitePageType)) {
			var sitePageType = "${sitePageType}";
		}
		else {
			var sitePageType = "Widget Page";
		}

		LexiconCard.viewCardPresent(card = "${sitePageType}");

		Pause(locator1 = "3000");

		LexiconCard.clickCard(card = "${sitePageType}");
	}

	macro addCategory {
		AssetCategorization.addCategory(
			categoryName = "${categoryName}",
			vocabularyName = "${vocabularyName}");
	}

	macro addChildPage {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		MouseOver(
			key_itemName = "${parentPageName}",
			locator1 = "PagesAdmin#LIST_GROUP_ITEM");

		Click(
			key_pageName = "${parentPageName}",
			locator1 = "PagesAdmin#LIST_GROUP_ITEM_PLUS_ICON");

		DropdownMenuItem.click(menuItem = "Add Page");

		PagesAdmin._addPage(
			assertCheckboxMissing = "${assertCheckboxMissing}",
			navigationMenus = "${navigationMenus}",
			pageName = "${childPageName}",
			pageTemplateName = "${pageTemplateName}",
			sitePageType = "${sitePageType}");
	}

	macro addJavaScript {
		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "${pageName}");

		Navigator.gotoNavTab(navTab = "Advanced");

		Panel.expandPanel(panel = "JavaScript");

		AssertElementPresent(
			key_fieldLabel = "Paste JavaScript code that is executed at the bottom of the page.",
			locator1 = "FormFields#LABEL");

		Type(
			key_text = "javascript",
			locator1 = "TextArea#ANY",
			value1 = "${javaScript}");

		AssertClickNoError(
			locator1 = "Button#SAVE",
			value1 = "Save");
	}

	macro addLocalizedCanonicalURL {
		Navigator.gotoNavTab(navTab = "SEO");

		var checkboxName = "Use Custom Canonical URL";

		if (IsNotChecked(locator1 = "Checkbox#ANY_CHECKBOX")) {
			Click(locator1 = "Checkbox#ANY_CHECKBOX");

			AssertVisible(
				key_infoMessage = "Info:Due to the customization of the canonical URL, depending on the platform this page is shared, the Open Graph metadata shown might not be the one configured in this page.",
				locator1 = "Message#INFO_SPECIFIC",
				value1 = "Info:Due to the customization of the canonical URL, depending on the platform this page is shared, the Open Graph metadata shown might not be the one configured in this page.");
		}

		var list1 = ListUtil.newListFromString("${localeList}");
		var list2 = ListUtil.newListFromString("${localizedCanonicalURLList}");
		var size = ListUtil.size("${list1}");
		var i = "0";

		while ("${i}" != "${size}") {
			var locale = ListUtil.get("${list1}", "${i}");
			var localizedCanonicalURL = ListUtil.get("${list2}", "${i}");

			PortletEntry.changeLocale(locale = "${locale}");

			Type(
				locator1 = "TextInput#CUSTOM_CANONICAL_URL",
				value1 = "${localizedCanonicalURL}");

			PortletEntry.save();

			var i = ${i} + 1;
			var i = StringUtil.valueOf("${i}");
		}
	}

	macro addLocalizedFriendlyURL {
		var list1 = ListUtil.newListFromString("${friendlyURLLocalizedList}");
		var list2 = ListUtil.newListFromString("${localizedFriendlyURLList}");
		var list3 = ListUtil.newListFromString("${localizedNameList}");
		var size = ListUtil.size("${list1}");
		var i = "0";

		while ("${i}" != "${size}") {
			var friendlyURLLocalized = ListUtil.get("${list1}", "${i}");
			var localizedFriendlyURL = ListUtil.get("${list2}", "${i}");
			var localizedName = ListUtil.get("${list3}", "${i}");

			PortletEntry.changeLocale(
				fieldName = "Friendly URL",
				locale = "${friendlyURLLocalized}");

			Type(
				inputFieldId = "friendlyURL",
				locator1 = "TextInput#INPUT_ID",
				value1 = "${localizedFriendlyURL}");

			if ("${localizedName}" != "-") {
				PortletEntry.inputName(name = "${localizedName}");
			}

			if (!(isSet(configureWithoutSave))) {
				PortletEntry.save();
			}

			var i = ${i} + 1;
			var i = StringUtil.valueOf("${i}");
		}
	}

	macro addLocalizedName {
		var list1 = ListUtil.newListFromString("${localeList}");
		var list2 = ListUtil.newListFromString("${localizedNameList}");
		var size = ListUtil.size("${list1}");
		var i = "0";

		while ("${i}" != "${size}") {
			var locale = ListUtil.get("${list1}", "${i}");
			var localizedName = ListUtil.get("${list2}", "${i}");

			PortletEntry.inputLocalizedName(
				language = "${locale}",
				localizedName = "${localizedName}");

			var i = ${i} + 1;
			var i = StringUtil.valueOf("${i}");
		}

		PortletEntry.save();
	}

	macro addPage {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		if (IsElementPresent(locator1 = "Message#EMPTY_INFO_TAGLIB")) {
			PagesAdmin.gotoAddFirstPage(pageType = "Page");
		}
		else {
			AssertClick(
				key_breadcrumbName = "Pages",
				locator1 = "Breadcrumb#BREADCRUMB_ENTRY_EXACT_MATCH",
				value1 = "Pages");

			LexiconEntry.gotoAddMenuItem(menuItem = "Page");
		}

		PagesAdmin._addPage(
			assertCheckboxMissing = "${assertCheckboxMissing}",
			categoryName = "${categoryName}",
			collectionName = "${collectionName}",
			componentName = "${componentName}",
			customDescription = "${customDescription}",
			customTitle = "${customTitle}",
			inheritChanges = "${inheritChanges}",
			linkPageName = "${linkPageName}",
			navigationMenus = "${navigationMenus}",
			openGraph = "${openGraph}",
			pageName = "${pageName}",
			pageTemplateName = "${pageTemplateName}",
			pageTypeURL = "${pageTypeURL}",
			portlet = "${portlet}",
			sitePageType = "${sitePageType}",
			vocabularyName = "${vocabularyName}");
	}

	macro addPageUnderSitePagesVariation {
		LexiconEntry.gotoAddMenuItem(menuItem = "Page");

		PagesAdmin._selectPageType(
			collectionName = "${collectionName}",
			pageTemplateName = "${pageTemplateName}",
			sitePageType = "${sitePageType}");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		PortletEntry.inputName(name = "${pageName}");

		Button.clickAdd();

		SelectFrame.selectFrameTop();

		VerifyElementPresent(locator1 = "Message#SUCCESS");

		AssertVisible(locator1 = "TextInput#NAME");

		Button.click(button = "Save");

		WaitForSPARefresh();
	}

	macro addPrivateChildPage {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		PagesAdmin.togglePrivacy(privacy = "Private Pages");

		PagesAdmin.addChildPage(
			assertCheckboxMissing = "${assertCheckboxMissing}",
			childPageName = "${childPageName}",
			navigationMenus = "${navigationMenus}",
			pageTemplateName = "${pageTemplateName}",
			parentPageName = "${parentPageName}",
			sitePageType = "${sitePageType}");
	}

	macro addPrivatePage {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		if ("${siteTemplate}" == "true") {
			LexiconEntry.gotoAddMenuItem(menuItem = "Add Site Template Page");
		}
		else if (IsElementPresent(locator1 = "Message#EMPTY_INFO_TAGLIB")) {
			PagesAdmin.gotoAddFirstPage(pageType = "Private Page");
		}
		else {
			AssertClick(
				key_breadcrumbName = "Pages",
				locator1 = "Breadcrumb#BREADCRUMB_ENTRY",
				value1 = "Pages");

			LexiconEntry.gotoAddMenuItem(menuItem = "Private Page");
		}

		PagesAdmin._addPage(
			assertCheckboxMissing = "${assertCheckboxMissing}",
			navigationMenus = "${navigationMenus}",
			pageName = "${pageName}",
			pageTemplateName = "${pageTemplateName}",
			sitePageType = "${sitePageType}");
	}

	macro addPublicChildPage {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		PagesAdmin.togglePrivacy(privacy = "Public Pages");

		PagesAdmin.addChildPage(
			assertCheckboxMissing = "${assertCheckboxMissing}",
			childPageName = "${childPageName}",
			navigationMenus = "${navigationMenus}",
			pageTemplateName = "${pageTemplateName}",
			parentPageName = "${parentPageName}",
			sitePageType = "${sitePageType}");
	}

	macro addPublicPage {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		if (IsElementPresent(locator1 = "Message#EMPTY_INFO_TAGLIB")) {
			PagesAdmin.gotoAddFirstPage(pageType = "Public Page");
		}
		else {
			AssertClick(
				key_breadcrumbName = "Pages",
				locator1 = "Breadcrumb#BREADCRUMB_ENTRY_EXACT_MATCH",
				value1 = "Pages");

			LexiconEntry.gotoAddMenuItem(menuItem = "Public Page");
		}

		PagesAdmin._addPage(
			assertCheckboxMissing = "${assertCheckboxMissing}",
			categoryName = "${categoryName}",
			collectionName = "${collectionName}",
			componentName = "${componentName}",
			customDescription = "${customDescription}",
			customTitle = "${customTitle}",
			inheritChanges = "${inheritChanges}",
			linkPageName = "${linkPageName}",
			navigationMenus = "${navigationMenus}",
			openGraph = "${openGraph}",
			pageName = "${pageName}",
			pageTemplateName = "${pageTemplateName}",
			pageTypeURL = "${pageTypeURL}",
			portlet = "${portlet}",
			sitePageType = "${sitePageType}",
			vocabularyName = "${vocabularyName}");
	}

	macro addPublicPageUnderSitePagesVariation {
		LexiconEntry.gotoAddMenuItem(menuItem = "Public Page");

		PagesAdmin._selectPageType(
			collectionName = "${collectionName}",
			pageTemplateName = "${pageTemplateName}",
			sitePageType = "${sitePageType}");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		PortletEntry.inputName(name = "${pageName}");

		Button.clickAdd();

		SelectFrame.selectFrameTop();

		VerifyElementPresent(locator1 = "Message#SUCCESS");

		AssertVisible(locator1 = "TextInput#NAME");

		Button.click(button = "Save");

		WaitForSPARefresh();
	}

	macro cannotDeletePagesAssociatedWithSiteTemplate {
		if (isSet(pageName)) {
			Click(
				key_itemName = "${pageName}",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM");
		}

		Click.waitForMenuToggleJSClick(
			key_pageName = "${page}",
			locator1 = "PagesAdmin#LIST_GROUP_ITEM_ELLIPSIS_ICON");

		MenuItem.viewNotPresent(menuItem = "Delete");

		Click.waitForMenuToggleJSClick(
			key_pageName = "${page}",
			locator1 = "PagesAdmin#LIST_GROUP_ITEM_ELLIPSIS_ICON");

		PortletEntry.selectAll();

		AssertElementPresent(
			key_text = "trash",
			locator1 = "Icon#ANY_DISABLED");
	}

	macro changeLogo {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "${pageName}");

		Navigator.gotoNavTab(navTab = "Advanced");

		PagesAdmin.uploadLogo(logoFile = "${logoFile}");
	}

	macro changeSiteCurrentTheme {
		if (IsElementPresent(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS")) {
			Click(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Configuration");
		}
		else {
			PagesAdmin.togglePrivacy(privacy = "${privacy}");

			Click(
				key_pageName = "${privacy}",
				locator1 = "Icon#COG_PAGE");
		}

		Navigator.gotoNavTab(navTab = "Look and Feel");

		Theme.changeCurrentTheme(themeName = "${themeName}");

		PortletEntry.save();
	}

	macro changeWidgetPageCurrentTheme {
		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "${pageName}");

		Navigator.gotoNavTab(navTab = "Look and Feel");

		Theme.configureLookAndFeelSpecificLook();

		Theme.changeCurrentTheme(themeName = "${themeName}");

		PortletEntry.save();
	}

	macro configureChildPage {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "${pageName}",
			parentPagesHierarchy = "${parentPagesHierarchy}");

		PagesAdmin._configurePage(
			columnName = "${columnName}",
			componentName = "${componentName}",
			layoutPageTemplateName = "${layoutPageTemplateName}",
			pageTypeURL = "${pageTypeURL}",
			portlet = "${portlet}",
			sitePageType = "${sitePageType}");

		PortletEntry.save();
	}

	macro configurePage {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		if (isSet(privacy)) {
			PagesAdmin.togglePrivacy(privacy = "${privacy}");
		}

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "${pageName}");

		PagesAdmin._configurePage(
			columnName = "${columnName}",
			componentName = "${componentName}",
			layoutPageTemplateName = "${layoutPageTemplateName}",
			pageTypeURL = "${pageTypeURL}",
			portlet = "${portlet}",
			sitePageType = "${sitePageType}");

		PortletEntry.save();
	}

	macro convertToContentPageByIcon {
		for (var pageName : list "${pageNameList}") {
			PagesAdmin.selectPageItem(pageName = "${pageName}");
		}

		ClickNoError(
			key_text = "page",
			locator1 = "ManagementBar#ANY_ICON");

		AssertConfirm(value1 = "Are you sure you want to convert the selected pages?");
	}

	macro deleteFriendlyURL {
		Navigator.gotoNavTab(navTab = "General");

		PortletEntry.changeLocale(
			fieldName = "Name",
			locale = "${locale}");

		Type(
			inputFieldId = "friendlyURL",
			locator1 = "TextInput#INPUT_ID",
			value1 = " ");

		PortletEntry.save();
	}

	macro deleteLogo {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		if (isSet(pageName)) {
			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "${pageName}");

			Navigator.gotoNavTab(navTab = "Advanced");
		}
		else {
			LexiconEntry.gotoHeaderMenuItem(menuItem = "Configure");

			Panel.expandPanel(panel = "Logo");
		}

		AssertClick(
			key_text = "Delete",
			locator1 = "Button#ANY",
			value1 = "Delete");

		PortletEntry.save();
	}

	macro deletePage {
		WaitForPageLoad();

		Click(
			key_pageName = "${pageName}",
			locator1 = "PagesAdmin#LIST_GROUP_ITEM_ELLIPSIS_ICON");

		MenuItem.click(menuItem = "Delete");

		if (isSet(hasChidren) && isSet(hasScopeGroup)) {
			AssertTextEquals(
				locator1 = "Modal#BODY",
				value1 = "Are you sure you want to delete the page &quot;${pageName}&quot;? This page serves as a scope for content and also contains child pages. Any content scoped to this page and child pages will also be removed.");
		}
		else if (isSet(hasChildren)) {
			AssertTextEquals(
				locator1 = "Modal#BODY",
				value1 = "Are you sure you want to delete the page &quot;${pageName}&quot;? This page contains child pages that will also be removed.");
		}
		else if (isSet(hasScopeGroup)) {
			AssertTextEquals(
				locator1 = "Modal#BODY",
				value1 = "Are you sure you want to delete the page &quot;${pageName}&quot;? This page serves as a scope for content. Any content that is scoped to this page will also be removed.");
		}
		else {
			AssertTextEquals(
				locator1 = "Modal#BODY",
				value1 = "Are you sure you want to delete the page &quot;${pageName}&quot;? It will be removed immediately.");
		}

		Click(
			key_text = "Delete",
			locator1 = "Modal#MODAL_FOOTER_BUTTON");

		if (isSet(failure)) {
			if (IsElementPresent(locator1 = "Message#ERROR_2")) {
				Alert.viewRequestFailedToComplete();

				AssertTextEquals(
					locator1 = "Message#ERROR_2",
					value1 = "${failure}");
			}
			else {
				AssertTextEquals(
					locator1 = "Message#ERROR",
					value1 = "${failure}");
			}
		}
		else {
			Alert.viewSuccessMessage();
		}
	}

	macro editFriendlyURL {
		Type(
			inputFieldId = "friendlyURL",
			locator1 = "TextInput#INPUT_ID",
			value1 = "${friendlyURLEdit}");

		PortletEntry.save();
	}

	macro editName {
		Navigator.gotoNavTab(navTab = "General");

		PortletEntry.inputName(name = "${pageNameEdit}");

		PortletEntry.save();
	}

	macro editSeoMetadata {
		Navigator.gotoNavTab(navTab = "SEO");

		Type.typeClickAt(
			key_text = "Title",
			locator1 = "TextInput#ANY",
			value1 = "${htmlTitle}");

		Type.typeClickAt(
			key_text = "Description",
			locator1 = "TextInput#ANY",
			value1 = "${metaTagsDescription}");

		Type.typeClickAt(
			key_text = "keywords",
			locator1 = "TextArea#ANY",
			value1 = "${metaTagsKeywords}");

		PortletEntry.save();
	}

	macro expandPageTree {
		if (!(isSet(depth))) {
			var depth = "1";
		}

		var count = "0";

		while ("${count}" != "${depth}") {
			var index = ${count} + 1;

			Click(
				key_depth = "${index}",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM_DEPTH");

			var count = ${count} + 1;
		}
	}

	macro getFriendlyURL {
		var baseURL = "${baseURL}";

		if (!(isSet(baseURL))) {
			var baseURL = PropsUtil.get("portal.url");
		}

		var key_friendlyURL = "";
		var friendlyURL = selenium.getElementValue("PagesAdmin#FRIENDLY_URL");

		return "${baseURL}/web/guest${friendlyURL}";
	}

	@summary = "Go to the page creation form through the empty-result-message taglib"
	macro gotoAddFirstPage {
		var key_menuItem = "${pageType}";

		AssertVisible(locator1 = "Message#EMPTY_INFO_TAGLIB");

		Click.waitForMenuToggleJSClick(locator1 = "Dropdown#EMPTY_MESSAGE_DROPDOWN");

		Click(locator1 = "MenuItem#DROPDOWN_MENU_ITEM");
	}

	macro gotoFriendlyURLHistory {
		Click(locator1 = "Icon#FRIENDLY_URL_HISTORY");
	}

	@summary = "Go to the ellipsis menu item of a page. Parent pages hierarchy is required to navigate to child pages."
	macro gotoPageEllipsisMenuItem {
		PagesAdmin.openPageEllipsisMenu(
			pageName = "${pageName}",
			parentPage = "${parentPage}",
			parentPagesHierarchy = "${parentPagesHierarchy}");

		MenuItem.click(menuItem = "${menuItem}");
	}

	macro manageDeviceFamilyActions {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Manage Actions",
			rowEntry = "${deviceFamilyName}");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		Click(
			key_text = "Add Action",
			locator1 = "Button#ANY");

		PortletEntry.inputName(name = "${actionName}");

		Select(
			key_selectFieldLabel = "Type",
			locator1 = "Select#ANY",
			value1 = "${actionType}");

		if ("${actionType}" == "Redirect to Site") {
			Select(
				key_selectFieldLabel = "Site",
				locator1 = "Select#ANY",
				value1 = "${siteName}");

			Select(
				key_selectFieldLabel = "Page",
				locator1 = "Select#ANY",
				value1 = "${pageName}");
		}
		else if ("${actionType}" == "Layout Template Modification") {
			Click(
				key_card = "${columnName}",
				locator1 = "Card#CARD");
		}
		else if ("${actionType}" == "Redirect to URL") {
			Type(
				locator1 = "TextInput#URL",
				value1 = "${actionURL}");
		}
		else {
			Check(
				key_text = "${themeName}",
				locator1 = "TextInput#ANY");
		}

		PortletEntry.save();

		IFrame.closeFrame();
	}

	macro movePageItemUp {
		var key_pageName = "${pageName}";
		var key_pageNameTo = "${pageNameTo}";

		DragAndDrop.javaScriptDragAndDropToUp(
			locator1 = "PagesAdmin#LIST_GROUP_ITEM_DRAG_HANDLER",
			locator2 = "PagesAdmin#LIST_GROUP_ITEM_DROP_TARGET",
			value1 = "");
	}

	@summary = "Open the ellipsis menu of a page. Parent pages hierarchy is required to navigate to child pages."
	macro openPageEllipsisMenu {
		WaitForPageLoad();

		if (isSet(parentPagesHierarchy)) {
			for (var parentPage : list "${parentPagesHierarchy}") {
				Click(
					key_itemName = "${parentPage}",
					locator1 = "PagesAdmin#LIST_GROUP_ITEM");
			}
		}

		Click(
			key_pageName = "${pageName}",
			locator1 = "PagesAdmin#LIST_GROUP_ITEM_ELLIPSIS_ICON");
	}

	macro openPagesAdmin {
		var siteURLKey = StringUtil.replace("${siteURLKey}", " ", "-");
		var siteURLKey = StringUtil.lowerCase("${siteURLKey}");

		Navigator.openWithAppendToBaseURL(
			baseURL = "${baseURL}",
			urlAppend = "group/${siteURLKey}/~/control_panel/manage?p_p_id=com_liferay_layout_admin_web_portlet_GroupPagesPortlet");
	}

	macro removeOldFriendlyURL {
		AssertVisible(
			key_oldFriendlyURL = "${oldFriendlyURL}",
			locator1 = "PagesAdmin#FRIENDLY_URL_HISTORY_ITEM");

		MouseOver(
			key_oldFriendlyURL = "${oldFriendlyURL}",
			locator1 = "PagesAdmin#FRIENDLY_URL_HISTORY_ITEM");

		Click(
			key_oldFriendlyURL = "${oldFriendlyURL}",
			locator1 = "Icon#FRIENDLY_URL_HISTORY_ITEM_DELETE");

		AssertElementNotPresent(
			key_oldFriendlyURL = "${oldFriendlyURL}",
			locator1 = "PagesAdmin#FRIENDLY_URL_HISTORY_ITEM");
	}

	macro restoreOldFriendlyURL {
		MouseOver(
			key_oldFriendlyURL = "${oldFriendlyURL}",
			locator1 = "PagesAdmin#FRIENDLY_URL_HISTORY_ITEM");

		Click(locator1 = "Icon#FRIENDLY_URL_HISTORY_ITEM_RESTORE");

		AssertVisible(
			key_activeURL = "${restoredURL}",
			locator1 = "PagesAdmin#FRIENDLY_URL_ACTIVE_URL");

		AssertVisible(
			key_oldFriendlyURL = "${activeURL}",
			locator1 = "PagesAdmin#FRIENDLY_URL_HISTORY_ITEM");

		Click(locator1 = "Modal#CLOSE_BUTTON");

		AssertVisible(
			inputFieldId = "friendlyURL",
			locator1 = "TextInput#INPUT_ID",
			value1 = "${friendlyURLEdit}");

		PortletEntry.save();
	}

	macro selectPageItem {
		var key_pageName = "${pageName}";

		Check.checkNotVisible(locator1 = "PagesAdmin#LIST_GROUP_ITEM_CHECKBOX");
	}

	@summary = "Delete all pages except the Welcome and Search Page"
	macro tearDownCP {
		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		WaitForPageLoad();

		if (IsElementPresent(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS")) {
			while (IsElementPresent(key_index = "3", locator1 = "PagesAdmin#LIST_GROUP_ITEM_ROW_ELLIPSIS")) {
				Click.waitForMenuToggleJSClick(
					key_index = "3",
					locator1 = "PagesAdmin#LIST_GROUP_ITEM_ROW_ELLIPSIS");

				MenuItem.click(menuItem = "Delete");

				AssertTextEquals.assertPartialText(
					locator1 = "Modal#BODY",
					value1 = "Are you sure you want to delete the page");

				Click(
					key_text = "Delete",
					locator1 = "Modal#MODAL_FOOTER_BUTTON");
			}

			AssertElementNotPresent(
				key_index = "3",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM_ROW_ELLIPSIS");

			while (IsElementPresent(key_pageName = "Home", locator1 = "PagesAdmin#LIST_GROUP_ITEM_CHILD_INDICATOR")) {
				PagesAdmin.expandPageTree(depth = "1");

				Click.waitForMenuToggleJSClick(
					key_index = "3",
					locator1 = "PagesAdmin#LIST_GROUP_ITEM_ROW_ELLIPSIS");

				MenuItem.click(menuItem = "Delete");

				AssertTextEquals.assertPartialText(
					locator1 = "Modal#BODY",
					value1 = "Are you sure you want to delete the page");

				Click(
					key_text = "Delete",
					locator1 = "Modal#MODAL_FOOTER_BUTTON");

				AssertElementNotPresent(
					key_index = "3",
					locator1 = "PagesAdmin#LIST_GROUP_ITEM_ROW_ELLIPSIS");
			}
		}
		else {
			while (IsElementPresent(key_index = "4", locator1 = "PagesAdmin#LIST_GROUP_ITEM_ROW_ELLIPSIS")) {
				Click.waitForMenuToggleJSClick(
					key_index = "4",
					locator1 = "PagesAdmin#LIST_GROUP_ITEM_ROW_ELLIPSIS");

				MenuItem.click(menuItem = "Delete");

				AssertTextEquals.assertPartialText(
					locator1 = "Modal#BODY",
					value1 = "Are you sure you want to delete the page");

				Click(
					key_text = "Delete",
					locator1 = "Modal#MODAL_FOOTER_BUTTON");
			}

			AssertElementNotPresent(
				key_index = "4",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM_ROW_ELLIPSIS");

			while (IsElementPresent(key_pageName = "Home", locator1 = "PagesAdmin#LIST_GROUP_ITEM_CHILD_INDICATOR")) {
				PagesAdmin.expandPageTree(depth = "2");

				Click.waitForMenuToggleJSClick(
					key_index = "4",
					locator1 = "PagesAdmin#LIST_GROUP_ITEM_ROW_ELLIPSIS");

				MenuItem.click(menuItem = "Delete");

				AssertTextEquals.assertPartialText(
					locator1 = "Modal#BODY",
					value1 = "Are you sure you want to delete the page");

				Click(
					key_text = "Delete",
					locator1 = "Modal#MODAL_FOOTER_BUTTON");

				AssertElementNotPresent(
					key_index = "4",
					locator1 = "PagesAdmin#LIST_GROUP_ITEM_ROW_ELLIPSIS");
			}
		}
	}

	macro toggleHiddenFromNavigationMenuWidget {
		if ("${toggleValue}" == "enable") {
			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Hidden from Menu Display",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
		else if ("${toggleValue}" == "disable") {
			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Hidden from Menu Display",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
		else {
			fail("Failed. Please set ${toggleValue} to enable or disable.");
		}
	}

	macro togglePageTemplateInheritChanges {
		if ("${toggleValue}" == "enable") {
			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Inherit Changes",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
		else if ("${toggleValue}" == "disable") {
			Uncheck.uncheckToggleSwitch(
				key_toggleSwitchLabel = "Inherit Changes",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
	}

	macro togglePrivacy {
		WaitForPageLoad();

		if (IsElementNotPresent(key_breadcrumbName = "${privacy}", locator1 = "Breadcrumb#BREADCRUMB_ENTRY_EXACT_MATCH")) {
			Click(
				key_itemName = "${privacy}",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM");
		}
	}

	macro uploadLogo {
		AssertClick(
			key_text = "Change",
			locator1 = "Button#ANY",
			value1 = "Change");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertElementPresent(
			buttonId = "uploadImage",
			locator1 = "Button#BUTTON_ID");

		UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
			locator1 = "TextInput#FILE",
			value1 = "${logoFile}");

		Pause(locator1 = "10000");

		Button.clickDone();

		SelectFrameTop();

		PortletEntry.save();
	}

	macro viewActiveURL {
		AssertVisible(
			key_activeURL = "${activeURL}",
			locator1 = "PagesAdmin#FRIENDLY_URL_ACTIVE_URL");
	}

	macro viewAvailableLanguages {
		WaitForElementPresent(
			key_fieldName = "${fieldName}",
			locator1 = "Button#LOCALIZATION");

		Click(
			key_fieldName = "${fieldName}",
			locator1 = "Button#LOCALIZATION");

		for (var availableLanguage : list "${availableLanguageList}") {
			AssertElementPresent(
				key_locale = "${availableLanguage}",
				locator1 = "Translation#LOCALIZATION_NAME");
		}

		if (isSet(unavailableLanguageList)) {
			for (var unavailableLanguage : list "${unavailableLanguageList}") {
				AssertElementNotPresent(
					key_locale = "${unavailableLanguage}",
					locator1 = "Translation#LOCALIZATION_NAME");
			}
		}

		Click(
			key_fieldName = "${fieldName}",
			locator1 = "Button#LOCALIZATION");
	}

	macro viewBaseFriendlyURL {
		AssertTextEquals(
			locator1 = "PagesAdmin#DETAILS_FRIENDLY_BASE_URL",
			value1 = "${siteFriendlyURL}");
	}

	macro viewFriendlyURL {
		if (isSet(localizedFriendlyURL)) {
			PortletEntry.changeLocale(
				fieldName = "Friendly URL",
				locale = "${localizedFriendlyURL}");
		}

		AssertTextEquals(
			inputFieldId = "friendlyURL",
			locator1 = "TextInput#INPUT_ID",
			value1 = "/${pageName}");
	}

	macro viewOldFriendlyURL {
		if (isSet(lastOldFriendlyURL)) {
			AssertVisible(
				key_oldFriendlyURL = "${lastOldFriendlyURL}",
				locator1 = "PagesAdmin#FRIENDLY_URL_HISTORY_ITEM_LAST");
		}

		AssertVisible(
			key_oldFriendlyURL = "${oldFriendlyURL}",
			locator1 = "PagesAdmin#FRIENDLY_URL_HISTORY_ITEM");
	}

	macro viewOldFriendlyURLNotPresent {
		for (var oldFriendlyURL : list "${oldFriendlyURLList}") {
			AssertElementNotPresent(
				key_oldFriendlyURL = "${oldFriendlyURL}",
				locator1 = "PagesAdmin#FRIENDLY_URL_HISTORY_ITEM");
		}
	}

	macro viewPageItemNotPresent {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		if (isSet(privacy)) {
			PagesAdmin.togglePrivacy(privacy = "${privacy}");
		}

		AssertElementNotPresent(
			key_pageName = "${pageName}",
			locator1 = "PagesAdmin#LIST_GROUP_ITEM");
	}

	macro viewPageItemPresent {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		if (isSet(privacy)) {
			PagesAdmin.togglePrivacy(privacy = "${privacy}");
		}

		if (isSet(depth)) {
			PagesAdmin.expandPageTree(depth = "${depth}");
		}

		AssertElementPresent(
			key_itemName = "${pageName}",
			locator1 = "PagesAdmin#LIST_GROUP_ITEM");
	}

	macro viewPagesOrder {
		var index = "1";

		for (var pageName : list "${pageNameList}") {
			AssertTextEquals(
				key_depth = "${depth}",
				key_index = "${index}",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM_ROW_ENTRY",
				value1 = "${pageName}");

			var index = ${index} + 1;
		}
	}

	macro viewPageStatus {
		if (!(isSet(index))) {
			var index = "1";
		}

		AssertTextEquals(
			index = "${index}",
			key_itemName = "${pageName}",
			locator1 = "PagesAdmin#LIST_GROUP_ITEM_PAGE_STATUS",
			value1 = "${status}");
	}

	macro viewPageTemplate {
		Click(locator1 = "ControlMenu#INFO");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#CUSTOMIZED_PAGE_INFO",
			value1 = "This page is linked to a page template. Disable the automatic propagation of changes to this page to be able to make modifications.");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "${pageName}");

		AssertTextEquals(
			locator1 = "Message#ERROR_3",
			value1 = "Some page settings are unavailable because Inherit Changes is enabled. To change these settings, disable Inherit Changes under the General section.");

		AssertChecked.assertCheckedNotVisible(
			checkboxName = "Inherit Changes",
			locator1 = "Checkbox#ANY_CHECKBOX");
	}

	macro viewPageTemplateTypeNotPresent {
		LexiconCard.viewCardNotPresent(card = "${pageTemplateName}");
	}

	macro viewPageTemplateTypePresent {
		LexiconCard.viewCardPresent(card = "${pageTemplateName}");
	}

	macro viewPageType {
		AssertElementPresent(
			key_pageName = "${pageName}",
			key_pageType = "${pageType}",
			locator1 = "PagesAdmin#LIST_GROUP_ITEM_PAGE_TYPE");
	}

	macro viewPanelPortletList {
		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "${pageName}");

		var key_componentName = "${componentName}";

		if (IsElementPresent(locator1 = "PagesAdmin#DETAILS_PAGE_TYPE_PANEL_COMPONENT_TREE_ARROW")) {
			Click(locator1 = "PagesAdmin#DETAILS_PAGE_TYPE_PANEL_COMPONENT_TREE_ARROW");
		}

		AssertElementPresent(locator1 = "PagesAdmin#DETAILS_PAGE_TYPE_PANEL_COMPONENT_TREE_EXPANDED");

		for (var portletName : list "${portletNameList}") {
			if ("${portletName}" == "Portal Directory") {
				var key_componentOrPortletName = "Directory";
			}
			else {
				var key_componentOrPortletName = StringUtil.extractChars("${portletName}");
			}

			AssertElementPresent(locator1 = "PagesAdmin#PAGE_TYPE_PANEL_CHECKBOX_INPUT");
		}
	}

	macro viewSelectedLayoutColumn {
		AssertElementPresent(
			key_card = "${columnName}",
			locator1 = "Card#CARD_SELECTED");
	}

	macro viewSelectedPageItem {
		AssertChecked.assertCheckedNotVisible(
			key_pageName = "${pageName}",
			locator1 = "PagesAdmin#LIST_GROUP_ITEM_CHECKBOX");
	}

	macro viewSeoMetadata {
		Navigator.gotoNavTab(navTab = "SEO");

		AssertTextEquals(
			key_text = "Title",
			locator1 = "TextInput#ANY",
			value1 = "${htmlTitle}");

		AssertTextEquals(
			key_text = "Description",
			locator1 = "TextInput#ANY",
			value1 = "${metaTagsDescription}");

		AssertTextEquals(
			key_text = "keywords",
			locator1 = "TextArea#ANY",
			value1 = "${metaTagsKeywords}");
	}

	macro viewVocabularyNotPresent {
		Navigator.gotoNavTab(navTab = "SEO");

		AssertElementNotPresent(
			key_vocabularyName = "${vocabularyName}",
			locator1 = "AssetCategorization#CATEGORY_SELECT");
	}

	macro viewWidgetPageCurrentTheme {
		if (IsTextNotEqual(locator1 = "ControlMenu#HEADING", value1 = "Pages")) {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");
		}

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "${pageName}");

		Navigator.gotoNavTab(navTab = "Look and Feel");

		if (isSet(themeName)) {
			AssertTextPresent(value1 = "${themeName}");
		}

		if (isSet(checkThemeSettingList)) {
			for (var themeSetting : list "${checkThemeSettingList}") {
				AssertChecked.assertCheckedNotVisible(
					key_toggleSwitchLabel = "${themeSetting}",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
		}

		if (isSet(uncheckThemeSettingList)) {
			for (var themeSetting : list "${uncheckThemeSettingList}") {
				AssertNotChecked.assertNotCheckedNotVisible(
					key_toggleSwitchLabel = "${themeSetting}",
					locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
			}
		}
	}

}