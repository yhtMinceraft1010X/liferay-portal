definition {

	macro bulkRestoreCP {
		WaitForPageLoad();

		for (var assetName : list "${assetList}") {
			LexiconTable.viewTableEntryTitle(tableEntry = "${assetName}");

			Check(
				key_assetName = "${assetName}",
				locator1 = "RecycleBin#RECYCLE_BIN_ASSET_CHECKBOX");
		}

		Click(locator1 = "Icon#RESTORE");

		Alert.viewSuccessMessage();
	}

	macro clickEllipsisItem {
		LexiconTable.clickEllipsisItem(
			item = "${item}",
			tableEntry = "${assetName}");
	}

	macro deleteCP {
		LexiconTable.viewTableEntryTitle(tableEntry = "${assetName}");

		LexiconTable.viewTableEntryText(
			tableEntry = "${assetName}",
			tableEntryText = "${assetType}");

		LexiconTable.clickEllipsisItem(
			item = "Delete",
			tableEntry = "${assetName}");

		AssertTextEquals(
			locator1 = "Modal#BODY",
			value1 = "Are you sure you want to delete this? It will be deleted immediately.");

		Click(
			key_text = "Delete",
			locator1 = "Modal#MODAL_FOOTER_BUTTON");

		Alert.viewSuccessMessage();

		if ("${multipleAssets}" == "true") {
			AssertNotVisible(locator1 = "Message#EMPTY_INFO");
		}
		else {
			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "The Recycle Bin is empty.");
		}

		LexiconTable.viewTableEntryNotPresent(tableEntry = "${assetName}");
	}

	macro disableRecycleBinViaSiteSettings {
		Click(
			key_itemName = "Recycle Bin",
			locator1 = "ListGroupItem#ITEM_TEXT");

		Uncheck.uncheckToggleSwitchNoErrorNoAssert(locator1 = "Checkbox#ENABLE_RECYCLE_BIN");

		AssertConfirm(value1 = "Disabling the Recycle Bin prevents the restoring of content that has been moved to the Recycle Bin.");

		AssertNotChecked.assertNotCheckedNotVisible(locator1 = "Checkbox#ENABLE_RECYCLE_BIN");

		PortletEntry.save();
	}

	macro emptyCP {
		Click(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

		if (IsElementPresent(locator1 = "RecycleBin#EMPTY_RECYCLE_BIN")) {
			AssertClickNoError(
				locator1 = "RecycleBin#EMPTY_RECYCLE_BIN",
				value1 = "Empty the Recycle Bin");

			AssertConfirm.waitForConfirmation(value1 = "Are you sure you want to empty the Recycle Bin?");

			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "The Recycle Bin is empty.");
		}
	}

	macro gotoEntryViaSuccessMessage {
		var key_assetName = "${assetName}";

		AssertClick(
			locator1 = "RecycleBin#SUCCESS_MESSAGE_CONTENT_LINK",
			value1 = "the Recycle Bin");

		SiteAdmin.viewPortletTitle(portletTitle = "Recycle Bin");
	}

	macro openRecycleBinAdmin {
		Navigator.openWithAppendToBaseURL(urlAppend = "group/${siteURLKey}/~/control_panel/manage/-/recycle_bin/entries");
	}

	macro restoreContentFromFolderCP {
		var key_assetName = "${assetName}";

		LexiconTable.viewTableEntryTitle(tableEntry = "${assetName}");

		LexiconTable.viewTableEntryText(
			tableEntry = "${assetName}",
			tableEntryText = "${assetType}");

		LexiconTable.clickTableEntryTitle(tableEntry = "${assetName}");

		AssertTextEquals(
			key_assetName = "${documentName}",
			locator1 = "RecycleBin#RECYCLE_BIN_FOLDER_DOCUMENT_NAME",
			value1 = "${documentName}");

		RecycleBin.clickEllipsisItem(
			assetName = "${documentName}",
			item = "Restore");

		SelectFrame(locator1 = "RecycleBin#RECYCLE_BIN_FOLDER_WARNING_IFRAME");

		AssertTextEquals(
			locator1 = "Message#USER_BLOCKED",
			value1 = "The original Folder does not exist anymore. Choose a different Folder to restore ${documentName}.");

		AssertClick(
			locator1 = "Button#CHOOSE_THIS_FOLDER",
			value1 = "Choose This Folder");

		SelectFrameTop(value1 = "relative=top");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#RECYCLE_BIN_RESTORE_SUCCESS",
			value1 = "The ${assetType2} ${documentName} was restored to ${assetRestoreLocation}.");
	}

	macro restoreContentWithoutOriginalFolder {
		LexiconTable.viewTableEntryTitle(tableEntry = "${assetName}");

		RecycleBin.clickEllipsisItem(
			assetName = "${assetName}",
			item = "Restore");

		SelectFrame(locator1 = "RecycleBin#RECYCLE_BIN_FOLDER_WARNING_IFRAME");

		AssertTextEquals(
			locator1 = "Message#USER_BLOCKED",
			value1 = "The original Folder does not exist anymore. Choose a different Folder to restore ${assetName}.");

		AssertClick(
			locator1 = "Button#CHOOSE_THIS_FOLDER",
			value1 = "Choose This Folder");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#RECYCLE_BIN_RESTORE_SUCCESS",
			value1 = "The ${assetType} ${assetName} was restored to ${assetRestoreLocation}.");
	}

	macro restoreCP {
		var key_assetName = "${assetName}";

		LexiconTable.viewTableEntryTitle(tableEntry = "${assetName}");

		RecycleBin.clickEllipsisItem(
			assetName = "${assetName}",
			item = "Restore");

		if (isSet(assetType)) {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#RECYCLE_BIN_RESTORE_SUCCESS",
				value1 = "${assetType}");
		}
		else {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#RECYCLE_BIN_RESTORE_SUCCESS",
				value1 = "The item was restored.");
		}

		if (isSet(assetRestoreLocation)) {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#RECYCLE_BIN_RESTORE_SUCCESS",
				value1 = "${assetRestoreLocation}");
		}

		if ("${multipleAssets}" == "true") {
			AssertNotVisible(locator1 = "Message#EMPTY_INFO");
		}
		else {
			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "The Recycle Bin is empty.");
		}

		LexiconTable.viewTableEntryNotPresent(tableEntry = "${assetName}");
	}

	macro restoreOverwriteCP {
		RecycleBin.clickEllipsisItem(
			assetName = "${assetName}",
			item = "Restore");

		Alert.viewErrorMessage(errorMessage = "An entry with name ${assetName} already exists.");

		Click(locator1 = "RecycleBin#RECYCLE_BIN_WARNING_OVERWRITE_RADIO");

		PortletEntry.save();
	}

	macro restoreRenameCP {
		RecycleBin.clickEllipsisItem(
			assetName = "${assetName}",
			item = "Restore");

		Alert.viewErrorMessage(errorMessage = "Error:An entry with name ${assetName} already exists.");

		Check(locator1 = "RecycleBin#RECYCLE_BIN_WARNING_RENAME_RADIO");

		if (isSet(newName)) {
			Type(
				locator1 = "TextInput#NEW_NAME",
				value1 = "${newName}");
		}

		PortletEntry.save();
	}

	macro undoMoveToRecycleBin {
		AssertClick(
			locator1 = "Button#UNDO",
			value1 = "Undo");
	}

	macro viewCP {
		var key_assetName = "${assetName}";

		LexiconTable.viewTableEntryTitleLink(tableEntry = "${assetName}");

		LexiconTable.viewTableEntryText(
			tableEntry = "${assetName}",
			tableEntryText = "${assetType}");

		LexiconTable.viewTableEntryPartialText(
			tableEntry = "${assetName}",
			tableEntryPartialText = "Ago");

		LexiconTable.viewTableEntryText(
			tableEntry = "${assetName}",
			tableEntryText = "${deleteUser}");

		AssertVisible(
			key_tableEntry = "${assetName}",
			locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS");
	}

	macro viewDefaultCP {
		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "The Recycle Bin is empty.");

		LexiconTable.viewTableEntryNotPresent(tableEntry = "${assetName}");
	}

	macro viewDuplicateNames {
		var key_assetName = "${assetName}";
		var key_rowNumber = "1";

		AssertTextEquals(
			locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER_TD_2",
			value1 = "${assetName}");

		var key_rowNumber = "2";

		AssertTextEquals(
			locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER_TD_2",
			value1 = "${assetName}");
	}

	macro viewEntry {
		var key_assetName = "${assetName}";

		LexiconTable.viewTableEntryTitle(tableEntry = "${assetName}");

		Click(
			key_tableEntry = "${assetName}",
			locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS");

		MenuItem.viewPresent(menuItem = "Restore");

		MenuItem.viewPresent(menuItem = "Delete");
	}

}