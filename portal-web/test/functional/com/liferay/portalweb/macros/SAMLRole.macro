definition {

	macro configure {
		Select(
			locator1 = "CPSAMLAdmin#SAML_ROLE_SELECT",
			value1 = "${samlRoleType}");

		Type(
			locator1 = "CPSAMLAdmin#SAML_ENTITY_ID_FIELD",
			value1 = "${samlEntityId}");

		AssertClick(
			locator1 = "Button#SAVE",
			value1 = "Save");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#SUCCESS",
			value1 = "Your request completed successfully.");
	}

	macro configureCertificateAndPrivateKey {
		WaitForLiferayEvent.initializeLiferayEventLog();

		if (isSet(keystoreEnabled)) {
			AssertClick(
				key_certificateUsage = "${certificateUsage}",
				locator1 = "CPSAMLAdmin#AUTHENTICATE_CERTIFICATE",
				value1 = "Authenticate Certificate");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");
		}
		else {
			SAMLRole.createCertificate(certificateUsage = "${certificateUsage}");
		}

		Type(
			locator1 = "CPSAMLAdmin#CERTIFICATE_AND_PRIVATE_KEY_KEY_PASSWORD_FIELD",
			value1 = "${samlKeyPassword}");

		AssertClick(
			locator1 = "Button#SUBMIT",
			value1 = "Save");

		WaitForElementNotPresent(locator1 = "IFrame#MODAL_BODY");

		AssertElementPresent(
			key_certificateUsage = "${certificateUsage}",
			locator1 = "CPSAMLAdmin#DOWNLOAD_CERTIFICATE");

		AssertElementPresent(
			key_certificateUsage = "${certificateUsage}",
			locator1 = "CPSAMLAdmin#REPLACE_CERTIFICATE");
	}

	macro configureIdentityProvider {
		if (isSet(idpSessionIdleTimeout)) {
			Type(
				locator1 = "CPSAMLAdmin#IDENTITY_PROVIDER_SESSION_IDLE_TIMEOUT",
				value1 = "${idpSessionIdleTimeout}");
		}

		if (isSet(idpSessionMaximumAge)) {
			Type(
				locator1 = "CPSAMLAdmin#IDENTITY_PROVIDER_SESSION_MAXIMUM_AGE",
				value1 = "${idpSessionMaximumAge}");
		}

		AssertClick(
			locator1 = "Button#SUBMIT",
			value1 = "Save");
	}

	macro convertEncryptionCertificate {
		AntCommand(
			locator1 = "build-test.xml",
			value1 = "prepare-encryption-PCKS12-certificate");
	}

	macro convertSingingCertificate {
		AntCommand(
			locator1 = "build-test.xml",
			value1 = "prepare-signing-PCKS12-certificate");
	}

	macro createCertificate {
		AssertClick(
			key_certificateUsage = "${certificateUsage}",
			locator1 = "CPSAMLAdmin#CREATE_CERTIFICATE",
			value1 = "Create Certificate");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		Type(
			locator1 = "CPSAMLAdmin#CERTIFICATE_AND_PRIVATE_KEY_COMMON_NAME_FIELD",
			value1 = "Liferay QA");

		Type(
			locator1 = "CPSAMLAdmin#CERTIFICATE_AND_PRIVATE_KEY_ORGANIZATION_FIELD",
			value1 = "Liferay");

		Type(
			locator1 = "CPSAMLAdmin#CERTIFICATE_AND_PRIVATE_KEY_COUNTRY_FIELD",
			value1 = "USA");

		if ("${certificateUsage}" == "SIGNING") {
			Select(
				locator1 = "CPSAMLAdmin#CERTIFICATE_AND_PRIVATE_KEY_KEY_ALGORITHM_SELECT",
				value1 = "RSA");
		}

		Select(
			locator1 = "CPSAMLAdmin#CERTIFICATE_AND_PRIVATE_KEY_KEY_LENGTH_SELECT",
			value1 = "2048");
	}

	macro deleteCertificate {
		ClickNoError(
			locator1 = "CPSAMLAdmin#DELETE_CERTIFICATE",
			value1 = "Delete Certificate");

		AssertConfirm.waitForConfirmation(value1 = "Are you sure you want to delete this certificate from the keystore?");

		Alert.viewSuccessMessage();
	}

	macro enable {
		AssertTextEquals(
			locator1 = "CPSAMLAdmin#SAML_ENTITY_ID_FIELD",
			value1 = "${samlEntityId}");

		Check(locator1 = "CPSAMLAdmin#SAML_ENABLED_CHECKBOX");

		AssertClick(
			locator1 = "Button#SAVE",
			value1 = "Save");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#SUCCESS",
			value1 = "Your request completed successfully.");
	}

	macro importCertificateAndPrivateKey {
		if ("${certificateUsage}" == "SIGNING") {
			AssertClick(
				key_certificateUsage = "SIGNING",
				locator1 = "CPSAMLAdmin#REPLACE_CERTIFICATE",
				value1 = "Replace Certificate");
		}
		else {
			AssertClick(
				key_certificateUsage = "ENCRYPTION",
				locator1 = "CPSAMLAdmin#REPLACE_CERTIFICATE",
				value1 = "Replace Certificate");
		}

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		Click(locator1 = "CPSAMLAdmin#IMPORT_CERTIFICATE");

		Pause(locator1 = "1000");

		AssertElementPresent(locator1 = "Button#SELECT_FILE");

		if ("${certificateUsage}" == "SIGNING") {
			UploadTempFile(
				locator1 = "TextInput#FILE",
				value1 = "samlidp.p12");

			Type(
				locator1 = "CPSAMLAdmin#CERTIFICATE_AND_PRIVATE_KEY_KEYSTORE_PASSWORD_FIELD",
				value1 = "samlidp");
		}
		else {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");
			var filePath = "${liferayHome}-1/data";

			UploadTempFile(
				locator1 = "TextInput#FILE",
				value1 = "samlsp_encryption.p12");

			Type(
				locator1 = "CPSAMLAdmin#CERTIFICATE_AND_PRIVATE_KEY_KEYSTORE_PASSWORD_FIELD",
				value1 = "samlsp");
		}

		Click(locator1 = "Button#CONTINUE");

		var key_keyStoreAlias = "${keyStoreAlias}";

		Click(locator1 = "CPSAMLAdmin#CERTIFICATE_AND_PRIVATE_KEY_KEYSTORE_ALIAS_RADIO");

		Button.clickImport();

		if ("${certificateUsage}" == "SIGNING") {
			AssertElementPresent(
				key_certificateUsage = "SIGNING",
				locator1 = "CPSAMLAdmin#REPLACE_CERTIFICATE");
		}
		else {
			AssertElementPresent(
				key_certificateUsage = "ENCRYPTION",
				locator1 = "CPSAMLAdmin#REPLACE_CERTIFICATE");
		}
	}

}