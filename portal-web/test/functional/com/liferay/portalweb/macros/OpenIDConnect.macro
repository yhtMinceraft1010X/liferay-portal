definition {

	macro acceptConditions {
		if (IsElementPresent.pauseIsElementPresent(locator1 = "GoogleLogin#ALLOW")) {
			Click(locator1 = "GoogleLogin#ALLOW");
		}

		if (IsElementPresent(locator1 = "Button#I_AGREE")) {
			SignIn.agreeToTermsOfUse();
		}

		if (IsElementPresent.pauseIsElementPresent(locator1 = "TextInput#ANSWER")) {
			Type(
				locator1 = "TextInput#ANSWER",
				value1 = "test");

			KeyPress(
				locator1 = "TextInput#ANSWER",
				value1 = "\RETURN");
		}
	}

	macro accountSignIn {
		if (!(isSet(specificURL))) {
			Navigator.openURL();
		}
		else {
			Navigator.openSpecificURL(url = "${specificURL}");
		}

		AssertClick(
			locator1 = "UserBar#USER_SIGN_IN",
			value1 = "Sign In");

		Click(locator1 = "Icon#OPENID_CONNECT");

		Click(locator1 = "Button#SIGN_IN");

		Type(
			locator1 = "OpenIDConnect#LOGIN_USERNAME_FIELD",
			value1 = "${userEmailAddress}");

		if (IsElementPresent(locator1 = "MicrosoftLogin#LOGIN_NEXT_BUTTON")) {
			Click(locator1 = "MicrosoftLogin#LOGIN_NEXT_BUTTON");
		}

		if (IsElementPresent(locator1 = "GoogleLogin#LOGIN_NEXT_BUTTON")) {
			Click(locator1 = "GoogleLogin#LOGIN_NEXT_BUTTON");
		}

		Type(
			locator1 = "OpenIDConnect#LOGIN_PASSWORD_FIELD",
			value1 = "${userPassword}");

		if (IsElementPresent(locator1 = "OpenIDConnect#LOGIN_SIGN_IN_BUTTON")) {
			Click(locator1 = "OpenIDConnect#LOGIN_SIGN_IN_BUTTON");
		}
		else {
			Click(locator1 = "GoogleLogin#LOGIN_NEXT_BUTTON");
		}

		if (IsElementPresent(locator1 = "MicrosoftLogin#LOGIN_YES_BUTTON")) {
			Click(locator1 = "MicrosoftLogin#LOGIN_YES_BUTTON");
		}
	}

	macro addProvider {
		Button.clickAdd();

		FormFields.editTextMultiline(
			fieldName = "providerName",
			fieldValue = "${providerName}");

		FormFields.editTextMultiline(
			fieldName = "openIdConnectClientId",
			fieldValue = "${openIdConnectClientId}");

		FormFields.editTextMultiline(
			fieldName = "openIdConnectClientSecret",
			fieldValue = "${openIdConnectClientSecret}");

		if (isSet(discoveryEndpoint)) {
			FormFields.editTextMultiline(
				fieldName = "discoveryEndPoint",
				fieldValue = "${discoveryEndpoint}");
		}
		else {
			FormFields.editTextMultiline(
				fieldName = "discoveryEndPoint",
				fieldValue = "https://accounts.google.com/.well-known/openid-configuration");
		}

		if (isSet(customAuthorizationRequestParameters)) {
			FormFields.editTextMultiline(
				fieldName = "customAuthorizationRequestParameters",
				fieldValue = "${customAuthorizationRequestParameters}");
		}

		if (isSet(customTokenRequestParameters)) {
			FormFields.editTextMultiline(
				fieldName = "customTokenRequestParameters",
				fieldValue = "${customTokenRequestParameters}");
		}

		FormFields.editTextMultiline(
			fieldName = "registeredIdTokenSigningAlg",
			fieldValue = "RS256");

		PortletEntry.save();
	}

	macro enableOpenIdConnect {
		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "SSO",
			configurationName = "OpenID Connect",
			configurationScope = "System Scope");

		FormFields.enableCheckbox(fieldName = "Enabled");

		AssertClick(
			locator1 = "Button#SAVE",
			value1 = "Save");

		WaitForElementPresent(locator1 = "Button#UPDATE");
	}

	macro enableOpenIDConnectCustomParametersDebugLogs {
		ServerAdministration.addCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = "com.liferay.portal.security.sso.openid.connect.internal.OpenIdConnectAuthenticationHandlerImpl");

		ServerAdministration.addCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = "com.liferay.portal.security.sso.openid.connect.internal.util.OpenIdConnectTokenRequestUtil");
	}

	macro enableOpenIDConnectDebugLogs {
		ServerAdministration.openServerAdmin();

		ServerAdministration.addCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = "com.liferay.login.authentication.openid.connect.web");
	}

	macro setTokenRefreshOffset {
		AssertElementPresent(locator1 = "OpenIDConnect#TOKEN_REFRESH_OFFSET");

		AssertTextEquals(
			locator1 = "OpenIDConnect#TOKEN_REFRESH_OFFSET",
			value1 = "30");

		Type(
			locator1 = "OpenIDConnect#TOKEN_REFRESH_OFFSET",
			value1 = "${expirationTime}");

		AssertClick(
			locator1 = "Button#SUBMIT",
			value1 = "Update");

		AssertTextEquals(
			locator1 = "OpenIDConnect#TOKEN_REFRESH_OFFSET",
			value1 = "${expirationTime}");
	}

	macro viewNoProvider {
		AssertClick(
			locator1 = "UserBar#USER_SIGN_IN",
			value1 = "Sign In");

		AssertElementNotPresent(locator1 = "Icon#OPENID_CONNECT");
	}

	macro viewProvider {
		AssertClick(
			locator1 = "UserBar#USER_SIGN_IN",
			value1 = "Sign In");

		AssertElementPresent(locator1 = "Icon#OPENID_CONNECT");

		Click(locator1 = "Icon#OPENID_CONNECT");

		AssertElementPresent(locator1 = "OpenIDConnectLogin#OPENID_CONNECT_PROVIDER_NAME_LABEL");

		Click(locator1 = "OpenIDConnectLogin#OPENID_CONNECT_DROPDOWN_MENU");

		AssertElementPresent(
			key_providerNname = "Google",
			locator1 = "OpenIDConnectLogin#OPENID_CONNECT_DROPDOWN_OPTION");
	}

}