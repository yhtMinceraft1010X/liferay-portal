definition {

	macro addAssociatedAssetType {
		Panel.expandPanel(panel = "Associated Asset Types");

		if (!(isSet(rowNumber))) {
			var rowNumber = "1";
		}

		Select(
			key_rowNumber = "${rowNumber}",
			locator1 = "CategoriesEditVocabulary#ASSOCIATED_ASSET_TYPES_SELECT_N",
			value1 = "${assetType}");

		if ("${required}" == "true") {
			var key_rowNumber = "${rowNumber}";

			Check.checkToggleSwitch(locator1 = "ToggleSwitch#REQUIRED");
		}
	}

	@summary = "Add a vocabulary named '${vocabularyName}'"
	macro addCP {
		Vocabulary.gotoAddVocabulary();

		PortletEntry.inputName(name = "${vocabularyName}");

		if (isSet(vocabularyDescription)) {
			PortletEntry.inputDescription(description = "${vocabularyDescription}");
		}

		if ("${allowMultipleCategories}" == "false") {
			Uncheck.uncheckToggleSwitch(locator1 = "CategoriesEditVocabulary#ALLOW_MULTIPLE_CATEGORIES_TOGGLE_SWITCH");
		}

		if (isSet(locale)) {
			PortletEntry.changeLocale(
				fieldName = "Name",
				locale = "${locale}");

			PortletEntry.inputName(name = "${localizationName}");
		}

		if (isSet(locale2)) {
			PortletEntry.changeLocale(
				fieldName = "Name",
				locale = "${locale2}");

			PortletEntry.inputName(name = "${localization2Name}");
		}

		Button.clickNoError(button = "Save");

		AssertConfirm.assertPartialConfirmation(value1 = "Are you sure you want to create this vocabulary with public visibility?");

		Alert.viewSuccessMessage();
	}

	macro addInternalVocabulary {
		Vocabulary.gotoAddVocabulary();

		PortletEntry.inputName(name = "${vocabularyName}");

		Click(locator1 = "Categories#INTERNAL_VISIBILITY");

		Button.clickNoError(button = "Save");

		AssertConfirm.assertPartialConfirmation(value1 = "Are you sure you want to create this vocabulary only with internal visibility?");

		Alert.viewSuccessMessage();
	}

	macro addViewableByCP {
		Vocabulary.gotoAddVocabulary();

		PortletEntry.inputName(name = "${vocabularyName}");

		Panel.expandPanel(panel = "Permissions");

		Select(
			locator1 = "Select#PERMISSIONS",
			value1 = "${viewableBy}");

		Button.clickNoError(button = "Save");

		AssertConfirm.assertPartialConfirmation(value1 = "Are you sure you want to create this vocabulary with public visibility?");

		Alert.viewSuccessMessage();

		AssertTextEquals(
			key_navNested = "${vocabularyName}",
			locator1 = "NavNested#NAV_NESTED_LINK",
			value1 = "${vocabularyName}");
	}

	macro addVocabularyWithNullTitle {
		Vocabulary.gotoAddVocabulary();

		PortletEntry.inputName(name = " ");

		Button.clickSave();

		Alert.viewRequiredField();
	}

	macro addWithAssociatedAssetTypeCP {
		Vocabulary.gotoAddVocabulary();

		PortletEntry.inputName(name = "${vocabularyName}");

		Vocabulary.addAssociatedAssetType(
			assetType = "${assetType}",
			required = "${required}",
			rowNumber = "${rowNumber}");

		if (isSet(assetSubtype)) {
			Select(
				locator1 = "Select#ASSET_SUBTYPE",
				value1 = "${assetSubtype}");
		}

		Button.clickNoError(button = "Save");

		AssertConfirm.assertPartialConfirmation(value1 = "Are you sure you want to create this vocabulary with public visibility?");

		Alert.viewSuccessMessage();

		AssertTextEquals(
			key_navNested = "${vocabularyName}",
			locator1 = "NavNested#NAV_NESTED_LINK",
			value1 = "${vocabularyName}");
	}

	macro assertVocabularyVisibilityNonEditable {
		Navigator.gotoNavNested(navNested = "${vocabularyName}");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Edit");

		AssertElementPresent(
			key_visibilityType = "${visibilityType}",
			locator1 = "Categories#VOCABULARY_VISIBILITY_DISABLED");

		Button.clickCancel();
	}

	macro deleteAssociatedAssetTypeViaVocabularyCP {
		Navigator.gotoNavNested(navNested = "${vocabularyName}");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Edit");

		Panel.expandPanel(panel = "Associated Asset Types");

		Click(locator1 = "CategoriesEditVocabulary#ASSOCIATED_ASSET_TYPES_DELETE_BUTTON_2");

		PortletEntry.save();
	}

	macro deleteByIconCP {
		WaitForLiferayEvent.initializeLiferayEventLog();

		Click.waitForMenuToggleJSClick(locator1 = "NavNested#NAV_NESTED_ELLIPSIS");

		MenuItem.click(menuItem = "Delete");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertTextEquals(
			key_vocabularyName = "${vocabularyName}",
			locator1 = "Categories#VOCABULARY_ENTRY",
			value1 = "${vocabularyName}");

		PortletEntry.selectAll();

		SelectFrame(value1 = "relative=top");

		Click(
			key_text = "Delete",
			locator1 = "Modal#MODAL_FOOTER_BUTTON");

		AssertTextEquals(
			locator1 = "Modal#BODY",
			value1 = "Are you sure you want to delete this? It will be deleted immediately.");

		Click(
			key_text = "Delete",
			locator1 = "Modal#MODAL_FOOTER_BUTTON");

		Alert.viewSuccessMessage();

		AssertTextNotPresent(
			key_navNested = "${vocabularyName}",
			locator1 = "NavNested#NAV_NESTED_LINK",
			value1 = "${vocabularyName}");
	}

	macro deleteByMenuCP {
		WaitForLiferayEvent.initializeLiferayEventLog();

		Click.waitForMenuToggleJSClick(locator1 = "NavNested#NAV_NESTED_ELLIPSIS");

		MenuItem.click(menuItem = "Delete");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		Check(
			key_vocabularyName = "${vocabularyName}",
			locator1 = "Categories#VOCABULARY_ENTRY_CHECKBOX");

		SelectFrame(value1 = "relative=top");

		Click(
			key_text = "Delete",
			locator1 = "Modal#MODAL_FOOTER_BUTTON");

		AssertTextEquals(
			locator1 = "Modal#BODY",
			value1 = "Are you sure you want to delete this? It will be deleted immediately.");

		Click(
			key_text = "Delete",
			locator1 = "Modal#MODAL_FOOTER_BUTTON");

		Alert.viewSuccessMessage();

		AssertTextNotPresent(
			key_navNested = "${vocabularyName}",
			locator1 = "NavNested#NAV_NESTED_LINK",
			value1 = "${vocabularyName}");
	}

	macro editCP {
		Navigator.gotoNavNested(navNested = "${vocabularyName}");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Edit");

		if (isSet(vocabularyNameEdit)) {
			PortletEntry.inputTitle(title = "${vocabularyNameEdit}");
		}

		if ("${allowMultipleCategories}" == "false") {
			Uncheck.uncheckToggleSwitch(locator1 = "CategoriesEditVocabulary#ALLOW_MULTIPLE_CATEGORIES_TOGGLE_SWITCH");
		}
		else if ("${allowMultipleCategories}" == "true") {
			Check.checkToggleSwitch(locator1 = "CategoriesEditVocabulary#ALLOW_MULTIPLE_CATEGORIES_TOGGLE_SWITCH");
		}

		PortletEntry.save();

		if (isSet(vocabularyNameEdit)) {
			var key_navNested = "${vocabularyNameEdit}";

			AssertTextEquals(
				locator1 = "NavNested#NAV_NESTED_LINK",
				value1 = "${vocabularyNameEdit}");
		}
	}

	macro gotoAddVocabulary {
		if (IsElementPresent(locator1 = "//*[contains(@class,'taglib-empty-result-message-title')][normalize-space(text())='No Vocabularies yet.']")) {
			Button.click(button = "Add Vocabulary");
		}
		else {
			Click(locator1 = "NavNested#NAV_NESTED_PLUS");
		}
	}

	macro goToVocabulary {
		Navigator.gotoNavNested(navNested = "${vocabularyName}");

		AssertElementPresent(
			key_title = "${vocabularyName}",
			locator1 = "Header#H2_TITLE");
	}

	macro tearDownCP {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Categorization",
			portlet = "Categories");

		WaitForLiferayEvent.initializeLiferayEventLog();

		Click.waitForMenuToggleJSClick(locator1 = "NavNested#NAV_NESTED_ELLIPSIS");

		MenuItem.click(menuItem = "Delete");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		PortletEntry.selectAll();

		SelectFrame(value1 = "relative=top");

		Click(
			key_text = "Delete",
			locator1 = "Button#ANY");

		AssertTextEquals(
			locator1 = "Modal#BODY",
			value1 = "Are you sure you want to delete this? It will be deleted immediately.");

		Click(
			key_text = "Delete",
			locator1 = "Modal#MODAL_FOOTER_BUTTON");
	}

	macro viewCP {
		AssertTextEquals(
			key_navNested = "${vocabularyName}",
			locator1 = "NavNested#NAV_NESTED_LINK",
			value1 = "${vocabularyName}");

		if ("${allowMultipleCategories}" == "false") {
			Navigator.gotoNavNested(navNested = "${vocabularyName}");

			LexiconEntry.gotoEllipsisMenuItem(menuItem = "Edit");

			AssertNotChecked.assertNotCheckedNotVisible(locator1 = "CategoriesEditVocabulary#ALLOW_MULTIPLE_CATEGORIES_TOGGLE_SWITCH");
		}
	}

	macro viewVocabularyAllowMultipleCAtegories {
		Navigator.gotoNavNested(navNested = "${vocabularyName}");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Edit");

		AssertChecked.assertCheckedNotVisible(locator1 = "Categories#VOCABULARY_EDIT_CHECKBOX");

		Button.clickCancel();
	}

	macro viewVocabularyAssociatedAssetTypesRequirement {
		Navigator.gotoNavNested(navNested = "${vocabularyName}");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Edit");

		Panel.expandPanel(panel = "Associated Asset Types");

		AssertNotChecked.assertNotCheckedNotVisible(locator1 = "Categories#VOCABULARY_EDIT_CHECKBOX");

		Button.clickCancel();
	}

	macro viewVocabularyPermissionsCP {
		Navigator.gotoNavNested(navNested = "${vocabularyName}");

		WaitForLiferayEvent.initializeLiferayEventLog();

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Permissions");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		if ("${viewableBy}" == "Anyone (Guest Role)") {
			AssertChecked(locator1 = "AssetPermissions#GUEST_VIEW_CHECKBOX");
		}
		else if ("${viewableBy}" == "Owner") {
			AssertChecked(locator1 = "AssetPermissions#OWNER_VIEW_CHECKBOX");
		}
		else if ("${viewableBy}" == "Site Members") {
			AssertChecked(locator1 = "AssetPermissions#SITE_MEMBER_VIEW_CHECKBOX");
		}

		SelectFrameTop(value1 = "relative=top");
	}

	macro viewVocabularyVisibilityEdit {
		Navigator.gotoNavNested(navNested = "${vocabularyName}");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Edit");

		AssertChecked.assertCheckedNotVisible(locator1 = "Categories#VOCABULARY_EDIT_CHECKBOX");

		Button.clickCancel();
	}

	macro viewWithAssociatedAssetTypeCP {
		Navigator.gotoNavNested(navNested = "${vocabularyName}");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Edit");

		Panel.expandPanel(panel = "Associated Asset Types");

		AssertSelectedLabel(
			locator1 = "CategoriesEditVocabulary#ASSOCIATED_ASSET_TYPES_SELECT",
			value1 = "${vocabularyAssociatedAssetType}");
	}

}