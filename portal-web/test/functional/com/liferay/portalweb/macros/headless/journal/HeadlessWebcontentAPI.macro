definition {

	@summary = "Helper function to add a web content article via Headless"
	macro _addWebContent {
		Variables.assertDefined(parameterList = "${content},${title}");

		var portalURL = JSONCompany.getPortalURL();

		if (!(isSet(userEmailAddress))) {
			var userEmailAddress = "test@liferay.com";
		}

		if (!(isSet(userPassword))) {
			var userPassword = "test";
		}

		if (!(isSet(description))) {
			var description = "";
		}

		if (isSet(assetTagNames)) {
			var list = ListUtil.newList();

			for (var assetTagName : list "${assetTagNames}") {
				var assetTagName = '''"${assetTagName}"''';

				ListUtil.add("${list}", "${assetTagName}");
			}

			var assetTagNames = ListUtil.toString("${list}");
		}
		else {
			var assetTagNames = "";
		}

		if (!(isSet(assetCategoryIds))) {
			var assetCategoryIds = "0";
		}

		if (!(isSet(viewableBy))) {
			var viewableBy = "Anyone";
		}

		if (isSet(folderId)) {
			var api = "structured-content-folders/${folderId}/structured-contents";
		}
		else {
			var api = "sites/${groupId}/structured-contents";
		}

		var os = OSDetector.isWindows();

		if ("${os}" == "true") {
			var content = StringUtil.replace("${content}", ">", "^>");
			var content = StringUtil.replace("${content}", "<", "^<");
		}

		var curl = '''
			${portalURL}/o/headless-delivery/v1.0/${api} \
				-u ${userEmailAddress}:${userPassword} \
				-H accept: application/json \
				-H Content-Type: application/json \
				-d {
					"contentFields": [
						{
							"contentFieldValue": {
								"data": "${content}"
							},
							"name": "content"
						}
					],
					"contentStructureId": ${structureId},
					"description": "${description}",
					"keywords": [${assetTagNames}],
					"taxonomyCategoryIds": [${assetCategoryIds}],
					"title": "${title}",
					"viewableBy": "${viewableBy}"
				}
		''';
		var articleId = JSONCurlUtil.post("${curl}", "$.id");

		if ("${articleId}" == "") {
			fail("FAIL. Cannot add journal article.");
		}

		return "${articleId}";
	}

	macro _createStructuredContentDraft {
		Variables.assertDefined(parameterList = "${data},${label},${name},${ddmStructureId},${title}");

		var portalURL = JSONCompany.getDefaultPortalURL();

		var siteId = JSONGroupAPI._getGroupIdByName(
			groupName = "Guest",
			site = "true");

		var curl = '''
			${portalURL}/o/headless-admin-content/v1.0/sites/${siteId}/structured-contents/draft \
			-u test@liferay.com:test \
			-H Content-Type: application/json
            -d
					{
    "contentFields": [{
        "contentFieldValue": {
            "data": "${data}"
        },
        "dataType": "string",
        "label": "${label}",
        "name": "${name}",
        "nestedContentFields": [],
        "repeatable": false
    }],
    "contentStructureId": "${ddmStructureId}",
    "title": "${title}"
	}
		''';
		var curl = JSONCurlUtil.post("${curl}");

		return "${curl}";
	}

	macro assertPriorityFieldWithDefaultValue {
		var actualPriorityDefaultValue = JSONUtil.getWithJSONPath("${responseToParse}", "$.priority");

		TestUtils.assertEquals(
			actual = "${actualPriorityDefaultValue}",
			expected = "${expectedPriorityDefaultValue}");
	}

	macro createStructuredContentDraft {
		var response = HeadlessWebcontentAPI._createStructuredContentDraft(
			data = "${data}",
			ddmStructureId = "${ddmStructureId}",
			label = "${label}",
			name = "${name}",
			title = "${title}");

		return "${response}";
	}

}