definition {

	macro closeMessage {
		if ((IsElementPresent(locator1 = "Message#${messageType}")) && (IsVisible(locator1 = "Message#${messageType}")) && (IsVisible(locator1 = "Icon#CLOSE"))) {
			Click(locator1 = "Icon#CLOSE");
		}
	}

	macro closePortalLocalizationWarning {
		Alert.closeMessage(messageType = "PORTAL_LOCALIZATION");

		Pause(locator1 = "2000");
	}

	macro confirmSecurity {
		if (IsElementPresent(key_title = "Your connection is not private", locator1 = "Header#H1_TITLE")) {
			Click(locator1 = "Button#ADVANCED");

			if (isSet(domain)) {
				AssertElementPresent(
					key_text = "Proceed to ${domain}",
					locator1 = "Link#ANY");

				Click(
					key_text = "Proceed to ${domain} (unsafe)",
					locator1 = "Link#ANY");
			}
			else {
				AssertElementPresent(
					key_text = "Proceed to localhost",
					locator1 = "Link#ANY");

				Click(
					key_text = "Proceed to localhost (unsafe)",
					locator1 = "Link#ANY");
			}
		}
	}

	macro viewConversionMessage {
		AssertVisible(
			key_alertMessage = "${alertMessage}",
			key_type = "${alertType}",
			locator1 = "Message#CONVERSION_ALERT_MESSAGE");
	}

	macro viewDuplicateErrorMessage {
		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_1",
			value1 = "Please enter a unique name.");
	}

	macro viewErrorMessage {
		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR",
			value1 = "${errorMessage}");
	}

	macro viewExpireContentFailedMessage {
		AssertTextEquals.assertPartialText(
			key_alertMessage = "Please enter a valid expiration date.",
			locator1 = "Message#ERROR_ENTER_A_VALID_VALUE",
			value1 = "Please enter a valid expiration date.");
	}

	macro viewInfoMessage {
		AssertTextEquals(
			locator1 = "Message#INFO_2",
			value1 = "${infoMessage}");
	}

	macro viewInfoMessageSpecific {
		AssertElementPresent(
			key_infoMessage = "${infoMessage}",
			locator1 = "Message#INFO_SPECIFIC");
	}

	macro viewLengthValidationField {
		AssertTextEquals.assertPartialText(
			locator1 = "TextInput#REQUIRED_ALERT",
			value1 = "Please enter no more than");
	}

	macro viewLocalizationMessage {
		AssertTextEquals.assertPartialText(
			locator1 = "Home#PORTAL_LOCALIZATION_TRANSLATION_LANGUAGE_MESSAGE",
			value1 = "${translationLanguageLocalizationMessage}");

		if (isSet(defaultLanguageLocalizationMessage)) {
			AssertTextEquals(
				key_pageLocale = "${defaultLanguageLocalizationMessage}",
				locator1 = "Home#PORTAL_LOCALIZATION_DEFAULT_LANGUAGE_MESSAGE",
				value1 = "${defaultLanguageLocalizationMessage}");
		}

		AssertTextEquals(
			locator1 = "Home#PORTAL_LOCALIZATION_PREFERRED_LANGUAGE_MESSAGE",
			value1 = "${preferredLanguageLocalizationMessage}");
	}

	macro viewMutedMessage {
		AssertTextEquals.assertPartialText(
			locator1 = "Message#SUBTITLE",
			value1 = "${muteMessage}");
	}

	macro viewRequestFailedToComplete {
		AssertElementPresent(locator1 = "Message#ERROR_REQUEST_FAILED");

		if (IsElementPresent(locator1 = "Button#CLOSE_MESSAGE_FLOAT")) {
			Click(locator1 = "Button#CLOSE_MESSAGE_FLOAT");
		}
	}

	macro viewRequiredField {
		AssertTextEquals.assertPartialText(
			locator1 = "TextInput#REQUIRED_ALERT",
			value1 = "This field is required.");
	}

	macro viewSpecificRequiredField {
		AssertTextEquals.assertPartialText(
			key_fieldFieldLabel = "${fieldFieldLabel}",
			locator1 = "Message#ERROR_FIELD_REQUIRED",
			value1 = "This field is required.");
	}

	macro viewSuccessMessage {
		VerifyElementPresent(locator1 = "Message#SUCCESS_DISMISSIBLE");
	}

	macro viewSuccessMessageText {
		AssertTextEquals.assertPartialText(
			locator1 = "Message#SUCCESS",
			value1 = "${successMessage}");

		VerifyVisible(locator1 = "Message#SUCCESS");
	}

	macro viewWarningSpecific {
		AssertElementPresent(
			key_warningMessage = "${warningMessage}",
			locator1 = "Message#WARNING_SPECIFIC");
	}

}