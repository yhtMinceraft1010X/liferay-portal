definition {

	macro _deleteAllQuestions {
		while (IsElementPresent(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS")) {
			LexiconEntry.gotoEllipsisMenuItemNoError(menuItem = "Delete");

			Alert.viewSuccessMessage();
		}
	}

	macro _openToAddQuestion {
		Navigator.openWithAppendToBaseURL(urlAppend = "web/${siteURLKey}/${layoutName}#/questions/${topicName}/new");
	}

	macro addRootTopic {
		if (IsElementPresent(key_text = "New Topic", locator1 = "Button#ANY")) {
			Click(
				key_text = "New Topic",
				locator1 = "Button#ANY");
		}
		else {
			Click(
				key_card = "New Topic",
				locator1 = "Card#CARD");
		}

		Type(
			key_text = "Topic Name",
			locator1 = "TextInput#ANY",
			value1 = "${rootTopicName}");

		Type(
			key_label = "Description",
			locator1 = "TextArea#ANY_LABELED",
			value1 = "${rootTopicDescription}");

		Button.click(button = "Create");

		if ("${invalidCharacters}" == "Topic") {
			Alert.viewErrorMessage(errorMessage = "The Topic Name cannot contain the following invalid characters");
		}
		else {
			AssertTextEquals(
				key_card = "${rootTopicName}",
				locator1 = "Card#CARD_TITLE",
				value1 = "${rootTopicName}");
		}
	}

	macro addSubTopic {
		Click(locator1 = "Questions#NEW_TOPIC");

		Type(
			key_text = "Topic Name",
			locator1 = "TextInput#ANY",
			value1 = "${subTopicName}");

		Type(
			key_label = "Description",
			locator1 = "TextArea#ANY_LABELED",
			value1 = "${subTopicDescription}");

		Button.click(button = "Create");

		AssertTextEquals(
			key_topicName = "${subTopicName}",
			locator1 = "Questions#QUESTIONS_BREADCRUMB_ACTIVE_SUBTOPIC",
			value1 = "${subTopicName}");
	}

	macro addTags {
		Type(
			locator1 = "Questions#ASK_QUESTION_TAG_FIELD",
			value1 = "${tagLocator}");

		KeyPress(
			locator1 = "Questions#ASK_QUESTION_TAG_FIELD",
			value1 = "\RETURN");
	}

	macro answerQuestion {
		CKEditor.addContent(content = "${contentField}");

		Click(
			key_text = "Post Answer",
			locator1 = "Button#ANY");

		if (isSet(answeredLabel)) {
			AssertElementPresent(
				key_label = "Answered",
				locator1 = "Questions#QUESTIONS_RESPONSE_DATE_LABEL");
		}

		AssertVisible(
			key_answerBodyContent = "${contentField}",
			locator1 = "Questions#ANSWER_BODY");
	}

	macro askQuestionFillingTheMandatoryFields {
		if (isSet(siteURLKey)) {
			Questions._openToAddQuestion(
				layoutName = "${layoutName}",
				siteURLKey = "${siteURLKey}",
				topicName = "${topicName}");
		}
		else {
			Click(locator1 = "Questions#ASK_QUESTION_BUTTON");
		}

		if (isSet(anonymousUser)) {
			Type.typePause(
				locator1 = "TextInput#EMAIL_ADDRESS",
				value1 = "${userEmailAddress}");

			Type.typePause(
				locator1 = "TextInput#PASSWORD",
				value1 = "${password}");

			Click(locator1 = "Button#SIGN_IN");
		}

		Type(
			locator1 = "Questions#ASK_QUESTION_TITLE_FIELD",
			value1 = "${titleField}");

		CKEditor.addContent(content = "${contentField}");

		if (isSet(imageFileName)) {
			var key_imageFileName = "${imageFileName}";

			ItemSelector.gotoItemSelectorViaCKEditor();

			SelectFrame(locator1 = "ItemSelector#ITEM_SELECTOR_IFRAME");

			if (isSet(depotName)) {
				AssertClick(
					key_breadcrumbName = "Sites and Libraries",
					locator1 = "Breadcrumb#BREADCRUMB_ENTRY",
					value1 = "Sites and Libraries");

				AssertClick(
					key_groupTab = "Asset Library",
					locator1 = "ItemSelector#NAVIGATION_GROUP_TAB",
					value1 = "Asset Library");

				LexiconCard.clickCard(card = "${depotName}");
			}

			Click(locator1 = "ItemSelector#SELECT_FILE_IMAGE_CARD");
		}

		if (isSet(tagLocatorList)) {
			for (var tagLocator : list "${tagLocatorList}") {
				Questions.addTags(tagLocator = "${tagLocator}");
			}
		}

		Click(locator1 = "Questions#ASK_QUESTION_POST_YOUR_QUESTION_BUTTON");

		if ("${invalidCharacters}" == "Tag") {
			Alert.viewErrorMessage(errorMessage = "The Tag cannot contain the following invalid characters");
		}
	}

	macro assertCanonicalURL {
		var html = '''<link href="''';

		var html2 = '''" rel="canonical" data-react-helmet="true">''';
		var portalURL = "${portalURL}/web/guest";
		var pageName = StringUtil.lowerCase("${pageName}");
		var pageNameURL = StringUtil.replace("${pageName}", " ", "-");
		var pageSource = StringUtil.add("${html}", "${portalURL}/${pageNameURL}/questions/${category}/${title}${html2}", "");

		AssertHTMLSourceTextPresent(value1 = "${pageSource}");
	}

	macro changeDisplayStyle {
		Click(locator1 = "Questions#CREATE_QUESTIONS_DISPLAY_STYLE_SELECTOR");

		MenuItem.click(menuItem = StringUtil.upperCaseFirstLetter("${displayStyle}"));
	}

	macro changePagination {
		Click(locator1 = "Questions#ITEMS_PER_PAGE_SELECT");

		var key_itemsPerPage = "${itemsPerPage}";

		MenuItem.click(menuItem = "${itemsPerPage}");

		AssertTextEquals.assertPartialText(
			locator1 = "Questions#ITEMS_PER_PAGE_SELECT",
			value1 = "${itemsPerPage}");
	}

	macro changeTopic {
		if (isSet(gotoParentTopic)) {
			if (isSet(multipleSubTopics)) {
				Click(locator1 = "Questions#QUESTIONS_BREADCRUMB_ELLIPSIS");

				Click(
					key_topicName = "${gotoParentTopic}",
					locator1 = "Questions#QUESTIONS_BREADCRUMB_TOPIC_DROPDOWN_OPTION");
			}
			else {
				Click(
					key_topicName = "${gotoParentTopic}",
					locator1 = "Questions#QUESTIONS_BREADCRUMB_PARENT_TOPIC_BUTTON");
			}
		}
		else {
			if (isSet(changeTopicFromHomeToggle)) {
				Click(locator1 = "Questions#QUESTIONS_BREADCRUMB_HOME_DROPDOWN_TOGGLE");
			}
			else {
				Click(
					key_topicName = "${parentTopicName}",
					locator1 = "Questions#QUESTIONS_BREADCRUMB_TOPIC_DROPDOWN_TOGGLE");
			}

			Click(
				key_topicName = "${subTopicName}",
				locator1 = "Questions#QUESTIONS_BREADCRUMB_TOPIC_DROPDOWN_OPTION");

			AssertTextEquals(
				key_topicName = "${subTopicName}",
				locator1 = "Questions#QUESTIONS_BREADCRUMB_ACTIVE_SUBTOPIC",
				value1 = "${subTopicName}");
		}
	}

	macro clearSearchResults {
		Click(locator1 = "Questions#SEARCH_RESULTS_CLEAR_BUTTON");

		AssertElementNotPresent(locator1 = "Search#SEARCH_INFO");

		AssertElementNotPresent(locator1 = "Questions#SEARCH_RESULTS_CLEAR_BUTTON");
	}

	macro configureFilter {
		Select(
			locator1 = "Questions#QUESTIONS_SELECT_FILTER",
			value1 = "${filterBy}");
	}

	macro configureLandingPageTopicNavigation {
		Portlet.gotoPortletOptions(
			portletName = "Questions",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		if ("${toggleValue}" == "enable") {
			Check(
				checkboxName = "Show Cards for Topic Navigation",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		if ("${toggleValue}" == "disable") {
			Uncheck(
				checkboxName = "Show Cards for Topic Navigation",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		PortletEntry.save();
	}

	macro configureRootTopic {
		Portlet.gotoPortletOptions(
			portletName = "Questions",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		Button.clickSelect();

		WaitForElementPresent(locator1 = "IFrame#MODAL_BODY");

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

		Click(
			key_breadcrumbName = "Categories",
			locator1 = "Breadcrumb#BREADCRUMB_ENTRY_LINK");

		if (isSet(subCategoryName)) {
			LexiconTable.clickTableEntryTitle(tableEntry = "${parentCategoryName}");

			Click(
				key_categoryName = "${subCategoryName}",
				locator1 = "Questions#SElECT_CATEGORY");
		}
		else {
			Click(
				key_categoryName = "${categoryName}",
				locator1 = "Questions#SElECT_CATEGORY");
		}

		SelectFrame(value1 = "relative=top");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		PortletEntry.save();

		if (isSet(subCategoryName)) {
			AssertElementPresent(
				key_categoryName = "${subCategoryName}",
				locator1 = "Questions#ROOT_TOPIC_ID_VALUE");
		}
		else {
			AssertElementPresent(
				key_categoryName = "${categoryName}",
				locator1 = "Questions#ROOT_TOPIC_ID_VALUE");
		}
	}

	macro configureTagsFilter {
		Select(
			locator1 = "Questions#QUESTIONS_TAGS_SELECT_FILTER",
			value1 = "${filterBy}");
	}

	macro createSomethingInMessageBoards {
		LexiconEntry.gotoAdd();

		MenuItem.click(menuItem = "${menuItem}");

		Questions.fillName(nameField = "${nameField}");

		Questions.changeDisplayStyle(displayStyle = "${displayStyleOption}");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	macro deleteAnswer {
		Click(
			key_text = "Delete",
			locator1 = "Button#ANY");

		if (isSet(cancel)) {
			Click(
				key_text = "Cancel",
				locator1 = "Questions#MODAL_ITEM_BUTTON");

			AssertVisible(
				key_answerBodyContent = "${contentField}",
				locator1 = "Questions#ANSWER_BODY");
		}
		else {
			Click(
				key_text = "Delete",
				locator1 = "Questions#MODAL_ITEM_BUTTON");

			AssertElementNotPresent(
				key_answerBodyContent = "${contentField}",
				locator1 = "Questions#ANSWER_BODY");
		}
	}

	macro deleteComment {
		Click(
			key_text = "Delete",
			locator1 = "Button#ANY_LAST");

		if (isSet(cancel)) {
			Click(
				key_text = "Cancel",
				locator1 = "Questions#MODAL_ITEM_BUTTON");

			AssertVisible(
				key_replyBodyContent = "${commentReply}",
				locator1 = "Questions#REPLY_BODY");
		}
		else {
			Click(
				key_text = "Delete",
				locator1 = "Questions#MODAL_ITEM_BUTTON");

			AssertElementNotPresent(
				key_replyBodyContent = "${commentReply}",
				locator1 = "Questions#REPLY_BODY");
		}
	}

	macro deleteQuestion {
		Click(locator1 = "Icon#DELETE");

		if (isSet(cancel)) {
			Click(
				key_text = "Cancel",
				locator1 = "Questions#MODAL_ITEM_BUTTON");

			AssertTextEquals(
				key_questionTitle = "${questionTitle}",
				locator1 = "Questions#QUESTIONS_DETAILS_TITLE",
				value1 = "${questionTitle}");
		}
		else {
			Click(
				key_text = "Delete",
				locator1 = "Questions#MODAL_ITEM_BUTTON");

			AssertElementPresent(
				key_emptyInfo = "This topic is empty.",
				locator1 = "Questions#EMPTY_STATE_MESSAGE");
		}
	}

	macro editAnswer {
		Click(locator1 = "Questions#EDIT_ANSWER");

		SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME");

		Type(
			locator1 = "CKEditor#BODY",
			value1 = "${contentField}");

		SelectFrame(value1 = "relative=top");

		Click(
			key_text = "Update Your Answer",
			locator1 = "Button#ANY");

		AssertVisible(
			key_answerBodyContent = "${contentField}",
			locator1 = "Questions#ANSWER_BODY");
	}

	macro editQuestion {
		Questions.gotoDetails(
			questionTabField = "Questions",
			questionTitle = "${questionTitle}");

		Click(locator1 = "Button#EDIT");

		Type(
			locator1 = "Questions#ASK_QUESTION_TITLE_FIELD",
			value1 = "${titleFieldEdit}");

		SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME");

		Type(
			locator1 = "CKEditor#BODY",
			value1 = "${contentFieldEdit}");

		SelectFrame(value1 = "relative=top");

		Click(
			key_text = "Update Your Question",
			locator1 = "Button#ANY");

		Refresh();

		AssertVisible(
			key_questionTitle = "${titleFieldEdit}",
			locator1 = "Questions#QUESTIONS_DETAILS_TITLE");
	}

	macro editRootTopic {
		if (isSet(siteURLKey)) {
			MessageboardsCategory.openToEditCategory(
				categoryName = "${categoryName}",
				groupName = "${groupName}",
				siteURLKey = "${siteURLKey}");
		}
		else {
			var key_categoryName = "${categoryName}";

			LexiconEntry.openEntryMenu(rowEntry = "${categoryName}");

			MenuItem.click(menuItem = "Edit");
		}

		PortletEntry.inputName(name = "${categoryNameEdit}");

		Click(
			locator1 = "Button#SAVE",
			value1 = "Save");

		Alert.viewSuccessMessage();
	}

	macro enableAnonymousRead {
		Questions.openToConfigInSystemSettings(portlet = "Questions");

		if (IsNotChecked.isNotCheckedNotVisible(key_fieldName = "enableAnonymousRead", locator1 = "FormFields#CHECKBOX")) {
			Check.checkNotVisible(
				key_fieldName = "enableAnonymousRead",
				locator1 = "FormFields#CHECKBOX");
		}

		FormFields.viewCheckboxChecked(fieldName = "enableAnonymousRead");

		if (IsElementPresent(locator1 = "Button#UPDATE")) {
			Button.clickUpdate();
		}
		else {
			Button.clickSave();
		}

		Alert.viewSuccessMessage();
	}

	macro enableRedirectToLogin {
		Questions.openToConfigInSystemSettings(portlet = "Questions");

		if (IsNotChecked.isNotCheckedNotVisible(key_fieldName = "enableRedirectToLogin", locator1 = "FormFields#CHECKBOX")) {
			Check.checkNotVisible(
				key_fieldName = "enableRedirectToLogin",
				locator1 = "FormFields#CHECKBOX");
		}

		FormFields.viewCheckboxChecked(fieldName = "enableRedirectToLogin");

		if (IsElementPresent(locator1 = "Button#UPDATE")) {
			Button.clickUpdate();
		}
		else {
			Button.clickSave();
		}

		Alert.viewSuccessMessage();
	}

	macro fillName {
		Click(locator1 = "Questions#CREATE_QUESTIONS_NAME_FIELD");

		Type(
			locator1 = "Questions#CREATE_QUESTIONS_NAME_FIELD",
			value1 = "${nameField}");
	}

	macro gotoCategory {
		Click(
			key_card = "${categoryName}",
			locator1 = "Card#CARD_TITLE");

		AssertElementPresent(locator1 = "Questions#QUESTIONS_HOME_ICON");

		AssertVisible(
			key_categoryTitle = "${categoryName}",
			locator1 = "Questions#QUESTIONS_CATEGORY_TITLE");
	}

	macro gotoDetails {
		if (isSet(duplicatedQuestions)) {
			Click(
				key_lastQuestionTitle = "${questionTitle}",
				locator1 = "Questions#QUESTIONS_TITLE_LAST");
		}
		else {
			Click(
				key_questionTitle = "${questionTitle}",
				locator1 = "Questions#QUESTIONS_TITLE");
		}

		AssertTextEquals(
			key_questionTitle = "${questionTitle}",
			locator1 = "Questions#QUESTIONS_DETAILS_TITLE",
			value1 = "${questionTitle}");
	}

	macro gotoTab {
		Click(
			key_questionTabField = "${questionTabField}",
			locator1 = "Questions#QUESTIONS_LIST_TAB_FIELD");

		AssertVisible(
			key_questionTabField = "${questionTabField}",
			locator1 = "Questions#QUESTIONS_LIST_ACTIVE_TAB_FIELD");
	}

	macro openToConfigInSystemSettings {
		var baseURL = PropsUtil.get("portal.url");

		if ("${portlet}" == "Message Boards Moderation Workflow") {
			var portletId = "com.liferay.message.boards.moderation.configuration.MBModerationGroupConfiguration";
		}

		if ("${portlet}" == "Questions") {
			var portletId = "com.liferay.questions.web.internal.configuration.QuestionsConfiguration";
		}

		Open(locator1 = "${baseURL}/group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_factoryPid=${portletId}&_com_liferay_configuration_admin_web_portlet_SystemSettingsPortlet_mvcRenderCommandName=%2Fconfiguration_admin%2Fedit_configuration");
	}

	macro openToEditQuestion {
		Navigator.openWithAppendToBaseURL(urlAppend = "web/${siteURLKey}/${layoutName}#/questions/${topicName}/${questionsTitle}/edit");
	}

	macro openToQuestionDetails {
		if (isSet(localization)) {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/${siteURLKey}/${layoutName}#/questions/${topicName}/-");
		}
		else if (isSet(historyRouter)) {
			Navigator.openWithAppendToBaseURL(urlAppend = "${friendlyURL}/questions/${topicName}/${questionsTitle}");
		}
		else {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/${siteURLKey}/${layoutName}#/questions/${topicName}/${questionsTitle}");
		}
	}

	macro openToQuestionsTopic {
		Navigator.openWithAppendToBaseURL(urlAppend = "web/${siteURLKey}/${layoutName}#/questions/${topicName}");
	}

	macro openToTagsTab {
		Navigator.openWithAppendToBaseURL(urlAppend = "web/${siteURLKey}/${layoutName}#/tags");
	}

	macro removeRootTopicConfiguration {
		Portlet.gotoPortletOptions(
			portletName = "Questions",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		Button.clickRemove();

		PortletEntry.save();
	}

	macro replyToComment {
		AssertClick(
			locator1 = "Button#REPLY",
			value1 = "Reply");

		SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME");

		Type(
			locator1 = "CKEditor#BODY",
			value1 = "${commentReply}");

		SelectFrame(value1 = "relative=top");

		AssertClick(
			locator1 = "Button#REPLY_LAST",
			value1 = "Reply");

		if (isSet(repliedLabel)) {
			AssertElementPresent(
				key_label = "Replied",
				locator1 = "Questions#QUESTIONS_RESPONSE_DATE_LABEL");
		}

		AssertVisible(
			key_replyBodyContent = "${commentReply}",
			locator1 = "Questions#REPLY_BODY");
	}

	macro search {
		if (isSet(searchTag)) {
			Type(
				locator1 = "Questions#SEARCH_QUESTION_FIELD",
				value1 = "${searchKey}");
		}
		else {
			Type(
				locator1 = "Questions#SEARCH_QUESTION_FIELD",
				value1 = "${searchKey}");

			if (isSet(noQuestionsResults)) {
				AssertElementPresent(
					key_emptyInfo = "There are no results.",
					locator1 = "Questions#EMPTY_STATE_MESSAGE");
			}
			else {
				AssertTextEquals(
					key_resultsInfo = '''${resultsInfo}''',
					locator1 = "Questions#SEARCH_INFO",
					value1 = "${resultsInfo}");

				AssertVisible(locator1 = "Questions#SEARCH_RESULTS_CLEAR_BUTTON");
			}
		}
	}

	macro subscribeFromTag {
		Click(locator1 = "Questions#QUESTIONS_BELL_BUTTON");

		AssertElementPresent(locator1 = "Questions#QUESTIONS_UNSUBSCRIBE");
	}

	macro subscribeQuestion {
		Click(locator1 = "Questions#QUESTIONS_BELL_BUTTON");
	}

	macro subscribeTopic {
		AssertClick(
			locator1 = "Button#SUBSCRIBE",
			value1 = "Subscribe");

		AssertElementPresent(locator1 = "Questions#QUESTIONS_SUBSCRIBED_BUTTON");
	}

	macro tearDown {
		while (IsElementPresent(locator1 = "Questions#QUESTIONS_LIST")) {
			Questions._deleteAllQuestions();
		}

		AssertElementNotPresent(locator1 = "Questions#QUESTIONS_LIST");
	}

	macro unsubscribeFromQuestion {
		Click.waitForMenuToggleJSClick(
			key_questionTitle = "${questionTitle}",
			locator1 = "Questions#QUESTIONS_ELLIPSIS_ICON");

		MenuItem.clickNoError(menuItem = "Unsubscribe");
	}

	macro unsubscribeFromQuestionViaDetails {
		Click(locator1 = "Questions#QUESTIONS_UNSUBSCRIBE");

		AssertElementNotPresent(locator1 = "Questions#QUESTIONS_UNSUBSCRIBE");
	}

	macro unsubscribeFromTag {
		Click(locator1 = "Questions#QUESTIONS_UNSUBSCRIBE");

		AssertElementNotPresent(locator1 = "Questions#QUESTIONS_UNSUBSCRIBE");
	}

	macro unsubscribeFromTopic {
		LexiconCard.clickEllipsisItem(
			card = "${topicName}",
			item = "Unsubscribe");
	}

	macro viewDefault {
		AssertTextEquals(
			key_emptyInfo = "This page has no topics.",
			locator1 = "Questions#EMPTY_STATE_MESSAGE",
			value1 = "This page has no topics.");
	}

	macro viewDetailsTitle {
		AssertTextEquals(
			key_questionTitle = "${questionTitle}",
			locator1 = "Questions#QUESTIONS_DETAILS_TITLE",
			value1 = "${questionTitle}");
	}

	macro viewFilterResults {
		AssertTextEquals(
			key_questionTitle = "${questionTitle}",
			locator1 = "Questions#QUESTIONS_TITLE",
			value1 = "${questionTitle}");

		AssertTextEquals(
			key_lastQuestionTitle = "${lastQuestionTitle}",
			locator1 = "Questions#QUESTIONS_TITLE_LAST",
			value1 = "${lastQuestionTitle}");
	}

	macro viewHomeTopicsList {
		Click(locator1 = "Questions#QUESTIONS_BREADCRUMB_HOME_DROPDOWN_TOGGLE");

		for (var topicName : list "${topicsName}") {
			AssertTextEquals(
				key_topicName = "${topicName}",
				locator1 = "Questions#QUESTIONS_BREADCRUMB_TOPIC_DROPDOWN_OPTION",
				value1 = "${topicName}");
		}
	}

	macro viewImageInQuestion {
		AssertVisible(
			key_imageFileName = "${imageFileName}",
			locator1 = "Questions#QUESTIONS_IMAGE_NAME");
	}

	macro viewList {
		if (isSet(unlistedQuestions)) {
			for (var unlistedQuestion : list "${unlistedQuestions}") {
				AssertElementNotPresent(
					key_questionTitle = "${unlistedQuestions}",
					locator1 = "Questions#QUESTIONS_TITLE");
			}
		}

		if (isSet(listedQuestions)) {
			for (var listedQuestion : list "${listedQuestions}") {
				AssertTextEquals(
					key_questionTitle = "${listedQuestion}",
					locator1 = "Questions#QUESTIONS_TITLE",
					value1 = "${listedQuestion}");
			}
		}
	}

	macro viewLockedQuestion {
		AssertElementPresent(
			key_questionTitle = "${questionTitle}",
			locator1 = "Questions#QUESTIONS_LOCKED_ICON");

		for (var caretName : list "caret-top,caret-bottom") {
			AssertElementPresent(
				key_caretName = "${caretName}",
				locator1 = "Questions#VOTE_BUTTON_DISABLED");
		}

		AssertElementNotPresent(locator1 = "Questions#QUESTIONS_BELL_BUTTON");

		AssertElementNotPresent(locator1 = "Icon#MOVE_TO_RECYCLE_BIN");

		AssertElementNotPresent(locator1 = "Button#EDIT");

		AssertElementNotPresent(locator1 = "Button#REPLY");

		for (var text : list "Delete,Mark as answer") {
			AssertElementNotPresent(
				key_text = "${text}",
				locator1 = "Button#ANY");
		}

		if (isSet(lockedStatus)) {
			AssertElementPresent(locator1 = "Questions#QUESTIONS_LOCKED_ANSWER_TEXT");
		}
	}

	macro viewMyActivityDefault {
		AssertTextEquals(
			key_emptyInfo = "There are no results.",
			locator1 = "Questions#EMPTY_STATE_MESSAGE",
			value1 = "There are no results.");
	}

	macro viewNoAnswerField {
		AssertElementNotPresent(locator1 = "CKEditor#BODY_FIELD_IFRAME");

		AssertElementNotPresent(
			key_text = "Post Answer",
			locator1 = "Button#ANY_DISABLED");
	}

	macro viewNoBreadcrumbEllipsis {
		AssertElementNotPresent(locator1 = "Questions#QUESTIONS_BREADCRUMB_ELLIPSIS");
	}

	macro viewNoFilteredResult {
		AssertTextEquals(
			key_emptyInfo = "There are no results.",
			locator1 = "Questions#EMPTY_STATE_MESSAGE",
			value1 = "There are no results.");
	}

	macro viewNoPermissionsAddQuestion {
		AssertElementNotPresent(locator1 = "Questions#ASK_QUESTION_BUTTON");
	}

	macro viewNoPermissionsAddTopic {
		AssertElementNotPresent(locator1 = "Questions#NEW_TOPIC");
	}

	macro viewNoSearchResults {
		for (var questionTitle : list "${questionsList}") {
			AssertElementNotPresent(
				key_questionTitle = "${questionTitle}",
				locator1 = "Questions#QUESTIONS_TITLE");
		}
	}

	macro viewNoTags {
		for (var tagName : list "${tagsList}") {
			AssertElementNotPresent(
				key_tagName = "${tagName}",
				locator1 = "Questions#TAGS_LIST_TAB_NAMES");
		}
	}

	macro viewNoTopicDropdownToggle {
		AssertElementNotPresent(
			key_topicName = "${topicName}",
			locator1 = "Questions#QUESTIONS_BREADCRUMB_TOPIC_DROPDOWN_TOGGLE");
	}

	macro viewPaginationResults {
		AssertTextEquals(
			locator1 = "Questions#PAGINATION_RESULTS",
			value1 = "${results}");
	}

	macro viewQuestionViaTag {
		Click(
			key_tagName = "${tagName}",
			locator1 = "Questions#TAGS_LIST_TAB_NAMES");

		AssertElementPresent(
			key_titleField = "${questionTitle}",
			locator1 = "Questions#ASK_QUESTION_SEARCH_QUESTION");
	}

	macro viewSearchField {
		if (isSet(noQuestion)) {
			AssertElementNotPresent(locator1 = "Questions#SEARCH_QUESTION_FIELD");
		}
		else {
			AssertElementPresent(locator1 = "Questions#SEARCH_QUESTION_FIELD");
		}
	}

	macro viewSearchResults {
		for (var questionTitle : list "${questionsList}") {
			AssertTextEquals(
				key_questionTitle = "${questionTitle}",
				locator1 = "Questions#QUESTIONS_TITLE",
				value1 = "${questionTitle}");
		}
	}

	macro viewSelectFilter {
		if (isSet(noQuestion)) {
			AssertElementNotPresent(locator1 = "Questions#QUESTIONS_SELECT_FILTER");
		}
		else {
			AssertElementPresent(locator1 = "Questions#QUESTIONS_SELECT_FILTER");
		}
	}

	macro viewStatistics {
		MouseOver(
			key_userName = "${userName}",
			locator1 = "Questions#QUESTIONS_STATISTICS_USER_NAME");

		AssertElementPresent(
			key_headerName = "${headerName}",
			locator1 = "Questions#QUESTIONS_STATISTICS_HEADER");

		for (var itemNameList : list "${itemNameList}") {
			AssertElementPresent(
				key_itemName = "${itemNameList}",
				locator1 = "Questions#QUESTIONS_STATISTICS_ITEM");
		}
	}

	macro viewStatus {
		if ("${status}" == "pending") {
			AssertVisible(
				key_status = "pending",
				locator1 = "Questions#WORKFLOW_STATUS");

			Questions.viewNoAnswerField();
		}
		else {
			AssertElementNotPresent(
				key_status = "pending",
				locator1 = "Questions#WORKFLOW_STATUS");
		}
	}

	macro viewSubscribedQuestion {
		if (isSet(subscribedQuestion)) {
			AssertTextEquals(
				key_questionTitle = "${subscribedQuestion}",
				locator1 = "Questions#QUESTIONS_TITLE",
				value1 = "${subscribedQuestion}");
		}
		else if (isSet(noSubscribedQuestion)) {
			AssertTextEquals(
				locator1 = "Questions#QUESTIONS_DEFAULT_SUBSCRIPTION_QUESTIONS",
				value1 = "There are no results.");
		}
	}

	macro viewSubscribedTopic {
		if (isSet(subscribedTopic)) {
			AssertTextEquals(
				key_subscribedTopic = "${subscribedTopic}",
				locator1 = "Questions#QUESTIONS_SUBSCRIBED_TOPIC",
				value1 = "${subscribedTopic}");
		}
		else if (isSet(noSubscribedTopic)) {
			AssertTextEquals(
				locator1 = "Questions#QUESTIONS_DEFAULT_SUBSCRIPTION_TOPICS",
				value1 = "There are no results.");
		}
	}

	macro viewSubscriptionStatusFromDetails {
		if (isSet(subscribedQuestion)) {
			AssertElementPresent(locator1 = "Questions#QUESTIONS_UNSUBSCRIBE");
		}

		if (isSet(unsubscribedQuestion)) {
			AssertElementPresent(locator1 = "Questions#QUESTIONS_SUBSCRIBE");
		}
	}

	macro viewTags {
		if (isSet(noTagResults)) {
			AssertTextEquals(
				locator1 = "Questions#TAGS_LIST_TAB_NO_RESULTS",
				value1 = "There are no results.");
		}
		else {
			AssertElementPresent(
				key_tagName = "${tagName}",
				locator1 = "Questions#TAGS_LIST_TAB_NAMES");
		}

		if (isSet(amountOfUsedTimes)) {
			AssertElementPresent(
				key_amountOfUsedTimes = "${amountOfUsedTimes}",
				key_tagName = "${tagName}",
				locator1 = "Questions#TAGS_LIST_TAB_USED_TIMES");
		}
	}

	macro viewTagsFilterResults {
		AssertTextEquals.assertPartialText(
			key_position = "${position}",
			locator1 = "Questions#TAGS_POSITION",
			value1 = "${tagName}");

		if (isSet(usedTimes)) {
			AssertTextEquals.assertPartialText(
				key_position = "${position}",
				locator1 = "Questions#TAGS_POSITION",
				value1 = "${usedTimes}");
		}
		else {
			AssertTextEquals.assertPartialText(
				key_position = "${position}",
				locator1 = "Questions#TAGS_POSITION",
				value1 = "Created");
		}
	}

	macro viewTopicDefault {
		AssertElementPresent(
			key_emptyInfo = "This topic is empty.",
			locator1 = "Questions#EMPTY_STATE_MESSAGE");
	}

	macro viewTopicOnHomePage {
		if (IsElementNotPresent(key_card = "New Topic", locator1 = "Card#CARD")) {
			Click(locator1 = "Questions#QUESTIONS_HOME_ICON");
		}

		for (var topicName : list "${topicNameList}") {
			AssertTextEquals(
				key_card = "${topicName}",
				locator1 = "Card#CARD_TITLE",
				value1 = "${topicName}");
		}

		AssertElementNotPresent(locator1 = "Questions#QUESTIONS_HOME_ICON");
	}

	macro viewUnlockedQuestion {
		AssertElementNotPresent(
			key_questionTitle = "${questionTitle}",
			locator1 = "Questions#QUESTIONS_LOCKED_ICON");

		for (var caretName : list "caret-top,caret-bottom") {
			AssertVisible(
				key_caretName = "${caretName}",
				locator1 = "Questions#VOTE_BUTTON");
		}

		AssertVisible(locator1 = "Questions#QUESTIONS_BELL_BUTTON");

		AssertVisible(locator1 = "Icon#MOVE_TO_RECYCLE_BIN");

		AssertVisible(locator1 = "Button#EDIT");

		AssertVisible(locator1 = "Button#REPLY");

		for (var text : list "Delete,Mark as answer") {
			AssertVisible(
				key_text = "${text}",
				locator1 = "Button#ANY");
		}
	}

	macro viewVotedResult {
		if (isSet(answersList)) {
			AssertTextEquals(
				key_votedResult = "${votedCount}",
				locator1 = "Questions#VOTED_RESULT_ANSWER",
				value1 = "${votedCount}");
		}
		else if (isSet(questionTitle)) {
			AssertTextEquals(
				key_questionTitle = "${questionTitle}",
				locator1 = "Questions#QUESTIONS_VOTED_COUNT",
				value1 = "${votedCount}");
		}
		else {
			AssertTextEquals(
				key_count = "${votedCount}",
				key_text = "${votedCaret}",
				locator1 = "Questions#QUESTIONS_LIST_VOTED_COUNT",
				value1 = "${votedCount}");
		}
	}

	macro voteAnswer {
		AssertTextEquals(
			key_votedResult = "${currentVotedCount}",
			locator1 = "Questions#VOTED_RESULT_ANSWER",
			value1 = "${currentVotedCount}");

		if (isSet(voteUp)) {
			Click(
				key_caretName = "caret-top",
				locator1 = "Questions#VOTE_BUTTON_2");

			var newVotedCount = ${currentVotedCount} + 1;

			AssertTextEquals(
				key_votedResult = "${newVotedCount}",
				locator1 = "Questions#VOTED_RESULT_ANSWER",
				value1 = "${newVotedCount}");
		}

		if (isSet(voteDown)) {
			Click(
				key_caretName = "caret-bottom",
				locator1 = "Questions#VOTE_BUTTON_2");

			var newVotedCount = ${currentVotedCount} - 1;

			AssertTextEquals(
				key_votedResult = "${newVotedCount}",
				locator1 = "Questions#VOTED_RESULT_ANSWER",
				value1 = "${newVotedCount}");
		}
	}

	macro voteQuestion {
		AssertTextEquals(
			key_votedResult = "${currentVotedCount}",
			locator1 = "Questions#VOTED_RESULT",
			value1 = "${currentVotedCount}");

		if (isSet(voteUp)) {
			Click(
				key_caretName = "caret-top",
				locator1 = "Questions#VOTE_BUTTON");

			var newVotedCount = ${currentVotedCount} + 1;

			AssertTextEquals(
				key_votedResult = "${newVotedCount}",
				locator1 = "Questions#VOTED_RESULT",
				value1 = "${newVotedCount}");
		}

		if (isSet(voteDown)) {
			Click(
				key_caretName = "caret-bottom",
				locator1 = "Questions#VOTE_BUTTON");

			var newVotedCount = ${currentVotedCount} - 1;

			AssertTextEquals(
				key_votedResult = "${newVotedCount}",
				locator1 = "Questions#VOTED_RESULT",
				value1 = "${newVotedCount}");
		}
	}

}