definition {

	macro addAndEditExternalApplication {
		var portalURL = PropsUtil.get("portal.url");

		if (isSet(baseURL)) {
			var portalURL = "${baseURL}";
		}

		OAuth2.openOAuth2Admin(baseURL = "${baseURL}");

		OAuth2.addApplication(
			applicationName = "${applicationName}",
			callbackUri = "${callbackUri}",
			checkboxUncheckList = "${checkboxUncheckList}",
			clientAuthenticationMethod = "${clientAuthenticationMethod}",
			clientProfile = "${clientProfile}");

		if (isSet(checkboxCheckList)) {
			Check(
				key_checkboxName = "${checkboxCheckList}",
				locator1 = "OAuth2#ADMIN_INPUT_FORM_CHECKBOX");
		}

		if (isSet(websiteURL)) {
			PortletEntry.inputText(
				fieldLabel = "Website URL",
				text = "${websiteURL}");
		}

		OAuth2.inputApplicationValues(
			clientId = "${clientId}",
			clientSecret = "${clientSecret}");

		Navigator.gotoBack();

		OAuth2.editScopes(
			applicationName = "${applicationName}",
			resourceCheckList = "liferay-json-web-services.everything.read.userprofile",
			resourcePanels = "Portal Services");
	}

	macro addApplication {
		LexiconEntry.gotoAdd();

		OAuth2.inputApplicationValues(
			applicationName = "${applicationName}",
			callbackUri = "${callbackUri}",
			checkboxCheckList = "${checkboxCheckList}",
			checkboxUncheckList = "${checkboxUncheckList}",
			clientAuthenticationMethod = "${clientAuthenticationMethod}",
			clientProfile = "${clientProfile}",
			description = "${description}",
			jwks = "${jwks}",
			privacyPolicyURL = "${privacyPolicyURL}",
			websiteURL = "${websiteURL}");

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "${applicationName}");
	}

	macro addApplicationPermissionToRole {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Permissions",
			rowEntry = "${applicationName}");

		IFrame.selectPermissionsFrame();

		Check.checkToggleSwitch(
			key_roleTitle = "${userRole}",
			locator1 = "Permissions#INLINE_PERMISSIONS_VIEW_CHECKBOX");

		Check.checkToggleSwitch(
			key_actionName = "CREATE_TOKEN",
			key_roleTitle = "${userRole}",
			locator1 = "Permissions#PERMISSIONS_MODAL_CHECKBOX");

		AssertClick(
			locator1 = "Permissions#SAVE_BUTTON",
			value1 = "Save");
	}

	macro addPrefixHandlerInSystemSettings {
		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "OAuth 2",
			configurationName = "Bundle PrefixHandlerFactory",
			configurationScope = "System Scope");

		Button.clickAdd();

		FormFields.editTextMultiline(
			fieldName = "osgi.jaxrs.name",
			fieldValue = "${osgiJaxrsName}");

		if ("${symbolicName}" == "false") {
			FormFields.disableCheckbox(fieldName = "Include Bundle Symbolic Name");
		}

		FormFields.editTextMultiline(
			fieldName = "excluded.scopes",
			fieldValue = "${excludedScopesName}");

		FormFields.editTextMultiline(
			fieldName = "service.properties",
			fieldValue = "${serviceProperties}");

		FormFields.editTextMultiline(
			fieldName = "separator",
			fieldValue = "${separator}");

		PortletEntry.save();
	}

	macro assertAbleToDeleteJournalArticle {
		if (contains("${deleteOutput}", "${msg}")) {
			fail("Unable to delete journal article");
		}
	}

	macro assertApplicationHasNoAuthorization {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "${applicationName}");

		AssertClick(
			key_navItem = "Authorizations",
			locator1 = "NavBar#NAV_ITEM_LINK",
			value1 = "Authorizations");

		AssertElementNotPresent(locator1 = "ContentRow#ENTRY_CONTENT_ROW_1");
	}

	macro assertOAuthAuthorizationIsWorkingInCluster {
		var curl = '''
			http://localhost:9080/o/oauth2/token \
				--data client_id=abc123&client_secret=abc123&grant_type=authorization_code&code=${authorizationCode}
		''';
		var response = JSONCurlUtil.post("${curl}");

		if (contains("${response}", "access_token")) {
			echo("OAuth2 Authorization Code is working in cluster.");
		}
		else {
			fail("OAuth2 Authorization Code is not working in cluster.");
		}
	}

	macro assertPermissionsDenied {
		if (!(contains("${deleteOutput}", "${msg}"))) {
			fail("Could not find message for denied permissions.");
		}
	}

	macro assertPortletHeader {
		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "${header}");
	}

	macro assertScopeChecked {
		AssertChecked(
			key_panel = "sample-app",
			key_scopeName = "everything.read",
			locator1 = "OAuth2#ADMIN_GLOBAL_RESOURCE_SCOPE_CHECKBOX");
	}

	macro authorizeMyApplication {
		if ("${newTab}" == "true") {
			Open.openInTheNewTab(locator1 = "http://martamedio.com/oauth2-tester/");

			SelectWindow.selectPopUp(locator1 = "null");
		}
		else {
			Navigator.openSpecificURL(url = "http://martamedio.com/oauth2-tester/");
		}

		if (isSet(portalURL)) {
			Type(
				locator1 = "OAuth2#OAUTH2_TESTER_PORTAL_URL",
				value1 = "${portalURL}");
		}

		Type(
			locator1 = "OAuth2#OAUTH2_TESTER_CLIENT_ID",
			value1 = "${clientId}");

		Button.click(button = "Authorize My Application");

		if (IsElementPresent(locator1 = "Button#SIGN_IN")) {
			Type(
				locator1 = "TextInput#EMAIL_ADDRESS",
				value1 = "test@liferay.com");

			Type(
				locator1 = "TextInput#PASSWORD",
				value1 = "test");

			Click(locator1 = "Button#SIGN_IN");
		}

		if (isSet(rememberDevice)) {
			Check(
				key_checkboxName = "Remember Device",
				locator1 = "OAuth2#ADMIN_INPUT_FORM_CHECKBOX");
		}

		if ("${noAuthorize}" == "true") {
			WaitForElementPresent(locator1 = "OAuth2#OAUTH2_TESTER_CLIENT_SECRET");
		}
		else {
			Button.click(button = "Authorize");
		}

		Type(
			locator1 = "OAuth2#OAUTH2_TESTER_CLIENT_SECRET",
			value1 = "${clientSecret}");

		Button.click(button = "Obtain OAuth2 Access");
	}

	macro authorizePKCEApplication {
		Navigator.openSpecificURL(url = "http://martamedio.com/oauth2-tester/pkce/");

		if (isSet(portalURL)) {
			Type(
				locator1 = "OAuth2#OAUTH2_TESTER_PORTAL_URL",
				value1 = "${portalURL}");
		}

		Type(
			locator1 = "OAuth2#OAUTH2_TESTER_CLIENT_ID",
			value1 = "${clientId}");

		Button.click(button = "Generate a Code Challenge");

		var codeChallenge = selenium.getElementValue("OAuth2#OAUTH2_TESTER_CODE_CHALLENGE");

		Button.click(button = "Authorize My Application (PKCE)");

		Button.click(button = "Authorize");

		Type(
			locator1 = "OAuth2#OAUTH2_TESTER_EXCHANGE_CODE",
			value1 = "${codeChallenge}");

		Button.click(button = "Obtain Access Token");
	}

	macro deleteApplication {
		LexiconEntry.gotoEntryMenuItemNoError(
			menuItem = "Delete",
			rowEntry = "${applicationName}");

		AssertConfirm.assertPartialConfirmation(value1 = "Are you sure you want to delete the application?");

		AssertElementNotPresent(
			key_tableName = "${applicationName}",
			locator1 = "OAuth2#ADMIN_TABLE_APP_NAME");
	}

	macro editApplication {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "${applicationName}");

		var newGeneratedClientSecret = OAuth2.inputApplicationValues(
			applicationName = "${newApplicationName}",
			callbackUri = "${callbackUri}",
			checkboxCheckList = "${checkboxCheckList}",
			checkboxUncheckList = "${checkboxUncheckList}",
			clientId = "${clientId}",
			clientProfile = "${clientProfile}",
			clientSecret = "${clientSecret}",
			description = "${description}",
			generateNewSecret = "${generateNewSecret}",
			privacyPolicyURL = "${privacyPolicyURL}",
			websiteURL = "${websiteURL}");

		if (isSet(newApplicationName)) {
			AssertTextEquals(
				locator1 = "Portlet#HEADER",
				value1 = "${newApplicationName}");
		}

		return "${newGeneratedClientSecret}";
	}

	macro editScopes {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "${applicationName}");

		AssertClick(
			key_navItem = "Scopes",
			locator1 = "NavBar#NAV_ITEM_LINK",
			value1 = "Scopes");

		AssertElementPresent(
			key_navItem = "Scopes",
			locator1 = "NavBar#ACTIVE_NAV_ITEM_LINK");

		if (isSet(checkGlobalScope) || isSet(uncheckGlobalScope)) {
			Navigator.gotoNavUnderline(navUnderline = "Global scopes");

			if (isSet(checkGlobalScope)) {
				Check(
					key_scopeName = "${checkGlobalScope}",
					locator1 = "OAuth2#ADMIN_GLOBAL_SCOPE_CHECKBOX");
			}

			if (isSet(uncheckGlobalScope)) {
				Uncheck(
					key_scopeName = "${uncheckGlobalScope}",
					locator1 = "OAuth2#ADMIN_GLOBAL_SCOPE_CHECKBOX");
			}
		}

		if (isSet(checkGlobalScopesViaModal) || isSet(resourceCheckList) || isSet(resourceUncheckList) || isSet(uncheckAllResourceScopes)) {
			if (IsElementPresent(key_navUnderline = "Global scopes", locator1 = "NavUnderline#ACTIVE_NAV_UNDERLINE_LINK")) {
				Navigator.gotoNavUnderline(navUnderline = "Resource scopes");
			}

			for (var resourcePanel : list "${resourcePanels}") {
				OAuth2.expandResourcePanel(resourcePanel = "${resourcePanel}");
			}

			if (isSet(checkGlobalScopesViaModal)) {
				AssertClick.assertPartialTextClickAt(
					key_scopeText = "${modalLinkScope}",
					locator1 = "OAuth2#ADMIN_MODAL_GLOBAL_SCOPE_LINK",
					value1 = "assigned via a global scope");

				for (var scopeName : list "${checkGlobalScopesViaModal}") {
					Check(
						key_scopeName = "${scopeName}",
						locator1 = "OAuth2#ADMIN_MODAL_GLOBAL_SCOPE_CHECKBOX");
				}

				Click(locator1 = "Button#CLOSE_IFRAME");
			}

			if (isSet(resourceCheckList)) {
				for (var scopeName : list "${resourceCheckList}") {
					ScrollWebElementIntoView(
						key_scopeName = "${scopeName}",
						locator1 = "OAuth2#ADMIN_RESOURCE_SCOPE_CHECKBOX");

					Check(
						key_scopeName = "${scopeName}",
						locator1 = "OAuth2#ADMIN_RESOURCE_SCOPE_CHECKBOX");
				}
			}

			if (isSet(resourceUncheckList)) {
				for (var scopeName : list "${resourceUncheckList}") {
					Uncheck(
						key_scopeName = "${scopeName}",
						locator1 = "OAuth2#ADMIN_RESOURCE_SCOPE_CHECKBOX");
				}
			}

			if ("${uncheckAllResourceScopes}" == "true") {
				var count = "1";

				while (IsElementPresent(key_matchCount = "${count}", locator1 = "OAuth2#ADMIN_RESOURCE_SCOPE_CHECKED")) {
					Uncheck(
						key_matchCount = "${count}",
						locator1 = "OAuth2#ADMIN_RESOURCE_SCOPE_CHECKED");

					var count = ${count} + 1;
				}
			}
		}

		PortletEntry.save();

		Navigator.gotoBack();
	}

	macro expandGlobalPanel {
		var key_panel = "${globalPanel}";

		if ((IsElementPresent(locator1 = "OAuth2#ADMIN_GLOBAL_PANEL_COLLAPSED")) && (IsVisible(locator1 = "OAuth2#ADMIN_GLOBAL_PANEL_COLLAPSED"))) {
			Click(locator1 = "OAuth2#ADMIN_GLOBAL_PANEL_COLLAPSED");
		}

		AssertElementPresent(locator1 = "OAuth2#ADMIN_GLOBAL_PANEL_EXPANDED");
	}

	macro expandResourcePanel {
		var key_panel = "${resourcePanel}";

		if ((IsElementPresent(locator1 = "OAuth2#ADMIN_RESOURCE_PANEL_COLLAPSED")) && (IsVisible(locator1 = "OAuth2#ADMIN_RESOURCE_PANEL_COLLAPSED"))) {
			Click(locator1 = "OAuth2#ADMIN_RESOURCE_PANEL_COLLAPSED");
		}

		AssertElementPresent(locator1 = "OAuth2#ADMIN_RESOURCE_PANEL_EXPANDED");
	}

	macro getAccessToken {
		var portalURL = PropsUtil.get("portal.url");

		if ("${grantFlow}" == "clientCredentials") {
			var tokenCurl = '''
				${portalURL}/o/oauth2/token \
					--data grant_type=client_credentials&client_id=${clientId}&client_secret=${clientSecret}
			''';
		}

		var response = JSONCurlUtil.post("${tokenCurl}");
		var partialResponse = StringUtil.extractFirst("${response}", "\",\"token_type");
		var accessToken = StringUtil.extractLast("${partialResponse}", "access_token\":\"");

		echo("## * Access Token: ${accessToken}");

		return "${accessToken}";
	}

	macro getAuthorizationCode {
		var generatedClientId = selenium.getElementValue("OAuth2#ADMIN_INPUT_FORM_CLIENT_ID");
		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/o/oauth2/authorize?client_id=${generatedClientId}&response_type=code");

		Button.click(button = "Authorize");

		WaitForSPARefresh();

		var currentURL = selenium.getCurrentUrl();

		echo("## * Current URL: ${currentURL}");

		return "${currentURL}";

		var authorizationCode = StringUtil.extractLast("${currentURL}", "code=");

		echo("## * Authorization Code: ${authorizationCode}");

		return "${authorizationCode}";
	}

	macro inputApplicationValues {
		if (isSet(clientId)) {
			Click(locator1 = "OAuth2#ADMIN_INPUT_FORM_CLIENT_ID_EDIT_BUTTON");

			Click(locator1 = "OAuth2#ADMIN_INPUT_FORM_CLIENT_ID_EDIT_FIELD");

			Type(
				locator1 = "OAuth2#ADMIN_INPUT_FORM_CLIENT_ID_EDIT_FIELD",
				value1 = "${clientId}");

			Button.clickApply();
		}

		if (isSet(clientSecret) || isSet(generateNewSecret)) {
			Click(locator1 = "OAuth2#ADMIN_INPUT_FORM_CLIENT_SECRET_EDIT_BUTTON");

			if ("${generateNewSecret}" == "true") {
				Click(locator1 = "OAuth2#ADMIN_INPUT_FORM_GENERATE_NEW_SECRET");

				var newGeneratedClientSecret = selenium.getElementValue("OAuth2#ADMIN_INPUT_FORM_CLIENT_SECRET_EDIT_FIELD");
			}
			else {
				Click(locator1 = "OAuth2#ADMIN_INPUT_FORM_CLIENT_SECRET_EDIT_FIELD");

				Type(
					locator1 = "OAuth2#ADMIN_INPUT_FORM_CLIENT_SECRET_EDIT_FIELD",
					value1 = "${clientSecret}");
			}

			Button.clickApply();
		}

		// All macros that require return must have return statement that's called.

		return "${newGeneratedClientSecret}";

		if (isSet(applicationName)) {
			PortletEntry.inputName(name = "${applicationName}");
		}

		if (isSet(websiteURL)) {
			PortletEntry.inputText(
				fieldLabel = "Website URL",
				text = "${websiteURL}");
		}

		if (isSet(description)) {
			PortletEntry.inputDescription(description = "${description}");
		}

		if (isSet(callbackUri)) {
			PortletEntry.inputTextArea(
				fieldId = "redirectURIs",
				text = "${callbackUri}");
		}

		if (isSet(privacyPolicyURL)) {
			PortletEntry.inputText(
				fieldLabel = "Privacy Policy URL",
				text = "${privacyPolicyURL}");
		}

		if (isSet(clientAuthenticationMethod)) {
			if ("${clientAuthenticationMethod}" == "Client Secret JWT") {
				Select(
					key_fieldLabel = "Client Authentication Method",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Client Secret JWT");
			}
			else if ("${clientAuthenticationMethod}" == "Private Key JWT") {
				var jwks = FileUtil.read("test/functional/com/liferay/portalweb/tests/coreinfrastructure/security/oauth2/dependencies/jwks.txt");

				Select(
					key_fieldLabel = "Client Authentication Method",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Private Key JWT");

				PortletEntry.inputTextArea(
					fieldId = "jwks",
					text = "${jwks}");
			}
			else if ("${clientAuthenticationMethod}" == "None") {
				Select(
					key_fieldLabel = "Client Authentication Method",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "None");
			}
			else {
				Select(
					key_fieldLabel = "Client Authentication Method",
					locator1 = "Select#GENERIC_SELECT_FIELD",
					value1 = "Client Secret POST");
			}
		}

		if (isSet(clientProfile)) {
			Select(
				key_fieldLabel = "Client Profile",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "${clientProfile}");
		}

		if (isSet(checkboxCheckList)) {
			for (var checkboxName : list "${checkboxCheckList}") {
				Check(
					key_checkboxName = "${checkboxName}",
					locator1 = "OAuth2#ADMIN_INPUT_FORM_CHECKBOX");
			}
		}

		if (isSet(checkboxUncheckList)) {
			for (var checkboxName : list "${checkboxUncheckList}") {
				Uncheck(
					key_checkboxName = "${checkboxName}",
					locator1 = "OAuth2#ADMIN_INPUT_FORM_CHECKBOX");
			}
		}

		if (isSet(clientCredentialsUser)) {
			AssertClick(
				locator1 = "Button#SELECT",
				value1 = "Select");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Pause(locator1 = "2000");

			Click(
				key_clientCredentialsUser = "${clientCredentialsUser}",
				locator1 = "OAuth2#ADMIN_CLIENT_CREDENTIALS_USER_SELECTED",
				value1 = "${clientCredentialsUser}");

			SelectFrame(value1 = "relative=top");
		}

		PortletEntry.save();
	}

	macro introspectAccessToken {
		AssertElementPresent(locator1 = "OAuth2#OAUTH2_TESTER_REQUEST_URL");

		Button.click(button = "Introspect Access Token");

		AssertTextEquals.assertPartialText(
			locator1 = "OAuth2#OAUTH2_TESTER_REQUEST_RESULTS",
			value1 = "${requestResult}");
	}

	macro launchRequest {
		if (isSet(requestURL)) {
			Type(
				locator1 = "OAuth2#OAUTH2_TESTER_REQUEST_URL",
				value1 = "${requestURL}");
		}

		Button.click(button = "Launch Request");

		AssertTextEquals.assertPartialText(
			locator1 = "OAuth2#OAUTH2_TESTER_REQUEST_RESULTS",
			value1 = "test@liferay.com");
	}

	macro launchRequestNotAuthorized {
		Pause(locator1 = "8000");

		Button.click(button = "Launch Request");

		AssertConfirm.assertConfirmationNoError(value1 = "403 - Unauthorized!");

		AssertTextEquals.assertPartialText(
			locator1 = "OAuth2#OAUTH2_TESTER_REQUEST_RESULTS",
			value1 = "");
	}

	macro obtainOAuth2AccessNotAuthorized {
		AssertConfirm.assertConfirmationNoError(value1 = "There's a problem with your authorization access");

		AssertTextEquals.assertPartialText(
			locator1 = "OAuth2#OAUTH2_TESTER_REQUEST_RESULTS",
			value1 = "");
	}

	macro openOAuth2Admin {
		Navigator.openWithAppendToBaseURL(
			baseURL = "${baseURL}",
			urlAppend = "group/guest/~/control_panel/manage?p_p_id=com_liferay_oauth2_provider_web_internal_portlet_OAuth2AdminPortlet");

		WaitForVisible(locator1 = "Button#PLUS");
	}

	@description = "Get ClientId and ClientSecret from the page then post client credential token via curl."
	macro postClientCredentialTokenViaCurl {
		var generatedClientId = selenium.getElementValue("OAuth2#ADMIN_INPUT_FORM_CLIENT_ID");
		var generatedClientSecret = selenium.getElementValue("OAuth2#ADMIN_INPUT_FORM_CLIENT_SECRET");
		var portalURL = PropsUtil.get("portal.url");

		var curl = '''
				${portalURL}/o/oauth2/token \
					-d client_id=${generatedClientId} \
					-d client_secret=${generatedClientSecret} \
					-d grant_type=client_credentials
				''';

		com.liferay.poshi.runner.util.JSONCurlUtil.post("${curl}");
	}

	@description = "Request the liferay access token for OAuth2 application with the JWT via curl."
	macro requestAccessTokenWithJWTViaCurl {
		var portalURL = PropsUtil.get("portal.url");
		var jwt = FileUtil.read("${jwtFileBaseDir}/${jwtFileName}");

		var curl = '''
				${portalURL}/o/oauth2/token \
					-H 'Content-Type: application/x-www-form-urlencoded' \
					--data-urlencode 'client_id=${clientId}' \
					--data-urlencode 'client_secret=${clientSecret}' \
					--data-urlencode 'grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer' \
					--data-urlencode 'scope=${scopes}'
					--data-urlencode 'assertion=${jwt}'
				''';

		if (!(isSet(noResponse))) {
			var scopeList = JSONCurlUtil.post("${curl}", "$['scope']");

			echo("## * Scope list: ${scopeList}");

			return "${scopeList}";
		}
		else {
			var errorType = JSONCurlUtil.post("${curl}", "$['error']");

			echo("## * No access token is returned due to ${errorType}");
		}
	}

	macro revokeApplicationAuthorization {
		LexiconEntry.viewEntryMenuItem(
			menuItem = "Revoke Authorizations",
			rowEntry = "${applicationName}");

		MenuItem.clickNoError(menuItem = "Revoke Authorizations");

		AssertConfirm.assertPartialConfirmation(value1 = "Are you sure you want to revoke all authorizations? This actions revokes 1 authorization and associated tokens.");

		AssertTextEquals(
			key_columnName = "lfr-authorizations",
			key_tableEntry = "${applicationName}",
			locator1 = "LexiconTable#TABLE_ENTRY_INFO",
			value1 = "0");
	}

	macro revokeGrantedAuthViaAdmin {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "${applicationName}");

		AssertClick(
			key_navItem = "Authorizations",
			locator1 = "NavBar#NAV_ITEM_LINK",
			value1 = "Authorizations");

		AssertElementPresent(
			key_navItem = "Authorizations",
			locator1 = "NavBar#ACTIVE_NAV_ITEM_LINK");

		AssertClickNoError(
			key_rowEntry = "${userName}",
			locator1 = "OAuth2#ADMIN_AUTHORIZATIONS_REVOKE_BUTTON",
			value1 = "Revoke");

		var browserType = PropsUtil.get("browser.type");

		if ("${browserType}" != "safari") {
			AssertConfirm.waitForConfirmation(value1 = "Are you sure you want to revoke the authorization?");
		}

		Alert.viewSuccessMessage();

		AssertElementNotPresent(
			key_userName = "${userName}",
			locator1 = "OAuth2#ADMIN_AUTHORIZATIONS_USER_NAME");

		Navigator.gotoBack();
	}

	macro revokeGrantedAuthViaUser {
		UserBar.gotoDropdownItem(dropdownItem = "My Connected Applications");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "View",
			rowEntry = "${applicationName}");

		AssertClickNoError(
			locator1 = "OAuth2#USER_CONNECTED_APP_REMOVE_ACCESS_BUTTON",
			value1 = "Remove Access");

		AssertConfirm.waitForConfirmation(value1 = "${applicationName} will no longer have access to your account. Removed access cannot be recovered.");

		Alert.viewSuccessMessage();
	}

	macro viewApplication {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "${applicationName}");

		if (isSet(clientId)) {
			AssertTextEquals(
				locator1 = "OAuth2#ADMIN_INPUT_FORM_CLIENT_ID",
				value1 = "${clientId}");
		}

		if (isSet(clientSecret)) {
			AssertTextEquals(
				locator1 = "OAuth2#ADMIN_INPUT_FORM_CLIENT_SECRET",
				value1 = "${clientSecret}");
		}

		if (isSet(applicationName)) {
			AssertTextEquals(
				locator1 = "TextInput#NAME",
				value1 = "${applicationName}");
		}

		if (isSet(websiteURL)) {
			AssertTextEquals(
				key_fieldLabel = "Website URL",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "${websiteURL}");
		}

		if (isSet(description)) {
			AssertTextEquals(
				locator1 = "TextArea#DESCRIPTION",
				value1 = "${description}");
		}

		if (isSet(privacyPolicyURL)) {
			AssertTextEquals(
				key_fieldLabel = "Privacy Policy URL",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "${privacyPolicyURL}");
		}

		if (isSet(callbackUri)) {
			AssertTextEquals.assertPartialText(
				key_text = "redirectURIs",
				locator1 = "TextArea#ANY",
				value1 = "${callbackUri}");
		}

		if (isSet(clientAuthenticationMethod)) {
			AssertSelectedLabel(
				key_fieldLabel = "Client Authentication Method",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "${clientAuthenticationMethod}");
		}

		if (isSet(jwks)) {
			AssertTextEquals.assertPartialText(
				key_text = "jwks",
				locator1 = "TextArea#ANY",
				value1 = "${jwks}");
		}

		if (isSet(clientProfile)) {
			AssertSelectedLabel(
				key_fieldLabel = "Client Profile",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "${clientProfile}");
		}

		if (isSet(checkboxCheckList)) {
			for (var checkboxName : list "${checkboxCheckList}") {
				AssertChecked(
					key_checkboxName = "${checkboxName}",
					locator1 = "OAuth2#ADMIN_INPUT_FORM_CHECKBOX");
			}
		}

		Navigator.gotoBack();
	}

	macro viewApplicationInAuthorizationsTable {
		AssertTextEquals(
			key_columnName = "lfr-authorizations",
			key_tableEntry = "${tableEntry}",
			locator1 = "LexiconTable#TABLE_ENTRY_INFO",
			value1 = "${entryIndex}");
	}

	macro viewApplicationInTable {
		AssertElementPresent(
			key_tableName = "${applicationName}",
			locator1 = "OAuth2#ADMIN_TABLE_APP_NAME");

		AssertTextEquals(
			key_tableName = "${applicationName}",
			locator1 = "OAuth2#ADMIN_TABLE_APP_DESCRIPTION",
			value1 = "${description}");

		if (isSet(clientId)) {
			AssertTextEquals(
				key_tableName = "${applicationName}",
				locator1 = "OAuth2#ADMIN_TABLE_APP_CLIENT_ID",
				value1 = "${clientId}");
		}
	}

	macro viewApplicationNameInUserConnectedAppTable {
		AssertElementNotPresent(
			key_appName = "Test Expired Application",
			locator1 = "OAuth2#USER_CONNECTED_APP_TABLE_NAME");
	}

	macro viewAuthorizationRequestAppName {
		AssertElementPresent(
			key_applicationName = "${appName}",
			locator1 = "OAuth2#AUTHORIZATION_REQUEST_APPLICATION_NAME");
	}

	macro viewAuthorizationRequestResourceName {
		AssertElementPresent(
			key_resourceName = "resourceName",
			locator1 = "OAuth2#AUTHORIZATION_REQUEST_RESOURCE_NAME");
	}

	macro viewGlobalScopesPresent {
		AssertElementPresent(
			key_navUnderline = "Global scopes",
			locator1 = "NavUnderline#NAV_UNDERLINE_LINK");
	}

	macro viewGrantedAuthViaAdmin {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "${applicationName}");

		AssertClick(
			key_navItem = "Authorizations",
			locator1 = "NavBar#NAV_ITEM_LINK",
			value1 = "Authorizations");

		AssertElementPresent(
			key_navItem = "Authorizations",
			locator1 = "NavBar#ACTIVE_NAV_ITEM_LINK");

		if ("${noAuthorizations}" == "true") {
			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No authorizations were found.");
		}
		else {
			AssertElementPresent(
				key_userName = "${userName}",
				locator1 = "OAuth2#ADMIN_AUTHORIZATIONS_USER_NAME");
		}

		Navigator.gotoBack();
	}

	macro viewGrantedAuthViaUser {
		UserBar.gotoDropdownItem(dropdownItem = "My Connected Applications");

		if ("${noAuthorizations}" == "true") {
			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No connected applications were found.");
		}
		else {
			AssertElementPresent(
				key_appName = "${applicationName}",
				locator1 = "OAuth2#USER_CONNECTED_APP_TABLE_NAME");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "View",
				rowEntry = "${applicationName}");

			AssertTextEquals(
				locator1 = "OAuth2#USER_CONNECTED_APP_VIEW_NAME",
				value1 = "${applicationName}");
		}
	}

	macro viewPropertyInLiferayExtraProperties {
		AssertTextEquals(
			key_columnName = "lfr-extra-properties",
			key_tableEntry = "${propertyName}",
			locator1 = "LexiconTable#TABLE_ENTRY_INFO",
			value1 = "${propertyValue}");
	}

	macro viewResourcePanelCollapsed {
		for (var resourcePanel : list "${scopeList}") {
			var key_panel = "${resourcePanel}";

			AssertElementPresent(locator1 = "OAuth2#ADMIN_RESOURCE_PANEL_COLLAPSED");
		}
	}

	macro viewResourcePanelNotCollapsed {
		AssertElementNotPresent(
			key_panel = "${panel}",
			locator1 = "OAuth2#ADMIN_RESOURCE_PANEL_COLLAPSED");
	}

	macro viewResourceScopesPresent {
		AssertElementNotPresent(
			key_navUnderline = "Resource scopes",
			locator1 = "NavUnderline#NAV_UNDERLINE_LINK");
	}

	macro viewScopeAliases {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "${applicationName}");

		Navigator.gotoNavItem(navItem = "Scopes");

		for (var resourcePanel : list "${resourcePanels}") {
			OAuth2.expandResourcePanel(resourcePanel = "${resourcePanel}");
		}

		for (var scopeAlias : list "${scopeAliasList}") {
			AssertElementPresent(
				key_scopeAlias = "${scopeAlias}",
				locator1 = "OAuth2#ADMIN_RESOURCE_SCOPE_ALIAS");
		}
	}

	macro viewScopeMappings {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "${applicationName}");

		Navigator.gotoNavItem(navItem = "Scopes");

		for (var resourcePanel : list "${resourcePanels}") {
			OAuth2.expandResourcePanel(resourcePanel = "${resourcePanel}");
		}

		if (isSet(scopeTranslation)) {
			AssertTextEquals(
				key_resourcePanel = "${resourcePanel}",
				locator1 = "OAuth2#ADMIN_RESOURCE_SCOPE_TRANSLATION",
				value1 = "${scopeTranslation}");
		}

		if (isSet(globalScopeLinkValue)) {
			if (contains("${scopeTranslation}", "+")) {
				var partialScopeTranslation = StringUtil.extractFirst("${scopeTranslation}", "+");
				var partialScopeTranslation = StringUtil.trim("${partialScopeTranslation}");
				var key_scopeText = "${partialScopeTranslation}";
			}
			else {
				var key_scopeText = "${scopeTranslation}";
			}

			AssertTextEquals(
				key_scopeText = "${key_scopeText}",
				locator1 = "OAuth2#ADMIN_MODAL_GLOBAL_SCOPE_LINK",
				value1 = "${globalScopeLinkValue}");
		}
	}

	macro viewScopes {
		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "${applicationName}");

		AssertClick(
			key_navItem = "Scopes",
			locator1 = "NavBar#NAV_ITEM_LINK",
			value1 = "Scopes");

		AssertElementPresent(
			key_navItem = "Scopes",
			locator1 = "NavBar#ACTIVE_NAV_ITEM_LINK");

		if (isSet(checkedGlobalScope) || isSet(uncheckedGlobalScope)) {
			Navigator.gotoNavUnderline(navUnderline = "Global scopes");

			if (isSet(checkedGlobalScope)) {
				AssertChecked(
					key_scopeName = "${checkedGlobalScope}",
					locator1 = "OAuth2#ADMIN_GLOBAL_SCOPE_CHECKBOX");
			}

			if (isSet(uncheckedGlobalScope)) {
				AssertNotChecked(
					key_scopeName = "${uncheckedGlobalScope}",
					locator1 = "OAuth2#ADMIN_GLOBAL_SCOPE_CHECKBOX");
			}
		}

		if (isSet(allResourceScopesUnchecked) || isSet(checkedGlobalScopesViaModal) || isSet(removedScope) || isSet(resourceCheckedList) || isSet(resourceUncheckedList)) {
			if (IsElementPresent(key_navUnderline = "Global scopes", locator1 = "NavUnderline#ACTIVE_NAV_UNDERLINE_LINK")) {
				Navigator.gotoNavUnderline(navUnderline = "Resource scopes");
			}

			for (var resourcePanel : list "${resourcePanels}") {
				OAuth2.expandResourcePanel(resourcePanel = "${resourcePanel}");
			}

			if (isSet(resourceCheckedList)) {
				for (var scopeName : list "${resourceCheckedList}") {
					AssertChecked(
						key_scopeName = "${scopeName}",
						locator1 = "OAuth2#ADMIN_RESOURCE_SCOPE_CHECKBOX");
				}
			}

			if (isSet(resourceUncheckedList)) {
				for (var scopeName : list "${resourceUncheckedList}") {
					AssertNotChecked(
						key_scopeName = "${scopeName}",
						locator1 = "OAuth2#ADMIN_RESOURCE_SCOPE_CHECKBOX");
				}
			}

			if ("${allResourceScopesUnchecked}" == "true") {
				AssertElementNotPresent(
					key_matchCount = "1",
					locator1 = "OAuth2#ADMIN_RESOURCE_SCOPE_CHECKED");
			}

			if (isSet(checkedGlobalScopesViaModal)) {
				AssertClick.assertPartialTextClickAt(
					key_scopeText = "${modalLinkScope}",
					locator1 = "OAuth2#ADMIN_MODAL_GLOBAL_SCOPE_LINK",
					value1 = "assigned via a global scope");

				for (var scopeName : list "${checkedGlobalScopesViaModal}") {
					AssertChecked(
						key_scopeName = "${scopeName}",
						locator1 = "OAuth2#ADMIN_MODAL_GLOBAL_SCOPE_CHECKBOX");
				}

				Click(locator1 = "Button#CLOSE_IFRAME");
			}

			if (isSet(removedScope)) {
				AssertElementPresent(
					key_scopeName = "${removedScope}",
					locator1 = "OAuth2#ADMIN_RESOURCE_SCOPE_REMOVED");
			}
		}

		Navigator.gotoBack();
	}

	macro viewSimpleQAAppInScopeMappings {
		AssertElementNotPresent(locator1 = "xpath=(//a[contains(.,'Sample QA app')]//following-sibling::div//li)[2]");
	}

	macro viewUserConnectedExpirationValue {
		AssertTextEquals.assertPartialText(
			locator1 = "OAuth2#USER_CONNECTED_APP_EXPIRATION_VALUE",
			value1 = "${expirationValue}");
	}

	macro viewUserConnectedLastAccess {
		AssertElementPresent(
			key_activity = "Last Access",
			locator1 = "OAuth2#USER_CONNECTED_APP_ACTIVITY");
	}

	macro viewValidOAuth2LaunchRequest {
		Type(
			locator1 = "OAuth2#OAUTH2_TESTER_CLIENT_SECRET",
			value1 = "${clientSecret}");

		Button.click(button = "Obtain OAuth2 Access");

		AssertElementPresent(
			key_text = "Launch Request",
			locator1 = "Button#ANY");
	}

}