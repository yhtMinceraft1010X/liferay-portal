@component-name = "portal-search"
definition {

	property portal.release = "true";
	property portal.suite.search.engine = "elasticsearch7";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.component.names = "Frontend Dataset";
	property testray.main.component.name = "Search Experiences";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	test AddBlueprintWithDescription {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(
			description = "Test Description",
			title = "Test Blueprint");

		AssertTextEquals(
			locator1 = "Blueprints#BLUEPRINTS_EDIT_PAGE_HEADER_DESCRIPTION",
			value1 = "Test Description");

		PortletEntry.save();

		AssertTextEquals(
			entryTitle = "Test Blueprint",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_DESCRIPTION",
			value1 = "Test Description");
	}

	test AddElementToQueryBuilder {
		property environment.acceptance = "true";
		property portal.acceptance = "true";

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost All Keywords Match");

		PortletEntry.save();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		AssertElementPresent(
			element = "Boost All Keywords Match",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT");
	}

	test ApplyBlueprintIDToSearchViaLLSO {
		property test.name.skip.portal.instance = "Blueprints#ApplyBlueprintToSearchViaLLSO";

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Paste Any Elasticsearch Query");

		var elasticsearchQueryJson = '''{"match_none":{}}''';

		Type.typeCodeMirrorEditorNoError(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "${elasticsearchQueryJson}");

		PortletEntry.save();

		Search.openSearchPage();

		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "apple");

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "apple",
			searchAssetType = "Web Content Article");

		SearchPortlets.addWidgets(searchPortletList = "Low Level Search Options");

		var blueprintId = Blueprints.getBlueprintID(title = "Test Blueprint");

		SearchPortlets.configureLowLevelSearchOptions(
			attributesKey = "search.experiences.blueprint.id",
			attributesValue = "${blueprintId}");

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		SearchResultPortlet.viewSearchResultNotPresent(
			searchAssetTitle = "apple",
			searchAssetType = "Web Content Article");
	}

	test ApplyBlueprintJSONToSearchViaLLSO {
		property test.name.skip.portal.instance = "Blueprints#ApplyBlueprintJSONToSearchViaLLSO";

		Search.openSearchPage();

		SearchPortlets.addWidgets(searchPortletList = "Search Insights,Low Level Search Options");

		var blueprintJson = '''{"configuration":{"generalConfiguration":{"includeResponseString":false}}}''';

		SearchPortlets.configureLowLevelSearchOptions(
			attributesKey = "search.experiences.blueprint.json",
			attributesValue = "${blueprintJson}");

		SearchPortlets.searchEmbedded(searchTerm = "test");

		AssertElementNotPresent(
			key_text = "hits",
			locator1 = "SearchResults#SEARCH_INSIGHTS_PORTLET_RESPONSE_QUERY");
	}

	test ApplyBlueprintToContentPageViaBlueprintsOptions {
		JSONBlog.addEntry(
			entryContent = "",
			entryTitle = "apple apple apple");

		JSONWebcontent.addWebContent(
			content = "apple",
			groupName = "Guest",
			title = "WC Title");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost Asset Type");

		Blueprints.configureElementDropdown(
			dropdownName = "Asset Type",
			option = "Web Content Article");

		Type(
			elementName = "Boost Asset Type",
			fieldLabel = "Boost",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_INPUT_FIELD",
			value1 = "1000");

		PortletEntry.save();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Content Search Page",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Search Page",
			siteName = "Guest");

		PageEditor.addWidget(portletName = "Search Bar");

		PageEditor.addWidget(
			collectionName = "Search",
			portletName = "Search Results",
			targetFragmentName = "Search Bar");

		PageEditor.addWidget(
			portletName = "Blueprints Options",
			targetFragmentName = "Search Bar");

		Blueprints.applyBlueprintViaOptionsWidget(blueprintTitle = "Test Blueprint");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Search Page",
			siteName = "Guest");

		SearchPortlets.searchWidget(searchTerm = "apple");

		SearchResultPortlet.viewSearchResultsSpecificOrder(resultsList = "WC Title,apple apple apple");
	}

	test ApplyBlueprintToContentPageViaLLSO {
		property test.name.skip.portal.instance = "Blueprints#ApplyBlueprintToContentPageViaLLSO";

		JSONBlog.addEntry(
			entryContent = "",
			entryTitle = "apple apple apple");

		JSONWebcontent.addWebContent(
			content = "apple",
			groupName = "Guest",
			title = "WC Title");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost Asset Type");

		Blueprints.configureElementDropdown(
			dropdownName = "Asset Type",
			option = "Web Content Article");

		Type(
			elementName = "Boost Asset Type",
			fieldLabel = "Boost",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_INPUT_FIELD",
			value1 = "1000");

		PortletEntry.save();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Content Search Page",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Content Search Page",
			siteName = "Guest");

		PageEditor.addWidget(portletName = "Search Bar");

		PageEditor.addWidget(
			collectionName = "Search",
			portletName = "Search Results",
			targetFragmentName = "Search Bar");

		PageEditor.addWidget(
			portletName = "Low Level Search Options",
			targetFragmentName = "Search Bar");

		var blueprintId = Blueprints.getBlueprintID(title = "Test Blueprint");

		SearchPortlets.configureLowLevelSearchOptions(
			attributesKey = "search.experiences.blueprint.id",
			attributesValue = "${blueprintId}");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "Content Search Page",
			siteName = "Guest");

		SearchPortlets.searchWidget(searchTerm = "apple");

		SearchResultPortlet.viewSearchResultsSpecificOrder(resultsList = "WC Title,apple apple apple");
	}

	test ApplyBlueprintWithDefaultElement {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost Asset Type");

		Blueprints.configureElementDropdown(
			dropdownName = "Asset Type",
			option = "Web Content Article");

		Type(
			elementName = "Boost Asset Type",
			fieldLabel = "Boost",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_INPUT_FIELD",
			value1 = "1000");

		PortletEntry.save();

		Search.openSearchPage();

		JSONWebcontent.addWebContent(
			content = "Liferay",
			groupName = "Guest",
			title = "Liferay Web Content");

		JSONBlog.addEntry(
			entryContent = "Liferay Liferay",
			entryTitle = "Liferay Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "liferay");

		SearchResultPortlet.viewSearchResultsSpecificOrder(resultsList = "Liferay Blogs Entry,Liferay Web Content");

		Blueprints.applyBlueprintViaOptionsWidget(blueprintTitle = "Test Blueprint");

		SearchPortlets.searchEmbedded(searchTerm = "liferay");

		SearchResultPortlet.viewSearchResultsSpecificOrder(resultsList = "Liferay Web Content,Liferay Blogs Entry");
	}

	@description = "This is a use case for LPS-147264."
	test ApplyUserCustomFieldVariableToCustomElement {
		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "Employee eyes only");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Custom Fields");

		CustomFields.addCP(
			customFieldName = "Employee",
			customFieldType = "True / False",
			resourceName = "User");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.gotoEditCP(userScreenName = "usersn");

		Select(
			locator1 = "Select#SELECT_ID",
			selectFieldId = "employee",
			value1 = "False");

		PortletEntry.save();

		Blueprints.openBlueprintsAdmin();

		var elementSourceJson = '''
{
  "elementDefinition": {
    "configuration": {
      "queryConfiguration": {
        "queryEntries": [
          {
            "clauses": [
              {
                "context": "query",
                "occur": "filter",
                "query": {
                  "bool": {
                    "must_not": [
                      {
                        "match": {
                          "title_${context.language_id}": {
                            "query": "employee"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "condition": {
              "equals": {
                "parameterName": "user.custom.field.employee",
                "value": false
              }
            }
          }
        ]
      }
    }
  },
  "title_i18n": {
    "en_US": "Test Element"
  }
}
		''';

		Blueprints.createElement(
			elementSourceJson = "${elementSourceJson}",
			title = "Test Element");

		Blueprints.gotoElement(element = "Test Element");

		Click(
			item = "user",
			locator1 = "Blueprints#ELEMENTS_EDIT_PAGE_PREDEFINED_VARIABLES_SIDEBAR_ITEM");

		AssertElementPresent(
			item = "Employee",
			locator1 = "Blueprints#ELEMENTS_EDIT_PAGE_PREDEFINED_VARIABLES_SIDEBAR_ITEM");

		PortletEntry.save();

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Test Element");

		PortletEntry.save();

		Search.openSearchPage();

		Blueprints.applyBlueprintViaOptionsWidget(blueprintTitle = "Test Blueprint");

		SearchPortlets.searchEmbedded(searchTerm = "Employee");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Employee eyes only",
			searchAssetType = "Web Content Article");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		SearchPortlets.searchEmbedded(searchTerm = "Employee");

		SearchResultPortlet.viewSearchResultNotPresent(
			searchAssetTitle = "Employee eyes only",
			searchAssetType = "Web Content Article");
	}

	test AssertBlueprintStillAppliedAfterRename {
		JSONWebcontent.addWebContent(
			content = "apple apple apple",
			groupName = "Guest",
			title = "WC Shorter");

		JSONWebcontent.addWebContent(
			content = "apple adding more content to this article",
			groupName = "Guest",
			title = "WC Longer");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost Longer Contents");

		Type(
			elementName = "Boost Longer Contents",
			fieldLabel = "Boost",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_INPUT_FIELD",
			value1 = "1000");

		PortletEntry.save();

		Search.openSearchPage();

		Blueprints.applyBlueprintViaOptionsWidget(blueprintTitle = "Test Blueprint");

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		SearchResultPortlet.viewSearchResultsSpecificOrder(resultsList = "WC Longer,WC Shorter");

		Blueprints.openBlueprintsAdmin();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		Click(locator1 = "Blueprints#BLUEPRINTS_EDIT_PAGE_HEADER_TITLE");

		PortletEntry.inputTitle(title = "Edited Blueprint");

		Button.clickDone();

		PortletEntry.save();

		Search.openSearchPage();

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		SearchResultPortlet.viewSearchResultsSpecificOrder(resultsList = "WC Longer,WC Shorter");
	}

	test AssertDisabledQueryElementNotAppliedToSearch {
		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "apple apple apple");

		var webContentserviceContext = '''{"assetTagNames": ["apple"]}''';

		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			serviceContext = "${webContentserviceContext}",
			title = "gala");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost Tags Match");

		Type(
			elementName = "Boost Tags Match",
			fieldLabel = "Boost",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_INPUT_FIELD",
			value1 = "3000");

		PortletEntry.save();

		Search.openSearchPage();

		Blueprints.applyBlueprintViaOptionsWidget(blueprintTitle = "Test Blueprint");

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		SearchResultPortlet.viewSearchResultsSpecificOrder(resultsList = "gala,apple apple apple");

		Blueprints.openBlueprintsAdmin();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		Uncheck.uncheckToggleSwitch(
			elementName = "Boost Tags Match",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_ENABLE_DISABLE_TOGGLE");

		PortletEntry.save();

		Search.openSearchPage();

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		SearchResultPortlet.viewSearchResultsSpecificOrder(resultsList = "apple apple apple,gala");
	}

	test AssertLocalizedFieldsAddLocaleDropdown {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Filter by Exact Terms Match");

		Type(
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_FIELD_MAPPING_FIELD",
			value1 = "local");

		Click(
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_FIELD_MAPPING_GLOBAL_ICON_OPTION",
			optionName = "localized_title");

		AssertElementPresent(locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_FIELD_MAPPING_LOCALE_DROPDOWN");
	}

	@description = "This is a use case for LPS-144359."
	test AssertNoBlueprintsPreviewResultsDueToEmptyRequiredFields {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost Asset Type");

		Blueprints.searchBlueprintsPreview(searchTerm = "test");

		Alert.viewErrorMessage(errorMessage = "The configuration has missing or invalid values.");

		AssertElementNotPresent(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_TITLE",
			resultTitle = "");

		Alert.viewRequiredField();
	}

	test AssertNonAdminsCannotAccessBlueprintsPortlet {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		AssertElementNotPresent(locator1 = "ControlMenu#APPLICATIONS_MENU_ICON");

		Blueprints.openBlueprintsAdmin();

		Portlet.viewNoPermissionPG();
	}

	@description = "This is a use case for LPS-132856."
	test AssertTitleAndDescriptionNoXSS {
		Blueprints.openBlueprintsAdmin();

		Click(locator1 = "Button#PLUS");

		PortletEntry.inputTitle(title = "<script>alert(123);</script>");

		PortletEntry.inputDescription(description = "<script>alert(123);</script>");

		PortletEntry.create();

		AssertAlertNotPresent();

		PortletEntry.save();

		AssertAlertNotPresent();

		Search.openSearchPage();

		Blueprints.applyBlueprintViaOptionsWidget(blueprintTitle = "<script>alert(123);</script>");

		Refresh();

		AssertAlertNotPresent();
	}

	test AssertUsingCopiedElementJSONWithinCustomElement {
		JSONBlog.addEntry(
			entryContent = "",
			entryTitle = "apple apple apple");

		JSONWebcontent.addWebContent(
			content = "apple",
			groupName = "Guest",
			title = "WC Title");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost Asset Type");

		Blueprints.configureElementDropdown(
			dropdownName = "Asset Type",
			option = "Web Content Article");

		Type(
			elementName = "Boost Asset Type",
			fieldLabel = "Boost",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_INPUT_FIELD",
			value1 = "1000");

		Blueprints.selectAddedElementMenuItem(
			element = "Boost Asset Type",
			menuItem = "View Element JSON");

		SelectFrameTop();

		Click(locator1 = "Link#DOWNLOAD");

		var outputDir = PropsUtil.get("output.dir.name");
		var fileContent = FileUtil.read("${outputDir}/sxpElement.json");
		var customElementJson = StringUtil.replace("${fileContent}", "Boost Asset Type", "Boost Results of Web Content Articles");

		Click(locator1 = "Modal#CLOSE_BUTTON");

		ClickNoError(
			key_text = "Cancel",
			locator1 = "Link#ANY");

		Confirm();

		Blueprints.createElement(
			elementSourceJson = "${customElementJson}",
			title = "Test Element");

		Navigator.gotoNavItem(navItem = "Blueprints");

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost Results of Web Content Articles");

		PortletEntry.save();

		Search.openSearchPage();

		Blueprints.applyBlueprintViaOptionsWidget(blueprintTitle = "Test Blueprint");

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		SearchResultPortlet.viewSearchResultsSpecificOrder(resultsList = "WC Title,apple apple apple");
	}

	test AssertUsingCopiedElementJSONWithinCustomJSONElement {
		JSONBlog.addEntry(
			entryContent = "",
			entryTitle = "apple apple apple");

		JSONWebcontent.addWebContent(
			content = "apple",
			groupName = "Guest",
			title = "WC Title");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost Asset Type");

		Blueprints.configureElementDropdown(
			dropdownName = "Asset Type",
			option = "Web Content Article");

		Type(
			elementName = "Boost Asset Type",
			fieldLabel = "Boost",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_INPUT_FIELD",
			value1 = "1000");

		Blueprints.selectAddedElementMenuItem(
			element = "Boost Asset Type",
			menuItem = "View Element JSON");

		SelectFrameTop();

		Click(locator1 = "Link#DOWNLOAD");

		var outputDir = PropsUtil.get("output.dir.name");
		var elementJson = FileUtil.read("${outputDir}/sxpElement.json");

		Click(locator1 = "Modal#CLOSE_BUTTON");

		Blueprints.addElement(element = "Custom JSON Element");

		Type.typeCodeMirrorEditorNoError(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "${elementJson}");

		Blueprints.selectAddedElementMenuItem(
			element = "Boost Asset Type",
			menuItem = "Remove");

		PortletEntry.save();

		Search.openSearchPage();

		Blueprints.applyBlueprintViaOptionsWidget(blueprintTitle = "Test Blueprint");

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		SearchResultPortlet.viewSearchResultsSpecificOrder(resultsList = "WC Title,apple apple apple");
	}

	test BoostCustomLiferayObjectType {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 501",
			objectName = "CustomObject501",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects 501",
			scope = "site");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "title",
			fieldName = "title",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject501");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 501");

		CreateObject.selectTitleField(fieldLabel = "Title");

		ObjectAdmin.publishObjectViaUI();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Custom Objects 501");

		LexiconEntry.gotoAdd();

		Type(
			locator1 = "TextInput#TEXT",
			value1 = "reddish apple");

		PortletEntry.save();

		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "red apple");

		Search.openSearchPage();

		SearchPortlets.searchEmbedded(searchTerm = "red apple");

		SearchResultPortlet.viewSearchResultsSpecificOrder(resultsList = "red apple,reddish apple");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Boost Custom Object Blueprint");

		Navigator.gotoNavNested(navNested = "Query Settings");

		Check.checkNotVisible(
			locator1 = "Radio#ANY",
			radioLabel = "Selected Types");

		Button.click(button = "Select Asset Types");

		AssertElementPresent(
			assetType = "Custom Object 501",
			locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_CHECKBOX");

		Click(locator1 = "Modal#CLOSE_BUTTON");

		Navigator.gotoNavNested(navNested = "Query Elements");

		Blueprints.addElement(element = "Boost Asset Type");

		Blueprints.configureElementDropdown(
			dropdownName = "Asset Type",
			option = "Custom Object 501");

		Type(
			elementName = "Boost Asset Type",
			fieldLabel = "Boost",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_INPUT_FIELD",
			value1 = "1000");

		Blueprints.searchBlueprintsPreview(searchTerm = "red apple");

		AssertTextEquals.assertPartialText(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SPECIFIC_RANKING",
			resultRanking = "1",
			value1 = "reddish apple");

		PortletEntry.save();

		Search.openSearchPage();

		Blueprints.applyBlueprintViaOptionsWidget(blueprintTitle = "Boost Custom Object Blueprint");

		SearchPortlets.searchEmbedded(searchTerm = "red apple");

		SearchResultPortlet.viewSearchResultsSpecificOrder(resultsList = "reddish apple,red apple");
	}

	test BoostWithCustomElasticsearchQuery {
		JSONWebcontent.addWebContent(
			content = "Los Angeles",
			groupName = "Guest",
			title = "Delicious Food");

		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "Good Food");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Paste Any Elasticsearch Query");

		var elasticsearchQueryJson = '''
{
	"match":
	{
		"content_en_US":
		{
			"query": "los angeles"
		}
	}
}
		''';

		Type.typeCodeMirrorEditorNoError(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "${elasticsearchQueryJson}");

		Blueprints.configureElementDropdown(
			dropdownName = "Occur",
			option = "MUST");

		PortletEntry.save();

		Search.openSearchPage();

		Blueprints.applyBlueprintViaOptionsWidget(blueprintTitle = "Test Blueprint");

		SearchPortlets.searchEmbedded(searchTerm = "food");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Delicious Food",
			searchAssetType = "Web Content Article");

		SearchResultPortlet.viewSearchResultNotPresent(
			searchAssetTitle = "Good Food",
			searchAssetType = "Web Content Article");
	}

	test CancelChangesToBlueprintForm {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost Proximity");

		Navigator.gotoNavNested(navNested = "Query Settings");

		Check.checkNotVisible(
			locator1 = "Radio#ANY",
			radioLabel = "Selected Types");

		Button.click(button = "Select Asset Types");

		Check.checkNotVisible(
			assetType = "Blogs Entry",
			locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_CHECKBOX");

		Button.clickDone();

		Uncheck.uncheckToggleSwitch(locator1 = "Blueprints#BLUEPRINTS_SEARCH_FRAMEWORK_INDEXER_CLAUSES_ON_OFF_TOGGLE");

		Navigator.gotoNavTab(navTab = "Configuration");

		var aggregationConfigurationJson = '''{"aggs":{}}''';

		Type.typeCodeMirrorEditorNoError(
			configurationField = "Aggregation Configuration",
			locator1 = "Blueprints#BLUEPRINTS_CONFIGURATION_EDITOR",
			value1 = "${aggregationConfigurationJson}");

		ClickNoError(
			key_text = "Cancel",
			locator1 = "Link#ANY");

		Confirm();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		AssertElementPresent(locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENTS_EMPTY");

		Navigator.gotoNavNested(navNested = "Query Settings");

		AssertNotChecked.assertNotCheckedNotVisible(
			locator1 = "Radio#ANY",
			radioLabel = "Selected Types");

		AssertChecked.assertCheckedNotVisible(locator1 = "Blueprints#BLUEPRINTS_SEARCH_FRAMEWORK_INDEXER_CLAUSES_ON_OFF_TOGGLE");

		Navigator.gotoNavTab(navTab = "Configuration");

		AssertTextNotPresent(value1 = "aggs");
	}

	test CancelChangesToQuerySettings {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost Proximity");

		Blueprints.addElement(element = "Boost Contents in a Category for the Time of Day");

		Blueprints.addElement(element = "Limit Search to My Contents");

		ClickNoError(
			key_text = "Cancel",
			locator1 = "Link#ANY");

		Confirm();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		AssertElementPresent(locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENTS_EMPTY");
	}

	test CopyCustomElement {
		Blueprints.openBlueprintsAdmin();

		var elementSourceJson = '''
{
	"description_i18n": {
		"en_US": "Copy Element"
	},
	"elementDefinition": {
		"configuration": {},
		"uiConfiguration": {}
	},
	"title_i18n": {
		"en_US": "Test Element"
	}
}
		''';

		Blueprints.createElement(
			elementSourceJson = "${elementSourceJson}",
			title = "Test Element");

		Blueprints.gotoEntryMenuItem(
			menuItem = "Copy",
			title = "Test Element");

		Blueprints.gotoElement(element = "Copy of Test Element");

		AssertTextEquals.assertPartialText(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "Copy Element");
	}

	test CopyElementJSONViaBlueprintsQueryBuilder {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost All Keywords Match");

		Blueprints.selectAddedElementMenuItem(
			element = "Boost All Keywords Match",
			menuItem = "View Element JSON");

		SelectFrameTop();

		Click.javaScriptClick(locator1 = "Button#COPY");

		Click(locator1 = "Modal#CLOSE_BUTTON");

		PortletEntry.save();

		Blueprints.viewCopiedContent(text = "clauses");
	}

	test CopyElementJSONViaEditElementPreview {
		Blueprints.openBlueprintsAdmin();

		Blueprints.gotoElement(
			element = "Text Match Over Multiple Fields",
			searchForElement = "true");

		Click(locator1 = "Button#PREVIEW");

		Click(
			ariaLabel = "Dropdown",
			locator1 = "Button#ANY_WITH_ARIA_LABEL");

		MenuItem.clickNoError(menuItem = "View Element JSON");

		SelectFrameTop();

		Click.javaScriptClick(locator1 = "Button#COPY");

		Blueprints.viewCopiedContent(text = "queryConfiguration");
	}

	test CopyRawResponseViaBlueprintsPreview {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.searchBlueprintsPreview(searchTerm = "test");

		Click(
			key_text = "View Raw Response",
			locator1 = "Button#ANY");

		SelectFrameTop();

		Click.javaScriptClick(locator1 = "Button#COPY");

		Blueprints.viewCopiedContent(text = "hits");
	}

	test CopyScoreExplanationViaBlueprintsPreview {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.searchBlueprintsPreview(searchTerm = "test");

		Click(
			assetTitle = "Test",
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SCORE");

		SelectFrameTop();

		Click.javaScriptClick(locator1 = "Button#COPY");

		Blueprints.viewCopiedContent(text = "PerFieldSimilarity");
	}

	test CreateBlueprint {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		PortletEntry.save();

		Blueprints.viewEntryTitle(title = "Test Blueprint");
	}

	test CreateElement {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createElement(title = "Test Element");

		Blueprints.viewEntryTitle(title = "Test Element");
	}

	test CreateElementWithDescription {
		Blueprints.openBlueprintsAdmin();

		Navigator.gotoNavItem(navItem = "Elements");

		Click(locator1 = "Button#PLUS");

		PortletEntry.inputTitle(title = "Test Element");

		PortletEntry.inputDescription(description = "Test Element Description");

		Button.click(button = "Create");

		AssertTextEquals.assertPartialText(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "Test Element Description");

		PortletEntry.save();

		AssertTextEquals(
			entryTitle = "Test Element",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_DESCRIPTION",
			value1 = "Test Element Description");
	}

	@description = "This is a use case for LPS-146582."
	test DefaultHighlightAppliedWithBlueprints {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		PortletEntry.save();

		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "WC Title");

		Search.openSearchPage();

		Blueprints.applyBlueprintViaOptionsWidget(blueprintTitle = "Test Blueprint");

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		AssertCssValue(
			key_searchAssetTitle = "WC",
			locator1 = "SearchResults#ASSET_ENTRY_TABLE_TITLE_SPECIFIC_HIGHLIGHT",
			locator2 = "background-color",
			value1 = "rgba(255, 255, 204, 1)");

		AssertCssValue(
			key_searchAssetTitle = "Title",
			locator1 = "SearchResults#ASSET_ENTRY_TABLE_TITLE_SPECIFIC_HIGHLIGHT",
			locator2 = "background-color",
			value1 = "rgba(255, 255, 204, 1)");
	}

	test DefineBlueprintsRolePermissions {
		JSONRole.addRegularRole(
			roleKey = "Search Blueprints Admin",
			roleTitle = "Search Blueprints Admin");

		for (var resourceActionIndex : list "ACCESS_IN_CONTROL_PANEL,CONFIGURATION,PERMISSIONS,PREFERENCES,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com_liferay_search_experiences_web_internal_blueprint_admin_portlet_SXPBlueprintAdminPortlet",
				roleTitle = "Search Blueprints Admin");
		}

		for (var resourceActionIndex : list "ADD_SXP_BLUEPRINT") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.search.experiences",
				roleTitle = "Search Blueprints Admin");
		}

		for (var resourceActionIndex : list "APPLY_SXP_BLUEPRINT,DELETE,PERMISSIONS,UPDATE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.search.experiences.model.SXPBlueprint",
				roleTitle = "Search Blueprints Admin");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Search Blueprints Admin");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONRole.assignRoleToUser(
			roleTitle = "Search Blueprints Admin",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ApplicationsMenu.gotoPortlet(
			category = "Search Experiences",
			panel = "Applications",
			portlet = "Blueprints");

		Blueprints.createBlueprint(title = "New Blueprint");

		PortletEntry.save();

		Blueprints.gotoBlueprint(title = "New Blueprint");

		Click(locator1 = "Icon#EDIT_PENCIL");

		PortletEntry.inputTitle(title = "Edited Blueprint");

		Button.clickDone();

		PortletEntry.save();

		Blueprints.deleteEntry(title = "Edited Blueprint");

		Blueprints.viewNoEntry(title = "Edited Blueprint");
	}

	test DefineElementsRolePermissions {
		JSONRole.addRegularRole(
			roleKey = "Search Elements Admin",
			roleTitle = "Search Elements Admin");

		for (var resourceActionIndex : list "ACCESS_IN_CONTROL_PANEL,CONFIGURATION,PERMISSIONS,PREFERENCES,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com_liferay_search_experiences_web_internal_blueprint_admin_portlet_SXPBlueprintAdminPortlet",
				roleTitle = "Search Elements Admin");
		}

		for (var resourceActionIndex : list "ADD_SXP_ELEMENT") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.search.experiences",
				roleTitle = "Search Elements Admin");
		}

		for (var resourceActionIndex : list "DELETE,PERMISSIONS,UPDATE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.search.experiences.model.SXPElement",
				roleTitle = "Search Elements Admin");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Search Elements Admin");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONRole.assignRoleToUser(
			roleTitle = "Search Elements Admin",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ApplicationsMenu.gotoPortlet(
			category = "Search Experiences",
			panel = "Applications",
			portlet = "Blueprints");

		Blueprints.createElement(title = "New Element");

		Blueprints.gotoElement(element = "New Element");

		var elementSourceJson = '''
{
	"elementDefinition": {
		"configuration": {},
		"uiConfiguration": {}
	},
	"title_i18n": {
		"en_US": "Edited Element"
	}
}
		''';

		Type.typeCodeMirrorEditorNoError(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "${elementSourceJson}");

		PortletEntry.save();

		Blueprints.deleteEntry(title = "Edited Element");

		Blueprints.viewNoEntry(element = "Edited Element");
	}

	test DeleteBlueprint {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		PortletEntry.save();

		Blueprints.deleteEntry(title = "Test Blueprint");

		Blueprints.viewNoEntry(title = "Test Blueprint");
	}

	test DeleteElement {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createElement(title = "Test Element");

		Blueprints.deleteEntry(title = "Test Element");

		Blueprints.viewNoEntry(title = "Test Element");
	}

	test DownloadElementJSONViaBlueprintsQueryBuilder {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Paste Any Elasticsearch Query");

		Blueprints.selectAddedElementMenuItem(
			element = "Paste Any Elasticsearch Query",
			menuItem = "View Element JSON");

		SelectFrameTop();

		Click(locator1 = "Link#DOWNLOAD");

		Blueprints.viewDownloadedContent(
			fileName = "sxpElement.json",
			text = "clauses");
	}

	test DownloadElementJSONViaElementsEditPreview {
		Blueprints.openBlueprintsAdmin();

		Blueprints.gotoElement(
			element = "Text Match Over Multiple Fields",
			searchForElement = "true");

		Click(locator1 = "Button#PREVIEW");

		Click(
			ariaLabel = "Dropdown",
			locator1 = "Button#ANY_WITH_ARIA_LABEL");

		MenuItem.clickNoError(menuItem = "View Element JSON");

		SelectFrameTop();

		Click(locator1 = "Link#DOWNLOAD");

		Blueprints.viewDownloadedContent(
			fileName = "sxpElement.json",
			text = "queryConfiguration");
	}

	test DownloadRawResponseViaBlueprintsPreview {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.searchBlueprintsPreview(searchTerm = "test");

		Click(
			key_text = "View Raw Response",
			locator1 = "Button#ANY");

		SelectFrameTop();

		Click(locator1 = "Link#DOWNLOAD");

		Blueprints.viewDownloadedContent(
			fileName = "raw_response.json",
			text = "hits");
	}

	test DownloadScoreExplanationViaBlueprintsPreview {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.searchBlueprintsPreview(searchTerm = "test");

		Click(
			assetTitle = "Test",
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SCORE");

		SelectFrameTop();

		Click(locator1 = "Link#DOWNLOAD");

		Blueprints.viewDownloadedContent(
			fileName = "score_explanation.json",
			text = "PerFieldSimilarity");
	}

	test EditBlueprintDescription {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Click(locator1 = "Blueprints#BLUEPRINTS_EDIT_PAGE_HEADER_DESCRIPTION");

		PortletEntry.inputDescription(description = "Edited Description");

		Button.clickDone();

		AssertTextEquals(
			locator1 = "Blueprints#BLUEPRINTS_EDIT_PAGE_HEADER_DESCRIPTION",
			value1 = "Edited Description");

		PortletEntry.save();

		AssertTextEquals(
			entryTitle = "Test Blueprint",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_DESCRIPTION",
			value1 = "Edited Description");
	}

	test EditBlueprintTitle {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Click(locator1 = "Blueprints#BLUEPRINTS_EDIT_PAGE_HEADER_TITLE");

		PortletEntry.inputTitle(title = "Edited Blueprint");

		Button.clickDone();

		AssertTextEquals(
			locator1 = "Blueprints#BLUEPRINTS_EDIT_PAGE_HEADER_TITLE",
			value1 = "Edited Blueprint");

		PortletEntry.save();

		Blueprints.viewEntryTitle(title = "Edited Blueprint");

		Blueprints.viewNoEntry(title = "Test Blueprint");
	}

	test ExportImportBlueprint {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost Tags Match");

		Navigator.gotoNavNested(navNested = "Query Settings");

		Check.checkNotVisible(
			locator1 = "Radio#ANY",
			radioLabel = "Selected Types");

		Button.click(button = "Select Asset Types");

		Check.checkNotVisible(
			assetType = "Blogs Entry",
			locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_CHECKBOX");

		Button.clickDone();

		Uncheck.uncheckToggleSwitch(locator1 = "Blueprints#BLUEPRINTS_SEARCH_FRAMEWORK_INDEXER_CLAUSES_ON_OFF_TOGGLE");

		Check.checkNotVisible(
			locator1 = "Radio#ANY",
			radioLabel = "Customize");

		Button.click(button = "Customize Contributors");

		Uncheck.uncheckToggleSwitch(
			contributorClass = "AccountEntryKeywordQueryContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ON_OFF_TOGGLE");

		Navigator.gotoNavTab(navTab = "Configuration");

		var aggregationConfigurationJson = '''{"aggs":{}}''';

		Type.typeCodeMirrorEditorNoError(
			configurationField = "Aggregation Configuration",
			locator1 = "Blueprints#BLUEPRINTS_CONFIGURATION_EDITOR",
			value1 = "${aggregationConfigurationJson}");

		PortletEntry.save();

		Blueprints.gotoEntryMenuItem(
			menuItem = "Export",
			title = "Test Blueprint");

		Blueprints.deleteEntry(title = "Test Blueprint");

		Click(locator1 = "Portlet#OPTIONS_ICON");

		MenuItem.click(menuItem = "Import");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		UploadTempFile.uploadTempFileHiddenNoMouseOver(
			locator1 = "TextInput#FILE",
			value1 = "Test Blueprint.json");

		Click(
			key_text = "Import",
			locator1 = "Button#ANY");

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		AssertElementPresent(
			element = "Boost Tags Match",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT");

		Navigator.gotoNavNested(navNested = "Query Settings");

		AssertElementPresent(
			assetType = "Blogs Entry",
			locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_SELECTED");

		AssertNotChecked.assertNotCheckedNotVisible(locator1 = "Blueprints#BLUEPRINTS_SEARCH_FRAMEWORK_INDEXER_CLAUSES_ON_OFF_TOGGLE");

		Button.click(button = "Customize Contributors");

		AssertNotChecked.assertNotCheckedNotVisible(
			contributorClass = "AccountEntryKeywordQueryContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ON_OFF_TOGGLE");

		Navigator.gotoNavTab(navTab = "Configuration");

		AssertTextPresent(value1 = "aggs");
	}

	test ExportImportElement {
		Blueprints.openBlueprintsAdmin();

		var elementSourceJson = '''
{
	"description_i18n": {
		"en_US": "Import Element"
	},
	"elementDefinition": {
		"configuration": {},
		"uiConfiguration": {}
	},
	"title_i18n": {
		"en_US": "Test Element"
	}
}
			''';

		Blueprints.createElement(
			elementSourceJson = "${elementSourceJson}",
			title = "Test Element");

		Blueprints.gotoEntryMenuItem(
			menuItem = "Export",
			title = "Test Element");

		Blueprints.deleteEntry(title = "Test Element");

		Click(locator1 = "Portlet#OPTIONS_ICON");

		MenuItem.click(menuItem = "Import");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		UploadTempFile.uploadTempFileHiddenNoMouseOver(
			locator1 = "TextInput#FILE",
			value1 = "Test Element.json");

		Click(
			key_text = "Import",
			locator1 = "Button#ANY");

		Blueprints.gotoElement(element = "Test Element");

		AssertTextPresent(value1 = "Import Element");
	}

	test HideAndShowAddElementsSidebar {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		AssertVisible(locator1 = "Blueprints#BLUEPRINTS_ADD_ELEMENTS_SIDEBAR_HEADER");

		Click(
			ariaLabel = "Add Query Element",
			locator1 = "Button#ANY_WITH_ARIA_LABEL");

		AssertNotVisible(locator1 = "Blueprints#BLUEPRINTS_ADD_ELEMENTS_SIDEBAR_HEADER");

		Navigator.gotoNavNested(navNested = "Query Settings");

		Navigator.gotoNavNested(navNested = "Query Elements");

		AssertNotVisible(locator1 = "Blueprints#BLUEPRINTS_ADD_ELEMENTS_SIDEBAR_HEADER");

		Click(
			ariaLabel = "Add Query Element",
			locator1 = "Button#ANY_WITH_ARIA_LABEL");

		AssertVisible(locator1 = "Blueprints#BLUEPRINTS_ADD_ELEMENTS_SIDEBAR_HEADER");

		Navigator.gotoNavNested(navNested = "Query Settings");

		Navigator.gotoNavNested(navNested = "Query Elements");

		AssertVisible(locator1 = "Blueprints#BLUEPRINTS_ADD_ELEMENTS_SIDEBAR_HEADER");
	}

	test HideWebContentViaCustomElement {
		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "Show This Content");

		JSONWebcontent.addWebContent(
			assetTagNames = "hide",
			content = "",
			groupName = "Guest",
			title = "Hide This Content");

		Blueprints.openBlueprintsAdmin();

		var elementSourceJson = '''
{
	"elementDefinition": {
		"category": "hide",
		"configuration": {
			"queryConfiguration": {
				"queryEntries": [
					{
						"clauses": [
							{
								"context": "query",
								"occur": "filter",
								"query": {
									"bool": {
										"must_not": [
											{
												"term": {
													"assetTagNames.raw": {
														"value": "${configuration.asset_tag}"
													}
												}
											}
										]
									}
								}
							}
						]
					}
				]
			}
		},
		"icon": "hidden",
		"uiConfiguration": {
			"fieldSets": [
				{
					"fields": [
						{
							"label": "Asset Tag",
							"name": "asset_tag",
							"type": "text"
						}
					]
				}
			]
		}
	},
	"title_i18n": {
		"en_US": "Hide Content with a Tag"
	}
}
			''';

		Blueprints.createElement(
			elementSourceJson = "${elementSourceJson}",
			title = "Hide Content with Tag");

		Navigator.gotoNavItem(navItem = "Blueprints");

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Hide Content with a Tag");

		Type(
			elementName = "Hide Content with a Tag",
			fieldLabel = "Asset Tag",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_INPUT_FIELD",
			value1 = "hide");

		PortletEntry.save();

		Search.openSearchPage();

		Blueprints.applyBlueprintViaOptionsWidget(blueprintTitle = "Test Blueprint");

		SearchPortlets.searchEmbedded(searchTerm = "Content");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Show This Content",
			searchAssetType = "Web Content Article");

		SearchResultPortlet.viewSearchResultNotPresent(
			searchAssetTitle = "Hide This Content",
			searchAssetType = "Web Content Article");
	}

	test ModifyBlueprintsAdminTableFields {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		PortletEntry.save();

		Click(locator1 = "Blueprints#BLUEPRINTS_ADMIN_FIELDS_MENU");

		for (var field : list "Description,ID,Author,Created,Modified") {
			Click(
				fieldName = "${field}",
				locator1 = "Blueprints#BLUEPRINTS_ADMIN_FIELDS_MENU_ITEM");
		}

		for (var field : list "Description,ID,Author,Created,Modified") {
			AssertElementNotPresent(
				fieldName = "${field}",
				locator1 = "Blueprints#BLUEPRINTS_ADMIN_FIELD");
		}

		Click(
			fieldName = "Title",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_FIELDS_MENU_ITEM");

		for (var field : list "Title,Description,ID,Author,Created,Modified") {
			AssertElementPresent(
				fieldName = "${field}",
				locator1 = "Blueprints#BLUEPRINTS_ADMIN_FIELD");
		}

		Click(
			fieldName = "Description",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_FIELDS_MENU_ITEM");

		AssertElementPresent(
			fieldName = "Description",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_FIELD");

		for (var field : list "Title,ID,Author,Created,Modified") {
			AssertElementNotPresent(
				fieldName = "${field}",
				locator1 = "Blueprints#BLUEPRINTS_ADMIN_FIELD");
		}
	}

	test ModifyIndexerClausesToggle {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Navigator.gotoNavNested(navNested = "Query Settings");

		AssertChecked.assertCheckedNotVisible(locator1 = "Blueprints#BLUEPRINTS_SEARCH_FRAMEWORK_INDEXER_CLAUSES_ON_OFF_TOGGLE");

		Uncheck.uncheckToggleSwitch(locator1 = "Blueprints#BLUEPRINTS_SEARCH_FRAMEWORK_INDEXER_CLAUSES_ON_OFF_TOGGLE");

		PortletEntry.save();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		Navigator.gotoNavNested(navNested = "Query Settings");

		AssertNotChecked.assertNotCheckedNotVisible(locator1 = "Blueprints#BLUEPRINTS_SEARCH_FRAMEWORK_INDEXER_CLAUSES_ON_OFF_TOGGLE");

		Check.checkToggleSwitch(locator1 = "Blueprints#BLUEPRINTS_SEARCH_FRAMEWORK_INDEXER_CLAUSES_ON_OFF_TOGGLE");

		PortletEntry.save();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		Navigator.gotoNavNested(navNested = "Query Settings");

		AssertChecked.assertCheckedNotVisible(locator1 = "Blueprints#BLUEPRINTS_SEARCH_FRAMEWORK_INDEXER_CLAUSES_ON_OFF_TOGGLE");
	}

	test NavigateToEditPageViaMenu {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		PortletEntry.save();

		Blueprints.gotoEntryMenuItem(
			menuItem = "Edit",
			title = "Test Blueprint");

		ControlMenu.viewHeaderTitle(headerTitle = "Edit Blueprint");
	}

	test NavigateToEditPageViaTitleLink {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		PortletEntry.save();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		ControlMenu.viewHeaderTitle(headerTitle = "Edit Blueprint");
	}

	test PaginateBlueprintsAdmin {
		Blueprints.openBlueprintsAdmin();

		for (var index : list "One,Two,Three,Four,Five") {
			Blueprints.createBlueprint(title = "Blueprint ${index}");

			PortletEntry.save();
		}

		Pagination.viewResults(results = "Showing 1 to 5 of 5");

		Pagination.changePagination(itemsPerPage = "4 items");

		Pagination.viewResults(results = "Showing 1 to 4 of 5");

		AssertElementPresent(
			index = "4",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		AssertElementNotPresent(
			index = "5",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		Click(locator1 = "Pagination#NEXT_LINK");

		Pagination.viewResults(results = "Showing 5 to 5 of 5");

		AssertElementPresent(
			index = "1",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		AssertElementNotPresent(
			index = "2",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		Click(locator1 = "Pagination#PREVIOUS_LINK");

		Pagination.viewResults(results = "Showing 1 to 4 of 5");

		AssertElementPresent(
			index = "4",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		AssertElementNotPresent(
			index = "5",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		Click(
			key_pageNumber = "2",
			locator1 = "Pagination#ANY_PAGE");

		Pagination.viewResults(results = "Showing 5 to 5 of 5");

		AssertElementPresent(
			index = "1",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		AssertElementNotPresent(
			index = "2",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		Click(
			key_pageNumber = "1",
			locator1 = "Pagination#ANY_PAGE");

		Pagination.viewResults(results = "Showing 1 to 4 of 5");

		AssertElementPresent(
			index = "4",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		AssertElementNotPresent(
			index = "5",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		Pagination.changePagination(itemsPerPage = "8 items");

		Pagination.viewResults(results = "Showing 1 to 5 of 5");

		AssertElementPresent(
			index = "5",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");
	}

	test PaginateBlueprintsPreview {
		for (var count : list "1,2,3,4,5,6,7,8,9,10,11") {
			JSONWebcontent.addWebContent(
				content = "WC Content ${count}",
				groupName = "Guest",
				title = "WC Title ${count}");
		}

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.searchBlueprintsPreview(searchTerm = "WC");

		Pagination.viewResults(results = "Showing 1 to 10 of 11 entries.");

		AssertElementPresent(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SPECIFIC_RANKING",
			resultRanking = "10");

		AssertElementNotPresent(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SPECIFIC_RANKING",
			resultRanking = "11");

		Click(locator1 = "Pagination#NEXT_LINK");

		Pagination.viewResults(results = "Showing 11 to 11 of 11 entries.");

		AssertElementPresent(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SPECIFIC_RANKING",
			resultRanking = "1");

		AssertElementNotPresent(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SPECIFIC_RANKING",
			resultRanking = "2");

		Click(locator1 = "Pagination#PREVIOUS_LINK");

		Pagination.viewResults(results = "Showing 1 to 10 of 11 entries.");

		AssertElementPresent(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SPECIFIC_RANKING",
			resultRanking = "10");

		AssertElementNotPresent(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SPECIFIC_RANKING",
			resultRanking = "11");

		Pagination.changePagination(itemsPerPage = "20");

		Pagination.viewResults(results = "Showing 1 to 11 of 11 entries.");

		AssertElementPresent(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SPECIFIC_RANKING",
			resultRanking = "11");
	}

	test PaginateElementsAdmin {
		Blueprints.openBlueprintsAdmin();

		Navigator.gotoNavItem(navItem = "Elements");

		var paginationResults = selenium.getText("Pagination#RESULTS");

		echo("${paginationResults}");

		var totalElements = StringUtil.extractLast("${paginationResults}", " ");

		Pagination.changePagination(itemsPerPage = "4 items");

		Pagination.viewResults(results = "Showing 1 to 4 of ${totalElements}");

		AssertElementPresent(
			index = "4",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		AssertElementNotPresent(
			index = "5",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		Click(locator1 = "Pagination#NEXT_LINK");

		Pagination.viewResults(results = "Showing 5 to 8 of ${totalElements}");

		AssertElementPresent(
			index = "4",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		AssertElementNotPresent(
			index = "5",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		Click(locator1 = "Pagination#PREVIOUS_LINK");

		Pagination.viewResults(results = "Showing 1 to 4 of ${totalElements}");

		AssertElementPresent(
			index = "4",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		AssertElementNotPresent(
			index = "5",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		Click(
			key_pageNumber = "3",
			locator1 = "Pagination#ANY_PAGE");

		Pagination.viewResults(results = "Showing 9 to 12 of ${totalElements}");

		AssertElementPresent(
			index = "4",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		AssertElementNotPresent(
			index = "5",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		Click(
			key_pageNumber = "1",
			locator1 = "Pagination#ANY_PAGE");

		Pagination.viewResults(results = "Showing 1 to 4 of ${totalElements}");

		AssertElementPresent(
			index = "4",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		AssertElementNotPresent(
			index = "5",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");

		Pagination.changePagination(itemsPerPage = "60 items");

		Pagination.viewResults(results = "Showing 1 to ${totalElements} of ${totalElements}");

		AssertElementPresent(
			index = "${totalElements}",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_NTH_ENTRY");
	}

	test RemoveElementAddedToQueryBuilder {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost All Keywords Match");

		PortletEntry.save();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		Blueprints.selectAddedElementMenuItem(
			element = "Boost All Keywords Match",
			menuItem = "Remove");

		PortletEntry.save();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		AssertElementNotPresent(
			element = "Boost All Keywords Match",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT");
	}

	@description = "This is a use case for LPS-143567."
	test SaveAndEditCustomJSONElement {
		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "apple apple apple");

		var webContentserviceContext = '''{"assetTagNames": ["apple"]}''';

		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			serviceContext = "${webContentserviceContext}",
			title = "gala");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Custom JSON Element");

		var customJson = '''
{
	"elementDefinition": {
		"configuration": {
			"queryConfiguration": {
				"queryEntries": [
					{
						"clauses": [
							{
								"context": "query",
								"occur": "should",
								"query": {
									"term": {
										"assetTagNames.raw": {
											"value": "${keywords}",
											"boost": "2000"
										}
									}
								}
							}
						]
					}
				]
			}
		}
	},
	"title_i18n": {
		"en_US": "Boost Tags Match Custom JSON"
	}
}
		''';

		Type.typeCodeMirrorEditorNoError(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "${customJson}");

		PortletEntry.save();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		AssertElementPresent(
			element = "Boost Tags Match Custom JSON",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT");

		Blueprints.searchBlueprintsPreview(searchTerm = "apple");

		AssertTextEquals.assertPartialText(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SPECIFIC_RANKING",
			resultRanking = "1",
			value1 = "gala");

		var customJsonEdited = '''
{
	"title_i18n": {
		"en_US": "Custom JSON Element Edited"
	}
}
		''';

		Type.typeCodeMirrorEditorNoError(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "${customJsonEdited}");

		PortletEntry.save();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		AssertElementPresent(
			element = "Custom JSON Element Edited",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT");
	}

	test SearchBlueprintsAdminTable {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(
			description = "Test Description",
			title = "Blueprint One");

		PortletEntry.save();

		Blueprints.createBlueprint(title = "Blueprint Two");

		PortletEntry.save();

		Search.searchCP(searchTerm = "Two");

		Blueprints.viewEntryTitle(title = "Blueprint Two");

		Blueprints.viewNoEntry(title = "Blueprint One");

		Search.searchCP(searchTerm = "Description");

		Blueprints.viewEntryTitle(title = "Blueprint One");

		Blueprints.viewNoEntry(title = "Blueprint Two");
	}

	test SearchElementsAdminTable {
		Blueprints.openBlueprintsAdmin();

		Navigator.gotoNavItem(navItem = "Elements");

		Click(locator1 = "Button#PLUS");

		PortletEntry.inputTitle(title = "Element One");

		PortletEntry.inputDescription(description = "apple");

		Button.click(button = "Create");

		PortletEntry.save();

		Blueprints.createElement(title = "Element Two");

		Search.searchCP(searchTerm = "Two");

		Blueprints.viewEntryTitle(title = "Element Two");

		Blueprints.viewNoEntry(title = "Element One");

		Search.searchCP(searchTerm = "apple");

		Blueprints.viewEntryTitle(title = "Element One");

		Blueprints.viewNoEntry(title = "Element Two");
	}

	test SearchViaBlueprintsPreview {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.searchBlueprintsPreview(searchTerm = "test");

		AssertElementPresent(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_TITLE",
			resultTitle = "Test");
	}

	test SearchViaBlueprintsPreviewWithAttributes {
		JSONCategory.addVocabulary(
			groupName = "Guest",
			title = "Test Vocabulary");

		var categoryId = JSONCategory.addCategory(
			groupName = "Guest",
			title = "Test Category",
			vocabularyName = "Test Vocabulary");

		var webContentserviceContext = '''{"assetCategoryIds": ["${categoryId}"]}''';

		JSONWebcontent.addWebContent(
			content = "apple",
			groupName = "Guest",
			serviceContext = "${webContentserviceContext}",
			title = "gala");

		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "apple apple apple");

		JSONSegmentsentry.addSegment(
			fieldName = "First Name",
			groupName = "Guest",
			operator = "equals",
			segmentName = "Test Segment",
			text = "test");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost Contents in a Category for a User Segment");

		Type(
			elementName = "Boost Contents in a Category for a User Segment",
			fieldLabel = "Asset Category ID",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_INPUT_FIELD",
			value1 = "${categoryId}");

		var segmentId = JSONSegmentsentry.getSegmentId(segmentName = "Test Segment");

		Type(
			elementName = "Boost Contents in a Category for a User Segment",
			fieldLabel = "User Segment IDs",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_INPUT_FIELD",
			value1 = "${segmentId}");

		Type(
			elementName = "Boost Contents in a Category for a User Segment",
			fieldLabel = "Boost",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_INPUT_FIELD",
			value1 = "2000");

		var groupId = JSONGroupAPI._getGroupIdByName(
			groupName = "Guest",
			site = "true");

		Blueprints.searchBlueprintsPreview(
			attributesKey = "search.experiences.scope.group.id",
			attributesValue = "${groupId}",
			searchTerm = "apple");

		AssertTextEquals.assertPartialText(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SPECIFIC_RANKING",
			resultRanking = "1",
			value1 = "gala");
	}

	test SearchViaBlueprintsPreviewWithNoResults {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.searchBlueprintsPreview(searchTerm = "empty");

		AssertElementPresent(locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_EMPTY");
	}

	test SearchWithCopiedBlueprint {
		JSONBlog.addEntry(
			entryContent = "",
			entryTitle = "apple apple apple");

		JSONWebcontent.addWebContent(
			content = "apple",
			groupName = "Guest",
			title = "WC Title");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost Asset Type");

		Blueprints.configureElementDropdown(
			dropdownName = "Asset Type",
			option = "Web Content Article");

		Type(
			elementName = "Boost Asset Type",
			fieldLabel = "Boost",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_INPUT_FIELD",
			value1 = "1000");

		PortletEntry.save();

		Blueprints.gotoEntryMenuItem(
			menuItem = "Copy",
			title = "Test Blueprint");

		Blueprints.gotoBlueprint(title = "Copy of Test Blueprint");

		Blueprints.searchBlueprintsPreview(searchTerm = "apple");

		AssertTextEquals.assertPartialText(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SPECIFIC_RANKING",
			resultRanking = "1",
			value1 = "WC Title");

		AssertTextEquals.assertPartialText(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SPECIFIC_RANKING",
			resultRanking = "2",
			value1 = "apple apple apple");
	}

	test SearchWithCopiedDefaultElement {
		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "fruit");

		JSONWebcontent.addWebContent(
			content = "fruit",
			groupName = "Guest",
			title = "apple");

		Blueprints.openBlueprintsAdmin();

		Navigator.gotoNavItem(navItem = "Elements");

		Search.searchCP(searchTerm = "Text Match Over Multiple Fields");

		Blueprints.gotoEntryMenuItem(
			menuItem = "Copy",
			title = "Text Match Over Multiple Fields");

		Blueprints.gotoElement(element = "Copy of Text Match Over Multiple Fields");

		AssertTextEquals.assertPartialText(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "localized_title");

		AssertElementNotPresent(locator1 = "Blueprints#ELEMENTS_EDIT_PAGE_READ_ONLY_INDICATOR");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Copy of Text Match Over Multiple Fields");

		Click(
			field = "localized_title",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_FIELD_MAPPING_DELETE_BUTTON");

		Blueprints.searchBlueprintsPreview(searchTerm = "fruit");

		AssertElementPresent(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_TITLE",
			resultTitle = "apple");

		AssertElementNotPresent(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_TITLE",
			resultTitle = "fruit");
	}

	test SearchWithSelectedAssetType {
		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "red apple");

		JSONBlog.addEntry(
			entryContent = "",
			entryTitle = "green apple");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Navigator.gotoNavNested(navNested = "Query Settings");

		Check.checkNotVisible(
			locator1 = "Radio#ANY",
			radioLabel = "Selected Types");

		Button.click(button = "Select Asset Types");

		Check.checkNotVisible(
			assetType = "Web Content Article",
			locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_CHECKBOX");

		Button.clickDone();

		PortletEntry.save();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		Navigator.gotoNavNested(navNested = "Query Settings");

		AssertElementPresent(
			assetType = "Web Content Article",
			locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_SELECTED");

		Blueprints.searchBlueprintsPreview(searchTerm = "apple");

		AssertElementPresent(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_TITLE",
			resultTitle = "red apple");

		AssertElementNotPresent(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_TITLE",
			resultTitle = "green apple");
	}

	@description = "This is a use case for LPS-145977."
	test SearchWithUsersLanguageOption {
		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "Liferay Test");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Text Match Over Multiple Fields");

		Blueprints.searchBlueprintsPreview(searchTerm = "Liferay");

		AssertElementPresent(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_TITLE",
			resultTitle = "Liferay");
	}

	test SortBlueprintsAdminTable {
		Blueprints.openBlueprintsAdmin();

		for (var count : list "1,2,3") {
			Blueprints.createBlueprint(title = "Test Blueprint ${count}");

			PortletEntry.save();
		}

		Blueprints.viewEntriesSpecificOrder(entryList = "Test Blueprint 3,Test Blueprint 2,Test Blueprint 1");

		Button.click(button = "Title");

		Blueprints.viewEntriesSpecificOrder(entryList = "Test Blueprint 1,Test Blueprint 2,Test Blueprint 3");

		Button.click(button = "Title");

		Blueprints.viewEntriesSpecificOrder(entryList = "Test Blueprint 3,Test Blueprint 2,Test Blueprint 1");

		Button.click(button = "Created");

		Blueprints.viewEntriesSpecificOrder(entryList = "Test Blueprint 1,Test Blueprint 2,Test Blueprint 3");

		Button.click(button = "Created");

		Blueprints.viewEntriesSpecificOrder(entryList = "Test Blueprint 3,Test Blueprint 2,Test Blueprint 1");

		Blueprints.gotoBlueprint(title = "Test Blueprint 2");

		Blueprints.addElement(element = "Boost All Keywords Match");

		PortletEntry.save();

		Blueprints.viewEntriesSpecificOrder(entryList = "Test Blueprint 2,Test Blueprint 3,Test Blueprint 1");

		Button.click(button = "Modified");

		Blueprints.viewEntriesSpecificOrder(entryList = "Test Blueprint 1,Test Blueprint 3,Test Blueprint 2");

		Button.click(button = "Modified");

		Blueprints.viewEntriesSpecificOrder(entryList = "Test Blueprint 2,Test Blueprint 3,Test Blueprint 1");
	}

	test SortElementsAdminTable {
		Blueprints.openBlueprintsAdmin();

		for (var count : list "1,2,3") {
			Blueprints.createElement(title = "Test Element ${count}");
		}

		Blueprints.viewEntriesSpecificOrder(entryList = "Test Element 3,Test Element 2,Test Element 1");

		Search.searchCP(searchTerm = "Test Element");

		Button.click(button = "Title");

		Blueprints.viewEntriesSpecificOrder(entryList = "Test Element 1,Test Element 2,Test Element 3");

		Button.click(button = "Title");

		Blueprints.viewEntriesSpecificOrder(entryList = "Test Element 3,Test Element 2,Test Element 1");

		Button.click(button = "Created");

		Blueprints.viewEntriesSpecificOrder(entryList = "Test Element 1,Test Element 2,Test Element 3");

		Button.click(button = "Created");

		Blueprints.viewEntriesSpecificOrder(entryList = "Test Element 3,Test Element 2,Test Element 1");

		Blueprints.gotoElement(element = "Test Element 2");

		var elementSourceJson = '''
{
	"elementDefinition": {
		"configuration": {},
		"uiConfiguration": {}
	},
	"title_i18n": {
		"en_US": "Test Element 2"
	}
}
		''';

		Type.typeCodeMirrorEditorNoError(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "${elementSourceJson}");

		PortletEntry.save();

		Blueprints.viewEntriesSpecificOrder(entryList = "Test Element 2,Test Element 3,Test Element 1");

		Search.searchCP(searchTerm = "Test Element");

		Button.click(button = "Modified");

		Blueprints.viewEntriesSpecificOrder(entryList = "Test Element 1,Test Element 3,Test Element 2");

		Button.click(button = "Modified");

		Blueprints.viewEntriesSpecificOrder(entryList = "Test Element 2,Test Element 3,Test Element 1");
	}

	test ViewBlueprintEditTitle {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		AssertTextEquals(
			locator1 = "Blueprints#BLUEPRINTS_EDIT_PAGE_HEADER_TITLE",
			value1 = "Test Blueprint");
	}

	test ViewBlueprintsAdminBulkDeletion {
		Blueprints.openBlueprintsAdmin();

		for (var count : list "1,2,3,4") {
			Blueprints.createBlueprint(title = "Test Blueprint ${count}");

			PortletEntry.save();
		}

		Check.checkNotVisible(
			entryTitle = "Test Blueprint 1",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CHECKBOX");

		Button.clickTrash();

		Blueprints.viewNoEntry(title = "Test Blueprint 1");

		Check.checkNotVisible(
			entryTitle = "Test Blueprint 2",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CHECKBOX");

		AssertChecked.assertCheckedNotVisible(locator1 = "Checkbox#FDS_SELECT_ALL");

		Click.clickAtNotVisible(locator1 = "Checkbox#FDS_SELECT_ALL");

		for (var count : list "2,3,4") {
			AssertChecked.assertCheckedNotVisible(
				entryTitle = "Test Blueprint ${count}",
				locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CHECKBOX");
		}

		Uncheck.uncheckNotVisible(locator1 = "Checkbox#FDS_SELECT_ALL");

		for (var count : list "2,3,4") {
			AssertNotChecked.assertNotCheckedNotVisible(
				entryTitle = "Test Blueprint ${count}",
				locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CHECKBOX");
		}

		Search.searchCP(searchTerm = "2");

		Click.clickAtNotVisible(locator1 = "Checkbox#FDS_SELECT_ALL");

		Button.clickTrash();

		Blueprints.viewNoEntry(title = "Test Blueprint 2");

		Blueprints.viewEntryTitle(title = "Test Blueprint 3");

		Blueprints.viewEntryTitle(title = "Test Blueprint 4");

		Check.checkNotVisible(
			entryTitle = "Test Blueprint 3",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CHECKBOX");

		Click(
			key_text = "Select All",
			locator1 = "Link#ANY");

		AssertChecked.assertCheckedNotVisible(
			entryTitle = "Test Blueprint 3",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CHECKBOX");

		AssertChecked.assertCheckedNotVisible(
			entryTitle = "Test Blueprint 4",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CHECKBOX");

		Button.clickTrash();

		Blueprints.viewNoEntry(title = "Test Blueprint 3");

		Blueprints.viewNoEntry(title = "Test Blueprint 4");
	}

	test ViewBlueprintsAdminTableValues {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(
			description = "Test Description",
			title = "Test Blueprint");

		PortletEntry.save();

		AssertTextEquals(
			cellPosition = "2",
			entryTitle = "Test Blueprint",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CELL",
			value1 = "Test Blueprint");

		AssertTextEquals(
			cellPosition = "3",
			entryTitle = "Test Blueprint",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CELL",
			value1 = "Test Description");

		var blueprintId = Blueprints.getBlueprintID(title = "Test Blueprint");

		AssertTextEquals(
			cellPosition = "4",
			entryTitle = "Test Blueprint",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CELL",
			value1 = "${blueprintId}");

		AssertTextEquals(
			cellPosition = "5",
			entryTitle = "Test Blueprint",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CELL",
			value1 = "Test Test");

		var currentDate = DateUtil.getFormattedCurrentDate("MMM d, yyyy");

		AssertTextEquals.assertPartialText(
			cellPosition = "6",
			entryTitle = "Test Blueprint",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CELL",
			value1 = "${currentDate}");

		AssertTextEquals.assertPartialText(
			cellPosition = "7",
			entryTitle = "Test Blueprint",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CELL",
			value1 = "${currentDate}");
	}

	test ViewBlueprintsConfigurationValidation {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Navigator.gotoNavTab(navTab = "Configuration");

		Type.typeCodeMirrorEditorNoError(
			configurationField = "Aggregation Configuration",
			locator1 = "Blueprints#BLUEPRINTS_CONFIGURATION_EDITOR",
			value1 = "invalid");

		Type.typeCodeMirrorEditorNoError(
			configurationField = "Highlight Configuration",
			locator1 = "Blueprints#BLUEPRINTS_CONFIGURATION_EDITOR",
			value1 = "invalid");

		Type.typeCodeMirrorEditorNoError(
			configurationField = "Sort Configuration",
			locator1 = "Blueprints#BLUEPRINTS_CONFIGURATION_EDITOR",
			value1 = "invalid");

		Type.typeCodeMirrorEditorNoError(
			configurationField = "Parameter Configuration",
			locator1 = "Blueprints#BLUEPRINTS_CONFIGURATION_EDITOR",
			value1 = "invalid");

		Type.typeCodeMirrorEditorNoError(
			configurationField = "Advanced Configuration",
			locator1 = "Blueprints#BLUEPRINTS_CONFIGURATION_EDITOR",
			value1 = "invalid");

		Button.clickSave();

		Alert.viewErrorMessage(errorMessage = "Unable to save due to invalid or missing configuration values.");

		AssertElementPresent(
			configurationField = "Aggregation Configuration",
			locator1 = "Blueprints#BLUEPRINTS_CONFIGURATION_INVALID_JSON_ERROR");

		AssertElementPresent(
			configurationField = "Highlight Configuration",
			locator1 = "Blueprints#BLUEPRINTS_CONFIGURATION_INVALID_JSON_ERROR");

		AssertElementPresent(
			configurationField = "Sort Configuration",
			locator1 = "Blueprints#BLUEPRINTS_CONFIGURATION_INVALID_JSON_ERROR");

		AssertElementPresent(
			configurationField = "Parameter Configuration",
			locator1 = "Blueprints#BLUEPRINTS_CONFIGURATION_INVALID_JSON_ERROR");

		AssertElementPresent(
			configurationField = "Advanced Configuration",
			locator1 = "Blueprints#BLUEPRINTS_CONFIGURATION_INVALID_JSON_ERROR");

		ClickNoError(
			key_text = "Cancel",
			locator1 = "Link#ANY");

		Confirm();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		Navigator.gotoNavTab(navTab = "Configuration");

		AssertTextNotPresent(value1 = "invalid");
	}

	test ViewBlueprintsPreviewLocalizedResults {
		property app.server.types = "tomcat";

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		JSONWebcontent.addBasicWebContentLocalized(
			contentMap = "pt_BR:contente",
			groupName = "Guest",
			titleMap = "en_US:Title,pt_BR:Título");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Language Selector Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "Language Selector Page",
			widgetName = "Language Selector");

		Navigator.openSitePage(
			pageName = "Language Selector Page",
			siteName = "Guest");

		LanguagePortlet.selectLanguagePG(
			locale = "pt_BR",
			textIcon = "português-Brasil");

		Blueprints.openBlueprintsAdmin();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		Click(locator1 = "Blueprints#BLUEPRINTS_PREVIEW_BUTTON_PORTUGUESE");

		Type(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_BAR_PORTUGUESE",
			value1 = "content");

		KeyPress(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_BAR_PORTUGUESE",
			value1 = "\RETURN");

		AssertElementPresent(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_TITLE",
			resultTitle = "Título");
	}

	test ViewBlueprintsPreviewValidationForInvalidJSONProperty {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Custom JSON Element");

		var customJson = '''{"elementDefinitionnnnnnn": {}}''';

		Type.typeCodeMirrorEditorNoError(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "${customJson}");

		Blueprints.searchBlueprintsPreview(searchTerm = "test");

		Alert.viewErrorMessage(errorMessage = "The property &quot;elementDefinitionnnnnnn&quot; is not defined in SXPElement.");

		AssertElementNotPresent(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_TITLE",
			resultTitle = "");
	}

	test ViewClauseContributorsFilterAndSort {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Navigator.gotoNavNested(navNested = "Query Settings");

		Check.checkNotVisible(
			locator1 = "Radio#ANY",
			radioLabel = "Customize");

		Button.click(button = "Customize Contributors");

		Uncheck.uncheckToggleSwitch(
			contributorClass = "AssetCategoryKeywordQueryContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ON_OFF_TOGGLE");

		Uncheck.uncheckToggleSwitch(
			contributorClass = "AccountEntryModelPreFilterContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ON_OFF_TOGGLE");

		Uncheck.uncheckToggleSwitch(
			contributorClass = "AssetEntryModelPreFilterContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ON_OFF_TOGGLE");

		Click(locator1 = "Dropdown#FILTER_AND_ORDER");

		MenuItem.click(menuItem = "Inactive");

		AssertElementPresent(
			contributorClass = "AssetCategoryKeywordQueryContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ITEM");

		AssertElementPresent(
			contributorClass = "AccountEntryModelPreFilterContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ITEM");

		AssertElementPresent(
			contributorClass = "AssetEntryModelPreFilterContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ITEM");

		AssertElementNotPresent(locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_TOGGLE_ENABLED");

		Button.click(button = "Clear");

		AssertElementPresent(locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_TOGGLE_ENABLED");

		AssertElementPresent(locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_TOGGLE_DISABLED");

		Click(locator1 = "Dropdown#FILTER_AND_ORDER");

		MenuItem.click(menuItem = "Active");

		AssertElementPresent(locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_TOGGLE_ENABLED");

		AssertElementNotPresent(locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_TOGGLE_DISABLED");

		Click(locator1 = "Dropdown#FILTER_AND_ORDER");

		Click(
			key_menuItem = "KeywordQueryContributor",
			locator1 = "MenuItem#DROPDOWN_MENU_ITEM");

		AssertElementPresent(
			contributorClass = "KeywordQueryContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ITEM");

		AssertElementNotPresent(
			contributorClass = "ModelPreFilterContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ITEM");

		AssertElementNotPresent(
			contributorClass = "QueryPreFilterContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ITEM");

		Click(locator1 = "Dropdown#FILTER_AND_ORDER");

		Click(
			key_menuItem = "ModelPrefilterContributor",
			locator1 = "MenuItem#DROPDOWN_MENU_ITEM");

		AssertElementPresent(
			contributorClass = "ModelPreFilterContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ITEM");

		AssertElementNotPresent(
			contributorClass = "KeywordQueryContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ITEM");

		AssertElementNotPresent(
			contributorClass = "QueryPreFilterContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ITEM");

		Click(locator1 = "Dropdown#FILTER_AND_ORDER");

		Click(
			key_menuItem = "QueryPrefilterContributor",
			locator1 = "MenuItem#DROPDOWN_MENU_ITEM");

		AssertElementPresent(
			contributorClass = "QueryPreFilterContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ITEM");

		AssertElementNotPresent(
			contributorClass = "KeywordQueryContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ITEM");

		AssertElementNotPresent(
			contributorClass = "ModelPreFilterContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ITEM");

		Click(
			filter = "QueryPrefilterContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_CLEAR_FILTER_BUTTON");

		AssertElementPresent(
			contributorClass = "KeywordQueryContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ITEM");

		AssertElementPresent(
			contributorClass = "ModelPreFilterContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ITEM");

		AssertElementPresent(
			contributorClass = "QueryPreFilterContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ITEM");

		Click(locator1 = "Dropdown#FILTER_AND_ORDER");

		MenuItem.click(menuItem = "Inactive");

		Click(locator1 = "Dropdown#FILTER_AND_ORDER");

		Click(
			key_menuItem = "KeywordQueryContributor",
			locator1 = "MenuItem#DROPDOWN_MENU_ITEM");

		AssertElementPresent(
			contributorClass = "AssetCategoryKeywordQueryContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ITEM");

		AssertElementNotPresent(
			contributorClass = "AccountEntryModelPreFilterContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ITEM");

		AssertElementNotPresent(
			contributorClass = "AssetEntryModelPreFilterContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ITEM");

		Button.click(button = "Clear");

		AssertTextEquals.assertPartialText(
			index = "1",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_NTH_ITEM",
			value1 = "Account Entry Keyword Query Contributor");

		Click.clickNoMouseOver(locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_SORT_BUTTON");

		AssertTextEquals.assertPartialText(
			index = "1",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_NTH_ITEM",
			value1 = "User Keyword Query Contributor");
	}

	test ViewClauseContributorsUI {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Navigator.gotoNavNested(navNested = "Query Settings");

		AssertElementNotPresent(
			key_text = "Customize Contributors",
			locator1 = "Button#ANY");

		Check.checkNotVisible(
			locator1 = "Radio#ANY",
			radioLabel = "Customize");

		Button.click(button = "Customize Contributors");

		AssertElementPresent(locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_OPEN_SIDEBAR");

		AssertElementNotPresent(locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_TOGGLE_DISABLED");

		ManagementBar.clickSelectAllCheckbox();

		Button.click(button = "Turn Off");

		AssertElementNotPresent(locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_TOGGLE_ENABLED");

		PortletEntry.save();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		Navigator.gotoNavNested(navNested = "Query Settings");

		Button.click(button = "Customize Contributors");

		AssertElementNotPresent(locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_TOGGLE_ENABLED");

		ManagementBar.clickSelectAllCheckbox();

		Button.click(button = "Turn On");

		PortletEntry.save();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		Navigator.gotoNavNested(navNested = "Query Settings");

		Check.checkNotVisible(
			locator1 = "Radio#ANY",
			radioLabel = "Customize");

		Button.click(button = "Customize Contributors");

		AssertElementNotPresent(locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_TOGGLE_DISABLED");

		Uncheck.uncheckToggleSwitch(
			contributorClass = "AccountEntryKeywordQueryContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ON_OFF_TOGGLE");

		PortletEntry.save();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		Navigator.gotoNavNested(navNested = "Query Settings");

		Button.click(button = "Customize Contributors");

		AssertNotChecked.assertNotCheckedNotVisible(
			contributorClass = "AccountEntryKeywordQueryContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ON_OFF_TOGGLE");

		Type(
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_SEARCH_BAR",
			value1 = "AssetCategoryKeywordQueryContributor");

		KeyPress(
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_SEARCH_BAR",
			value1 = "\RETURN");

		AssertElementPresent(
			contributorClass = "AssetCategoryKeywordQueryContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ITEM");

		AssertElementNotPresent(
			index = "2",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_NTH_ITEM");
	}

	test ViewCollapsibleAddedElements {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost Proximity");

		Click(
			ariaLabel = "Collapse",
			locator1 = "Button#ANY_WITH_ARIA_LABEL");

		AssertElementNotPresent(
			elementName = "Boost Proximity",
			fieldName = "Field",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_FIELD_LABEL");

		Click(
			ariaLabel = "Expand",
			locator1 = "Button#ANY_WITH_ARIA_LABEL");

		AssertElementPresent(
			elementName = "Boost Proximity",
			fieldName = "Field",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_FIELD_LABEL");

		Blueprints.addElement(element = "Boost Asset Type");

		Blueprints.addElement(element = "Boost Freshness");

		Click(
			key_text = "Collapse All",
			locator1 = "Button#ANY");

		AssertElementNotPresent(
			elementName = "",
			fieldName = "Boost",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_FIELD_LABEL");

		AssertElementNotPresent(
			ariaLabel = "Collapse",
			locator1 = "Button#ANY_WITH_ARIA_LABEL");

		Click(
			key_text = "Expand All",
			locator1 = "Button#ANY");

		AssertElementPresent(
			elementName = "",
			fieldName = "Boost",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_FIELD_LABEL");

		AssertElementNotPresent(
			ariaLabel = "Expand",
			locator1 = "Button#ANY_WITH_ARIA_LABEL");
	}

	test ViewCopiedBlueprintContent {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost Tags Match");

		Navigator.gotoNavNested(navNested = "Query Settings");

		Check.checkNotVisible(
			locator1 = "Radio#ANY",
			radioLabel = "Selected Types");

		Button.click(button = "Select Asset Types");

		Check.checkNotVisible(
			assetType = "Document",
			locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_CHECKBOX");

		Button.clickDone();

		Uncheck.uncheckToggleSwitch(locator1 = "Blueprints#BLUEPRINTS_SEARCH_FRAMEWORK_INDEXER_CLAUSES_ON_OFF_TOGGLE");

		Check.checkNotVisible(
			locator1 = "Radio#ANY",
			radioLabel = "Customize");

		Button.click(button = "Customize Contributors");

		Uncheck.uncheckToggleSwitch(
			contributorClass = "AccountGroupKeywordQueryContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ON_OFF_TOGGLE");

		Navigator.gotoNavTab(navTab = "Configuration");

		var aggregationConfigurationJson = '''{"aggs":{}}''';

		Type.typeCodeMirrorEditorNoError(
			configurationField = "Aggregation Configuration",
			locator1 = "Blueprints#BLUEPRINTS_CONFIGURATION_EDITOR",
			value1 = "${aggregationConfigurationJson}");

		PortletEntry.save();

		Blueprints.gotoEntryMenuItem(
			menuItem = "Copy",
			title = "Test Blueprint");

		Blueprints.gotoBlueprint(title = "Copy of Test Blueprint");

		AssertElementPresent(
			element = "Boost Tags Match",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT");

		Navigator.gotoNavNested(navNested = "Query Settings");

		AssertElementPresent(
			assetType = "Document",
			locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_SELECTED");

		AssertNotChecked.assertNotCheckedNotVisible(locator1 = "Blueprints#BLUEPRINTS_SEARCH_FRAMEWORK_INDEXER_CLAUSES_ON_OFF_TOGGLE");

		Button.click(button = "Customize Contributors");

		AssertNotChecked.assertNotCheckedNotVisible(
			contributorClass = "AccountGroupKeywordQueryContributor",
			locator1 = "Blueprints#BLUEPRINTS_CLAUSE_CONTRIBUTOR_ON_OFF_TOGGLE");

		Navigator.gotoNavTab(navTab = "Configuration");

		AssertTextPresent(value1 = "aggs");
	}

	test ViewCustomElementLocalizedPredefinedVariables {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createElement(title = "Test Element");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Language Selector Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "Language Selector Page",
			widgetName = "Language Selector");

		Navigator.openSitePage(
			pageName = "Language Selector Page",
			siteName = "Guest");

		LanguagePortlet.selectLanguagePG(
			locale = "pt_BR",
			textIcon = "português-Brasil");

		Blueprints.openBlueprintsAdmin();

		Navigator.gotoNavItem(navItem = "Elementos");

		Blueprints.gotoEntry(title = "Test Element");

		Click(
			item = "context",
			locator1 = "Blueprints#ELEMENTS_EDIT_PAGE_PREDEFINED_VARIABLES_SIDEBAR_ITEM");

		AssertElementPresent(
			item = "Id da Empresa",
			locator1 = "Blueprints#ELEMENTS_EDIT_PAGE_PREDEFINED_VARIABLES_SIDEBAR_ITEM");
	}

	test ViewCustomElementPredefinedVariablesUI {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createElement(title = "Test Element");

		Blueprints.gotoElement(element = "Test Element");

		AssertVisible(locator1 = "Blueprints#ELEMENTS_EDIT_PAGE_PREDEFINED_VARIABLES_SIDEBAR");

		Click.clickNoMouseOver(locator1 = "Blueprints#ELEMENTS_EDIT_PAGE_PREDEFINED_VARIABLES_SHOW_HIDE_BUTTON");

		AssertNotVisible(locator1 = "Blueprints#ELEMENTS_EDIT_PAGE_PREDEFINED_VARIABLES_SIDEBAR");

		Click.clickNoMouseOver(locator1 = "Blueprints#ELEMENTS_EDIT_PAGE_PREDEFINED_VARIABLES_SHOW_HIDE_BUTTON");

		AssertVisible(locator1 = "Blueprints#ELEMENTS_EDIT_PAGE_PREDEFINED_VARIABLES_SIDEBAR");

		Click(
			item = "context",
			locator1 = "Blueprints#ELEMENTS_EDIT_PAGE_PREDEFINED_VARIABLES_SIDEBAR_ITEM");

		AssertVisible(
			item = "Company ID",
			locator1 = "Blueprints#ELEMENTS_EDIT_PAGE_PREDEFINED_VARIABLES_SIDEBAR_ITEM");

		Click(
			item = "time",
			locator1 = "Blueprints#ELEMENTS_EDIT_PAGE_PREDEFINED_VARIABLES_SIDEBAR_ITEM");

		AssertVisible(
			item = "Current Date",
			locator1 = "Blueprints#ELEMENTS_EDIT_PAGE_PREDEFINED_VARIABLES_SIDEBAR_ITEM");

		Click(
			item = "user",
			locator1 = "Blueprints#ELEMENTS_EDIT_PAGE_PREDEFINED_VARIABLES_SIDEBAR_ITEM");

		AssertVisible(
			item = "First Name",
			locator1 = "Blueprints#ELEMENTS_EDIT_PAGE_PREDEFINED_VARIABLES_SIDEBAR_ITEM");

		Search.searchCP(searchTerm = "company");

		AssertVisible(
			item = "Company ID",
			locator1 = "Blueprints#ELEMENTS_EDIT_PAGE_PREDEFINED_VARIABLES_SIDEBAR_ITEM");

		Click(
			item = "Company ID",
			locator1 = "Blueprints#ELEMENTS_EDIT_PAGE_PREDEFINED_VARIABLES_SIDEBAR_ITEM");

		AssertTextEquals.assertPartialText(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "context.company_id");
	}

	test ViewCustomElementsJSONValidation {
		Blueprints.openBlueprintsAdmin();

		Navigator.gotoNavItem(navItem = "Elements");

		Click(locator1 = "Button#PLUS");

		PortletEntry.inputTitle(title = "Test Element");

		Button.click(button = "Create");

		var elementSourceJson = '''
{
	"elementDefinition": {
		"configuration": {}}
	}
}
		''';

		Type.typeCodeMirrorEditorNoError(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "${elementSourceJson}");

		Button.clickSave();

		Alert.viewErrorMessage(errorMessage = "Element Source (JSON) is invalid.");

		var elementSourceJson = '''
{
	"elementDefinition": {
		"configuration": {}
	}
}
		''';

		Type.typeCodeMirrorEditorNoError(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "${elementSourceJson}");

		Button.clickSave();

		Alert.viewErrorMessage(errorMessage = "The title cannot be blank.");

		var elementSourceJson = '''
{
	"elementDefinition": {
		"configuration": {},
		"uiConfiguration": {}
	}
}
		''';

		Type.typeCodeMirrorEditorNoError(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "${elementSourceJson}");

		Button.clickSave();

		Alert.viewErrorMessage(errorMessage = "The title cannot be blank.");

		var elementSourceJson = '''
{
	"elementDefinition": {
		"configuration": {
			"queryConfiguration": {
				"queryEntries": [
					{
						"clauses": [
							{
								"query": {
									"term": {
										"fields": "${configuration.apple}"
									}
								}
							}
						]
					}
				]
			}
		},
		"uiConfiguration": {}
	},
	"title_i18n": {
		"en_US": "Test Element"
	}
}
		''';

		Type.typeCodeMirrorEditorNoError(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "${elementSourceJson}");

		Button.clickSave();

		Alert.viewErrorMessage(errorMessage = "The following configuration key is missing: apple.");

		var elementSourceJson = '''
{
	"elementDefinition": {
		"configuration": {
			"queryConfiguration": {
				"queryEntries": [
					{
						"clauses": [
							{
								"query": {
									"term": {
										"fields": "${configuration.apple}"
									}
								}
							}
						]
					}
				]
			}
		},
		"uiConfiguration": {
			"fieldSets": [
				{
					"fields": [
						{
							"name": "apple"
						}
					]
				}
			]
		}
	},
	"title_i18n": {
		"en_US": "Test Element"
	}
}
		''';

		Type.typeCodeMirrorEditorNoError(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "${elementSourceJson}");

		Button.clickSave();

		AssertElementNotPresent(locator1 = "Message#ERROR");

		Blueprints.gotoElement(element = "Test Element");

		AssertTextPresent(value1 = "apple");
	}

	test ViewDefaultElement {
		Blueprints.openBlueprintsAdmin();

		Navigator.gotoNavItem(navItem = "Elements");

		Search.searchCP(searchTerm = "Boost All Keywords Match");

		Blueprints.openEntryMenu(title = "Boost All Keywords Match");

		AssertElementPresent(
			key_menuItem = "Export",
			locator1 = "MenuItem#ANY_MENU_ITEM");

		AssertElementNotPresent(
			key_menuItem = "Delete",
			locator1 = "MenuItem#ANY_MENU_ITEM");

		Blueprints.gotoEntryMenuItem(
			menuItem = "View",
			title = "Boost All Keywords Match");

		AssertElementPresent(locator1 = "Blueprints#ELEMENTS_EDIT_PAGE_READ_ONLY_INDICATOR");

		AssertElementNotPresent(
			key_text = "Save",
			locator1 = "Button#ANY");

		AssertElementNotPresent(
			key_text = "Cancel",
			locator1 = "Button#ANY");

		Click(
			key_text = "Close",
			locator1 = "Link#ANY");

		AssertTextEquals(
			locator1 = "ControlMenu#HEADING",
			value1 = "Blueprints");
	}

	test ViewElementJSONViaBlueprintsQueryBuilder {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost Asset Type");

		Blueprints.selectAddedElementMenuItem(
			element = "Boost Asset Type",
			menuItem = "View Element JSON");

		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "Element JSON");

		AssertVisible(
			key_jsonText = "clauses",
			locator1 = "Blueprints#BLUEPRINTS_EDIT_PAGE_VIEW_ELEMENT_JSON_TEXT");
	}

	test ViewElementsAdminBulkDeletion {
		Blueprints.openBlueprintsAdmin();

		for (var count : list "1,2,3,4") {
			Blueprints.createElement(title = "Test Element ${count}");
		}

		Check.checkNotVisible(
			entryTitle = "Test Element 1",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CHECKBOX");

		Button.clickTrash();

		Blueprints.viewNoEntry(title = "Test Element 1");

		Check.checkNotVisible(
			entryTitle = "Test Element 2",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CHECKBOX");

		AssertChecked.assertCheckedNotVisible(locator1 = "Checkbox#FDS_SELECT_ALL");

		Click.clickAtNotVisible(locator1 = "Checkbox#FDS_SELECT_ALL");

		for (var count : list "2,3,4") {
			AssertChecked.assertCheckedNotVisible(
				entryTitle = "Test Element ${count}",
				locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CHECKBOX");
		}

		Uncheck.uncheckNotVisible(locator1 = "Checkbox#FDS_SELECT_ALL");

		for (var count : list "2,3,4") {
			AssertNotChecked.assertNotCheckedNotVisible(
				entryTitle = "Test Element ${count}",
				locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CHECKBOX");
		}

		Search.searchCP(searchTerm = "2");

		Click.clickAtNotVisible(locator1 = "Checkbox#FDS_SELECT_ALL");

		Button.clickTrash();

		Blueprints.viewNoEntry(title = "Test Element 2");

		Blueprints.viewEntryTitle(title = "Test Element 3");

		Blueprints.viewEntryTitle(title = "Test Element 4");

		Check.checkNotVisible(
			entryTitle = "Test Element 3",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CHECKBOX");

		Click(
			key_text = "Select All",
			locator1 = "Link#ANY");

		AssertChecked.assertCheckedNotVisible(
			entryTitle = "Test Element 3",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CHECKBOX");

		AssertChecked.assertCheckedNotVisible(
			entryTitle = "Test Element 4",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CHECKBOX");

		Button.clickTrash();

		Alert.viewErrorMessage(errorMessage = "System read only elements cannot be deleted.");

		Blueprints.viewNoEntry(title = "Test Element 3");

		Blueprints.viewNoEntry(title = "Test Element 4");
	}

	test ViewElementsAdminPreview {
		Blueprints.openBlueprintsAdmin();

		Blueprints.gotoElement(
			element = "Boost All Keywords Match",
			searchForElement = "true");

		Click(locator1 = "Button#PREVIEW");

		AssertTextEquals.assertPartialText(
			locator1 = "Modal#BODY",
			value1 = "Boost All Keywords Match");
	}

	test ViewElementsAdminTableValues {
		Blueprints.openBlueprintsAdmin();

		Navigator.gotoNavItem(navItem = "Elements");

		Click(locator1 = "Button#PLUS");

		PortletEntry.inputTitle(title = "Test Element");

		PortletEntry.inputDescription(description = "Test Element Description");

		Button.click(button = "Create");

		PortletEntry.save();

		AssertTextEquals(
			cellPosition = "2",
			entryTitle = "Test Element",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CELL",
			value1 = "Test Element");

		AssertTextEquals(
			cellPosition = "3",
			entryTitle = "Test Element",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CELL",
			value1 = "Test Element Description");

		var elementId = Blueprints.getElementID(title = "Test Element");

		AssertTextEquals(
			cellPosition = "4",
			entryTitle = "Test Element",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CELL",
			value1 = "${elementId}");

		AssertTextEquals(
			cellPosition = "5",
			entryTitle = "Test Element",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CELL",
			value1 = "Test Test");

		var currentDate = DateUtil.getFormattedCurrentDate("MMM d, yyyy");

		AssertTextEquals.assertPartialText(
			cellPosition = "6",
			entryTitle = "Test Element",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CELL",
			value1 = "${currentDate}");

		AssertTextEquals.assertPartialText(
			cellPosition = "7",
			entryTitle = "Test Element",
			locator1 = "Blueprints#BLUEPRINTS_ADMIN_ENTRY_CELL",
			value1 = "${currentDate}");
	}

	test ViewExpandedAndCollapsedBlueprintsPreviewResult {
		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "apple");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.searchBlueprintsPreview(searchTerm = "apple");

		Click(locator1 = "Blueprints#BLUEPRINTS_PREVIEW_EXPAND_RESULT_BUTTON");

		AssertTextEquals.assertPartialText(
			fieldName = "ddmStructureKey",
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_RESULT_FIELD_VALUE",
			value1 = "BASIC-WEB-CONTENT");

		Click(locator1 = "Blueprints#BLUEPRINTS_PREVIEW_COLLAPSE_RESULT_BUTTON");

		AssertTextEquals.assertPartialText(
			fieldName = "entryClassName",
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_RESULT_FIELD_VALUE",
			value1 = "com.liferay.journal.model.JournalArticle");
	}

	@description = "This is a use case for LPS-147066."
	test ViewLinksToLiferayDocumentation {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Click(
			linkContext = "element-sidebar",
			linkText = "Learn more",
			locator1 = "Blueprints#DOC_LINK_GENERIC");

		SelectWindow(locator1 = "Search Blueprints Elements Reference — Liferay Learn");

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		Close.closeAndSelectWindow(locator1 = "Edit Blueprint - ${siteName}");

		Navigator.gotoNavNested(navNested = "Query Settings");

		Check.checkNotVisible(
			locator1 = "Radio#ANY",
			radioLabel = "Customize");

		Button.click(button = "Customize Contributors");

		Click(
			linkContext = "clause-contributors-sidebar",
			linkText = "Learn more",
			locator1 = "Blueprints#DOC_LINK_GENERIC");

		SelectWindow(locator1 = "Creating and Managing Search Blueprints — Liferay Learn");

		Close.closeAndSelectWindow(locator1 = "Edit Blueprint - ${siteName}");

		ClickNoError(
			key_text = "Cancel",
			locator1 = "Link#ANY");

		Blueprints.gotoElement(element = "Text Match Over Multiple Fields");

		Click(locator1 = "Blueprints#INFO_BUTTON");

		Click(
			linkContext = "info-sidebar",
			linkText = "Learn more",
			locator1 = "Blueprints#DOC_LINK_GENERIC");

		SelectWindow(locator1 = "Search Blueprints Elements Reference — Liferay Learn");

		Close.closeAndSelectWindow(locator1 = "View Element - ${siteName}");

		Search.openSearchPage();

		SearchPortlets.addWidgets(searchPortletList = "Blueprints Options");

		Portlet.gotoPortletOptions(
			portletName = "Blueprints Options",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		Click(
			linkContext = "portlet-configuration",
			linkText = "Learn how",
			locator1 = "Blueprints#DOC_LINK_GENERIC");

		SelectWindow(locator1 = "Using a Search Blueprint on a Search Page — Liferay Learn");
	}

	test ViewQueryBuilderFieldValidation {
		Blueprints.openBlueprintsAdmin();

		var elementSourceJson = '''
{
	"elementDefinition": {
		"configuration": {},
		"uiConfiguration": {
			"fieldSets": [
				{
					"fields": [
						{
							"defaultValue": [
								{
									"field": "localized_title",
									"locale": "hu_HU"
								}
							],
							"label": "Fields",
							"name": "fields",
							"type": "fieldMappingList"
						},
						{
							"defaultValue": 1,
							"label": "Boost",
							"name": "boost",
							"type": "number"
						}
					]
				}
			]
		}
	},
	"title_i18n": {
		"en_US": "Test Element"
	}
}
		''';

		Blueprints.createElement(
			elementSourceJson = "${elementSourceJson}",
			title = "Test Element");

		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Test Element");

		Click(
			field = "localized_title",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_FIELD_MAPPING_DELETE_BUTTON");

		Button.clickSave();

		Alert.viewRequiredField();

		Alert.viewErrorMessage(errorMessage = "Unable to save due to invalid or missing configuration values.");

		Click(locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_FIELD_MAPPING_ADD_BUTTON");

		Type(
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_FIELD_MAPPING_FIELD",
			value1 = "title");

		KeyPress(
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_FIELD_MAPPING_FIELD",
			value1 = "\ESCAPE");

		Type(
			elementName = "Test Element",
			fieldLabel = "Boost",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_INPUT_FIELD",
			value1 = "");

		Alert.viewRequiredField();

		Type(
			elementName = "Test Element",
			fieldLabel = "Boost",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_INPUT_FIELD",
			value1 = "1");

		AssertElementNotPresent(locator1 = "TextInput#REQUIRED_ALERT");

		PortletEntry.save();

		AssertElementNotPresent(locator1 = "TextInput#REQUIRED_ALERT");

		Blueprints.gotoElement(element = "Test Element");

		var elementSourceJson = '''
{
	"elementDefinition": {
		"configuration": {},
		"uiConfiguration": {
			"fieldSets": [
				{
					"fields": [
						{
							"defaultValue": [
								{
									"field": "localized_title",
									"locale": "hu_HU"
								}
							],
							"label": "Fields",
							"name": "fields",
							"type": "fieldMappingList",
							"typeOptions": {
								"required": false
							}
						},
						{
							"defaultValue": 1,
							"label": "Boost",
							"name": "boost",
							"type": "number",
							"typeOptions": {
								"required": false
							}
						}
					]
				}
			]
		}
	},
	"title_i18n": {
		"en_US": "Test Element"
	}
}
		''';

		Type.typeCodeMirrorEditorNoError(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "${elementSourceJson}");

		PortletEntry.save();

		Blueprints.openBlueprintsAdmin();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Test Element");

		AssertTextEquals.assertPartialText(
			elementName = "Test Element",
			fieldName = "Fields",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_FIELD_LABEL",
			value1 = "Optional");

		AssertTextEquals.assertPartialText(
			elementName = "Test Element",
			fieldName = "Boost",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_FIELD_LABEL",
			value1 = "Optional");

		Type(
			elementName = "Test Element",
			fieldLabel = "Boost",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_INPUT_FIELD",
			value1 = "");

		Click(
			field = "localized_title",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT_FIELD_MAPPING_DELETE_BUTTON");

		AssertElementNotPresent(locator1 = "TextInput#REQUIRED_ALERT");

		PortletEntry.save();

		AssertElementNotPresent(locator1 = "TextInput#REQUIRED_ALERT");

		AssertElementNotPresent(locator1 = "Message#ERROR_1");
	}

	test ViewRawResponseViaBlueprintsPreview {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.searchBlueprintsPreview(searchTerm = "test");

		Click(
			key_text = "View Raw Response",
			locator1 = "Button#ANY");

		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "Raw Response");

		AssertVisible(
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_RAW_RESPONSE_JSON",
			responseString = "hits");
	}

	test ViewSearchResultsScoreViaBlueprintsPreview {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.searchBlueprintsPreview(searchTerm = "test");

		Click(
			assetTitle = "Test",
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SCORE");

		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "Score Explanation");

		AssertVisible(
			key_searchExplanation = "PerFieldSimilarity",
			locator1 = "Blueprints#BLUEPRINTS_PREVIEW_SEARCH_RESULT_SCORE_EXPLANATION");
	}

	test ViewSelectedAssetTypesUI {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Navigator.gotoNavNested(navNested = "Query Settings");

		Check.checkNotVisible(
			locator1 = "Radio#ANY",
			radioLabel = "Selected Types");

		Button.click(button = "Select Asset Types");

		Check.checkNotVisible(locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_SELECT_ALL_CHECKBOX");

		AssertChecked.assertCheckedNotVisible(locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_SELECT_ALL_CHECKBOX");

		AssertElementNotPresent(locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_SELECT_REMAINING");

		AssertChecked.assertCheckedNotVisible(
			assetType = "Blogs Entry",
			locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_CHECKBOX");

		AssertElementNotPresent(locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_CHECKBOX_UNCHECKED");

		Uncheck.uncheckNotVisible(locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_SELECT_ALL_CHECKBOX");

		AssertNotChecked.assertNotCheckedNotVisible(locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_SELECT_ALL_CHECKBOX");

		AssertElementNotPresent(locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_CHECKBOX_CHECKED");

		Check.checkNotVisible(
			assetType = "Web Content Article",
			locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_CHECKBOX");

		Click(locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_SELECT_REMAINING");

		AssertElementNotPresent(locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_CHECKBOX_UNCHECKED");

		Button.clickDone();

		AssertElementPresent(
			assetType = "Web Content Article",
			locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_SELECTED");

		Click(
			assetType = "Wiki Page",
			locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_REMOVE_SELECTED");

		AssertElementNotPresent(
			assetType = "Wiki Page",
			locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_SELECTED");

		PortletEntry.save();

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		Navigator.gotoNavNested(navNested = "Query Settings");

		AssertElementPresent(
			assetType = "Web Content Article",
			locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_SELECTED");

		AssertElementNotPresent(
			assetType = "Wiki Page",
			locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_SELECTED");

		Button.click(button = "Select Asset Types");

		AssertChecked.assertCheckedNotVisible(locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_SELECT_ALL_CHECKBOX");

		AssertChecked.assertCheckedNotVisible(
			assetType = "Web Content Article",
			locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_CHECKBOX");

		AssertNotChecked.assertNotCheckedNotVisible(
			assetType = "Wiki Page",
			locator1 = "Blueprints#BLUEPRINTS_SEARCHABLE_ASSET_TYPE_CHECKBOX");
	}

	test ViewUnsavedChangesAlertForBlueprints {
		Blueprints.openBlueprintsAdmin();

		Blueprints.createBlueprint(title = "Test Blueprint");

		Blueprints.addElement(element = "Boost Tags Match");

		ClickNoError(
			key_text = "Cancel",
			locator1 = "Link#ANY");

		Confirm.dismissAlert();

		AssertElementPresent(
			element = "Boost Tags Match",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT");

		ClickNoError(
			key_text = "Cancel",
			locator1 = "Link#ANY");

		AssertConfirm(value1 = "You have unsaved changes. Do you want to proceed without saving?");

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		AssertElementPresent(locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENTS_EMPTY");

		Blueprints.addElement(element = "Boost Tags Match");

		ApplicationsMenuHelper.openApplicationsMenu();

		ClickNoError(
			key_category = "Search Experiences",
			key_portlet = "Blueprints",
			locator1 = "ApplicationsMenu#PORTLET");

		Confirm.dismissAlert();

		AssertElementPresent(
			element = "Boost Tags Match",
			locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENT");

		ClickNoError(
			key_category = "Search Experiences",
			key_portlet = "Blueprints",
			locator1 = "ApplicationsMenu#PORTLET");

		AssertConfirm(value1 = "You have unsaved changes. Do you want to proceed without saving?");

		Blueprints.gotoBlueprint(title = "Test Blueprint");

		AssertElementPresent(locator1 = "Blueprints#BLUEPRINTS_ADDED_ELEMENTS_EMPTY");
	}

	test ViewUnsavedChangesAlertForElements {
		Blueprints.openBlueprintsAdmin();

		Navigator.gotoNavItem(navItem = "Elements");

		Click(locator1 = "Button#PLUS");

		PortletEntry.inputTitle(title = "Test Element");

		Button.click(button = "Create");

		var elementSourceJson = '''
{
	"elementDefinition": {
		"configuration": {},
		"uiConfiguration": {}
	},
	"title_i18n": {
		"en_US": "Unsaved Element"
	}
}
		''';

		Type.typeCodeMirrorEditorNoError(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "${elementSourceJson}");

		ClickNoError(
			key_text = "Cancel",
			locator1 = "Link#ANY");

		Confirm.dismissAlert();

		AssertTextEquals.assertPartialText(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "Unsaved Element");

		ClickNoError(
			key_text = "Cancel",
			locator1 = "Link#ANY");

		AssertConfirm(value1 = "You have unsaved changes. Do you want to proceed without saving?");

		Blueprints.gotoElement(element = "Test Element");

		AssertTextNotEquals.assertNotPartialText(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "Unsaved Element");

		Type.typeCodeMirrorEditorNoError(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "${elementSourceJson}");

		ApplicationsMenuHelper.openApplicationsMenu();

		ClickNoError(
			key_category = "Search Experiences",
			key_portlet = "Blueprints",
			locator1 = "ApplicationsMenu#PORTLET");

		Confirm.dismissAlert();

		AssertTextEquals.assertPartialText(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "Unsaved Element");

		ApplicationsMenuHelper.openApplicationsMenu();

		ClickNoError(
			key_category = "Search Experiences",
			key_portlet = "Blueprints",
			locator1 = "ApplicationsMenu#PORTLET");

		AssertConfirm(value1 = "You have unsaved changes. Do you want to proceed without saving?");

		Blueprints.gotoElement(element = "Test Element");

		AssertTextNotEquals.assertNotPartialText(
			locator1 = "Blueprints#CODE_MIRROR_EDITOR",
			value1 = "Unsaved Element");
	}

}