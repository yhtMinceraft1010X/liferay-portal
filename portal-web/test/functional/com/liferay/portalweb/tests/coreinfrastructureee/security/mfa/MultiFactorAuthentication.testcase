@component-name = "portal-security"
definition {

	property custom.properties = "mail.send.blacklist=noreply@liferay.com,noreply@domain.invalid,test@domain.invalid";
	property dummy.socket.proxy.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property test.smtp.server.enabled = "true";
	property testray.main.component.name = "Multi Factor Authentication";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginUI();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONUser.tearDownNonAdminUsers();
		}
	}

	@description = "This is a use case for LPS-118204. Verify the messages and labels on the End User's MFA configuration pages more obvious and consistent."
	@priority = "4"
	test AssertDescriptionsOnTOTPConfigurationPage {
		property osgi.module.configuration.file.names = "com.liferay.multi.factor.authentication.email.otp.configuration.MFAEmailOTPConfiguration.config";
		property osgi.module.configurations = "emailFromAddress=&quot;test@liferay.com&quot;${line.separator}emailFromName=&quot;Joe\ Bloggs&quot;";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#AssertDescriptionsOnTOTPConfigurationPage";

		task ("Enable OTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings();

			MultiFactorAuthentication.configureOTP(enableOtp = "true");
		}

		task ("Enable TOTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(portlet = "Time-Based OTP");

			MultiFactorAuthentication.configureTOTP(enableTotp = "true");
		}

		task ("Get TOTP") {
			Navigator.openURL();

			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			Navigator.gotoNavUnderline(navUnderline = "Multi-Factor Authentication");

			MultiFactorAuthentication.getTOTP();
		}

		task ("Assert warning message in TOTP description") {
			MultiFactorAuthentication.viewWarningMessage();

			AssertTextEquals(
				locator1 = "MultiFactorAuthentication#TOTP_REMOVE_DESCRIPTION",
				value1 = "You can only have one time-based one-time password configured for your account. Remove your existing time-based one-time password to generate a new time-based one-time password.");
		}

		task ("Sign out and Login") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Check User TOTP UI") {
			MultiFactorAuthentication.checkTOTPUI();
		}
	}

	@description = "This is a use case for LPS-102467 and LPS-110444. Configure e-mail template for Email One Time Password verification step."
	@priority = "5"
	test AssertEditedEmailTemplate {
		property database.types = "hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#AssertEditedEmailTemplate";

		var portalURL = PropsUtil.get("portal.url");

		task ("Enable OTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings();

			MultiFactorAuthentication.configureOTP(enableOtp = "true");
		}

		task ("Configure email OTP") {
			MultiFactorAuthentication.configureOTPEmailSender(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");

			MultiFactorAuthentication.viewOTPEmailSenderCP(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");

			MultiFactorAuthentication.viewOTPSentElements(elementList = "emailOTPSentSubject,emailOTPSentBody");

			MultiFactorAuthentication.emailOTPConfiguration(
				emailOtpSentBody = "One-Time Password for test is:[$ONE_TIME_PASSWORD$]",
				emailOtpSentSubject = "[$PORTAL_URL$]: Your One-Time Password for test");
		}

		task ("Sign out") {
			SignOut.signOut();
		}

		task ("Login and send OTP email") {
			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");

			MultiFactorAuthentication.sendOTPEmailPG();
		}

		task ("View OTP mail") {
			MockMock.viewMailForOTP(
				asset = "${portalURL}: Your One-Time Password for test",
				content = "One-Time Password for test is:",
				sender = "Joe Bloggs <test@liferay.com>",
				subject = "${portalURL}: Your One-Time Password for test");
		}
	}

	@description = "This is a use case for LPS-101717. Assert portal will not show any other MFA after IP Address Configuration is Enabled and assert portal will goes in other MFA verifier if IP verifier is failed."
	@priority = "5"
	test AssertLoginGoesInOtherMFAVerifierWhenIPVerifierFailed {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#AssertLoginGoesInOtherMFAVerifierWhenIPVerifierFailed";

		task ("Add CP able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Login at able.com") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(baseURL = "http://www.able.com:8080");

			MultiFactorAuthentication.configureOTP(enableOtp = "true");
		}

		task ("Assert IP address and TOTP configurations are present for virtual instance scope") {
			MultiFactorAuthentication.viewConfigurationPresent(
				configurationNameList = "IP Address Configuration,Time-Based One-Time Password Configuration",
				configurationScope = "Virtual Instance Scope");
		}

		task ("Enable IP address") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(
				baseURL = "http://www.able.com:8080",
				portlet = "IP Address");

			MultiFactorAuthentication.configureIPAddress(enableIp = "true");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(
				baseURL = "http://www.able.com:8080",
				portlet = "Time-Based OTP");

			MultiFactorAuthentication.configureTOTP(enableTotp = "true");
		}

		task ("Sign out and Login at able.com") {
			UserBar.signOut();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Configure IP address allowed 192.168.132.153/255.0.0.0") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(
				baseURL = "http://www.able.com:8080",
				portlet = "IP Address");

			MultiFactorAuthentication.configureIPAddress(
				allowedIp = "192.168.132.153/255.0.0.0",
				enableIp = "true");
		}

		task ("Sign out and Login at able.com") {
			UserBar.signOut();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080/",
				userEmailAddress = "test@www.able.com");
		}

		task ("Send OTP email and assert information correctness for test test") {
			MultiFactorAuthentication.viewOTPSendEmailButtonPresent();

			MultiFactorAuthentication.sendOTPEmailPG();

			MultiFactorAuthentication.verifyOTP(
				portalURL = "http://www.able.com:8080",
				recipient = "test test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userPassword = "test");
		}
	}

	@description = "LPS-86515 TC-3: As an Instance Administrator, I want to set where I want to have the configured TOTP verifier in the order of the configured verifiers."
	@priority = "5"
	test AssertMFACheckersWithHigherOrderShownFirst {
		property test.name.skip.portal.instance = "MultiFactorAuthentication#AssertMFACheckersWithHigherOrderShownFirst";

		task ("Add CP able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Login at able.com and enable OTP") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			MultiFactorAuthentication.openToConfigInInstanceSettings(baseURL = "http://www.able.com:8080");

			MultiFactorAuthentication.configureOTP(enableOtp = "true");
		}

		task ("Set MFA checker order to 100") {
			MultiFactorAuthentication.setServiceRankingValue(orderValue = "100");
		}

		task ("Go to able.com and enable OTP In time-base OTP password configuration") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(
				baseURL = "http://www.able.com:8080",
				portlet = "Time-Based OTP");

			MultiFactorAuthentication.configureTOTP(enableTotp = "true");
		}

		task ("Set MFA checker order to 10") {
			MultiFactorAuthentication.setServiceRankingValue(orderValue = "10");
		}

		task ("Go to able.com and get Time-base OTP") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			Navigator.gotoNavUnderline(navUnderline = "Multi-Factor Authentication");

			MultiFactorAuthentication.getTOTP();
		}

		task ("Sign out and sign in at able.com and assert Time-base OTP field is not available") {
			SignOut.signOutOfSpecificURL(url = "http://www.able.com:8080");

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080/",
				userEmailAddress = "test@www.able.com");

			MultiFactorAuthentication.viewEmailOTPVerifyField();

			MultiFactorAuthentication.viewNoTOTPField();
		}
	}

	@description = "LPS-92659 TC-3: Assert after user reached the number of allowed failed attempts will be blocked."
	@priority = "5"
	test AssertUserIsBlockedAfterReachAllowedFailedAttempts {
		property database.types = "hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property osgi.module.configuration.file.names = "com.liferay.multi.factor.authentication.email.otp.configuration.MFAEmailOTPConfiguration.config";
		property osgi.module.configurations = "emailFromAddress=&quot;test@liferay.com&quot;${line.separator}emailFromName=&quot;Joe\ Bloggs&quot;";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#AssertUserIsBlockedAfterReachAllowedFailedAttempts";

		var portalURL = PropsUtil.get("portal.url");

		task ("Enable OTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings();

			MultiFactorAuthentication.configureOTP(enableOtp = "true");
		}

		task ("Configure OTP failed attempts allowed and retry time out") {
			MultiFactorAuthentication.emailOTPConfiguration(
				failedAttemptsAllowed = "1",
				retryTimeout = "10");
		}

		task ("Sign out and Login") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Send OTP email") {
			MultiFactorAuthentication.sendOTPEmailPG();
		}

		task ("Enter wrong password to reached the maximum allowed failed attempt") {
			MultiFactorAuthentication.verifyOTP(validOtp = "false");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_2",
				value1 = "You have reached the maximum allowed failed attempts. Please retry again in 10 seconds.");
		}

		task ("Assert user cannot login portal before retry time out") {
			AssertElementPresent(locator1 = "MultiFactorAuthentication#EMAIL_OTP_VERIFY_SUBMIT_EMAIL_BUTTON_DISABLED");
		}
	}

	@description = "This is a use case for LPS-112805. Instance admin is capable to configure and turn off Basic Authentication for a virtual instance."
	@priority = "5"
	test CanDisableBasicAuthenticationOnInstanceLevel {
		property custom.properties = "access.control.sanitize.security.exception=false${line.separator}json.service.serialize.throwable=true";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#CanDisableBasicAuthenticationOnInstanceLevel";

		task ("Add CP able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Login at able.com and enable OTP") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			MultiFactorAuthentication.openToConfigInInstanceSettings(baseURL = "http://www.able.com:8080");

			MultiFactorAuthentication.configureOTP(enableOtp = "true");
		}

		task ("Disable Auto Login Basic Authentication Header") {
			APIAuthentication.openToConfigInInstanceSettings(
				baseURL = "http://www.able.com:8080",
				portlet = "Auto Login");

			FormFields.disableCheckbox(fieldName = "enabled");

			PortletEntry.save();
		}

		task ("Disable Basic Authentication Protocol Support") {
			APIAuthentication.openToConfigInInstanceSettings(
				baseURL = "http://www.able.com:8080",
				portlet = "Protocol Support");

			FormFields.disableCheckbox(fieldName = "enabled");

			PortletEntry.save();
		}

		task ("Check if Instance admin is able to disable Basic Authentication") {
			MultiFactorAuthentication.canAdminDisableBasicAuthentication();
		}
	}

	@description = "LPS-102468 TC-4: Instance admin can enable and disable MFA for instance."
	@priority = "5"
	test CanDisableOTPForInstanceOnSystemLevel {
		property test.name.skip.portal.instance = "MultiFactorAuthentication#CanDisableOTPForInstanceOnSystemLevel";

		task ("Assert MFA is not disabled on system level") {
			MultiFactorAuthentication.configureMFAOnSystemLevel(disabledMfa = "false");
		}

		task ("Add CP able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Login at able.com") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Configure OTP Email sender") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(baseURL = "http://www.able.com:8080");

			MultiFactorAuthentication.configureOTPEmailSender(
				emailAddress = "test@www.able.com",
				emailSenderName = "Joe Bloggs");

			MultiFactorAuthentication.viewOTPEmailSenderCP(
				emailAddress = "test@www.able.com",
				emailSenderName = "Joe Bloggs");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(baseURL = "http://www.able.com:8080");

			MultiFactorAuthentication.configureOTP(enableOtp = "true");
		}

		task ("Sign out of able.com") {
			SignOut.signOutOfSpecificURL(url = "http://www.able.com:8080");
		}

		task ("Login at able.com and send OTP email") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080/",
				userEmailAddress = "test@www.able.com");

			MultiFactorAuthentication.sendOTPEmailPG();
		}

		task ("Login with test test") {
			MultiFactorAuthentication.verifyOTP(
				portalURL = "http://www.able.com:8080",
				recipient = "test test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userPassword = "test");
		}

		task ("Sign out of able.com") {
			SignOut.signOutOfSpecificURL(url = "http://www.able.com:8080");
		}

		task ("Open URL and disable MFA") {
			Navigator.openURL();

			MultiFactorAuthentication.configureMFAOnSystemLevel(disabledMfa = "true");
		}

		task ("Logout and login with test@www.able.com at able.com") {
			User.logoutPG();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}
	}

	@description = "This is a use case for LPS-115566. Able to remove TOTP verification and generate new TOTP verification on instance."
	@priority = "5"
	test CanRemoveTOTPVerificationOnInstanceLevel {
		property test.name.skip.portal.instance = "MultiFactorAuthentication#CanRemoveTOTPVerificationOnInstanceLevel";

		task ("Add CP able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Login at able.com") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Configure OTP email sender") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(baseURL = "http://www.able.com:8080");

			MultiFactorAuthentication.configureOTPEmailSender(
				emailAddress = "test@www.able.com",
				emailSenderName = "Joe Bloggs");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(baseURL = "http://www.able.com:8080");

			MultiFactorAuthentication.configureOTP(enableOtp = "true");
		}

		task ("Enable TOTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(
				baseURL = "http://www.able.com:8080",
				portlet = "Time-Based OTP");

			MultiFactorAuthentication.configureTOTP(enableTotp = "true");
		}

		task ("Go to able.com and get TOTP") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			Navigator.gotoNavUnderline(navUnderline = "Multi-Factor Authentication");

			MultiFactorAuthentication.getTOTP();
		}

		task ("Remove TOTP and assert field is present") {
			AssertClick(
				key_text = "Remove Configured Time-Based One-Time Password",
				locator1 = "Button#ANY",
				value1 = "Remove Configured Time-Based One-Time Password");

			MultiFactorAuthentication.viewTOTPFieldPresentOnMFA();
		}
	}

	@description = "This is a use case for LPS-101720. Instance admin can enable and disable MFA for instance."
	@priority = "5"
	test EnableOTPForInstanceAsInstanceAdminUser {
		property database.types = "hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#EnableOTPForInstanceAsInstanceAdminUser";

		task ("Assert MFA is not disabled on system level") {
			MultiFactorAuthentication.configureMFAOnSystemLevel(disabledMfa = "false");
		}

		task ("Add CP able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Login into able.com") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Enable OTP email sender") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(baseURL = "http://www.able.com:8080");

			MultiFactorAuthentication.configureOTPEmailSender(
				emailAddress = "test@www.able.com",
				emailSenderName = "Joe Bloggs");

			MultiFactorAuthentication.viewOTPEmailSenderCP(
				emailAddress = "test@www.able.com",
				emailSenderName = "Joe Bloggs");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(baseURL = "http://www.able.com:8080");

			MultiFactorAuthentication.configureOTP(enableOtp = "true");
		}

		task ("Sign out of able.com") {
			SignOut.signOutOfSpecificURL(url = "http://www.able.com:8080");
		}

		task ("Login into able.com and send OTP email") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080/",
				userEmailAddress = "test@www.able.com");

			MultiFactorAuthentication.sendOTPEmailPG();
		}

		task ("Check OTP information") {
			MultiFactorAuthentication.verifyOTP(
				portalURL = "http://www.able.com:8080",
				recipient = "test test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userPassword = "test");
		}

		task ("Disable OTP at able.com") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(baseURL = "http://www.able.com:8080");

			MultiFactorAuthentication.configureOTP(enableOtp = "false");
		}

		task ("Log out and login at able.com") {
			User.logoutPG(specificURL = "http://www.able.com:8080/");

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}
	}

	@description = "LPS-101746 TC-2: End User cannot configure anything on their side regarding IP based verifier."
	@priority = "5"
	test EndUserPermissionCheck {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property osgi.module.configuration.file.names = "com.liferay.multi.factor.authentication.email.otp.configuration.MFAEmailOTPConfiguration.config";
		property osgi.module.configurations = "emailFromAddress=&quot;test@liferay.com&quot;${line.separator}emailFromName=&quot;Joe\ Bloggs&quot;";

		var portalURL = PropsUtil.get("portal.url");

		task ("Add user with password") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings();

			MultiFactorAuthentication.configureOTP(enableOtp = "true");
		}

		task ("Enable IP Address 127.0.0.1/255.0.0.0") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(portlet = "IP Address");

			MultiFactorAuthentication.configureIPAddress(enableIp = "true");

			AssertTextEquals(
				locator1 = "MultiFactorAuthentication#IP_ADDRESS_CONFIGURATION_ALLOWED_IP_FIELD_1",
				value1 = "127.0.0.1/255.0.0.0");
		}

		task ("Logout and login as new user") {
			User.logoutPG();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assert user doesn't have permissions to configure Instance Settings") {
			Navigator.openSpecificURL(url = "${portalURL}/group/control_panel/manage?p_p_id=com_liferay_configuration_admin_web_portlet_InstanceSettingsPortlet");

			AssertTextEquals(
				locator1 = "Message#ERROR",
				value1 = "You do not have the roles required to access this portlet.");
		}
	}

	@description = "This is a use case for LPS-102469. Forget password won't bypass OTP authentication."
	@priority = "5"
	test LoginSuccessfulAfterResetPasswordAsEndUser {
		property osgi.module.configuration.file.names = "com.liferay.multi.factor.authentication.email.otp.configuration.MFAEmailOTPConfiguration.config";
		property osgi.module.configurations = "emailFromAddress=&quot;test@liferay.com&quot;${line.separator}emailFromName=&quot;Joe\ Bloggs&quot;";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#LoginSuccessfulAfterResetPasswordAsEndUser";

		var portalURL = PropsUtil.get("portal.url");

		task ("Add user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings();

			MultiFactorAuthentication.configureOTP(enableOtp = "true");
		}

		task ("Signout and send reset password link for new user") {
			SignOut.signOut();

			User.forgotPasswordSendResetLink(userEmailAddress = "userea@liferay.com");
		}

		task ("Reset password by link") {
			MockMock.openBodyLink(
				asset = "${portalURL}: Reset Your Password",
				content = "You can reset your password for ${portalURL}",
				subject = "${portalURL}: Reset Your Password");

			User.setPasswordByResetLink(
				newPassword1 = "test",
				newPassword2 = "test");
		}

		task ("Logout and login with new password") {
			User.logoutPG();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Send OTP email") {
			MultiFactorAuthentication.sendOTPEmailPG();

			MultiFactorAuthentication.verifyOTP(
				portalURL = "${portalURL}",
				recipient = "userfn userln",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");
		}
	}

	@description = "LPS-92659 TC-4: User can login successfully after retry timeout."
	@priority = "5"
	test LoginSuccessfulAfterRetryTimeout {
		property database.types = "hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property osgi.module.configuration.file.names = "com.liferay.multi.factor.authentication.email.otp.configuration.MFAEmailOTPConfiguration.config";
		property osgi.module.configurations = "emailFromAddress=&quot;test@liferay.com&quot;${line.separator}emailFromName=&quot;Joe\ Bloggs&quot;";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#LoginSuccessfulAfterRetryTimeout";

		var portalURL = PropsUtil.get("portal.url");

		task ("Enable OTP and set failed attempts maximum number and retry time out") {
			MultiFactorAuthentication.openToConfigInInstanceSettings();

			MultiFactorAuthentication.configureOTP(enableOtp = "true");

			MultiFactorAuthentication.emailOTPConfiguration(
				failedAttemptsAllowed = "1",
				retryTimeout = "5");
		}

		task ("Sign out and Login") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Send OTP email") {
			MultiFactorAuthentication.sendOTPEmailPG();
		}

		task ("Assert user cannot login portal before retry time out") {
			MultiFactorAuthentication.verifyOTP(validOtp = "false");

			AssertElementPresent(locator1 = "MultiFactorAuthentication#EMAIL_OTP_VERIFY_SUBMIT_EMAIL_BUTTON_DISABLED");
		}

		task ("Assert user can login portal after retry time out") {
			Pause(locator1 = "5000");

			MultiFactorAuthentication.verifyOTP(
				portalURL = "${portalURL}",
				recipient = "Test Test",
				userEmailAddress = "test@liferay.com",
				userPassword = "test");
		}
	}

	@description = "LPS-101746 TC-1: Able to configure the IP based verifier on instance level and see successful/unsuccessful login attempts."
	@priority = "5"
	test LoginWithIPBasedVerifierEnabled {
		property osgi.module.configuration.file.names = "com.liferay.multi.factor.authentication.email.otp.configuration.MFAEmailOTPConfiguration.config";
		property osgi.module.configurations = "emailFromAddress=&quot;test@liferay.com&quot;${line.separator}emailFromName=&quot;Joe\ Bloggs&quot;";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#LoginWithIPBasedVerifierEnabled";

		var portalURL = PropsUtil.get("portal.url");

		task ("Enable OTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings();

			MultiFactorAuthentication.configureOTP(enableOtp = "true");
		}

		task ("Enable IP address 127.0.0.1/255.0.0.0") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(portlet = "IP Address");

			MultiFactorAuthentication.configureIPAddress(enableIp = "true");

			AssertTextEquals(
				locator1 = "MultiFactorAuthentication#IP_ADDRESS_CONFIGURATION_ALLOWED_IP_FIELD_1",
				value1 = "127.0.0.1/255.0.0.0");
		}

		task ("Log Out and Login") {
			User.logoutPG();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Search for Test Test on MFA IP OTP verification success") {
			Audit.openAuditAdmin();

			Audit.searchViaKeywords(
				resourceName = "IPAddressHeadlessMFAChecker",
				searchTerm = "MFA_IP_OTP_VERIFICATION_SUCCESS",
				userName = "Test Test");
		}

		task ("Assert audit details") {
			Audit.viewAuditDetails(
				additionalInformation = "None",
				clientIp = "127.0.0.1",
				resourceAction = "MFA_IP_OTP_VERIFICATION_SUCCESS",
				resourceName = "IPAddressHeadlessMFAChecker",
				userName = "Test Test");
		}

		task ("Configure custom IP address allowed, to trigger MFA during login flow") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(portlet = "IP Address");

			MultiFactorAuthentication.configureIPAddress(
				allowedIp = "9.9.9.9",
				enableIp = "true");
		}

		task ("Sign out and Login") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Send OTP Email and check email for Test Test") {
			MultiFactorAuthentication.sendOTPEmailPG();

			MultiFactorAuthentication.verifyOTP(
				portalURL = "${portalURL}",
				recipient = "Test Test",
				userEmailAddress = "test@liferay.com",
				userPassword = "test");
		}

		task ("Search for Test Test on MFA IP OTP verification failure") {
			Audit.openAuditAdmin();

			Audit.searchViaKeywords(
				resourceName = "IPAddressHeadlessMFAChecker",
				searchTerm = "MFA_IP_OTP_VERIFICATION_FAILURE",
				userName = "Test Test");
		}

		task ("Assert audit details") {
			Audit.viewAuditDetails(
				additionalInformation = "IP is not allowed",
				clientIp = "127.0.0.1",
				resourceAction = "MFA_IP_OTP_VERIFICATION_FAILURE",
				resourceName = "IPAddressHeadlessMFAChecker",
				userName = "Test Test");
		}
	}

	@description = "This is a use case for LPS-101720. As an End User, OTP verification shows up in login process when OTP is enabled."
	@priority = "5"
	test LoginWithOTPEnabled {
		property app.server.types = "jboss,tcserver,tomcat,weblogic,websphere,wildfly";
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property database.types = "hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property environment.acceptance = "true";
		property osgi.module.configuration.file.names = "com.liferay.multi.factor.authentication.email.otp.configuration.MFAEmailOTPConfiguration.config";
		property osgi.module.configurations = "emailFromAddress=&quot;test@liferay.com&quot;${line.separator}emailFromName=&quot;Joe\ Bloggs&quot;";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#LoginWithOTPEnabled";

		var portalURL = PropsUtil.get("portal.url");

		task ("Add user and set password") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings();

			MultiFactorAuthentication.configureOTP(enableOtp = "true");
		}

		task ("Sign out and Login with new user") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Send OTP email and check information correctness for userfn userln") {
			MultiFactorAuthentication.sendOTPEmailPG();

			MultiFactorAuthentication.verifyOTP(
				portalURL = "${portalURL}",
				recipient = "userfn userln",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");
		}
	}

	@description = "This is a use case for LPS-98267 and LPS-101744. Login with TOTP enabled as end user."
	@priority = "5"
	test LoginWithTOTPEnabledAsEndUser {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#LoginWithTOTPEnabledAsEndUser";

		var portalURL = PropsUtil.get("portal.url");

		task ("Add user and set password") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings();

			MultiFactorAuthentication.configureOTP(enableOtp = "true");
		}

		task ("Enable TOTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(portlet = "Time-Based OTP");

			MultiFactorAuthentication.configureTOTP(enableTotp = "true");
		}

		task ("Sign out and Login with userea@liferay.com") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Send OTP email and check information correctness for userfn userln") {
			MultiFactorAuthentication.sendOTPEmailPG();

			MultiFactorAuthentication.verifyOTP(
				portalURL = "${portalURL}",
				recipient = "userfn userln",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");
		}

		task ("Get TOTP") {
			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			Navigator.gotoNavUnderline(navUnderline = "Multi-Factor Authentication");

			var secretKey = selenium.getAttribute("//input[contains(@id,'sharedSecret')]@value");

			echo("secretKey is: ${secretKey}");

			MultiFactorAuthentication.getTOTP();
		}

		task ("Sign out and Login") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Verify if TOTP key is unchanged") {
			MultiFactorAuthentication.viewTOTPField();

			MultiFactorAuthentication.getTOTP(secretKeyUnchanged = "${secretKey}");
		}

		task ("Remove TOTP") {
			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			Navigator.gotoNavUnderline(navUnderline = "Multi-Factor Authentication");

			AssertClick(
				key_text = "Remove Configured Time-Based One-Time Password",
				locator1 = "Button#ANY",
				value1 = "Remove Configured Time-Based One-Time Password");
		}

		task ("Assert TOTP field is present") {
			MultiFactorAuthentication.viewTOTPFieldPresentOnMFA();
		}

		task ("Sign out and Login as new user") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assert OTP send button is present and TOTP field is not present") {
			MultiFactorAuthentication.viewOTPSendEmailButtonPresent();

			MultiFactorAuthentication.viewNoTOTPField();
		}
	}

	@description = "This is a use case for LPS-115566. Assert remove current user's TOTP verification won't affect other End User."
	@priority = "4"
	test RemoveTOTPVerificationOfCurrentUserNotAffectOtherEndUser {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property osgi.module.configuration.file.names = "com.liferay.multi.factor.authentication.email.otp.configuration.MFAEmailOTPConfiguration.config";
		property osgi.module.configurations = "emailFromAddress=&quot;test@liferay.com&quot;${line.separator}emailFromName=&quot;Joe\ Bloggs&quot;";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#RemoveTOTPVerificationOfCurrentUserNotAffectOtherEndUser";

		var portalURL = PropsUtil.get("portal.url");

		task ("Add user and set password") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings();

			MultiFactorAuthentication.configureOTP(enableOtp = "true");
		}

		task ("Enable TOTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(portlet = "Time-Based OTP");

			MultiFactorAuthentication.configureTOTP(enableTotp = "true");
		}

		task ("Get TOTP") {
			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			Navigator.gotoNavUnderline(navUnderline = "Multi-Factor Authentication");

			MultiFactorAuthentication.getTOTP();
		}

		task ("Sign out and Login as new user") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Send OTP email and verify information for userfn userln") {
			MultiFactorAuthentication.sendOTPEmailPG();

			MultiFactorAuthentication.verifyOTP(
				portalURL = "${portalURL}",
				recipient = "userfn userln",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");
		}

		task ("Get TOTP") {
			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			Navigator.gotoNavUnderline(navUnderline = "Multi-Factor Authentication");

			MultiFactorAuthentication.getTOTP();
		}

		task ("Remove remove configured TOTP") {
			AssertClick(
				key_text = "Remove Configured Time-Based One-Time Password",
				locator1 = "Button#ANY",
				value1 = "Remove Configured Time-Based One-Time Password");
		}

		task ("Sign out and Login as test@liferay.com") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Assert TOTP field is present") {
			MultiFactorAuthentication.viewTOTPField();
		}
	}

	@description = "This is a use case for LPS-101750. Able to deploy a custom verifier, which is configurable of the System admin, and appears in the MFA process depending on it's Order level."
	@priority = "5"
	test UseCustomMFAVerifier {
		property osgi.modules.includes = "multi-factor-authentication-sample";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#UseCustomMFAVerifier";

		WaitForConsoleTextPresent(value1 = "STARTED com.liferay.multi.factor.authentication.sample_1.0.0");

		task ("Enable OTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings();

			MultiFactorAuthentication.configureOTP(enableOtp = "true");
		}

		task ("Assert MFA order is set to 400 and set it to 50") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Multi-Factor Authentication",
				configurationName = "MFA Sample Configuration",
				configurationScope = "Virtual Instance Scope");

			MultiFactorAuthentication.viewMFAOrderValue(orderValue = "400");

			MultiFactorAuthentication.configureOTP(
				enableOtp = "true",
				order = "50");
		}

		task ("Sign out and check custom OTP verification text") {
			SignOut.signOut();

			MultiFactorAuthentication.verifyCustomOTP(verificationText = "test_text");
		}
	}

	@description = "This is a use case for LPS-110309 and LPS-112805. As an Instance Administrator, I want to see description texts for the MFA configuration entries."
	@priority = "4"
	test ViewDescriptionTextsForMFAConfigurationEntries {
		property test.name.skip.portal.instance = "MultiFactorAuthentication#ViewDescriptionTextsForMFAConfigurationEntries";

		task ("Assert Disable multi-factor authentication system-wide message is present in Multi-Factor Authentication System configuration") {
			MultiFactorAuthentication.openToConfigInSystemSettings();

			AssertNotChecked.assertNotCheckedNotVisible(
				key_settingFieldName = "Disable Multi-Factor Authentication",
				locator1 = "SystemSettings#SETTING_FIELD_NAME_CHECKBOX");

			SystemSettings.viewSettingsText(settingsText = "Disable multi-factor authentication system-wide.");
		}

		task ("Assert default descriptions at multi-factor authentication") {
			MultiFactorAuthentication.openToConfigInInstanceSettings();

			MultiFactorAuthentication.assertDescriptions();
		}
	}

	@description = "This is a use case for LPS-109786. As an Instance administrator, I want to get a notification if the MFA has been disabled/enabled in system level."
	@priority = "4"
	test ViewNotificationsAfterMFADisabledAndEnabled {
		property test.name.skip.portal.instance = "MultiFactorAuthentication#ViewNotificationsAfterMFADisabledAndEnabled";

		task ("Add CP able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Login at able.com") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Configure MFA and Email OTP and enable OTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(baseURL = "http://www.able.com:8080");

			MultiFactorAuthentication.configureOTP(enableOtp = "true");
		}

		task ("Disable MFA") {
			Navigator.openURL();

			MultiFactorAuthentication.configureMFAOnSystemLevel(disabledMfa = "true");
		}

		task ("Go to able.com and Assert Instance administrator got notification in notifications list") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			Notifications.viewBadgeCount(notificationCount = "1");

			Notifications.gotoNotifications();

			AssertTextEquals(
				key_contentBody = "Multi-factor authentication has been disabled by the system administrator and is unavailable to all instances. You will be notified when it becomes enabled again so long as you keep it enabled in Instance Settings.",
				locator1 = "Notifications#NOTIFICATIONS_CONTENT",
				value1 = "Multi-factor authentication has been disabled by the system administrator and is unavailable to all instances. You will be notified when it becomes enabled again so long as you keep it enabled in Instance Settings.");
		}

		task ("Enable MFA") {
			Navigator.openURL();

			MultiFactorAuthentication.configureMFAOnSystemLevel(disabledMfa = "false");
		}

		task ("Go to able.com and Assert Instance administrator got notification in notifications list") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			Notifications.viewBadgeCount(notificationCount = "2");

			Notifications.gotoNotifications();

			AssertTextEquals(
				key_contentBody = "Multi-factor authentication has been enabled by the system administrator. If you do not want this you can disable it in Instance Settings.",
				locator1 = "Notifications#NOTIFICATIONS_CONTENT",
				value1 = "Multi-factor authentication has been enabled by the system administrator. If you do not want this you can disable it in Instance Settings.");
		}

		task ("Go to able.com and disable OTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(baseURL = "http://www.able.com:8080");

			MultiFactorAuthentication.configureOTP(enableOtp = "false");
		}

		task ("Disable MFA") {
			Navigator.openURL();

			MultiFactorAuthentication.configureMFAOnSystemLevel(disabledMfa = "true");
		}

		task ("Go to able.com and and Assert Instance administrator got notification in notifications list") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			Notifications.viewBadgeCount(notificationCount = "2");
		}

		task ("Enable mfa") {
			Navigator.openURL();

			MultiFactorAuthentication.configureMFAOnSystemLevel(disabledMfa = "false");
		}

		task ("Go to able.com and and Assert Instance administrator got notification in notifications list") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			Notifications.viewBadgeCount(notificationCount = "2");
		}
	}

	@description = "This is a use case for LPS-89360. View configuration for Email OTP verifier's order."
	@priority = "4"
	test ViewOrderOfOTPVerifier {
		property test.name.skip.portal.instance = "MultiFactorAuthentication#ViewOrderOfOTPVerifier";

		task ("Add CP able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Login at able.com") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Assert order field is present") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(baseURL = "http://www.able.com:8080");

			MultiFactorAuthentication.viewOTPOrderFieldAvailable();

			AssertElementPresent(
				key_fieldName = "service.ranking",
				locator1 = "MultiFactorAuthentication#EMAIL_OTP_CONFIG_FIELD");
		}
	}

	@description = "This is a use case for LPS-92658. As an Instance Administrator, I want to be able to see successful/unsuccessful attempts of authenticating by verifiers."
	@priority = "4"
	test ViewResourceActionsOfOTPVerificationFailure {
		property osgi.module.configuration.file.names = "com.liferay.multi.factor.authentication.email.otp.configuration.MFAEmailOTPConfiguration.config";
		property osgi.module.configurations = "emailFromAddress=&quot;test@liferay.com&quot;${line.separator}emailFromName=&quot;Joe\ Bloggs&quot;";
		property test.name.skip.portal.instance = "MultiFactorAuthentication#ViewResourceActionsOfOTPVerificationFailure";

		var portalURL = PropsUtil.get("portal.url");

		task ("Enable OTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings();

			MultiFactorAuthentication.configureOTP(enableOtp = "true");
		}

		task ("Sign out and Login") {
			SignOut.signOut();

			User.firstLoginUI(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Send OTP email and check information correctness for test test and Test Test") {
			MultiFactorAuthentication.sendOTPEmailPG();

			MultiFactorAuthentication.verifyOTP(
				portalURL = "${portalURL}",
				recipient = "test test",
				userEmailAddress = "test@liferay.com",
				userPassword = "test",
				validOtp = "false");

			MultiFactorAuthentication.verifyOTP(
				portalURL = "${portalURL}",
				recipient = "Test Test",
				userEmailAddress = "test@liferay.com",
				userPassword = "test");
		}

		task ("Search Test Test in OTP browser MFA Checker") {
			Audit.openAuditAdmin();

			Audit.searchViaKeywords(
				resourceName = "EmailOTPBrowserMFAChecker",
				searchTerm = "MFA_EMAIL_OTP_VERIFICATION_FAILURE",
				userName = "Test Test");
		}

		task ("Assert audit details") {
			Audit.viewAuditDetails(
				additionalInformation = "Incorrect email one-time password",
				resourceAction = "MFA_EMAIL_OTP_VERIFICATION_FAILURE",
				resourceName = "EmailOTPBrowserMFAChecker",
				userName = "Test Test");
		}
	}

	@description = "This is a use case for LPS-86515. Instance level admin is able to see successful/unsuccessful login attempts with the configured TOTP verifier."
	@priority = "5"
	test ViewResourceActionsOfTOTPVerificationAttempts {
		property test.name.skip.portal.instance = "MultiFactorAuthentication#ViewResourceActionsOfTOTPVerificationAttempts";

		task ("Add CP able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Login at able.com") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("Configure OTP email sender") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(baseURL = "http://www.able.com:8080");

			MultiFactorAuthentication.configureOTPEmailSender(
				emailAddress = "test@www.able.com",
				emailSenderName = "Joe Bloggs");
		}

		task ("Enable OTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(baseURL = "http://www.able.com:8080");

			MultiFactorAuthentication.configureOTP(enableOtp = "true");
		}

		task ("Enable TOTP") {
			MultiFactorAuthentication.openToConfigInInstanceSettings(
				baseURL = "http://www.able.com:8080",
				portlet = "Time-Based OTP");

			MultiFactorAuthentication.configureTOTP(enableTotp = "true");
		}

		task ("Sign out and Login at able.com") {
			SignOut.signOutOfSpecificURL(url = "http://www.able.com:8080");

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080/",
				userEmailAddress = "test@www.able.com");
		}

		task ("Send OTP email and check information correctness for test test") {
			MultiFactorAuthentication.sendOTPEmailPG();

			MultiFactorAuthentication.verifyOTP(
				portalURL = "http://www.able.com:8080",
				recipient = "test test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com",
				userPassword = "test");
		}

		task ("Get TOTP") {
			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			Navigator.gotoNavUnderline(navUnderline = "Multi-Factor Authentication");

			var secretKey = selenium.getAttribute("//input[contains(@id,'sharedSecret')]@value");

			echo("secretKey is: ${secretKey}");

			MultiFactorAuthentication.getTOTP();
		}

		task ("Sign out and Login at able.com") {
			SignOut.signOutOfSpecificURL(url = "http://www.able.com:8080");

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080/",
				userEmailAddress = "test@www.able.com");
		}

		task ("Type wrong password at TOTP field") {
			MultiFactorAuthentication.tryWrongTOTP(wrongValue = "111111");
		}

		task ("Get TOTP") {
			MultiFactorAuthentication.getTOTP(secretKeyUnchanged = "${secretKey}");
		}

		task ("Search for Test Test TOTP success verification on browser setup MFA checker") {
			Audit.openAuditAdmin(baseURL = "http://www.able.com:8080");

			Audit.searchViaKeywords(
				resourceName = "TimeBasedOTPBrowserSetupMFAChecker",
				searchTerm = "MFA_TIMEBASED_OTP_VERIFICATION_SUCCESS",
				userName = "Test Test");
		}

		task ("Search for Test Test TOTP failure verification on browser setup MFA checker") {
			Audit.searchViaKeywords(
				resourceName = "TimeBasedOTPBrowserSetupMFAChecker",
				searchTerm = "MFA_TIMEBASED_OTP_VERIFICATION_FAILURE",
				userName = "Test Test");
		}

		task ("Search for Test Test TOTP not verified on on browser setup MFA checker") {
			Audit.searchViaKeywords(
				resourceName = "TimeBasedOTPBrowserSetupMFAChecker",
				searchTerm = "MFA_TIMEBASED_OTP_NOT_VERIFIED",
				userName = "Test Test");
		}

		task ("Search for Test Test OTP email not verified on browser setup MFA checker") {
			Audit.searchViaKeywords(
				resourceName = "EmailOTPBrowserMFAChecker",
				searchTerm = "MFA_EMAIL_OTP_NOT_VERIFIED",
				userName = "Test Test");
		}
	}

}