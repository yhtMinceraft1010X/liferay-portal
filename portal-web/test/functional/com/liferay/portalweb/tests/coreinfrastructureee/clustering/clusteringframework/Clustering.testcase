@component-name = "portal-clustering"
definition {

	property app.server.bundles.size = "1";
	property cluster.enabled = "true";
	property minimum.slave.ram = "24";
	property portal.release = "true";
	property portal.upstream = "true";
	property remote.elasticsearch.enabled = "true";
	property test.assert.warning.exceptions = "true";
	property testray.main.component.name = "Clustering";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			PagesAdmin.tearDownCP();

			BlogsEntry.tearDownCP();
		}
	}

	@priority = "4"
	test AddAndDeleteBlogEntriesOnSeparateNodes {
		property portal.upstream = "quarantine";
		property test.name.skip.portal.instance = "Clustering#AddAndDeleteBlogEntriesOnSeparateNodes";

		Clustering.viewClusterStatusInConsole();

		Page.assertNodePortPG(nodePort = "8080");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Test Page1");

		Navigator.gotoPage(pageName = "Test Page1");

		Portlet.addPG(portletName = "Blogs");

		Navigator.gotoPage(pageName = "Test Page1");

		Blogs.addEntry(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = "9080");

		Navigator.gotoSpecificURLPage(
			pageName = "Test Page1",
			url = "http://localhost:9080");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		Navigator.openNodePort(nodePort = "9080");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Test Page2");

		Navigator.gotoSpecificURLPage(
			pageName = "Test Page2",
			url = "http://localhost:9080");

		Portlet.addPG(portletName = "Blogs");

		Navigator.gotoSpecificURLPage(
			pageName = "Test Page2",
			url = "http://localhost:9080");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		Navigator.gotoSpecificURLPage(
			pageName = "Test Page2",
			url = "http://localhost:9080");

		Blogs.addEntry(
			entryContent = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry2 Title");

		Navigator.gotoSpecificURLPage(
			pageName = "Test Page2",
			url = "http://localhost:9080");

		BlogsEntry.moveToRecycleBinPG(
			entryContent = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry2 Title");

		Navigator.openSpecificURL(url = "http://localhost:9080");

		ProductMenu.gotoPortlet(
			category = "Recycle Bin",
			portlet = "Recycle Bin");

		RecycleBin.emptyCP();

		User.logoutPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoPage(pageName = "Test Page2");

		BlogsEntry.viewNoPG(entryTitle = "Blogs Entry2 Title");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		SearchPortlets.searchEmbedded(searchTerm = "Entry2");

		SearchResultPortlet.viewSearchResultNotPresent(
			searchAssetTitle = "Blogs Entry2 Title",
			searchAssetType = "Blogs Entry");
	}

	@priority = "3"
	test CanAccessGogoShellOnAnyClusteredNode {
		property test.name.skip.portal.instance = "Clustering#CanAccessGogoShellOnAnyClusteredNode";

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Gogo Shell");

		GogoShell.executeCommand(commandName = "lb | grep Liferay");

		GogoShell.viewOutput(outputContent = "Liferay Portal");

		User.logoutPG();

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Gogo Shell");

		GogoShell.executeCommand(commandName = "lb | grep Liferay");

		GogoShell.viewOutput(outputContent = "Liferay Portal");
	}

	@priority = "4"
	test CanInvokeMethods {
		property test.name.skip.portal.instance = "Clustering#CanInvokeMethods";

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-invoke-method.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "Result of invoke-method-portal: 9080");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-invoke-method.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "Result of invoke-method-portal: 8080");

		for (var serverPort : list "8080,9080") {
			Clustering.runGroovyScript(
				nodePort = "${serverPort}",
				scriptFile = "groovy-script-invoke-method-on-master.groovy");

			AssertTextEquals(
				locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
				value1 = "Result of invoke-method-portal-on-master: 8080");
		}

		for (var serverPort : list "8080,9080") {
			Clustering.deployClusteringModule(nodePort = "${serverPort}");
		}

		for (var method : list "invoke-method-module,invoke-method-portal") {
			AntCommand(
				locator1 = "build-test.xml",
				value1 = "cluster-invoke-method -Dcluster.invoke.method=${method}");

			Pause(locator1 = "10000");

			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "Result of ${method}: 9080",
				nodePort = "8080");

			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "Result of ${method}: 8080",
				nodePort = "9080");
		}

		for (var method : list "invoke-method-module-on-master,invoke-method-portal-on-master") {
			AntCommand(
				locator1 = "build-test.xml",
				value1 = "cluster-invoke-method -Dcluster.invoke.method=${method}");

			Pause(locator1 = "10000");

			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "Result of ${method}: 8080",
				nodePort = "8080");

			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "Result of ${method}: 8080",
				nodePort = "9080");
		}
	}

	@priority = "4"
	test CanUpdateLogLevelsForAllNodesFromMaster {
		property test.name.skip.portal.instance = "Clustering#CanUpdateLogLevelsForAllNodesFromMaster";

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Server Administration");

		ServerAdministration.addCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = "com.liferay.portal.cluster");

		ServerAdministration.viewCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = "com.liferay.portal.cluster");

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		for (var serverPort : list "8080,9080") {
			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "Send multicast message",
				nodePort = "${serverPort}");
		}
	}

	@priority = "4"
	test CanUpdateLogLevelsForAllNodesFromSlave {
		property app.server.bundles.size = "2";
		property test.name.skip.portal.instance = "Clustering#CanUpdateLogLevelsForAllNodesFromSlave";

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Server Administration");

		ServerAdministration.addCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = "com.liferay.portal.cluster");

		ServerAdministration.viewCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = "com.liferay.portal.cluster");

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = "8080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		for (var serverPort : list "8080,9080,10080") {
			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "Send multicast message",
				nodePort = "${serverPort}");
		}
	}

	@priority = "5"
	test ShutdownAndStartupNodes {
		property portal.upstream = "quarantine";
		property test.name.skip.portal.instance = "Clustering#ShutdownAndStartupNodes";

		Clustering.viewClusterStatusInConsole();

		Page.assertNodePortPG(nodePort = "8080");

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = "9080");

		Clustering.shutdownSpecificServer(nodePort = "8080");

		Page.assertNodePortPG(nodePort = "9080");

		Clustering.startSpecificServer(
			deleteLiferayHome = "true",
			keepCachedAppServerData = "true",
			nodePort = "8080");

		Page.assertNodePortPG(nodePort = "9080");

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = "8080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = "8080");

		Clustering.shutdownSpecificServer(nodePort = "9080");

		Clustering.startSpecificServer(
			deleteLiferayHome = "true",
			keepCachedAppServerData = "true",
			nodePort = "9080");

		Page.assertNodePortPG(nodePort = "8080");

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = "9080");
	}

	@priority = "4"
	test SlaveNodeCanBecomeMasterNode {
		property test.name.skip.portal.instance = "Clustering#SlaveNodeCanBecomeMasterNode";

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-master-slave.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "This node is master node");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-master-slave.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "This node is slave node");

		Clustering.shutdownSpecificServer(nodePort = "8080");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-master-slave.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "This node is master node");

		Clustering.startSpecificServer(
			deleteLiferayHome = "true",
			keepCachedAppServerData = "true",
			nodePort = "8080");

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = "8080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-master-slave.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "This node is slave node");
	}

	@priority = "4"
	test TCPControlChannelProperties {
		property custom.properties = "cluster.link.channel.properties.control=tcp.xml";
		property test.name.skip.portal.instance = "Clustering#TCPControlChannelProperties";

		for (var serverPort : list "8080,9080") {
			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "Create a new JGroups channel",
				nodePort = "${serverPort}");

			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "properties: TCP",
				nodePort = "${serverPort}");
		}

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	@priority = "4"
	test UDPControlChannelProperties {
		property custom.properties = "cluster.link.channel.properties.control=udp.xml${line.separator}cluster.link.channel.properties.transport.0=udp.xml";
		property test.name.skip.portal.instance = "Clustering#UDPControlChannelProperties";

		for (var serverPort : list "8080,9080") {
			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "Create a new JGroups channel",
				nodePort = "${serverPort}");

			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "properties: UDP",
				nodePort = "${serverPort}");
		}

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	@priority = "4"
	test ValidateDocumentOnSeparateNodes {
		property test.name.skip.portal.instance = "Clustering#ValidateDocumentOnSeparateNodes";

		Clustering.viewClusterStatusInConsole();

		Page.assertNodePortPG(nodePort = "8080");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Documents and Media Page");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		Portlet.addPG(portletName = "Documents and Media");

		DMDocument.enableActionsMenuOnPortlet();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addPG(
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Title");

		DMDocument.viewAllPG(dmDocumentTitle = "DM Document Title");

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = "9080");

		Navigator.gotoSpecificURLPage(
			pageName = "Documents and Media Page",
			url = "http://localhost:9080");

		DMDocument.viewAllPG(dmDocumentTitle = "DM Document Title");

		User.logoutPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	@priority = "4"
	test ValidateLiveUsers {
		property custom.properties = "live.users.enabled=true";
		property test.name.skip.portal.instance = "Clustering#ValidateLiveUsers";

		Clustering.viewClusterStatusInConsole();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Monitoring");

		Clustering.viewLiveSessionCount(count = "1");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Monitoring");

		Clustering.viewLiveSessionCount(count = "2");

		User.loginPG(
			nodePort = "8080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Monitoring");

		Clustering.viewLiveSessionCount(count = "3");

		User.logoutPG();

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Monitoring");

		Clustering.viewLiveSessionCount(count = "3");
	}

	@description = "This is a use case for LPS-142472."
	@priority = "4"
	test ValidatePublishOnTwoNodes {
		property test.name.skip.portal.instance = "Clustering#ValidatePublishOnTwoNodes";

		Clustering.viewClusterStatusInConsole();

		Page.assertNodePortPG(nodePort = "8080");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging Test Page");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			portlet = "Staging");

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = "9080");

		Navigator.gotoSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging Test Page",
			siteName = "Site Name");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoStagedView();

		Portlet.addPG(portletName = "Web Content Display");

		WebContentDisplayPortlet.add(
			webContentContent = "WebContent Content",
			webContentTitle = "WebContent Title");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "WebContent Content",
			webContentTitle = "WebContent Title");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		User.logoutPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "WebContent Content",
			webContentTitle = "WebContent Title");
	}

	@priority = "4"
	test ValidateSchedulerOnSeparateNodes {
		property test.name.skip.portal.instance = "Clustering#ValidateSchedulerOnSeparateNodes";

		var siteName = TestCase.getSiteName();

		Clustering.viewClusterStatusInConsole();

		var pageName = "Home";

		Page.assertNodePortPG(nodePort = "8080");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Publishing",
			portlet = "Staging");

		Staging.activateStagingCP(siteName = "${siteName}");

		Navigator.openURL();

		Navigator.gotoStagedView();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "New Page Name");

		Navigator.openURL();

		Navigator.gotoStagedView();

		Navigator._gotoPage(pageName = "New Page Name");

		Staging.schedulePublishToLivePG(scheduleTitleName = "Staging Schedule Title");

		Navigator.openURL();

		AssertTextNotPresent(
			locator1 = "Home#PAGE_2_GUEST_VIEW",
			value1 = "New Page Name");

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = "9080");

		Navigator.gotoSpecificURLPage(
			pageName = "Home",
			url = "http://localhost:9080");

		AssertTextNotPresent(
			locator1 = "Home#PAGE_2_GUEST_VIEW",
			value1 = "New Page Name");

		Pause(locator1 = "180000");

		Navigator.gotoSpecificURLPage(
			pageName = "Home",
			url = "http://localhost:9080");

		AssertTextEquals(
			locator1 = "Home#PAGE_2_GUEST_VIEW",
			value1 = "New Page Name");

		Navigator.openSpecificURL(url = "http://localhost:9080/web/guest-staging");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			portlet = "Staging");

		Staging.deactivateStagingCP(siteName = "${siteName}");

		User.logoutPG(
			nodePort = "9080",
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

}