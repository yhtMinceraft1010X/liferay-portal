@component-name = "portal-clustering"
definition {

	property app.server.bundles.size = "1";
	property cluster.enabled = "true";
	property minimum.slave.ram = "24";
	property portal.release = "true";
	property portal.upstream = "true";
	property remote.elasticsearch.enabled = "true";
	property test.assert.warning.exceptions = "true";
	property testray.main.component.name = "Clustering";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@ignore = "true"
	@priority = "4"
	test CanModuleBeShutdownDuringReplicateSession {
		property cluster.session.replicated = "true";
		property custom.properties = "portlet.session.replicate.enabled=true";
		property test.name.skip.portal.instance = "ClusteringCache#CanModuleBeShutdownDuringReplicateSession";

		Clustering.deployClusteringModule(nodePort = "8080");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Session Replication Test");

		Navigator.gotoPage(pageName = "Session Replication Test");

		Portlet.addPG(portletName = "ClusterSampleSessionReplication");

		AssertElementPresent(locator1 = "ClusterSamplePortlet#NO_SESSION_DATA_MESSAGE");

		Clustering.deployClusteringModule(nodePort = "9080");

		Navigator.gotoPage(pageName = "Session Replication Test");

		AssertElementPresent(locator1 = "ClusterSamplePortlet#STORED_DATA");

		var sessionData = selenium.getText("ClusterSamplePortlet#STORED_DATA");

		echo("${sessionData}");

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Gogo Shell");

		GogoShell.executeCommand(commandName = "lb | grep 'Portal Cluster Multiple Sample Web'");

		var moduleID = GogoShell.getModuleID(moduleName = "'Portal Cluster Multiple Sample Web'");

		GogoShell.stopModule(moduleID = "${moduleID}");

		GogoShell.viewModuleStatus(
			moduleName = "'Portal Cluster Multiple Sample Web'",
			moduleStatus = "Resolved");

		Navigator.gotoSpecificURLPage(
			pageName = "Session Replication Test",
			url = "http://localhost:9080");

		AssertTextEquals(
			locator1 = "ClusterSamplePortlet#STORED_DATA",
			value1 = "${sessionData}");

		for (var serverPort : list "8080,9080") {
			Clustering.viewNoSessionReplicateLogErrorOnSpecificNode(
				exceptionText = "Unable to deserialize object",
				nodePort = "${serverPort}");
		}
	}

	@priority = "4"
	test CanSessionReplicateBetweenNodes {
		property cluster.session.replicated = "true";
		property custom.properties = "portlet.session.replicate.enabled=true";
		property test.name.skip.portal.instance = "ClusteringCache#CanSessionReplicateBetweenNodes";

		Navigator.openNodePort(nodePort = "9080");

		for (var serverPort : list "8080,9080") {
			Clustering.viewNoSessionReplicateLogErrorOnSpecificNode(
				exceptionText = "Unable to receive message through TCP channel",
				nodePort = "${serverPort}");
		}

		Clustering.deployClusteringModule(nodePort = "8080");

		Navigator.openNodePort(nodePort = "8080");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Session Replication Test");

		Navigator.gotoPage(pageName = "Session Replication Test");

		Portlet.addPG(portletName = "ClusterSampleSessionReplication");

		AssertElementPresent(locator1 = "ClusterSamplePortlet#NO_SESSION_DATA_MESSAGE");

		Clustering.deployClusteringModule(nodePort = "9080");

		Navigator.openNodePort(nodePort = "8080");

		Navigator.gotoPage(pageName = "Session Replication Test");

		AssertElementPresent(locator1 = "ClusterSamplePortlet#STORED_DATA");

		var sessionData = selenium.getText("ClusterSamplePortlet#STORED_DATA");

		echo("${sessionData}");

		Navigator.gotoSpecificURLPage(
			pageName = "Session Replication Test",
			url = "http://localhost:9080");

		AssertTextEquals(
			locator1 = "ClusterSamplePortlet#STORED_DATA",
			value1 = "${sessionData}");

		for (var serverPort : list "8080,9080") {
			Clustering.viewNoSessionReplicateLogErrorOnSpecificNode(
				exceptionText = "Unable to receive message through TCP channel",
				nodePort = "${serverPort}");
		}
	}

	@priority = "4"
	test DoNotReplicatePut {
		property custom.properties = "ehcache.replicator.properties.test.cache=replicatePuts=false";
		property test.name.skip.portal.instance = "ClusteringCache#DoNotReplicatePut";

		Clustering.viewClusterStatusInConsole();

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-put.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Put test.key into test.cache",
			nodePort = "8080");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.key=test.value");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-update.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Put test.key into test.cache",
			nodePort = "9080");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.key=test.value.update");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.key=test.value");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-remove.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Removed test.key from test.cache",
			nodePort = "8080");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Removed test.key from test.cache",
			nodePort = "9080");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");
	}

	@priority = "4"
	test ReplicateByCopy {
		property custom.properties = "ehcache.replicator.properties.test.cache=replicatePutsViaCopy=true";
		property test.name.skip.portal.instance = "ClusteringCache#ReplicateByCopy";

		Clustering.viewClusterStatusInConsole();

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-put.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Put test.key into test.cache",
			nodePort = "8080");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.key=test.value");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Put test.key into test.cache",
			nodePort = "9080");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.key=test.value");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-remove.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Removed test.key from test.cache",
			nodePort = "8080");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Removed test.key from test.cache",
			nodePort = "9080");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");
	}

	@priority = "4"
	test ReplicateByRemove {
		property custom.properties = "ehcache.replicator.properties.test.cache=replicatePutsViaCopy=false";
		property test.name.skip.portal.instance = "ClusteringCache#ReplicateByRemove";

		Clustering.viewClusterStatusInConsole();

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-put.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Put test.key into test.cache",
			nodePort = "8080");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.key=test.value");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Removed test.key from test.cache",
			nodePort = "9080");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-remove-all.groovy");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Cleared test.cache",
			nodePort = "8080");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Cleared test.cache",
			nodePort = "9080");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-portal-cache-get.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "test.cache is empty");
	}

}