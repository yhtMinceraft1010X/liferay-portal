@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Home Site");

		JSONLayout.addPublicLayout(
			groupName = "Home Site",
			layoutName = "Site Page");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONUser.tearDownNonAdminUsers();

			JSONGroup.deleteGroupByName(groupName = "Home Site");
		}
	}

	@description = "Assert that pagination is working for the MySites widget"
	@priority = "3"
	test DisplayMySitesPagination {
		property testray.component.names = "Site Administration";

		task ("Add enough sites to allow pagination to occur") {
			for (var index : list "01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23") {
				JSONGroup.addGroup(groupName = "Site Name ${index}");
			}
		}

		task ("Add My Sites widget to Site Page in Home Site") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Home Site",
				layoutName = "Site Page",
				widgetName = "My Sites");
		}

		task ("View pagination") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = "Home Site");

			Pagination.viewResults(results = "Showing 1 to 20 of 25 entries.");

			Pagination.changePagination(itemsPerPage = "4");

			Pagination.viewResults(results = "Showing 1 to 4 of 25 entries.");
		}
	}

	@description = "Assert a default user can join a normal open site"
	@priority = "4"
	test JoinSiteOpen {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property testray.component.names = "Site Administration,Users and Organizations";

		task ("Create an open site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Create a user and set its password") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Login with the new user and join the open site") {
			User.logoutPG();

			User.loginPG(
				password = "test",
				userEmailAddress = "userea@liferay.com");

			UserBar.gotoDropdownItem(dropdownItem = "My Dashboard");

			Site.joinViaMySitesPG(
				siteName = "Site Name",
				userRole = "Guest");
		}

		task ("Sign in as Test Test") {
			User.logoutPG();

			User.loginPG(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}
	}

	@description = "Assert a default user cannot join a normal private site"
	@priority = "5"
	test JoinSitePrivateNo {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";
		property testray.component.names = "Site Administration,Users and Organizations";

		task ("Create a private site") {
			JSONGroup.addGroup(
				groupName = "Site Name",
				membershipType = "Private");
		}

		task ("Create a user and set its password") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Login with the new user and attempt to join the private site") {
			User.logoutPG();

			User.loginPG(
				password = "test",
				userEmailAddress = "userea@liferay.com");

			UserBar.gotoDropdownItem(dropdownItem = "My Dashboard");

			Site.joinViaMySitesPG(
				membershipType = "Private",
				siteName = "Site Name",
				userRole = "Guest");
		}

		task ("Sign in as Test Test") {
			User.logoutPG();

			User.loginPG(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}
	}

	@description = "Assert joining a restricted site requires admin approval"
	@priority = "5"
	test JoinSiteRestricted {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";
		property testray.component.names = "Site Administration,Users and Organizations";

		task ("Create a restricted site") {
			JSONGroup.addGroup(
				groupName = "Site Name",
				membershipType = "Restricted");
		}

		task ("Create a user and set its password") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Login with the new user and request to join the restricted site") {
			User.logoutPG();

			User.loginPG(
				password = "test",
				userEmailAddress = "userea@liferay.com");

			UserBar.gotoDropdownItem(dropdownItem = "My Dashboard");

			Site.joinViaMySitesPG(
				membershipType = "Restricted",
				siteName = "Site Name",
				userRole = "Guest");
		}

		task ("View that the user's membership request is sent") {
			UserBar.gotoDropdownItem(dropdownItem = "My Dashboard");

			NavItem.gotoAvailableSites();

			MySites.viewMembershipRequested(
				siteName = "Site Name",
				userRole = "Guest");
		}

		task ("Approve user's membership request with superadmin") {
			User.logoutPG();

			User.loginPG(
				password = "test",
				userEmailAddress = "test@liferay.com");

			Site.openSiteMembershipsAdmin(siteURLKey = "site-name");

			Site.approveJoinSiteRestrictedViaMySitesPG(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("View that the user's membership request is approved") {
			User.logoutPG();

			User.loginPG(
				password = "test",
				userEmailAddress = "userea@liferay.com");

			UserBar.gotoDropdownItem(dropdownItem = "My Dashboard");

			Site.viewMySitesViaMySitesPG(
				memberCount = "2 Users",
				siteName = "Site Name");
		}

		task ("Sign in as Test Test") {
			User.logoutPG();

			User.loginPG(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}
	}

	@description = "Assert a default user can leave a site"
	@priority = "5"
	test LeaveSite {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";
		property testray.component.names = "Site Administration,Users and Organizations";

		task ("Create a generic site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Create a user and set its password") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Log in with new user and join site") {
			User.logoutPG();

			User.loginPG(
				password = "test",
				userEmailAddress = "userea@liferay.com");

			UserBar.gotoDropdownItem(dropdownItem = "My Dashboard");

			Site.joinViaMySitesPG(
				siteName = "Site Name",
				userRole = "Guest");
		}

		task ("Leave site") {
			UserBar.gotoDropdownItem(dropdownItem = "My Dashboard");

			Site.leaveViaMySitesPG(
				siteName = "Site Name",
				userRole = "Guest");
		}

		task ("Sign in as Test Test") {
			User.logoutPG();

			User.loginPG(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}
	}

	@description = "Search for a site using MySites widget"
	@priority = "4"
	test SearchSite {
		property testray.component.names = "Site Administration";

		task ("Create a site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Add My Sites widget to Site Page in Home Site") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Home Site",
				layoutName = "Site Page",
				widgetName = "My Sites");
		}

		task ("Search for new site in My Sites widget") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = "Home Site");

			Search.searchPG(
				portletName = "My Sites",
				searchTerm = "Site Name");

			Site.viewMySitesViaMySitesPG(
				memberCount = "1 User",
				siteName = "Site Name");
		}
	}

	@description = "Asssign site membership to a user in multiple ways via CP"
	@priority = "3"
	test ViewMembershipAssignViaSiteCP {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property testray.component.names = "Site Administration,Users and Organizations";

		task ("Create a user and set its password") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Make user a member of home site via Site Settings CP") {
			Site.openSiteMembershipsAdmin(siteURLKey = "home-site");

			Site.assignUserAsMemberCP(
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("Assign user Power User role") {
			JSONRole.assignRoleToUser(
				roleTitle = "Power User",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create another new site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Make user a member of new site via User Admin CP") {
			User.openUsersAdmin();

			Site.assignUserSitesCP(
				siteName = "Site Name",
				userScreenName = "usersn");
		}

		task ("Add My Sites widget to Site Page in Home Site") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Home Site",
				layoutName = "Site Page",
				widgetName = "My Sites");

			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = "Home Site");
		}

		task ("Sign in as new user") {
			User.firstLoginPG(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assert user is a member of both sites") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = "Home Site");

			Site.viewMySitesViaMySitesPG(
				memberCount = "2 Users",
				siteName = "Site Name");
		}
	}

	@description = "Assert inactive sites are not searchable"
	@priority = "3"
	test ViewNoInactiveSite {
		property testray.component.names = "Site Administration";

		task ("Create a new site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Deactivate the new site") {
			Site.openSiteSettingsAdmin(siteURLKey = "site-name");

			Site.inactivateCP(siteName = "Site Name");
		}

		task ("Add My Sites widget to Site Page in Home Site") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Home Site",
				layoutName = "Site Page",
				widgetName = "My Sites");

			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = "Home Site");
		}

		task ("Assert deactivated site is not searchable") {
			Search.searchCP(searchTerm = "Site Name");

			Site.viewNoMySitesViaMySitesPG(
				memberCount = "1",
				siteName = "Site Name");
		}
	}

	@description = "Assert a user cannot join a site with manual membership management disabled"
	@priority = "3"
	test ViewNoJoinOption {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property testray.component.names = "Site Administration,Users and Organizations";

		task ("Create a user and set its password") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign the Administrator role of Home site to new user") {
			Site.openSiteMembershipsAdmin(siteURLKey = "home-site");

			Site.assignUserAsMemberCP(
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add new site with manual membership disabled") {
			JSONGroup.addGroup(
				allowManualMembershipManagement = "false",
				groupName = "Site Name");
		}

		task ("Add My Sites widget to Site Page in Home Site") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Home Site",
				layoutName = "Site Page",
				widgetName = "My Sites");

			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = "Home Site");
		}

		task ("Assert user cannot join a site with disabled membership maanagement") {
			User.firstLoginPG(
				password = "test",
				userEmailAddress = "userea@liferay.com");

			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = "Home Site");

			MySites.viewNoOptions(
				navItem = "Available Sites",
				siteName = "Site Name");
		}
	}

	@description = "Assert a user cannot leave a site with manual membership management disabled"
	@priority = "3"
	test ViewNoLeaveOption {
		property testray.component.names = "Site Administration";

		task ("Add new site with manual membership disabled") {
			JSONGroup.addGroup(
				allowManualMembershipManagement = "false",
				groupName = "Site Name");
		}

		task ("Add My Sites widget to Site Page in Home Site") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Home Site",
				layoutName = "Site Page",
				widgetName = "My Sites");

			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = "Home Site");
		}

		task ("Assert superadmin cannot leave site") {
			Search.searchPG(
				portletName = "My Sites",
				searchTerm = "Site Name");

			MySites.viewNoOptions(
				navItem = "Available Sites",
				siteName = "Site Name");
		}
	}

	@description = "Assert a user can navigate to a Site's public or private pages via MySites widget"
	@priority = "3"
	test ViewSitePages {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
		property testray.component.names = "Site Administration";

		task ("Add a site with a public and private page") {
			JSONGroup.addGroup(groupName = "Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Public Page");

			JSONLayout.addPrivateLayout(
				groupName = "Site Name",
				layoutName = "Private Page");
		}

		task ("Add My Sites widget to Site Page in Home Site") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Home Site",
				layoutName = "Site Page",
				widgetName = "My Sites");

			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = "Home Site");
		}

		task ("Go to public and private pages via My Sites widget") {
			MySites.gotoPagesPG(
				item = "Go to Public Pages",
				pageName = "Public Page",
				siteName = "Site Name");

			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = "Home Site");

			MySites.gotoPagesPG(
				item = "Go to Private Pages",
				pageName = "Private Page",
				siteName = "Site Name");
		}
	}

	@description = "Assert that site tags appear in MySites widget"
	@priority = "4"
	test ViewSiteWithTags {
		property testray.component.names = "Site Administration,Tags";

		task ("Create a new site with tags") {
			JSONGroup.addGroup(groupName = "Site Name");

			Site.openSiteSettingsAdmin(siteURLKey = "site-name");

			Tag.addViaSiteCP(tagNameList = "apple,banana,mango");
		}

		task ("Add My Sites widget to Site Page in Home Site") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Home Site",
				layoutName = "Site Page",
				widgetName = "My Sites");

			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = "Home Site");
		}

		task ("View Site tags via My Sites widget") {
			Site.viewMySitesViaMySitesPG(
				memberCount = "1 User",
				siteName = "Site Name");

			MySites.viewTags(tagNameList = "apple,banana,mango");
		}
	}

}