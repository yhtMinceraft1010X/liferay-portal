@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8356 | Test Summary: 180 Days time period filter in Path Analysis"
	@ignore = "true"
	@priority = "3"
	test CanTimeFilterUse180DaysPathAnalysis {

		// AC Refactor: Need past data
		// AC Refactor ticket: LRAC-8874

		task ("Switch to new property in AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Go to Pages tab in Sites") {
			ACNavigation.goToSites();

			ACNavigation.switchTab(tabName = "Pages");
		}

		// Can't assert that the filter is working correctly without past data

		task ("Assert 'Last 180 days' time filter") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast180Days();

			ACTimeFilter.assertCurrentTimeFilterRange(timeFilterRange = "Last 180 days");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8358 | Test Summary: Custom Range time period filter in Path Analysis"
	@ignore = "true"
	@priority = "5"
	test CanTimeFilterUseCustomRangeInPathAnalysis {

		// AC Refactor: Need past data
		// AC Refactor ticket: LRAC-8878

		task ("Switch to new property in AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Go to Pages tab in Sites") {
			ACNavigation.goToSites();

			ACNavigation.switchTab(tabName = "Pages");
		}

		// Can't assert that the custom filter is working correctly without past data

		task ("Assert custom time filter") {
			ACTimeFilter.setCustomRange(
				endDay = "13",
				endMonth = "July",
				endYear = "2020",
				startDay = "1",
				startMonth = "July",
				startYear = "2020");

			ACTimeFilter.assertCurrentTimeFilterRange(timeFilterRange = "Jul 1, 2020 - Jul 13, 2020");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8357 | Test Summary: Last Year time period filter in Path Analysis"
	@ignore = "true"
	@priority = "3"
	test CanTimeFilterUseLastYearPathAnalysis {

		// AC Refactor: Need past data
		// AC Refactor ticket: LRAC-8875

		task ("Switch to new property in AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Go to Pages tab in Sites") {
			ACNavigation.goToSites();

			ACNavigation.switchTab(tabName = "Pages");
		}

		// Can't assert that the filter is working correctly without past data

		task ("Assert 'Last Year' time filter") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLastYear();

			ACTimeFilter.assertCurrentTimeFilterRange(timeFilterRange = "Last Year");
		}
	}

}