@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-140266. The user could look for color samples via scroll bar."
	@priority = "4"
	@uitest
	test FindColorSamplesViaScrollBar {
		task ("Add a Button fragment to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Find color samples via scroll bar") {
			PageEditor.gotoStyle(fragmentName = "Button");

			Click(
				key_fieldLabel = "Text Color",
				locator1 = "Button#COLOR_PICKER");

			ScrollWebElementIntoView(
				category = "Button Link",
				index = "1",
				locator1 = "PageEditor#COLOR_SWATCH_ITEM",
				panel = "Buttons");

			ScrollWebElementIntoView(
				category = "Brand Colors",
				index = "1",
				locator1 = "PageEditor#COLOR_SWATCH_ITEM",
				panel = "Color System");
		}
	}

	@description = "This is a test for LPS-136412. View collapse style changes in fragment configuration."
	@priority = "5"
	test ViewCollapseStyleInFragmentConfiguration {
		property portal.acceptance = "true";

		task ("Add a dropdown fragment to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Dropdown");
		}

		task ("Go to configuration") {
			PageEditor.gotoConfiguration(fragmentName = "Dropdown");
		}

		task ("Assert the styles are collapsible and are listed in groups") {
			Panel.collapsePanel(panel = "Dropdown Options");

			Panel.collapsePanel(panel = "Frame");

			AssertElementNotPresent(locator1 = "//div[contains(@class,'fieldset')]");

			Panel.expandPanel(panel = "Dropdown Options");

			Panel.expandPanel(panel = "Frame");
		}

		task ("Go to Styles and assert the styles are collapsible and are listed in groups") {
			Navigator.gotoNavTab(navTab = "Styles");

			for (var key_panel : list "Spacing,Text,Background,Borders,Effects") {
				Panel.collapsePanel(panel = "${key_panel}");
			}

			AssertElementNotPresent(locator1 = "//div[contains(@class,'fieldset')]");

			for (var key_panel : list "Spacing,Text,Background,Borders,Effects") {
				Panel.expandPanel(panel = "${key_panel}");
			}
		}
	}

	@description = "This is a test for LPS-140266. The color samples are sorted by the token definition doc order and sections."
	@priority = "5"
	@uitest
	test ViewOrderOfColorSamplesInColorPicker {
		property portal.acceptance = "true";

		task ("Add a Button fragment to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("View the order of color samples in color picker") {
			PageEditor.gotoStyle(fragmentName = "Button");

			Click(
				key_fieldLabel = "Text Color",
				locator1 = "Button#COLOR_PICKER");

			var n = "1";

			for (var panel : list "Color System,General,Typography,Buttons") {
				AssertTextEquals(
					index = "${n}",
					locator1 = "PageEditor#COLOR_SWATCH_PANEL",
					value1 = "${panel}");

				var n = ${n} + 1;
			}

			var n = "1";

			for (var category : list "Brand Colors,Grays,Theme Colors") {
				AssertTextEquals(
					index = "${n}",
					locator1 = "PageEditor#COLOR_SWATCH_CATEGORY",
					panel = "Color System",
					value1 = "${category}");

				var n = ${n} + 1;
			}

			var n = "1";

			for (var i : list "1,2,3,4") {
				AssertAttributeValue(
					attribute1 = "title",
					category = "Brand Colors",
					index = "${n}",
					locator1 = "PageEditor#COLOR_SWATCH_ITEM",
					panel = "Color System",
					value1 = "Brand Color ${i}");

				var n = ${n} + 1;
			}
		}

		task ("View the token name shown in tooltip when hover on color swatch item") {
			MouseOver(
				category = "Grays",
				index = "1",
				locator1 = "PageEditor#COLOR_SWATCH_ITEM",
				panel = "Color System");

			AssertVisible(
				key_content = "White",
				locator1 = "Tooltip#FLOATING_TOOLTIP_CONTENT");
		}
	}

	@description = "This is a test for LPS-132422. The list of actions appear in right order for pages."
	@priority = "3"
	test ViewOrderOfContentPagesActions {
		task ("Add a Heading fragment to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.clickPublish();
		}

		task ("Remove the Heading fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.removeFragment(fragmentName = "Heading");
		}

		task ("Assert the actions order for content pages") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.openPageEllipsisMenu(pageName = "Test Page Name");

			MenuItem.viewOrder(menuItemList = "Edit,Translate,View,-,Preview Draft,Discard Draft,Orphan Widgets,-,Copy Page,Export for Translation,Import Translation,-,Configure,Permissions,-,Delete");
		}
	}

}