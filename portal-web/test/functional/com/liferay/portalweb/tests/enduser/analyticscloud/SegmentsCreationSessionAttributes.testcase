@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site and page") {
			ACUtils.addSiteAndPage();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9204 | Test Summary: Add segment using a session property 'Device'"
	@priority = "4"
	test CanCreateSessionAttributeUsingDevice {
		property portal.upstream = "quarantine";

		// AC Quarantine Reason: Segment membership takes long time to load
		// AC refactor ticket: LRAC-10769

		task ("Connect the DXP to Analytics Cloud") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Launch DXP and visit the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		// Total Members data is taking too much time to appear

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "New Segment Test");
		}

		task ("Add a Device Brand field") {
			ACSegments.goToSidebarAttributes(criterion = "Session Attributes");

			ACSegments.addSegmentField(segmentField = "Device");

			ACSegments.selectOperator(operator = "is");

			ACSegments.editTextCriterion(textInput = "Desktop");
		}

		task ("Save the segment") {
			ACSegments.saveSegment();
		}

		task ("Assert the criteria is correct in Segment Criteria card") {
			ACSegments.viewSegmentCriteriaSessionAttributes(
				attributeName = "Device",
				attributeValue = '''"Desktop"''',
				condition = "is",
				preposition = "since",
				time = "last 24 hours");
		}

		task ("Assert that the user is present on the segment") {
			ACNavigation.switchTab(tabName = "Membership");

			ACSegments.assertMember(memberName = "Test Test");

			ACNavigation.switchTab(tabName = "Overview");

			// Takes too much time to the card data appear

			ACSegments.viewSegmentMembershipLegendNumbers(
				anonymousNumber = "0",
				knownNumber = "1",
				totalNumber = "1");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9208 | Test Summary: Add segment using a session property 'Referrer URL'"
	@ignore = "true"
	@priority = "4"
	test CanCreateSessionAttributeUsingReferrerURL {

		// AC Refactor: timing issue for Referrer URL with page sync
		// AC Refactor ticket: LRAC-9272

		var usernameList = "ac,liferay";

		task ("Connect the DXP to Analytics Cloud") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Add a new user in DXP") {
			for (var name : list "${usernameList}") {
				JSONUser.addUser(
					userEmailAddress = "${name}@liferay.com",
					userFirstName = "${name}",
					userLastName = "${name}",
					userScreenName = "${name}");
			}
		}

		task ("Sync new user") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Add pages") {
			ACUtils.addPage(layoutName = "AC Page 2");
		}

		task ("Sign in with the new user") {
			ACUtils.navigateToSitePageWithUser(
				emailList = "liferay@liferay.com",
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.navigateToSitePageWithUser(
				emailList = "ac@liferay.com",
				pageName = "AC Page 2",
				siteName = "Site Name");

			var myURL = Navigator.getCurrentURL();
		}

		task ("Switch to new property in AC") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");
		}

		task ("Add an URL criteria from Session Attributes") {
			ACSegments.goToSidebarAttributes(criterion = "Session Attributes");

			ACSegments.addSegmentField(segmentField = "Referrer");

			ACSegments.selectOperator(operator = "is");

			ACSegments.editTextCriterion(textInput = "${myURL}");

			ACSegments.editWebBehaviorCriterion(
				indexField = "1",
				timeOption = "ever");
		}

		task ("Save the segment") {
			ACSegments.saveSegment();
		}

		task ("View criteria in Segment Criteria card") {
			ACSegments.viewSegmentCriteriaSessionAttributes(
				attributeName = "Referrer",
				attributeValue = '''"${myURL}"''',
				condition = "is",
				preposition = "ever");
		}

		task ("Navigate to Segments") {
			ACNavigation.goToSegments();
		}

		task ("Access the new segment") {
			ACSegments.accessSegment(segmentName = "Dynamic Segment Test");
		}

		task ("Assert that new user is on segment") {
			ACNavigation.switchTab(tabName = "Membership");

			ACUtils.viewNameList(nameList = "ac ac");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9211 | Test Summary: Add segment using a session property 'URL'"
	@priority = "4"
	test CanCreateSessionAttributeUsingURL {
		property portal.upstream = "quarantine";

		// AC Quarantine Reason: Segment membership takes long time to load LRAC-10769

		task ("Connect the DXP to Analytics Cloud") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();
		}

		task ("Add a new user in DXP") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");
		}

		task ("Sync new user") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Sign in with the new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");
		}

		task ("Go to Home Page DXP") {
			Navigator.openURL();
		}

		task ("Get URL") {
			var myURL = Navigator.getCurrentURL();
		}

		task ("Switch to new property in AC") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");
		}

		task ("Add an URL criteria from Session Attributes") {
			ACSegments.goToSidebarAttributes(criterion = "Session Attributes");

			ACSegments.addSegmentField(segmentField = "URL");

			ACSegments.selectOperator(operator = "is");

			ACSegments.editTextCriterion(textInput = "${myURL}");

			ACSegments.editWebBehaviorCriterion(
				indexField = "1",
				timeOption = "ever");
		}

		task ("Save the segment") {
			ACSegments.saveSegment();
		}

		task ("View criteria in Segment Criteria card") {
			ACSegments.viewSegmentCriteriaSessionAttributes(
				attributeName = "URL",
				attributeValue = '''"${myURL}"''',
				condition = "is",
				preposition = "ever");
		}

		task ("Refresh the page to receive data") {
			Refresh();
		}

		task ("Assert that new user is on segment") {
			ACNavigation.openItem(itemName = "Membership");

			ACSegments.assertMember(memberName = "ac ac");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9213 | Test Summary: Show 'duplicate' and 'delete' options in a list for every segment criteria"
	@priority = "4"
	test SegmentCriteriaOptionsContainsDuplicateAndDelete {
		task ("Connect the DXP to Analytics Cloud") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");
		}

		task ("Add criterias from differents attributes") {
			ACSegments.goToSidebarAttributes(criterion = "Session Attributes");

			ACSegments.addSegmentField(segmentField = "URL");

			ACSegments.goToSidebarAttributes(criterion = "Account Attributes");

			ACSegments.addSegmentField(segmentField = "accountName");
		}

		task ("Assert that Duplicate and Delete are present in the criterias options") {
			Click(
				criteriaName = "URL",
				index = "1",
				locator1 = "ACSegments#CRITERIA_ELLIPSIS");

			MenuItem.viewPresent(menuItem = "Duplicate");

			MenuItem.viewPresent(menuItem = "Delete");

			Click(
				criteriaName = "accountName",
				index = "1",
				locator1 = "ACSegments#CRITERIA_ELLIPSIS");

			MenuItem.viewPresent(menuItem = "Duplicate");

			MenuItem.viewPresent(menuItem = "Delete");
		}
	}

}