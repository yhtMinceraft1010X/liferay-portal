@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site and add a blog in this site") {
			ACUtils.addSiteAndPage();

			ACUtils.createBlogsAndAddToPage();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8336 | Test Summary: Search for a Page in Pages list"
	@priority = "5"
	test CanSearchPageInPagesList {
		property analytics.cloud.upstream = "false";

		task ("Add pages") {
			for (var layoutName : list "AC Page 2,AC Page 3") {
				ACUtils.addPage(layoutName = "${layoutName}");

				Navigator.gotoSitePage(
					pageName = "${layoutName}",
					siteName = "Site Name");

				ACUtils.addWidgetToPage(
					layoutName = "${layoutName}",
					widgetName = "Blogs");
			}
		}

		task ("Connect DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Add a new user in DXP") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Sign in with the new user to visit the site pages") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			for (var pageName : list "AC Page,AC Page 2,AC Page 3") {
				ACUtils.navigateToSitePage(
					actionType = "View Blog",
					documentTitleList = "Blogs AC Title",
					pageName = "${pageName}",
					siteName = "Site Name");
			}
		}

		task ("Switch to new property in AC") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Go to sites pages tab") {
			ACNavigation.goToSites();

			ACNavigation.switchTab(tabName = "Pages");
		}

		task ("Choose Last 24 Hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Search the Pages") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", " ");
			var pageNameList = "AC Page - Site Name - ${dataSourceName},AC Page 2 - Site Name - ${dataSourceName},AC Page 3 - Site Name - ${dataSourceName}";

			ACUtils.searchBar(searchItem = "AC Page");

			ACUtils.viewNameList(nameList = "${pageNameList}");

			ACUtils.searchBar(searchItem = "2");

			ACUtils.viewNameList(nameList = "AC Page 2 - Site Name - ${dataSourceName}");

			ACUtils.searchBar(searchItem = "3");

			ACUtils.viewNameList(nameList = "AC Page 3 - Site Name - ${dataSourceName}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8342 | Test Summary: Custom Range time period filter in Page table"
	@ignore = "true"
	@priority = "5"
	test CanTimeFilterUseCustomRangeInPageTable {

		// AC Refactor: Test needs data from past dates to assert
		// AC Refactor ticket: LRAC-8957

		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Visit the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Select Pages tab and set a 24h time filter") {
			ACNavigation.switchTab(tabName = "Pages");

			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		// Can't assert that the filter is working properly, data not present on time

		task ("Assert that the visited page is present on 24h time filter") {
			ACUtils.assertItemsName(itemList = "AC Page");
		}

		// Can't assert that the filter is working properly without past data

		task ("Set time filter use Custom Range") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setCustomRange(
				endDay = "30",
				endMonth = "August",
				endYear = "2021",
				startDay = "1",
				startMonth = "July",
				startYear = "2021");
		}

		task ("Assert that the 24h filter page is not present on Custom Range filter") {
			ACUtils.assertItemsNameNotPresent(itemList = "AC Page");
		}

		// Can't assert that the filter is working properly without past data

		task ("Assert that the right page is present on Custom Range filter") {
			ACUtils.assertItemsName(itemList = "Custom Range Page");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8340 | Test Summary: Filter Page Table by last 180 days"
	@ignore = "true"
	@priority = "3"
	test PeriodFilter180DaysPageTable {

		// AC Refactor: Test needs data from past dates to assert
		// AC Refactor ticket: LRAC-8933

		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Visit the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Select Pages tab and set a 24h time filter") {
			ACNavigation.switchTab(tabName = "Pages");

			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		// Can't assert that the filter is working properly, data not present on time

		task ("Assert that the visited page is present on 24h time filter") {
			ACUtils.assertItemsName(itemList = "AC Page");
		}

		task ("Set time period filter to 180 Days") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast180Days();
		}

		task ("Assert that the 24h filter page is not present on Last 180 Days filter") {
			ACUtils.assertItemsNameNotPresent(itemList = "AC Page");
		}

		// Can't assert that the filter is working properly without past data

		task ("Assert that the right page is present on Last 180 Days filter") {
			ACUtils.assertItemsName(itemList = "Last 180 Days Page");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8341 | Test Summary: Filter Page Table by Last Year"
	@ignore = "true"
	@priority = "3"
	test PeriodFilterLastYearPageTable {

		// AC Refactor: Test needs data from past dates to assert
		// AC Refactor ticket: LRAC-8934

		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Visit the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Select Pages tab and set a 24h time filter") {
			ACNavigation.switchTab(tabName = "Pages");

			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		// Can't assert that the filter is working properly, data not present on time

		task ("Assert that the visited page is present on 24h time filter") {
			ACUtils.assertItemsName(itemList = "AC Page");
		}

		task ("Set time period filter to Last Year") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLastYear();
		}

		task ("Assert that the 24h filter page is not present on Last Year filter") {
			ACUtils.assertItemsNameNotPresent(itemList = "AC Page");
		}

		// Can't assert that the filter is working properly without past data

		task ("Assert that the right page is present on Last Year filter") {
			ACUtils.assertItemsName(itemList = "Last Year Page");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8111 | Test Summary: Assert the pages list shows a list of pages"
	@priority = "5"
	test ShowsListOfPages {
		property analytics.cloud.upstream = "false";

		task ("Add pages") {
			for (var layoutName : list "AC Page 2,AC Page 3") {
				ACUtils.addPage(layoutName = "${layoutName}");

				Navigator.gotoSitePage(
					pageName = "${layoutName}",
					siteName = "Site Name");

				ACUtils.addWidgetToPage(
					layoutName = "${layoutName}",
					widgetName = "Blogs");
			}
		}

		task ("Add a new user in DXP") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Connect DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Sign in with the new user to visit the site pages") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			for (var pageName : list "AC Page,AC Page 2,AC Page 3") {
				ACUtils.navigateToSitePage(
					actionType = "View Blog",
					documentTitleList = "Blogs AC Title",
					pageName = "${pageName}",
					siteName = "Site Name");
			}
		}

		task ("Switch to new property in AC") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Go to sites pages tab") {
			ACNavigation.goToSites();

			ACNavigation.switchTab(tabName = "Pages");
		}

		task ("Choose Last 24 Hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Assert that the page list is beeing showed") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", " ");
			var pageNameList = "AC Page - Site Name - ${dataSourceName},AC Page 2 - Site Name - ${dataSourceName},AC Page 3 - Site Name - ${dataSourceName}";

			ACUtils.viewNameList(nameList = "${pageNameList}");
		}
	}

}