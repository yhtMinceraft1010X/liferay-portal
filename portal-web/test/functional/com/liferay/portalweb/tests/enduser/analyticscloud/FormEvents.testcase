@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a Forms to page and display a form") {
			ACUtils.createFormAndAddToPage();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");

			JSONUser.tearDownNonAdminUsers();
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8684 | Test Summary: Check fieldBlurred is triggered when navigating the form hitting the tab key"
	@priority = "3"
	test CheckFieldBlurredTriggeredWhenNavigateOutOfFieldViaTabKey {
		property proxy.server.enabled = "true";

		task ("Get formId of form") {
			var formId = JSONDDMForm.getFormInstanceId(
				formName = "Created Form Name",
				groupName = "Site Name");
		}

		task ("Get published form URL") {
			FormsAdmin.openFormsAdmin(siteURLKey = "site-name");

			FormsAdminNavigator.gotoEditFormByName(formName = "Created Form Name");

			FormsAdminNavigator.gotoPublishCopyURLLink();

			var publishedFormURL = Form.getPublishedFormPublicURL();
		}

		task ("Sign out") {
			User.logoutPG();
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as new user") {
			ACUtils.launchDXP(userEmailAddress = "userea@liferay.com");
		}

		task ("Navigate to the published form") {
			Navigator.openSpecificURL(url = "${publishedFormURL}");

			FormPortlet.waitFormRenderer(text = "Submit");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("fieldBlurred");
		}

		task ("Click the input field in form") {
			Click(
				key_fieldName = "Text",
				locator1 = "FormFields#TEXT_FIELD");
		}

		task ("Stay 2 seconds") {
			Pause(locator1 = "2000");
		}

		task ("Navigate to the Submit button via Tab key") {
			KeyPress(
				key_fieldName = "Text",
				locator1 = "FormFields#TEXT_FIELD",
				value1 = "\TAB");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("View the formId of fieldBlurred event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldBlurred",
				property = "formId",
				value = "${formId}");
		}

		task ("View the focusDuration of fieldBlurred event is greater than 0 ms") {
			var focusDuration = ACUtils.getEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldBlurred",
				property = "focusDuration");

			TestUtils.isGreaterThan(
				actual = "${focusDuration}",
				expected = "0");
		}

		task ("View the fieldName of fieldBlurred event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldBlurred",
				property = "fieldName",
				value = "Text");
		}

		task ("View the page of fieldBlurred event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldBlurred",
				property = "page",
				value = "0");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8683 | Test Summary: Check fieldBlurred triggers when a previously focused field loses focus and check its properties (see reference document in comments)"
	@priority = "5"
	test CheckFieldBlurredWhenFieldLosesFocus {
		property proxy.server.enabled = "true";

		task ("Get formId of form") {
			var formId = JSONDDMForm.getFormInstanceId(
				formName = "Created Form Name",
				groupName = "Site Name");
		}

		task ("Sign out") {
			User.logoutPG();
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as new user") {
			ACUtils.launchDXP(userEmailAddress = "userea@liferay.com");
		}

		task ("Navigate to the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("fieldBlurred");
		}

		task ("Click the input field in form") {
			Click(
				key_fieldName = "Text",
				locator1 = "FormFields#TEXT_FIELD");
		}

		task ("Stay 2 seconds") {
			Pause(locator1 = "2000");
		}

		task ("Click the header title") {
			Click(
				key_formName = "Created Form Name",
				locator1 = "Form#PUBLISH_FORM_NAME_FIELD");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("View the formId of fieldBlurred event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldBlurred",
				property = "formId",
				value = "${formId}");
		}

		task ("View the focusDuration of fieldBlurred event is greater than 0 ms") {
			var focusDuration = ACUtils.getEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldBlurred",
				property = "focusDuration");

			TestUtils.isGreaterThan(
				actual = "${focusDuration}",
				expected = "0");
		}

		task ("View the fieldName of fieldBlurred event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldBlurred",
				property = "fieldName",
				value = "Text");
		}

		task ("View the page of fieldBlurred event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldBlurred",
				property = "page",
				value = "0");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8685 | Test Summary: Check fieldFocused is triggered when a field is focused (selected) and check its properties (see reference document in comments)"
	@priority = "3"
	test CheckFieldFocusedTriggeredWhenFieldIsFocused {
		property proxy.server.enabled = "true";

		task ("Get formId of form") {
			var formId = JSONDDMForm.getFormInstanceId(
				formName = "Created Form Name",
				groupName = "Site Name");
		}

		task ("Sign out") {
			UserBar.signOut();
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as new user") {
			ACUtils.launchDXP(userEmailAddress = "userea@liferay.com");
		}

		task ("Navigate to the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("fieldFocused");
		}

		task ("Click the input field in form") {
			Click(
				key_fieldName = "Text",
				locator1 = "FormFields#TEXT_FIELD");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("View the formId of fieldFocused event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldFocused",
				property = "formId",
				value = "${formId}");
		}

		task ("View the fieldName of fieldFocused event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldFocused",
				property = "fieldName",
				value = "Text");
		}

		task ("View the page of fieldFocused event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldFocused",
				property = "page",
				value = "0");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8690 | Test Summary: Check fieldFocused is triggered when navigating the form hitting the tab key"
	@priority = "5"
	test CheckFieldFocusedWhenNavigatingToFieldViaTabKey {
		property proxy.server.enabled = "true";

		task ("Get formId of form") {
			var formId = JSONDDMForm.getFormInstanceId(
				formName = "Created Form Name",
				groupName = "Site Name");
		}

		task ("Get published form URL") {
			FormsAdmin.openFormsAdmin(siteURLKey = "site-name");

			FormsAdminNavigator.gotoEditFormByName(formName = "Created Form Name");

			FormsAdminNavigator.gotoPublishCopyURLLink();

			var publishedFormURL = Form.getPublishedFormPublicURL();
		}

		task ("Sign out") {
			User.logoutPG();
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as new user") {
			ACUtils.launchDXP(userEmailAddress = "userea@liferay.com");
		}

		task ("Navigate to the published form") {
			Navigator.openSpecificURL(url = "${publishedFormURL}");

			FormPortlet.waitFormRenderer(text = "Submit");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("fieldFocused");
		}

		task ("Navigate to the form field via Tab key") {
			KeyPress(
				locator1 = "//body",
				value1 = "\TAB");

			KeyPress(
				key_fieldLabel = "Text",
				locator1 = "FormFields#LABEL",
				value1 = "\TAB");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("View the formId of fieldFocused event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldFocused",
				property = "formId",
				value = "${formId}");
		}

		task ("View the fieldName of fieldFocused event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldFocused",
				property = "fieldName",
				value = "Text");
		}

		task ("View the page of fieldFocused event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldFocused",
				property = "page",
				value = "0");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8691 | Test Summary: Check formSubmitted triggers after submitting a form and check its properties (see reference document in comments)"
	@priority = "5"
	test CheckFormSubmittedAfterSubmittingForm {
		property proxy.server.enabled = "true";

		task ("Get formId of form") {
			var formId = JSONDDMForm.getFormInstanceId(
				formName = "Created Form Name",
				groupName = "Site Name");
		}

		task ("Sign out") {
			UserBar.signOut();
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as new user") {
			ACUtils.launchDXP(userEmailAddress = "userea@liferay.com");
		}

		task ("Navigate to the site page and submit a record in form") {
			ACUtils.navigateToSitePage(
				actionType = "Submit Form",
				pageName = "AC Page",
				siteName = "Site Name",
				submitText = "First Record");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("formSubmitted");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "10000");
		}

		task ("View the formId of formSubmitted event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "formSubmitted",
				property = "formId",
				value = "${formId}");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8682 | Test Summary: Check formViewed triggers and check its properties (see reference document in comments)"
	@priority = "5"
	test CheckFormViewedProperties {
		property proxy.server.enabled = "true";

		task ("Get formId of form") {
			var formId = JSONDDMForm.getFormInstanceId(
				formName = "Created Form Name",
				groupName = "Site Name");
		}

		task ("Get published form URL") {
			FormsAdmin.openFormsAdmin(siteURLKey = "site-name");

			FormsAdminNavigator.gotoEditFormByName(formName = "Created Form Name");

			FormsAdminNavigator.gotoPublishCopyURLLink();

			var publishedFormURL = Form.getPublishedFormPublicURL();
		}

		task ("Sign out") {
			User.logoutPG();
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as new user") {
			ACUtils.launchDXP(userEmailAddress = "userea@liferay.com");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("formViewed");
		}

		task ("Navigate to the published form") {
			Navigator.openSpecificURL(url = "${publishedFormURL}");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "10000");
		}

		task ("View the formId of formViewed event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "formViewed",
				property = "formId",
				value = "${formId}");
		}

		task ("View the title of formViewed event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "formViewed",
				property = "title",
				value = "Created Form Name");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8692 | Test Summary: Check pageViewed is triggered with formViewed"
	@priority = "4"
	test CheckPageViewedIsTriggeredWithFormViewed {
		property proxy.server.enabled = "true";

		task ("Get formId of form") {
			var formId = JSONDDMForm.getFormInstanceId(
				formName = "Created Form Name",
				groupName = "Site Name");
		}

		task ("Get published form URL") {
			FormsAdmin.openFormsAdmin(siteURLKey = "site-name");

			FormsAdminNavigator.gotoEditFormByName(formName = "Created Form Name");

			FormsAdminNavigator.gotoPublishCopyURLLink();

			var publishedFormURL = Form.getPublishedFormPublicURL();
		}

		task ("Sign out") {
			User.logoutPG();
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as new user") {
			ACUtils.launchDXP(userEmailAddress = "userea@liferay.com");
		}

		task ("Navigate to the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("pageViewed");
		}

		task ("Navigate to the published form") {
			Navigator.openSpecificURL(url = "${publishedFormURL}");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("View the formId of formViewed event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "formViewed",
				property = "formId",
				value = "${formId}");
		}

		task ("View the title of formViewed event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "formViewed",
				property = "title",
				value = "Created Form Name");
		}

		task ("View the formId of pageViewed event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "pageViewed",
				property = "formId",
				value = "${formId}");
		}

		task ("View the page of pageViewed event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "pageViewed",
				property = "page",
				value = "0");
		}

		task ("View the title of pageViewed event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "pageViewed",
				property = "title",
				value = "");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

}