@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page Name",
				type = "content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a use test for LPS-101248. Delete a web content template used in Content Display fragment."
	@priority = "2"
	test DeleteSelectedTemplate {
		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a web content template for Basic Web Content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoTemplates();

			var templateScript = '''<a>${content.getData()}</a>''';

			WebContentTemplates.addCP(
				structureName = "Basic Web Content",
				templateName = "WC Template Name",
				templateScript = "${templateScript}");
		}

		task ("Add a Content Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and custom template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "WC Template Name",
				webcontent = "true",
				webContentTitle = "Web Content Title");

			AssertVisible(
				key_content = "//a[contains(.,'Web Content Content')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");
		}

		task ("View delete the web content template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoTemplates();

			WebContentTemplates.deleteCP(templateName = "WC Template Name");
		}
	}

	@description = "This is a test for LPS-101248. Can select any custom web content template as a Template for web content selected in content fragment."
	@priority = "5"
	@uitest
	test SelectCustomWebContentTemplate {
		property portal.acceptance = "true";

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "This content maps from web content",
				groupName = "Test Site Name",
				title = "Webcontent Title");
		}

		task ("Add a template for Basic Web Content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				generalVariables = "Site ID",
				structureName = "Basic Web Content",
				templateDescription = "WC Template Description",
				templateName = "WC Template Name");
		}

		task ("Add a Content Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "WC Template Name",
				webcontent = "true",
				webContentTitle = "Webcontent Title");

			PageEditor.clickPublish();
		}

		task ("View only the Site ID shown in Content Display at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			var siteId = JSONGroupSetter.setGroupId(groupName = "Test Site Name");

			ContentPages.viewFragmentText(
				assetType = "journal",
				fragmentName = "Content Display",
				text = "${siteId}");

			AssertTextNotEquals.assertNotPartialText(
				assetType = "journal",
				index = "1",
				locator1 = "Fragment#CONTENT_DISPLAY_TEXT",
				value1 = "This content maps from web content");
		}
	}

	@description = "This is a test for LPS-101248. Can select web content template from Global site as a Template for Content Display fragment."
	@priority = "2"
	test SelectWebContentTemplateFromGlobalSite {
		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a new template for Basic Web Content in Global site") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "global");

			NavItem.gotoTemplates();

			var templateScript = '''<a>${content.getData()}</a>''';

			WebContentTemplates.addCP(
				structureName = "Basic Web Content",
				templateName = "WC Template Name",
				templateScript = "${templateScript}");
		}

		task ("Add a Content Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and custom template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "WC Template Name",
				webcontent = "true",
				webContentTitle = "Web Content Title");

			AssertVisible(
				key_content = "//a[contains(.,'Web Content Content')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");

			PageEditor.clickPublish();
		}

		task ("View the web content is shown in Content Display") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				key_content = "//a[contains(.,'Web Content Content')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");
		}
	}

	@description = "This is a test for LPS-101248. Can select web content template from script file as a "Template" for Content Display fragment."
	@priority = "2"
	test SelectWebContentTemplateFromScriptFile {
		task ("Add a web content structure with Text and Numeric fields") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			for (var fieldName : list "Text,Numeric") {
				DataEngine.addField(
					fieldFieldLabel = "${fieldName}",
					fieldName = "${fieldName}");
			}

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a template for new structure") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFile = "wc_template_2.ftl",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				webContentNumeric = "9",
				webContentText = "This is a Text field",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Content Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and custom template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "WC Template Name",
				webcontent = "true",
				webContentTitle = "Web Content Title");
		}

		task ("Assert the web content is shown in Content Display") {
			AssertVisible(
				key_content = "//p[contains(@class,'text')][contains(.,'This is a Text field')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");

			AssertVisible(
				key_content = "//p[contains(@class,'numeric')][contains(.,'9')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");
		}
	}

	@description = "This is a test for LPS-101248. The available web content template options are grouped and listed in alphabetical order in Content Display. Additionally, the web content templates for other structrue and deleted ones shouldn't be available."
	@priority = "3"
	test ViewAvailableWebContentTemplates {
		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a new web content structrue") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a template for new structrue") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFieldNames = "Text",
				templateName = "WC Template For Text");
		}

		task ("Add three templates for Basic Web Content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				generalVariables = "Site ID",
				structureName = "Basic Web Content",
				templateFieldNames = "Content",
				templateName = "First Template For Basic Web Content");

			WebContentTemplates.addCP(
				generalVariables = "Portal Instance ID",
				structureName = "Basic Web Content",
				templateFieldNames = "Content",
				templateName = "Second Template For Basic Web Content");

			WebContentTemplates.addCP(
				generalVariables = "Device",
				structureName = "Basic Web Content",
				templateFieldNames = "Content",
				templateName = "Third Template For Basic Web Content");
		}

		task ("Delete the Third Template For Basic Web Content") {
			WebContentTemplates.deleteCP(templateName = "Third Template For Basic Web Content");
		}

		task ("Add a Content Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				webcontent = "true",
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("View the order of templates options in Content Display") {
			var n = "1";

			for (var templateName : list "Basic Web Content,First Template For Basic Web Content,Second Template For Basic Web Content") {
				AssertTextEquals(
					key_fieldLabel = "Template",
					key_groupLabel = "Basic Web Content",
					key_index = "${n}",
					locator1 = "Select#GROUPED_SELECT_VALUE_ANY",
					value1 = "${templateName}");

				var n = ${n} + 1;
			}
		}

		task ("Assert the WC Template For Text and Third Template For Basic Web Content are not shown") {
			AssertElementNotPresent(
				key_fieldLabel = "Template",
				key_groupLabel = "Text",
				key_value = "WC Template For Text",
				locator1 = "Select#GROUPED_SELECT_VALUE");

			AssertElementNotPresent(
				key_fieldLabel = "Template",
				key_groupLabel = "Basic Web Content",
				key_value = "Third Template For Basic Web Content",
				locator1 = "Select#GROUPED_SELECT_VALUE");
		}
	}

	@description = "This is a test for LPS-101248. Display web content with Color field in Content Display."
	@priority = "3"
	test ViewSelectedWebContentWithColorField {
		task ("Add a web content structure with a Color field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Color",
				fieldName = "Color");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFieldNames = "Color",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentColor = "FF0D0D",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Content Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "WC Template Name",
				webcontent = "true",
				webContentTitle = "Web Content Title");
		}

		task ("View the Color field is shown in Content Display") {
			ContentPages.viewFragmentText(
				assetType = "journal",
				fragmentName = "Content Display",
				text = "#FF0D0D");
		}
	}

	@description = "This is a test for LPS-101248. Display web content with Date field in Content Display."
	@priority = "3"
	test ViewSelectedWebContentWithDateField {
		task ("Add a web content structure with a Date field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Date",
				fieldName = "Date");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFieldNames = "Date",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentDate = "10/10/2020",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Content Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "WC Template Name",
				webcontent = "true",
				webContentTitle = "Web Content Title");
		}

		task ("View the Date field is shown in Content Display") {
			ContentPages.viewFragmentText(
				assetType = "journal",
				fragmentName = "Content Display",
				text = "10 Oct 2020 - 00:00:00");
		}
	}

	@description = "This is a test for LPS-101248. Display web content with Geolocation field in Content Display."
	@priority = "3"
	test ViewSelectedWebContentWithGeolocationField {
		task ("Add a web content structure with a Geolocation field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Geolocation",
				fieldName = "Geolocation");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFieldNames = "Geolocation",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Content Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "WC Template Name",
				webcontent = "true",
				webContentTitle = "Web Content Title");
		}

		task ("View the Geolocation field is shown in Content Display") {
			AssertVisible(
				key_content = "//div[contains(@id,'Geolocation')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");
		}
	}

	@description = "This is a test for LPS-101248. Display web content with Grid field in Content Display."
	@priority = "3"
	test ViewSelectedWebContentWithGridField {
		task ("Add a web content structure with a Grid field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addFields(fieldNameList = "Grid");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFieldNames = "Grid",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				column = "1",
				row = "1",
				webContentGrid = "true",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Content Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "WC Template Name",
				webcontent = "true",
				webContentTitle = "Web Content Title");
		}

		task ("View the Grid field is shown in Content Display") {
			ContentPages.viewFragmentText(
				assetType = "journal",
				fragmentName = "Content Display",
				text = '''{"R1":"C1"}''');
		}
	}

	@description = "This is a test for LPS-101248. Display web content with Image field in Content Display."
	@priority = "3"
	test ViewSelectedWebContentWithImageField {
		task ("Add a web content structure with a Image field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Image",
				fieldName = "Image");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFieldNames = "Image",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				navTab = "Web Content Images",
				webContentImage = "Document_3.png",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Content Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "WC Template Name",
				webcontent = "true",
				webContentTitle = "Web Content Title");
		}

		task ("View the Image field is shown in Content Display") {
			ContentPages.viewFragmentImage(
				assetType = "journal",
				fragmentName = "Content Display",
				image = "Document_3.png");
		}
	}

	@description = "This is a test for LPS-101248. Display web content with Link to Page field in Content Display."
	@priority = "3"
	test ViewSelectedWebContentWithLinkToPageField {
		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add a web content structure with a Link to Page field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Link to Page",
				fieldName = "Link to Page");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFieldNames = "Link to Page",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentLinkToPage = "Test Page Name",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Content Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "WC Template Name",
				webcontent = "true",
				webContentTitle = "Web Content Title");
		}

		task ("View the Link to Page field is shown in Content Display") {
			AssertVisible(
				key_content = "//a[contains(.,'Link to Page')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");
		}
	}

	@description = "This is a test for LPS-101248. Display web content with Multiple Selection field in Content Display."
	@priority = "3"
	test ViewSelectedWebContentWithMultipleSelectionField {
		task ("Add a web content structure with a Multiple Selection field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addFields(fieldNameList = "Multiple Selection");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFieldNames = "Multiple Selection",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentMultipleSelection = "Option 1",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Content Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "WC Template Name",
				webcontent = "true",
				webContentTitle = "Web Content Title");
		}

		task ("View the Multiple Selection field is shown in Content Display") {
			ContentPages.viewFragmentText(
				assetType = "journal",
				fragmentName = "Content Display",
				text = '''["First"]''');
		}
	}

	@description = "This is a test for LPS-101248. Display web content with Numeric field in Content Display."
	@priority = "3"
	test ViewSelectedWebContentWithNumericField {
		task ("Add a web content structure with a Numeric field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Numeric",
				fieldName = "Numeric");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFieldNames = "Numeric",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentNumeric = "9",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Content Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "WC Template Name",
				webcontent = "true",
				webContentTitle = "Web Content Title");
		}

		task ("View the Numeric field is shown in Content Display") {
			ContentPages.viewFragmentText(
				assetType = "journal",
				fragmentName = "Content Display",
				text = "9");
		}
	}

	@description = "This is a test for LPS-101248. Display web content with Rich Text field in Content Display."
	@priority = "3"
	test ViewSelectedWebContentWithRichTextField {
		task ("Add a web content structure with a Rich Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Rich Text",
				fieldName = "Rich Text");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFieldNames = "Rich Text",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentRichText = "This is a Rich Text field",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Content Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "WC Template Name",
				webcontent = "true",
				webContentTitle = "Web Content Title");
		}

		task ("View the Rich Text field is shown in Content Display") {
			ContentPages.viewFragmentText(
				assetType = "journal",
				fragmentName = "Content Display",
				text = "This is a Rich Text field");
		}
	}

	@description = "This is a test for LPS-101248. Display web content with Select from List field in Content Display."
	@priority = "3"
	test ViewSelectedWebContentWithSelectFromListField {
		task ("Add a web content structure with a Select from List field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addFields(fieldNameList = "Select from List");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFieldNames = "Select from List",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentSelectFromList = "Option 2",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Content Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "WC Template Name",
				webcontent = "true",
				webContentTitle = "Web Content Title");
		}

		task ("View the Select from List field is shown in Content Display") {
			ContentPages.viewFragmentText(
				assetType = "journal",
				fragmentName = "Content Display",
				text = "Value2");
		}
	}

	@description = "This is a test for LPS-101248. Display web content with Single Selection field in Content Display."
	@priority = "3"
	test ViewSelectedWebContentWithSingleSelectionField {
		task ("Add a web content structure with a Single Selection field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addFields(fieldNameList = "Single Selection");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFieldNames = "Single Selection",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentSingleSelection = "Option 3",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Content Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "WC Template Name",
				webcontent = "true",
				webContentTitle = "Web Content Title");
		}

		task ("View the Single Selection field is shown in Content Display") {
			ContentPages.viewFragmentText(
				assetType = "journal",
				fragmentName = "Content Display",
				text = "Value3");
		}
	}

	@description = "This is a test for LPS-101248. Display web content with Text field in Content Display."
	@priority = "3"
	test ViewSelectedWebContentWithTextField {
		task ("Add a web content structure with a Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFieldNames = "Text",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "This is a Text field",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a Content Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "WC Template Name",
				webcontent = "true",
				webContentTitle = "Web Content Title");
		}

		task ("View the Text field is shown in Content Display") {
			ContentPages.viewFragmentText(
				assetType = "journal",
				fragmentName = "Content Display",
				text = "This is a Text field");
		}
	}

	@description = "This is a test for LPS-101248. Display web content with Upload field in Content Display."
	@priority = "3"
	test ViewSelectedWebContentWithUploadField {
		task ("Add a web content structure with a Upload field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Upload",
				fieldName = "Upload");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFieldNames = "Upload",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				dmNavTab = "User Personal Folder",
				webContentTitle = "Web Content Title",
				webContentUpload = "Document_1.jpg");

			PortletEntry.publish();
		}

		task ("Add a Content Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "WC Template Name",
				webcontent = "true",
				webContentTitle = "Web Content Title");
		}

		task ("View the Upload field is shown in Content Display") {
			AssertVisible(
				key_content = "//a[contains(@href,'Document_1.jpg')][contains(.,'Download Upload')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");
		}
	}

	@description = "This is a test for LPS-101248. Display web content with Web Content field in Content Display."
	@priority = "3"
	test ViewSelectedWebContentWithWebContentField {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "WC Title");
		}

		task ("Add a web content structure with a Web Content field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Web Content",
				fieldName = "Web Content");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFieldNames = "Web Content",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentTitle = "Web Content Title",
				webContentWebContent = "WC Title");

			PortletEntry.publish();
		}

		task ("Add a Content Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Content Display");
		}

		task ("Select the web content and custom template in Content Display") {
			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				template = "WC Template Name",
				webcontent = "true",
				webContentTitle = "Web Content Title");
		}

		task ("View the web content is shown in Content Display") {
			AssertVisible(
				key_content = "//a[contains(.,'WC Title')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");
		}
	}

}