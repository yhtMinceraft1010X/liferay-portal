@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8351 | Test Summary: Page profile audience card shows known and anonymous individuals as well as segmented/unsegmented individuals"
	@priority = "5"
	test ShowsKnownAnonymousIndividualsAsWellAsSegmentedUnsegmentedIndividuals {

		// AC Refactor: Timing issues may happen on this test case
		// AC Refactor ticket: LRAC-9409

		property portal.upstream = "quarantine";

		var usernameList = "ac,liferay";
		var emailList = "ac@liferay.com,liferay@liferay.com";

		task ("Add page and Blog for interaction with the AC") {
			ACUtils.addSiteAndPage();

			ACUtils.createBlogsAndAddToPage();
		}

		task ("Add users and interact with the page to get data from known and unsegmented users") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

			for (var name : list "${usernameList}") {
				JSONUser.addUser(
					userEmailAddress = "${name}@liferay.com",
					userFirstName = "${name}",
					userLastName = "${name}",
					userScreenName = "${name}");
			}

			ACDXPSettings.syncNewContactData();

			ACUtils.navigateToSitePageWithUser(
				emailList = "${emailList}",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Logout and interact whith the page to get data from anonymous user") {
			User.logoutPG();

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close all sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Go to AC and create segment for the user") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();

			ACUtils.setItemName(itemName = "Static Segment Test");

			ACSegments.addStaticMember(tableMember = "ac ac");

			ACSegments.saveSegment();
		}

		task ("Go to DXP and interact with the page to get data from segmented users") {
			ACUtils.launchDXP(userEmailAddress = "ac@liferay.com");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.navigateToSitePageWithUser(
				emailList = "liferay@liferay.com",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Logout and interact with the page to get data from anonymous unsegmented user") {
			User.logoutPG();

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close all sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Go to pages and open the page created in DXP") {
			ACUtils.launchAC();

			ACNavigation.switchTab(tabName = "Pages");

			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			var portalURL = PropsUtil.get("portal.url");
			var portalURL = StringUtil.replace("${portalURL}", "http://", "");
			var portalURL = StringUtil.replace("${portalURL}", ":8080", "");

			ACNavigation.openItem(itemName = "AC Page - Site Name - ${portalURL}");

			// The page takes too long to appear in the Page Section in AC

		}

		task ("Assert that Known, Anonymous, Segmented and Unsegmented Individuals are displayed") {
			ACUtils.assertAudienceCard(
				index = "1",
				percentageList = "66.67%,33.33%");

			ACUtils.assertAudienceCard(
				index = "2",
				percentageList = "66.67%,33.33%");
		}
	}

}