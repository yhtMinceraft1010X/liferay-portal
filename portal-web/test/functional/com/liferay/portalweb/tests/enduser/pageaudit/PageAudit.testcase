@component-name = "portal-page-audit"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Page Audit";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		task ("Create content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		JSONUser.tearDownNonAdminUsers();

		JSONGroup.deleteGroupByName(groupName = "Test Site Name");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-132234: Given the detail view of the page audit panel
	Then the checks related to Low contrast ratio, Missing image-alt and Missing input-image-alt will appear under the Accessibility section"
	@priority = "3"
	test AccessibilityFailures {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckIllegibleFontSizes";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Run Page Audit") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Check if proper failures are displayed at Accessibility section") {
			AssertElementPresent(
				failingCheckCategory = "Accessibility",
				failingCheckName = "Low Contrast Ratio",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");

			AssertElementPresent(
				failingCheckCategory = "Accessibility",
				failingCheckName = "Missing Img ALT Attributes",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");

			AssertElementPresent(
				failingCheckCategory = "Accessibility",
				failingCheckName = "Missing Input ALT Attributes",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");
		}
	}

	@description = "LPS-119066: Given the Page Audit Panel
	When the user clicks on the language selector and selects other language
	Then the title of the page shows the matching translation (if existing), the URL changes (if localized URLs is enabled) and the API is called so the progress bar shows"
	@priority = "3"
	test AssertPageAuditLocale {
		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Add a translation for that page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Content Page");

			PagesAdmin.addLocalizedFriendlyURL(
				friendlyURLLocalizedList = "fr-FR",
				localizedFriendlyURLList = "",
				localizedNameList = "Principal");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelBeforeConfiguration();

			AssertTextPresent(
				locator1 = "PageAudit#PANEL_PAGE_TITLE",
				value1 = "Content Page");
		}

		task ("Change language") {
			PageAudit.changeLocale(locale = "French");

			AssertTextPresent(
				locator1 = "PageAudit#PANEL_PAGE_TITLE",
				value1 = "Principal");

			AssertElementPresent(
				locator1 = "PageAudit#PANEL_PAGE_URL",
				partialURL = "/fr/");
		}
	}

	@description = "LPS-129375: Given the Page Audit panel of a content page
	When the localized canonical URLs options is not enabled and the user changes the language
	Then the URL for that language shows and is consulted"
	@priority = "4"
	test AssertPageAuditLocaleInContentPage {
		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and change locale/language") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelBeforeConfiguration();

			PageAudit.changeLocale(locale = "Finnish");

			AssertElementPresent(
				locator1 = "PageAudit#PANEL_PAGE_URL",
				partialURL = "/fi/");
		}
	}

	@description = "LPS-129375: Given the Page Audit panel of a display page
	When the localized canonical URLs options is not enabled and the user changes the language
	Then the URL for that language shows and is consulted"
	@priority = "4"
	test AssertPageAuditLocaleInDisplayPage {
		task ("Create a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page 2");
		}

		task ("Add an Asset Publisher widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page 2",
				widgetName = "Asset Publisher");
		}

		task ("Add a Web Content vis JSONWS") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page-2");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Go to display page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page-2");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Web Content Title");
		}

		task ("Open Page Audit panel and change locale/language") {
			PageAudit.openPanelBeforeConfiguration();

			PageAudit.changeLocale(locale = "Portuguese");

			AssertElementPresent(
				locator1 = "PageAudit#PANEL_PAGE_URL",
				partialURL = "/pt/");
		}
	}

	@description = "LPS-129375: Given the Page Audit panel of a widget page
	When the localized canonical URLs options is not enabled and the user changes the language
	Then the URL for that language shows and is consulted"
	@priority = "4"
	test AssertPageAuditLocaleInWidgetPage {
		task ("Create Widget Page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name");

			PagesAdmin.addPage(
				pageName = "Widget Page Name",
				sitePageType = "Widget Page");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/3");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and change locale/language") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/3");

			PageAudit.openPanelBeforeConfiguration();

			PageAudit.changeLocale(locale = "Hungarian");

			AssertElementPresent(
				locator1 = "PageAudit#PANEL_PAGE_URL",
				partialURL = "/hu/");
		}
	}

	@description = "LPS-119066: Given the Page Audit Panel
	When the audit is launched (the API is called)
	Then a progress bar shows and moves forward while retrieving the data until they can be shown"
	@priority = "3"
	@uitest
	test AssertProgressBar {
		property test.name.skip.portal.instance = "PageAudit#AssertProgressBar";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaSystemSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

		task ("Open Page Audit panel and assert the progress bar") {
			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Reset Google PageSpeed API to default at System Settings") {
			PageAudit.configurationTeardown();
		}
	}

	@description = "LPS-130621 Given the page audit panel
	When the panel is showing cached data
	Then there's an alert informing about the date and the hour when it was last updated"
	@priority = "3"
	test CachedDataAlert {
		task ("Create second content page") {
			task ("Create content page") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Second Page",
					type = "content");
			}
		}

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaSiteSettings(
				apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE",
				preferredStrategy = "Mobile");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Navigate to second page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/second-page");
		}

		task ("Navigate back to audited page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Assert if warning is displayed") {
			PageAudit.openPanelBeforeConfiguration();

			var currentDate = DateUtil.getFormattedCurrentDate("MMM d, yyyy");

			AssertTextEquals.assertPartialText(
				locator1 = "PageAudit#CACHE_ALERT",
				value1 = "Showing data from ");

			AssertTextEquals.assertPartialText(
				locator1 = "PageAudit#CACHE_ALERT",
				value1 = "Relaunch to update data.");
		}
	}

	@description = "LPS-129375: Given the Page Audit panel of a content page
	When the localized canonical URLs options is enabled and the user changes the language
	Then the matching canonical URL shows and is consulted"
	@priority = "4"
	test CanonicalUrlLocaleInContentPage {
		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(
				canonicalLocale = "fr-FR",
				url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Open Page Audit panel and change locale/language") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelBeforeConfiguration();

			PageAudit.changeLocale(locale = "French");

			AssertElementPresent(
				locator1 = "PageAudit#PANEL_PAGE_URL",
				partialURL = "/page-audit-test");
		}

		task ("Run Page Audit") {
			PageAudit.openPanelAfterConfiguration();
		}

		task ("Check if Page Audit returned expected failures") {
			AssertElementPresent(
				failingCheckCategory = "Accessibility",
				failingCheckName = "Low Contrast Ratio",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");
		}
	}

	@description = "LPS-129375: Given the Page Audit panel of a widget page
	When the localized canonical URLs options is enabled and the user changes the language
	Then the matching canonical URL shows and is consulted"
	@priority = "4"
	test CanonicalUrlLocaleInWidgetPage {
		task ("Create Widget Page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name");

			PagesAdmin.addPage(
				pageName = "Widget Page Name",
				sitePageType = "Widget Page");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/3");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(
				canonicalLocale = "nl-NL",
				pageName = "Widget Page Name",
				url = "https://liferay-tango.github.io/liferay-portal/page-audit-test",
				urlAppend = "web/test-site-name/3");
		}

		task ("Open Page Audit panel and change locale/language") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/3");

			PageAudit.openPanelBeforeConfiguration();

			PageAudit.changeLocale(locale = "Dutch");

			AssertElementPresent(
				locator1 = "PageAudit#PANEL_PAGE_URL",
				partialURL = "/page-audit-test");
		}

		task ("Run Page Audit") {
			PageAudit.openPanelAfterConfiguration();
		}

		task ("Check if Page Audit returned expected failures") {
			AssertElementPresent(
				failingCheckCategory = "Accessibility",
				failingCheckName = "Low Contrast Ratio",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");
		}
	}

	@description = "LPS-134760: Given the Page Audit panel
	When the API key is set but it is not valid
	Then the Page Speed API will show a "Show details" link, that will display the info details of the error, provided by the API."
	@priority = "3"
	test CheckErrorDetailsDisplayedInvalidApiKey {
		property test.name.skip.portal.instance = "PageAudit#CheckErrorDetailsDisplayedInvalidApiKey";

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();

			Refresh();
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaSystemSettings(apiKey = "invalidAPI");

			Alert.viewSuccessMessage();
		}

		task ("Open Page Audit panel and assert 'Show details' link") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			WaitForElementPresent(
				errorTitle = "The API key is invalid.",
				locator1 = "PageAudit#ERROR_WARNING_TITLE");

			Button.click(button = "Show Details");

			AssertElementPresent(
				errorMessage = "API key not valid. Please pass a valid API key.",
				locator1 = "PageAudit#ERROR_WARNING_MESSAGE");
		}

		task ("Reset Google PageSpeed API to default at System Settings") {
			PageAudit.configurationTeardown();
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view
	When there is more than the 60% of the texts on the page with insufficient font sizes
	Then the users will see the matching failing elements, with the size of the illegible font and the percentage of text it covers"
	@priority = "4"
	@uitest
	test CheckIllegibleFontSizes {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckIllegibleFontSizes";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Illegible Font Sizes");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Illegible Font Sizes");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view
	When there are images on the page with a displayed ratio different from the actual one
	Then the users will see the matching failing elements, with its source link and the occurrences separately, and the Displayed Aspect Ratio and the Actual Aspect Ratio for each one of them"
	@priority = "4"
	@uitest
	test CheckIncorrectImageAspectRatio {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckIncorrectImageAspectRatio";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Incorrect Image Aspect Ratios");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Incorrect Image Aspect Ratios");

			AssertElementPresent(
				failingText = "Source File",
				locator1 = "PageAudit#FAILING_ELEMENT_TEXT");

			AssertElementPresent(
				failingText = "Displayed Aspect Ratio",
				locator1 = "PageAudit#FAILING_ELEMENT_TEXT");

			AssertElementPresent(
				failingText = "Actual Aspect Ratio",
				locator1 = "PageAudit#FAILING_ELEMENT_TEXT");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view and a user with permissions to edit Instance Settings
	When there is no canonical URL, or it doesn't coincide with the page's URL
	Then the users will see the invalid canonical URL, and a text with a link to the instance settings: If the problem is that the canonical URL doesn't match the URL of the page, try changing the configuration for using localized canonical URLs from Instance settings > Pages > SEO. "
	@priority = "4"
	@uitest
	test CheckInvalidCanonicalURL {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckInvalidCanonicalURL";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Invalid Canonical URL");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Invalid Canonical URL");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view and a user with NO permissions to edit Instance Settings
	When there is no canonical URL, or it doesn't coincide with the page's URL
	Then the users will see the invalid canonical URL, and a text: If the problem is that the canonical URL doesn't match the URL of the page, try changing the configuration for using localized canonical URLs from Instance settings > Pages > SEO"
	@priority = "4"
	test CheckInvalidCanonicalURLWithoutPermission {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckInvalidCanonicalURL";

		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "WebContentEditorRole Name",
				roleTitle = "WebContentEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.journal.model.JournalArticle",
				roleTitle = "WebContentEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "WebContentEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Open detailed view and check text") {
			PageAudit.goToDetailView(failingCheckName = "Invalid Canonical URL");

			AssertElementPresent(
				key_text = "try changing the configuration for using localized canonical URLs from Instance Settings > Pages > SEO.",
				locator1 = "PageAudit#FAILING_CHECK_DETAIL_TEXT");

			AssertElementNotPresent(
				key_text = "Instance Settings > Pages > SEO",
				locator1 = "Link#ANY");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "WebContentEditorRole Name");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view and a user with permissions for editing the page
	When the page has any invalid hreflang link
	Then the users will see the matching failing elements, with the incorrect hreflang links"
	@priority = "4"
	@uitest
	test CheckInvalidHreflang {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckInvalidHreflang";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Invalid Hreflang");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Invalid Hreflang");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "link");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view
	When there links on the page that are not formatted with the a href attributes or have invalid target URLs
	Then the users will see the matching failing elements, with current link snippet"
	@priority = "4"
	@uitest
	test CheckLinksCrawlable {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckLinksCrawlable";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Not All Links Are Crawlable");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Not All Links Are Crawlable");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "crawlable-anchors");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view and a user with permissions for editing the page
	When the link texts are not title as the link text
	Then the users will see the link text and the link destination URL"
	@priority = "4"
	@uitest
	test CheckLinksTexts {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckLinksTexts";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Link Texts");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Link Texts");

			AssertElementPresent(
				failingText = "Link Text",
				locator1 = "PageAudit#FAILING_ELEMENT_TEXT");

			AssertElementPresent(
				failingText = "Link Destination URL",
				locator1 = "PageAudit#FAILING_ELEMENT_TEXT");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view
	When there are texts on the page with insufficient contrast ratio
	Then the users will see the matching failing elements, with its current ratio, foreground color code, background color code, font size, font weight and expected ratio"
	@priority = "4"
	@uitest
	test CheckLowContrastRatio {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckLowContrastRatio";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Low Contrast Ratio");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Low Contrast Ratio");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "color-contrast");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view
	When there are images on the page with no alt text
	Then the users will see the matching failing elements, and the current code snippet "
	@priority = "4"
	@uitest
	test CheckMissingImgALTAttributes {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckMissingImgALTAttributes";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Missing Img ALT Attributes");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Missing Img ALT Attributes");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "img");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view
	When there are input-type images on the page with no alt text
	Then the users will see the matching failing elements, and the current code snippet"
	@priority = "4"
	@uitest
	test CheckMissingInputALTAttributes {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckMissingInputALTAttributes";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Missing Input ALT Attributes");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Missing Input ALT Attributes");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "input");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view and a user with permissions for editing the page
	When there is no meta description for the page
	Then the users will see a text with a link to the configuration section: Add a meta-description from the Configuration section of this page."
	@priority = "4"
	@uitest
	test CheckMissingMetaDescription {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckMissingMetaDescription";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Missing Meta Description");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Missing Meta Description");

			AssertElementPresent(
				failingText = "Add a description",
				locator1 = "PageAudit#FAILING_ELEMENT_TEXT");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view and a user with NO permissions for editing the page
	When there is no meta description for the page
	Then the users will see a text: Add a meta-description from the Configuration section of this page."
	@priority = "4"
	test CheckMissingMetaDescriptionWithoutPermission {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckInvalidCanonicalURL";

		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "WebContentEditorRole Name",
				roleTitle = "WebContentEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.journal.model.JournalArticle",
				roleTitle = "WebContentEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "WebContentEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Open detailed view and check text") {
			PageAudit.goToDetailView(failingCheckName = "Missing Meta Description");

			AssertElementPresent(
				key_text = "Add a description from the configuration section of this page.",
				locator1 = "PageAudit#FAILING_CHECK_DETAIL_TEXT");

			AssertElementNotPresent(
				key_text = "Add a description",
				locator1 = "Link#ANY");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "WebContentEditorRole Name");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view and a user with permissions for editing the page
	When there is no title for the page
	Then the users will see a text with a link to the configuration section: Add a title from the Configuration section of this page."
	@priority = "4"
	@uitest
	test CheckMissingTitleElement {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckMissingTitleElement";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Missing <title> Element");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Missing <title> Element");

			AssertElementPresent(
				failingText = "Add a title",
				locator1 = "PageAudit#FAILING_ELEMENT_TEXT");
		}
	}

	@description = "LPS-134760: Given the Page Audit panel in a private page
	Then the reload button won't be visible."
	@priority = "3"
	test CheckNotVisibleReloadbButtonInPrivatePage {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a Private Page") {
			JSONLayout.addPrivateLayout(
				groupName = "Test Site Name",
				layoutName = "Private Page Name");
		}

		task ("Go to Private Page") {
			Navigator.gotoPrivateSitePage(
				pageName = "Private Page Name",
				siteName = "Test Site Name");
		}

		task ("Open Page Audit tab and Assert reload button id not present") {
			PageAudit.openPanelBeforeConfiguration();

			IsElementPresent(locator1 = "PageAudit#ERROR_WARNING_BOX");

			IsElementNotPresent(locator1 = "PageAudit#RELAUNCH_PAGE_AUDIT_BUTTON");
		}
	}

	@description = "LPS-132406: Given the Page Audit Panel
	When the users leave the page because the session expires or s/he does log out
	Then they find the panel closed"
	@priority = "3"
	test CheckPageAuditClosedAfterLogout {
		task ("Open Content Performance panel") {
			PageAudit.openPanelBeforeConfiguration();

			AssertVisible(locator1 = "PageAudit#SIDEBAR");
		}

		task ("Logout and login") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("Check if panel is closed") {
			AssertNotVisible(locator1 = "PageAudit#SIDEBAR");
		}
	}

	@description = "LPS-137227 Given a content page	When a user with permissions to edit blogs visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInContentPageWithEditBlogsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "BlogsEditorRole Name",
				roleTitle = "BlogsEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.blogs.model.BlogsEntry",
				roleTitle = "BlogsEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "BlogsEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "BlogsEditorRole Name");
		}
	}

	@description = "LPS-137227 Given a content page When a user with permissions to edit documents visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInContentPageWithEditDocumentsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "DocumentEditorRole Name",
				roleTitle = "DocumentEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
				roleTitle = "DocumentEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "DocumentEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "DocumentEditorRole Name");
		}
	}

	@description = "LPS-137227 Given a content page When the user with permissions to edit pages visits the view mode	Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInContentPageWithEditPagesPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "PagesEditorRole Name",
				roleTitle = "PagesEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "PagesEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "PagesEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "PagesEditorRole Name");
		}
	}

	@description = "LPS-137227 Given a content page	When a user with permissions to edit web content visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInContentPageWithEditWebContentPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "WebContentEditorRole Name",
				roleTitle = "WebContentEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.journal.model.JournalArticle",
				roleTitle = "WebContentEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "WebContentEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "WebContentEditorRole Name");
		}
	}

	@description = "LPS-137227 Given a content page	When a user with NO permissions to edit blogs visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInContentPageWithoutEditBlogsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "BlogsRole Name",
				roleTitle = "BlogsRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "BlogsRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "BlogsRole Name");
		}
	}

	@description = "LPS-137227 Given a content page	When a user with NO permissions to edit documents visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInContentPageWithoutEditDocumentsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "DocumentRole Name",
				roleTitle = "DocumentRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "DocumentRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "DocumentRole Name");
		}
	}

	@description = "LPS-137227 Given a content page	When the user with NO permissions to edit pages visits the view mode Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInContentPageWithoutEditPagesPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "PagesRole Name",
				roleTitle = "PagesRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "PagesRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "PagesRole Name");
		}
	}

	@description = "LPS-137227 Given a content page	When a user with NO permissions to edit web content visits the page	Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInContentPageWithoutEditWebContentPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "WebContentRole Name",
				roleTitle = "WebContentRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "WebContentRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "WebContentRole Name");
		}
	}

	@description = "LPS-137227 Given a display page	When a user with permissions to edit blogs visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInDisplayPageWithEditBlogsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "BlogsEditorRole Name",
				roleTitle = "BlogsEditorRole Name");

			for (var resourceActionIndex : list "UPDATE,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.blogs.model.BlogsEntry",
					roleTitle = "BlogsEditorRole Name");
			}

			JSONRole.assignRoleToUser(
				roleTitle = "BlogsEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Blogs Entry",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Blog Entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Add 'Asset Publisher' to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Blogs Entry Title");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "BlogsEditorRole Name");
		}
	}

	@description = "LPS-137227 Given a display page	When a user with permissions to edit documents visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInDisplayPageWithEditDocumentsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "DocumentEditorRole Name",
				roleTitle = "DocumentEditorRole Name");

			for (var resourceActionIndex : list "UPDATE,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
					roleTitle = "DocumentEditorRole Name");
			}

			JSONRole.assignRoleToUser(
				roleTitle = "DocumentEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Document",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Document");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Document") {
			JSONDocument.addFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title",
				groupName = "Test Site Name");
		}

		task ("Add 'Asset Publisher' to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "DM Document Title");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "DocumentEditorRole Name");
		}
	}

	@description = "LPS-137227 Given a display page	When the user with permissions to edit pages visits the view mode Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInDisplayPageWithEditPagesPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "PagesEditorRole Name",
				roleTitle = "PagesEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "PagesEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "PagesEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Blogs Entry",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Blog Entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Add 'Asset Publisher' to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Blogs Entry Title");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "PagesEditorRole Name");
		}
	}

	@description = "LPS-137227 Given a display page	When a user with permissions to edit web content visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInDisplayPageWithEditWebContentPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "WebContentEditorRole Name",
				roleTitle = "WebContentEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.journal.model.JournalArticle",
				roleTitle = "WebContentEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "WebContentEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content Title",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add 'Asset Publisher' to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Web Content Title");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "WebContentEditorRole Name");
		}
	}

	@description = "LPS-137227 Given a display page	When a user with NO permissions to edit blogs visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInDisplayPageWithoutEditBlogsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "BlogsRole Name",
				roleTitle = "BlogsRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "BlogsRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Blogs Entry",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Blog Entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Add 'Asset Publisher' to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Blogs Entry Title");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "BlogsRole Name");
		}
	}

	@description = "LPS-137227 Given a display page	When a user with NO permissions to edit documents visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInDisplayPageWithoutEditDocumentsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "DocumentRole Name",
				roleTitle = "DocumentRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
				roleTitle = "DocumentRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "DocumentRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Document",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Document");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Document") {
			JSONDocument.addFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title",
				groupName = "Test Site Name");
		}

		task ("Add 'Asset Publisher' to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "DM Document Title");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "DocumentRole Name");
		}
	}

	@description = "LPS-137227 Given a display page When the user with NO permissions to edit pages visits the view mode Then the issue icon for displaying the page audit panel is not shown"
	@priority = "3"
	test CheckPageAuditIconInDisplayPageWithoutEditPagesPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "PagesRole Name",
				roleTitle = "PagesRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "PagesRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Blogs Entry",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Blog Entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Test Site Name");
		}

		task ("Add 'Asset Publisher' to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Blogs Entry Title");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "PagesRole Name");
		}
	}

	@description = "LPS-137227 Given a display page	When a user with NO permissions to edit web content visits the page	Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInDisplayPageWithoutEditWebContentPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "WebContentRole Name",
				roleTitle = "WebContentRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "WebContentRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Create a Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content Title",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add 'Asset Publisher' to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Web Content Title");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "WebContentRole Name");
		}
	}

	@description = "Given a widget page When a user with permissions to edit blogs visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInWidgetPageWithEditBlogsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "BlogsEditorRole Name",
				roleTitle = "BlogsEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.blogs.model.BlogsEntry",
				roleTitle = "BlogsEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "BlogsEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");

			Pause(locator1 = "5000");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "BlogsEditorRole Name");
		}
	}

	@description = "LPS-137227 Given a widget page When a user with permissions to edit documents visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInWidgetPageWithEditDocumentsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "DocumentEditorRole Name",
				roleTitle = "DocumentEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
				roleTitle = "DocumentEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "DocumentEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");

			Pause(locator1 = "5000");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "DocumentEditorRole Name");
		}
	}

	@description = "LPS-137227 Given a widget page When the user with permissions to edit pages visits the view mode Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInWidgetPageWithEditPagesPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "PagesEditorRole Name",
				roleTitle = "PagesEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.portal.kernel.model.Layout",
				roleTitle = "PagesEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "PagesEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");

			Pause(locator1 = "5000");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "PagesEditorRole Name");
		}
	}

	@description = "LPS-137227 Given a widget page When a user with permissions to edit web content visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "4"
	test CheckPageAuditIconInWidgetPageWithEditWebContentPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "WebContentEditorRole Name",
				roleTitle = "WebContentEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.journal.model.JournalArticle",
				roleTitle = "WebContentEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "WebContentEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");

			Pause(locator1 = "5000");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "WebContentEditorRole Name");
		}
	}

	@description = "LPS-137227 Given a widget page When a user with NO permissions to edit blogs visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInWidgetPageWithoutEditBlogsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "BlogsRole Name",
				roleTitle = "BlogsRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "BlogsRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");

			Pause(locator1 = "5000");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "BlogsRole Name");
		}
	}

	@description = "LPS-137227 Given a widget page When a user with NO permissions to edit documents visits the page Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInWidgetPageWithoutEditDocumentsPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "DocumentRole Name",
				roleTitle = "DocumentRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "DocumentRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");

			Pause(locator1 = "5000");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "DocumentRole Name");
		}
	}

	@description = "LPS-137227 Given a widget page When the user with NO permissions to edit pages visits the view mode Then the issue icon for displaying the page audit panel is not shown"
	@priority = "3"
	test CheckPageAuditIconInWidgetPageWithoutEditPagesPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "PagesRole Name",
				roleTitle = "PagesRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "PagesRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "PagesRole Name");
		}
	}

	@description = "LPS-137227 Given a widget page	When a user with NO permissions to edit web content visits the page	Then the issue icon for displaying the page audit panel shows"
	@priority = "3"
	test CheckPageAuditIconInWidgetPageWithoutEditWebContentPermission {
		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "WebContentRole Name",
				roleTitle = "WebContentRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "WebContentRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert if Audit Page icon is not present") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-widget-page-name");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");

			Pause(locator1 = "5000");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "WebContentRole Name");
		}
	}

	@description = "LPS-132406: Given the Page Audit Panel
	When the users leave the page using any of the internal links in the panel (to navigate to System, instance, site or page settings) and return to the page using the 'back' button
	Then they find the panel open"
	@priority = "3"
	test CheckPageAuditOpenAfterNavigation {
		task ("Open Content Performance panel") {
			PageAudit.openPanelBeforeConfiguration();

			PageAudit.connectToGooglePageAudit();
		}

		task ("Logout and login") {
			Click(locator1 = "Icon#BACK");
		}

		task ("Check if panel is closed") {
			AssertElementPresent(locator1 = "PageAudit#CONNECT_TO_GOOGLE_PAGESPEED_BUTTON");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view and a user with permissions for editing the page
	When the page is blocked from indexing
	Then the users will see a text with a link to the configuration section: Change the robots.txt setting from the Configuration section of this page"
	@priority = "4"
	@uitest
	test CheckPageBlockedFromIndexing {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckPageBlockedFromIndexing";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Page Blocked from Indexing");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Page Blocked from Indexing");

			AssertElementPresent(
				failingText = "Change the robots.txt setting",
				locator1 = "PageAudit#FAILING_ELEMENT_TEXT");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view and a user with NO permissions for editing the page
	When the page is blocked from indexing
	Then the users will see a text: Change the robots.txt setting from the Configuration section of this page"
	@priority = "4"
	test CheckPageBlockedFromIndexingWithoutPermission {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckInvalidCanonicalURL";

		task ("Create user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Create role and assign to user") {
			JSONRole.addRegularRole(
				roleKey = "WebContentEditorRole Name",
				roleTitle = "WebContentEditorRole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "UPDATE",
				resourceName = "com.liferay.journal.model.JournalArticle",
				roleTitle = "WebContentEditorRole Name");

			JSONRole.assignRoleToUser(
				roleTitle = "WebContentEditorRole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Disable option to strangers to verify email") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Open detailed view and check text") {
			PageAudit.goToDetailView(failingCheckName = "Page Blocked from Indexing");

			AssertElementPresent(
				key_text = "Change the robots.txt setting from the configuration section of this page.",
				locator1 = "PageAudit#FAILING_CHECK_DETAIL_TEXT");

			AssertElementNotPresent(
				key_text = "Change the robots.txt  setting",
				locator1 = "Link#ANY");
		}

		task ("Delete Role created") {
			JSONRole.deleteRole(roleTitle = "WebContentEditorRole Name");
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view
	When there tap targets on the page that are too small or are overlapping with others
	Then the users will see the matching failing elements, with the tap target snippet, size and Overlapping Target if there is one"
	@priority = "4"
	@uitest
	test CheckSmallTapTargets {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckSmallTapTargets";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Small Tap Targets");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Small Tap Targets");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "a");
		}
	}

	@description = "LPS-128383: Given the preferred strategy dropdown in the Site Scope section
	When the value is void ('Choose an option')
	Then the call is made for Google Page Speed default value - desktop"
	@priority = "3"
	test DefaultStrategyAtInstanceSettings {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#DefaultStrategyAtInstanceSettings";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaInstanceSettings(
				apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE",
				preferredStrategy = "Choose an Option");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Assert if a mobile failure is not shown") {
			AssertElementNotPresent(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");

			AssertElementPresent(
				failingCheckName = "Invalid Canonical URL",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}

		task ("Reset configurations to default") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Pages",
				configurationName = "Google PageSpeed Insights",
				configurationScope = "Site Scope");

			PageAudit.resetDefaultValues();
		}
	}

	@description = "LPS-128385: Given the preferred strategy dropdown in the Site Scope section
	When the value is void ('Choose an option')
	Then the call is made for Google Page Speed default value - desktop"
	@priority = "3"
	test DefaultStrategyAtSiteSettings {
		property portal.acceptance = "true";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaSiteSettings(
				apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE",
				preferredStrategy = "Choose an Option");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Assert if a mobile failure is not shown") {
			AssertElementNotPresent(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");

			AssertElementPresent(
				failingCheckName = "Invalid Canonical URL",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}
	}

	@description = "LPS-125851: Given the preferred strategy dropdown in the Site Scope section
	When the value is void ('Choose an option')
	Then the call is made for Google Page Speed default value - desktop"
	@priority = "3"
	test DefaultStrategyAtSystemSettings {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#DefaultStrategyAtSystemSettings";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaSystemSettings(
				apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE",
				preferredStrategy = "Choose an Option");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Assert if a mobile failure is not shown") {
			AssertElementNotPresent(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");

			AssertElementPresent(
				failingCheckName = "Invalid Canonical URL",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}

		task ("Reset configurations to default") {
			PageAudit.configurationTeardown();
		}
	}

	@description = "LPS-128385: Given the preferred strategy dropdown in the Site Scope section
	When the value is Desktop
	Then additional checks: Small Tap Targets, Incorrect Aspect Ratios and Illegible font sizes are NOT retrieved"
	@priority = "4"
	test DesktopStrategyAtSiteSettings {
		property portal.acceptance = "true";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaSiteSettings(
				apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE",
				preferredStrategy = "Desktop");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Assert if mobile failure are shown") {
			AssertElementNotPresent(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");

			AssertElementPresent(
				failingCheckName = "Invalid Canonical URL",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}
	}

	@description = "LPS-125851: Given the preferred strategy dropdown in the Site Scope section
	When the value is Desktop
	Then additional checks: Small Tap Targets, Incorrect Aspect Ratios and Illegible font sizes are NOT retrieved"
	@priority = "4"
	test DesktopStrategyAtSystemSettings {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#DesktopStrategyAtSystemSettings";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaSystemSettings(
				apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE",
				preferredStrategy = "Desktop");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Assert if a mobile failure is not shown") {
			AssertElementNotPresent(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");

			AssertElementPresent(
				failingCheckName = "Invalid Canonical URL",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}

		task ("Reset configurations to default") {
			PageAudit.configurationTeardown();
		}
	}

	@description = "LPS-132234: Given the page audit panel detail view
	When there are more than 10 failing elements for a single issue
	Then the users can see a Show more button every 10 failing elements, and when they click on it another 10 elements are displayed"
	@priority = "3"
	test DisplayMoreErrors {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckIllegibleFontSizes";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test-10-more-issues.html");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Run Page Audit") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Check the number of failures and view more fails") {
			PageAudit.goToDetailView(failingCheckName = "Illegible Font Sizes");

			AssertElementPresent(
				badgeValue = "12",
				locator1 = "PageAudit#BADGE_NUMBER");

			Button.click(button = "View More");
		}
	}

	@description = "LPS-128383: Given any value in the Instance settings Site scope section
	Then all sites shows the same value (also void fields)"
	@priority = "5"
	test InstanceSettingsHierarchy {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#InstanceSettingsHierarchy";

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaInstanceSettings(
				apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE",
				preferredStrategy = "Mobile");
		}

		task ("Go to Site Settings") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Site Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Pages",
				configurationName = "Google PageSpeed Insights",
				configurationScope = "Site Scope");
		}

		task ("Check if values are the same as Instance Settings") {
			AssertTextEquals(
				locator1 = "PageAudit#API_FIELD",
				value1 = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");

			AssertTextEquals(
				locator1 = "PageAudit#PREFERRED_STRATEGY_OPTION_SELECTED",
				value1 = "Mobile");
		}

		task ("Reset configurations to default") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Pages",
				configurationName = "Google PageSpeed Insights",
				configurationScope = "Site Scope");

			PageAudit.resetDefaultValues();
		}
	}

	@description = "LPS-135681: Given the Page Audit panel when the invalid API Key error is retrieved
	When the user clicks on the Set API Key button
	Then the user navigates to Site settings > Pages > Google PageSpeed Insights tab"
	@priority = "3"
	test InvalidAPIKeyErrorIsRecovered {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#InvalidAPIKeyErrorIsRecovered";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "InvalidAPI");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			WaitForElementPresent(
				errorTitle = "The API key is invalid.",
				locator1 = "PageAudit#ERROR_WARNING_TITLE");
		}

		task ("Navigate to Site Settings") {
			Button.click(button = "Set API Key");

			AssertElementPresent(
				key_breadcrumbName = "Site Settings",
				locator1 = "Breadcrumb#BREADCRUMB_ENTRY");

			MenuBar.viewActive(menuBar = "Google PageSpeed Insights");
		}
	}

	@description = "LPS-130636: Given a site
	When the user visits a page where s/he had opened the Page Audit Panel previously to that visit
	Then the API / cached data is called for the selected language URL and the progress bar shows"
	@priority = "3"
	test LanguageCacheData {
		property portal.acceptance = "true";

		task ("Create second content page") {
			task ("Create content page") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Second Page",
					type = "content");
			}
		}

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaSiteSettings(
				apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE",
				preferredStrategy = "Mobile");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Navigate to second page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/second-page");
		}

		task ("Navigate back to audited page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Assert if cached data is displayed") {
			PageAudit.openPanelBeforeConfiguration();

			AssertElementPresent(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}
	}

	@description = "Given the page audit panel
	When the user clicks the launch button, either the one on the header or the one in the panel
	Then the API is called and the data is retrieved"
	@priority = "4"
	test LaunchPageAudit {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckIllegibleFontSizes";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Run Page Audit") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Check that data is retrieved") {
			AssertVisible(
				failureType = "Accessibility",
				locator1 = "PageAudit#FAILURE_TYPE");

			AssertVisible(
				failureType = "SEO",
				locator1 = "PageAudit#FAILURE_TYPE");
		}
	}

	@description = "LPS-128383: Given the preferred strategy dropdown in the Site Scope section
	When the value is Mobile
	Then additional checks: Small Tap Targets, Incorrect Aspect Ratios and Illegible font sizes are retrieved"
	@priority = "4"
	test MobileStrategyAtInstanceSettings {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#MobileStrategyAtInstanceSettings";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaInstanceSettings(
				apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE",
				preferredStrategy = "Mobile");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Assert if a mobile failure is not shown") {
			AssertElementPresent(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");

			AssertElementPresent(
				failingCheckName = "Illegible Font Sizes",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}

		task ("Reset configurations to default") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Pages",
				configurationName = "Google PageSpeed Insights",
				configurationScope = "Site Scope");

			PageAudit.resetDefaultValues();
		}
	}

	@description = "LPS-128385: Given the preferred strategy dropdown in the Site Scope section
	When the value is Mobile
	Then additional checks: Small Tap Targets, Incorrect Aspect Ratios and Illegible font sizes are retrieved"
	@priority = "4"
	test MobileStrategyAtSiteSettings {
		property portal.acceptance = "true";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaSiteSettings(
				apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE",
				preferredStrategy = "Mobile");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Assert if mobile failure are shown") {
			AssertElementPresent(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");

			AssertElementPresent(
				failingCheckName = "Illegible Font Sizes",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}
	}

	@description = "LPS-125851: Given the preferred strategy dropdown in the Site Scope section
	When the value is Mobile
	Then additional checks: Small Tap Targets, Incorrect Aspect Ratios and Illegible font sizes are retrieved"
	@priority = "4"
	test MobileStrategyAtSystemSettings {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#MobileStrategyAtSystemSettings";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaSystemSettings(
				apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE",
				preferredStrategy = "Mobile");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Assert if mobile failure are shown") {
			AssertElementPresent(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");

			AssertElementPresent(
				failingCheckName = "Illegible Font Sizes",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}

		task ("Reset configurations to default") {
			PageAudit.configurationTeardown();
		}
	}

	@description = "LPS-127668: Given the page audit panel
	When the users access the second level
	Then they can see the title of the issue, the description and tips sections"
	@priority = "4"
	@uitest
	test NavigateToSecondLevel {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#NavigateToSecondLevel";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit panel and navigate to the second level of an issue") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			PageAudit.goToDetailView(failingCheckName = "Low Contrast Ratio");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_CHECK_TITLE",
				value1 = "Low Contrast Ratio");

			AssertTextPresent(
				locator1 = "PageAudit#PANEL_TITLE",
				value1 = "DESCRIPTION");

			AssertTextPresent(
				locator1 = "PageAudit#PANEL_TITLE",
				value1 = "TIPS");

			AssertElementPresent(
				badgeValue = "1",
				locator1 = "PageAudit#BADGE_NUMBER");

			AssertTextPresent(
				locator1 = "PageAudit#FAILING_ELEMENT_NAME",
				value1 = "color-contrast");
		}
	}

	@description = "LPS-135681: Given the Page Audit panel in its initial state (no API Key configured)
	When the user clicks on the Configure button
	Then the user navigates to Site settings > Pages > Google PageSpeed Insights tab"
	@priority = "4"
	test NavigateToSiteSettingsWhenApiKeyNotConfigured {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#NavigateToSiteSettingsWhenApiKeyNotConfigured";

		task ("Open Page Audit panel") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelBeforeConfiguration();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}

		task ("Go to Site settings > Pages throught the 'Configure' button in panel and Assert page") {
			PageAudit.connectToGooglePageAudit();

			AssertElementPresent(
				key_breadcrumbName = "Site Settings",
				locator1 = "Breadcrumb#BREADCRUMB_ENTRY_LINK");

			AssertTextPresent(
				locator1 = "Breadcrumb#BREADCRUMB_ENTRY_ACTIVE_ENTRY",
				value1 = "Pages");

			AssertTextPresent(
				locator1 = "PageAudit#GOOGLE_PAGESPEED_TITLE",
				value1 = "Google PageSpeed Insights");
		}
	}

	@description = "LPS-130621 Given the page audit panel
	When there is a language version of the page that has no cached data and another one that does have
	Then the first one shows the Launch a Page Audit... message, and the other one shows the cached data"
	@priority = "4"
	test OtherLanguageCacheData {
		property portal.acceptance = "true";

		task ("Create second content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Second Page",
				type = "content");
		}

		task ("Set a custom page as canonical URL for first language") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set a custom page as canonical URL for second language") {
			PageAudit.setSEOcanonicalURL(
				canonicalLocale = "pt-BR",
				url = "https://liferay-tango.github.io/liferay-portal/page-audit-test-no-issues");
		}

		task ("Set Google PageSpeed API to first page") {
			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Run Page Audit for first language") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Navigate to second page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/second-page");
		}

		task ("Navigate back to audited page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Check that language has cache data") {
			PageAudit.openPanelBeforeConfiguration();

			AssertVisible(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}

		task ("Change page audit for second language") {
			PageAudit.changeLocale(locale = "Portuguese");
		}

		task ("Check that language has no cache data") {
			AssertVisible(locator1 = "PageAudit#LAUNCH_PAGE_AUDIT_BUTTON");
		}
	}

	@description = "LPS-119068: When the user, after s/he has clicked on the Connect with Page Speed (button) and being led to Site Settings > Pages > Google PageSpeed, clicks on Back button, s/he is led to the page view again"
	@priority = "3"
	test PageAuditBackButton {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageAuditBackButton";

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Add Content Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page",
				type = "content");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Open Page Audit panel") {
			PageAudit.openPanelBeforeConfiguration();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}

		task ("Go to Google PageSpeed throught the button in panel") {
			PageAudit.connectToGooglePageAudit();

			AssertTextPresent(
				locator1 = "PageAudit#GOOGLE_PAGESPEED_TITLE",
				value1 = "Google PageSpeed Insights");
		}

		task ("Go back to the panel throught the back button") {
			PageAudit.backToPageBackButton();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}
	}

	@description = "LPS-119068: When the user, after s/he has clicked on the Connect with Page Speed (button) and being led to Site Settings > Pages > Google PageSpeed, clicks on Cancel button, s/he is led to the page view again"
	@priority = "3"
	test PageAuditCancelButton {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageAuditCancelButton";

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Add Content Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page",
				type = "content");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Open Page Audit panel") {
			PageAudit.openPanelBeforeConfiguration();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}

		task ("Go to Google PageSpeed throught the button in panel") {
			PageAudit.connectToGooglePageAudit();

			AssertTextPresent(
				locator1 = "PageAudit#GOOGLE_PAGESPEED_TITLE",
				value1 = "Google PageSpeed Insights");
		}

		task ("Go back to the panel throught the cancel button") {
			PageAudit.backToPageCancelButton();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}
	}

	@description = "LPS-119068: When the Enable Page Audit check in System Settings is on and a user with permissions to view page visits the view mode of a content page, the issue icon for displaying the page audit panel shows"
	@priority = "5"
	test PageAuditContentPage {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageAuditContentPage";

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Add Content Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page",
				type = "content");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Open Page Audit panel") {
			PageAudit.openPanelBeforeConfiguration();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}

		task ("Go to Google PageSpeed throught the button in panel") {
			PageAudit.connectToGooglePageAudit();

			AssertTextPresent(
				locator1 = "PageAudit#GOOGLE_PAGESPEED_TITLE",
				value1 = "Google PageSpeed Insights");
		}
	}

	@description = "LPS-119068: When the Enable Page Audit check in System Settings is off, the issue icon to display the page audit panel in the content pages doesn't show"
	@priority = "3"
	test PageAuditContentPageDisabled {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageAuditContentPageDisabled";

		task ("Disable Google PageSpeed") {
			PageAudit.disableGooglePageSpeed();
		}

		task ("Add Content Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page",
				type = "content");
		}

		task ("Go to the Content Page and assert the Page Audit panel is not shown") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}
	}

	@description = "LPS-119068: When the Enable Page Audit check in System Settings is on and a user with permissions to view page visits the view mode of a display page, the issue icon for displaying the page audit panel shows"
	@priority = "5"
	test PageAuditDisplayPage {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageAuditDisplayPage";

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add Web Content and check it in its display page") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "WC Title");

			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			LexiconTable.clickTableEntryColumnLink(
				columnName = "title",
				tableEntry = "");
		}

		task ("Open Page Audit panel") {
			PageAudit.openPanelBeforeConfiguration();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}

		task ("Go to Google PageSpeed throught the button in panel") {
			PageAudit.connectToGooglePageAudit();

			AssertTextPresent(
				locator1 = "PageAudit#GOOGLE_PAGESPEED_TITLE",
				value1 = "Google PageSpeed Insights");
		}
	}

	@description = "LPS-119068: When the Enable Page Audit check in System Settings is off, the issue icon to display the page audit panel in the display pages doesn't show"
	@priority = "3"
	test PageAuditDisplayPageDisabled {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageAuditDisplayPageDisabled";

		task ("Disable Google PageSpeed") {
			PageAudit.disableGooglePageSpeed();
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			Button.clickPublish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add Web Content and check it in its display page") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "WC Title");

			ApplicationsMenu.gotoPortlet(
				category = "Content",
				panel = "Applications",
				portlet = "Content Dashboard");

			LexiconTable.clickTableEntryColumnLink(
				columnName = "title",
				tableEntry = "");
		}

		task ("Assert the Page Audit panel is not shown") {
			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}
	}

	@description = "LPS-128385: Given the Google PageSpeed settings tab in the Virtual Instance Scope section
	When the Enable Google PageSpeed Insights check is unchecked
	Then the Page Audit icon won't be visible from the view mode of the pages in the site"
	@priority = "3"
	test PageAuditIconInvisible {
		task ("Check that Page Audit icon is visible") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Disable Google PageSpeed") {
			PageAudit.disableGooglePageSpeedViaSiteSettings();
		}

		task ("Go to site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");
		}

		task ("Check that Page Audit icon is not visible") {
			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}
	}

	@description = "LPS-119068: When the Enable Page Audit check in System Settings is on and a user with permissions to view page visits the view mode of a widget page, the issue icon for displaying the page audit panel shows"
	@priority = "5"
	test PageAuditWidgetPage {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageAuditWidgetPage";

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Add Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Widget Page");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/widget-page");
		}

		task ("Open Page Audit panel") {
			PageAudit.openPanelBeforeConfiguration();

			AssertTextPresent(
				locator1 = "PageAudit#CHECK_ISSUES_TEXT",
				value1 = "Check issues that impact on your page's accessibility and SEO.");
		}

		task ("Go to Google PageSpeed throught the button in panel") {
			PageAudit.connectToGooglePageAudit();

			AssertTextPresent(
				locator1 = "PageAudit#GOOGLE_PAGESPEED_TITLE",
				value1 = "Google PageSpeed Insights");
		}
	}

	@description = "LPS-119068: When the Enable Page Audit check in System Settings is off, the issue icon to display the page audit panel in the widget pages doesn't show"
	@priority = "3"
	test PageAuditWidgetPageDisabled {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageAuditWidgetPageDisabled";

		task ("Disable Google PageSpeed") {
			PageAudit.disableGooglePageSpeed();
		}

		task ("Add Widget Page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Widget Page");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/widget-page");
		}

		task ("Assert the Page Audit panel is not shown") {
			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}
	}

	@description = "LPS-132232: Given the Page Audit Panel
	When the user opens it and there are no failing elements retrieved for any of the checks
	Then a message "Your page has no issues" and the matching image show, the two sections SEO and Accessibility show and they are collapsed by default"
	@priority = "3"
	@uitest
	test PageWithNoIssues {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#PageWithNoIssues";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test-no-issues");
		}

		task ("Enable Google PageSpeed") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Set Google PageSpeed API") {
			PageAudit.setAPIViaSystemSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

		task ("Open Page Audit panel and assert there are no issues") {
			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");

			AssertElementPresent(locator1 = "PageAudit#IMAGE_SUCCESS");

			AssertTextPresent(
				locator1 = "PageAudit#NO_ISSUES_MESSAGE",
				value1 = "Your page has no issues.");
		}

		task ("Reset Google PageSpeed API to default at System Settings") {
			PageAudit.configurationTeardown();
		}
	}

	@description = "LPS-130621 Given the page audit panel
	When the panel is showing no data because the audit has never been launched for that page / language combination
	Then there's an image, a help texts and a button: Launch a Page Audit to check issues that impact on your page’s accessibility and SEO. + Button: Launch Page Audit, and the user is able to launch the audit by the means of clicking the button"
	@priority = "5"
	@uitest
	test PanelInfo {
		property portal.acceptance = "true";

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Open Page Audit sidebar") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelBeforeConfiguration();
		}

		task ("Check that sidebar has an image, a help texts and a button") {
			AssertVisible(locator1 = "PageAudit#IMAGE_DEFAULT");

			AssertTextEquals(
				locator1 = "PageAudit#HELP_TEXT",
				value1 = "Launch a page audit to check issues that impact on your page's accesibility and SEO.");

			AssertVisible(locator1 = "PageAudit#LAUNCH_PAGE_AUDIT_BUTTON");
		}
	}

	@description = "LPS-132234: Given the detail view of the page audit panel
	Then the checks related to Incorrect image-aspect-ratio, Missing meta-description, Invalid Hreflang, Invalid canonical URL, Illegible font sizes,
	Small tap targets, Missing <title> element and Crawlable-anchors will appear under the SEO section"
	@priority = "3"
	test SEOFailures {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#CheckIllegibleFontSizes";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE");
		}

		task ("Run Page Audit") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Check if proper failures are displayed at Accessibility section") {
			AssertElementPresent(
				failingCheckCategory = "SEO",
				failingCheckName = "Invalid Canonical URL",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");

			AssertElementPresent(
				failingCheckCategory = "SEO",
				failingCheckName = "Not All Links Are Crawlable",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");

			AssertElementPresent(
				failingCheckCategory = "SEO",
				failingCheckName = "Illegible Font Sizes",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");

			AssertElementPresent(
				failingCheckCategory = "SEO",
				failingCheckName = "Invalid Hreflang",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");

			AssertElementPresent(
				failingCheckCategory = "SEO",
				failingCheckName = "Incorrect Image Aspect Ratios",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");

			AssertElementPresent(
				failingCheckCategory = "SEO",
				failingCheckName = "Missing Meta Description",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");

			AssertElementPresent(
				failingCheckCategory = "SEO",
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");

			AssertElementPresent(
				failingCheckCategory = "SEO",
				failingCheckName = "Missing <title> Element",
				locator1 = "PageAudit#FAILING_CHECK_CATEGORY_NAME");
		}
	}

	@description = "LPS-128383: Given any value in the Instance settings Site scope section
	When the same value has been overwritten in any of the sites
	Then the value in the site prevails over any changes in the Instance settings"
	@priority = "5"
	test SiteSettingsHierarchyOverInstanceSettings {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#SiteSettingsHierarchyOverInstanceSettings";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API by System Settings") {
			PageAudit.setAPIViaInstanceSettings(
				apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE",
				preferredStrategy = "Desktop");
		}

		task ("Set Google PageSpeed API by Site Settings and selecting a different strategy") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(
				apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE",
				preferredStrategy = "Mobile");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Assert if mobile failures are checked") {
			AssertElementPresent(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");

			AssertElementPresent(
				failingCheckName = "Illegible Font Sizes",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}

		task ("Reset configurations to default") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Pages",
				configurationName = "Google PageSpeed Insights",
				configurationScope = "Site Scope");

			PageAudit.resetDefaultValues();
		}
	}

	@description = "LPS-125851: Given any value in the Site Scope section
	When that value has been overwritten in any of the sites
	Then the value in the site prevails over any changes in the System Settings Site Scope section"
	@priority = "5"
	test SiteSettingsHierarchyOverSystemSettings {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#SiteSettingsHierarchyOverSystemSettings";

		task ("Set a custom page as canonical URL to have data already loaded") {
			PageAudit.setSEOcanonicalURL(url = "https://liferay-tango.github.io/liferay-portal/page-audit-test");
		}

		task ("Set Google PageSpeed API by System Settings") {
			PageAudit.setAPIViaSystemSettings(
				apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE",
				preferredStrategy = "Desktop");
		}

		task ("Set Google PageSpeed API by Site Settings and selecting a different strategy") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.setAPIViaSiteSettings(
				apiKey = "AIzaSyAq-oKsvIhlYHdk1UXCFy63h74ECIgbgbE",
				preferredStrategy = "Mobile");
		}

		task ("Open Page Audit panel and run it") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			PageAudit.openPanelAfterConfiguration(pageName = "Content Page");
		}

		task ("Assert if mobile failures are checked") {
			AssertElementPresent(
				failingCheckName = "Small Tap Targets",
				locator1 = "PageAudit#FAILING_CHECK_NAME");

			AssertElementPresent(
				failingCheckName = "Illegible Font Sizes",
				locator1 = "PageAudit#FAILING_CHECK_NAME");
		}

		task ("Reset configurations to default") {
			PageAudit.configurationTeardown();
		}
	}

	@description = "LPS-128383: Given the Google PageSpeed settings tab in the Site Scope section
	When the Enable Google PageSpeed Insights check is unchecked
	Then the 'Google PageSpeed Insights' tab is visible from the Site settings of any of the sites in the instance, and it is unchecked for all those sites"
	@priority = "3"
	test UncheckedInstanceSettingsSiteScopeThenUncheckedAtSiteSettings {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#UncheckedInstanceSettingsSiteScopeThenUncheckedAtSiteSettings";

		task ("Uncheck PageSpeed at Instance Settings") {
			PageAudit.disableGooglePageSpeedViaInstanceSettings(scope = "Site Scope");
		}

		task ("Navigate to Site Settings and check if tab is not visible") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Site Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Pages",
				configurationName = "Google PageSpeed Insights",
				configurationScope = "Site Scope");

			AssertNotChecked.assertNotCheckedNotVisible(
				checkboxName = "Enable",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("Reset Instance Settings to default") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Pages",
				configurationName = "Google PageSpeed Insights",
				configurationScope = "Site Scope");

			PageAudit.resetDefaultValues();
		}
	}

	@description = "LPS-128383: Given the Google PageSpeed settings tab in the Virtual Instance Scope section
	When the Enable Google PageSpeed Insights check is unchecked
	Then the 'Google PageSpeed Insights' tab won't be visible in the 'SITE SCOPE' section"
	@ignore = "true"
	@priority = "3"
	test UncheckedInstanceSettingsVirtualInstanceThenNotVisibleAtSiteScope {

		// TODO LPS-128383 - Not possible to automate now LPS-135167

	}

	@description = "LPS-128383: Given the Google PageSpeed settings tab in the Virtual Instance Scope section
	When the Enable Google PageSpeed Insights check is unchecked
	Then the 'Google PageSpeed Insights' tab won't be visible from the Site settings of any of the sites in the instance"
	@priority = "3"
	test UncheckedInstanceSettingsVirtualInstanceThenNotVisibleAtSiteSettings {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#UncheckedInstanceSettingsVirtualInstanceThenNotVisibleAtSiteSettings";

		task ("Uncheck PageSpeed at Instance Settings") {
			PageAudit.disableGooglePageSpeedViaInstanceSettings();
		}

		task ("Navigate to Site Settings and check if tab is not visible") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Site Settings");

			Click(
				key_itemName = "Pages",
				locator1 = "ListGroupItem#ITEM_TEXT");

			AssertElementNotPresent(
				key_configurationName = "Google PageSpeed Insights",
				key_configurationScope = "Site Scope",
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
		}

		task ("Reset Instance Settings to default") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Pages",
				configurationName = "Google PageSpeed Insights",
				configurationScope = "Virtual Instance Scope");

			PageAudit.resetDefaultValues();
		}
	}

	@description = "LPS-128383: Given the Google PageSpeed settings tab in the Virtual Instance Scope section
	When the Enable Google PageSpeed Insights check is unchecked
	Then the Page Audit icon won't be visible from the view mode of the pages of any of the sites in the instance"
	@priority = "3"
	test UncheckedInstanceSettingsVirtualInstanceThenNotVisiblePageAuditIcon {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#UncheckedInstanceSettingsVirtualInstanceThenNotVisiblePageAuditIcon";

		task ("Uncheck PageSpeed at Instance Settings") {
			PageAudit.disableGooglePageSpeedViaInstanceSettings();
		}

		task ("Navigate to Site and check if icon is not visible") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			AssertElementNotPresent(locator1 = "PageAudit#PAGE_AUDIT_BUTTON");
		}

		task ("Reset Instance Settings to default") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Pages",
				configurationName = "Google PageSpeed Insights",
				configurationScope = "Virtual Instance Scope");

			PageAudit.resetDefaultValues();
		}
	}

	@description = "LPS-125851: Given the Google PageSpeed settings tab in the 'SITE SCOPE' section
	When the Enable Google PageSpeed Insights check is unchecked
	Then the 'Google PageSpeed Insights' tab is visible from the Site settings of any of the sites in the instance, and it is unchecked for all those sites"
	@priority = "3"
	test UncheckedSystemSettingsSiteScopeThenUncheckedAtTabSiteSettings {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#UncheckedSystemSettingsSiteScopeThenUncheckedAtTabSiteSettings";

		task ("Disable Google PageSpeed settings tab in the System Scope section") {
			PageAudit.disableGooglePageSpeed(settingsScope = "Site Scope");
		}

		task ("Navigate to Site Settings and check if tab is not visible") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Site Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Pages",
				configurationName = "Google PageSpeed Insights",
				configurationScope = "Site Scope");

			AssertNotChecked.assertNotCheckedNotVisible(
				checkboxName = "Enable",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("Disable Google PageSpeed settings tab in the System Scope section") {
			PageAudit.enableGooglePageSpeed(settingsScope = "Site Scope");
		}

		task ("Navigate to Site Settings and check if tab is not visible") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Site Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Pages",
				configurationName = "Google PageSpeed Insights",
				configurationScope = "Site Scope");

			AssertChecked.assertCheckedNotVisible(
				checkboxName = "Enable",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
	}

	@description = "LPS-128383: Given the PageSpeed Insights settings in the System Settings
	When Google PageSpeed Insights is not enabled (unchecked)
	Then the tab Google PageSpeed Insights is not visible from Instance settings"
	@priority = "4"
	test UncheckedSystemSettingsSystemScopeThenNotVisibleAtInstanceSettings {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#UncheckedSystemSettingsSystemScopeThenNotVisibleAtInstanceSettings";

		task ("Disable Google PageSpeed settings tab in the System Scope section in System Settings") {
			PageAudit.disableGooglePageSpeed(settingsScope = "System Scope");
		}

		task ("Go to Instance Settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			Click(
				key_itemName = "Pages",
				locator1 = "ListGroupItem#ITEM_TEXT");
		}

		task ("Check if PageSpeed tabs are not visible in Instance Settings") {
			AssertElementNotPresent(
				key_configurationName = "Google PageSpeed Insights",
				key_configurationScope = "Virtual Instance Scope",
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");

			AssertElementNotPresent(
				key_configurationName = "Google PageSpeed Insights",
				key_configurationScope = "Site Scope",
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
		}

		task ("Enable Google PageSpeed settings tab in the System Scope section") {
			PageAudit.enableGooglePageSpeed(settingsScope = "System Scope");
		}
	}

	@description = "LPS-125851: Given the Google PageSpeed settings tab in the System Scope section
	When the Enable Google PageSpeed Insights check is unchecked
	Then the 'Google PageSpeed Insights' tab isn't visible in the 'SITE SCOPE' section "
	@priority = "3"
	test UncheckedSystemSettingsSystemScopeThenNotVisibleAtSiteScope {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#UncheckedSystemSettingsSystemScopeThenNotVisibleAtSiteScope";

		task ("Disable Google PageSpeed settings tab in the System Scope section") {
			PageAudit.disableGooglePageSpeed(settingsScope = "System Scope");
		}

		task ("Check if Google PageSpeed Insights tab isn't visible in the 'VIRTUAL INSTANCE SCOPE' section") {
			AssertElementNotPresent(
				key_configurationName = "Google PageSpeed Insights",
				key_configurationScope = "Site Scope",
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
		}

		task ("Enable Google PageSpeed settings tab in the System Scope section") {
			PageAudit.enableGooglePageSpeed(settingsScope = "System Scope");
		}

		task ("Check if Google PageSpeed Insights tab is visible in the 'VIRTUAL INSTANCE SCOPE' section") {
			AssertElementPresent(
				key_configurationName = "Google PageSpeed Insights",
				key_configurationScope = "Site Scope",
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
		}
	}

	@description = "LPS-125851: Given the Google PageSpeed settings tab in the System Scope section
	When the Enable Google PageSpeed Insights check is unchecked
	Then the 'Google PageSpeed Insights' tab isn't visible in the 'VIRTUAL INSTANCE SCOPE' section"
	@priority = "3"
	test UncheckedSystemSettingsSystemScopeThenNotVisibleAtVirtualInstance {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#UncheckedSystemSettingsSystemScopeThenNotVisibleAtVirtualInstance";

		task ("Disable Google PageSpeed settings tab in the System Scope section") {
			PageAudit.disableGooglePageSpeed(settingsScope = "System Scope");
		}

		task ("Check if Google PageSpeed Insights tab isn't visible in the 'VIRTUAL INSTANCE SCOPE' section") {
			AssertElementNotPresent(
				key_configurationName = "Google PageSpeed Insights",
				key_configurationScope = "Virtual Instance Scope",
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
		}

		task ("Enable Google PageSpeed settings tab in the System Scope section") {
			PageAudit.enableGooglePageSpeed(settingsScope = "System Scope");
		}

		task ("Check if Google PageSpeed Insights tab is visible in the 'VIRTUAL INSTANCE SCOPE' section") {
			AssertElementPresent(
				key_configurationName = "Google PageSpeed Insights",
				key_configurationScope = "Virtual Instance Scope",
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
		}
	}

	@description = "LPS-125851: Given the Google PageSpeed settings tab in the Virtual Instance Scope section
	When the Enable Google PageSpeed Insights check is unchecked
	Then the 'Google PageSpeed Insights' tab isn't visible in the Site settings of any of the sites of the current Instance."
	@priority = "3"
	test UncheckedSystemSettingsVirtualInstanceThenNotVisibleAtTabSiteSettings {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#UncheckedSystemSettingsVirtualInstanceThenNotVisibleAtTabSiteSettings";

		task ("Disable Google PageSpeed settings tab in the System Scope section") {
			PageAudit.disableGooglePageSpeed();
		}

		task ("Navigate to Site Settings and check if tab is not visible") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Site Settings");

			Click(
				key_itemName = "Pages",
				locator1 = "ListGroupItem#ITEM_TEXT");

			AssertElementNotPresent(
				key_configurationName = "Google PageSpeed Insights",
				key_configurationScope = "Site Scope",
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
		}

		task ("Enable Google PageSpeed settings tab in the System Scope section") {
			PageAudit.enableGooglePageSpeed();
		}

		task ("Navigate to Site Settings and check if tab is visible") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/content-page");

			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Site Settings");

			Click(
				key_itemName = "Pages",
				locator1 = "ListGroupItem#ITEM_TEXT");

			AssertElementPresent(
				key_configurationName = "Google PageSpeed Insights",
				key_configurationScope = "Site Scope",
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
		}
	}

	@description = "LPS-125851: Given the Google PageSpeed settings tab in the Virtual Instance Scope section
	When the Enable Google PageSpeed Insights check is unchecked
	Then the 'Google PageSpeed Insights' tab is visible in the 'SITE SCOPE' section "
	@priority = "3"
	test UncheckedSystemSettingsVirtualInstanceThenVisibleAtSiteScope {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "PageAudit#UncheckedSystemSettingsVirtualInstanceThenVisibleAtSiteScope";

		task ("Disable Google PageSpeed settings tab in the System Scope section") {
			PageAudit.disableGooglePageSpeed(settingsScope = "Virtual Instance Scope");
		}

		task ("Check if Google PageSpeed Insights tab isn't visible in the 'VIRTUAL INSTANCE SCOPE' section") {
			AssertElementPresent(
				key_configurationName = "Google PageSpeed Insights",
				key_configurationScope = "Site Scope",
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
		}

		task ("Enable Google PageSpeed settings tab again") {
			Click.javaScriptClick(
				checkboxName = "Enable",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("Check if Google PageSpeed Insights tab is visible in the 'VIRTUAL INSTANCE SCOPE' section") {
			AssertElementPresent(
				key_configurationName = "Google PageSpeed Insights",
				key_configurationScope = "Site Scope",
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
		}
	}

}