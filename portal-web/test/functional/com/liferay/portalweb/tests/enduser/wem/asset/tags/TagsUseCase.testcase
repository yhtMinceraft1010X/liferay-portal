@component-name = "portal-tags"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Tags";
	property testray.main.component.name = "Tags";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Add a Front Page with tag."
	@priority = "4"
	test AddFrontPageTag {
		property testray.component.names = "Wiki";

		task ("Add a Wiki widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Wiki");
		}

		task ("Add a Front Page with tag") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WikiPage.addFrontPagePG(
				pageAddTag = "true",
				tagNameList = "wiki tag name",
				wikiPageContent = "Wiki FrontPage Content");
		}
	}

	@description = "Add multiple tags via Blogs widget."
	@priority = "4"
	@uitest
	test AddMultipleTagsViaBlogs {
		property portal.acceptance = "true";
		property testray.component.names = "Blogs";

		task ("Add a Blogs widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Blogs");
		}

		task ("Add a blogs entry with three auto assertion tags via Blogs widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Blogs.addEntryWithTags(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				tagNameList = "tag name 1,tag name 2,tag name 3");
		}

		task ("View tag are shown in Blogs widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			BlogsEntry.viewTagPG(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				tagNameList = "tag name 1,tag name 2,tag name 3");
		}
	}

	@description = "Add an auto assertion tag via blogs widget."
	@priority = "4"
	test AddSingleTagViaBlogs {
		property portal.acceptance = "true";
		property testray.component.names = "Blogs";

		task ("Add three tags") {
			for (var tagName : list "tag name 1,tag name 2,tag name 3") {
				JSONAssettag.addTag(
					groupName = "Test Site Name",
					tagName = "${tagName}");
			}
		}

		task ("Add a Blogs widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Blogs");
		}

		task ("Add a blogs entry with an auto assertion tag via Blogs widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Tag.addAutoAssertionTagViaBlogsPG(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				tagName = "tag name 3");
		}

		task ("View tag is shown in Blogs widget") {
			BlogsEntry.viewTagPG(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				tagNameList = "tag name 3");
		}
	}

	@description = "View tags with cloud display template in Tag Filter widget."
	@priority = "5"
	test DisplayTagCloudTemplate {
		property portal.acceptance = "true";

		task ("Add a Tag Filter to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Tag Filter");
		}

		task ("Configure Tag Filter widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			TagsNavigationPortlet.configureFlaggableSettingsPG(
				showAssetCount = "true",
				showUnusedTags = "true");
		}

		task ("Configure Clould as display template") {
			IFrame.closeFrame();

			TagsNavigationPortlet.configureDisplayStylePG(displayTemplate = "Cloud");
		}

		task ("Add an Asset Publisher to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Add three tags") {
			for (var i : list "1,2,3") {
				JSONAssettag.addTag(
					groupName = "Test Site Name",
					tagName = "tagname${i}");
			}
		}

		task ("Add a web content with first and second tag") {
			JSONWebcontent.addWebContent(
				assetTagNames = "tagname1,tagname2",
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a document with first tag") {
			JSONDocument.addFileWithUploadedFile(
				assetTagNames = "tagname1",
				dmDocumentTitle = "DM Document Title",
				groupName = "Test Site Name",
				mimeType = "text/plain",
				sourceFileName = "Document_1.txt");
		}

		task ("View cloud tags are shown in Tag Filter") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			TagsNavigationPortlet.viewTagCloud(
				tagName = "tagname1 (2)",
				tagPopularityLevel = "6");

			TagsNavigationPortlet.viewTagCloud(
				tagName = "tagname2 (1)",
				tagPopularityLevel = "3");

			TagsNavigationPortlet.viewTagCloud(
				tagName = "tagname3 (0)",
				tagPopularityLevel = "1");
		}
	}

	@description = "View tags with number display template in Tag Filter widget."
	@priority = "3"
	test DisplayTagNumberTemplate {
		task ("Add a Tag Filter to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Tag Filter");
		}

		task ("Configure the display template to Number") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			TagsNavigationPortlet.configureDisplayStylePG(displayTemplate = "Number");
		}

		task ("Configure the Tag Filter to display asset count") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			TagsNavigationPortlet.configureFlaggableSettingsPG(showAssetCount = "true");
		}

		task ("Add an Asset Publisher to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Add a web content with first and second tag") {
			JSONWebcontent.addWebContent(
				assetTagNames = "tagname1,tagname2",
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a document with first tag") {
			JSONDocument.addFileWithUploadedFile(
				assetTagNames = "tagname1",
				dmDocumentTitle = "DM Document Title",
				groupName = "Test Site Name",
				mimeType = "text/plain",
				sourceFileName = "Document_1.txt");
		}

		task ("View the usages of tags") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			TagsNavigationPortlet.clickTagView(
				tagAssetCount = "tagname1 (2)",
				tagName = "tagname1");

			TagsNavigationPortlet.clickTagView(
				tagAssetCount = "tagname2 (1)",
				tagName = "tagname2");
		}
	}

	@description = "The Tag Filter widget could display unused tags."	
	@priority = "3"
	test DisplayUnusedTags {
		task ("Add three tags") {
			for (var i : list "1,2,3") {
				JSONAssettag.addTag(
					groupName = "Test Site Name",
					tagName = "tagname${i}");
			}
		}

		task ("Add a Tag Filter to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Tag Filter");
		}

		task ("Configure the Tag Filter to display unused tags") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			TagsNavigationPortlet.configureFlaggableSettingsPG(showUnusedTags = "true");

			IFrame.closeFrame();
		}

		task ("View unused tags are shown") {
			TagsNavigationPortlet.viewDefaultPG(tagNameList = "tagname1,tagname2,tagname3");
		}
	}

	@description = "The user could remove selected tag via Blogs."
	@priority = "3"
	test RemoveSelectedTagViaBlogs {
		property portal.acceptance = "true";
		property testray.component.names = "Blogs,Tags";

		task ("Add a Blogs widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Blogs");
		}

		task ("Add a Blogs Entry with three tags") {
			HeadlessBlog.addBlogEntry(
				assetTagNames = "tagname1,tagname2,tagname3",
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("View tags are shown in blogs widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			BlogsEntry.viewTagPG(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				tagNameList = "tagname1,tagname2,tagname3");
		}

		task ("Remove the first and third tag in Blogs Entry") {
			BlogsNavigator.gotoEditPG(entryTitle = "Blogs Entry Title");

			Panel.expandPanel(panel = "Categorization");

			for (var i : list "1,3") {
				AssetCategorization.removeTag(tagName = "tagname${i}");
			}

			PortletEntry.publish();
		}

		task ("View first and third tag are not shown") {
			BlogsNavigator.gotoEntryPG(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");

			BlogsEntry.viewTagNotPresentPG(
				entryTitle = "Blogs Entry Title",
				tagNameList = "tagname1,tagname3");
		}
	}

	@description = "The user can search for multiple tags via Blogs widget."
	@priority = "3"
	test SearchTagsViaBlogs {
		property testray.component.names = "Blogs";

		task ("Add a Blogs widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Blogs");
		}

		task ("Add a page based on Search temlate") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.addPage(
				pageName = "search",
				pageTemplateName = "Search");
		}

		task ("Add thre Blogs entry with different tags") {
			var i = "1";

			for (var tagName : list "blue,green,yellow") {
				HeadlessBlog.addBlogEntry(
					assetTagNames = "${tagName}",
					content = "Blogs Entry Content ${i}",
					groupName = "Test Site Name",
					title = "Blogs Entry Title ${i}");

				var i = ${i} + 1;
			}
		}

		task ("Search for the Blogs entry with the tag as parameter") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			var i = "1";

			for (var searchTerm : list "blue,green,yellow") {
				SearchPortlets.searchEmbedded(searchTerm = "${searchTerm}");

				SearchResultPortlet.viewSearchResults(
					searchAssetTitle = "Blogs Entry Title ${i}",
					searchAssetType = "Blogs Entry");

				var i = ${i} + 1;
			}
		}
	}

	@description = "View default display template in Tag Cloud widget."
	@priority = "5"
	@uitest
	test ViewTagCloudDisplayConfiguration {
		property portal.acceptance = "true";

		task ("Add a Tag Cloud widget to page") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Portlet.addPG(portletName = "Tag Cloud");
		}

		task ("View default display tempalte in Tag Cloud") {
			TagsNavigationPortlet.viewTagCloudConfiguration(displayTemplate = "Cloud");
		}
	}

	@description = "The user can increase tags with cloud display template."
	@priority = "5"
	test ViewTagCloudIncrease {
		property portal.acceptance = "true";

		task ("Add a Tag Filter to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Tag Filter");
		}

		task ("Configure Tag Filter widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			TagsNavigationPortlet.configureFlaggableSettingsPG(
				showAssetCount = "true",
				showUnusedTags = "true");
		}

		task ("Configure Clould as display template") {
			IFrame.closeFrame();

			TagsNavigationPortlet.configureDisplayStylePG(displayTemplate = "Cloud");
		}

		task ("Add an Asset Publisher to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Add three tags") {
			for (var i : list "1,2,3") {
				JSONAssettag.addTag(
					groupName = "Test Site Name",
					tagName = "tagname${i}");
			}
		}

		task ("Add a web conten with first and second tag") {
			JSONWebcontent.addWebContent(
				assetTagNames = "tagname1,tagname2",
				content = "Web Content Content 1",
				groupName = "Test Site Name",
				title = "Web Content Title 1");
		}

		task ("Add a document with first tag") {
			JSONDocument.addFileWithUploadedFile(
				assetTagNames = "tagname1",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "text/plain",
				sourceFileName = "Document_1.txt");
		}

		task ("View tag numbers are shown with cloud template") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			TagsNavigationPortlet.viewTagCloud(
				tagName = "tagname1 (2)",
				tagPopularityLevel = "6");

			TagsNavigationPortlet.viewTagCloud(
				tagName = "tagname2 (1)",
				tagPopularityLevel = "3");
		}

		task ("Add a new web content with first and second tag") {
			JSONWebcontent.addWebContent(
				assetTagNames = "tagname1,tagname2",
				content = "Web Content Content 2",
				groupName = "Test Site Name",
				title = "Web Content Title 2");
		}

		task ("View updated tag numbers are shown with cloud template") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			TagsNavigationPortlet.viewTagCloud(
				tagName = "tagname1 (3)",
				tagPopularityLevel = "6");

			TagsNavigationPortlet.viewTagCloud(
				tagName = "tagname2 (2)",
				tagPopularityLevel = "4");
		}
	}

}