@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Administration";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Organization.tearDownCP();

			Site.tearDownCP();

			UserGroup.tearDownCP();

			JSONUser.tearDownNonAdminUsers();
		}
	}

	@description = "This is a use case for LPS-124620. Assert no pop up when viewing membership request detail."
	@priority = "4"
	test AddXSSRequestMembershipComment {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property testray.component.names = "Site Administration,XSS";

		task ("Add a site") {
			JSONGroup.addGroup(
				groupName = "Site Name",
				membershipType = "Restricted");
		}

		task ("Add a My Sites widget to Liferay Home page and add view permission to it") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Home",
				siteName = "Guest");

			PageEditor.addWidget(
				portletName = "My Sites",
				targetFragmentName = "Grid");

			Portlet.gotoPortletOptions(
				portletName = "My Sites",
				portletOption = "Permissions");

			IFrame.selectPermissionsFrame();

			Check(
				key_roleTitle = "user",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			PortletEntry.save();

			Alert.viewSuccessMessage();

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Add a user and login with the user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			User.logoutPG();

			User.loginUserPG(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add XSS comment") {
			Site.joinViaMySitesPG(
				membershipType = "Restricted",
				memebershipComment = "<html><script>alert('test');</script></html>",
				siteName = "Site Name",
				userRole = "Guest");
		}

		task ("Approve user's membership request") {
			User.logoutPG();

			User.loginPG(
				password = "test",
				userEmailAddress = "test@liferay.com");

			Site.openSiteMembershipsAdmin(siteURLKey = "site-name");

			Site.approveJoinSiteRestrictedViaMySitesPG(
				memebershipComment = "<html><script>alert('test');</script></html>",
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("View membership request detail and assert no alert") {
			Navigator.gotoNavItem(navItem = "Approved");

			LexiconEntry.changeDisplayStyle(displayStyle = "cards");

			Click(
				key_card = "userfn userln",
				locator1 = "Card#CARD_TITLE");

			AssertAlertNotPresent();
		}
	}

	@description = "This is a test for LPS-135079. View no pop up when select user card with XSS name in memberships."
	@priority = "4"
	test SelectUserWithXSSNameInMemberships {
		var firstName = '''"><script>alert(1)</script>''';

		var lastName = '''"><script>alert(2)</script>''';

		task ("Add a user with XSS name") {
			User.openUsersAdmin();

			User.addCP(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "${firstName}",
				userLastName = "${lastName}",
				userScreenName = "usersn");
		}

		task ("Assign the new user as member") {
			Site.openSiteMembershipsAdmin(siteURLKey = "test-site-name");

			Site.assignUserAsMemberCP(
				userFirstName = "${firstName}",
				userLastName = "${lastName}",
				userScreenName = "usersn");
		}

		task ("View alert not shown when select user card") {
			LexiconCard.checkCardCheckbox(card = "${firstName} ${lastName}");

			AssertAlertNotPresent();
		}
	}

}