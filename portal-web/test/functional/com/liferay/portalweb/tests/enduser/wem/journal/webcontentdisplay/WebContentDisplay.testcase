@component-name = "portal-wcd"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Web Content Display";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add a Web Content Display widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Add a draft web content via web content display widget."
	@priority = "4"
	test AddDraftWebContent {
		task ("Add a draft web content via Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.addDraft(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("View web content is shown as draft") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.viewMessage(draftWebContentTitle = "Web Content Title");
		}
	}

	@description = "View web content is shown in Web Content Display after be added via content panel."
	@priority = "5"
	test AddRecentContentViaContentPanel {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name 1");
		}

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add the web content to page via Content tab of Add panel") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name 1",
				siteName = "Test Site Name");

			WidgetPages.addRecentContent(assetTitle = "Web Content Title");
		}

		task ("View web content is shown in Web Content Display") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "Add a web content via web content display widget."
	@priority = "5"
	test AddWebContent {
		property portal.acceptance = "true";

		task ("Add a web content via Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.add(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("View web content is shown Web Content Display") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "Add a web content and associate a page scope in Web Content Display widget."
	@priority = "3"
	test AddWebContentUnderPageScope {
		task ("Add two widget pages") {
			for (var i : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${i}");
			}
		}

		task ("Add a Web Content Display widget to pages") {
			for (var i : list "1,2") {
				JSONLayout.addWidgetToPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${i}",
					widgetName = "Web Content Display");
			}
		}

		task ("Select first page as scope for both Web Content Display") {
			for (var i : list "1,2") {
				Navigator.gotoSitePage(
					pageName = "Test Page Name ${i}",
					siteName = "Test Site Name");

				WebContentDisplayPortlet.configureScope(scopeSelection = "Test Page Name 1");
			}
		}

		task ("View first page is shown as scope for both Web Content Display") {
			for (var i : list "1,2") {
				Navigator.gotoSitePage(
					pageName = "Test Page Name ${i}",
					siteName = "Test Site Name");

				WebContentDisplayPortlet.viewConfigureScope(scopeSelection = "Test Page Name 1");
			}
		}

		task ("Add a web content via Web Content Display in the first page") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name 1",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.add(
				portletNameScoped = "Web Content Display (Test Page Name 1)",
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("View web content is shown in the first page") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Display (Test Page Name 1)");
		}

		task ("View web content is not shown in the second page") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name 2",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.viewMessage();
		}

		task ("View web content is shown after selected in the second page") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();

			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Display (Test Page Name 1)");
		}
	}

	@description = "This is a use case for LPS-70386. View a web content with portlet URL in Web Content Display."
	@priority = "5"
	test AddWebContentWithPortletURL {
		property portal.acceptance = "true";

		task ("Add a web content with a portlet URL") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(webContentTitle = "Web Content Title");

			var portalURL = PropsUtil.get("portal.url");

			CKEditor.addSourceContent(content = '''<p><span><a href="${portalURL}/web/test-site-name/test-page-name/-/testportlet">text</a></span></p>''');

			PortletEntry.publish();
		}

		task ("View web content title is shown") {
			WebContent.viewTitle(webContentTitle = "Web Content Title");
		}

		task ("Select the web content in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("View test portlet is shown after click in the link") {
			WebContentDisplayPortlet.viewContent(
				displayText = "text",
				url = "/web/test-site-name/test-page-name/-/testportlet",
				webContentTitle = "Web Content Title");

			Portlet.viewTitle(portletName = "testportlet");
		}
	}

	@description = "Add a web content article with a custom DDM structure and template and display it in the web content display widget."
	@priority = "5"
	test AddWithStructure {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Add a web content structure with a single line Text field and a multiple lines Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			DataEngine.addField(
				fieldFieldLabel = "Text Box",
				fieldLocation = "2",
				fieldName = "Text",
				fieldType = "Multiple Lines");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateFile = "wc_template.ftl",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure via Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			var content = '''Hello World
Welcome to Liferay Community Edition Portal 7.4.0 CE GA1''';

			WebContentDisplayPortlet.add(
				fieldLabelList = "Text,Text Box",
				structureName = "WC Structure Name",
				webContentTextMultipleLines = "${content}",
				webContentTextSingleLine = "WC WebContent Text",
				webContentTitle = "WC WebContent Title");
		}

		task ("View the displayed content in Web Content Display") {
			AssertTextEquals(
				locator1 = "//div[contains(@class,journal-content-article)]//h1[contains(@class,'text')]",
				value1 = "WC WebContent Text");

			AssertTextEquals(
				locator1 = "//div[contains(@class,journal-content-article)]//h2[contains(@class,'text-box')]",
				value1 = "Hello World Welcome to Liferay Community Edition Portal 7.4.0 CE GA1");
		}

		task ("View defined contents in web content editor") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.viewWithStructureCP(
				webContentText = "WC WebContent Text",
				webContentTitle = "WC WebContent Title");

			takeScreenshot();

			WebContent.viewWithStructureCP(
				fieldType = "Multiple Lines",
				predefinedValue = "true",
				webContentText = "${content}",
				webContentTextFieldLabel = "Text Box");
		}
	}

	@description = "Change a web content template via Web Content Display widget."
	@priority = "4"
	test ChangeTemplate {
		task ("Add a web content template with three content fields") {
			WebContentTemplates.openWebContentTemplatesAdmin(siteURLKey = "test-site-name");

			WebContentTemplates.addCP(
				structureName = "Basic Web Content",
				templateFieldNames = "Content,Content,Content",
				templateName = "Second Basic Template");
		}

		task ("Add a web content via Web Content Display based on second basic template") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.add(
				templateName = "Second Basic Template",
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("View web content is shown in Web Content Display") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content Web Content Content Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("Change the web content template") {
			WebContentDisplayPortletNavigator.gotoEdit(
				menuItem = "Edit Web Content",
				webContentTitle = "Web Content Title");

			WebContent.selectTemplateCP(
				structureName = "Basic Web Content",
				templateName = "Basic Web Content");

			PortletEntry.publish();
		}

		task ("View web content is shown in Web Content Display") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "This is a test for LPS-129438. The user could configure the border styles of WCD."
	@priority = "4"
	@uitest
	test ConfigureBorderStyles {
		task ("View the default border width and border color of WCD") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				key_portletName = "Web Content Display",
				locator1 = "Portlet#TITLE");

			for (var borderType : list "top,right,bottom,left") {
				AssertCssValue(
					locator1 = "Portlet#PORTLET_CONTENT",
					locator2 = "border-${borderType}-width",
					value1 = "1px");
			}

			for (var borderType : list "top,right,bottom,left") {
				AssertCssValue(
					locator1 = "Portlet#PORTLET_CONTENT",
					locator2 = "border-${borderType}-color",
					value1 = "rgba(0, 0, 0, 0)");
			}
		}

		task ("Define the border width and border color of WCD") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			Portlet.gotoPortletOptions(
				portletName = "Web Content Display",
				portletOption = "Look and Feel Configuration");

			IFrame.selectConfigurationFrame();

			Portlet.configureBorderStylesViaLookAndFeelPG(
				borderColorAttributeList = "Top-FF0D0D",
				borderWidthAttributeList = "WidthTop-15",
				borderWidthUnitList = "WidthTop-px",
				sameForAllFieldsetLabelList = "Border Width,Border Color");

			IFrame.closeFrame();

			Refresh();

			AssertVisible(
				key_portletName = "Web Content Display",
				locator1 = "Portlet#TITLE");
		}

		task ("View the border width and border color of WCD") {
			for (var borderType : list "top,right,bottom,left") {
				AssertCssValue(
					locator1 = "Portlet#PORTLET_CONTENT",
					locator2 = "border-${borderType}-width",
					value1 = "15px");
			}

			for (var borderType : list "top,right,bottom,left") {
				AssertCssValue(
					locator1 = "Portlet#PORTLET_CONTENT",
					locator2 = "border-${borderType}-color",
					value1 = "rgba(255, 13, 13, 1)");
			}
		}
	}

	@description = "This is a test for LPS-129944. The user could configure WCD when selected web content based on template with embedded widget."
	@priority = "4"
	test ConfigureWCDWhenSelectedWebContentBasedOnTemplateWithEmbeddedWidget {
		task ("Add a web content structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("Add a web content template for new structure") {
			NavItem.gotoTemplates();

			var instanceId = StringUtil.randomString("12");

			var templateScript = '''<@liferay_portlet["runtime"] portletName="com_liferay_journal_content_web_portlet_JournalContentPortlet" instanceId="${instanceId}" />''';

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				templateScript = "${templateScript}");
		}

		task ("Add a web content based on new structure") {
			NavItem.gotoWebContent();

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name 1");
		}

		task ("Add the web content to page via Content tab of Add panel") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name 1",
				siteName = "Test Site Name");

			WidgetPages.addRecentContent(assetTitle = "Web Content Title");
		}

		task ("Enable the Related Assets in Web Content Display") {
			Portlet.gotoPortletOptions(
				portletName = "Web Content Display",
				portletOption = "Configuration");

			WebContentDisplayPortlet.configureSetup(metadataNameList = "Related Assets");

			WebContentDisplayPortlet.saveConfiguration();

			IFrame.closeFrame();
		}

		task ("View the web content shown in Web Content Display") {
			Portlet.viewTitle(portletName = "Web Content Title");

			Portlet.viewTitle(portletName = "Web Content Display");

			WebContentDisplayPortlet.viewMessage();
		}
	}

	@description = "The user could display web content audio in Web Content Display."
	@priority = "5"
	test DisplayWebContentAudio {
		property dummy.socket.proxy.disabled = "true";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "WebContentDisplay#ViewWebContentAudio";
		property testray.component.names = "Training,Web Content Administration";

		task ("Enable the FFMPEG Audio Converter in System Settings") {
			DMNavigator.openToConfigInSystemSettings(portlet = "FFMPEG Audio Converter");

			FormFields.enableCheckbox(fieldName = "enabled");

			SystemSettings.saveConfiguration();
		}

		task ("Add an audio to a document") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "audio/mpeg",
				sourceFileName = "Document_1.mp3");
		}

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Get latest URL version") {
			DMDocument.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document Title");

			DMNavigator.gotoURLDetail();

			var dmDocumentURL = selenium.getElementValue("//input[contains(@id,'url')]");
		}

		task ("Upload an audio in web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.uploadAudio(
				dmDocumentURL = "${dmDocumentURL}",
				navTab = "URL");

			PortletEntry.publish();
		}

		task ("Select the web content article in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("View audio is shown in Web Content Display") {
			WebContentDisplayPortlet.viewContent(
				audioFileName = "Document_1.mp3",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "The user could display web content image in Web Content Display."
	@priority = "5"
	test DisplayWebContentImage {
		property portal.acceptance = "true";
		property testray.component.names = "Training,Web Content Administration";

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Upload an image in web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			ItemSelector.gotoItemSelectorViaCKEditor();

			ItemSelector.uploadFile(
				navTab = "Documents and Media",
				uploadFileName = "Document_3.png");

			PortletEntry.publish();
		}

		task ("Select the web content article in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("View image is shown in Web Content Display") {
			WebContentDisplayPortlet.viewContent(
				imageFileName = "Document_3.png",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "The user could display web content video in Web Content Display."
	@priority = "4"
	test DisplayWebContentVideo {
		property dummy.socket.proxy.disabled = "true";
		property testray.component.names = "Web Content Administration";

		task ("Add an external video shortcut") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			VideoShortcut.addCP(
				videoShortcutTitle = "Liferay Digital Experience Platform",
				videoURL = "https://www.youtube.com/watch?v=HOdbzGCI5ME");
		}

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Upload a video in web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.uploadVideo(
				navTab = "Documents and Media",
				videoShortcutTitle = "Liferay Digital Experience Platform");

			PortletEntry.publish();
		}

		task ("Select the web content article in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("View video is shown in Web Content Display") {
			WebContentDisplayPortlet.viewContent(
				videoShortcutTitle = "Liferay Digital Experience Platform",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "This is a use case for LPS-130033. Display web content with Geolocation field in Web Content Display."
	@priority = "4"
	test DisplayWebContentWithGeolocationField {
		task ("Add a web content structure with a Geolocation field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Geolocation",
				fieldName = "Geolocation");

			WebContentStructures.saveCP();
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Select the web content in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("View the web content is shown in Web Content Display") {
			Portlet.viewTitle(portletName = "Web Content Title");

			AssertVisible(
				key_content = "//div[contains(@id,'Geolocation')]",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");
		}
	}

	@description = "Can edit a web content template via Web Content Display."
	@priority = "4"
	test EditTemplate {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Select the web content in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("View web content is shown in WCD") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("Edit the web content template via WCD") {
			WebContentDisplayPortlet.editTemplate(
				editTemplateButton = "true",
				structureName = "Basic Web Content",
				templateName = "Template Edit",
				templateScript = "Template Edited Extra Content",
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "The user can edit a web content via Web Content Display widget."
	@priority = "4"
	test EditWebContent {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Select the web content in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("View web content is shown in Web Content Display") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("Edit the web content via Web Content Display") {
			WebContentDisplayPortletNavigator.gotoEdit(
				menuItem = "Edit Web Content",
				webContentTitle = "Web Content Title");

			WebContentDisplayPortlet.edit(
				webContentContentEdit = "Web Content Content Edit",
				webContentTitleEdit = "Web Content Title Edit");
		}

		task ("View edited web content is shown in Web Content Display") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content Edit",
				webContentTitle = "Web Content Title Edit");
		}
	}

	@description = "User can view a specific web content in the search bar in Web Content Display widget."
	@priority = "4"
	test SearchWebContent {
		task ("Add two web contents") {
			for (var i : list "1,2") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content ${i}",
					groupName = "Test Site Name",
					title = "Web Content Title ${i}");
			}
		}

		task ("View both web contents are shown when searching for non specific title in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.searchWebContent(
				searchTerm = "Web Content Title 1",
				webContentTitleList = "Web Content Title 1,Web Content Title 2");

			IFrame.closeFrame();
		}

		task ("View first web content is shown when searching for specific title in Web Content Display") {
			WebContentDisplayPortlet.searchWebContent(
				searchTerm = '''"Web Content Title 1"''',
				webContentTitleList = "Web Content Title 1");

			AssertElementNotPresent(
				key_listEntry = "Web Content Title 2",
				locator1 = "LexiconList#LIST_ENTRY_TITLE");

			IFrame.closeFrame();
		}

		task ("View web contents are not shown when searching for invalid value in Web Content Display") {
			WebContentDisplayPortlet.searchWebContent(
				searchTerm = '''"Web1 Content1 Title 1"''',
				webContentTitleNotPresentList = "Web Content Title 1,Web Content Title 2");
		}
	}

	@description = "User can select a web content in Web Content Display widget."
	@priority = "5"
	test SelectWebContent {
		property portal.acceptance = "true";
		property testray.component.names = "Web Content Display,Training";

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Select the web content in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("View web content is shown in Web Content Display") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "User can select a web content that belongs to Global site in Web Content Display widget."
	@priority = "3"
	test SelectWebContentFromGlobalScope {
		task ("Add a web content in Global site") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Global",
				title = "Web Content Title");
		}

		task ("Select Global site as scope for Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.configureScope(scopeSelection = "Global");

			IFrame.closeFrame();
		}

		task ("View Global site is selected") {
			WebContentDisplayPortlet.viewConfigureScope(scopeSelection = "Global");

			IFrame.closeFrame();
		}

		task ("Select the web content in Web Content Display") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("View web content is shown in Web Content Display") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Display (Global)");
		}

		task ("Delete web content in Global site") {
			JSONWebcontent.deleteWebContent(
				groupName = "Global",
				title = "Web Content Title");
		}
	}

	@description = "This is a use case for LPS-71941. Can deploy and undeploy a Web Content Display widget via Gogo Shell."
	@priority = "5"
	@uitest
	test UndeployWebContentDisplayModuleViaGogoShell {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "WebContentDisplay#UndeployWebContentDisplayModuleViaGogoShell";

		task ("Disable Web Content Display module via GogoShell") {
			GogoShell.openGogoShellAdmin();

			var moduleId = GogoShell.getModuleID(moduleName = "com.liferay.journal.content.web");

			GogoShell.stopModule(moduleId = "${moduleId}");

			GogoShell.viewModuleStatus(
				moduleName = "com.liferay.journal.content.web",
				moduleStatus = "Resolved");
		}

		task ("View undeployed message in shown then delete widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Portlet.viewUndeployMessage();

			Click(locator1 = "Portlet#PORTLET_CONTENT");

			Portlet.deletePG(portletName = "com_liferay_journal_content_web_portlet_JournalContentPortlet");
		}

		task ("Enable Web Content Display module via GogoShell") {
			GogoShell.openGogoShellAdmin();

			GogoShell.startModule(moduleId = "${moduleId}");

			GogoShell.viewModuleStatus(
				moduleName = "com.liferay.journal.content.web",
				moduleStatus = "Active");
		}

		task ("Add a Web Content Display widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Portlet.addPG(portletName = "Web Content Display");
		}

		task ("View undeployed message is not shown") {
			AssertTextNotEquals.assertNotPartialText(
				locator1 = "Portlet#PORTLET_CONTENT",
				value1 = "This portlet could not be found. Please redeploy it or remove it from the page.");
		}
	}

	@description = "This is a test for LPS-64814. Validate remote code execution via untrusted Java Deserialization in templates cannot cause out of memory errors."
	@priority = "5"
	test ValidateRemoteCodeViaTemplatesCannotCauseOutOfMemoryErrors {
		property portal.acceptance = "true";

		task ("Add a text field to web content structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("Add a script to web content template") {
			NavItem.gotoTemplates();

			var templateScript = '''
${company.setKey("rO0ABXVyABNbTGphdmEubGFuZy5PYmplY3Q7kM5YnxBzKWwCAAB4cH////c=")}

${company.getKeyObj()}
''';

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				templateScript = "${templateScript}");
		}

		task ("Add a web content based in the new structure") {
			NavItem.gotoWebContent();

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Select the web content in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("View out of memory error is not shown") {
			Portlet.viewTitle(portletName = "Web Content Title");

			AssertConsoleTextNotPresent(value1 = "java.lang.OutOfMemoryError");
		}
	}

	@description = "This is a test for LPS-58698. Validate remote code execution can't privilege escalation in templates."
	@priority = "5"
	test ValidateTemplateRCEReturnsNoRuntimeClasses {
		property portal.acceptance = "true";

		task ("Add a text field to web content structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("Add a script to web content template") {
			NavItem.gotoTemplates();

			var templateScript = '''
${objectUtil("com.liferay.portal.service.UserLocalServiceUtil").getService()}<br />
${utilLocator.findUtil("com.liferay.portal.service.UserLocalService")}<br />
${staticUtil["com.liferay.portal.service.UserLocalServiceUtil"].getService()}<br />

${staticUtil["java.lang.Runtime"].getRuntime()}

<#assign velocityBeanHandler = expandoRowLocalService.getInvocationHandler(expandoRowLocalService)>
<#assign getRuntime=velocityBeanHandler.getClassLoader().loadClass("java.lang.Runtime").getMethod("getRuntime", null)>
<#assign runtimeInstance=velocityBeanHandler.invoke(null, getRuntime, null)>
${runtimeInstance}
''';

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				templateScript = "${templateScript}");
		}

		task ("Add a web content based in the new structure") {
			NavItem.gotoWebContent();

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Select the web content in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("View no runtime error is shown") {
			AssertTextPresent(value1 = "An error occurred while processing the template.");

			AssertTextNotPresent(value1 = "java.lang.Runtime@");
		}
	}

	@description = "View all file types are shown in Web Content Display"
	@priority = "4"
	test ViewAllFileTypesEnabled {
		property test.name.skip.portal.instance = "WebContentDisplay#ViewAllFileTypesEnabled";

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Select the web content in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("View web content is shown in Web Content Display") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("Enable server connectors in System Settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Connectors",
				configurationName = "OpenOffice Integration",
				configurationScope = "System Scope");

			FormFields.enableCheckbox(fieldName = "serverEnabled");

			SystemSettings.saveConfiguration();
		}

		task ("Select DOC, ODT, PDF and TXT as file types in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Portlet.gotoPortletOptions(
				portletName = "Web Content Display",
				portletOption = "Configuration");

			WebContentDisplayPortlet.configureSetup(userToolNameList = "Download as DOC,Download as ODT,Download as PDF,Download as TXT");

			WebContentDisplayPortlet.saveConfiguration();

			IFrame.closeFrame();
		}

		task ("View file types are shown in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.viewEnabledFileTypes(fileTypeList = "DOC,ODT,PDF,TXT");
		}
	}

	@description = "View all settings are shown in Web Content Display."
	@priority = "4"
	test ViewAllSettingsEnabled {
		task ("Add two web contents") {
			for (var i : list "1,2") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content ${i}",
					groupName = "Test Site Name",
					title = "Web Content Title ${i}");
			}
		}

		task ("Add a Spanish translation to first web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title 1");

			PortletEntry.changeLocale(locale = "es-ES");

			WebContent.addCP(
				webContentContent = "Web Contenido Contenido 1",
				webContentTitle = "Web Contenido Título 1");

			PortletEntry.publish();
		}

		task ("View web content title is shown") {
			WebContent.viewTitle(webContentTitle = "Web Content Title 1");
		}

		task ("Add the second web content as related asset") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title 1");

			WebContent.addExistingRelatedAssetCP(
				assetTitle = "Web Content Title 2",
				assetType = "Basic Web Content",
				siteName = "Test Site Name");
		}

		task ("Select the first web content in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title 1");
		}

		task ("Enable assets types in Web Content Display") {
			WebContentDisplayPortlet.configureSetup(
				enableViewCountIncrement = "true",
				metadataNameList = "Related Assets,Ratings,Comments,Comment Ratings",
				userToolNameList = "Translations,Print");

			IFrame.closeFrame();
		}

		task ("View all settings are shown in Web Content Display") {
			WebContentDisplayPortlet.viewAllSettingsEnabled(
				locale = "español-España",
				relatedAssetTitle = "Web Content Title 2",
				webContentContentLocalized = "Web Contenido Contenido 1",
				webContentTitleLocalized = "Web Contenido Título 1");
		}
	}

	@description = "View content is not shown in Web Content Display for guest without permission."
	@priority = "4"
	test ViewArticleWithGuestViewPermission {
		property testray.component.names = "Permissions";

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Select the web content in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("View web content is shown in Web Content Display") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("View web content is shown in Web Content Display as guest") {
			User.logoutPG();

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("Sign in as Test Test") {
			User.logoutAndLoginPG(userLoginEmailAddress = "test@liferay.com");
		}

		task ("Remove View permission for guest role in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PermissionsInline.gotoConfigurationPG(portletName = "Web Content Display");

			Role.viewPermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				permissionFlagged = "true",
				roleTitle = "guest");

			Role.removePermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "guest");
		}

		task ("View error message is shown in Web Content Display as guest") {
			User.logoutPG();

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Portlet.viewNoPermissionPG();
		}

		task ("Sign in as Test Test") {
			User.logoutAndLoginPG(userLoginEmailAddress = "test@liferay.com");
		}

		task ("Add View permission for guest role in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PermissionsInline.gotoConfigurationPG(portletName = "Web Content Display");

			Role.definePermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "guest");
		}

		task ("Remove View permission for guest role in Web Content Admin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			Role.viewPermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				permissionFlagged = "true",
				roleTitle = "guest");

			Role.removePermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "guest");
		}

		task ("View content is not shown as guest") {
			User.logoutPG();

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.viewContentNotVisibleToGuest();
		}
	}

	@description = "View an expired web content via Web Content Display."
	@priority = "4"
	test ViewExpiredWebContent {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Select the web content in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("View web content is shown in Web Content Display") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("Expire the web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.expireSpecificVersionCP(webContentTitle = "Web Content Title");
		}

		task ("View expired web content is shown in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.viewMessage(expiredWebContentTitle = "Web Content Title");
		}
	}

	@description = "View messages in Web Content Display."
	@priority = "4"
	@uitest
	test ViewMessages {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("View the default message shown in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.viewMessage();
		}

		task ("Select the web content in Web Content Display") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("View the web content is shown in Web Content Display") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("Remove the web content from Web Content Display") {
			WebContentDisplayPortlet.removeWebContent();
		}

		task ("View the default message is shown in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.viewMessage();
		}

		task ("Select the web content in Web Content Display") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("Move the web content to Recycle Bin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.moveToRecycleBinCP(
				assetType = "Web Content Article",
				webContentTitle = "Web Content Title");
		}

		task ("View the moved to Recycle Bin message is shown in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.viewMessage(recycleBinWebContentTitle = "Web Content Title");
		}

		task ("Undo move to Recycle Bin in Web Content Display") {
			WebContentDisplayPortlet.undoMoveToRecycleBin();
		}

		task ("View the web content is shown in Web Content Display") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("Delete the web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.deleteCP(
				siteURLKey = "test-site-name",
				webContentTitle = "Web Content Title");
		}

		task ("View the no longer exists message in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.viewMessage(deletedWebContentTitle = "Web Content Title");
		}

		task ("View the no longer exists message as Guest") {
			User.logoutPG();

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.viewContentNotVisibleToGuest();
		}
	}

	@description = "This is a test for LPS-83798. Validate File system can't access using Journal/DDM templates."
	@priority = "5"
	test ViewNoFileSystemAccessViaJournalTemplates {
		property portal.acceptance = "true";

		task ("Add a web content structure with a text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("Add a web content template with a file system") {
			NavItem.gotoTemplates();

			var os = OSDetector.isWindows();

			if ("${os}" == "true") {
				var templateScript = '''
${httpUtil.URLtoString(request.getAttribute("CTX").getResource(".").toURI().create("file:///C:/boot.ini").toURL())}
''';
			}
			else {
				var templateScript = '''
${httpUtil.URLtoString(request.getAttribute("CTX").getResource(".").toURI().create("file:///etc/hosts").toURL())}
''';
			}

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				templateScript = "${templateScript}");
		}

		task ("Add a web content") {
			NavItem.gotoWebContent();

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Select the web content in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("View an error is shown in Web Content Display") {
			AssertTextPresent(value1 = "An error occurred while processing the template.");
		}
	}

	@description = "View pagination in related assets within a web content."
	@priority = "3"
	test ViewRelatedAssetsAfterChangePagination {
		property testray.component.names = "Related Assets,Web Content Administration";

		task ("Add six web conents") {
			for (var i : list "1,2,3,4,5,6") {
				JSONWebcontent.addWebContent(
					content = "Web Contetn Content ${i}",
					groupName = "Test Site Name",
					title = "Web Content Title ${i}");
			}
		}

		task ("View web contents are shown") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			for (var i : list "1,2,3,4,5,6") {
				WebContent.viewTitle(webContentTitle = "Web Content Title ${i}");
			}
		}

		task ("Change the pagination of Related Assets to 4") {
			WebContent.paginateRelatedAssets(
				assetType = "Basic Web Content",
				itemsPerPage = "4",
				webContentTitle = "Web Content Title 3");

			WebContent.viewPaginateRelatedAssets(
				itemsPerPage = "4 Entries",
				numberOfPages = "Showing 1 to 4 of 6 entries.");
		}

		task ("Add a related web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title 3");

			WebContent.addExistingRelatedAssetCP(
				assetTitle = "Web Content Title 5",
				assetType = "Basic Web Content",
				siteName = "Test Site Name");
		}

		task ("Select the web content in Web Content Display then enable Related Assets") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title 3");

			WebContentDisplayPortlet.configureSetup(metadataNameList = "Related Assets");

			WebContentDisplayPortlet.saveConfiguration();

			IFrame.closeFrame();
		}

		task ("View related asset is shown in Web Content Display") {
			WebContentDisplayPortlet.viewRelatedAssets(relatedAssetTitleList = "Web Content Title 5");
		}
	}

	@description = "View web content with script pagination in Web Content Display."
	@priority = "4"
	test ViewWithPaginationScript {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "@page_break@ Home @page_break@",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Select the web content is Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("View content page break in Web Content Display") {
			WebContent.viewPageBreak();

			WebContentDisplayPortlet.viewContentPageBreak(webContentContent = "Home");
		}
	}

}