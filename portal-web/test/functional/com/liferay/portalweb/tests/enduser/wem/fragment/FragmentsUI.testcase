@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-98753. The fragment styles and inline text should be copied to duplicated one."
	@priority = "5"
	test DuplicateFragmentWithStylesAndInlineText {
		property portal.acceptance = "true";

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Edit the inline text of Heading") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Welcome to Liferay");
		}

		task ("Configure the styles of Heading") {
			PageEditor.gotoConfiguration(fragmentName = "Heading");

			PageEditor.configureFragment(headingLevel = "H4");

			PageEditor.gotoStyle(fragmentName = "Heading");

			PageEditor.configureFragment(textColor = "Warning");
		}

		task ("Duplicate the Heading fragment") {
			PageEditor.gotoDuplicate(fragmentName = "Heading");
		}

		task ("View custom fragment styles and edited inline text are copied to duplicated Heading") {
			PageEditor.viewFragmentEditableText(
				editableText = "Welcome to Liferay",
				fragmentName = "Heading",
				id = "element-text",
				position = "2");

			PageEditor.viewFragmentStyle(
				fragmentName = "heading",
				headingLevel = "h4",
				position = "2",
				textColor = "warning");
		}
	}

	@description = "This is a test for LPS-101255. View the actions of saved composition in Page Fragments admin."
	@priority = "5"
	@uitest
	test ViewActionsOfFragmentComposition {
		property portal.acceptance = "true";

		task ("Add a Container to a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Heading fragment into Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				navTab = "Fragments");
		}

		task ("Save fragment composition as fragment") {
			PageEditor.gotoSaveAsFragment(fragmentName = "Container");

			PageEditorComposition.saveAsFragment(fragmentName = "New Fragment Name");
		}

		task ("View the actions of fragment composition") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Saved Fragments");

			LexiconEntry.openEntryMenu(rowEntry = "New Fragment Name");

			for (var menuItem : list "Rename,Move,Change Thumbnail,Export,Delete") {
				MenuItem.viewPresent(menuItem = "${menuItem}");
			}
		}
	}

	@description = "This is a test for LPS-132422. The list of actions appear in right order for fragments."
	@priority = "3"
	test ViewOrderOfFragmentsActions {
		task ("Add a fragment collection") {
			JSONFragment.addFragmentCollection(
				groupName = "Test Site Name",
				name = "Collection Name");
		}

		task ("Add a draft fragment") {
			var htmlSnippet = FragmentsAPI.getFragmentFileContent(fileName = "checkbox_configuration.html");

			var jsonSnippet = FragmentsAPI.getFragmentFileContent(fileName = "checkbox_configuration.json");

			JSONFragment.addSection(
				collectionName = "Collection Name",
				configuration = "${jsonSnippet}",
				fragmentStatus = "Draft",
				groupName = "Test Site Name",
				html = "${htmlSnippet}",
				name = "Draft Fragment Example");
		}

		task ("Add a published fragment") {
			JSONFragment.addSection(
				collectionName = "Collection Name",
				configuration = "${jsonSnippet}",
				fragmentStatus = "Approved",
				groupName = "Test Site Name",
				html = "${htmlSnippet}",
				name = "Approved Fragment Example");
		}

		task ("Add a published fragment to a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Approved Fragment Example");
		}

		task ("Navigate to fragment collection") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");
		}

		task ("Assert the actions order of collections menu") {
			Click.waitForMenuToggleJSClick(locator1 = "Icon#VERTICAL_ELLIPSIS_BUTTON");

			MenuItem.viewOrder(menuItemList = "Export,Import,-,Delete");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#VERTICAL_ELLIPSIS_BUTTON");
		}

		task ("Assert the actions order of a collection") {
			Click.waitForMenuToggleJSClick(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS");

			MenuItem.viewOrder(menuItemList = "Edit,-,Export,Import,-,Delete");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#BODY_VERTICAL_ELLIPSIS");
		}

		task ("Assert the actions order of a draft fragment") {
			LexiconEntry.openEntryMenu(rowEntry = "Draft Fragment Example");

			MenuItem.viewOrder(menuItemList = "Edit,-,Change Thumbnail,Discard Draft,Rename,-,Export,Make a Copy,Move,-,Delete");

			LexiconEntry.openEntryMenu(rowEntry = "Draft Fragment Example");
		}

		task ("Assert the actions order of a published fragment") {
			LexiconEntry.openEntryMenu(rowEntry = "Approved Fragment Example");

			MenuItem.viewOrder(menuItemList = "Edit,-,Change Thumbnail,Rename,View Usages,-,Export,Make a Copy,Move,-,Delete");

			LexiconEntry.openEntryMenu(rowEntry = "Approved Fragment Example");
		}
	}

}