@component-name = "portal-document-management"
definition {

	property custom.properties = "default.layout.template.id=1_column";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Document Management";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.firstLoginPG();

			DMDocument.tearDownCP();

			DMFolder.tearDownCP();

			DMDocumentType.tearDownCP();

			DMMetadataSet.tearDownCP();

			PagesAdmin.tearDownCP();

			JSONUser.tearDownNonAdminUsers();

			Site.tearDownCP();
		}
	}

	@description = "This is a test for LPS-80187. It checks that the Email configuration changes can be canceled."
	@priority = "4"
	test CancelingEmailConfigurationScreenDoesNotSaveChanges {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.configureDocumentEmailSenderInfo(
			cancel = "true",
			senderName = "Test Test");

		Portlet.gotoPortletOptions(portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		InputField.viewText(
			fieldLabel = "Name",
			text = "Joe Bloggs");
	}

	@description = "This is a test for LPS-91199. It checks that all files selected on different pages can be deleted."
	@priority = "5"
	test CanDeleteAllDocumentsOnDifferentPagesAtOnce {
		for (var entryCount : list "1,2,3,4,5") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title ${entryCount}",
				groupName = "Guest",
				mimeType = "text/txt",
				sourceFileName = "Document_${entryCount}.txt");
		}

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		Pagination.changePagination(itemsPerPage = "4");

		DMDocument.deleteCP(deleteAll = "true");

		DMDocument.viewDefault();
	}

	@description = "This is a test for LPS-91861. It checks that the counts can be reset in management toolbar."
	@priority = "5"
	test CanResetCountsInManagementToolbar {
		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Guest");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Description",
			dmDocumentTitle = "Document_1.doc",
			folderName = "DM Folder Name",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Description",
			dmDocumentTitle = "Document_2.doc",
			folderName = "DM Folder Name",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_2.doc");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Image Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Guest",
			mimeType = "image/jpg",
			sourceFileName = "Document_1.jpg");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Image Description",
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Guest",
			mimeType = "image/jpg",
			sourceFileName = "Document_2.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		PortletEntry.selectAll();

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "All Selected");

		Button.click(button = "Clear");

		DMNavigator.openToFolderInAdmin(
			dmFolderName = "DM Folder Name",
			groupName = "Guest",
			siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.checkDocumentCheckboxCP(dmDocumentTitle = "Document_1.doc");

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "1 of 2 Selected");
	}

	@description = "This test covers LPS-141587. It validates that if the 'Delete Application Data Before Importing' option is selected the Doc Lib will not increase in size after the LAR import."
	@priority = "4"
	test DLSizeDoesNotIncreaseIfAppDataIsDeletedBeforeImport {
		for (var entryCount : list "1,2") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document_${entryCount}.jpg",
				groupName = "Guest",
				mimeType = "image/jpeg",
				sourceFileName = "Document_${entryCount}.jpg");
		}

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LAR.exportPortlet(larFileName = "DM.portlet.lar");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LAR.importPortlet(
			deleteApplicationData = "true",
			larFileName = "DM.portlet.lar");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewCP(
			dmDocumentSize = "13 KB",
			dmDocumentTitle = "Document_1.jpg");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewCP(
			dmDocumentSize = "30 KB",
			dmDocumentTitle = "Document_2.jpg");
	}

	@description = "This is a use case for LPS-50760."
	@priority = "4"
	@refactordone
	test StagingFileSizeIsNotAffectedByDLRestrictions {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "DMAdmin#StagingFileSizeIsNotAffectedByDLRestrictions";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "audio/x-mpeg",
			sourceFileName = "Document_1.mp3");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LAR.exportPortlet(larFileName = "DM.portlet.lar");

		DMDocument.updateMaximumFileSize(fieldValue = "300000");

		VerifyElementPresent(locator1 = "Message#SUCCESS");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LAR._gotoExportImport();

		AssertElementPresent(locator1 = "IFrame#MODAL_BODY");

		LAR._export(
			exportPermissions = "${exportPermissions}",
			larFileName = "DM.portlet.lar");
	}

	@description = "This test covers LPS-93601 and LPS-91661. It ensures that the user can check all files in the current pagination using the DM toolbar and can move documents not on the current pagination to another folder."
	@priority = "4"
	@refactorneeded
	test ViewPaginationToolbarCheckboxAndMoveMultiplePaginationDocuments {
		property portal.acceptance = "true";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Guest");

		for (var documentName : list "Document_2.doc,Document_1.xls,Document_4.jpg,Document_3.jpg,Document_2.xls,Document_1.txt,Document_4.txt,Document_3.xls,Document_2.jpg,Document_1.doc") {
			var extension = StringUtil.extractLast("${documentName}", ".");

			if ("${extension}" == "doc") {
				var mimeType = "application/msword";
			}
			else if ("${extension}" == "jpg") {
				var mimeType = "image/jpg";
			}
			else if ("${extension}" == "png") {
				var mimeType = "image/png";
			}
			else if ("${extension}" == "xls") {
				var mimeType = "application/vnd.ms-excel";
			}
			else if ("${extension}" == "txt") {
				var mimeType = "text/plain";
			}

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "${documentName}",
				folderName = "DM Folder Name",
				groupName = "Guest",
				mimeType = "${mimeType}",
				sourceFileName = "${documentName}");
		}

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMFolder.gotoEntry(dmFolderName = "DM Folder Name");

		Pagination.changePagination(itemsPerPage = "4");

		Pagination.viewResults(results = "Showing 1 to 4 of 10 entries.");

		DMDocument.moveToFolderCP(
			dmFolderName = "Home",
			selectAll = "true");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		Pagination.changePagination(itemsPerPage = "20");

		Pagination.viewResults(results = "Showing 1 to 11 of 11 entries.");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		LexiconEntry.changeDisplayStyle(displayStyle = "List");

		Pagination.changePagination(itemsPerPage = "4");

		Pagination.viewResults(results = "Showing 1 to 4 of 11 entries.");

		DMDocument.checkDocumentCheckboxPG(dmDocumentTitle = "Document_2.jpg");

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "1 of 11 Selected");

		Click(locator1 = "Pagination#NEXT_LINK");

		Click.clickNoWaitForVisible(locator1 = "Checkbox#LEXICON_SELECT_ALL_INPUT");

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "5 of 11 Selected");
	}

	@description = "This test covers LPS-103231. It validates that the owner name from a document cannot execute XSS from the info panel."
	@ignore = "Test Stub"
	@priority = "4"
	test XSSCannotBeExecutedFromTheOwnerNameInTheInfoPanel {

		// TODO LPS-129153

	}

}