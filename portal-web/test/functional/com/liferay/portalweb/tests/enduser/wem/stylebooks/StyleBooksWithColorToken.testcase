@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Style Books";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-141568. The reference will be autocompleted as 6 digit characters, if the user fill out 3 digit characters when clicking on the tab, intro or outside the output."
	@priority = "4"
	test AutocompleteColorReference {
		task ("Add a Container to a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Change the Background Color to Info") {
			PageEditor.editLayoutContainer(
				backgroundColor = "Info",
				panel = "Styles");
		}

		task ("Detach the linked token") {
			PageEditor.detachToken(fieldLabel = "Background Color");
		}

		task ("Type a 3 digits color reference") {
			Type(
				key_text = "Background Color",
				locator1 = "TextInput#ANY",
				value1 = "#03C");
		}

		task ("View the color reference is autocompleted after trigger auto save") {
			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			PageEditor.waitForAutoSave();

			AssertTextEquals(
				key_text = "Background Color",
				locator1 = "TextInput#ANY",
				value1 = "#0033CC");
		}

		task ("View the background color of Container") {
			AssertCssValue(
				locator1 = "//div[@aria-label='Container']//div[contains(@class,'container')]",
				locator2 = "background-color",
				value1 = "rgba(0, 51, 204, 1)");
		}
	}

	@description = "This is a test for LPS-145650. The user could cancel publish process in page editor if link invalid color token."
	@priority = "4"
	test CancelPublishProcessInPageEditorIfLinkInvalidColorToken {
		task ("Add a Heading fragment to a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Change the Text Color to Info") {
			PageEditor.gotoStyle(fragmentName = "Heading");

			PageEditor.configureFragment(textColor = "Info");
		}

		task ("Detach the linked token") {
			PageEditor.detachToken(fieldLabel = "Text Color");
		}

		task ("View error message after type an invalid color token in Text Color field") {
			Type(
				key_text = "Text Color",
				locator1 = "TextInput#ANY",
				value1 = "aaa");

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			AssertVisible(
				key_alertMessage = "This token does not exist.",
				key_fieldLabel = "Text Color",
				locator1 = "TextInput#ALERT_MESSAGE");
		}

		task ("Cancel the publish process") {
			PageEditor.clickPublish(publishing = "Cancel");
		}

		task ("View the invalid color token is still shown in Text Color field") {
			InputField.viewText(
				fieldLabel = "Text Color",
				text = "aaa");
		}

		task ("Type an valid color token in Text Color field then publish") {
			Type(
				key_text = "Text Color",
				locator1 = "TextInput#ANY",
				value1 = "#00CCBB");

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			PageEditor.clickPublish();
		}

		task ("View the Text Color of Heading is new color token in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertCssValue(
				fragmentName = "heading",
				id = "element-text",
				index = "1",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
				locator2 = "color",
				value1 = "rgba(0, 204, 187, 1)");
		}
	}

	@description = "This is a test for LPS-145650. The user could cancel publish process in style book editor if link invalid color token."
	@priority = "4"
	test CancelPublishProcessInStyleBookEditorIfLinkInvalidColorToken {
		task ("Add a style book") {
			JSONStylebooks.addStyleBookEntry(
				groupName = "Test Site Name",
				styleBookEntryName = "Test Style Book Name");
		}

		task ("Change the Brand Color 1 to an invalid color token") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.gotoStyleBookEllipsisItem(
				item = "Edit",
				styleBookName = "Test Style Book Name");

			Type(
				key_text = "Brand Color 1",
				locator1 = "TextInput#ANY",
				value1 = "aaa");

			StyleBooks.clickManagementBar();

			AssertVisible(
				key_alertMessage = "This token does not exist.",
				key_fieldLabel = "Brand Color 1",
				locator1 = "TextInput#ALERT_MESSAGE");
		}

		task ("Cancel the publish process") {
			StyleBooks.clickPublish(publishing = "Cancel");
		}

		task ("View the invalid color token is still shown in Brand Color 1 field") {
			InputField.viewText(
				fieldLabel = "Brand Color 1",
				text = "aaa");
		}

		task ("Type an valid color token in Brand Color 1 field then publish") {
			Type(
				key_text = "Brand Color 1",
				locator1 = "TextInput#ANY",
				value1 = "#00CCBB");

			StyleBooks.clickManagementBar();

			StyleBooks.waitForAutoSave();

			StyleBooks.clickPublish();
		}

		task ("View the Brand Color 1 is new color token") {
			StyleBooksAdmin.gotoStyleBookEllipsisItem(
				item = "Edit",
				styleBookName = "Test Style Book Name");

			InputField.viewText(
				fieldLabel = "Brand Color 1",
				text = "#00CCBB");
		}
	}

	@description = "This is a test for LPS-141568. The user cannot refer two tokens mutually."
	@priority = "4"
	test CannotReferTwoTokensMutually {
		task ("Add a style book") {
			JSONStylebooks.addStyleBookEntry(
				groupName = "Test Site Name",
				styleBookEntryName = "Test Style Book Name");

			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.gotoStyleBookEllipsisItem(
				item = "Edit",
				styleBookName = "Test Style Book Name");
		}

		task ("Navigate to the Color System form") {
			StyleBooks.selectForm(formName = "Color System");
		}

		task ("Refer Brand Color 1 to Branch Color 2") {
			StyleBooks.linkValueFromStyleBook(
				colorSwatchItem = "Brand Color 2",
				fieldLabel = "Brand Color 1");
		}

		task ("Cannot refer Brand Color 2 to Brand Color 1") {
			Click.clickNoWaitForVisible(
				key_fieldLabel = "Brand Color 2",
				key_text = "theme",
				locator1 = "Icon#ANY_ITEM_SELECTOR");

			AssertVisible(
				key_text = "Brand Color 1",
				locator1 = "Button#ANY_DISABLED");
		}
	}

	@description = "This is a test for LPS-145650. The user could continue publish process in page editor if link invalid color token."
	@priority = "5"
	test ContinuePublishProcessInPageEditorIfLinkInvalidColorToken {
		property portal.acceptance = "true";

		task ("Add a Heading fragment to a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Change the Text Color to Danger") {
			PageEditor.gotoStyle(fragmentName = "Heading");

			PageEditor.configureFragment(textColor = "Danger");
		}

		task ("Detach the linked token") {
			PageEditor.detachToken(fieldLabel = "Text Color");
		}

		task ("View error message after type an invalid color token in Text Color field") {
			Type(
				key_text = "Text Color",
				locator1 = "TextInput#ANY",
				value1 = "aaa");

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

			AssertVisible(
				key_alertMessage = "This token does not exist.",
				key_fieldLabel = "Text Color",
				locator1 = "TextInput#ALERT_MESSAGE");
		}

		task ("Continue the publish process") {
			PageEditor.clickPublish(publishing = "Continue");
		}

		task ("View the Text Color of Heading is the #DA1414 in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertCssValue(
				fragmentName = "heading",
				id = "element-text",
				index = "1",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
				locator2 = "color",
				value1 = "rgba(218, 20, 20, 1)");
		}
	}

	@description = "This is a test for LPS-145650 and LPS-149218. The user could continue publish process in style book editor if link invalid color token. The tokens groups should be collapsed by default except the first one."
	@priority = "5"
	test ContinuePublishProcessInStyleBookEditorIfLinkInvalidColorToken {
		property portal.acceptance = "true";

		task ("Add a style book") {
			JSONStylebooks.addStyleBookEntry(
				groupName = "Test Site Name",
				styleBookEntryName = "Test Style Book Name");
		}

		task ("View only the first tokens group is expanded by default") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.gotoStyleBookEllipsisItem(
				item = "Edit",
				styleBookName = "Test Style Book Name");

			AssertElementPresent(
				key_sectionName = "Brand Colors",
				locator1 = "StyleBookEditor#STYLE_BOOK_EDITOR_SIDEBAR_EXPANDED");

			AssertElementPresent(
				key_sectionName = "Grays",
				locator1 = "StyleBookEditor#STYLE_BOOK_EDITOR_SIDEBAR_COLLAPSED");

			AssertElementPresent(
				key_sectionName = "Theme Colors",
				locator1 = "StyleBookEditor#STYLE_BOOK_EDITOR_SIDEBAR_COLLAPSED");
		}

		task ("Change the Brand Color 1 to an invalid color token") {
			Type(
				key_text = "Brand Color 1",
				locator1 = "TextInput#ANY",
				value1 = "aaa");

			StyleBooks.clickManagementBar();

			AssertVisible(
				key_alertMessage = "This token does not exist.",
				key_fieldLabel = "Brand Color 1",
				locator1 = "TextInput#ALERT_MESSAGE");
		}

		task ("Continue the publish process") {
			StyleBooks.clickPublish(publishing = "Continue");
		}

		task ("View the Brand Color 1 is the #0B5FFF") {
			StyleBooksAdmin.gotoStyleBookEllipsisItem(
				item = "Edit",
				styleBookName = "Test Style Book Name");

			InputField.viewText(
				fieldLabel = "Brand Color 1",
				text = "#0B5FFF");
		}
	}

	@description = "This is a test for LPS-136199. The user could detach the linked token."
	@priority = "5"
	test DetachLinkedColorTokenInPageEditor {
		property portal.acceptance = "true";

		task ("Add a Heading fragment to a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Change the Text Color to Success") {
			PageEditor.gotoStyle(fragmentName = "Heading");

			PageEditor.configureFragment(textColor = "Success");
		}

		task ("View the Text Color of Heading is Success") {
			PageEditor.viewFragmentStyle(
				fragmentName = "heading",
				textColor = "success");
		}

		task ("Detach the linked token") {
			PageEditor.detachToken(fieldLabel = "Text Color");
		}

		task ("View the color reference is shown in Text Color field") {
			AssertTextEquals(
				key_text = "Text Color",
				locator1 = "TextInput#ANY",
				value1 = "#287D3C");

			AssertCssValue(
				fragmentName = "heading",
				id = "element-text",
				index = "1",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
				locator2 = "color",
				value1 = "rgba(40, 125, 60, 1)");
		}
	}

	@description = "This is a test for LPS-141568. The previous reference will be maintained, if the user fill out wrong digit characters when clicking on the tab, intro or outside the output."
	@priority = "4"
	test PersistPreviousColorReferenceWhenPopulateWrongDigitCharacters {
		task ("Add a Container to a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Change the Background Color to Info") {
			PageEditor.editLayoutContainer(
				backgroundColor = "Info",
				panel = "Styles");
		}

		task ("Detach the linked token") {
			PageEditor.detachToken(fieldLabel = "Background Color");
		}

		task ("View the previous color reference is persisted after fill out wrong digit characters color reference") {
			for (var colorReference : list "#0,#0A,#0BC4,#0B2C2") {
				Type(
					key_text = "Background Color",
					locator1 = "TextInput#ANY",
					value1 = "${colorReference}");

				Click(
					key_sidebarButton = "Browser",
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");

				PageEditor.waitForAutoSave();

				AssertTextEquals(
					key_text = "Background Color",
					locator1 = "TextInput#ANY",
					value1 = "#2E5AAC");

				AssertCssValue(
					locator1 = "//div[@aria-label='Container']//div[contains(@class,'container')]",
					locator2 = "background-color",
					value1 = "rgba(46, 90, 172, 1)");
			}
		}
	}

	@description = "This is a test for LPS-136199. The token changes from style book should be applied to the usages."
	@priority = "4"
	test ViewColorTokenChangesAppliedToUsages {
		task ("Add a Heading fragment to a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Change the Text Color to Success") {
			PageEditor.gotoStyle(fragmentName = "Heading");

			PageEditor.configureFragment(textColor = "Success");
		}

		task ("View the Text Color of Heading is Success") {
			PageEditor.viewFragmentStyle(
				fragmentName = "heading",
				textColor = "success");

			PageEditor.clickPublish();
		}

		task ("Add a style book") {
			JSONStylebooks.addStyleBookEntry(
				groupName = "Test Site Name",
				styleBookEntryName = "Test Style Book Name");
		}

		task ("Change Success of Theme Colors in Color System form") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.gotoStyleBookEllipsisItem(
				item = "Edit",
				styleBookName = "Test Style Book Name");

			StyleBooks.expandSection(sectionName = "Theme Colors");

			Type(
				key_fieldLabel = "Success",
				key_groupLabel = "Theme Colors",
				locator1 = "TextInput#GROUPED_TEXT_INPUT",
				value1 = "#34f787");

			StyleBooks.clickManagementBar();

			StyleBooks.waitForAutoSave();

			StyleBooks.clickPublish();
		}

		task ("Apply the new style book to content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.gotoTab(tabName = "Page Design Options");

			StyleBooks.selectStyleBookViaPageDesignOptions(styleBookName = "Test Style Book Name");
		}

		task ("View the color reference of Text Color is #34f787") {
			PageEditor.viewFragmentStyle(
				fragmentName = "heading",
				textColor = "success");

			AssertCssValue(
				fragmentName = "heading",
				id = "element-text",
				index = "1",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
				locator2 = "color",
				value1 = "rgba(52, 247, 135, 1)");
		}
	}

}