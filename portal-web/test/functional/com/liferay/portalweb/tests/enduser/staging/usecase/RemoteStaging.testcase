@component-name = "portal-staging"
definition {

	property app.server.bundles.size = "1";
	property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
	property databases.size = "1";
	property minimum.slave.ram = "24";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Staging";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging Test Page");

		Staging.remoteStagingSetUpViaJson(
			groupName = "Site Name",
			remotePort = "9080");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "This is a use case for LPS-123156. Verify that the publication process message is shown while the publication is in progress."
	@priority = "4"
	test AssertLongPublicationProcessMessage {
		property test.name.skip.portal.instance = "RemoteStaging#AssertLongPublicationProcessMessage";

		Staging.runGroovyScript();

		Staging.openStagingAdmin(siteURLKey = "site-name");

		MouseOver.mouseOverNotVisible(locator1 = "Button#PLUS");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#TOOLTIP",
			value1 = "Custom Publish Process");

		Staging.publishCustomPublication(remoteStaging = "true");

		Staging.publishCustomPublication(
			checkContentNameList = "Web Content",
			headerTitle = "New Publish Process",
			inProcess = "true",
			rangeAll = "true",
			remoteStaging = "true");
	}

	@description = "This is a use case for LPS-83187. Add a publish template to the staging site then verify the title of the scheduled publication after it is finished."
	@priority = "3"
	test AssertTemplatesTitleOfScheduledStagingPublishes {
		property test.name.skip.portal.instance = "RemoteStaging#AssertTemplatesTitleOfScheduledStagingPublishes";

		JSONGroup.addGroup(
			groupName = "Remote Site 2",
			portalURL = "http://localhost:9080");

		Staging.openStagingAdmin(siteURLKey = "site-name");

		Staging.addPublishTemplate(
			publishTemplateDescription = "Publish Template Description",
			publishTemplateName = "My Template Title");

		Staging.editPublishTemplateRemoteSiteID(
			groupName = "Remote Site 2",
			remotePort = "9080");

		Staging.savePublishTemplate(
			publishTemplateDescription = "Publish Template Description",
			publishTemplateName = "My Template Title");

		Staging.openStagingAdmin(siteURLKey = "site-name");

		Staging.publishCustomPublication(
			editPublishTemplateName = "My Publish Title",
			publishTemplateName = "My Template Title",
			scheduleProcess = "true");

		Staging.openStagingAdmin(siteURLKey = "site-name");

		Staging.viewPublishTask(publicationTitle = "My Publish Title");
	}

	@description = "This is a use case for LPS-123156. Verify that correct error message will appear when the publishing process encounters an error."
	@priority = "4"
	test AssertValidationErrors {
		property test.name.skip.portal.instance = "RemoteStaging#AssertValidationErrors";

		PagesAdmin.openPagesAdmin(siteURLKey = "site-name");

		PagesAdmin.addPage(pageName = "Second Test Page");

		JSONGroup.deleteGroupByName(
			groupName = "Remote Site",
			portalURL = "http://localhost:9080");

		Navigator.openSiteURL(siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(
			failureExpected = "true",
			remoteStaging = "true",
			validateErrorMessage = "An unexpected error occurred with the publish process. Please check your portal and publishing configuration.");
	}

	@description = "This is a use case for LPS-146399. In the publish summary of a remote staging site only the previously published pages should be present."
	@priority = "3"
	test OnlyPublishedPagesShouldBePresentInSummary {
		property test.name.skip.portal.instance = "RemoteStaging#OnlyPublishedPagesShouldBePresentInSummary";

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging Test Page 1");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging Test Page 2");

		Navigator.gotoSitePage(
			pageName = "Staging Test Page 1",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.configurePublishToLive(checkPageName = "Staging Test Page 1");

		Staging.publishToLive(
			publicationName = "sumCheck",
			remoteStaging = "true");

		Staging.openStagingAdmin(siteURLKey = "site-name");

		Staging.viewPublicationSummary(
			pagesNotToPublish = '''Staging Test Page 2''',
			pagesToPublish = '''Staging Test Page 1''',
			publicationTitle = "sumCheck");
	}

	@description = "This is a use case for LPS-80494. Documents can be published with link to page fields."
	@priority = "3"
	test StagingRemoteDMDocumentType {
		property test.name.skip.portal.instance = "RemoteStaging#StagingRemoteDMDocumentType";

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Link to Page",
			dmDocumentTypeName = "DM Document Type Name");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Type Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Type Title",
			dmDocumentTypeName = "DM Document Type Name");

		Navigator.gotoSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureAssetTypePG(
			assetSubtype = "DM Document Type Name",
			selectedAsset = "Document");

		Navigator.gotoSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging Test Page",
			siteName = "Remote Site");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Type Title");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Type Title");

		User.logoutPG(specificURL = "http://localhost:9080");

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(
			assetContent = "DM Document Type Description",
			assetTitle = "DM Document Type Title");
	}

	@description = "Web contents are only published if their content date is in correspondence with the content data range of the publish configuration."
	@priority = "4"
	test StagingRemoteLiveWebContent {
		property test.name.skip.portal.instance = "RemoteStaging#StagingRemoteLiveWebContent";

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging Test Page",
			widgetName = "Web Content Display");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "Structure Description",
			structureName = "Structure Name");

		DataEngine.addFields(fieldNameList = "Text,Select from List,Single Selection,Multiple Selection,Grid,Date,Numeric,Image,Rich Text,Upload,Color,Web Content,Geolocation,Link to Page,Separator");

		WebContentStructures.saveCP(structureName = "Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoTemplates();

		WebContentTemplates.addCP(
			structureName = "Structure Name",
			templateDescription = "Template Description",
			templateFieldNames = "Text,Select from List,Single Selection,Multiple Selection,Grid,Date,Numeric,Image,Rich Text,Upload,Color,Web Content,Geolocation,Link to Page",
			templateName = "Template Name");

		Navigator.openURL();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "Structure Name");

		WebContent.addWithStructureCP(
			column = "1",
			dmNavTab = "User Personal Folder",
			navTab = "Web Content Images",
			row = "1",
			structureName = "Structure Name",
			templateName = "Template Name",
			webContentColor = "FF0D0D",
			webContentDate = "10/10/2020",
			webContentGrid = "true",
			webContentImage = "Document_3.png",
			webContentMultipleSelection = "Option 1",
			webContentNumeric = "9",
			webContentRichText = "Staging Web Content Body",
			webContentSelectFromList = "Option 2",
			webContentSingleSelection = "Option 3",
			webContentText = "Staging Web Content Text",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "Web Content Title");

		Staging.openStagingAdmin(siteURLKey = "site-name");

		Staging.addCustomPublication();

		Staging.configurePublishToLive(
			contentDateRange = "Date Range",
			dateRangeEndDate = '''10/12/2019''',
			dateRangeStartDate = '''10/11/2019''');

		Staging.viewDateRange(
			dateRangeEndDate = '''10/12/2019''',
			dateRangeStartDate = '''10/11/2019''');

		AssertElementNotPresent(
			key_contentName = "Web Content",
			locator1 = "PagesConfiguration#CONTENT_CHOOSE_CONTENT_CONTENT_CHECKBOX");

		Navigator.gotoSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		ProductMenu.gotoStagingSite(site = "Site Name");

		Staging.gotoPublishToLive();

		Staging.configurePublishToLive(contentDateRange = "All");

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		WebContentNavigator.openWebContentAdmin(
			baseURL = "http://localhost:9080",
			siteURLKey = "remote-site");

		var key_webContentTitle = "Web Content Title";

		AssertTextEquals.assertPartialText(
			locator1 = "WC#ENTRY_LIST_TITLE_ON_LIVE",
			value1 = "Web Content Title");

		NavItem.gotoStructures();

		WebContentStructures.viewCP(
			structureDescription = "Structure Description",
			structureName = "Structure Name");
	}

	@description = "This is a use case for LPS-82839. Web contents can be published on remote staging."
	@priority = "5"
	test StagingRemoteLiveWebContentViaPortletCP {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "RemoteStaging#StagingRemoteLiveWebContentViaPortletCP";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "Web Content Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		Staging.publishToLiveNowViaPortletCP();

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		WebContentNavigator.openWebContentAdmin(
			baseURL = "http://localhost:9080",
			siteURLKey = "remote-site");

		WebContent.viewTitle(
			onLive = "true",
			webContentTitle = "Web Content Title");
	}

	@description = "This is a use case for LPS-81950. Web contents can be published via their portlet."
	@priority = "5"
	test StagingRemoteLiveWebContentViaPortletPG {
		property test.name.skip.portal.instance = "RemoteStaging#StagingRemoteLiveWebContentViaPortletPG";

		Navigator.gotoSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		Portlet.gotoPortletOptions(
			portletName = "Web Content Display",
			portletOption = "Staging");

		IFrame.selectConfigurationFrame();

		AssertTextEquals.assertPartialText(
			locator1 = "Staging#STAGING_PUBLISH_PAGE_FIRST_MESSAGE",
			value1 = "This widget is placed in a page that does not exist in the live site. Publish the page first.");

		AssertElementNotPresent(locator1 = "Staging#STAGING_PUBLISH_TO_LIVE_BUTTON");

		Navigator.gotoSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		Navigator.gotoSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		WebContentDisplayPortlet.add(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		Staging.publishToLiveNowViaPortletPG();

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging Test Page",
			siteName = "Remote Site");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");
	}

	@description = "This is a use case for LPS-81953. Web contents can be published with manually chosen ID."
	@priority = "3"
	test StagingRemoteLiveWebContentWithManualChosenID {
		property test.name.skip.portal.instance = "RemoteStaging#StagingRemoteLiveWebContentWithManualChosenID";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Web Content",
			configurationName = "Administration",
			configurationScope = "System Scope");

		FormFields.disableCheckbox(fieldName = "journalArticleForceAutogenerateId");

		SystemSettings.saveConfiguration();

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Web Content",
			configurationName = "Administration",
			configurationScope = "System Scope");

		FormFields.disableCheckbox(fieldName = "journalArticleForceAutogenerateId");

		SystemSettings.saveConfiguration();

		User.logoutPG(specificURL = "http://localhost:9080");

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentId = "12345",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		Navigator.openSiteURL(siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		WebContentNavigator.openWebContentAdmin(
			baseURL = "http://localhost:9080",
			siteURLKey = "remote-site");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		AssertTextEquals(
			key_webContentTitle = "WC WebContent Title",
			locator1 = "WC#ENTRY_TABLE_ID",
			value1 = "12345");
	}

	@description = "This is a use case for LPS-74038. Expected error message will appear on the UI when the live instance is not running on remote staging and the link to it is not visible."
	@priority = "5"
	test ViewInfoMessageAfterShutDownRemoteSite {
		property test.name.skip.portal.instance = "RemoteStaging#ViewInfoMessageAfterShutDownRemoteSite";

		Clustering.shutdownSpecificServer(nodePort = "9080");

		Navigator.openSiteURL(siteName = "Site Name");

		AssertVisible(
			key_tooltipInfo = "The connection to the remote live site cannot be established due to a network problem.",
			locator1 = "Staging#STAGING_TOOLTIP");

		AssertElementNotPresent(locator1 = "Staging#STAGING_LINK_LIVE");

		AssertConsoleTextNotPresent(value1 = "SocketTimeoutException");
	}

	@description = "This is a use case for LPS-81836. Web contents can be published via SAP."
	@priority = "4"
	test ViewSingleAssetRemotePublication {
		property test.name.skip.portal.instance = "RemoteStaging#ViewSingleAssetRemotePublication";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "Web Content Title");

		Staging.publishViaSAP(
			confirmMessage = "Are you sure you want to publish the selected web content?",
			entry = "Web Content Title");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		WebContentNavigator.openWebContentAdmin(
			baseURL = "http://localhost:9080",
			siteURLKey = "remote-site");

		WebContent.viewTitle(
			onLive = "true",
			webContentTitle = "Web Content Title");
	}

}