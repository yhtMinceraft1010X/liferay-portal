@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Pages Administration";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "View the XSS is escaped when store it in widget page name."
	@priority = "4"
	@uitest
	test ViewWidgetPage {
		var pageName = '''<script>alert(123);</script>''';

		task ("Add a widget page with XSS page name") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.addPage(pageName = "${pageName}");
		}

		task ("Navigate to the widget page") {
			Navigator.gotoSitePage(
				pageName = "${pageName}",
				siteName = "Test Site Name");
		}

		task ("View the alert not shown") {
			AssertAlertNotPresent();
		}

		task ("View the XSS is escaped") {
			var actualScript = '''<script>alert(123);</script>''';

			var escapedScript = '''&lt;script&gt;alert(123);&lt;/script&gt;''';

			AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

			AssertHTMLSourceTextPresent(value1 = "${escapedScript}");
		}

		task ("Navigate to the Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");
		}

		task ("View the alert not shown") {
			AssertAlertNotPresent();
		}

		task ("View the XSS is escaped") {
			AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

			AssertHTMLSourceTextPresent(value1 = "${escapedScript}");
		}
	}

}