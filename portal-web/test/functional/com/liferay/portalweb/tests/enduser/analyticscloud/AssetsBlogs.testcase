@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();

		ACUtils.addSiteAndPage();

		ACUtils.createBlogsAndAddToPage();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8387 | Test Summary: Blogs asset appears on list shows pages that the blog exists on"
	@priority = "5"
	test AssertAppearsOnListShowsPagesBlogExists {
		ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		task ("View the blog") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC and go to Blogs tab") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToAssets();

			ACNavigation.switchTab(tabName = "Blogs");
		}

		task ("Go to the blogs overview") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACNavigation.openItem(itemName = "Blogs AC Title");
		}

		task ("Assert appears on metric") {
			var portalURL = PropsUtil.get("portal.url");
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", " ");

			ACAssets.viewAssetAppearsOnMetric(
				canonicalURL = "${portalURL}/web/site-name/ac-page/-/blogs/blogs-ac-title",
				cardTitle = "Asset Appears On",
				pageName = "Blogs AC Title - Site Name - ${dataSourceName}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8384 | Test Summary: Assert 180 day time filter in Blogs"
	@ignore = "true"
	@priority = "3"
	test AssertBlogsPageTImeFilter180Days {

		// AC Refactor: It is not possible to perform the assert because this test needs data from the past.
		// AC Refactor ticket: LRAC-8930

		task ("Connect DXP to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("View the blog") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close DXP, launch AC and switch the propety") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Go to Blogs assets") {
			ACNavigation.goToAssets();

			ACNavigation.switchTab(tabName = "Blogs");
		}

		task ("Assert blog on the Last 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACUtils.viewNameList(nameList = "Blogs AC Title");
		}

		task ("Assert 'Last 180 days' time filter") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast180Days();

			ACTimeFilter.assertCurrentTimeFilterRange(timeFilterRange = "Last 180 days");

			ACUtils.viewNameList(nameList = "Blogs AC Title");

			// Is not possible to assert the blog because this test needs data from the past.

		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8374 | Test Summary: Blogs audience card shows expected amount of know and anonymous individuals"
	@priority = "5"
	test AudienceCardShowsExpectedAmountKnowAndAnonymousIndividualsInBlogs {
		property analytics.cloud.upstream = "false";

		var usernameList = "ac,liferay";
		var emailList = "ac@liferay.com,liferay@liferay.com";

		for (var name : list "${usernameList}") {
			JSONUser.addUser(
				userEmailAddress = "${name}@liferay.com",
				userFirstName = "${name}",
				userLastName = "${name}",
				userScreenName = "${name}");
		}

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		ACUtils.navigateToSitePageWithUser(
			actionType = "View Blog",
			documentTitleList = "Blogs AC Title",
			emailList = "${emailList}",
			pageName = "AC Page",
			siteName = "Site Name");

		User.logoutPG();

		ACUtils.navigateToSitePage(
			actionType = "View Blog",
			documentTitleList = "Blogs AC Title",
			pageName = "AC Page",
			siteName = "Site Name");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToAssets();

		ACNavigation.switchTab(tabName = "Blogs");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		ACNavigation.openItem(itemName = "Blogs AC Title");

		ACIndividualsDashboard.goToOverviewTab();

		ACNavigation.viewActiveSwitchTab(tabName = "Overview");

		ACUtils.assertAudienceCard(
			index = "1",
			percentageList = "66.67%,33.33%");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8375 | Test Summary: Blogs audience card shows expected amount of segmented and unsegmented individuals"
	@priority = "5"
	test AudienceCardShowsExpectedAmountSegmentedAndUnsegmentedInBlogs {
		property analytics.cloud.upstream = "false";

		var usernameList = "ac,liferay";
		var emailList = "ac@liferay.com,liferay@liferay.com";

		for (var name : list "${usernameList}") {
			JSONUser.addUser(
				userEmailAddress = "${name}@liferay.com",
				userFirstName = "${name}",
				userLastName = "${name}",
				userScreenName = "${name}");
		}

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		ACUtils.navigateToSitePageWithUser(
			actionType = "View Blog",
			documentTitleList = "Blogs AC Title",
			emailList = "${emailList}",
			pageName = "AC Page",
			siteName = "Site Name");

		User.logoutPG();

		ACUtils.navigateToSitePage(
			actionType = "View Blog",
			documentTitleList = "Blogs AC Title",
			pageName = "AC Page",
			siteName = "Site Name");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createStaticSegment();

		ACUtils.setItemName(itemName = "Static Segment Test");

		ACSegments.addStaticMember(tableMember = "ac ac");

		ACSegments.saveSegment();

		ACUtils.launchDXP(userEmailAddress = "ac@liferay.com");

		ACUtils.navigateToSitePage(
			actionType = "View Blog",
			documentTitleList = "Blogs AC Title",
			pageName = "AC Page",
			siteName = "Site Name");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACNavigation.goToAssets();

		ACNavigation.switchTab(tabName = "Blogs");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		ACNavigation.openItem(itemName = "Blogs AC Title");

		ACUtils.assertAudienceCard(
			index = "2",
			percentageList = "66.67%,33.33%");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8378 | Test Summary: Blogs location card shows views by the expected location"
	@ignore = "true"
	@priority = "5"
	test BlogsLocationCardShowsViewsByExpectedLocation {

		// AC Refactor: The location data should show the name of the country but it's actually showing "Local network"
		// AC Refactor: Personas
		// AC Refactor ticket: LRAC-9395

		task ("Connect the DXP to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("View the blogs entry") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Get the ip country") {
			var country = ACUtils.getIPCountry();
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Navigate to Blogs tab in Asset dashboard") {
			ACNavigation.goToAssets();

			ACNavigation.switchTab(tabName = "Blogs");
		}

		task ("Change the time filter to Last 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Navigate to the Overview tab in blogs report entry") {
			ACNavigation.openItem(itemName = "Blogs AC Title");
		}

		task ("View the time filter of Views by Location map is Last 24 Hours") {
			ACTimeFilter.assertCurrentTimeFilterRange(
				cardName = "Views by Location",
				timeFilterRange = "Last 24 hours");
		}

		task ("View the views by location info shown in geomap") {
			ACUtils.viewNoResultsMessageNotPresent(noResultMessage = "There are no views on any location on the selected period.");

			ACCards.viewGeomapContainer(cardTitle = "Views by Location");

			ACCards.viewGeomapTableText(
				cardTitle = "Views by Location",
				leftText = "${country}",
				rightText = "1 100%");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8386 | Test Summary: Blogs views by technology card shows views by the expected browser"
	@priority = "5"
	test BlogsTechnologyCardShowsViewsByExpectedBrowser {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		task ("View the blog") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC and go to Blogs tab") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACNavigation.goToAssets();

			ACNavigation.switchTab(tabName = "Blogs");
		}

		task ("Go to the blogs overview") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACNavigation.openItem(itemName = "Blogs AC Title");
		}

		task ("Assert views by browsers metric") {
			ACNavigation.switchTabInCard(tabName = "Browsers");

			ACAssets.viewViewsByTechnologyTabActive(
				cardTitle = "Views by Technology",
				tabName = "Browsers");

			ACAssets.viewTechnologyBrowsersMetric(
				browserMetricValue = "Chrome",
				cardTitle = "Views by Technology",
				cssValue = "rgb(75, 155, 255)",
				percentageMetricValue = "100%");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8385 | Test Summary: Blogs views by technology card shows views by the expected device"
	@priority = "5"
	test BlogsTechnologyCardShowsViewsByExpectedDevice {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		task ("View the blog") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title,Blogs AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC and go to Blogs tab") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACNavigation.goToAssets();

			ACNavigation.switchTab(tabName = "Blogs");
		}

		task ("Go to the blogs overview") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACNavigation.openItem(itemName = "Blogs AC Title");
		}

		task ("Assert views by devices metric") {
			ACAssets.viewTechnologyDeviceViewsAndPercentage(
				actionValue = "2 Views",
				cardTitle = "Views by Technology",
				deviceName = "Desktop",
				percentageValue = "100%");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8382 | Test Summary: The blogs list is searchable"
	@ignore = "true"
	@priority = "5"
	test CanBlogsListSearchable {

		// AC Story ticket: LRAC-10405

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		ACUtils.createBlogsAndAddToPage(entryTitle = "Test 2");

		ACUtils.navigateToSitePage(
			actionType = "View Blog",
			documentTitleList = "Blogs AC Title,Test 2",
			pageName = "AC Page",
			siteName = "Site Name");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToAssets();

		ACNavigation.switchTab(tabName = "Blogs");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		ACUtils.searchBar(searchItem = "Blogs AC Title");

		ACUtils.viewNameList(nameList = "Blogs AC Title");

		ACUtils.searchBar(searchItem = "Test 2");

		ACUtils.viewNameList(nameList = "Test 2");

		ACUtils.searchBar(searchItem = "Should not be here");

		// This test is being ignored due to a history that makes changes to empty state messages.

		ACUtils.viewNoResultsMessage(noResultMessage = "There are no Blogs found.");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8113 | Test Summary: Assert clicking a blog in the blogs list navigates to the blogs overview page"
	@priority = "5"
	test CanNavigatesToBlogsOverviewPage {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		ACUtils.navigateToSitePage(
			actionType = "View Blog",
			documentTitleList = "Blogs AC Title,Blogs AC Title,Blogs AC Title,Blogs AC Title",
			pageName = "AC Page",
			siteName = "Site Name");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToAssets();

		ACNavigation.switchTab(tabName = "Blogs");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		ACNavigation.openItem(itemName = "Blogs AC Title");

		ACIndividualsDashboard.goToOverviewTab();

		ACNavigation.viewActiveSwitchTab(tabName = "Overview");

		for (var cardTitle : list "Visitors Behavior,Audience,Views by Location,Views by Technology,Asset Appears On") {
			ACCards.viewCards(cardTitle = "${cardTitle}");
		}

		ACAssets.viewVisitorsBehaviorMetric(
			metricTitle = "Views",
			metricValue = "4");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8383 | Test Summary: Custom Range time filter in Blogs assets page"
	@ignore = "true"
	@priority = "5"
	test CanUseCustomRangeBlogsAssetsPage {

		// AC Refactor: It is not possible to perform the assert because this test needs data from the past.
		// AC Refactor ticket: LRAC-8931

		task ("Connect DXP to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("View the blog") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close DXP, launch AC and switch the propety") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Go to Blogs assets") {
			ACNavigation.goToAssets();

			ACNavigation.switchTab(tabName = "Blogs");
		}

		task ("Assert blog on the Last 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACUtils.viewNameList(nameList = "Blogs AC Title");
		}

		task ("Assert custom time filter") {
			ACTimeFilter.setCustomRange(
				endDay = "13",
				endMonth = "July",
				endYear = "2020",
				startDay = "1",
				startMonth = "July",
				startYear = "2020");

			ACTimeFilter.assertCurrentTimeFilterRange(timeFilterRange = "Jul 1, 2020 - Jul 13, 2020");

			ACUtils.viewNoResultsMessage(noResultMessage = "No visitor data received from your assets");

			// Is not possible to assert the blog because this test needs data from the past.

		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8114 | Test Summary: Blogs known individuals list shows individuals who have viewed the blog"
	@priority = "5"
	test KnownIndividualsListShowsIndividualsWhoHaveViewedBlog {
		property analytics.cloud.upstream = "false";

		var usernameList = "ac,dxp,liferay";
		var emailList = "ac@liferay.com,dxp@liferay.com,liferay@liferay.com";
		var nameList = "ac ac,liferay liferay,dxp dxp";

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		for (var name : list "${usernameList}") {
			JSONUser.addUser(
				userEmailAddress = "${name}@liferay.com",
				userFirstName = "${name}",
				userLastName = "${name}",
				userScreenName = "${name}");
		}

		ACDXPSettings.syncNewContactData();

		ACUtils.navigateToSitePageWithUser(
			actionType = "View Blog",
			documentTitleList = "Blogs AC Title",
			emailList = "${emailList}",
			pageName = "AC Page",
			siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "userac@liferay.com",
			userFirstName = "userac",
			userLastName = "userac",
			userScreenName = "userac");

		ACUtils.navigateToSitePageWithUser(
			actionType = "View Blog",
			documentTitleList = "Blogs AC Title",
			emailList = "userac@liferay.com",
			pageName = "AC Page",
			siteName = "Site Name");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToAssets();

		ACNavigation.switchTab(tabName = "Blogs");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		ACNavigation.openItem(itemName = "Blogs AC Title");

		ACIndividualsDashboard.goToKnownIndividualsTab();

		ACNavigation.viewActiveSwitchTab(tabName = "Known Individuals");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		ACUtils.viewNameList(nameList = "${nameList}");

		AssertElementNotPresent(
			key_userName = "userac userac",
			locator1 = "ACUtils#NAME_LIST");
	}

	@description = "Bug: LRAC-7848 | Automation ID: LRAC-10601 | Test Summary: Number of Blog ratings is not getting negative when we delete a vote"
	@priority = "3"
	test RatingsNotGettingNegativeWhenDeleteVote {
		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Change blog rating type to star") {
			Ratings.configureRatingType(
				applications = "Blogs",
				portlet = "Ratings",
				ratingType = "Stars",
				siteName = "Site Name");
		}

		task ("View the blog page") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Choose a rating star for the blog") {
			Ratings.rateStar(ratingStarCount = "4");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigate to blog assets list") {
			ACNavigation.goToAssets();

			ACNavigation.switchTab(tabName = "Blogs");
		}

		task ("Change the time filter") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Check blog rating") {
			ACUtils.viewTableInformation(
				nameList = "Blogs AC Title",
				numberValueList = "8.00/10");
		}

		task ("Go to DXP") {
			ACUtils.launchDXP();
		}

		task ("View the blog page") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Delete the rating star for the DM") {
			Ratings.revokeStarsRating();
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigate to blog assets list") {
			ACNavigation.goToAssets();

			ACNavigation.switchTab(tabName = "Blogs");
		}

		task ("Change the time filter") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Check blog rating") {
			ACUtils.viewTableInformation(
				nameList = "Blogs AC Title",
				numberValueList = "0.00/10");
		}
	}

	@description = "View all blogs in the property in assets"
	@priority = "5"
	test ViewAllBlogsShownInAssetList {
		property portal.acceptance = "true";
		property portal.release = "true";

		ACUtils.createBlogsAndAddToPage(entryTitle = "Test 2");

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		ACUtils.navigateToSitePage(
			actionType = "View Blog",
			documentTitleList = "Blogs AC Title,Test 2",
			pageName = "AC Page",
			siteName = "Site Name");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToAssets();

		ACNavigation.switchTab(tabName = "Blogs");

		ACTimeFilter.clickTimeFilterButton();

		ACTimeFilter.setLast24Hours();

		ACUtils.searchBar(searchItem = "Blogs AC Title");

		ACUtils.viewNameList(nameList = "Blogs AC Title");

		ACUtils.searchBar(searchItem = "Test 2");

		ACUtils.viewNameList(nameList = "Test 2");
	}

}