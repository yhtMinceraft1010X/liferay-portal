@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a Web Content Display to page and display the custom event") {
			ACCustomEvents.createWCWithCustomEventAndAddToPage();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: LRAC-7868 | Automation ID: LRAC-10314 | Test Summary: Event Analysis in an empty state"
	@priority = "3"
	test AssertEventAnalysisEmptyState {
		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Assert there is '+' button under analyze") {
			var key_definitionsOptions = "event-analysis/create";

			if (IsElementPresent(locator1 = "ACSettings#DEFINITIONS_OPTIONS")) {
				Click(locator1 = "ACSettings#DEFINITIONS_OPTIONS");
			}

			AssertElementPresent(locator1 = "ACEventAnalysis#ADD_EVENT_BUTTON");
		}

		task ("Assert there is no '+' button under breakdown") {
			var key_sectionType = "breakdown";

			AssertElementNotPresent(locator1 = "ACEventAnalysis#ADD_ATTRIBUTE_BUTTON");
		}

		task ("Assert there is no '+' button under filter") {
			var key_sectionType = "filter";

			AssertElementNotPresent(locator1 = "ACEventAnalysis#ADD_ATTRIBUTE_BUTTON");
		}
	}

	@description = "Feature ID: LRAC-4266 | Automation ID: LRAC-10310 | Test Summary: Change chart date range"
	@ignore = "true"
	@priority = "4"
	test CanChangeChartDateRange {

		// AC Refactor: It is not possible to assert the chart because this test needs data from the past.

		var attributeName = "pageTitle";
		var dataSource = StringUtil.extractFirst("${assignedPropertyName}", " ");

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis by the all tab") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

		task ("Change the time filter to 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast30Days();
		}

		task ("Check the analysis result appears") {

			// It is not possible to assert the chart because this test needs data from the past.

			ACEventAnalysis.viewAnalysisInformation(informationValueList = "ac page - site name - ${dataSource}");
		}

		task ("Change the time filter to 24 hours") {
			ACTimeFilter.setCustomRange(
				endDay = "13",
				endMonth = "July",
				endYear = "2020",
				startDay = "1",
				startMonth = "July",
				startYear = "2020");
		}

		task ("Check the analysis result appears") {

			// It is not possible to assert the chart because this test needs data from the past.

			ACEventAnalysis.viewAnalysisInformation(informationValueList = "ac page - site name - ${dataSource}");
		}
	}

	@description = "Feature ID: LRAC-4266 | Automation ID: LRAC-10307 | Test Summary: Total Chart, Unique Chart and Average Chart data shown"
	@priority = "5"
	test CheckTotalAndUniqueAndAverageChartDataIsShown {
		property portal.upstream = "quarantine";

		// AC Quarantine Reason: The data in the event analysis taking a while to appear
		// AC Refactor ticket: LRAC-10527

		var attributeName = "pageTitle";
		var layoutNameList = "Custom 1,Custom 2";
		var dataSource = StringUtil.extractFirst("${assignedPropertyName}", " ");

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "3");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessions();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");
		}

		task ("Create new pages and place custom event fields") {
			for (var layoutName : list "${layoutNameList}") {
				ACUtils.addPage(layoutName = "${layoutName}");

				ACCustomEvents.addWCWithCustomEventToPage(layoutName = "${layoutName}");
			}
		}

		task ("Fill fields and make new interactions with custom event") {
			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "2");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessions();
		}

		task ("Fill fields and make new interactions with custom event") {
			ACUtils.navigateToSitePage(
				pageName = "Custom 1",
				siteName = "Site Name");

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

		task ("Change the time filter to 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Switch tab to total") {
			ACNavigation.switchTabInCard(tabName = "Total");
		}

		task ("Check that the chart appears for the total tab") {
			ACEventAnalysis.viewTotalNumberRelatedToColumnInformation(
				columnInformationValue = "ac page - site name - ${dataSource}",
				totalEventsValue = "3");

			ACEventAnalysis.viewTotalNumberRelatedToColumnInformation(
				columnInformationValue = "custom 2 - site name - ${dataSource}",
				totalEventsValue = "2");

			ACEventAnalysis.viewTotalNumberRelatedToColumnInformation(
				columnInformationValue = "custom 1 - site name - ${dataSource}",
				totalEventsValue = "1");
		}

		task ("Switch tab to unique") {
			ACNavigation.switchTabInCard(tabName = "Unique");
		}

		task ("Check that the chart appears for the unique tab") {
			ACEventAnalysis.viewTotalNumberRelatedToColumnInformation(
				columnInformationValue = "ac page - site name - ${dataSource}",
				totalEventsValue = "1");

			ACEventAnalysis.viewTotalNumberRelatedToColumnInformation(
				columnInformationValue = "custom 2 - site name - ${dataSource}",
				totalEventsValue = "1");

			ACEventAnalysis.viewTotalNumberRelatedToColumnInformation(
				columnInformationValue = "custom 1 - site name - ${dataSource}",
				totalEventsValue = "1");
		}

		task ("Switch tab to average") {
			ACNavigation.switchTabInCard(tabName = "Average");
		}

		task ("Check that the chart appears for the average tab") {
			ACEventAnalysis.viewTotalNumberRelatedToColumnInformation(
				columnInformationValue = "ac page - site name - ${dataSource}",
				totalEventsValue = "3");

			ACEventAnalysis.viewTotalNumberRelatedToColumnInformation(
				columnInformationValue = "custom 2 - site name - ${dataSource}",
				totalEventsValue = "2");

			ACEventAnalysis.viewTotalNumberRelatedToColumnInformation(
				columnInformationValue = "custom 1 - site name - ${dataSource}",
				totalEventsValue = "1");
		}
	}

	@description = "Feature ID: LRAC-4266 | Automation ID: LRAC-10292 | Test Summary: Creating Events from All tab, default tab and custom tab and Event Attributes"
	@priority = "5"
	test CreateEventAnalysisFromAllAndDefaultAndCustomTab {
		var attributeName = "pageTitle";
		var defaultEventName = "pageViewed";
		var dataSource = StringUtil.extractFirst("${assignedPropertyName}", " ");

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis by the all tab") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

		task ("Check the analysis result appears") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACEventAnalysis.viewAnalysisInformation(informationValueList = "ac page - site name - ${dataSource}");
		}

		task ("Remove the custom event from the analysis") {
			ACEventAnalysis.removeFromAnalysis(removeValue = "${customEventName}");
		}

		task ("Add the default event to analysis by the default tab") {
			ACEventAnalysis.addEvent(
				customEventName = "${defaultEventName}",
				tabName = "Default");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

		task ("Check the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "ac page - site name - ${dataSource}");
		}

		task ("Remove the default event from the analysis") {
			ACEventAnalysis.removeFromAnalysis(removeValue = "${defaultEventName}");
		}

		task ("Add the custom event for analysis by the custom tab") {
			ACEventAnalysis.addEvent(
				customEventName = "${customEventName}",
				tabName = "Custom");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

		task ("Check the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "ac page - site name - ${dataSource}");
		}
	}

	@description = "Feature ID: LRAC-4266 | Automation ID: LRAC-10304 | Test Summary: Edit Attribute Event name"
	@priority = "3"
	test EditEventName {
		var attributeName = "color";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				attributesName = "${attributeName}",
				attributesValue = "red",
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Click to add breakdown") {
			ACEventAnalysis.clickToAddBreakdownButton();
		}

		task ("Change the attribute display name") {
			ACEventAnalysis.searchEventAnalysis(searchItem = "${attributeName}");

			ACEventAnalysis.changeCustomEventDisplayName(
				editOption = "Description",
				elementName = "${attributeName}",
				newDisplayName = "${attributeName} Display Name");
		}

		task ("Click to add breakdown") {
			ACEventAnalysis.clickToAddBreakdownButton();
		}

		task ("Check that the name has changed") {
			ACEventAnalysis.searchEventAnalysis(searchItem = "${attributeName} Display Name");

			ACEventAnalysis.viewEventAnalysisList(eventList = "${attributeName} Display Name");
		}
	}

	@description = "Feature ID: LRAC-4266 | Automation ID: LRAC-10306 | Test Summary: Remove Attribute"
	@priority = "5"
	test RemoveAttribute {
		property test.name.skip.portal.instance = "CustomEventsEventAnalysis#RemoveAttribute";

		var attributeName = "pageTitle";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

		task ("Check the analysis result appears") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACEventAnalysis.viewAnalysisInformation(informationValueList = "ac page - site name - liferay dxp");
		}

		task ("Remove the breakdown from the analysis") {
			ACEventAnalysis.removeFromAnalysis(removeValue = "${attributeName}");
		}

		task ("Check that the breakdown information does not appear in the result") {
			ACEventAnalysis.viewAnalysisInformationNotPresent(informationValueList = "ac page - site name - liferay dxp");
		}

		task ("Check that the breakdown does not appear on the dashboard") {
			AssertElementNotPresent(
				key_attributeName = "${attributeName}",
				locator1 = "ACEventAnalysis#VIEW_DASHBOARD_INFORMATION");
		}

		task ("Check that the analysis result still appears even without the breakdown") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "${customEventName}");
		}
	}

	@description = "Feature ID: LRAC-4266 | Automation ID: LRAC-10301 | Test Summary: Search Event Attribute from Event tab"
	@priority = "3"
	test SearchEventAttributeInEventTab {
		property test.name.skip.portal.instance = "CustomEventsEventAnalysis#SearchEventAttributeInEventTab";

		var defaultAttributeName = "pageTitle";
		var customAttributeName = "category";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis by the all tab") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Click to add breakdown") {
			ACEventAnalysis.clickToAddBreakdownButton();
		}

		task ("Search for attribute and check that it appears") {
			ACEventAnalysis.searchEventAnalysis(searchItem = "${defaultAttributeName}");

			ACEventAnalysis.viewEventAnalysisList(eventList = "${defaultAttributeName}");
		}

		task ("Search for attribute and check that it appears") {
			ACEventAnalysis.searchEventAnalysis(searchItem = "${customAttributeName}");

			ACEventAnalysis.viewEventAnalysisList(eventList = "${customAttributeName}");
		}

		task ("Search for an attribute that doesn't exist and check that it doesn't appear") {
			ACEventAnalysis.searchEventAnalysis(searchItem = "acqa");

			ACUtils.viewGenericText(textValueList = "There are no items found.");
		}
	}

	@description = "Feature ID: LRAC-4266 | Automation ID: LRAC-10295 | Test Summary: Search for events in different tabs"
	@priority = "3"
	test SearchEventsInDifferentTabs {
		property test.name.skip.portal.instance = "CustomEventsEventAnalysis#SearchEventsInDifferentTabs";

		var defaultEventName = "pageViewed";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Click to add event and switch tab to all") {
			ACEventAnalysis.clickToAddEventButton();

			ACNavigation.switchTabInCard(tabName = "All");
		}

		task ("Search for default event in the all tab and check that it appears") {
			ACEventAnalysis.searchEventAnalysis(searchItem = "${defaultEventName}");

			ACEventAnalysis.viewEventAnalysisList(eventList = "${defaultEventName}");
		}

		task ("Search for custom event in the all tab and check that it appears") {
			ACEventAnalysis.searchEventAnalysis(searchItem = "${customEventName}");

			ACEventAnalysis.viewEventAnalysisList(eventList = "${customEventName}");
		}

		task ("Switch tab to default and search for default event in the default tab and check that it appears") {
			ACNavigation.switchTabInCard(tabName = "Default");

			ACEventAnalysis.searchEventAnalysis(searchItem = "${defaultEventName}");

			ACEventAnalysis.viewEventAnalysisList(eventList = "${defaultEventName}");
		}

		task ("Search for custom event in the default tab and check that it doesn't appear") {
			ACEventAnalysis.searchEventAnalysis(searchItem = "${customEventName}");

			ACEventAnalysis.viewEventAnalysisListNotPresent(eventList = "${customEventName}");
		}

		task ("Switch tab to Custom and search for default event in the custom tab and check that it doesn't appear") {
			ACNavigation.switchTabInCard(tabName = "Custom");

			ACEventAnalysis.searchEventAnalysis(searchItem = "${defaultEventName}");

			ACEventAnalysis.viewEventAnalysisListNotPresent(eventList = "${defaultEventName}");
		}

		task ("Search for custom event in the custom tab and check that it appears") {
			ACEventAnalysis.searchEventAnalysis(searchItem = "${customEventName}");

			ACEventAnalysis.viewEventAnalysisList(eventList = "${customEventName}");
		}
	}

	@description = "Feature ID: LRAC-4266 | Automation ID: LRAC-10311 | Test Summary: Events are in alphabetical order and attributes are in alphabetical order"
	@priority = "4"
	test ViewEventsAreListedInAlphabeticalOrder {
		property test.name.skip.portal.instance = "CustomEventsEventAnalysis#ViewEventsAreListedInAlphabeticalOrder";

		var attributeName = "assetId";
		var defaultEventName = "assetClicked";

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Click to access the event list and check the event position in the list") {
			ACEventAnalysis.clickToAddEventButton();

			AssertTextEquals(
				index = "1",
				locator1 = "ACEventAnalysis#LIST_ORDER",
				value1 = "${defaultEventName}");
		}

		task ("Change the event display name") {
			ACEventAnalysis.changeCustomEventDisplayName(
				editOption = "Description",
				elementName = "${defaultEventName}",
				newDisplayName = "Z${defaultEventName}");
		}

		task ("Click to access the event list and check the new event position in the list") {
			ACEventAnalysis.clickToAddEventButton();

			AssertTextEquals(
				index = "15",
				locator1 = "ACEventAnalysis#LIST_ORDER",
				value1 = "Z${defaultEventName}");
		}

		task ("Add the default event to analysis") {
			Click(
				key_buttonName = "Z${defaultEventName}",
				locator1 = "ACUtils#GENERIC_BUTTON");
		}

		task ("Click to access the attribute list and check the attribute position in the list") {
			ACEventAnalysis.clickToAddBreakdownButton();

			AssertTextEquals(
				index = "16",
				locator1 = "ACEventAnalysis#LIST_ORDER",
				value1 = "${attributeName}");
		}

		task ("Change the attribute display name") {
			ACEventAnalysis.changeCustomEventDisplayName(
				editOption = "Description",
				elementName = "${attributeName}",
				newDisplayName = "Z${attributeName}");
		}

		task ("Click to access the attribute list and check the new attribute position in the list") {
			ACEventAnalysis.clickToAddBreakdownButton();

			AssertTextEquals(
				index = "27",
				locator1 = "ACEventAnalysis#LIST_ORDER",
				value1 = "Z${attributeName}");
		}
	}

}