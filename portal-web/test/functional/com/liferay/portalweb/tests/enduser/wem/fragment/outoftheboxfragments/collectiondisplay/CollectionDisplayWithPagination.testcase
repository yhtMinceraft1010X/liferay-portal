@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a use case for LPS-146171. Check the behaviors when user define different Maximum Number of Pages to Display."
	@priority = "4"
	test ConfigureMaximumNumberOfPagesToDisplay {
		task ("Given a page creator has a content page with Collection Display fragment then select a dynamic collection") {
			task ("Add 6 web contents") {
				var i = "1";

				while ("${i}" != "7") {
					JSONWebcontent.addWebContent(
						content = "Web Content Content ${i}",
						groupName = "Test Site Name",
						title = "Web Content Title ${i}");

					var i = ${i} + 1;
				}
			}

			task ("Add a dynamic collection for All Types") {
				JSONAssetlist.addDynamicAssetListEntryWithItemType(
					groupName = "Test Site Name",
					itemType = "All Types",
					title = "Dynamic Collection");
			}

			task ("Add a Collection Display to page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Content Display",
					fragmentName = "Collection Display");
			}

			task ("Select the dynamic collection in Collection Display") {
				PageEditor.editCollectionDisplay(
					assetListName = "Dynamic Collection",
					fragmentName = "Collection Display");
			}
		}

		task ("When the page creator changes the Maximum Number of Items per Page to 1") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				maxNumberOfItemsPerPage = "1",
				selectedName = "Dynamic Collection");
		}

		task ("Then the page creator could view 6 pages shown in Collection Display") {
			for (var pageNumber : list "1,2,3,...,6") {
				AssertVisible(
					key_pageNumber = "${pageNumber}",
					locator1 = "Pagination#ANY_PAGE");
			}
		}

		task ("When the page creator unchecks the Display All Pages") {
			Uncheck.uncheckNotVisible(
				checkboxName = "Display All Pages",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("Then the page creator could view the Maximum Number of Pages to Display is 5") {
			AssertTextEquals(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = "5");

			for (var pageNumber : list "1,2,3,4,5") {
				AssertVisible(
					key_pageNumber = "${pageNumber}",
					locator1 = "Pagination#ANY_PAGE");
			}

			AssertElementNotPresent(
				key_pageNumber = "6",
				locator1 = "Pagination#ANY_PAGE");
		}

		task ("When the page creator changes the Maximum Number of Pages to Display is 6") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				maxNumberOfPagesToDisplay = "6",
				selectedName = "Dynamic Collection");
		}

		task ("Then the page creator could view the page 6 shown in pagination bar") {
			for (var pageNumber : list "1,2,3,...,6") {
				AssertVisible(
					key_pageNumber = "${pageNumber}",
					locator1 = "Pagination#ANY_PAGE");
			}
		}

		task ("When the page creator changes the Maximum Number of Pages to Display is 7") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				maxNumberOfPagesToDisplay = "7",
				selectedName = "Dynamic Collection");
		}

		task ("Then the page creator could only view 6 pages shown in Collection Display") {
			for (var pageNumber : list "1,2,3,...,6") {
				AssertVisible(
					key_pageNumber = "${pageNumber}",
					locator1 = "Pagination#ANY_PAGE");
			}

			AssertElementNotPresent(
				key_pageNumber = "7",
				locator1 = "Pagination#ANY_PAGE");
		}

		task ("When the page creator tries to type 0 in the Maximum Number of Pages to Display field") {
			TripleClick(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD");

			Type.sendKeys(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = "0");
		}

		task ("Then the Maximum Number of Pages to Display field should be empty") {
			AssertTextEquals(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = "");
		}

		task ("When the page creator tries to type non-digit characters in the Maximum Number of Pages to Display field") {
			Type.sendKeys(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = "dxp");
		}

		task ("Then the Maximum Number of Pages to Display field should be empty") {
			AssertTextEquals(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = "");
		}

		task ("When the page creator triggers auto save after leave the Maximum Number of Pages to Display field empty") {
			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");
		}

		task ("Then the value of Maximum Number of Pages to Display becomes to 1") {
			AssertTextEquals(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = "1");

			AssertVisible(
				key_pageNumber = "1",
				locator1 = "Pagination#ANY_PAGE");

			AssertElementNotPresent(
				key_pageNumber = "2",
				locator1 = "Pagination#ANY_PAGE");
		}

		task ("When the page creator triggers auto save after typing negative number to the Maximum Number of Pages to Display field") {
			TripleClick(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD");

			Type.sendKeys(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = "-2");

			Click(
				key_sidebarButton = "Browser",
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_TITLE");
		}

		task ("Then the negative character should be removed") {
			AssertTextEquals(
				key_fieldLabel = "Maximum Number of Pages to Display",
				locator1 = "FormFields#NUMBER_FIELD",
				value1 = "2");

			for (var pageNumber : list "1,2") {
				AssertVisible(
					key_pageNumber = "${pageNumber}",
					locator1 = "Pagination#ANY_PAGE");
			}
		}
	}

	@description = "This is a use case for LPS-149178. The user could navigate through pages in Collection Display with pagination and Display All Collection Items."
	@priority = "4"
	test NavigateToPagesInCollectionDisplayWithDisplayAllCollectionItems {
		property portal.acceptance = "true";

		task ("Add 6 web contents") {
			for (var i : list "1,2,3,4,5,6") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content ${i}",
					groupName = "Test Site Name",
					title = "Web Content Title ${i}");
			}
		}

		task ("Add a dynamic collection for All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection in Collection Display with Numeric pagination and Display All Pages") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				displayAllPages = "true",
				fragmentName = "Collection Display",
				listItemStyle = "Title",
				maxNumberOfItemsPerPage = "5",
				styleDisplay = "Bordered List");
		}

		task ("View only 5 web contents shown in page 1 of Collection Display in page editor") {
			var n = "1";

			for (var i : list "6,5,4,3,2") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='Web Content Title ${i}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST");

				var n = ${n} + 1;
			}
		}

		task ("View the sixth web content shown in page 2 of Collection Display in page editor") {
			Click(
				key_pageNumber = "2",
				locator1 = "Pagination#ANY_PAGE");

			AssertVisible(
				key_entryContent = "[normalize-space(text())='Web Content Title 1']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST");

			PageEditor.clickPublish();
		}

		task ("View only 5 web contents shown in page 1 of Collection Display at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			var n = "1";

			for (var i : list "6,5,4,3,2") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='Web Content Title ${i}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}

		task ("View the sixth web content shown in page 2 of Collection Display at view mode") {
			Click(
				key_pageNumber = "2",
				locator1 = "Pagination#ANY_PAGE");

			AssertVisible(
				key_entryContent = "[normalize-space(text())='Web Content Title 1']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");
		}
	}

	@description = "This is a use case for LPS-123825. The user could navigate through pages in Collection Display with the Numeric pagination."
	@priority = "5"
	@uitest
	test NavigateToPagesInCollectionDisplayWithNumericPagination {
		property portal.acceptance = "true";

		task ("Add 5 web contents") {
			for (var i : list "1,2,3,4,5") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content ${i}",
					groupName = "Test Site Name",
					title = "Web Content Title ${i}");
			}
		}

		task ("Add 5 blogs entries") {
			for (var i : list "1,2,3,4,5") {
				HeadlessBlog.addBlogEntry(
					content = "Blogs Entry Content ${i}",
					groupName = "Test Site Name",
					title = "Blogs Entry Title ${i}");
			}
		}

		task ("Add 5 document entries") {
			for (var i : list "1,2,3,4,5") {
				JSONDocument.addFileWithUploadedFile(
					dmDocumentTitle = "Document Title ${i}",
					groupName = "Test Site Name",
					mimeType = "text/plain",
					sourceFileName = "Document_${i}.txt");
			}
		}

		task ("Add a dynamic collection for All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("View the Numeric is selected in Pagination field") {
			AssertSelectedLabel(
				key_fieldLabel = "Pagination",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Numeric");
		}

		task ("Select the 15 in Maximum Number of Items field and Select the 15 in Maximum Number of Items per Page field") {
			PageEditor.editCollectionDisplay(
				displayAllPages = "false",
				fragmentName = "Collection Display",
				maxNumberOfItemsPerPage = "15",
				maxNumberOfPagesToDisplay = "1",
				selectedName = "Dynamic Collection");
		}

		task ("View all assets shown in Collection Display") {
			var n = "1";

			for (var i : list "5,4,3,2,1") {
				PageEditor.viewCollectionItem(
					assetTitle = "Document Title ${i}",
					row = "${n}");

				var n = ${n} + 1;
			}

			var n = "6";

			for (var i : list "5,4,3,2,1") {
				PageEditor.viewCollectionItem(
					assetTitle = "Blogs Entry Title ${i}",
					row = "${n}");

				var n = ${n} + 1;
			}

			var n = "11";

			for (var i : list "5,4,3,2,1") {
				PageEditor.viewCollectionItem(
					assetTitle = "Web Content Title ${i}",
					row = "${n}");

				var n = ${n} + 1;
			}
		}

		task ("View only the page 1 shown in Collection Display") {
			AssertVisible(
				key_pageNumber = "1",
				locator1 = "Pagination#ANY_PAGE");

			AssertElementNotPresent(
				key_pageNumber = "2",
				locator1 = "Pagination#ANY_PAGE");
		}

		task ("View the left and right buttons are disabled") {
			AssertElementPresent(
				locator1 = "Pagination#ICON_DISABLED",
				type = "angle-left");

			AssertElementPresent(
				locator1 = "Pagination#ICON_DISABLED",
				type = "angle-right");
		}

		task ("Select the 5 in Maximum Number of Items per Page field") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				maxNumberOfItemsPerPage = "5",
				maxNumberOfPagesToDisplay = "3",
				selectedName = "Dynamic Collection");
		}

		task ("View only the 5 documents shown in current page of Collection Display") {
			var n = "1";

			for (var i : list "5,4,3,2,1") {
				PageEditor.viewCollectionItem(
					assetTitle = "Document Title ${i}",
					row = "${n}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "6",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");
		}

		task ("Add a Heading fragment into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Document Title 5",
				fragmentName = "Heading");
		}

		task ("Map the Title field to editable field") {
			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Navigate to page 3 in Collection Display") {
			Click(
				key_pageNumber = "3",
				locator1 = "Pagination#ANY_PAGE");
		}

		task ("View only the 5 web contents shown in current page of Collection Display") {
			var n = "1";

			for (var i : list "5,4,3,2,1") {
				PageEditor.viewFragmentEditableText(
					editableText = "Web Content Title ${i}",
					fragmentName = "Heading",
					id = "element-text",
					position = "${n}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "6",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");
		}

		task ("Navigate to previous page in Collection Display") {
			Click(
				locator1 = "Pagination#ICON",
				type = "angle-left");
		}

		task ("View only the 5 blogs entries shown in current page of Collection Display") {
			var n = "1";

			for (var i : list "5,4,3,2,1") {
				PageEditor.viewFragmentEditableText(
					editableText = "Blogs Entry Title ${i}",
					fragmentName = "Heading",
					id = "element-text",
					position = "${n}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "6",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");
		}

		task ("Open the Preview modal") {
			PageEditor.openPreviewMode();
		}

		task ("View only the 5 documents shown in current page of Collection Display") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			var n = "1";

			for (var i : list "5,4,3,2,1") {
				ContentPages.viewFragmentText(
					fragmentName = "heading",
					id = "element-text",
					position = "${n}",
					text = "Document Title ${i}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "6",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");
		}

		task ("Navigate to page 2 in Collection Display") {
			Click(
				key_pageNumber = "2",
				locator1 = "Pagination#ANY_PAGE");
		}

		task ("View only the 5 blogs entries shown in current page of Collection Display") {
			var n = "1";

			for (var i : list "5,4,3,2,1") {
				ContentPages.viewFragmentText(
					fragmentName = "heading",
					id = "element-text",
					position = "${n}",
					text = "Blogs Entry Title ${i}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "6",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");
		}

		task ("Navigate to next page in Collection Display") {
			Click(
				locator1 = "Pagination#ICON",
				type = "angle-right");
		}

		task ("View only the 5 web contents shown in current page of Collection Display") {
			var n = "1";

			for (var i : list "5,4,3,2,1") {
				ContentPages.viewFragmentText(
					fragmentName = "heading",
					id = "element-text",
					position = "${n}",
					text = "Web Content Title ${i}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "6",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Navigate to page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("View only the 5 documents shown in current page of Collection Display") {
			var n = "1";

			for (var i : list "5,4,3,2,1") {
				ContentPages.viewFragmentText(
					fragmentName = "heading",
					id = "element-text",
					position = "${n}",
					text = "Document Title ${i}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "6",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");
		}

		task ("Navigate to page 3 in Collection Display") {
			Click(
				key_pageNumber = "3",
				locator1 = "Pagination#ANY_PAGE");
		}

		task ("View only the 5 web contents shown in current page of Collection Display") {
			var n = "1";

			for (var i : list "5,4,3,2,1") {
				ContentPages.viewFragmentText(
					fragmentName = "heading",
					id = "element-text",
					position = "${n}",
					text = "Web Content Title ${i}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "6",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");
		}

		task ("Navigate to previous page in Collection Display") {
			Click(
				locator1 = "Pagination#ICON",
				type = "angle-left");
		}

		task ("View only the 5 blogs entries shown in current page of Collection Display") {
			var n = "1";

			for (var i : list "5,4,3,2,1") {
				ContentPages.viewFragmentText(
					fragmentName = "heading",
					id = "element-text",
					position = "${n}",
					text = "Blogs Entry Title ${i}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "6",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");
		}
	}

	@description = "This is a use case for LPS-123825. The user could navigate through pages in Collection Display with the Simple pagination."
	@priority = "5"
	@uitest
	test NavigateToPagesInCollectionDisplayWithSimplePagination {
		property portal.acceptance = "true";

		task ("Add 5 web contents") {
			for (var i : list "1,2,3,4,5") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content ${i}",
					groupName = "Test Site Name",
					title = "Web Content Title ${i}");
			}
		}

		task ("Add 5 blogs entries") {
			for (var i : list "1,2,3,4,5") {
				HeadlessBlog.addBlogEntry(
					content = "Blogs Entry Content ${i}",
					groupName = "Test Site Name",
					title = "Blogs Entry Title ${i}");
			}
		}

		task ("Add 5 document entries") {
			for (var i : list "1,2,3,4,5") {
				JSONDocument.addFileWithUploadedFile(
					dmDocumentTitle = "Document Title ${i}",
					groupName = "Test Site Name",
					mimeType = "text/plain",
					sourceFileName = "Document_${i}.txt");
			}
		}

		task ("Add a dynamic collection for All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Add a Heading fragment into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Document Title 5",
				fragmentName = "Heading");
		}

		task ("Map the Title field to editable field") {
			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("View the Numeric is selected in Pagination field") {
			PageEditor.gotoConfiguration(fragmentName = "Collection Display");

			AssertSelectedLabel(
				key_fieldLabel = "Pagination",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Numeric");
		}

		task ("View the Previous and Next buttons not shown in Collection Display") {
			for (var buttonName : list "Previous,Next") {
				AssertElementNotPresent(
					key_text = "${buttonName}",
					locator1 = "Button#ANY");
			}
		}

		task ("Select the Simple in Pagination field, Select the 15 in Maximum Number of Items field and Select the 15 in Maximum Number of Items per Page field") {
			PageEditor.editCollectionDisplay(
				displayAllPages = "false",
				fragmentName = "Collection Display",
				maxNumberOfItemsPerPage = "15",
				maxNumberOfPagesToDisplay = "1",
				pagination = "Simple",
				selectedName = "Dynamic Collection");
		}

		task ("View all assets shown in Collection Display") {
			var n = "1";

			for (var i : list "5,4,3,2,1") {
				PageEditor.viewFragmentEditableText(
					editableText = "Document Title ${i}",
					fragmentName = "Heading",
					id = "element-text",
					position = "${n}");

				var n = ${n} + 1;
			}

			var n = "6";

			for (var i : list "5,4,3,2,1") {
				PageEditor.viewFragmentEditableText(
					editableText = "Blogs Entry Title ${i}",
					fragmentName = "Heading",
					id = "element-text",
					position = "${n}");

				var n = ${n} + 1;
			}

			var n = "11";

			for (var i : list "5,4,3,2,1") {
				PageEditor.viewFragmentEditableText(
					editableText = "Web Content Title ${i}",
					fragmentName = "Heading",
					id = "element-text",
					position = "${n}");

				var n = ${n} + 1;
			}
		}

		task ("View the Previous and Next buttons are disabled") {
			for (var buttonName : list "Previous,Next") {
				AssertElementPresent(
					key_text = "${buttonName}",
					locator1 = "Button#ANY_DISABLED");
			}
		}

		task ("Select the 5 in Maximum Number of Items per Page field") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				maxNumberOfItemsPerPage = "5",
				maxNumberOfPagesToDisplay = "3",
				selectedName = "Dynamic Collection");
		}

		task ("View only the 5 documents shown in current page of Collection Display") {
			var n = "1";

			for (var i : list "5,4,3,2,1") {
				PageEditor.viewFragmentEditableText(
					editableText = "Document Title ${i}",
					fragmentName = "Heading",
					id = "element-text",
					position = "${n}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "6",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");
		}

		task ("Navigate to the Next page of Collection Display") {
			Click(
				key_text = "Next",
				locator1 = "Button#ANY");
		}

		task ("View only the 5 blogs entries shown in current page of Collection Display") {
			var n = "1";

			for (var i : list "5,4,3,2,1") {
				PageEditor.viewFragmentEditableText(
					editableText = "Blogs Entry Title ${i}",
					fragmentName = "Heading",
					id = "element-text",
					position = "${n}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "6",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");
		}

		task ("Navigate to the Next page of Collection Display") {
			Click(
				key_text = "Next",
				locator1 = "Button#ANY");
		}

		task ("View only the 5 web contents shown in current page of Collection Display") {
			var n = "1";

			for (var i : list "5,4,3,2,1") {
				PageEditor.viewFragmentEditableText(
					editableText = "Web Content Title ${i}",
					fragmentName = "Heading",
					id = "element-text",
					position = "${n}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "6",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");
		}

		task ("Open the Preview modal") {
			PageEditor.openPreviewMode();
		}

		task ("View only the 5 documents shown in current page of Collection Display") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			var n = "1";

			for (var i : list "5,4,3,2,1") {
				ContentPages.viewFragmentText(
					fragmentName = "heading",
					id = "element-text",
					position = "${n}",
					text = "Document Title ${i}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "6",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");
		}

		task ("Navigate to the Next page of Collection Display") {
			Click(
				key_text = "Next",
				locator1 = "Button#ANY");
		}

		task ("View only the 5 blogs entries shown in current page of Collection Display") {
			var n = "1";

			for (var i : list "5,4,3,2,1") {
				ContentPages.viewFragmentText(
					fragmentName = "heading",
					id = "element-text",
					position = "${n}",
					text = "Blogs Entry Title ${i}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "6",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");
		}

		task ("Navigate to the Next page of Collection Display") {
			Click(
				key_text = "Next",
				locator1 = "Button#ANY");
		}

		task ("View only the 5 web contents shown in current page of Collection Display") {
			var n = "1";

			for (var i : list "5,4,3,2,1") {
				ContentPages.viewFragmentText(
					fragmentName = "heading",
					id = "element-text",
					position = "${n}",
					text = "Web Content Title ${i}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "6",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Navigate to page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("View only the 5 documents shown in current page of Collection Display") {
			var n = "1";

			for (var i : list "5,4,3,2,1") {
				ContentPages.viewFragmentText(
					fragmentName = "heading",
					id = "element-text",
					position = "${n}",
					text = "Document Title ${i}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "6",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");
		}

		task ("Navigate to the Next page of Collection Display") {
			Click(
				key_text = "Next",
				locator1 = "Button#ANY");
		}

		task ("View only the 5 blogs entries shown in current page of Collection Display") {
			var n = "1";

			for (var i : list "5,4,3,2,1") {
				ContentPages.viewFragmentText(
					fragmentName = "heading",
					id = "element-text",
					position = "${n}",
					text = "Blogs Entry Title ${i}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "6",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");
		}

		task ("Navigate to the Next page of Collection Display") {
			Click(
				key_text = "Next",
				locator1 = "Button#ANY");
		}

		task ("View only the 5 web contents shown in current page of Collection Display") {
			var n = "1";

			for (var i : list "5,4,3,2,1") {
				ContentPages.viewFragmentText(
					fragmentName = "heading",
					id = "element-text",
					position = "${n}",
					text = "Web Content Title ${i}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "6",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");
		}
	}

	@description = "This is a use case for LPS-146171. Check the default settings of Collection Display after selecting collection or collection provider."
	@priority = "5"
	test ViewDefaultSettingsOfCollectionDisplayWithCollection {
		task ("Given a page creator has a content page with Collection Display fragment") {
			task ("Add 21 web contents") {
				var i = "1";

				while ("${i}" != "22" && (maxIterations = "25")) {
					JSONWebcontent.addWebContent(
						content = "Web Content Content ${i}",
						groupName = "Test Site Name",
						title = "Web Content Title ${i}");

					var i = ${i} + 1;
				}
			}

			task ("Add a dynamic collection for All Types") {
				JSONAssetlist.addDynamicAssetListEntryWithItemType(
					groupName = "Test Site Name",
					itemType = "All Types",
					title = "Dynamic Collection");
			}

			task ("Add a Collection Display to page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Content Display",
					fragmentName = "Collection Display");
			}
		}

		task ("When the page creator selects a dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Then the page creator could view the default settings of Collection Display") {
			task ("View the pagination of Collection Display is Numeric") {
				for (var pageNumber : list "1,2") {
					AssertVisible(
						key_pageNumber = "${pageNumber}",
						locator1 = "Pagination#ANY_PAGE");
				}
			}

			task ("View the Display All Pages is checked") {
				AssertChecked.assertCheckedNotVisible(
					checkboxName = "Display All Pages",
					locator1 = "Checkbox#ANY_CHECKBOX");
			}

			task ("View the Maximum Number of Items per Page is 20") {
				InputField.viewText(
					fieldLabel = "Maximum Number of Items per Page",
					text = "20");
			}
		}

		task ("When the page creator changes the Maximum Number of Items per Page to 21") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				maxNumberOfItemsPerPage = "21",
				selectedName = "Dynamic Collection");
		}

		task ("Then the page creator could view warning message on the bottom of Collection Display") {
			AssertVisible(
				key_alertInfo = "In edit mode, the number of elements displayed is limited to 20 due to performance.",
				key_fragmentName = "Collection Display",
				locator1 = "Fragment#ALERT_INFO");
		}
	}

	@description = "This is a use case for LPS-146171.2 Check the default settings of Collection Display with None pagination."
	@priority = "4"
	test ViewDefaultSettingsOfCollectionDisplayWithNonePagination {
		task ("Given a page creator has a content page with Collection Display fragment then select a dynamic collection") {
			task ("Add a web content") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = "Test Site Name",
					title = "Web Content Title");
			}

			task ("Add a dynamic collection for All Types") {
				JSONAssetlist.addDynamicAssetListEntryWithItemType(
					groupName = "Test Site Name",
					itemType = "All Types",
					title = "Dynamic Collection");
			}

			task ("Add a Collection Display to page") {
				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Content Display",
					fragmentName = "Collection Display");
			}

			task ("Select the dynamic collection in Collection Display") {
				PageEditor.editCollectionDisplay(
					assetListName = "Dynamic Collection",
					fragmentName = "Collection Display");
			}
		}

		task ("When the page creator changes the pagination to None") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				pagination = "None",
				selectedName = "Dynamic Collection");
		}

		task ("Then the page creator could view the default settings of Collection Display") {
			task ("View the page number, next and previous buttons not shown in Collection Display") {
				AssertElementNotPresent(
					key_pageNumber = "1",
					locator1 = "Pagination#ANY_PAGE");

				AssertElementNotPresent(
					locator1 = "Pagination#ICON",
					type = "angle-left");

				AssertElementNotPresent(
					locator1 = "Pagination#ICON",
					type = "angle-right");
			}

			task ("View the Display All Collection Items is unchecked") {
				AssertNotChecked.assertNotCheckedNotVisible(
					checkboxName = "Display All Collection Items",
					locator1 = "Checkbox#ANY_CHECKBOX");
			}

			task ("View the Maximum Number of Items to Display is 5") {
				AssertTextEquals(
					key_fieldLabel = "Maximum Number of Items to Display",
					locator1 = "FormFields#NUMBER_FIELD",
					value1 = "5");
			}

			task ("View warning message shown below the Maximum Number of Items to Display field") {
				AssertTextEquals(
					locator1 = "PageEditor#FRAGMENT_SIDEBAR_SECONDARY_TEXT",
					value1 = "Setting a value above 200 can affect page performance severely.");
			}
		}
	}

}