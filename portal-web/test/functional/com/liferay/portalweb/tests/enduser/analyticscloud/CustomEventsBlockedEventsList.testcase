@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: LRAC-6433 | Automation ID: LRAC-10166 | Test Summary: Search Events Blocked List"
	@ignore = "true"
	@priority = "3"
	test BlockedEventsListSearchable {

		// AC Quarantine Reason: The data in the event analysis taking a while to appear
		// AC Refactor ticket: LRAC-10599

		task ("Add a Web Content Display to page and display the custom event") {
			ACCustomEvents.createWCWithCustomEventAndAddToPage();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Block custom event") {
			ACCustomEvents.blockCustomEvent(customEventName = "${customEventName}");
		}

		task ("Navigation to block custom event list") {
			ACCustomEvents.openBlockCustomEventList();
		}

		task ("Search for the name of the custom event that was blocked in block list") {
			ACUtils.searchBar(searchItem = "${customEventName}");

			ACUtils.viewNameList(nameList = "${customEventName}");
		}

		task ("Search for the name of the custom event that was not blocked in block list") {
			ACUtils.searchBar(searchItem = "DXP");

			ACUtils.viewNoResultsMessage(noResultMessage = "There are no items found.");
		}
	}

	@description = "Bug: LRAC-10359 | Automation ID: LRAC-10360 | Test Summary: Sort blocked events by Event Name and Last Seen"
	@priority = "4"
	test CanSortBlockedEventsByNameAndLastSeen {
		property test.name.skip.portal.instance = "CustomEventsBlockedEventsList#CanSortBlockedEventsByNameAndLastSeen";

		task ("Add a Web Content Display to page and display the custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createWCWithCustomEventAndAddToPage(
				customEventName = "${customEventName}",
				customEventsNumber = "3");
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Click on the button to send the events") {
			ACCustomEvents.createNCustomEvents();
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Block all custom events") {
			ACUtils.viewPartialNameList(nameList = "${customEventName}");

			ACCustomEvents.blockAllCustomEvents();
		}

		task ("Navigation to block custom event list") {
			ACCustomEvents.openBlockCustomEventList();
		}

		task ("Order the list by Last Seen and check if the custom event is present") {
			for (var n : list "1,2") {
				ACUtils.orderAnyTable(columnName = "Last Seen");

				ACUtils.viewPartialNameList(nameList = "${customEventName}");
			}
		}
	}

	@description = "Feature ID: LRAC-6433 | Automation ID: LRAC-10164 | Test Summary: Check custom event list and blocked event list when more than 100 events are created"
	@priority = "5"
	test CheckBlockedEventsListWhenMore100EventsCreated {
		property test.name.skip.portal.instance = "CustomEventsBlockedEventsList#CheckBlockedEventsListWhenMore100EventsCreated";

		task ("Add a Web Content Display to page and display the custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createWCWithCustomEventAndAddToPage(
				customEventName = "${customEventName}",
				customEventsNumber = "101");
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Click on the button to send the events") {
			ACCustomEvents.createNCustomEvents();
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Check the custom event limit reached message in the list") {
			ACCustomEvents.viewAlertLimitReached();
		}

		task ("Check that the list only has 100 custom events and navigate to the list of blocked custom events") {
			ACUtils.viewResultsMessage(results = "Showing 1 to 20 of 100 entries.");

			ACUtils.clickAnyButton(button = "View Block List");
		}

		task ("Search for the name of the custom event that was blocked in block list") {
			ACUtils.searchBar(searchItem = "${customEventName}");

			ACUtils.viewPartialNameList(nameList = "${customEventName}");
		}

		task ("Try to unblock a custom event with the list having reached the limit") {
			ACCustomEvents.unblockAllCustomEvents();

			Alert.viewErrorMessage(errorMessage = "Error:Your workspace is over the event limit. Please remove some events from the allow list to continue. Visit our documentation to learn more.");

			ACUtils.viewPartialNameList(nameList = "${customEventName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.backNavigation(pageName = "Events");

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Check that the list only has 100 custom events") {
			ACUtils.viewResultsMessage(results = "Showing 1 to 20 of 100 entries.");
		}
	}

}