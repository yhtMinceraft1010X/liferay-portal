@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();

		ACUtils.addSiteAndPage();

		ACUtils.createBlogsAndAddToPage();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");

			ACUtils.tearDownAC();
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8370 | Test Summary: 180 Days time period filter in Interests List"
	@ignore = "true"
	@priority = "3"
	test CanTimeFilterUse180DaysInInterestsList {

		// AC Refactor: data doesn't appear on time and the test needs data from a past date
		// AC Refactor ticket: LRAC-8884

		task ("Connect DXP to Analytics Cloud and get the property name") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("View the blog") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close Sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Navigate to AC workspace") {
			ACUtils.launchAC();
		}

		task ("Navigate to Interests tab in Sites") {
			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACNavigation.goToSites();

			ACNavigation.switchTab(tabName = "Interests");
		}

		task ("Set time filter use 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			// Unable to perform the declaration because the data does not appear at the time

		}

		task ("Set time filter use 180Days") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast180Days();
		}

		task ("Assert Time Filter set Last 180 days") {

			// It is not possible to perform the assert because this test needs data from the past

			ACTimeFilter.assertCurrentTimeFilterRange(timeFilterRange = "Last 180 days");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8372 | Test Summary: Custom Range time period filter in Interests List"
	@ignore = "true"
	@priority = "5"
	test CanTimeFilterUseCustomRangeInInterestsList {

		// AC Refactor: data doesn't appear on time and the test needs data from a past date
		// AC Refactor ticket: LRAC-8885

		task ("Connect DXP to Analytics Cloud and get the property name") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("View the blog") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close Sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Navigate to AC workspace") {
			ACUtils.launchAC();
		}

		task ("Navigate to Interests tab in Sites") {
			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACNavigation.goToSites();

			ACNavigation.switchTab(tabName = "Interests");
		}

		task ("Set time filter use 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			// Unable to perform the declaration because the data does not appear at the time

		}

		task ("Set time filter use Custom Range") {
			ACTimeFilter.setCustomRange(
				endDay = "13",
				endMonth = "July",
				endYear = "2020",
				startDay = "1",
				startMonth = "July",
				startYear = "2020");
		}

		task ("Assert result returns") {

			// It is not possible to perform the assert because this test needs data from the past

			ACTimeFilter.assertCurrentTimeFilterRange(timeFilterRange = "Jul 1, 2020 - Jul 13, 2020");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8371 | Test Summary: Last Year time period filter in Interests List"
	@ignore = "true"
	@priority = "3"
	test CanTimeFilterUseLastYearInInterestsList {

		// AC Refactor: data doesn't appear on time and the test needs data from a past date
		// AC Refactor ticket: LRAC-8886

		task ("Connect DXP to Analytics Cloud and get the property name") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("View the blog") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close Sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Navigate to AC workspace") {
			ACUtils.launchAC();
		}

		task ("Navigate to Interests tab in Sites") {
			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACNavigation.goToSites();

			ACNavigation.switchTab(tabName = "Interests");
		}

		task ("Set time filter use 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			// Unable to perform the declaration because the data does not appear at the time

		}

		task ("Set time filter use Last Year") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLastYear();
		}

		task ("Assert result returns") {

			// It is not possible to perform the assert because this test needs data from the past

			ACTimeFilter.assertCurrentTimeFilterRange(timeFilterRange = "Last Year");
		}
	}

}