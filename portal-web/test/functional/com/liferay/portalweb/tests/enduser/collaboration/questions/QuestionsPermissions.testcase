@component-name = "portal-questions"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Questions";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Questions Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "2",
			groupName = "Guest",
			layoutName = "Questions Page",
			widgetName = "Questions");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Message Boards");

			if (IsElementPresent(locator1 = "Questions#QUESTIONS_LIST")) {
				Questions.tearDown();
			}

			PagesAdmin.tearDownCP();
		}
	}

	@description = "Validate if the anonymous user can ask questions and redirected to login, it also covers LPS-129203."
	@priority = "4"
	@refactordone
	test CanAskQuestionsThroughAnonymousUser {
		property test.name.skip.portal.instance = "QuestionsPermissions#CanAskQuestionsThroughAnonymousUser";

		Questions.enableRedirectToLogin();

		Questions.enableAnonymousRead();

		JSONMBMessage.addCategory(
			categoryDescription = "Description",
			categoryName = "Category",
			userEmailAddress = "test@liferay.com");

		User.logoutPG();

		Navigator.gotoPage(pageName = "Questions Page");

		Questions.gotoCategory(categoryName = "Category");

		Questions.askQuestionFillingTheMandatoryFields(
			anonymousUser = "true",
			contentField = "Body Anonymous User Ask questions",
			password = "test",
			titleField = "Title Anonymous User Ask questions",
			userEmailAddress = "test@liferay.com");

		AssertTextEquals(
			key_questionTitle = "Title Anonymous User Ask questions",
			locator1 = "Questions#QUESTIONS_TITLE",
			value1 = "Title Anonymous User Ask questions");
	}

	@description = "Validate if the user can add root topic without permission."
	@priority = "4"
	@refactordone
	test CannotAddRootTopicWithoutPermission {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addRegularRole(roleTitle = "Test Regrole Name");

		JSONRole.assignRoleToUser(
			roleTitle = "Test Regrole Name",
			userEmailAddress = "userea@liferay.com");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_message_boards_web_portlet_MBAdminPortlet",
			roleTitle = "Test Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.message.boards",
			roleTitle = "Test Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.message.boards.model.MBCategory",
			roleTitle = "Test Regrole Name");

		JSONMBMessage.addCategory(
			categoryDescription = "Description",
			categoryName = "Questions Test Category",
			userEmailAddress = "test@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "Questions Page");

		Questions.viewNoPermissionsAddTopic();
	}

	@description = "Validate if the user can add subtopic without permission."
	@priority = "4"
	@refactordone
	test CannotAddSubTopicWithoutPermission {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addRegularRole(roleTitle = "Test Regrole Name");

		JSONRole.assignRoleToUser(
			roleTitle = "Test Regrole Name",
			userEmailAddress = "userea@liferay.com");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_message_boards_web_portlet_MBAdminPortlet",
			roleTitle = "Test Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.message.boards",
			roleTitle = "Test Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.message.boards.model.MBCategory",
			roleTitle = "Test Regrole Name");

		JSONMBMessage.addCategory(
			categoryDescription = "Description",
			categoryName = "Questions Test Category",
			userEmailAddress = "test@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Questions.openToQuestionsTopic(
			layoutName = "questions-page",
			siteURLKey = "guest",
			topicName = "questions-test-category");

		Questions.viewNoPermissionsAddTopic();
	}

	@description = "Validate if the guest user cannot ask question, it also covers LPS-128823."
	@priority = "4"
	@refactordone
	test CannotAskQuestionAsGuest {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		Navigator.gotoPage(pageName = "Questions Page");

		Questions.addRootTopic(
			rootTopicDescription = "Questions Test Category Description",
			rootTopicName = "Questions Test Category");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Questions.openToQuestionsTopic(
			layoutName = "questions-page",
			siteURLKey = "guest",
			topicName = "questions-test-category");

		Questions.viewTopicDefault();

		Questions.viewNoPermissionsAddQuestion();
	}

}