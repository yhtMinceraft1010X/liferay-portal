@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");

			JSONUser.tearDownNonAdminUsers();
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9273 | Test Summary: Create a Segment of Individuals Interested And Another One Not Interest In a Topic"
	@priority = "5"
	test CanCreateIndividualsSegmentInterestAndAnotherOneNotInterestInTopic {
		property portal.upstream = "quarantine";

		// AC Quarantine Reason: Segment membership list taking too long to load

		ACUtils.createBlogsAndAddToPage();

		task ("View the page and blog with the new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close Sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new dynamic segment using Interests") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegmentAndFillFields(
				criterion = "Interests",
				segmentField = "ac",
				segments = "AC Dynamic segment 1");

			ACSegments.selectOperator(operator = "is not");

			ACSegments.saveSegment();
		}

		task ("Assert the dynamic segment and Known Member") {
			ACNavigation.assertPageHeader(headerTitle = "AC Dynamic segment 1");

			ACSegments.assertCriteriaTable(criteriaName = "is notinterested");

			ACNavigation.switchTab(tabName = "Membership");

			ACSegments.assertMember(memberName = "ac ac");
		}

		task ("Add a new dynamic segment using Interests") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegmentAndFillFields(
				criterion = "Interests",
				segmentField = "ac",
				segments = "AC Dynamic segment 2");

			ACSegments.selectOperator(operator = "is");

			ACSegments.saveSegment();
		}

		task ("Assert the dynamic segment and Known Member") {
			ACNavigation.assertPageHeader(headerTitle = "AC Dynamic segment 2");

			ACSegments.assertCriteriaTable(criteriaName = "isinterested");

			ACNavigation.switchTab(tabName = "Membership");

			ACUtils.viewGenericText(textValueList = "There are no members found on the selected time period.,Check back later to verify if data has been received from your data sources.,Learn more about individuals.");
		}
	}

}