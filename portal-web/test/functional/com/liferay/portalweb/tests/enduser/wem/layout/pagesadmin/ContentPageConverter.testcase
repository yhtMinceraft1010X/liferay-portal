@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Pages Administration";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONUser.tearDownNonAdminUsers();

			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-149232. The user can convert a widget page to a content page via management toolbar in Pages admin."
	@priority = "4"
	test BulkConvertWidgetPageToContentPageByIcon {
		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add an Asset Publisher to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Asset Publisher");
		}

		task ("View current page type before conversion") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.viewPageType(
				pageName = "Test Page Name",
				pageType = "Widget Page");
		}

		task ("Bulk convert widget page to content page by icon") {
			PagesAdmin.convertToContentPageByIcon(pageNameList = "Test Page Name");
		}

		task ("View current page type after conversion") {
			PagesAdmin.viewPageType(
				pageName = "Test Page Name",
				pageType = "Content Page");
		}

		task ("View Asset Publisher is rendered at edit mode after conversion") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.viewElementInsideModule(
				elementName = "Asset Publisher",
				moduleNumber = "1");
		}
	}

	@description = "This is a test for LPS-98303 and LPS-98327. Assert convert a widget page with Asset Publisher to content page and the content page keeps the same plid identifier before conversion."
	@priority = "5"
	test ConvertBasicWidgetPageToContentPage {
		property portal.acceptance = "true";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add an Asset Publisher to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Get plids of the widget page") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			var plid1 = Page.getPlidFromHtmlSource();
		}

		task ("View current page type before conversion") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.viewPageType(
				pageName = "Test Page Name",
				pageType = "Widget Page");
		}

		task ("Convert widget page to content page") {
			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Convert to content page...",
				pageName = "Test Page Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.clickPublish();
		}

		task ("View current page type after conversion") {
			PagesAdmin.viewPageType(
				pageName = "Test Page Name",
				pageType = "Content Page");
		}

		task ("Get plids of the converted content page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			var plid2 = Page.getPlidFromHtmlSource();
		}

		task ("View plid is the same after conversion") {
			TestUtils.assertEquals(
				actual = "${plid2}",
				expected = "${plid1}");
		}

		task ("View fragments and widgets sidebar at edit mode") {
			ContentPages.gotoPageEditor();

			AssertElementPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR_BODY");
		}
	}

	@description = "This is a test for LPS-98325. Assert that multiple pages with several widget pages(that can be converted) and an api to convert bulk widget pages to content pages is executed, if convertLayouts and getConvertibleLayoutPlid is invoked, an array with the plids of the widget pages that are convertible to content pages is returned and all convertibles widget pages in the site are converted to content pages."
	@priority = "5"
	test ConvertMultipleWidgetPagesToContentPagesViaAPI {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentPageConverter#ConvertMultipleWidgetPagesToContentPagesViaAPI";

		task ("Add 10 widget pages") {
			for (var i : list "1,2,3,4,5,6,7,8,9,10") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${i}");
			}
		}

		task ("Change layout template of each page") {
			var i = "1";

			for (var layoutTemplate : list "1 Column,2 Columns (50/50),2 Columns (30/70),2 Columns (70/30),3 Columns,1-2 Columns (30/70),1-2 Columns (70/30),1-2-1 Columns (50/50),1-2-1 Columns (70/30),1-3-1 Columns") {
				JSONLayout.updateLayoutTemplateOfPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${i}",
					layoutTemplate = "${layoutTemplate}");

				var i = ${i} + 1;
			}
		}

		task ("Add an Asset Publisher to each widget page") {
			for (var i : list "1,2,3,4,5,6,7,8,9,10") {
				JSONLayout.addWidgetToPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${i}",
					widgetName = "Asset Publisher");
			}
		}

		task ("Get plids of widget pages before conversion") {
			var list = ListUtil.newList();

			for (var i : list "1,2,3,4,5,6,7,8,9,10") {
				Navigator.gotoSitePage(
					pageName = "Test Page Name ${i}",
					siteName = "Test Site Name");

				var plidBeforeConversion = Page.getPlidFromHtmlSource();

				if ("${i}" == "1") {
					ListUtil.add("${list}", "${plidBeforeConversion}");
				}
				else {
					ListUtil.add("${list}", " ${plidBeforeConversion}");
				}
			}

			var plidsBeforeConversion = ListUtil.toString("${list}");

			echo("${plidsBeforeConversion}");
		}

		task ("View current page type before conversion") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			for (var i : list "1,2,3,4,5,6,7,8,9,10") {
				PagesAdmin.viewPageType(
					pageName = "Test Page Name ${i}",
					pageType = "Widget Page");
			}
		}

		task ("Execute grooy script to bulk convert all widget pages") {
			ServerAdministration.openServerAdmin();

			var script = TestCase.getFileContent(fileName = "convertWidgetPages.groovy");

			ServerAdministration.executeScript(
				language = "Groovy",
				script = "${script}");
		}

		task ("View output content") {
			var output = selenium.getText("ServerAdministrationScript#OUTPUT_FIELD");

			echo("${output}");

			if (contains("${output}", "Convertible layouts before conversion:[${plidsBeforeConversion}]")) {
				echo("Returned convertible layouts plids array is correct");
			}
			else {
				fail("Returned convertible layout plids array is wrong");
			}

			if (contains("${output}", "Convertible layouts after conversion: []")) {
				echo("No convertiable layouts left");
			}
			else {
				fail("There are convertiable layouts left");
			}
		}

		task ("Get plids of converted pages") {
			var list = ListUtil.newList();

			for (var i : list "1,2,3,4,5,6,7,8,9,10") {
				ContentPagesNavigator.openViewContentPage(
					pageName = "Test Page Name ${i}",
					siteName = "Test Site Name");

				var plidAfterConversion = Page.getPlidFromHtmlSource();

				if ("${i}" == "1") {
					ListUtil.add("${list}", "${plidAfterConversion}");
				}
				else {
					ListUtil.add("${list}", " ${plidAfterConversion}");
				}
			}

			var plidsAfterConversion = ListUtil.toString("${list}");

			echo("${plidsAfterConversion}");
		}

		task ("View output content") {
			if (contains("${output}", "Converted layouts:[${plidsAfterConversion}]")) {
				echo("Returned converted layouts plids array is correct");
			}
			else {
				fail("Returned converted layout plids array is wrong");
			}
		}

		task ("View plids are the same after conversion") {
			TestUtils.assertEquals(
				actual = "${plidsAfterConversion}",
				expected = "${plidsBeforeConversion}");
		}

		task ("View current page type after conversion") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			for (var i : list "1,2,3,4,5,6,7,8,9,10") {
				PagesAdmin.viewPageType(
					pageName = "Test Page Name ${i}",
					pageType = "Content Page");
			}
		}

		task ("View page editor is available for converted page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name 1",
				siteName = "Test Site Name");

			AssertElementPresent(locator1 = "Icon#EDIT_PENCIL");
		}

		task ("View Asset Publisher widget is shown") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name 1",
				siteName = "Test Site Name");

			PageEditor.viewFragment(fragmentName = "Asset Publisher");
		}

		task ("Add a Heading fragment below Asset Publisher widget") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				targetFragmentName = "Asset Publisher");

			PageEditor.clickPublish();
		}

		task ("View Heading fragment is shown at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name 1",
				siteName = "Test Site Name");

			ContentPages.viewFragmentText(
				contributed = "false",
				fragmentName = "heading",
				text = "Heading Example");
		}
	}

	@description = "This is a test for LPS-98325. If there is a site with several widget pages(that can be converted) and some content pages and an api to convert bulk widget pages to content pages is executed, you should be able to convert the widget pages."
	@priority = "2"
	test ConvertMultipleWidgetPagesWithContentPagesViaAPI {
		property test.name.skip.portal.instance = "ContentPageConverter#ConvertMultipleWidgetPagesWithContentPagesViaAPI";

		task ("Add 10 widget pages") {
			for (var i : list "1,2,3,4,5,6,7,8,9,10") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Widget Page Name ${i}");
			}
		}

		task ("Change layout template of each page") {
			var i = "1";

			for (var layoutTemplate : list "1 Column,2 Columns (50/50),2 Columns (30/70),2 Columns (70/30),3 Columns,1-2 Columns (30/70),1-2 Columns (70/30),1-2-1 Columns (50/50),1-2-1 Columns (70/30),1-3-1 Columns") {
				JSONLayout.updateLayoutTemplateOfPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Widget Page Name ${i}",
					layoutTemplate = "${layoutTemplate}");

				var i = ${i} + 1;
			}
		}

		task ("Add an Asset Publisher to each widget page") {
			for (var i : list "1,2,3,4,5,6,7,8,9,10") {
				JSONLayout.addWidgetToPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Widget Page Name ${i}",
					widgetName = "Asset Publisher");
			}
		}

		task ("Add 4 content pages with Heading fragment") {
			for (var i : list "1,2,3,4") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Content Page Name ${i}",
					type = "content");

				ContentPagesNavigator.openEditContentPage(
					pageName = "Test Content Page Name ${i}",
					siteName = "Test Site Name");

				PageEditor.addFragment(
					collectionName = "Basic Components",
					fragmentName = "Heading");

				PageEditor.clickPublish();
			}
		}

		task ("View current page type before conversion") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			for (var i : list "1,2,3,4,5,6,7,8,9,10") {
				PagesAdmin.viewPageType(
					pageName = "Test Widget Page Name ${i}",
					pageType = "Widget Page");
			}
		}

		task ("Execute grooy script to bulk convert all widget pages") {
			ServerAdministration.openServerAdmin();

			var script = TestCase.getFileContent(fileName = "convertWidgetPages.groovy");

			ServerAdministration.executeScript(
				language = "Groovy",
				script = "${script}");

			ServerAdministration.viewOutputField(valueName = "Convertible layouts after conversion: []");
		}

		task ("View current page type after conversion") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			for (var i : list "1,2,3,4,5,6,7,8,9,10") {
				PagesAdmin.viewPageType(
					pageName = "Test Widget Page Name ${i}",
					pageType = "Content Page");
			}
		}
	}

	@description = "This is a test for LPS-98325. Assert that widget pages with nested application and customization setting can be converted to content pages via API."
	@priority = "5"
	test ConvertWidgetPagesWithNestedApplicationAndCustomizationSettingToContentPagesViaAPI {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentPageConverter#ConvertWidgetPagesWithNestedApplicationAndCustomizationSettingToContentPagesViaAPI";

		task ("Add three widget pages") {
			for (var i : list "1,2,3") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${i}");
			}
		}

		task ("Add an Asset Publisher and Nested Applications to page") {
			var i = "1";

			for (var widgetName : list "Asset Publisher,Nested Applications") {
				JSONLayout.addWidgetToPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${i}",
					widgetName = "${widgetName}");

				var i = ${i} + 1;
			}
		}

		task ("Enable customization in Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PageCustomizations.enableSectionCustomizableCP(
				columnId = "1",
				pageName = "Test Page Name 3");
		}

		task ("Execute grooy script to bulk convert all widget pages") {
			ServerAdministration.openServerAdmin();

			var script = TestCase.getFileContent(fileName = "convertWidgetPages.groovy");

			ServerAdministration.executeScript(
				language = "Groovy",
				script = "${script}");

			ServerAdministration.viewOutputField(valueName = "Convertible layouts before conversion");
		}

		task ("View current page type after conversion") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			for (var i : list "1,2,3") {
				PagesAdmin.viewPageType(
					pageName = "Test Page Name ${i}",
					pageType = "Content Page");
			}
		}
	}

	@description = "This is a test for LPS-98589. Multiple widgets with different application decorators survive content page conversion."
	@priority = "5"
	test ConvertWidgetPageWithCustomizableColumnContainingWidgets {
		property portal.acceptance = "true";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add an Asset Publisher, Wiki and Documents and Media widget to page") {
			for (var widgetName : list "Asset Publisher,Wiki,Documents and Media") {
				JSONLayout.addWidgetToPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					widgetName = "${widgetName}");
			}
		}

		task ("Select a new decorator for each porlet") {
			for (var resourceName : list "Asset Publisher-Borderless,Wiki-Barebone,Documents and Media-Decorate") {
				var portletName = StringUtil.extractFirst("${resourceName}", "-");
				var decoratorName = StringUtil.extractLast("${resourceName}", "-");

				Navigator.gotoSitePage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				Portlet.gotoPortletOptions(
					portletName = "${portletName}",
					portletOption = "Look and Feel Configuration");

				IFrame.selectConfigurationFrame();

				Portlet.configureGeneralViaLookAndFeelPG(applicationDecorators = "${decoratorName}");
			}
		}

		task ("Convert widget page to content page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Convert to content page...",
				pageName = "Test Page Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.clickPublish();
		}

		task ("View current page type after conversion") {
			PagesAdmin.viewPageType(
				pageName = "Test Page Name",
				pageType = "Content Page");
		}

		task ("View decorator is applied for each portlet") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			for (var resourceName : list "Asset Publisher-Borderless,Wiki-Barebone,Documents and Media-Decorate") {
				var portletName = StringUtil.extractFirst("${resourceName}", "-");
				var decoratorName = StringUtil.extractLast("${resourceName}", "-");

				Portlet.viewApplicationDecorator(
					decorator = "${decoratorName}",
					portletName = "${portletName}");
			}
		}
	}

	@description = "This is a test for LPS-105943. When convert a widget page with one Customizable column, there will be a warning message shown in conversion review"
	@priority = "5"
	test ConvertWidgetPageWithNestedApplicationsContainingWidgets {
		property portal.acceptance = "true";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Change layout to 1 column") {
			JSONLayout.updateLayoutTemplateOfPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				layoutTemplate = "1 Column");
		}

		task ("Enable customization in Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PageCustomizations.enableSectionCustomizableCP(
				columnId = "1",
				pageName = "Test Page Name");
		}

		task ("View page is customizable") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageCustomizations.viewCustomizablePagePG();
		}

		task ("Add an Asset Publisher to page") {
			Portlet.addPG(portletName = "Asset Publisher");
		}

		task ("Convert widget page to content page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Convert to content page...",
				pageName = "Test Page Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("View conversion alert message and Asset Publisher widget is not shown") {
			Alert.viewConversionMessage(
				alertMessage = "This page has customizable columns. This capability is not supported for content pages and will be lost if the conversion draft is published.",
				alertType = "warning");

			PageEditor.viewElementNotPresentInsideModule(
				elementName = "Asset Publisher",
				moduleNumber = "1");

			PageEditor.clickPublish();
		}

		task ("View content page is editable after conversion") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertElementPresent(locator1 = "Icon#EDIT_PENCIL");

			Portlet.viewNoSpecificPG(portletName = "Asset Publisher");
		}
	}

	@description = "This is a test for LPS-105943. When convert a widget page with a non-standard layout, there will be a warning message shown in conversion preview"
	@priority = "5"
	test ConvertWidgetPageWithNonStandardLayout {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentPageConverter#ConvertWidgetPageWithNonStandardLayout";

		task ("Upload the custom layout") {
			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "App Manager");

			AppManager.uploadApp(
				appName = "custom-layout-layouttpl",
				warFileName = "custom-layout-layouttpl.war");
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Define the custom layout for widget page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.configurePage(
				columnName = "Custom Layout",
				pageName = "Test Page Name",
				sitePageType = "Widget Page");
		}

		task ("Add a Profile and Asset Publisher widget to page") {
			for (var widgetName : list "Profile,Asset Publisher") {
				JSONLayout.addWidgetToPublicLayout(
					column = "1",
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					widgetName = "${widgetName}");
			}
		}

		task ("Drop the Profile widget to second page column") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Portlet.dragAndDropPortletToColumnPG(
				columnNumberFrom = "1",
				columnNumberTo = "2",
				portletName = "Profile");
		}

		task ("View both widgets are in the respective page column") {
			var i = "1";

			for (var portletName : list "Asset Publisher,Profile") {
				Portlet.viewSpecificPG(
					pageColumnNumber = "${i}",
					portletName = "${portletName}");

				var i = ${i} + 1;
			}
		}

		task ("Convert widget page to content page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Convert to content page...",
				pageName = "Test Page Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("View conversion alert message is shown") {
			Alert.viewConversionMessage(
				alertMessage = "This page uses a custom page layout. A best-effort conversion has been performed. Verify the conversion draft before publishing it.",
				alertType = "warning");
		}

		task ("View widgets are shown in conversion then publish") {
			var i = "1";

			for (var widgetName : list "Asset Publisher,Profile") {
				PageEditor.viewElementInsideModule(
					elementName = "${widgetName}",
					moduleNumber = "${i}");

				var i = ${i} + 1;
			}

			PageEditor.clickPublish();
		}

		task ("View widgets are shown at edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			var i = "1";

			for (var widgetName : list "Asset Publisher,Profile") {
				PageEditor.viewElementInsideModule(
					elementName = "${widgetName}",
					moduleNumber = "${i}");

				var i = ${i} + 1;
			}
		}
	}

	@description = "This is a test for LPS-105943. When convert a widget page with one Customizable column and a non-standard layout, there will be two warning messages shown in conversion preview"
	@priority = "3"
	test ConvertWidgetPageWithNonStandardLayoutAndCustomizableColumns {
		property test.name.skip.portal.instance = "ContentPageConverter#ConvertWidgetPageWithNonStandardLayoutAndCustomizableColumns";

		task ("Upload the custom layout") {
			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "App Manager");

			AppManager.uploadApp(
				appName = "custom-layout-layouttpl",
				warFileName = "custom-layout-layouttpl.war");
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Define the custom layout for widget page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.configurePage(
				columnName = "Custom Layout",
				pageName = "Test Page Name",
				sitePageType = "Widget Page");
		}

		task ("Enable customization to page then check both columns") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PageCustomizations.enableSectionCustomizableCP(
				columnIdList = "1,2",
				pageName = "Test Page Name");
		}

		task ("View page is customizable") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageCustomizations.viewCustomizablePagePG();
		}

		task ("Add an Asset Publisher and Profile widget to page") {
			for (var portletName : list "Asset Publisher,Profile") {
				Portlet.addPG(portletName = "${portletName}");
			}
		}

		task ("Drop the Profile widget to second page column") {
			Portlet.dragAndDropPortletToColumnPG(
				columnNumberFrom = "1",
				columnNumberTo = "2",
				portletName = "Profile");
		}

		task ("View both widgets are in the respective page column") {
			var i = "1";

			for (var portletName : list "Asset Publisher,Profile") {
				Portlet.viewSpecificPG(
					pageColumnNumber = "${i}",
					portletName = "${portletName}");

				var i = ${i} + 1;
			}
		}

		task ("Convert widget page to content page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Convert to content page...",
				pageName = "Test Page Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("View conversion alert message is shown") {
			Alert.viewConversionMessage(
				alertMessage = "This page has customizable columns. This capability is not supported for content pages and will be lost if the conversion draft is published.This page uses a custom page layout. A best-effort conversion has been performed. Verify the conversion draft before publishing it.",
				alertType = "warning");
		}

		task ("View widgets are not shown in conversion then publish") {
			var i = "1";

			for (var widgetName : list "Asset Publisher,Profile") {
				PageEditor.viewElementNotPresentInsideModule(
					elementName = "${widgetName}",
					moduleNumber = "${i}");

				var i = ${i} + 1;
			}

			PageEditor.clickPublish();
		}

		task ("View widgets are not shown at edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			var i = "1";

			for (var widgetName : list "Asset Publisher,Profile") {
				PageEditor.viewElementNotPresentInsideModule(
					elementName = "${widgetName}",
					moduleNumber = "${i}");

				var i = ${i} + 1;
			}
		}
	}

	@description = "This is a test for LPS-105943. When convert a widget page with one Nested Applications widget containing widgets and a non-standard layout, there will be two warning messages shown in conversion preview"
	@priority = "3"
	test ConvertWidgetPageWithNonStandardLayoutAndNestedApplicationsContainingWidgets {
		property test.name.skip.portal.instance = "ContentPageConverter#ConvertWidgetPageWithNonStandardLayoutAndNestedApplicationsContainingWidgets";

		task ("Upload the custom layout") {
			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "App Manager");

			AppManager.uploadApp(
				appName = "custom-layout-layouttpl",
				warFileName = "custom-layout-layouttpl.war");
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Define the custom layout for widget page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.configurePage(
				columnName = "Custom Layout",
				pageName = "Test Page Name",
				sitePageType = "Widget Page");
		}

		task ("Add a Nested Applications widget to first page column") {
			JSONLayout.addWidgetToPublicLayout(
				column = "1",
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Nested Applications");
		}

		task ("Add a Profile and Asset Publisher widget to second page column") {
			for (var widgetName : list "Profile,Asset Publisher") {
				JSONLayout.addWidgetToPublicLayout(
					column = "2",
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					widgetName = "${widgetName}");
			}
		}

		task ("Select manual selection for Asset Publisher widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureManualAssetSelectionPG(portletName = "Asset Publisher");

			IFrame.closeFrame();
		}

		task ("Drop Asset Publisher into first Nested Applications column") {
			NestedPortlets.dragAndDropPortletToPortletColumnPG(
				columnNumberFrom = "2",
				nestedColumnNumberTo = "1",
				portletName = "Asset Publisher");
		}

		task ("View both widgets are in the respective page column") {
			var i = "1";

			for (var portletName : list "Nested Applications,Profile") {
				Portlet.viewSpecificPG(
					pageColumnNumber = "${i}",
					portletName = "${portletName}");

				var i = ${i} + 1;
			}
		}

		task ("View Asset Publisher widget is nested to first column") {
			NestedPortlets.viewPG(
				nestedColumnNumber = "1",
				portletName = "Asset Publisher");
		}

		task ("Convert widget page to content page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Convert to content page...",
				pageName = "Test Page Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("View conversion alert message is shown") {
			Alert.viewConversionMessage(
				alertMessage = "This page uses nested applications widgets. All widgets that were inside a nested application widget have been placed in a single column and may require manual reorganization.This page uses a custom page layout. A best-effort conversion has been performed. Verify the conversion draft before publishing it.",
				alertType = "warning");
		}

		task ("View Nested Applications is not shown in conversion") {
			PageEditor.viewElementNotPresentInsideModule(
				elementName = "Nested Applications",
				moduleNumber = "1");
		}

		task ("View widgets are shown in conversion then publish") {
			var i = "1";

			for (var widgetName : list "Asset Publisher,Profile") {
				PageEditor.viewElementInsideModule(
					elementName = "${widgetName}",
					moduleNumber = "${i}");

				var i = ${i} + 1;
			}

			PageEditor.clickPublish();
		}

		task ("View widgets are shown at edit mode") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			var i = "1";

			for (var widgetName : list "Asset Publisher,Profile") {
				PageEditor.viewElementInsideModule(
					elementName = "${widgetName}",
					moduleNumber = "${i}");

				var i = ${i} + 1;
			}
		}

		task ("View Nested Applications is not shown at edit mode") {
			PageEditor.viewElementNotPresentInsideModule(
				elementName = "Nested Applications",
				moduleNumber = "1");
		}
	}

	@description = "This is a test for LPS-125933. Convert widget page to content page with a WCD and an Asset Publisher where web contents are displayed."
	@priority = "3"
	test ConvertWidgetPageWithWebContentsToContentPage {
		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Change layout to 1 column") {
			JSONLayout.updateLayoutTemplateOfPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				layoutTemplate = "1 Column");
		}

		task ("Add an Asset Publisher and a Web Content Display to page") {
			for (var widgetName : list "Asset Publisher,Web Content Display") {
				JSONLayout.addWidgetToPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					widgetName = "${widgetName}");
			}
		}

		task ("Add two web contents based on Basic Web Content") {
			for (var n : list "1,2") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content ${n}",
					groupName = "Test Site Name",
					title = "Web Content Title ${n}");
			}
		}

		task ("View the web contents are shown in Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			for (var n : list "1,2") {
				AssetPublisherPortlet.viewAssetPG(
					assetContent = "Web Content Content ${n}",
					assetTitle = "Web Content Title ${n}");
			}
		}

		task ("Display the Web Content Title 1 in Web Content Display") {
			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title 1");

			IFrame.closeFrame();

			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content 1",
				webContentTitle = "Web Content Title 1");
		}

		task ("Convert the widget page to content page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Convert to content page...",
				pageName = "Test Page Name");

			PageEditor.assertFragmentSidebarLoaded();

			for (var n : list "1,2") {
				AssetPublisherPortlet.viewAssetPG(
					assetContent = "Web Content Content ${n}",
					assetTitle = "Web Content Title ${n}");
			}

			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content 1",
				webContentTitle = "Web Content Title 1");

			PageEditor.clickPublish();
		}

		task ("View the widget page is converted to content page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.viewPageType(
				pageName = "Test Page Name",
				pageType = "Content Page");
		}

		task ("View the web contents are shown in Asset Publisher and Web Content Display") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			for (var n : list "1,2") {
				AssetPublisherPortlet.viewAssetPG(
					assetContent = "Web Content Content ${n}",
					assetTitle = "Web Content Title ${n}");
			}

			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content 1",
				webContentTitle = "Web Content Title 1");
		}
	}

	@description = "This is a test for LPS-98589. Can edit the title of the widgets with "borderless" and "decorate" decorators in content page with correct permissions."
	@priority = "5"
	test EditConvertedContentPageWithDecorator {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add an Asset Publisher and Documents and Media widget to page") {
			for (var widgetName : list "Asset Publisher,Documents and Media") {
				JSONLayout.addWidgetToPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					widgetName = "${widgetName}");
			}
		}

		task ("Select decoret as application decorator") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Portlet.gotoPortletOptions(
				portletName = "Documents and Media",
				portletOption = "Look and Feel Configuration");

			IFrame.selectConfigurationFrame();

			Portlet.configureGeneralViaLookAndFeelPG(applicationDecorators = "Decorate");
		}

		task ("Convert widget page to content page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Convert to content page...",
				pageName = "Test Page Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.clickPublish();
		}

		task ("View decorator is shown") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Portlet.viewApplicationDecorator(
				decorator = "Borderless",
				portletName = "Asset Publisher");

			Portlet.viewApplicationDecorator(
				decorator = "Decorate",
				portletName = "Documents and Media");
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "Userfn",
				userLastName = "Userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add a new site role") {
			JSONRole.addSiteRole(roleTitle = "Roles Siterole Name");
		}

		task ("Define permission of new site role") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com_liferay_layout_admin_web_portlet_GroupPagesPortlet",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		task ("Assign the user to site") {
			JSONUser.addUserToSite(
				groupName = "Test Site Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign the user to site role") {
			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Roles Siterole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = "userea@liferay.com");
		}

		task ("View user has no permission to edit a portlet") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			for (var widgetName : list "Asset Publisher,Documents and Media") {
				Click(
					key_portletTitleName = "${widgetName}",
					locator1 = "Portlet#SPECIFIC_TITLE",
					value1 = "${widgetName}");

				AssertElementNotPresent(locator1 = "Icon#OK");
			}
		}

		task ("Define a new permission") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "MANAGE_LAYOUTS",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Roles Siterole Name",
				roleType = "site");
		}

		task ("View user has perimissions to edit a portlet") {
			for (var widgetName : list "Asset Publisher,Documents and Media") {
				Navigator.gotoSitePage(
					pageName = "Test Page Name",
					siteName = "Test Site Name");

				Portlet.configureCustomTitlePG(portletTitleName = "${widgetName}");
			}
		}

		task ("View edited portlet's name are shown") {
			for (var widgetName : list "Asset Publisher Custom,Documents and Media Custom") {
				Portlet.viewSpecificPG(portletName = "${widgetName}");
			}
		}
	}

	@description = "This is a test for LPS-106198. check the status for convension draft page and can edit widget page to content page conversion in draft form."
	@priority = "5"
	test ViewAndEditConversionDraftPage {
		property portal.acceptance = "true";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add an Asset Publisher widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Convert widget page to content page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Convert to content page...",
				pageName = "Test Page Name");
		}

		task ("View conversion alert message is shown") {
			Alert.viewConversionMessage(
				alertMessage = "The page conversion is shown in the preview below. Make modifications needed before publishing the conversion, or discard the draft to leave the widget page in its original state.",
				alertType = "info");
		}

		task ("View page status in Pages admin") {
			PageEditor.clickBack();

			PagesAdmin.viewPageStatus(
				pageName = "Test Page Name",
				status = "Conversion Draft");
		}

		task ("View menu action is shown") {
			Click.waitForMenuToggleJSClick(
				key_pageName = "Test Page Name",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM_ELLIPSIS_ICON");

			MenuItem.viewPresent(menuItem = "Discard Conversion Draft");
		}

		task ("View page is not converted") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertElementNotPresent(locator1 = "Button#EDIT_PENCIL");

			AssertElementNotPresent(locator1 = "PageEditor#FRAGMENT_SIDEBAR_BODY");
		}

		task ("Add a Web Content Display to conversion draft page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Edit Conversion Draft",
				pageName = "Test Page Name");

			PageEditor.addWidget(
				portletName = "Web Content Display",
				targetFragmentName = "Asset Publisher");
		}

		task ("Remove Asset Publisher then view it is not shwon") {
			PageEditor.removeFragment(fragmentName = "Asset Publisher");

			PageEditor.viewElementNotPresentInsideModule(
				elementName = "Asset Publisher",
				moduleNumber = "1");
		}

		task ("Edit conversion page via Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Edit Conversion Draft",
				pageName = "Test Page Name");
		}

		task ("View Web Content Display is shown") {
			PageEditor.viewFragment(fragmentName = "Web Content Display");
		}

		task ("View Asset Publisher is not shown") {
			PageEditor.viewFragmentNotPresent(fragmentName = "Asset Publisher");
		}
	}

	@description = "This is a test for LPS-105943. When convert a widget page with one Nested Applications widget containing widgets, there will be a warning message shown in conversion preview"
	@priority = "5"
	test WidgetPageWithNestedApplicationsContainingWidgets {
		property portal.acceptance = "true";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Change layout to 1 column") {
			JSONLayout.updateLayoutTemplateOfPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				layoutTemplate = "1 Column");
		}

		task ("Add a Nested Applications and Asset Publisher widget to page") {
			for (var widgetName : list "Nested Applications,Asset Publisher") {
				JSONLayout.addWidgetToPublicLayout(
					column = "1",
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					widgetName = "${widgetName}");
			}
		}

		task ("View default layout in Nested widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			NestedPortlets.viewConfigurationDefaultLayoutTemplate(
				defaultColumnName = "2 Columns (50/50)",
				portletName = "Nested Applications");
		}

		task ("Drop Asset Publisher widget into first column of Nested Applications") {
			NestedPortlets.dragAndDropPortletToPortletColumnPG(
				columnNumberFrom = "1",
				nestedColumnNumberTo = "1",
				portletName = "Asset Publisher");
		}

		task ("View Asset Publisher widget is nested") {
			NestedPortlets.viewPG(
				nestedColumnNumber = "1",
				portletName = "Asset Publisher");
		}

		task ("Convert widget page to content page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Convert to content page...",
				pageName = "Test Page Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("View conversion alert message is shown") {
			Alert.viewConversionMessage(
				alertMessage = "This page uses nested applications widgets. All widgets that were inside a nested application widget have been placed in a single column and may require manual reorganization.",
				alertType = "warning");
		}

		task ("View Asset Publisher widget is shown") {
			PageEditor.viewElementInsideModule(
				elementName = "Asset Publisher",
				moduleNumber = "1");
		}

		task ("View Nested Applications widget is not shown then publish") {
			Portlet.viewNoSpecificPG(portletName = "Nested Applications");

			PageEditor.clickPublish();
		}

		task ("View content page is editable after conversion") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertElementPresent(locator1 = "Icon#EDIT_PENCIL");

			Portlet.viewPG(portletName = "Asset Publisher");

			Portlet.viewNoSpecificPG(portletName = "Nested Applications");
		}
	}

}