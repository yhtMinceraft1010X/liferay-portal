@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a Web Content Display to page and display the custom event") {
			ACCustomEvents.createWCWithCustomEventAndAddToPage();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: LRAC-4265 | Automation ID: LRAC-10012 | Test Summary: Attributes name character limit (255 chars)"
	@priority = "4"
	test CreateAttributeNameBeyond255Characters {
		var attributeName = "category";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to attributes tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEventAttributes();

			ACNavigation.openItem(itemName = "Attributes");
		}

		task ("Edit the new attribute") {
			ACNavigation.openItem(itemName = "${attributeName}");

			ACUtils.clickAnyButton(button = "Edit");
		}

		task ("Change the name of the attribute using 255+ characters") {
			ACCustomEvents.changeCustomEventDisplayNameOrDescription(newDisplayName = "testtttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt");
		}

		task ("Check that the attribute name cannot be more than 255 characters") {
			ACCustomEvents.viewInvalidCustomEventEdition(invalidMessage = "Exceeds maximum length.");
		}
	}

	@description = "Feature ID: LRAC-4265 | Automation ID: LRAC-10011 | Test Summary: Attributes shown in AC"
	@priority = "5"
	test CustomEventAttributeIsShownInACSettings {
		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to attributes tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEventAttributes();

			ACNavigation.openItem(itemName = "Attributes");
		}

		task ("Select an attribute") {
			ACUtils.searchBar(searchItem = "category");

			ACNavigation.openItem(itemName = "category");
		}

		task ("Check the data related to attribute appears") {
			ACCustomEvents.viewDataAttribute(attributeValueList = "wetsuit");

			ACCustomEvents.viewDataType(typeValue = "String");
		}

		task ("Back to Event Attributes and Navigation to attributes tab") {
			ACNavigation.backNavigation(pageName = "Event Attributes");

			ACNavigation.openItem(itemName = "Attributes");
		}

		task ("Select an attribute") {
			ACUtils.searchBar(searchItem = "price");

			ACNavigation.openItem(itemName = "price");
		}

		task ("Check the data related to attribute appears") {
			ACCustomEvents.viewDataAttribute(attributeValueList = "259.95");

			ACCustomEvents.viewDataType(typeValue = "Number");
		}

		task ("Back to Event Attributes and Navigation to attributes tab") {
			ACNavigation.backNavigation(pageName = "Event Attributes");

			ACNavigation.openItem(itemName = "Attributes");
		}

		task ("Select an attribute") {
			ACUtils.searchBar(searchItem = "temp");

			ACNavigation.openItem(itemName = "temp");
		}

		task ("Check the data related to attribute appears") {
			ACCustomEvents.viewDataAttribute(attributeValueList = "11");

			ACCustomEvents.viewDataType(typeValue = "Number");
		}

		task ("Back to Event Attributes and Navigation to attributes tab") {
			ACNavigation.backNavigation(pageName = "Event Attributes");

			ACNavigation.openItem(itemName = "Attributes");
		}

		task ("Select an attribute") {
			ACUtils.searchBar(searchItem = "birthdate");

			ACNavigation.openItem(itemName = "birthdate");
		}

		task ("Check the data related to attribute appears") {
			ACCustomEvents.viewDataAttribute(attributeValueList = "2021-11-25T14:36:30.685Z");

			ACCustomEvents.viewDataType(typeValue = "Date");
		}

		task ("Back to Event Attributes and Navigation to attributes tab") {
			ACNavigation.backNavigation(pageName = "Event Attributes");

			ACNavigation.openItem(itemName = "Attributes");
		}

		task ("Select an attribute") {
			ACUtils.searchBar(searchItem = "like");

			ACNavigation.openItem(itemName = "like");
		}

		task ("Check the data related to attribute appears") {
			ACCustomEvents.viewDataAttribute(attributeValueList = "true");

			ACCustomEvents.viewDataType(typeValue = "Boolean");
		}
	}

	@description = "Feature ID: LRAC-4265 | Automation ID: LRAC-10013 | Test Summary: Rename Attributes Display Name"
	@priority = "4"
	test RenameAttributeDisplayName {
		var attributeName = "category";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to attributes tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEventAttributes();

			ACNavigation.openItem(itemName = "Attributes");
		}

		task ("Edit the new attribute") {
			ACNavigation.openItem(itemName = "${attributeName}");

			ACUtils.clickAnyButton(button = "Edit");
		}

		task ("Change the display name of the attribute") {
			ACCustomEvents.changeCustomEventDisplayNameOrDescription(newDisplayName = "${attributeName} Display Name");
		}

		task ("Back to Event Attributes and Navigation to attributes tab") {
			ACNavigation.backNavigation(pageName = "Event Attributes");

			ACNavigation.openItem(itemName = "Attributes");
		}

		task ("Check if the display name has been changed") {
			ACCustomEvents.viewDisplayNameOrDescriptionList(nameValue = "${attributeName} Display Name");
		}
	}

	@description = "Feature ID: LRAC-4265 | Automation ID: LRAC-10016 | Test Summary: Rename Attribute that already exists"
	@priority = "4"
	test RenameToExistingAttributeName {
		var attributeName1 = "color1";
		var attributeName2 = "color2";
		var attributeName3 = "color3";
		var attributeNameList = "${attributeName1},${attributeName2},${attributeName3}";
		var attributeValueList = "blue,red,black";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				attributesName = "${attributeNameList}",
				attributesValue = "${attributeValueList}",
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to attributes tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEventAttributes();

			ACNavigation.openItem(itemName = "Attributes");
		}

		task ("Edit the new attribute") {
			ACNavigation.openItem(itemName = "${attributeName2}");

			ACUtils.clickAnyButton(button = "Edit");
		}

		task ("Change the display name of the attribute") {
			ACCustomEvents.changeCustomEventDisplayNameOrDescription(newDisplayName = "${attributeName2} Display Name");
		}

		task ("Back to Event Attributes and Navigation to attributes tab") {
			ACNavigation.backNavigation(pageName = "Event Attributes");

			ACNavigation.openItem(itemName = "Attributes");
		}

		task ("Edit the new attribute") {
			ACNavigation.openItem(itemName = "${attributeName1}");

			ACUtils.clickAnyButton(button = "Edit");
		}

		task ("Rename to an existing display name") {
			ACCustomEvents.changeCustomEventDisplayNameOrDescription(newDisplayName = "${attributeName3}");
		}

		task ("Check that the display name cannot be renamed to an existing one") {
			ACCustomEvents.viewInvalidCustomEventEdition(invalidMessage = "An attribute already exists with that display name. Please enter a different display name.");
		}

		task ("Rename to an existing display name") {
			ACCustomEvents.changeCustomEventDisplayNameOrDescription(newDisplayName = "${attributeName2} Display Name");
		}

		task ("Check that the display name cannot be renamed to an existing one") {
			ACCustomEvents.viewInvalidCustomEventEdition(invalidMessage = "An attribute already exists with that display name. Please enter a different display name.");
		}
	}

	@description = "Feature ID: LRAC-4265 | Automation ID: LRAC-10017 | Test Summary: Search for Attributes"
	@ignore = "true"
	@priority = "3"
	test SearchForAttribute {

		// AC Story ticket: LRAC-9248

		var attributesNameList = "category,price,temp,birthdate,like";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				attributesName = "${attributesNameList}",
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to attributes tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEventAttributes();

			ACNavigation.openItem(itemName = "Attributes");
		}

		task ("Search for the name of the attributes and verify that it was found") {
			for (var attributesName : list "${attributesNameList}") {
				ACUtils.searchBar(searchItem = "${attributesName}");

				ACUtils.viewNameList(nameList = "${attributesName}");
			}
		}

		task ("Search for the name of attribute that doesn't exist and verify that it didn't find anything") {
			ACUtils.searchBar(searchItem = "acqa");

			// This test is being ignored due to a history that makes changes to empty state messages.

			ACUtils.viewNoResultsMessage(noResultMessage = "There are no attributes found.");
		}
	}

	@description = "Feature ID: LRAC-4265 | Automation ID: LRAC-10015 | Test Summary: Update Attributes Data Type"
	@priority = "4"
	test UpdateAttributeDataType {
		var attributeName = "color";
		var attributeValue = "blue";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				attributesName = "${attributeName}",
				attributesValue = "${attributeValue}",
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to attributes tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEventAttributes();

			ACNavigation.openItem(itemName = "Attributes");
		}

		task ("Edit the new attribute") {
			ACNavigation.openItem(itemName = "${attributeName}");

			ACUtils.clickAnyButton(button = "Edit");
		}

		task ("Change the type of the attribute") {
			ACCustomEvents.changeAttributeDataType(newDataType = "Number");
		}

		task ("Back to Event Attributes and Navigation to attributes tab") {
			ACNavigation.backNavigation(pageName = "Event Attributes");

			ACNavigation.openItem(itemName = "Attributes");
		}

		task ("Check if the type has been changed") {
			ACCustomEvents.viewDataTypeList(
				attributeName = "${attributeName}",
				typeValue = "Number");
		}
	}

	@description = "Feature ID: LRAC-4265 | Automation ID: LRAC-10014 | Test Summary: Update Attributes description"
	@priority = "4"
	test UpdateAttributeDescription {
		var attributeName = "category";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to attributes tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEventAttributes();

			ACNavigation.openItem(itemName = "Attributes");
		}

		task ("Edit the new attribute") {
			ACNavigation.openItem(itemName = "${attributeName}");

			ACUtils.clickAnyButton(button = "Edit");
		}

		task ("Change the description of the attribute") {
			ACCustomEvents.changeCustomEventDisplayNameOrDescription(newDescription = "${attributeName} Description");
		}

		task ("Back to Event Attributes and Navigation to attributes tab") {
			ACNavigation.backNavigation(pageName = "Event Attributes");

			ACNavigation.openItem(itemName = "Attributes");
		}

		task ("Check if the description has been changed") {
			ACCustomEvents.viewDisplayNameOrDescriptionList(nameValue = "${attributeName} Description");
		}
	}

}