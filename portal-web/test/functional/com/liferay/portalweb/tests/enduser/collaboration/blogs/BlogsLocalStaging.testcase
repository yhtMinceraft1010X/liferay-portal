@component-name = "portal-lima"
definition {

	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Blogs";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Staging Blogs Page",
			widgetName = "Blogs");

		JSONStaging.enableLocalStaging(groupName = "Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			BlogsEntry.tearDownCP();

			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "This test covers LPS-79000. It ensures that users can only publish an Approved blog entry. Draft entries should not have the Publish option."
	@priority = "5"
	@refactordone
	test CannotPublishUnapprovedDraft {
		BlogsNavigator.openToStagingCP(
			groupName = "Site Name",
			siteURLKey = "site-name-staging");

		Blogs.addDraft(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToStagingCP(
			groupName = "Site Name",
			siteURLKey = "site-name-staging");

		Blogs.assertNoPublishOption(entryTitle = "Blogs Entry Title");
	}

	@description = "This test covers LPS-99265. It ensures that a staged blogs entry cannot be shared unless it is first published to Live."
	@priority = "4"
	@refactordone
	test CannotShareUnpublishedEntry {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			site = "false");

		BlogsNavigator.openToStagingCP(
			groupName = "Site Name",
			siteURLKey = "site-name-staging");

		AssertElementNotPresent(
			key_menuItem = "Share",
			locator1 = "MenuItem#ANY_MENU_ITEM");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

		BlogsNavigator.gotoShare(entryTitle = "Blogs Entry Title");

		Asset.share(
			sharingPermissions = "View",
			userEmailAddress = "userea@liferay.com",
			userName = "userfn userln");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewNewSharedContent(
			contentSharingPermission = "viewing",
			contentTitle = "Blogs Entry Title",
			ownerName = "Test Test");
	}

	@description = "This is a test for LPS-136789. It checks that a blog with a layout reference can be published."
	@priority = "3"
	test CanPublishBlogWithLayoutReference {
		var portalURL = PropsUtil.get("portal.url");

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Blogs Entry",
			displayPageTemplateEntryName = "Display Page Name",
			groupName = "Site Name-staging",
			site = "false");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "site-name-staging");

		DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

		PageEditor.clickPublish();

		DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			site = "false");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		ControlMenu.viewHeaderTitle(headerTitle = "Display Page Name");

		AssertLocation(value1 = "${portalURL}/web/site-name/b/blogs-entry-title");
	}

	@description = "This is a test for LPS-136790. It checks that a blog with a deleted cover image can be published using the SAP."
	@priority = "4"
	test CanPublishDeletedCoverImageViaSAP {
		var imageId = JSONBlog.uploadBlogImage(
			groupName = "Site Name (Staging)",
			site = "false",
			sourceFileName = "Document_1.jpg");

		JSONBlog.addEntryWithImage(
			coverImageId = "${imageId}",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			site = "false");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Blogs.publishViaSAP(
			confirmMessage = "Are you sure you want to publish to live?",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Staging Blogs Page",
			siteURLKey = "site name");

		BlogsEntry.viewEntryPG(
			entryTitle = "Blogs Entry Title",
			uploadFileName = "Document_1.jpg");

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			site = "false",
			siteURLKey = "site-name-staging");

		BlogsEntry.removeCoverImage(coverImageName = "Document_1.jpg");

		PortletEntry.publish();

		Blogs.publishViaSAP(
			confirmMessage = "Are you sure you want to publish to live?",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Staging Blogs Page",
			siteURLKey = "site name");

		AssertElementNotPresent(
			key_uploadFileName = "Document_1",
			locator1 = "BlogsEntry#ENTRY_COVER_IMAGE");
	}

	@description = "This is a test for LPS-136793 and LPS-139452. It checks that a custom friendly URL for Blogs can be deleted and republished."
	@priority = "4"
	test CanPublishDeletedCustomFriendlyURL {
		var portalURL = PropsUtil.get("portal.url");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			site = "false");

		JSONBlog.updateEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			newFriendlyURL = "custom-url",
			site = "false");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSpecificURL(url = "${portalURL}/web/site-name/staging-blogs-page/-/blogs/custom-url");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			friendlyURL = "custom url",
			groupName = "Site Name (Staging)",
			site = "false",
			siteURLKey = "site-name-staging");

		Panel.expandPanel(panel = "Configuration");

		BlogsEntry.editCustomURL(customURL = "");

		PortletEntry.publish();

		Blogs.publishViaSAP(
			confirmMessage = "Are you sure you want to publish to live?",
			entryTitle = "Blogs Entry Title");

		Navigator.openSpecificURL(url = "${portalURL}/web/site-name/staging-blogs-page/-/blogs/blogs-entry-title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This is a test for LPS-136796. It checks that a deleted embedded linked image for Blogs can be published."
	@priority = "4"
	test CanPublishDeletedEmbeddedLinkedImage {
		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Portlet.gotoPortletOptions(
			portletName = "Blogs",
			portletOption = "Configuration");

		BlogsConfiguration.selectConfigurationIFrame();

		BlogsConfiguration.selectDisplayTemplate(displayTemplate = "Full Content");

		IFrame.saveConfiguration();

		BlogsNavigator.openToAddEntry(siteURLKey = "site-name-staging");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.addEntryExternalLinkViaBrowseButton(
			navTab = "Documents and Media",
			uploadFileName = "Document_1.jpg");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			site = "false",
			siteURLKey = "site-name-staging");

		BlogsEntry.removeExternalLink(entryContent = "Blogs Entry Content");

		PortletEntry.publish();

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		AssertElementNotPresent(
			key_entryContent = "Blogs Entry Content",
			locator1 = "BlogsEntry#CONTENT_LINK");
	}

	@description = "This is a test for LPS-136799. It checks that a deleted image from the Blogs repository can be published and does not appear in live."
	@priority = "4"
	test CanPublishDeletedImageFromRepository {
		JSONBlog.uploadBlogImage(
			groupName = "Site Name (Staging)",
			site = "false",
			sourceFileName = "Document_1.jpg");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

		Navigator.gotoNavTab(navTab = "Images");

		LexiconEntry.viewEntryName(rowEntry = "Document_1.jpg");

		JSONBlog.removeBlogImage(
			groupName = "Site Name (Staging)",
			imageTitle = "Document_1.jpg",
			site = "false");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

		Navigator.gotoNavTab(navTab = "Images");

		LexiconEntry.viewNoEntry(rowEntry = "Document_1.jpg");
	}

	@description = "This is a test for LPS-136795. It checks that an embedded image using a link for Blogs can be published."
	@priority = "4"
	test CanPublishEmbeddedImage {
		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Portlet.gotoPortletOptions(
			portletName = "Blogs",
			portletOption = "Configuration");

		BlogsConfiguration.selectConfigurationIFrame();

		BlogsConfiguration.selectDisplayTemplate(displayTemplate = "Full Content");

		IFrame.saveConfiguration();

		BlogsNavigator.openToAddEntry(siteURLKey = "site-name-staging");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.addEntryExternalLinkViaBrowseButton(
			navTab = "Documents and Media",
			uploadFileName = "Document_1.jpg");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		BlogsEntry.viewEntryEmbeddedImage(
			entryContent = "Blogs Entry Content",
			imageSourceURL = "Document_1.jpg");
	}

	@description = "This test covers LPS-77658. It publishes a blog entry to live via Single Asset Publishing."
	@priority = "4"
	@refactordone
	test CanPublishEntryViaSAP {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			site = "false");

		BlogsNavigator.openToStagingCP(
			groupName = "Site Name",
			siteURLKey = "site-name-staging");

		LexiconEntry.changeDisplayStyle(displayStyle = "Cards");

		Blogs.publishViaSAP(
			confirmMessage = "Are you sure you want to publish to live?",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Staging Blogs Page",
			siteURLKey = "site-name");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Notifications.viewBadgeCount(
			activePanel = "Notifications",
			notificationCount = "2");

		Notifications.gotoNotifications();

		Notifications.viewSuccessfulPublication(
			contentBody = "Publication Process Finished Successfully",
			portletName = "Blogs Portlet",
			publicationType = "Local");
	}

	@description = "This test covers LPS-138246. It ensures that a blog entry can be published via SAP on a page."
	@priority = "4"
	test CanPublishEntryViaSAPOnPage {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			site = "false");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Blogs.publishViaSAP(
			confirmMessage = "Are you sure you want to publish to live?",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Staging Blogs Page",
			siteURLKey = "site-name");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Notifications.viewBadgeCount(
			activePanel = "Notifications",
			notificationCount = "2");

		Notifications.gotoNotifications();

		Notifications.viewSuccessfulPublication(
			contentBody = "Publication Process Finished Successfully",
			portletName = "Blogs Portlet",
			publicationType = "Local");
	}

	@description = "This is a test for LPS-136801. It checks that Blogs permissions can be published."
	@priority = "4"
	test CanPublishPermissions {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			guestPermissions = "false",
			site = "false");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		User.logoutPG();

		Navigator.gotoSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		BlogsEntry.viewNoEntryAsGuestPG(entryTitle = "Blogs Entry Title");

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		BlogsNavigator.gotoBlogsEntryPermissionsPG(entryTitle = "Blogs Entry Title");

		Role.definePermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Guest");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		User.logoutPG();

		Navigator.gotoSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This ensures that users can publish a scheduled blog entry to the live site."
	@priority = "3"
	@refactordone
	test CanPublishScheduledEntry {
		property custom.properties = "company.default.time.zone=America/Los_Angeles";

		JSONBlog.addEntry(
			displayDate = "true",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			increaseMinutes = "2",
			site = "false");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Navigator.gotoNavItem(navItem = "Not Published (1)");

		Staging.gotoPublishToLive();

		Staging.configurePublishToLive(
			checkContentNameList = "Blogs",
			checkPageName = "Staging Blogs Page");

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Blogs.viewNoEntryCP();

		Pause(locator1 = "120000");

		Refresh();

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This is a use case for LPS-122140. It ensures that a small image can be published."
	@priority = "5"
	@refactordone
	test CanPublishSmallImage {
		BlogsNavigator.openToAddEntry(siteURLKey = "site-name-staging");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.addSmallImage(
			navTab = "Blog Images",
			uploadFileName = "Document_3.jpg");

		PortletEntry.publish();

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Refresh();

		AssertElementPresent(
			key_imageFileName = "Document_3.jpg",
			locator1 = "BlogsEntry#CONTENT_SMALL_IMAGE");
	}

	@description = "This is a use case for LPS-78833. It ensures that a small image deletion can be published."
	@priority = "5"
	@refactordone
	test CanPublishSmallImageDeletion {
		BlogsNavigator.openToAddEntry(siteURLKey = "site-name-staging");

		// Can explore how to add Blog with small image via JSON

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.addSmallImage(
			navTab = "Blog Images",
			uploadFileName = "Document_3.jpg");

		PortletEntry.publish();

		Navigator.openSiteURL(siteName = "Site Name");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			site = "false",
			siteURLKey = "site-name-staging");

		BlogsEntry.removeSmallImage(uploadFileName = "Document_3.jpg");

		PortletEntry.publish();

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name-staging");

		LexiconEntry.changeDisplayStyle(displayStyle = "cards");

		Navigator.gotoNavItem(navItem = "Images");

		LexiconCard.viewCardPresent(card = "Document_3.jpg");

		LexiconCard.viewCardNotPresent(card = "Document_3 (1).jpg");
	}

	@description = "This is a test for LPS-136794. It checks that an updated custom friendly URL for Blogs can be published."
	@priority = "4"
	test CanPublishUpdatedCustomFriendlyURL {
		var portalURL = PropsUtil.get("portal.url");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			friendlyURL = "custom-url",
			groupName = "Site Name (Staging)",
			site = "false");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSpecificURL(url = "${portalURL}/web/site-name/staging-blogs-page/-/blogs/custom-url");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		JSONBlog.updateEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			friendlyURL = "custom-url",
			groupName = "Site Name (Staging)",
			newFriendlyURL = "new-custom-url",
			site = "false");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSpecificURL(url = "${portalURL}/web/site-name/staging-blogs-page/-/blogs/new-custom-url");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@description = "This is a use case for LPS-72949."
	@priority = "5"
	@refactordone
	test CanPublishUpdatedEntryTitle {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			site = "false");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		BlogsEntry.editNoPermissionPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Staging.openStagingAdmin(siteURLKey = "site-name-staging");

		Staging.editStagingConfiguration(isNotEditable = "Blogs");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Blogs.editEntryPG(
			entryContent = "Blogs Entry Content",
			entryContentEdit = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title",
			entryTitleEdit = "Blogs Entry Title Edit");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title Edit",
			layoutName = "Staging Blogs Page",
			siteURLKey = "site-name");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry Content Edit",
			entryTitle = "Blogs Entry Title Edit");
	}

	@description = "This is a test for LPS-136804. It checks that a small image can be update and published through the normal publication flow."
	@priority = "4"
	test CanPublishUpdatedSmallImage {
		BlogsNavigator.openToAddEntry(siteURLKey = "site-name-staging");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.addSmallImage(
			navTab = "Blog Images",
			uploadFileName = "Document_1.jpg");

		PortletEntry.publish();

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			site = "false",
			siteURLKey = "site-name-staging");

		BlogsEntry.addSmallImage(
			browseImage = "true",
			uploadFileName = "Document_2.jpg");

		PortletEntry.publish();

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.gotoSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		BlogsEntry.viewSmallImage(uploadFileName = "Document_2.jpg");
	}

	@description = "This is a test for LPS-136791. It checks that the cover image can be updated and republished using the SAP."
	@priority = "4"
	test CanRepublishCoverImageViaSAP {
		var imageId = JSONBlog.uploadBlogImage(
			groupName = "Site Name (Staging)",
			site = "false",
			sourceFileName = "Document_1.jpg");

		JSONBlog.addEntryWithImage(
			coverImageId = "${imageId}",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			site = "false");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Blogs.publishViaSAP(
			confirmMessage = "Are you sure you want to publish to live?",
			entryTitle = "Blogs Entry Title");

		var imageId = JSONBlog.uploadBlogImage(
			groupName = "Site Name (Staging)",
			site = "false",
			sourceFileName = "Document_2.jpg");

		JSONBlog.updateEntryCoverImage(
			coverImageId = "${imageId}",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			site = "false");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name-staging");

		Blogs.publishViaSAP(
			confirmMessage = "Are you sure you want to publish to live?",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Staging Blogs Page",
			siteURLKey = "site name");

		BlogsEntry.viewEntryPG(
			entryTitle = "Blogs Entry Title",
			uploadFileName = "Document_2.jpg");
	}

	@description = "This is a test for LPS-136800. It checks that an updated inline image can be published and does not appear in live."
	@priority = "4"
	test CanRepublishInlineImageViaSAP {
		BlogsNavigator.openToAddEntry(siteURLKey = "site-name-staging");

		BlogsEntry.addTitle(entryTitle = "Blogs Entry Title");

		BlogsEntry.addContentWithInlineImage(
			entryContent = "Blogs Entry Content",
			uploadFileName = "Document_1.jpg");

		PortletEntry.publish();

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Blogs.publishViaSAP(
			confirmMessage = "Are you sure you want to publish to live?",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			site = "false",
			siteURLKey = "site-name-staging");

		BlogsEntry.addContentWithInlineImage(
			entryContent = "New Blogs Entry Content",
			uploadFileName = "Document_2.jpg");

		PortletEntry.publish();

		Blogs.publishViaSAP(
			confirmMessage = "Are you sure you want to publish to live?",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Staging Blogs Page",
			siteURLKey = "site-name");

		BlogsEntry.viewNoInlineImage(uploadFileName = "Document_1");

		BlogsEntry.viewInlineImage(uploadFileName = "Document_2");
	}

	@description = "This is a test for LPS-136803. It checks that the small image can be updated and republished using the SAP."
	@priority = "4"
	test CanRepublishSmallImageViaSAP {
		BlogsNavigator.openToAddEntry(siteURLKey = "site-name-staging");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.addSmallImage(
			navTab = "Blog Images",
			uploadFileName = "Document_1.jpg");

		PortletEntry.publish();

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Blogs.publishViaSAP(
			confirmMessage = "Are you sure you want to publish to live?",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			site = "false",
			siteURLKey = "site-name-staging");

		BlogsEntry.addSmallImage(
			browseImage = "true",
			uploadFileName = "Document_2.jpg");

		PortletEntry.publish();

		Blogs.publishViaSAP(
			confirmMessage = "Are you sure you want to publish to live?",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		BlogsEntry.viewSmallImage(uploadFileName = "Document_2.jpg");
	}

	@description = "This is a test for LPS-136805. It checks that the Blogs video can be updated and republished using the SAP."
	@priority = "4"
	test CanRepublishVideoViaSAP {
		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Blogs.addEntry(
			embedVideo = "https://vimeo.com/483035084",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			navTab = "URL");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Blogs Page",
			siteName = "Site Name");

		Blogs.publishViaSAP(
			confirmMessage = "Are you sure you want to publish to live?",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name (Staging)",
			site = "false",
			siteURLKey = "site-name-staging");

		BlogsEntry.addEntryContent(
			embedVideo = "https://www.twitch.tv/videos/806178790",
			entryContent = "New Blogs Entry Content",
			entryTitle = "New Blogs Entry Title",
			navTab = "URL");

		PortletEntry.publish();

		Blogs.publishViaSAP(
			confirmMessage = "Are you sure you want to publish to live?",
			entryTitle = "Blogs Entry Title");

		BlogsNavigator.openToBlogEntry(
			entryTitle = "Blogs Entry Title",
			layoutName = "Staging Blogs Page",
			siteURLKey = "site-name");

		BlogsEntry.viewEntryPG(
			embedVideo = "twitch",
			entryContent = "New Blogs Entry Content",
			entryTitle = "New Blogs Entry Title");
	}

}