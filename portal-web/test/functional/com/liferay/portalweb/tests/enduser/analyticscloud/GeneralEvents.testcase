@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8152 | Test Summary: Check all applicable events trigger for unknown users (Page, Blog, Form, Web Content, Documents & Media, Social)"
	@priority = "5"
	test CheckGeneralEventsForUnknownUser {
		property proxy.server.enabled = "true";
		property test.name.skip.portal.instance = "GeneralEvents#CheckGeneralEventsForUnknownUser";

		task ("Add widget pages") {
			for (var layoutName : list "WebContent,Blog,Document,Form") {
				ACUtils.addPage(layoutName = "${layoutName}");
			}
		}

		task ("Add a Web Content Display to page and display a web content") {
			ACUtils.createWCAndAddToPage(
				layoutName = "WebContent",
				webContentContent = '''<div data-analytics-asset-type="custom" data-analytics-asset-id="analytics-portal" data-analytics-asset-category="AC" data-analytics-asset-title="Custom Asset Analytics Cloud">%0A<h1> What'\''s your favorite portal? </h1>%0A</div>''',
				webContentTitle = "Custom Asset AC Title");
		}

		task ("Get groupId of new site") {
			var groupId = JSONGroupSetter.setGroupId(groupName = "Site Name");
		}

		task ("Get articleId of web content") {
			var articleId = JSONWebcontentSetter.setArticleId(
				groupName = "Site Name",
				title = "Custom Asset AC Title");
		}

		task ("Add a Blogs to page and display a blogs entry") {
			ACUtils.createBlogsAndAddToPage(layoutName = "Blog");
		}

		task ("Get entryId of blog entry") {
			var entryId = JSONBlog.getBlogEntryId(
				entryTitle = "Blogs AC Title",
				groupName = "Site Name");
		}

		task ("Add a Documents and Media to page and display a document") {
			ACUtils.createDMAndAddToPage(layoutName = "Document");
		}

		task ("Get fileEntryId of document") {
			var fileEntryId = JSONDocument.getFileEntryId(
				dmDocumentTitle = "DM AC Title",
				groupName = "Site Name");
		}

		task ("Get fileEntryUUID of document") {
			var fileEntryUuid = JSONDocument.getFileEntryUUID(
				dmDocumentTitle = "DM AC Title",
				groupName = "Site Name");
		}

		task ("Enable the Show Actions in Documents and Media") {
			ACUtils.navigateToSitePage(
				pageName = "Document",
				siteName = "Site Name");

			DMDocument.enableActionsMenuOnPortlet();
		}

		task ("Add a Forms to page and display a form") {
			ACUtils.createFormAndAddToPage(layoutName = "Form");
		}

		task ("Get formId of form") {
			var formId = JSONDDMForm.getFormInstanceId(
				formName = "Created Form Name",
				groupName = "Site Name");
		}

		task ("Get published form URL") {
			FormsAdmin.openFormsAdmin(siteURLKey = "site-name");

			FormsAdminNavigator.gotoEditFormByName(formName = "Created Form Name");

			FormsAdminNavigator.gotoPublishCopyURLLink();

			var publishedFormURL = Form.getPublishedFormPublicURL();
		}

		task ("Connect the DXP to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${propertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${propertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in DXP") {
			ACUtils.launchDXP();
		}

		task ("Sign out") {
			UserBar.signOut();
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("pageEvents");
		}

		task ("View the WebContent page as guest") {
			ACUtils.navigateToSitePage(
				pageName = "WebContent",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "10000");
		}

		task ("View the Page events triggered for guest") {
			ACUtils.assertEventPresent(
				applicationId = "Page",
				eventId = "pageViewed");

			var pageLoadTime = ACUtils.getEventPropertyValue(
				applicationId = "Page",
				eventId = "pageLoaded",
				property = "pageLoadTime");

			TestUtils.isGreaterThan(
				actual = "${pageLoadTime}",
				expected = "0");
		}

		task ("View the WebContent events triggered for guest") {
			ACUtils.assertEventPropertyValue(
				applicationId = "WebContent",
				eventId = "webContentViewed",
				property = "articleId",
				value = "${articleId}");

			ACUtils.assertEventPropertyValue(
				applicationId = "WebContent",
				eventId = "webContentViewed",
				property = "title",
				value = "Custom Asset AC Title");

			ACUtils.assertEventPropertyValue(
				applicationId = "WebContent",
				eventId = "webContentViewed",
				property = "numberOfWords",
				value = "4");

			Click(
				key_content = '''//h1[normalize-space(text())="What's your favorite portal?"]''',
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");

			Pause(locator1 = "5000");

			ACUtils.assertEventPropertyValue(
				applicationId = "WebContent",
				eventId = "webContentClicked",
				property = "articleId",
				value = "${articleId}");

			ACUtils.assertEventPropertyValue(
				applicationId = "WebContent",
				eventId = "webContentClicked",
				property = "title",
				value = "Custom Asset AC Title");

			ACUtils.assertEventPropertyValue(
				applicationId = "WebContent",
				eventId = "webContentClicked",
				property = "tagName",
				value = "h1");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}

		task ("Stop the recording") {
			ProxyUtil.stopHarRecording();
		}

		task ("View the Blog page as guest") {
			Navigator._gotoPage(pageName = "Blog");
		}

		task ("Start a new recording") {
			ProxyUtil.startHarRecording("blogEvents");
		}

		task ("View the Blog events triggered for guest") {
			BlogsNavigator.gotoPG(entryTitle = "Blogs AC Title");

			Pause(locator1 = "10000");

			ACUtils.assertEventPropertyValue(
				applicationId = "Blog",
				eventId = "blogViewed",
				property = "entryId",
				value = "${entryId}");

			ACUtils.assertEventPropertyValue(
				applicationId = "Blog",
				eventId = "blogViewed",
				property = "title",
				value = "Blogs AC Title");

			ACUtils.assertEventPropertyValue(
				applicationId = "Blog",
				eventId = "blogViewed",
				property = "numberOfWords",
				value = "20");

			Click(
				key_entryContent = "This is the blog test for AC",
				locator1 = "BlogsEntry#CONTENT");

			Pause(locator1 = "5000");

			ACUtils.assertEventPropertyValue(
				applicationId = "Blog",
				eventId = "blogClicked",
				property = "entryId",
				value = "${entryId}");

			ACUtils.assertEventPropertyValue(
				applicationId = "Blog",
				eventId = "blogClicked",
				property = "title",
				value = "Blogs AC Title");

			ACUtils.assertEventPropertyValue(
				applicationId = "Blog",
				eventId = "blogClicked",
				property = "tagName",
				value = "p");
		}

		task ("Stop the recording") {
			ProxyUtil.stopHarRecording();
		}

		task ("View the Document page as guest") {
			Navigator._gotoPage(pageName = "Document");

			ProxyUtil.startHarRecording("documentEvents");

			Click(
				key_card = "DM AC Title",
				locator1 = "Card#CARD_TITLE");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "10000");
		}

		task ("View the Document events triggered for guest") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentPreviewed",
				property = "fileEntryId",
				value = "${fileEntryId}");

			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentPreviewed",
				property = "title",
				value = "DM AC Title");

			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentPreviewed",
				property = "groupId",
				value = "${groupId}");

			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentPreviewed",
				property = "fileEntryUUID",
				value = "${fileEntryUuid}");

			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentPreviewed",
				property = "version",
				value = "1.0");

			Click(locator1 = "Button#DOWNLOAD");

			Pause(locator1 = "5000");

			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentDownloaded",
				property = "fileEntryId",
				value = "${fileEntryId}");

			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentDownloaded",
				property = "title",
				value = "DM AC Title");

			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentDownloaded",
				property = "groupId",
				value = "${groupId}");

			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentDownloaded",
				property = "preview",
				value = "true");

			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentDownloaded",
				property = "version",
				value = "1.0");
		}

		task ("Stop the recording") {
			ProxyUtil.stopHarRecording();
		}

		task ("Start a new recording") {
			ProxyUtil.startHarRecording("formEvents");
		}

		task ("View the Form page as guest") {
			Navigator.openSpecificURL(url = "${publishedFormURL}");
		}

		task ("View the Form events triggered for guest") {
			Pause(locator1 = "10000");

			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "formViewed",
				property = "formId",
				value = "${formId}");

			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "formViewed",
				property = "title",
				value = "Created Form Name");

			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "pageViewed",
				property = "formId",
				value = "${formId}");

			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "pageViewed",
				property = "page",
				value = "0");

			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "pageViewed",
				property = "title",
				value = "");

			Click(
				key_fieldName = "Text",
				locator1 = "FormFields#TEXT_FIELD");

			Pause(locator1 = "5000");

			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldFocused",
				property = "formId",
				value = "${formId}");

			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldFocused",
				property = "fieldName",
				value = "Text");

			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldFocused",
				property = "page",
				value = "0");

			Click(
				key_fieldLabel = "Text",
				locator1 = "FormFields#LABEL");

			Pause(locator1 = "5000");

			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldBlurred",
				property = "formId",
				value = "${formId}");

			var focusDuration = ACUtils.getEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldBlurred",
				property = "focusDuration");

			TestUtils.isGreaterThan(
				actual = "${focusDuration}",
				expected = "0");

			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldBlurred",
				property = "fieldName",
				value = "Text");

			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "fieldBlurred",
				property = "page",
				value = "0");

			ProxyUtil.stopHarRecording();

			FormFields.editText(
				fieldName = "Text",
				fieldValue = "First Record");

			FormPortlet.submitSuccessfully();

			ProxyUtil.startHarRecording("formEvents");

			Pause(locator1 = "10000");

			ACUtils.assertEventPropertyValue(
				applicationId = "Form",
				eventId = "formSubmitted",
				property = "formId",
				value = "${formId}");
		}

		task ("Stop the recording") {
			ProxyUtil.stopHarRecording();
		}

		task ("View the Blog page as guest") {
			ACUtils.navigateToSitePage(
				pageName = "Blog",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "10000");
		}

		task ("Click the Fackbook icon of blogs enty") {
			SocialBookmarks.clickBookmarkIcon(socialBookmark = "Facebook");
		}

		task ("Start a new recording") {
			ProxyUtil.startHarRecording("socialBookmarksEvents");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("View the SocialBookmarks events triggered for guest") {
			var portalURL = PropsUtil.get("portal.url");

			ACUtils.assertEventPropertyValue(
				applicationId = "SocialBookmarks",
				eventId = "shared",
				property = "className",
				value = "com.liferay.blogs.model.BlogsEntry");

			ACUtils.assertEventPropertyValue(
				applicationId = "SocialBookmarks",
				eventId = "shared",
				property = "classPK",
				value = "${entryId}");

			ACUtils.assertEventPropertyValue(
				applicationId = "SocialBookmarks",
				eventId = "shared",
				property = "type",
				value = "facebook");

			ACUtils.assertEventPropertyValue(
				applicationId = "SocialBookmarks",
				eventId = "shared",
				property = "url",
				value = "${portalURL}/web/site-name/blog/-/blogs/blogs-ac-title");
		}
	}

}