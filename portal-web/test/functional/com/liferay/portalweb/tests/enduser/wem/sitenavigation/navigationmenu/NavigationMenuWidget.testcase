@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Navigation";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a navigation menu in Global site") {
			JSONSitenavigation.addSiteNavigationMenu(
				auto = "false",
				groupName = "Global",
				siteNavigationMenuName = "Global Navigation Menu Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			JSONSitenavigation.deleteSiteNavigationMenu(
				groupName = "Global",
				siteNavigationMenuName = "Global Navigation Menu Name");
		}
	}

	@description = "The user could add widget to page without Add Page permissions"
	@priority = "4"
	test CanAddWidgetToPageWithoutAddPagePermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Add a page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Grand all permissions to Power User for that page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PermissionsInline.gotoSitePageCP(pageName = "Test Page Name");

			Role.definePermissionPG(
				permissionsList = "CONTENT_PERMISSIONS_ADD_DISCUSSION_CHECKBOX,CONTENT_PERMISSIONS_CONFIGURE_APPLICATIONS_CHECKBOX,CONTENT_PERMISSIONS_CUSTOMIZE_CHECKBOX,CONTENT_PERMISSIONS_DELETE_CHECKBOX,CONTENT_PERMISSIONS_DELETE_DISCUSSION_CHECKBOX,CONTENT_PERMISSIONS_PERMISSIONS_CHECKBOX,CONTENT_PERMISSIONS_UPDATE_CHECKBOX,CONTENT_PERMISSIONS_UPDATE_DISCUSSION_CHECKBOX,CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "Power User");

			IFrame.selectTopFrame();
		}

		task ("Add a user with the Power User role") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");

			JSONRole.assignRoleToUser(
				roleTitle = "Power User",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert the user can add widgets to the page") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Click(locator1 = "ControlMenu#ADD");

			AssertTextEquals(
				key_tab = "Widgets",
				locator1 = "NavTab#TAB_LINK",
				value1 = "Widgets");
		}
	}

	@description = "This is a test for LPS-107833. Cannot view Global Navigation Menus via Navigation Menu widget in normal site if the user without View permission."
	@priority = "4"
	test CannotViewGlobalNavigationMenuInNavigationMenuWidgetWithoutPermission {
		task ("Add a URL type item in Global navigation menu") {
			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Global",
				siteNavigationMenuItemName = "Liferay",
				siteNavigationMenuName = "Global Navigation Menu Name",
				type = "url",
				url = "https://www.liferay.com",
				useNewTab = "false");
		}

		task ("Remove the View permission of Guests from Global navigation menu") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "global");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Permissions",
				rowEntry = "Global Navigation Menu Name");

			IFrame.selectPermissionsFrame();

			Uncheck(
				key_roleTitle = "guest",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			PortletEntry.save();
		}

		task ("Select the Global navigation menu in normal site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.chooseMenu(menuName = "Global Navigation Menu Name (Global)");

			Portlet.saveAndCloseConfig();

			AssertVisible(
				key_pageName = "Liferay",
				locator1 = "Home#PAGE");
		}

		task ("Cannot view the content of Navigation Menu widget as Guest") {
			User.logoutPG();

			Navigator.openSiteURL(siteName = "Test Site Name");

			AssertElementNotPresent(
				key_pageName = "Liferay",
				locator1 = "Home#PAGE");
		}
	}

	@description = "This is a use case for LPS-67191. The user could configure the display template in the Navigation Menu widget."
	@priority = "5"
	test ConfigureDisplayTemplateOfNavigationMenuWidget {
		property portal.acceptance = "true";

		task ("Add a page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Navigate to the page") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Select the Split Button Dropdowns display template in Navigation Menu widget") {
			ApplicationDisplayTemplates.selectPortletADT(
				portletName = "Menu Display",
				templateName = "Split Button Dropdowns");
		}

		task ("View the Split Button Dropdowns applied to Navigation Menu widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertVisible(
				key_itemName = "Test Page Name",
				locator1 = "NavigationMenusWidget#SPLIT_BUTTON_DROPDOWNS_ITEM");
		}

		task ("Add the second page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.addPage(pageName = "Test Page Name 2");
		}

		task ("Rename the second page") {
			PagesAdmin.editName(pageNameEdit = "Test Page Name 2 Edit");
		}

		task ("Add a Blogs widget to the second page") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name 2 Edit",
				siteName = "Test Site Name");

			Portlet.addPG(portletName = "Blogs");
		}

		task ("Configure the Look and Feel settings of Blogs") {
			Portlet.gotoPortletOptions(portletOption = "Look and Feel Configuration");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Portlet.configureGeneralViaLookAndFeelPG(customTitle = "Blogs Custom");
		}

		task ("Changes the order of pages") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name");

			PagesAdmin.movePageItemUp(
				pageName = "Test Page Name 2 Edit",
				pageNameTo = "Test Page Name");
		}

		task ("View the order of page items in Navigation Menu widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertTextEquals(
				locator1 = "Home#PAGE_1",
				value1 = "Test Page Name 2 Edit");

			AssertTextEquals(
				locator1 = "Home#PAGE_2",
				value1 = "Test Page Name");
		}

		task ("Select Bar minimally styled display template in Navigation Menu widget") {
			ApplicationDisplayTemplates.selectPortletADT(
				portletName = "Menu Display",
				templateName = "Bar minimally styled");
		}
	}

	@description = "This is a test for LPS-107833. Can edit Global Navigation Menu via Navigation Menu widget in normal site."
	@priority = "4"
	test EditGlobalNavigationMenuViaNavigationMenuWidgetInNormalSite {
		task ("Select Global Navigation Menu in normal site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.chooseMenu(menuName = "Global Navigation Menu Name (Global)");

			Portlet.saveAndCloseConfig();
		}

		task ("Edit Global Navigation Menu via Navigation Menu widget") {
			NavigationMenusWidget.gotoEditNavigationMenuEntry();

			ControlMenu.viewHeaderTitle(headerTitle = "Global Navigation Menu Name");

			var portalURL = PropsUtil.get("portal.url");

			AssertLocation.assertPartialLocation(value1 = "${portalURL}/group/global/~/control_panel/manage?p_p_id=com_liferay_site_navigation_admin_web_portlet_SiteNavigationAdminPortlet");
		}
	}

	@description = "This is a test for LPS-87134. The user could hide pages from the Navigation Menu widget."
	@priority = "4"
	test HidePages {
		task ("Add two pages") {
			for (var n : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${n}");
			}
		}

		task ("Hide the second page from Navigation Menu widget") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Test Page Name 2");

			PagesAdmin.toggleHiddenFromNavigationMenuWidget(toggleValue = "enable");

			PortletEntry.save();
		}

		task ("View only the first page shown in the Navigation Menu widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name 1",
				siteName = "Test Site Name");

			AssertVisible(
				key_pageName = "Test Page Name 1",
				locator1 = "Home#PAGE");

			AssertElementNotPresent(
				key_pageName = "Test Page Name 2",
				locator1 = "Home#PAGE");
		}
	}

	@description = "This is a test for LPS-87134. The user could navigate to pages via the Navigation Menu widget."
	@priority = "5"
	@uitest
	test NavigateToPages {
		property portal.acceptance = "true";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page");
		}

		task ("Add a child page under the widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Child Page",
				parentLayoutName = "Test Widget Page");
		}

		task ("Navigate to pages via the Navigation Menu widget") {
			Navigator.gotoSitePage(
				pageName = "Test Widget Page",
				siteName = "Test Site Name");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Widget Page");

			Page.gotoChildPagePG(
				childPageName = "Test Child Page",
				pageName = "Test Widget Page",
				siteName = "Test Site Name");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Child Page");

			Navigator.gotoSitePage(
				pageName = "Test Content Page",
				siteName = "Test Site Name");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Content Page");
		}
	}

	@description = "This is a test for LPS-107833. Can select Global Navigation Menu via Navigation Menu widget in normal site."
	@priority = "5"
	test SelectGlobalNavigationMenuInNormalSite {
		property portal.acceptance = "true";

		task ("Select Global Navigation Menu in normal site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.chooseMenu(menuName = "Global Navigation Menu Name (Global)");

			Portlet.saveAndCloseConfig();
		}
	}

	@description = "This is a use case for LPS-113994. The Naviation Menu is able to display the page hierarchy with more than two sublevels when choose a custom menu."
	@priority = "4"
	test ShowMoreThanTwoSublevelsWhenSelectCustomMenuAndBarMinimallyStyled {
		task ("Add pages at the same level") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Home");

			for (var n : list "1,2,3") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${n}");
			}
		}

		task ("Add a navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = "Test Site Name",
				siteNavigationMenuName = "Navigation Menu Name");
		}

		task ("Add page items to the navigation menu and make a page hierarchy") {
			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name",
				privateLayout = "false",
				siteNavigationMenuItemName = "Home",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "layout");

			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name",
				parentSiteNavigationMenuItem = "Home",
				privateLayout = "false",
				siteNavigationMenuItemName = "Test Page Name 1",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "layout");

			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name",
				parentSiteNavigationMenuItem = "Test Page Name 1",
				privateLayout = "false",
				siteNavigationMenuItemName = "Test Page Name 2",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "layout");

			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name",
				parentSiteNavigationMenuItem = "Test Page Name 2",
				privateLayout = "false",
				siteNavigationMenuItemName = "Test Page Name 3",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "layout");
		}

		task ("Select custom menu and Bar minimally styled in Navigation Menu widget") {
			Navigator.gotoSitePage(
				pageName = "Home",
				siteName = "Test Site Name");

			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.chooseMenu(menuName = "Navigation Menu Name");

			NavigationMenusWidget.selectDisplayTemplate(templateName = "Bar minimally styled");

			AssertSelectedLabel(
				locator1 = "Select#DISPLAY_TEMPLATE",
				value1 = "Bar minimally styled");

			Portlet.saveAndCloseConfig();
		}

		task ("Navigate to pages via Navigation Menu widget") {
			for (var n : list "1,2,3") {
				NavigationMenusWidget.gotoSublevel(
					itemName = "Test Page Name ${n}",
					pageName = "Home",
					type = "Drop Down");

				ControlMenu.viewHeaderTitle(headerTitle = "Test Page Name ${n}");
			}
		}
	}

	@description = "This is a use case for LPS-113994. The Naviation Menu is able to display the page hierarchy with more than two sublevels when use the Bar minimally styled by default."
	@priority = "5"
	test ShowMoreThanTwoSublevelsWhenSelectPublicPagesHierarchyAndBarMinimallyStyled {
		property portal.acceptance = "true";

		task ("Add pages with hierarchy") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Home");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Child Page",
				parentLayoutName = "Home");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Grandchild Page",
				parentLayoutName = "Child Page");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Great Grandchild Page",
				parentLayoutName = "Grandchild Page");
		}

		task ("Navigate to the Home page") {
			Navigator.gotoSitePage(
				pageName = "Home",
				siteName = "Test Site Name");
		}

		task ("Assert Select Public Pages Hierarchy and Bar minimally styled") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.selectNavigation(menuType = "Pages Hierarchy");

			AssertSelectedLabel(
				locator1 = "NavigationMenusWidget#SELECT_NAVIGATION",
				value1 = "Pages Hierarchy");

			NavigationMenusWidget.selectDisplayTemplate(templateName = "Bar minimally styled");

			AssertSelectedLabel(
				locator1 = "Select#DISPLAY_TEMPLATE",
				value1 = "Bar minimally styled");

			Portlet.saveAndCloseConfig();
		}

		task ("Navigate to Child Page via Navigation Menu widget") {
			NavigationMenusWidget.gotoSublevel(
				itemName = "Child Page",
				pageName = "Home",
				type = "Drop Down");

			ControlMenu.viewHeaderTitle(headerTitle = "Child Page");
		}

		task ("Navigate to Grandchild Page via Navigation Menu widget") {
			NavigationMenusWidget.gotoSublevel(
				itemName = "Grandchild Page",
				pageName = "Home",
				type = "Drop Down");

			ControlMenu.viewHeaderTitle(headerTitle = "Grandchild Page");
		}

		task ("Navigate to Greate Grandchild Page via Navigation Menu widget") {
			NavigationMenusWidget.gotoSublevel(
				itemName = "Great Grandchild Page",
				pageName = "Home",
				type = "Drop Down");

			ControlMenu.viewHeaderTitle(headerTitle = "Great Grandchild Page");
		}
	}

	@description = "This is a use case for LPS-113994. The Naviation Menu is able to display the page hierarchy with more than two sublevels when use the List Menu."
	@priority = "4"
	test ShowMoreThanTwoSublevelsWhenSelectPublicPagesHierarchyAndListMenu {
		task ("Add pages with hierarchy") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Home");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Child Page",
				parentLayoutName = "Home");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Grandchild Page",
				parentLayoutName = "Child Page");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Great Grandchild Page",
				parentLayoutName = "Grandchild Page");
		}

		task ("Navigate to Home") {
			Navigator.gotoSitePage(
				pageName = "Home",
				siteName = "Test Site Name");
		}

		task ("Assert Select Public Pages Hierarchy and Bar minimally styled") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.selectNavigation(menuType = "Pages Hierarchy");

			AssertSelectedLabel(
				locator1 = "NavigationMenusWidget#SELECT_NAVIGATION",
				value1 = "Pages Hierarchy");

			NavigationMenusWidget.selectDisplayTemplate(templateName = "List Menu");

			AssertSelectedLabel(
				locator1 = "Select#DISPLAY_TEMPLATE",
				value1 = "List Menu");

			Portlet.saveAndCloseConfig();
		}

		task ("Navigate to Child Page via Navigation Menu widget") {
			NavigationMenusWidget.gotoSublevel(
				itemName = "Child Page",
				pageName = "Home",
				type = "List");

			ControlMenu.viewHeaderTitle(headerTitle = "Child Page");
		}

		task ("Navigate to Grandchild Page via Navigation Menu widget") {
			NavigationMenusWidget.gotoSublevel(
				itemName = "Grandchild Page",
				pageName = "Home",
				type = "List");

			ControlMenu.viewHeaderTitle(headerTitle = "Grandchild Page");
		}

		task ("Navigate to Greate Grandchild Page via Navigation Menu widget") {
			NavigationMenusWidget.gotoSublevel(
				itemName = "Great Grandchild Page",
				pageName = "Home",
				type = "List");

			ControlMenu.viewHeaderTitle(headerTitle = "Great Grandchild Page");
		}
	}

	@description = "This is a use case for LPS-113994. The Navigation Menu should show the same amount of levels with the number of Levels to Display."
	@priority = "5"
	test ShowTheSameAmountOfLevelsWithTheNumberOfLevelsToDisplay {
		property portal.acceptance = "true";

		task ("Add pages with hierarchy") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Home");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Child Page",
				parentLayoutName = "Home");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Grandchild Page",
				parentLayoutName = "Child Page");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Great Grandchild Page",
				parentLayoutName = "Grandchild Page");
		}

		task ("Navigate to Home") {
			Navigator.gotoSitePage(
				pageName = "Home",
				siteName = "Test Site Name");
		}

		task ("Select 2 in Levels to Display") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.selectLevelsToDisplay(levels = "2");

			AssertSelectedLabel(
				key_selectFieldLabel = "Levels to Display",
				locator1 = "Select#ANY",
				value1 = "2");

			Portlet.saveAndCloseConfig();
		}

		task ("Assert only 2 levels shown in Navigation Menu") {
			MouseOver.javaScriptMouseOver(
				key_pageName = "Home",
				locator1 = "Home#PAGE");

			AssertVisible(
				key_itemName = "Child Page",
				locator1 = "NavigationMenusWidget#DROPDOWN_MENU_ITEM");

			AssertElementNotPresent(
				key_itemName = "Grandchild Page",
				locator1 = "NavigationMenusWidget#DROPDOWN_MENU_ITEM");

			AssertElementNotPresent(
				key_itemName = "Great Grandchild Page",
				locator1 = "NavigationMenusWidget#DROPDOWN_MENU_ITEM");
		}

		task ("Select 3 in Levels to Display") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.selectLevelsToDisplay(levels = "3");

			AssertSelectedLabel(
				key_selectFieldLabel = "Levels to Display",
				locator1 = "Select#ANY",
				value1 = "3");

			Portlet.saveAndCloseConfig();
		}

		task ("Assert only 2 levels shown in Navigation Menu") {
			MouseOver.javaScriptMouseOver(
				key_pageName = "Home",
				locator1 = "Home#PAGE");

			AssertVisible(
				key_itemName = "Child Page",
				locator1 = "NavigationMenusWidget#DROPDOWN_MENU_ITEM");

			AssertVisible(
				key_itemName = "Grandchild Page",
				locator1 = "NavigationMenusWidget#DROPDOWN_MENU_ITEM");

			AssertElementNotPresent(
				key_itemName = "Great Grandchild Page",
				locator1 = "NavigationMenusWidget#DROPDOWN_MENU_ITEM");
		}
	}

	@description = "This is a test for LPS-108262. Custom fields defined in Site Navigation Menu Item can be displayed in Navigation Menu portlet."
	@priority = "4"
	test ViewCustomFieldOfNavigationMenu {
		task ("Add a custom field for Site Navigation Menu Item") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Custom Fields");

			CustomFields.addCP(
				customFieldName = "Subtitle",
				customFieldType = "Input Field",
				customInputDataType = "Text",
				resourceName = "Site Navigation Menu Item");
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add a navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = "Test Site Name",
				siteNavigationMenuName = "Navigation Menu Name");
		}

		task ("Add a page type item") {
			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name",
				privateLayout = "false",
				siteNavigationMenuItemName = "Test Page Name",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "layout");
		}

		task ("Add a submenu type item") {
			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name",
				siteNavigationMenuItemName = "Submenu Name",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "node");
		}

		task ("Add a URL type item") {
			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name",
				siteNavigationMenuItemName = "Liferay",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "url",
				url = "https://www.liferay.com",
				useNewTab = "false");
		}

		task ("Type content in custom field of navigation menu items") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoEntry(rowEntry = "Navigation Menu Name");

			NavigationMenusAdmin.editItem(
				customField = "Subtitle",
				fieldValue = "Page",
				itemName = "Test Page Name");

			NavigationMenusAdmin.editItem(
				customField = "Subtitle",
				fieldValue = "Submenu",
				itemName = "Submenu Name");

			NavigationMenusAdmin.editItem(
				customField = "Subtitle",
				fieldValue = "URL",
				itemName = "Liferay");
		}

		task ("Add a Navigation Menu template") {
			var templateScript = '''
<#if entries?has_content>
	<#list entries as navItem>
		<#assign customFields = navItem.getExpandoAttributes()/>
		${customFields["subtitle"]}
	</#list>
</#if>
			''';

			ApplicationDisplayTemplates.openWidgetTemplatesAdmin(siteURLKey = "test-site-name");

			ApplicationDisplayTemplates.addCP(
				adtType = "Menu Display",
				templateScript = "${templateScript}");
		}

		task ("Select the navigation menu in the Navigation Menu widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.chooseMenu(menuName = "Navigation Menu Name");

			NavigationMenusWidget.selectDisplayTemplate(templateName = "Menu Display Test ADT");

			AssertSelectedLabel(
				locator1 = "Select#DISPLAY_TEMPLATE",
				value1 = "Menu Display Test ADT");

			Portlet.saveAndCloseConfig();
		}

		task ("View the custom fields are shown in Navigation Menu widget") {
			for (var fieldValue : list "Page,Submenu,URL") {
				AssertTextEquals.assertPartialText(
					key_portletName = "Menu Display",
					locator1 = "ManagementBar#PORTLET_BODY",
					value1 = "${fieldValue}");
			}
		}
	}

	@description = "This is a test for LPS-87134. The selected navigation is Pages Hierarchy in the Navigation Menu widget by default."
	@priority = "3"
	test ViewDefaultSelectedNavigation {
		task ("Add a page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Site Page");
		}

		task ("Navigate to the page") {
			Navigator.gotoSitePage(
				pageName = "Test Site Page",
				siteName = "Test Site Name");
		}

		task ("View the default selected navigation") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			AssertSelectedLabel(
				locator1 = "NavigationMenusWidget#SELECT_NAVIGATION",
				value1 = "Pages Hierarchy");
		}
	}

	@description = "This is a test for LPS-76717. The user could view warning message in preview window when no available navigation in site."
	@priority = "3"
	test ViewWarningMessageInPreviewWindowWhenNoNavigationAvailable {
		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");
		}

		task ("Add a Menu Display widget to content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.addWidget(
				indexItem = "2",
				portletName = "Menu Display");
		}

		task ("View the warning message shown in preview window when no navigation available") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			AssertSelectedLabel(
				locator1 = "NavigationMenusWidget#SELECT_NAVIGATION",
				value1 = "Primary Navigation");

			Alert.viewWarningSpecific(warningMessage = "There is no Primary Navigation available for the current site.");

			NavigationMenusWidget.selectNavigation(menuType = "Secondary Navigation");

			Alert.viewWarningSpecific(warningMessage = "There is no Secondary Navigation available for the current site.");

			NavigationMenusWidget.selectNavigation(menuType = "Social Navigation");

			Alert.viewWarningSpecific(warningMessage = "There is no Social Navigation available for the current site.");
		}
	}

}