@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a Blogs widget to page") {
			ACUtils.addWidgetToPage(
				layoutName = "AC Page",
				widgetName = "Blogs");
		}

		task ("Add 10 blogs entries with long content") {
			var n = "0";

			while ("${n}" != "10") {
				var n = ${n} + 1;

				ACUtils.createBlogsAndAddToPage(
					entryContent = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce in lacus nunc. Etiam et volutpat est. Quisque quis mi erat. Donec maximus mauris augue, nec convallis metus aliquet vitae. Nullam venenatis a nisl in tincidunt. Aliquam venenatis, enim in venenatis aliquam, mauris erat blandit nulla, sit amet tincidunt elit enim sit amet dolor. Aliquam fringilla condimentum varius. Maecenas tincidunt elit eget lacinia aliquam. Proin congue diam lorem. Vestibulum tristique elit mi, non dapibus erat lobortis.",
					entryTitle = "Blogs Entry Title ${n}",
					groupName = "Site Name");
			}
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8805 | Test Summary: Check pageDepthReached triggers ([depth] = 25) and check its properties (see reference document in comments)"
	@priority = "5"
	test CheckPageDepthReachedTo25 {
		property proxy.server.enabled = "true";

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as Test Test") {
			ACUtils.launchDXP();
		}

		task ("Navigate to the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("pageDepthReached");
		}

		task ("Scroll down to view the fourth blogs entry") {
			ScrollWebElementIntoView(
				key_entryTitle = "Blogs Entry Title 7",
				locator1 = "BlogsEntry#TITLE");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("View the depth of pageDepthReached event is 25") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Page",
				eventId = "pageDepthReached",
				property = "depth",
				value = "25");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8806 | Test Summary: Check pageDepthReached trigggers ([depth] = 50) and check its properties (see reference document in comments)"
	@priority = "5"
	test CheckPageDepthReachedTo50 {
		property proxy.server.enabled = "true";

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as Test Test") {
			ACUtils.launchDXP();
		}

		task ("Navigate to the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("pageDepthReached");
		}

		task ("Scroll down to view the sixth blogs entry") {
			ScrollWebElementIntoView(
				key_entryTitle = "Blogs Entry Title 4",
				locator1 = "BlogsEntry#TITLE");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("View the depth of pageDepthReached event is 50") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Page",
				eventId = "pageDepthReached",
				property = "depth",
				value = "50");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8807 | Test Summary: Check pageDepthReached trigggers ([depth] = 75) and check its properties (see reference document in comments)"
	@priority = "5"
	test CheckPageDepthReachedTo75 {
		property proxy.server.enabled = "true";

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as Test Test") {
			ACUtils.launchDXP();
		}

		task ("Navigate to the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("pageDepthReached");
		}

		task ("Scroll down to view the eighth blogs entry") {
			ScrollWebElementIntoView(
				key_entryTitle = "Blogs Entry Title 2",
				locator1 = "BlogsEntry#TITLE");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("View the depth of pageDepthReached event is 75") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Page",
				eventId = "pageDepthReached",
				property = "depth",
				value = "75");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8808 | Test Summary: Check pageDepthReached trigggers ([depth] = 100) and check its properties (see reference document in comments)"
	@priority = "5"
	test CheckPageDepthReachedTo100 {
		property proxy.server.enabled = "true";

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as Test Test") {
			ACUtils.launchDXP();
		}

		task ("Navigate to the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("pageDepthReached");
		}

		task ("Scroll down by 4000") {
			ScrollBy(value1 = "0, 4000");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "10000");
		}

		task ("View the depth of pageDepthReached event is 100") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Page",
				eventId = "pageDepthReached",
				property = "depth",
				value = "100");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8871 | Test Summary: Check pageDepthReached events trigger when scrolling the page by hitting the Page Dn or the Down arrow keys"
	@priority = "3"
	test CheckPageDepthReachedWhenPressPageDownKey {
		property proxy.server.enabled = "true";

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as Test Test") {
			ACUtils.launchDXP();
		}

		task ("Navigate to the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("pageDepthReached");
		}

		task ("Press Page Down key") {
			KeyPress(
				locator1 = "//body",
				value1 = "\DOWN");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "10000");
		}

		task ("View the depth of pageDepthReached event is 100") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Page",
				eventId = "pageDepthReached",
				property = "depth",
				value = "100");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8935 | Test Summary: Check all page events can be sent again if the page is refreshed/hard refreshed"
	@priority = "4"
	test CheckPageEventsTriggeredAgainAfterHardRefresh {
		property proxy.server.enabled = "true";

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as Test Test") {
			ACUtils.launchDXP();
		}

		task ("Navigate to the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Stay 5 seconds") {
			Pause(locator1 = "5000");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("pageEvents");
		}

		task ("Hard refresh the page") {
			TestUtils.hardRefresh();
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "10000");
		}

		task ("View the pageUnloaded event triggered") {
			ACUtils.assertEventPresent(
				applicationId = "Page",
				eventId = "pageUnloaded");
		}

		task ("View the viewDuration of pageUnloaded event is greater than 0 ms") {
			var viewDuration = ACUtils.getEventPropertyValue(
				applicationId = "Page",
				eventId = "pageUnloaded",
				property = "viewDuration");

			TestUtils.isGreaterThan(
				actual = "${viewDuration}",
				expected = "0");
		}

		task ("View the pageViewed event triggered") {
			ACUtils.assertEventPresent(
				applicationId = "Page",
				eventId = "pageViewed");
		}

		task ("View the pageLoadTime of pageLoaded event is greater than 0 ms") {
			var pageLoadTime = ACUtils.getEventPropertyValue(
				applicationId = "Page",
				eventId = "pageLoaded",
				property = "pageLoadTime");

			TestUtils.isGreaterThan(
				actual = "${pageLoadTime}",
				expected = "0");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8802 | Test Summary: Check all page events are triggered over again after a page refresh"
	@priority = "4"
	test CheckPageEventsTriggeredAgainAfterRefresh {
		property proxy.server.enabled = "true";

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as Test Test") {
			ACUtils.launchDXP();
		}

		task ("Navigate to the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Stay 5 seconds") {
			Pause(locator1 = "5000");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("pageEvents");
		}

		task ("Refresh the page") {
			Refresh();
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "10000");
		}

		task ("View the pageUnloaded event triggered") {
			ACUtils.assertEventPresent(
				applicationId = "Page",
				eventId = "pageUnloaded");
		}

		task ("View the viewDuration of pageUnloaded event is greater than 0 ms") {
			var viewDuration = ACUtils.getEventPropertyValue(
				applicationId = "Page",
				eventId = "pageUnloaded",
				property = "viewDuration");

			TestUtils.isGreaterThan(
				actual = "${viewDuration}",
				expected = "0");
		}

		task ("View the pageViewed event triggered") {
			ACUtils.assertEventPresent(
				applicationId = "Page",
				eventId = "pageViewed");
		}

		task ("View the pageLoadTime of pageLoaded event is greater than 0 ms") {
			var pageLoadTime = ACUtils.getEventPropertyValue(
				applicationId = "Page",
				eventId = "pageLoaded",
				property = "pageLoadTime");

			TestUtils.isGreaterThan(
				actual = "${pageLoadTime}",
				expected = "0");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8799 | Test Summary: Check pageLoaded triggers when visiting a DXP page and check its properties (see reference document in comments)"
	@priority = "5"
	test CheckPageLoadedWhenViewPage {
		property proxy.server.enabled = "true";

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as Test Test") {
			ACUtils.launchDXP();
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("pageLoaded");
		}

		task ("Navigate to the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("View the pageLoadTime of pageLoaded event is greater than 0 ms") {
			var pageLoadTime = ACUtils.getEventPropertyValue(
				applicationId = "Page",
				eventId = "pageLoaded",
				property = "pageLoadTime");

			TestUtils.isGreaterThan(
				actual = "${pageLoadTime}",
				expected = "0");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8870 | Test Summary: Check pageUnloaded does not trigger when coming from untracked or external sites"
	@priority = "4"
	test CheckPageUnLoadedIsNotTriggeredWhenComesFromUntrackedPage {
		property proxy.server.enabled = "true";

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as Test Test") {
			ACUtils.launchDXP();
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("pageUnloaded");
		}

		task ("Navigate to the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("View the pageUnloaded event not triggered") {
			ACUtils.assertEventNotPresent(
				applicationId = "Page",
				eventId = "pageUnloaded");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8801 | Test Summary: Check pageUnloaded triggers when leaving a DXPpage and check its properties (see reference document in comments)"
	@priority = "5"
	test CheckPageUnLoadedWhenLeavePage {
		property proxy.server.enabled = "true";

		task ("Add the second widget page") {
			ACUtils.addPage(layoutName = "Test Page Name");
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as Test Test") {
			ACUtils.launchDXP();
		}

		task ("Navigate to the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Stay 5 seconds") {
			Pause(locator1 = "5000");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("pageUnloaded");
		}

		task ("Navigate to another page via Navigation Menu widget") {
			Navigator._gotoPage(pageName = "Test Page Name");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("View the viewDuration of pageUnloaded event is greater than 0 ms") {
			var viewDuration = ACUtils.getEventPropertyValue(
				applicationId = "Page",
				eventId = "pageUnloaded",
				property = "viewDuration");

			TestUtils.isGreaterThan(
				actual = "${viewDuration}",
				expected = "0");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8800 | Test Summary: Check pageViewed triggers when visiting a DXP page and check its properties (see reference document in comments)"
	@priority = "5"
	test CheckPageViewedWhenViewPage {
		property proxy.server.enabled = "true";

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as Test Test") {
			ACUtils.launchDXP();
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("pageViewed");
		}

		task ("Navigate to the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("View the pageViewed event triggered") {
			ACUtils.assertEventPresent(
				applicationId = "Page",
				eventId = "pageViewed");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8804 | Test Summary: Check tabBlurred fires whenever the user navigates to a different tab, window minimized or when the page is unloaded and check its properties (see reference document in comments)"
	@priority = "5"
	test CheckTabBlurredWhenComesFromADifferentTab {
		property proxy.server.enabled = "true";

		task ("Get site assigned property name and get data source name") {
			var dataSource = StringUtil.extractFirst("${assignedPropertyName}", " ");
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Navigate to the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Open the BBC home page in a new tab") {
			Open.openInTheNewTab(locator1 = "https://www.bbc.com");
		}

		task ("Switch to the new tab") {
			SelectWindow(locator1 = "title=BBC - Homepage");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("tabBlurred");
		}

		task ("Switch to the previous tab") {
			SelectWindow(locator1 = "title=AC Page - Site Name - ${dataSource}");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("View the tabBlurred event triggered") {
			ACUtils.assertEventPresent(
				applicationId = "Page",
				eventId = "tabBlurred");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8869 | Test Summary: Check tabFocused fires once the tab is active and check its properties (see reference document in comments)"
	@priority = "5"
	test CheckTabFocusedOnceTabIsActive {
		property proxy.server.enabled = "true";

		task ("Get site assigned property name and get data source name") {
			var dataSource = StringUtil.extractFirst("${assignedPropertyName}", " ");
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Navigate to the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Open the BBC home page in a new tab") {
			Open.openInTheNewTab(locator1 = "https://www.bbc.com");
		}

		task ("Switch to the new tab") {
			SelectWindow(locator1 = "title=BBC - Homepage");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("tabFocused");
		}

		task ("Switch to the previous tab") {
			SelectWindow(locator1 = "title=AC Page - Site Name - ${dataSource}");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("View the tabFocused event triggered") {
			ACUtils.assertEventPresent(
				applicationId = "Page",
				eventId = "tabFocused");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

}