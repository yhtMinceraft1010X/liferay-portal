@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Pages Administration";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Go to Pages Admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Can add and delete a web content display widget on page."
	@priority = "5"
	@uitest
	test AddAndDeleteWidget {
		property portal.acceptance = "true";
		property testray.component.names = "Web Content Display,Training";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add a Web Content Display widget to page") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Portlet.addPG(portletName = "Web Content Display");
		}

		task ("View Web Content Display is shown") {
			Portlet.viewPG(portletName = "Web Content Display");
		}

		task ("Delete Web Content Display widget") {
			Portlet.deletePG(portletName = "Web Content Display");
		}

		task ("View Web Content Display is not shown") {
			Portlet.viewNoSpecificPG(portletName = "Web Content Display");
		}
	}

	@description = "The user can add a child page."
	@priority = "5"
	@uitest
	test AddChildPage {
		property portal.acceptance = "true";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add a child page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.addChildPage(
				childPageName = "Test Child Page",
				parentPageName = "Test Page Name");
		}

		task ("View child page in Pages admin") {
			PagesAdmin.viewPageItemPresent(
				depth = "2",
				pageName = "Test Child Page");
		}
	}

	@description = "The user can add multiple public pages."
	@priority = "3"
	@uitest
	test AddMultiplePages {
		task ("Add three widget pages") {
			for (var i : list "1,2,3") {
				PagesAdmin.addPage(pageName = "Test Page Name ${i}");
			}
		}

		task ("View pages in Pages admin") {
			for (var i : list "1,2,3") {
				PagesAdmin.viewPageItemPresent(pageName = "Test Page Name ${i}");
			}
		}
	}

	@description = "The user can add a private page."
	@priority = "4"
	@uitest
	test AddPrivatePage {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Add a private page") {
			PagesAdmin.addPrivatePage(pageName = "Test Private Page");
		}

		task ("View private page in Pages admin") {
			PagesAdmin.viewPageItemPresent(
				pageName = "Test Private Page",
				privacy = "Private Pages");
		}
	}

	@description = "This is a test for LPS-132422. The list of actions appear in right order for pages."
	@priority = "3"
	test ViewOrderOfPageActions {
		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("View order of the page actions") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.openPageEllipsisMenu(pageName = "Test Page Name");

			MenuItem.viewOrder(menuItemList = "View,-,Convert to content page...,-,Copy page,-,Configure,Permissions,-,Delete");
		}
	}

}