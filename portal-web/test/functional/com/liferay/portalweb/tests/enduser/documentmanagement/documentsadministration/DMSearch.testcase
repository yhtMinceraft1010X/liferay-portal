@component-name = "portal-document-management"
definition {

	property custom.properties = "default.layout.template.id=1_column";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Document Management";

	var pageName = "Documents and Media Page";
	var portletName = "Documents and Media";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			DMFolder.tearDownCP();

			DMDocumentType.tearDownCP();

			PagesAdmin.tearDownCP();
		}
	}

	@description = "This is a test for LPS-98063. It checks that a user can search for document by synonyms."
	@priority = "4"
	test CanSearchForDocumentBySynonyms {
		property test.run.environment = "EE";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "apple",
			groupName = "Guest",
			mimeType = "image/png",
			sourceFileName = "Document_1.png");

		SearchTuning.openSynonymsAdmin();

		SearchTuning.addSynonymSet(synonyms = "apple,fruit");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "fruit");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "apple",
			searchAssetType = "Document");
	}

	@priority = "4"
	@refactordone
	test CanSearchForDocumentInFolder {
		property portal.acceptance = "true";

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Guest");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			folderName = "DM Folder Name",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder Name");

		SearchPortlets.searchEmbedded(searchTerm = "DM Document Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");
	}

	@priority = "4"
	@refactordone
	test CanSearchForDocumentThroughContent {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		SearchPortlets.searchEmbedded(searchTerm = "This is a *.doc file.");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "This is a *.doc file.",
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");
	}

	@description = "This test covers LPS-129887. It ensures that the user can search for documents using file name."
	@priority = "5"
	@refactordone
	test CanSearchForDocumentThroughFileName {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		for (var searchTermList : list "Document_1.doc,Document_1") {
			Search.searchPG(
				portletName = "Documents and Media",
				searchTerm = "${searchTermList}");

			DMDocument.viewSearchResultsPG(dmDocumentTitle = "DM Document Title");
		}
	}

	@priority = "4"
	@refactordone
	test CanSearchForDocumentThroughTitle {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		SearchPortlets.searchEmbedded(searchTerm = "DM Document Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");
	}

	@description = "This is a test for LPS-80203. It checks that the users will remain in the current context after clearing the search."
	@priority = "4"
	test UserRemainsInCurrentContextAfterClearingSearch {
		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Guest");

		JSONFolder.addFolder(
			dmFolderDescription = "DM SubFolder Description",
			dmFolderName = "DM SubFolder Name",
			groupName = "Guest",
			parentFolderName = "DM Folder Name");

		DMNavigator.openToFolderInAdmin(
			dmFolderName = "DM Folder Name",
			groupName = "Guest",
			siteURLKey = "guest");

		Search.searchCP(searchTerm = "DM SubFolder Name");

		Search.clearSearchResult();

		Breadcrumb.viewActiveEntry(breadcrumbName = "DM Folder Name");
	}

}