@component-name = "portal-staging"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Site Templates";
	property testray.main.component.name = "Site Templates";

	var siteTemplateName = "Site Template Name";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.openURL();

			User.logoutAndLoginPG(
				password = "test",
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			JSONUser.tearDownNonAdminUsers();

			UserGroup.tearDownCP();

			Site.tearDownCP();

			SiteTemplates.tearDownCP();

			DMDocument.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-87055. Adding a page template with an already used name fails with a clear error message."
	@priority = "3"
	test AddPageTemplatesWithDuplicateNameViaSiteTemplate {
		SiteTemplates.addCP(
			siteTemplateActive = "Yes",
			siteTemplateName = "Site Template Name");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Manage",
			rowEntry = "Site Template Name");

		ProductMenu.gotoPortlet(
			category = "Design",
			portlet = "Page Templates");

		NavItem.gotoPageTemplates();

		PageTemplatesAdmin.addCollection(collectionName = "Page Template Collection");

		Navigator.gotoNavNested(navNested = "Page Template Collection");

		PageTemplatesAdmin.addPageTemplate(
			pageTemplateName = "Test",
			siteTemplate = "true");

		Navigator.openURL();

		SiteTemplatesNavigator.openSiteTemplatesAdmin();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Manage",
			rowEntry = "Site Template Name");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		ProductMenu.gotoPortlet(
			category = "Design",
			portlet = "Page Templates");

		NavItem.gotoPageTemplates();

		Navigator.gotoNavNested(navNested = "Page Template Collection");

		PageTemplatesAdmin.addDuplicatePageTemplate(
			duplicatePageTemplate = "true",
			pageTemplateName = "Test",
			siteTemplate = "true");
	}

	@description = "This is a use case for LPS-51432 and LPS-95113. Pages associated with a site template cannot be deleted and removing a parent page on a site template will delete the same page and the child page also on the connected sites, if propagation is enabled."
	@priority = "4"
	test AdminCanNotAddASubpageOfAChildPageLinkedToSiteTemplatePage {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SitetemplatesUsecase#AdminCanNotAddASubpageOfAChildPageLinkedToSiteTemplatePage";

		SiteTemplates.addCP(siteTemplateName = "Site Template Name");

		SiteTemplates.addSitePageViaSiteTemplateCP(
			pageName = "Site Page Name",
			siteTemplateName = "Site Template Name");

		SiteTemplatesNavigator.openSiteTemplatesAdmin();

		SiteTemplates.addChildPageViaSiteTemplateCP(
			childSitepageName = "true",
			pageName = "Site Page Name",
			siteChildPageName = "Site Child Page Name",
			siteTemplateName = "Site Template Name");

		Site.openSitesAdmin();

		Site.addSiteTemplateCP(
			siteName = "Site Name",
			siteTemplateName = "Site Template Name");

		Navigator.gotoSitePage(
			pageName = "Home",
			siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.cannotDeletePagesAssociatedWithSiteTemplate(
			page = "Site Child Page Name",
			pageName = "Site Page Name");

		SiteTemplatesNavigator.openSiteTemplatesAdmin();

		SiteTemplates.deletePage(
			hasChildren = "true",
			pageName = "Site Page Name",
			siteTemplateName = "Site Template Name");

		Navigator.openSiteURL(siteName = "Site Name");

		Refresh();

		Page.viewNoPG(pageName = "Site Page Name");

		Page.viewNoPG(pageName = "Site Child Page Name");

		PagesAdmin.viewPageItemNotPresent(pageName = "Site Page Name");

		PagesAdmin.viewPageItemNotPresent(pageName = "Site Child Page Name");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");
	}

	@description = "This is a use case for LPS-81629. Newly created pages are visible next to the home page on site template and on the site created from that template."
	@priority = "3"
	test AllPageIsVisibleAfterAddingNewPages {
		property test.name.skip.portal.instance = "SitetemplatesUsecase#AllPageIsVisibleAfterAddingNewPages";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		SiteTemplates.addCP(siteTemplateName = "Site Template Name");

		SiteTemplates.addSitePageViaSiteTemplateCP(
			pageName = "Page1 Name",
			siteTemplateName = "Site Template Name");

		SiteTemplatesNavigator.gotoSiteTemplatesPage(
			pageName = "Home",
			siteName = "${siteName}",
			siteTemplateName = "Site Template Name");

		SiteTemplates.addSitePageViaSiteTemplateCP(
			pageName = "Page2 Name",
			siteTemplateName = "Site Template Name");

		SiteTemplatesNavigator.gotoSiteTemplatesPage(
			pageName = "Page1 Name",
			siteName = "${siteName}",
			siteTemplateName = "Site Template Name");

		Site.openSitesAdmin();

		Site.addSiteTemplateCP(
			siteName = "Site Name",
			siteTemplateName = "Site Template Name");

		Navigator.gotoSitePage(
			pageName = "Home",
			siteName = "Site Name");

		Navigator.gotoSitePage(
			pageName = "Page1 Name",
			siteName = "Site Name");
	}

	@description = "User can edit the permission of a page on site templates in the page admin menu."
	@priority = "4"
	test EditSiteTemplateGuestPermissions {
		SiteTemplates.addCP(siteTemplateName = "${siteTemplateName}");

		Site.openSitesAdmin();

		Site.addSiteTemplateCP(
			siteName = "Site Name",
			siteTemplateName = "Site Template Name");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Permissions",
			pageName = "Home");

		Role.removePermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Guest");

		Navigator.gotoSitePage(
			pageName = "Home",
			siteName = "Site Name");

		PermissionsInline.gotoSiteTemplateCP(
			page = "Home",
			site = "Site Name");

		Role.definePermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Guest");
	}

	@description = "Site templates with older versions can be imported."
	@priority = "4"
	test ImportOldSchemaVersion {
		property test.name.skip.portal.instance = "SitetemplatesUsecase#ImportOldSchemaVerion";

		SiteTemplatesNavigator.openSiteTemplatesAdmin();

		LAR.importPortlet(
			importSchemaVersionMismatching = "true",
			larFileName = "class-site-template-7.0.lar",
			uploadFrom = "dependencies");
	}

	@description = "This is a use case for LPS-42067. Portlet preferences are configurable and stay unchanged when the same portlet with the same name is created on different pages."
	@priority = "4"
	test PortletPreferencesPersistWithSiteTemplateWhenSamePortletAddedOnSecondPage {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		SiteTemplates.addCP(siteTemplateName = "Site Template Name");

		SiteTemplates.addSitePageViaSiteTemplateCP(
			pageName = "Page1 Name",
			siteTemplateName = "Site Template Name");

		SiteTemplatesNavigator.gotoSiteTemplatesPage(
			pageName = "Page1 Name",
			siteName = "${siteName}",
			siteTemplateName = "Site Template Name");

		Portlet.addPG(
			defaultURL = "false",
			portletName = "IFrame");

		SiteTemplates.addSitePageViaSiteTemplateCP(
			pageName = "Page2 Name",
			siteTemplateName = "Site Template Name");

		Site.openSitesAdmin();

		Site.addSiteTemplateCP(
			siteName = "Site Name",
			siteTemplateName = "Site Template Name");

		Navigator.gotoSitePage(
			pageName = "Page1 Name",
			siteName = "Site Name");

		PermissionsInline.gotoConfigurationPG(portletName = "IFrame");

		Role.removePermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Guest");

		Refresh();

		SiteTemplatesNavigator.openSiteTemplatesAdmin();

		SiteTemplates.gotoViewPages(
			siteName = "${siteName}",
			siteTemplateName = "Site Template Name");

		AssertClick(
			locator1 = "Home#PAGE_TEMPLATE_3",
			value1 = "Page2 Name");

		Portlet.addPG(
			defaultURL = "false",
			portletName = "IFrame");

		Navigator.gotoSitePage(
			pageName = "Page1 Name",
			siteName = "Site Name");

		PermissionsInline.gotoConfigurationPG(portletName = "IFrame");

		Role.viewPermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			permissionFlagged = "false",
			roleTitle = "Guest");
	}

	@description = "Site admin should not be able to delete pages that were created from site templates."
	@priority = "3"
	test SiteAdminCannotDeletePagesThatWereCreatedBySiteTemplates {
		SiteTemplates.addCP(siteTemplateName = "Site Template Name");

		UserGroup.openUserGroupsAdmin();

		UserGroup.addCP(
			selectSiteTemplate = "true",
			siteTemplateName = "Site Template Name",
			userGroupName = "UG UserGroup Name");

		UserGroup.openUserGroupsAdmin();

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Manage Pages");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.cannotDeletePagesAssociatedWithSiteTemplate(page = "Home");
	}

	@description = "LRQA-73456. Site template preferences and contents are inherited on User group sites."
	@priority = "4"
	test SitesDynamicTemplateInheritance {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		SiteTemplates.addCP(siteTemplateName = "Site Template Name");

		SiteTemplatesNavigator.openSiteTemplatesAdmin();

		SiteTemplates.gotoViewPages(
			siteName = "${siteName}",
			siteTemplateName = "Site Template Name");

		ContentPages.gotoPageEditor();

		PageEditor.addWidget(portletName = "Message Boards");

		PageEditor.clickPublish();

		MessageboardsThread.addPG(
			threadBody = "Message Boards Body",
			threadSubject = "Message Boards Subject");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONUser.addUserToSite(
			groupName = "Guest",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		UserGroup.openUserGroupsAdmin();

		UserGroup.addCP(
			selectSiteTemplate = "true",
			siteTemplateName = "Site Template Name",
			userGroupName = "User Group Test");

		UserGroup.gotoProfilePages(
			siteName = "${siteName}",
			userGroupName = "User Group Test");

		MessageboardsThread.gotoPG(
			lastPostUserName = "Test Test",
			replyCount = "0",
			threadBody = "Message Boards Body",
			threadSubject = "Message Boards Subject");

		MessageboardsThread.viewPG(
			threadBody = "Message Boards Body",
			threadSubject = "Message Boards Subject");
	}

	@description = "This is a use case for LRQA-73458. The preferences and contents of a personal site will inherit from site templates."
	@priority = "3"
	test SitesTemplateResourceInheritance {
		property portal.release = "false";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		SiteTemplates.addCP(siteTemplateName = "Site Template Name");

		SiteTemplates.addSitePageViaSiteTemplateCP(
			pageName = "Test Page Name",
			siteTemplateName = "Site Template Name");

		SiteTemplatesNavigator.gotoSiteTemplatesPage(
			pageName = "Test Page Name",
			siteName = "${siteName}",
			siteTemplateName = "Site Template Name");

		Portlet.addPG(portletName = "Documents and Media");

		SiteTemplates.enableActionsOnDMInSiteTemplate();

		SiteTemplatesNavigator.gotoSiteTemplatesPage(
			pageName = "Test Page Name",
			siteName = "${siteName}",
			siteTemplateName = "Site Template Name");

		DMDocument.addPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.png",
			dmDocumentTitle = "Document_1.png");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.openUsersAdmin();

		User.addPersonalSiteCP(
			siteTemplateName = "Site Template Name",
			userScreenName = "usersn");

		User.openUsersAdmin();

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		User.logoutPG();

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		UserBar.gotoDropdownItem(dropdownItem = "My Dashboard");

		Navigator._gotoPage(pageName = "Test Page Name");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.png",
			dmDocumentTitle = "Document_1.png");
	}

	@description = "This is a use case for LPS-86487. Page links on sites which were created in site templates should redirect correctly to other pages."
	@priority = "4"
	test SiteTemplatePageLinkInWebContentRedirectCorrectly {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SitetemplatesUsecase#SiteTemplatePageLinkInWebContentRedirectCorrectly";

		var portalURL = PropsUtil.get("portal.url");

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		SiteTemplates.addCP(siteTemplateName = "Template Site");

		SiteTemplates.addSitePageViaSiteTemplateCP(
			pageName = "Page1 Name",
			siteTemplateName = "Template Site");

		Navigator.openURL();

		SiteTemplates.addSitePageViaSiteTemplateCP(
			pageName = "Page2 Name",
			siteTemplateName = "Template Site");

		SiteTemplatesNavigator.gotoSiteTemplatesPage(
			pageName = "Page2 Name",
			siteName = "${siteName}",
			siteTemplateName = "Template Site");

		var page2URL = Navigator.getCurrentURL();

		var entryExternalURL = StringUtil.replace("${page2URL}", "http://", "");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		PortletEntry.inputTitle(title = "Web Content Title");

		CKEditor.addEntryExternalURL(
			displayText = "${page2URL}",
			entryExternalURL = "${entryExternalURL}",
			fieldLabel = "content");

		PortletEntry.publish();

		Close.closeAndSelectWindow(locator1 = "Site Templates - ${siteName}");

		Site.openSitesAdmin();

		Site.addCP(
			siteName = "Site Name",
			siteType = "Template");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Page1 Name",
			widgetName = "Web Content Display");

		Navigator.gotoSitePage(
			pageName = "Page1 Name",
			siteName = "Site Name");

		WebContentDisplayPortlet.selectWebContent(
			portletName = "Web Content Display",
			webContentTitle = "Web Content Title");

		Navigator.gotoSitePage(
			pageName = "Page1 Name",
			siteName = "Site Name");

		WebContentDisplayPortlet.viewContent(
			displayText = "${page2URL}",
			url = "${portalURL}/web/site-name/page2-name",
			webContentTitle = "Web Content Title");
	}

	@description = "This is a use case for LPS-74081. Site pages with numeric friendly URL's can be imported from LAR files."
	@priority = "4"
	test ViewImportedSitePageWithNumericFriendlyURL {
		property test.name.skip.portal.instance = "SitetemplatesUsecase#ViewImportedSitePageWithNumericFriendlyURL";

		var portalURL = PropsUtil.get("portal.url");

		Site.openSitesAdmin();

		JSONGroup.addGroup(groupName = "Export");

		JSONLayout.addPublicLayout(
			groupName = "Export",
			layoutName = "1");

		PagesAdmin.openPagesAdmin(siteURLKey = "export");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "1");

		AssertTextEquals(
			inputFieldId = "friendlyURL",
			locator1 = "TextInput#INPUT_ID",
			value1 = "/1");

		JSONLayout.addPublicLayout(
			groupName = "Export",
			layoutName = "2");

		PagesAdmin.openPagesAdmin(siteURLKey = "export");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "2");

		AssertTextEquals(
			inputFieldId = "friendlyURL",
			locator1 = "TextInput#INPUT_ID",
			value1 = "/2");

		JSONLayout.addPublicLayout(
			groupName = "Export",
			layoutName = "Hello");

		PagesAdmin.openPagesAdmin(siteURLKey = "export");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "Configure",
			pageName = "Hello");

		AssertTextEquals(
			inputFieldId = "friendlyURL",
			locator1 = "TextInput#INPUT_ID",
			value1 = "/hello");

		LAR.exportSiteCP(
			larFileName = "Export",
			siteScopeName = "Export");

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		SiteTemplates.addCP(siteTemplateName = "New Site Template");

		Site.openSitesAdmin();

		Site.addCP(
			siteName = "New Site",
			siteTemplateName = "New Site Template");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "New Site");

		PagesAdmin.openPagesAdmin(siteURLKey = "new-site");

		PagesAdmin.viewPagesOrder(
			depth = "1",
			pageNameList = "Home,1,2,Hello");
	}

	@description = "This is a use case for LPS-107677. Additional info button should not be present on a newly imported site when it has no difference compared to the site template it was created from."
	@priority = "3"
	test ViewImportedSitePageWithoutInfoMessage {
		SiteTemplates.addCP(
			siteTemplateActive = "Yes",
			siteTemplateName = "Site Template Name");

		Site.openSitesAdmin();

		Site.addSiteTemplateCP(
			siteName = "Site A",
			siteTemplateName = "Site Template Name");

		Navigator.gotoSitePage(
			pageName = "Home",
			siteName = "Site A");

		SiteTemplates.viewNoInfoMessage();

		SiteTemplatesNavigator.openSiteTemplatesAdmin();

		LAR.exportPortlet(
			larFileName = "site-template-name.lar",
			portletName = "Site Templates");

		LAR.exportSiteCP(siteScopeName = "Site A");

		var key_larFileName = "${larFileName}";

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.deleteGroupByName(groupName = "Site A");

		SiteTemplatesNavigator.openSiteTemplatesAdmin();

		SiteTemplates.deleteCP(siteTemplateName = "Site Template Name");

		SiteTemplatesNavigator.openSiteTemplatesAdmin();

		LAR.importPortlet(larFileName = "site-template-name.lar");

		SiteTemplates.viewCP(siteTemplateName = "Site Template Name");

		JSONGroup.addGroup(groupName = "Site B");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site B");

		Navigator.gotoSitePage(
			pageName = "Home",
			siteName = "Site B");

		SiteTemplates.viewNoInfoMessage();
	}

	@description = "Portlets on the site templates should give guests view permission by default."
	@priority = "3"
	test ViewInlineGuestPermissionsInSiteTemplatesViaWCD {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		SiteTemplates.addCP(siteTemplateName = "Site Template Name");

		SiteTemplates.addSitePageViaSiteTemplateCP(
			pageName = "Test Page Name",
			siteTemplateName = "Site Template Name");

		SiteTemplatesNavigator.gotoSiteTemplatesPage(
			pageName = "Test Page Name",
			siteName = "${siteName}",
			siteTemplateName = "Site Template Name");

		Portlet.addPG(
			defaultURL = "false",
			portletName = "Web Content Display");

		SiteTemplatesNavigator.gotoSiteTemplatesPage(
			pageName = "Test Page Name",
			siteName = "${siteName}",
			siteTemplateName = "Site Template Name");

		PermissionsInline.gotoConfigurationPG(
			portletName = "Web Content Display",
			siteTemplate = "true");

		Role.viewPermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
			permissionFlagged = "true",
			roleTitle = "Guest");
	}

	@description = "This is a use case for LPS-92663. Navigation menus are copied when a site is created from a site template."
	@priority = "4"
	test ViewNavigationMenuCopyFromSitesTemplate {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		SiteTemplates.addCP(
			siteTemplateActive = "Yes",
			siteTemplateName = "Site Template Name");

		var siteTemplateId = SiteTemplates.getSiteTemplateID(siteTemplateName = "Site Template Name");

		SiteTemplates.addSitePageViaSiteTemplateCP(
			pageName = "Page1 Name",
			siteTemplateName = "Site Template Name");

		SiteTemplates.addSitePageViaSiteTemplateCP(
			pageName = "Page2 Name",
			siteTemplateName = "Site Template Name");

		NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "${siteTemplateId}");

		NavigationMenusAdmin.addMenu(menuName = "Test Navigation Menu Name");

		NavigationMenusAdmin.addItem(
			item = "Page",
			pageNames = "Page1 Name,Page2 Name",
			privacy = "Private Pages");

		NavigationMenusAdmin.viewItem(itemName = "Page1 Name");

		NavigationMenusAdmin.viewItem(itemName = "Page2 Name");

		NavigationMenusAdmin.addItem(
			item = "URL",
			url = "https://www.liferay.com/",
			urlName = "Liferay");

		NavigationMenusAdmin.viewItem(itemName = "Liferay");

		NavigationMenusAdmin.addItem(
			item = "URL",
			url = "https://www.google.com/",
			urlName = "Google");

		NavigationMenusAdmin.viewItem(itemName = "Google");

		Navigator.openWithAppendToBaseURL(urlAppend = "group/${siteTemplateId}");

		NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

		NavigationMenusWidget.chooseMenu(menuName = "Test Navigation Menu Name");

		Portlet.saveAndCloseConfig();

		AssertVisible(
			key_pageName = "Page1 Name",
			locator1 = "Home#PAGE");

		AssertVisible(
			key_pageName = "Page2 Name",
			locator1 = "Home#PAGE");

		AssertVisible(
			key_pageName = "Liferay",
			locator1 = "Home#PAGE");

		AssertVisible(
			key_pageName = "Google",
			locator1 = "Home#PAGE");

		Site.openSitesAdmin();

		Site.addSiteTemplateCP(
			siteName = "Site Name",
			siteTemplateName = "Site Template Name");

		Navigator.openSiteURL(siteName = "Site Name");

		AssertVisible(
			key_pageName = "Page1 Name",
			locator1 = "Home#PAGE");

		AssertVisible(
			key_pageName = "Page2 Name",
			locator1 = "Home#PAGE");

		AssertVisible(
			key_pageName = "Liferay",
			locator1 = "Home#PAGE");

		AssertVisible(
			key_pageName = "Google",
			locator1 = "Home#PAGE");
	}

	@description = "This is a use case for LPS-113145. Portlet configuration is copied when a site is created from a site template."
	@priority = "3"
	test ViewPortletConfigurationOfGlobalTemplatesPageCopyFromSitesTemplate {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		SiteTemplates.addCP(
			siteTemplateActive = "Yes",
			siteTemplateName = "Site Template Name");

		var siteTemplateId = SiteTemplates.getSiteTemplateID(siteTemplateName = "Site Template Name");

		SiteTemplates.addSitePageViaSiteTemplateCP(
			inheritChanges = "disable",
			pageName = "Page Name",
			pageTemplateName = "Search",
			siteTemplateName = "Site Template Name");

		Navigator.openWithAppendToBaseURL(urlAppend = "group/${siteTemplateId}/page-name");

		Portlet.addPG(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureManualAssetSelectionPG();

		Navigator.openWithAppendToBaseURL(urlAppend = "group/${siteTemplateId}/page-name");

		AssetPublisherPortlet.viewManualAssetSelectionConfigurationPG(portletName = "Asset Publisher");

		Site.openSitesAdmin();

		Site.addSiteTemplateCP(
			siteName = "Site Name",
			siteTemplateName = "Site Template Name");

		Navigator.gotoSitePage(
			pageName = "Page Name",
			siteName = "Site Name");

		AssetPublisherPortlet.viewManualAssetSelectionConfigurationPG(portletName = "Asset Publisher");
	}

}