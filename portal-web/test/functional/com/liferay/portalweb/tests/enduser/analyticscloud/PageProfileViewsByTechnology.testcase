@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Create Blog to Add to Page") {
			ACUtils.createBlogsAndAddToPage();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Connect DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("View the site page as ac user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigate to the Views by Technology card") {
			ACNavigation.goToSites();

			ACNavigation.switchTab(tabName = "Pages");

			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", " ");

			ACNavigation.openItem(itemName = "Blogs AC Title - Site Name - ${dataSourceName}");

			ACTimeFilter.clickTimeFilterButton(cardName = "Views by Technology");

			ACTimeFilter.setLast24Hours();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");

			JSONUser.tearDownNonAdminUsers();
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8362 | Test Summary: Page profile views by technology shows which browsers are being used"
	@priority = "5"
	test ShowsWhichBrowsersBeingUsed {
		property analytics.cloud.upstream = "false";

		ACNavigation.switchTabInCard(tabName = "Browsers");

		ACAssets.viewTechnologyBrowsersMetric(
			browserMetricValue = "Chrome",
			cardTitle = "Views by Technology",
			cssValue = "rgb(75, 155, 255)",
			percentageMetricValue = "100%");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8363 | Test Summary: Page profile views by technology shows which devices are being used"
	@priority = "5"
	test ShowsWhichDevicesBeingUsed {
		property analytics.cloud.upstream = "false";

		ACAssets.viewTechnologyDeviceViewsAndPercentage(
			actionValue = "1 Views",
			cardTitle = "Views by Technology",
			deviceName = "Desktop",
			percentageValue = "100%");
	}

}