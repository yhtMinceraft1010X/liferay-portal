@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();

		ACUtils.addSiteAndPage();

		ACUtils.createBlogsAndAddToPage();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8293 | Test Summary: Assert 180 Day time period filter in Sites"
	@ignore = "true"
	@priority = "3"
	test Assert180DayTimePeriodFilterInSites {

		// AC Refactor: the test needs data from a past date
		// AC Refactor ticket: LRAC-8775

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		task ("Interation with page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessions();
		}

		task ("AC launch") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Asset 180 Days time period filter") {

			// It is not possible to perform the assert because this test needs data from the past

			ACNavigation.switchTab(tabName = "Overview");

			ACTimeFilter.clickTimeFilterButton(cardName = "${propertyName} Activities");

			ACTimeFilter.setLast180Days();

			ACUtils.assertXAxisTimedGraph(parentName = "${propertyName} Activities");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8291 | Test Summary: Assert Sites Activities 180 Days Time Period Filter In Page Table"
	@ignore = "true"
	@priority = "3"
	test AssertSitesActivities180DaysTimePeriodFilterInPageTable {

		// AC Refactor: the test needs data from a past date
		// AC Refactor ticket: LRAC-8773

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		task ("Interation with page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessions();
		}

		task ("AC launch") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Asset last 180 days period filter") {

			// It is not possible to perform the assert because this test needs data from the past

			ACNavigation.switchTab(tabName = "Pages");

			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast180Days();
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8275 | Test Summary: Site Activity Card: Can filter graph by day"
	@ignore = "true"
	@priority = "5"
	test CanFilterActivityCardGraphByDay {

		// AC Refactor: the issue is due to data not appearing on time
		// AC Refactor ticket: LRAC-8770

		task ("Site and blogs creation and connection with AC") {
			ACUtils.createBlogsAndAddToPage(entryTitle = "Test 2");

			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Interation with pages") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Test 2",
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("AC launch and go to property menu") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Asset in the Activity card graph by day filter") {

			// Unable to perform the declaration because the data does not appear at the time

			ACNavigation.switchTab(tabName = "Overview");

			ACCards.viewCards(cardTitle = "${propertyName} Activities");

			ACCards.selectInterval(interval = "D");

			ACUtils.assertXAxisTimedGraph(parentName = "${propertyName} Activities");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8278 | Test Summary: Site Activity Card: Can filter graph by month"
	@ignore = "true"
	@priority = "5"
	test CanFilterActivityCardGraphByMonth {

		// AC Refactor: the issue is due to data not appearing on time
		// AC Refactor ticket: LRAC-8772

		task ("Site and blogs creation and connection with AC") {
			ACUtils.createBlogsAndAddToPage(entryTitle = "Test 2");

			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Interation with pages") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Test 2",
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("AC launch and go to property menu") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Asset in the Activity card graph by month filter") {

			// Unable to perform the declaration because the data does not appear at the time

			ACNavigation.switchTab(tabName = "Overview");

			ACCards.viewCards(cardTitle = "${propertyName} Activities");

			ACCards.selectInterval(interval = "M");

			ACUtils.assertXAxisTimedGraph(parentName = "${propertyName} Activities");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8276 | Test Summary: Site Activity Card: Can filter graph by week"
	@ignore = "true"
	@priority = "5"
	test CanFilterActivityCardGraphByWeek {

		// AC Refactor: the test needs data from a past date
		// AC Refactor ticket: LRAC-8771

		task ("Site and blogs creation and connection with AC") {
			ACUtils.createBlogsAndAddToPage(entryTitle = "Test 2");

			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Interation with pages") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Test 2",
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("AC launch and go to property menu") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Asset in the Activity card graph by week filter") {

			// It is not possible to perform the assert because this test needs data from the past

			ACNavigation.switchTab(tabName = "Overview");

			ACCards.viewCards(cardTitle = "${propertyName} Activities");

			ACCards.selectInterval(interval = "W");

			ACUtils.assertXAxisTimedGraph(parentName = "${propertyName} Activities");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8279 | Test Summary: Site Activity Card: Can hover over a point on the graph to get detailed stats"
	@priority = "5"
	test CanHoverOverPointOnGraphGetStats {
		property analytics.cloud.upstream = "false";

		var usernameList = "ac,liferay";
		var emailList = "ac@liferay.com,liferay@liferay.com";
		var nameList = "ac ac,liferay liferay";

		task ("Connect Analytics Cloud to DXP") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Add two new users") {
			for (var name : list "${usernameList}") {
				JSONUser.addUser(
					userEmailAddress = "${name}@liferay.com",
					userFirstName = "${name}",
					userLastName = "${name}",
					userScreenName = "${name}");
			}

			ACDXPSettings.syncNewContactData();
		}

		task ("Login with the users and open the site") {
			ACUtils.navigateToSitePageWithUser(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				emailList = "${emailList}",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Access the page as a anonymous user") {
			User.logoutPG();

			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close all sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Launch AC and go to Sites overview") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToSites();
		}

		task ("Hover on the unique visitors graph and assert the elements that are shown on the tooltip") {
			ACSites.viewVisitorsOnGraph(
				valueVisitorsList = "2,1,3",
				visitorsTypeList = "Known,Anonymous,Total");
		}
	}

	@description = "Bug ID: LRAC-7996 | Automation ID: LRAC-8110 | Test Summary: Assert Sites Activity loads activity data properly when the time filter is set to 'Last 24 hours'"
	@priority = "5"
	test CanLoadDataProperlyWhenTimeFilterIsLast24Hours {
		task ("Connect Analytics Cloud to DXP") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("View the page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Launch AC and go to Sites overview") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Set time filter to 24h") {
			ACNavigation.switchTab(tabName = "Overview");

			ACTimeFilter.clickTimeFilterButton(cardName = "${propertyName} Activities");

			ACTimeFilter.setLast24Hours();
		}

		task ("Assert that the activity was loaded properly") {
			ACUtils.assertXAxisTimedGraph(parentName = "${propertyName} Activities");

			ACIndividualsDashboard.viewRechartsBarOnIndividualsActivitiesChart();
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8280 | Test Summary: Anon and known visitors legend shown"
	@priority = "5"
	test CanShownAnonAndKnownVisitorsLegend {
		task ("Connect Analytics Cloud to DXP") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			ACDXPSettings.syncNewContactData();
		}

		task ("Visits the site with known user") {
			ACUtils.navigateToSitePageWithUser(
				emailList = "ac@liferay.com",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Visits the site with anonymous user") {
			User.logoutPG();

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC and go to Sites") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACNavigation.goToSites();
		}

		task ("Go to Sites overview") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Verify if anonymous and known users legends are shown") {
			for (var visitor : list "Anonymous,Known") {
				AssertElementPresent(
					key_visitorLegend = "${visitor} Visitors",
					locator1 = "ACIndividualsDashboard#VISITORS_LEGEND");

				ACUtils.assertActiveIndividualChart(
					timeFilter = "Last 24 hours",
					visitorLegend = "${visitor} Visitors");
			}
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8295 | Test Summary: Assert Sites Activity time filter able to use Custom Range"
	@ignore = "true"
	@priority = "5"
	test CanSitesActivityTimeFilterUseCustomRange {

		// AC Refactor: the test needs data from a past date
		// AC Refactor ticket: LRAC-8776

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		task ("Interation with page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close all sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("AC launch") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Asset Custom Range time period filter") {

			// It is not possible to perform the assert because this test needs data from the past

			var displayDateDay = DateUtil.getCurrentDate();
			var displayMonth = DateUtil.getCurrentMonth();
			var displayDateMonth = DateUtil.getCurrentMonthName();
			var displayDateYear = DateUtil.getCurrentYear();
			var previousDay = DateUtil.getFormattedDate("-1", "d");
			var previousMonth = DateUtil.getFormattedDate("-1", "MMMM");
			var previousYear = DateUtil.getFormattedDate("-1", "yyyy");

			ACNavigation.switchTab(tabName = "Overview");

			ACTimeFilter.setCustomRange(
				endDay = "${displayDateDay}",
				endMonth = "${displayDateMonth}",
				endYear = "${displayDateYear}",
				startDay = "${previousDay}",
				startMonth = "${previousMonth}",
				startYear = "${previousYear}");

			ACUtils.assertXAxisTimedGraph(parentName = "${propertyName} Activities");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8290 | Test Summary: Unique Visitors label is shown on the tabs of Pages dashboards"
	@priority = "3"
	test CanUniqueVisitorsLabelShowPagesDashboards {
		property analytics.cloud.upstream = "false";

		task ("Site and blogs creation and connection with AC") {
			ACUtils.createBlogsAndAddToPage();

			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Interation with pages") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("AC launch") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Go to Sites Pages") {
			ACNavigation.switchTab(tabName = "Pages");

			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Assert the unique visitors label is shown") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", " ");

			ACNavigation.openItem(itemName = "Blogs AC Title - Site Name - ${dataSourceName}");

			ACAssets.viewVisitorsBehaviorMetric(
				metricTitle = "Unique Visitors",
				metricValue = "1");

			AssertElementPresent(
				key_visitorsLabel = "Unique Visitors",
				locator1 = "ACSites#VISITORS_GRAPH_LABEL");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8288 | Test Summary: Unique Visitors label is shown on the tabs of Sites dashboards"
	@priority = "3"
	test CanUniqueVisitorsLabelShowSitesDashboards {
		task ("Create blog and add to page") {
			ACUtils.createBlogsAndAddToPage();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");
		}

		task ("Connect Analytics Cloud to DXP") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Login with new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");
		}

		task ("Go to site page and view the blog") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC and go to Sites") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToSites();
		}

		task ("Go to Sites overview") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Assert the unique visitors label is shown") {
			ACAssets.viewVisitorsBehaviorMetric(
				metricTitle = "Unique Visitors",
				metricValue = "1",
				timeFilter = "Last 24 hours");

			AssertElementPresent(
				key_visitorsLabel = "Unique Visitors",
				locator1 = "ACSites#VISITORS_GRAPH_LABEL");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8274 | Test Summary: Site Activity Card: Bounce rate and % change is shown"
	@ignore = "true"
	@priority = "5"
	test ShownBounceRateAndPercentageChangeShown {

		// AC Refactor: Timing issues may happen on this test case
		// AC Refactor: It is not possible to perform the assert because this test needs data from the past
		// AC Refactor ticket: LRAC-8977

		task ("Connect DXP to AC") {
			ACUtils.createBlogsAndAddToPage();

			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Go to page and get data") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close all sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Go to AC and assert value and percentage of Site Visitors") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACAssets.viewVisitorsBehaviorMetric(
				metricTitle = "Bounce Rate",
				metricValue = "1");

			// Assert the correct variation(%) shown in this field
			// This test needs a data from a past time frame to generate a % diference, this % is a exemple.

			ACSites.viewActivitiesPercentage(
				entryName = "Bounce Rate",
				valueNumber = "50%");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8273 | Test Summary: Site Activity Card: Session duration and % change is shown"
	@ignore = "true"
	@priority = "5"
	test ShownSessionDurationAndPercentageChangeShown {

		// AC Refactor: Timing issues may happen on this test case
		// AC Refactor ticket: LRAC-8816

		task ("Connect Analytics Cloud to DXP") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Visits the site with known user") {

			// This test needs a data from a past time frame to generate a % diference

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC and go to Sites") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACNavigation.goToSites();
		}

		task ("Go to Sites overview") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Assert Session duration and percentage") {

			// Assert the correct variation(%) shown in this field

			ACSites.viewActivitiesPercentage(
				entryName = "Session Duration",
				valueNumber = "${n}");

			ACSites.viewActivitiesDuration(date = "05-s");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8272 | Test Summary: Site Activity Card: Total Sessions/Visitor and % change is shown"
	@ignore = "true"
	@priority = "5"
	test ShownTotalSessionsVisitorAndPercentageChangeShown {

		// AC Refactor: Timing issues may happen on this test case
		// AC Refactor: It is not possible to perform the assert because this test needs data from the past
		// AC Refactor ticket: LRAC-8976

		task ("Connect DXP to AC") {
			ACUtils.createBlogsAndAddToPage();

			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Go to page and get data") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close all sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Go to AC and assert value and percentage of Site Visitors") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACAssets.viewVisitorsBehaviorMetric(
				metricTitle = "Sessions/Visitor",
				metricValue = "1");

			// Assert the correct variation(%) shown in this field
			// This test needs a data from a past time frame to generate a % diference, this % is a exemple.

			ACSites.viewActivitiesPercentage(
				entryName = "Sessions/Visitor",
				valueNumber = "50%");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8271 | Test Summary: Site Activity Card: Total site visitors and % change is shown"
	@ignore = "true"
	@priority = "5"
	test ShownTotalSiteVisitorsAndPercentageChangeShown {

		// AC Refactor: Timing issues may happen on this test case
		// AC Refactor ticket: LRAC-8932

		task ("Connect DXP to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Go to page and get data") {

			// This test needs a data from a past time frame to generate a % diference

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close all sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Go to AC and assert value and percentage of Site Visitors") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACAssets.viewVisitorsBehaviorMetric(
				metricTitle = "Unique Visitors",
				metricValue = "1");

			// Assert the correct variation(%) shown in this field

			ACSites.viewActivitiesPercentage(
				entryName = "Unique Visitors",
				valueNumber = "0%");
		}
	}

}