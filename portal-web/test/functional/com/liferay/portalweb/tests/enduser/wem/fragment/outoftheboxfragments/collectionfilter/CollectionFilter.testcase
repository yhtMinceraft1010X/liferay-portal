@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-137722. View alert info shown in dropdown menu when select multiple target collections without filters in common."
	@priority = "4"
	test CannotSelectMultipleCollectionsWithoutFiltersInCommon {
		property test.name.skip.portal.instance = "CollectionFilter#CannotSelectMultipleCollectionsWithoutFiltersInCommon";

		task ("Enable Basic Web Content and Basic Document collection providers in Gogo Shell") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:enable com.liferay.journal.web.internal.info.collection.provider.BasicWebContentSingleFormVariationInfoCollectionProvider");

			GogoShell.viewOutput(outputContent = "true");

			GogoShell.executeCommand(commandName = "scr:enable com.liferay.document.library.web.internal.info.collection.provider.BasicDocumentSingleFormVariationInfoCollectionProvider");

			GogoShell.viewOutput(outputContent = "true");
		}

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Type");
		}

		task ("Add 2 categories in Type vocabulary") {
			var suvId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "SUV",
				vocabularyName = "Type");

			var carId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Car",
				vocabularyName = "Type");
		}

		task ("Add three web contents") {
			for (var style : list "X,Y,3") {
				JSONWebcontent.addWebContent(
					content = "Tesla Model ${style}",
					groupName = "Test Site Name",
					title = "Tesla Model ${style}");
			}
		}

		task ("Add three documents with SUV category") {
			for (var style : list "X1,X3,X5") {
				JSONDocument.addFile(
					assetCategoryIds = "${suvId}",
					dmDocumentTitle = "BMW ${style}",
					groupName = "Test Site Name");
			}
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a Grid to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Change Number of Modules to 2") {
			PageEditor.editLayoutGrid(
				columnCount = "2",
				panel = "General");
		}

		task ("Add one Collection Display to each module of Grid") {
			for (var columnNumber : list "1,2") {
				PageEditor.addElementToColumn(
					collectionName = "Content Display",
					columnNumber = "${columnNumber}",
					fragmentName = "Collection Display",
					navTab = "Fragments");
			}
		}

		task ("Select the Basic Web Content collection provider and Bordered List in the first Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Basic Web Content",
				styleDisplay = "Bordered List");
		}

		task ("View the title of three web contents shown in the first Collection Display") {
			var n = "1";

			for (var style : list "3,Y,X") {
				AssertVisible(
					key_entryContent = "[normalize-space()='Tesla Model ${style}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST");

				var n = ${n} + 1;
			}
		}

		task ("Select the Basic Document collection provider and Bulleted List in the second Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				index = "2",
				infoListProviderName = "Basic Document",
				styleDisplay = "Bulleted List");
		}

		task ("View the title of documents shown in the second Collection Display") {
			var n = "1";

			for (var style : list "X5,X3,X1") {
				AssertVisible(
					key_entryContent = "[normalize-space()='BMW ${style}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST");

				var n = ${n} + 1;
			}
		}

		task ("Add a Collection Filter above the Collection Display") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Collection Filter",
				targetFragmentName = "Grid");
		}

		task ("View the alert info shown in dropdown menu of Target Collection field") {
			PageEditor.gotoConfiguration(fragmentName = "Collection Filter");

			Click(
				key_fieldLabel = "Target Collection",
				key_text = "Select",
				locator1 = "Button#ANY_WITH_LABEL");

			AssertVisible(
				infoMessage = "Multiple selection must have at least one filter in common.",
				locator1 = "Dropdown#INFO");
		}

		task ("Cannot select the Basic Document after select the Basic Web Content") {
			Check.checkNotVisible(
				key_checkboxName = "Basic Web Content",
				locator1 = "MenuItem#ANY_CHECKBOX");

			AssertElementPresent(
				key_checkboxName = "Basic Document",
				locator1 = "Checkbox#CHECKBOX_DISABLED");

			Click(
				key_fieldLabel = "Target Collection",
				key_text = "Basic Web Content",
				locator1 = "Button#ANY_WITH_LABEL");
		}

		task ("Select the Keywords as Filter") {
			PageEditor.editCollectionFilter(
				filter = "Keywords",
				fragmentName = "Collection Filter");
		}

		task ("View the Search is shown in Collection Filter") {
			AssertAttributeValue(
				attribute1 = "placeholder",
				index = "1",
				locator1 = "PageEditor#COLLECTION_FILTER_SEARCH_FIELD",
				value1 = "Search");
		}

		task ("Cannot select the Basic Web Content after select the Basic Document") {
			PageEditor.gotoConfiguration(fragmentName = "Collection Filter");

			Click(
				key_fieldLabel = "Target Collection",
				key_text = "Basic Web Content",
				locator1 = "Button#ANY_WITH_LABEL");

			Uncheck.uncheckToggleSwitch(
				key_checkboxName = "Basic Web Content",
				locator1 = "MenuItem#ANY_CHECKBOX");

			Check.checkNotVisible(
				key_checkboxName = "Basic Document",
				locator1 = "MenuItem#ANY_CHECKBOX");

			AssertElementPresent(
				key_checkboxName = "Basic Web Content",
				locator1 = "Checkbox#CHECKBOX_DISABLED");

			Click(
				key_fieldLabel = "Target Collection",
				key_text = "Basic Document",
				locator1 = "Button#ANY_WITH_LABEL");
		}

		task ("Select the Category as Filter and Type vocabulary as Source") {
			PageEditor.editCollectionFilter(
				categoryNameList = "SUV,Car",
				filter = "Category",
				fragmentName = "Collection Filter",
				vocabularyName = "Type");
		}

		task ("View the Select is shown in Collection Filter") {
			AssertTextEquals(
				key_title = "Type",
				locator1 = "PageEditor#COLLECTION_FILTER_DROPDOWN_TOGGLE",
				value1 = "Select");
		}

		task ("Disable Basic Web Content and Basic Document collection providers in Gogo Shell") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:disable com.liferay.journal.web.internal.info.collection.provider.BasicWebContentSingleFormVariationInfoCollectionProvider");

			GogoShell.viewOutput(outputContent = "true");

			GogoShell.executeCommand(commandName = "scr:disable com.liferay.document.library.web.internal.info.collection.provider.BasicDocumentSingleFormVariationInfoCollectionProvider");

			GogoShell.viewOutput(outputContent = "true");
		}
	}

	@description = "This is a test for LPS-111807. The user could enable search field in dropdown list of Collection Filter."
	@priority = "5"
	test EnableSearchFieldInDropdownList {
		property portal.acceptance = "true";

		task ("Add two vocabularies") {
			for (var vocabularyName : list "Size,Warehouse") {
				JSONCategory.addVocabulary(
					groupName = "Test Site Name",
					title = "${vocabularyName}");
			}
		}

		task ("Add 8 categories in Size vocabulary") {
			for (var categoryName : list "6.5 inch,7 inch,7.5 inch,8 inch,8.5 inch") {
				JSONCategory.addCategory(
					groupName = "Test Site Name",
					title = "${categoryName}",
					vocabularyName = "Size");
			}

			var inch90Id = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "9 inch",
				vocabularyName = "Size");

			var inch95Id = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "9.5 inch",
				vocabularyName = "Size");

			var inch100Id = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "10 inch",
				vocabularyName = "Size");
		}

		task ("Add 8 categories in Warehouse vocabulary") {
			for (var categoryName : list "Canada,England,Japan,France,Brazil") {
				JSONCategory.addCategory(
					groupName = "Test Site Name",
					title = "${categoryName}",
					vocabularyName = "Warehouse");
			}

			var usId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "United States",
				vocabularyName = "Warehouse");

			var cnId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "China",
				vocabularyName = "Warehouse");

			var esId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Spain",
				vocabularyName = "Warehouse");
		}

		task ("Add the first web content with 10 inch and United States") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${inch100Id},${usId}",
				content = "Air Force 1",
				groupName = "Test Site Name",
				title = "Air Force 1");
		}

		task ("Add the second web content with 9.5 inch and China") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${inch95Id},${cnId}",
				content = "Air Jordan 1",
				groupName = "Test Site Name",
				title = "Air Jordan 1");
		}

		task ("Add the third web content with 9 inch and United States") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${inch90Id},${usId}",
				content = "Air Max 1",
				groupName = "Test Site Name",
				title = "Air Max 1");
		}

		task ("Add the fourth web content with 10 inch and Spain") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${inch100Id},${esId}",
				content = "LeBron VIII",
				groupName = "Test Site Name",
				title = "LeBron VIII");
		}

		task ("Add a manual collection with All Types") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Manual Collection");
		}

		task ("Select all assets as collection items") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Manual Collection");

			for (var assetName : list "Air Max 1,Air Jordan 1,Air Force 1,LeBron VIII") {
				AssetListsAdmin.selectAsset(
					assetName = "${assetName}",
					assetType = "Basic Web Content");
			}
		}

		task ("Add a collection page based on manual collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Manual Collection",
				pageName = "Collection Page Name",
				tabName = "Collections");
		}

		task ("Select the Bordered List in Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Title",
				selectedName = "Manual Collection",
				styleDisplay = "Bordered List");
		}

		task ("Add a Grid above the Container") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				dropTarget = "Header",
				fragmentName = "Grid",
				targetFragmentName = "Container");
		}

		task ("Change Number of Modules to 2") {
			PageEditor.editLayoutGrid(
				columnCount = "2",
				panel = "General");
		}

		task ("Add a Collection Filter to each module of Grid") {
			for (var columnNumber : list "1,2") {
				PageEditor.addElementToColumn(
					collectionName = "Content Display",
					columnNumber = "${columnNumber}",
					fragmentName = "Collection Filter",
					navTab = "Fragments");
			}
		}

		task ("Select the Size vocabulary and Include Search Field in first Collection Filter") {
			PageEditor.editCollectionFilter(
				categoryNameList = "6.5 inch,7 inch,7.5 inch,8 inch,8.5 inch,9 inch,9.5 inch,10 inch",
				columnNumber = "1",
				filter = "Category",
				fragmentName = "Collection Filter",
				includeSearchField = "true",
				targetCollection = "Manual Collection",
				vocabularyName = "Size");
		}

		task ("Select the Warehouse vocabulary, Single Selection and Include Search Field in second Collection Filter") {
			PageEditor.editCollectionFilter(
				categoryNameList = "Brazil,Canada,China,England,France,Japan,Spain,United States",
				columnNumber = "2",
				filter = "Category",
				fragmentName = "Collection Filter",
				includeSearchField = "true",
				singleSelection = "true",
				targetCollection = "Manual Collection",
				vocabularyName = "Warehouse");
		}

		task ("Open the Preview modal") {
			PageEditor.openPreviewMode();
		}

		task ("View all web contents shown in Collection Display") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			var n = "1";

			for (var title : list "Air Max 1,Air Jordan 1,Air Force 1,LeBron VIII") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}

		task ("Search 10 inch and select it in the first Collection Filter") {
			Page.selectFilterInCollectionFilter(
				categoryNameList = "10 inch",
				columnNumber = "1",
				multipleSelection = "true",
				searchTerm = "10 inch",
				selectedName = "10 inch",
				title = "Size");
		}

		task ("View only the Air Force 1 and LeBron VIII shown in Collection Display") {
			var n = "1";

			for (var title : list "Air Force 1,LeBron VIII") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}

		task ("Search Spain and select it in the second Collection Filter") {
			Page.selectFilterInCollectionFilter(
				columnNumber = "2",
				filterName = "Spain",
				searchTerm = "Spain",
				selectedName = "Spain",
				title = "Warehouse");
		}

		task ("View only the LeBron VIII shown in Collection Display") {
			AssertVisible(
				key_entryContent = "[normalize-space(text())='LeBron VIII']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Navigate to page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Collection Page Name",
				siteName = "Test Site Name");
		}

		task ("View all web contents shown in Collection Display") {
			var n = "1";

			for (var title : list "Air Max 1,Air Jordan 1,Air Force 1,LeBron VIII") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}

		task ("Search United States and select it in the second Collection Filter") {
			Page.selectFilterInCollectionFilter(
				columnNumber = "2",
				filterName = "United States",
				searchTerm = "United States",
				selectedName = "United States",
				title = "Warehouse");
		}

		task ("View only the Air Max 1,Air Force 1 shown in Collection Display") {
			var n = "1";

			for (var title : list "Air Max 1,Air Force 1") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_entryContent = "[normalize-space(text())='LeBron VIII']",
				key_fragmentName = "Collection Display",
				key_position = "3",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");
		}

		task ("Search 9 inch and select it in the first Collection Filter") {
			Page.selectFilterInCollectionFilter(
				categoryNameList = "9 inch",
				columnNumber = "1",
				multipleSelection = "true",
				searchTerm = "9 inch",
				selectedName = "9 inch",
				title = "Size");
		}

		task ("View only the Air Max 1 shown in Collection Display") {
			AssertVisible(
				key_entryContent = "[normalize-space(text())='Air Max 1']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			AssertElementNotPresent(
				key_entryContent = "[normalize-space(text())='Air Force 1']",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");
		}
	}

	@description = "This is a test for LPS-131947. Collection Filters with category works in display page template."
	@priority = "4"
	test FilterResultsOfCollectionDisplayByCategoryInDisplayPageTemplate {
		property testray.main.component.name = "Display Pages";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Availability");
		}

		task ("Add the first category in Availability") {
			var instockId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Instock",
				vocabularyName = "Availability");
		}

		task ("Add the second category in Availability") {
			var selloutId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Sellout",
				vocabularyName = "Availability");
		}

		task ("Add the first web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content 1",
				groupName = "Test Site Name",
				title = "Web Content Title 1");
		}

		task ("Add the second web content with Sellout") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${selloutId}",
				content = "Web Content Content 2",
				groupName = "Test Site Name",
				title = "Web Content Title 2");
		}

		task ("Add the third web content with Instock") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${instockId}",
				content = "Web Content Content 3",
				groupName = "Test Site Name",
				title = "Web Content Title 3");
		}

		task ("Add a manual collection named Hot Sale for All Types") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Hot Sale");
		}

		task ("Select the second and third web contents as collection item") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Hot Sale");

			for (var n : list "2,3") {
				AssetListsAdmin.selectAsset(
					assetName = "Web Content Title ${n}",
					assetType = "Basic Web Content");
			}
		}

		task ("Add a display page template for Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add a Collection Display to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the Hot Sale in Collection Display and Select the Bordered List as List Style") {
			PageEditor.editCollectionDisplay(
				assetListName = "Hot Sale",
				fragmentName = "Collection Display",
				styleDisplay = "Bordered List");
		}

		task ("Add a Collection Filter above the Collection Display") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Collection Filter",
				targetFragmentName = "Collection Display");
		}

		task ("Select the Hot Sale as Target Collection and Select the Category as Filter and Availability vocabulary") {
			PageEditor.editCollectionFilter(
				categoryNameList = "Instock,Sellout",
				filter = "Category",
				fragmentName = "Collection Filter",
				targetCollection = "Hot Sale",
				vocabularyName = "Availability");
		}

		task ("Add a Heading fragment above the Collection Filter") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				dropTarget = "Header",
				fragmentName = "Heading",
				targetFragmentName = "Collection Filter");
		}

		task ("Map the Title field to the editable field") {
			PageEditorMapping.mapEditableTextToField(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Publish the display page template") {
			PageEditor.clickPublish();
		}

		task ("Select the display page template as Specific in the first web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title 1");

			WebContent.editDisplayPage(
				pageName = "Display Page Name",
				pageType = "Display Page Templates");

			PortletEntry.publish();
		}

		task ("View the Collection Filter works on the associated display page template") {
			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title 1",
				menuItem = "View Content");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Web Content Title 1");

			var n = "1";

			for (var title : list "Web Content Title 2,Web Content Title 3") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Instock",
				multipleSelection = "true",
				selectedName = "Instock",
				title = "Availability");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Web Content Title 1");

			AssertVisible(
				key_entryContent = "[normalize-space(text())='Web Content Title 3']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");
		}
	}

	@description = "This is a test for LPS-113926. The user can filter collection items in Collection Display by keywords."
	@priority = "5"
	test FilterResultsOfCollectionDisplayByKeywords {
		property portal.acceptance = "true";

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Levis 501",
				groupName = "Test Site Name",
				title = "Levis 501");
		}

		task ("Add a blog") {
			HeadlessBlog.addBlogEntry(
				content = "LeBron VIII",
				groupName = "Test Site Name",
				title = "LeBron VIII");
		}

		task ("Add a document") {
			JSONDocument.addFile(
				dmDocumentTitle = "AirPods",
				groupName = "Test Site Name");
		}

		task ("Add a dynamic collection with All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a Collection Display fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Add a Content Display to Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "Levis 501",
				fragmentName = "Content Display");
		}

		task ("Add a Collection Filter above the Collection Display") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Collection Filter",
				targetFragmentName = "Collection Display");
		}

		task ("Select the dynamic collection as Target Collection") {
			PageEditor.editCollectionFilter(
				fragmentName = "Collection Filter",
				targetCollection = "Dynamic Collection");
		}

		task ("View the None is selected in Filter field") {
			AssertSelectedLabel(
				key_fieldLabel = "Filter",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "None");
		}

		task ("Publish the page") {
			PageEditor.clickPublish();
		}

		task ("View the Collection Filter doesn't appear at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertElementNotPresent(
				index = "1",
				locator1 = "PageEditor#COLLECTION_FILTER_SEARCH_FIELD");
		}

		task ("Select the Keywords type in Collection Filter") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.editCollectionFilter(
				filter = "Keywords",
				fragmentName = "Collection Filter");
		}

		task ("Filter results of Collection Display by keywords at Preview mode") {
			PageEditor.openPreviewMode();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			var n = "1";

			for (var content : list "AirPods,LeBron VIII,Levis 501") {
				ContentPages.viewFragmentTextInCollectionDisplay(
					row = "${n}",
					text = "${content}");

				var n = ${n} + 1;
			}

			Page.searchInCollectionFilter(searchTerm = "Levis");

			ContentPages.viewFragmentTextInCollectionDisplay(text = "Levis 501");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Filter results of Collection Display by keywords at View mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			var n = "1";

			for (var content : list "AirPods,LeBron VIII,Levis 501") {
				ContentPages.viewFragmentTextInCollectionDisplay(
					row = "${n}",
					text = "${content}");

				var n = ${n} + 1;
			}

			Page.searchInCollectionFilter(searchTerm = "LeBron");

			ContentPages.viewFragmentTextInCollectionDisplay(text = "LeBron VIII");
		}
	}

	@description = "This is a test for LPS-113926. The user can filter collection items in Collection Display by multiple keywords."
	@priority = "4"
	test FilterResultsOfCollectionDisplayByMultipleKeywords {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Levis 501",
				groupName = "Test Site Name",
				title = "Levis 501");
		}

		task ("Add a blog") {
			HeadlessBlog.addBlogEntry(
				content = "LeBron VIII",
				groupName = "Test Site Name",
				title = "LeBron VIII");
		}

		task ("Add a document") {
			JSONDocument.addFile(
				dmDocumentTitle = "AirPods",
				groupName = "Test Site Name");
		}

		task ("Add a dynamic collection with All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a Collection Display fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Add a Content Display to Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "Levis 501",
				fragmentName = "Content Display");
		}

		task ("Add a Grid above the Collection Display") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				dropTarget = "Header",
				fragmentName = "Grid",
				targetFragmentName = "Collection Display");
		}

		task ("Change Number of Modules to 2") {
			PageEditor.editLayoutGrid(
				columnCount = "2",
				panel = "General");
		}

		task ("Add a Collection Filter to each module of Grid") {
			for (var columnNumber : list "1,2") {
				PageEditor.addElementToColumn(
					collectionName = "Content Display",
					columnNumber = "${columnNumber}",
					fragmentName = "Collection Filter",
					navTab = "Fragments");
			}
		}

		task ("Select the Keywords type in both Collection Filters") {
			for (var columnNumber : list "1,2") {
				PageEditor.editCollectionFilter(
					columnNumber = "${columnNumber}",
					filter = "Keywords",
					fragmentName = "Collection Filter",
					targetCollection = "Dynamic Collection");
			}
		}

		task ("Filter results of Collection Display by multiple keywords at Preview mode") {
			PageEditor.openPreviewMode();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			var n = "1";

			for (var content : list "AirPods,LeBron VIII,Levis 501") {
				ContentPages.viewFragmentTextInCollectionDisplay(
					row = "${n}",
					text = "${content}");

				var n = ${n} + 1;
			}

			Page.searchInCollectionFilter(searchTerm = "Levis");

			ContentPages.viewFragmentTextInCollectionDisplay(text = "Levis 501");

			Page.searchInCollectionFilter(
				index = "2",
				searchTerm = "AirPods");

			var n = "1";

			for (var content : list "AirPods,Levis 501") {
				ContentPages.viewFragmentTextInCollectionDisplay(
					row = "${n}",
					text = "${content}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_rowPosition = "3",
				locator1 = "PageEditor#COLLECTION_ITEM");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Filter results of Collection Display by multiple keywords at View mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			var n = "1";

			for (var content : list "AirPods,LeBron VIII,Levis 501") {
				ContentPages.viewFragmentTextInCollectionDisplay(
					row = "${n}",
					text = "${content}");

				var n = ${n} + 1;
			}

			Page.searchInCollectionFilter(searchTerm = "VIII");

			ContentPages.viewFragmentTextInCollectionDisplay(text = "LeBron VIII");

			Page.searchInCollectionFilter(
				index = "2",
				searchTerm = "Levis");

			var n = "1";

			for (var content : list "LeBron VIII,Levis 501") {
				ContentPages.viewFragmentTextInCollectionDisplay(
					row = "${n}",
					text = "${content}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_rowPosition = "3",
				locator1 = "PageEditor#COLLECTION_ITEM");
		}
	}

	@description = "This is a test for LPS-124226. Can filter the results of a collection page based on dynamic collection via selecting multiple categories in multiple filters."
	@priority = "5"
	test FilterResultsOfCollectionPageBasedOnDynamicCollectionByContainsAllCategories {
		property portal.acceptance = "true";

		task ("Add two vocabularies") {
			for (var title : list "Vocabulary A,Vocabulary B") {
				JSONCategory.addVocabulary(
					groupName = "Test Site Name",
					title = "${title}");
			}
		}

		task ("Add a category in Vocabulary A") {
			var categoryAId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category A",
				vocabularyName = "Vocabulary A");
		}

		task ("Add a category in Vocabulary B") {
			var categoryBId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category B",
				vocabularyName = "Vocabulary B");
		}

		task ("Add a web content based on Basic Web Content with Category A") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryAId}",
				content = "Web Content Content With Category A",
				groupName = "Test Site Name",
				title = "Web Content Title With Category A");
		}

		task ("Add a web content based on Basic Web Content with Category A and Category B") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryAId},${categoryBId}",
				content = "Web Content Content With Both Categories",
				groupName = "Test Site Name",
				title = "Web Content Title With Both Categories");
		}

		task ("Add a blogs entry with Category A") {
			HeadlessBlog.addBlogEntry(
				assetCategoryIds = "${categoryAId}",
				content = "Blogs Entry Content With Category A",
				groupName = "Test Site Name",
				title = "Blogs Entry Title With Category A");
		}

		task ("Add a blogs entry with Both Categories") {
			HeadlessBlog.addBlogEntry(
				assetCategoryIds = "${categoryAId},${categoryBId}",
				content = "Blogs Entry Content With Both Categories",
				groupName = "Test Site Name",
				title = "Blogs Entry Title With Both Categories");
		}

		task ("Add a document with Category A") {
			JSONDocument.addFileWithUploadedFile(
				assetCategoryIds = "${categoryAId}",
				dmDocumentTitle = "Document Title With Category A",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a document with Both Categories") {
			JSONDocument.addFileWithUploadedFile(
				assetCategoryIds = "${categoryAId},${categoryBId}",
				dmDocumentTitle = "Document Title With Both Categories",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_2.jpg");
		}

		task ("Add a dynamic collection with All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add a collection page based on dynamic collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Dynamic Collection",
				pageName = "Collection Page Name",
				tabName = "Collections");
		}

		task ("Set up List Style and Change Max Number of Items to 6") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Title",
				maxNumberOfItemsToDisplay = "6",
				selectedName = "Dynamic Collection",
				styleDisplay = "Inline List");
		}

		task ("Add a Grid above the Container") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				dropTarget = "Header",
				fragmentName = "Grid",
				targetFragmentName = "Container");
		}

		task ("Change Number of Modules to 2") {
			PageEditor.editLayoutGrid(
				columnCount = "2",
				panel = "General");
		}

		task ("Add a Collection Filter to each module of Grid") {
			for (var columnNumber : list "1,2") {
				PageEditor.addElementToColumn(
					collectionName = "Content Display",
					columnNumber = "${columnNumber}",
					fragmentName = "Collection Filter",
					navTab = "Fragments");
			}
		}

		task ("Select the Vocabulary A in Collection Filter inside first module") {
			PageEditor.editCollectionFilter(
				categoryNameList = "Category A",
				columnNumber = "1",
				filter = "Category",
				fragmentName = "Collection Filter",
				singleSelection = "true",
				targetCollection = "Dynamic Collection",
				vocabularyName = "Vocabulary A");

			AssertTextEquals.assertPartialText(
				key_columnNumber = "1",
				key_elementHeader = "//div[@aria-label='Collection Filter']//div[contains(@class,'page-editor__topper__content')]",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT",
				value1 = "Vocabulary A");
		}

		task ("Select the Vocabulary B in Collection Filter inside second module and choose Multiple Selection") {
			PageEditor.editCollectionFilter(
				categoryNameList = "Category B",
				columnNumber = "2",
				filter = "Category",
				fragmentName = "Collection Filter",
				targetCollection = "Dynamic Collection",
				vocabularyName = "Vocabulary B");

			AssertTextEquals.assertPartialText(
				key_columnNumber = "2",
				key_elementHeader = "//div[@aria-label='Collection Filter']//div[contains(@class,'page-editor__topper__content')]",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT",
				value1 = "Vocabulary B");
		}

		task ("Open the Preview modal") {
			PageEditor.openPreviewMode();
		}

		task ("View the order of elements inside of Container") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container-fluid-max-xl')]/div)[1]//*[contains(@data-lfr-editable-id,'element-text')][normalize-space(text())='Dynamic Collection']");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container-fluid-max-xl')]/div)[2]//ul[contains(@class,'list-inline')]");
		}

		task ("View Contains All Categories works in preview modal") {
			var n = "1";

			for (var title : list "Document Title With Both Categories,Document Title With Category A,Blogs Entry Title With Both Categories,Blogs Entry Title With Category A,Web Content Title With Both Categories,Web Content Title With Category A") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				columnNumber = "1",
				filterName = "Category A",
				selectedName = "Category A",
				title = "Vocabulary A");

			var n = "1";

			for (var title : list "Document Title With Both Categories,Document Title With Category A,Blogs Entry Title With Both Categories,Blogs Entry Title With Category A,Web Content Title With Both Categories,Web Content Title With Category A") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Category B",
				columnNumber = "2",
				multipleSelection = "true",
				selectedName = "Category B",
				title = "Vocabulary B");

			var n = "1";

			for (var title : list "Document Title With Both Categories,Blogs Entry Title With Both Categories,Web Content Title With Both Categories") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "4",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Navigate to page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Collection Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the order of elements inside of Container") {
			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container-fluid-max-xl')]/div)[1]//*[contains(@data-lfr-editable-id,'element-text')][normalize-space(text())='Dynamic Collection']");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container-fluid-max-xl')]/div)[2]//ul[contains(@class,'list-inline')]");
		}

		task ("Assert Contains All Categories works in view mode") {
			var n = "1";

			for (var title : list "Document Title With Both Categories,Document Title With Category A,Blogs Entry Title With Both Categories,Blogs Entry Title With Category A,Web Content Title With Both Categories,Web Content Title With Category A") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				columnNumber = "1",
				filterName = "Category A",
				selectedName = "Category A",
				title = "Vocabulary A");

			var n = "1";

			for (var title : list "Document Title With Both Categories,Document Title With Category A,Blogs Entry Title With Both Categories,Blogs Entry Title With Category A,Web Content Title With Both Categories,Web Content Title With Category A") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Category B",
				columnNumber = "2",
				multipleSelection = "true",
				selectedName = "Category B",
				title = "Vocabulary B");

			var n = "1";

			for (var title : list "Document Title With Both Categories,Blogs Entry Title With Both Categories,Web Content Title With Both Categories") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "4",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");
		}
	}

	@description = "This is a test for LPS-124226. Can filter the results of a collection page based on dynamic collection via selecting multiple subcategories in one filter."
	@priority = "5"
	test FilterResultsOfCollectionPageBasedOnDynamicCollectionByContainsAnySubcategories {
		property portal.acceptance = "true";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add three subcategories in category") {
			var subcategoryAId = JSONCategory.addSubcategory(
				groupName = "Test Site Name",
				parentCategoryName = "Category Name",
				title = "Subcategory A",
				vocabularyName = "Vocabulary Name");

			var subcategoryBId = JSONCategory.addSubcategory(
				groupName = "Test Site Name",
				parentCategoryName = "Category Name",
				title = "Subcategory B",
				vocabularyName = "Vocabulary Name");

			var subcategoryCId = JSONCategory.addSubcategory(
				groupName = "Test Site Name",
				parentCategoryName = "Category Name",
				title = "Subcategory C",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content based on Basic Web Content without category") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a web content based on Basic Web Content with Subcategory A") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${subcategoryAId}",
				content = "Web Content Content With Subcategory",
				groupName = "Test Site Name",
				title = "Web Content Title With Subcategory");
		}

		task ("Add a blogs entry without category") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Add a blogs entry with Subcategory B") {
			HeadlessBlog.addBlogEntry(
				assetCategoryIds = "${subcategoryBId}",
				content = "Blogs Entry Content With Subcategory",
				groupName = "Test Site Name",
				title = "Blogs Entry Title With Subcategory");
		}

		task ("Add a document without category") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a document with Subcategory C") {
			JSONDocument.addFileWithUploadedFile(
				assetCategoryIds = "${subcategoryCId}",
				dmDocumentTitle = "Document Title With Subcategory",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_2.jpg");
		}

		task ("Add a dynamic collection with All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add a collection page based on dynamic collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Dynamic Collection",
				pageName = "Collection Page Name",
				tabName = "Collections");
		}

		task ("Change Max Number of Items to 6") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				maxNumberOfItemsToDisplay = "6",
				selectedName = "Dynamic Collection");
		}

		task ("Add a Heading fragment into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Document Title With Subcategory",
				fragmentName = "Heading");
		}

		task ("Map the Title of collection items to editable field") {
			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Add a Collection Filter above the Container") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Collection Filter",
				targetFragmentName = "Container");
		}

		task ("Select the category in Collection Filter") {
			PageEditor.editCollectionFilter(
				categoryName = "Category Name",
				categoryNameList = "Category Name",
				filter = "Category",
				fragmentName = "Collection Filter",
				subcategoryNameList = "Subcategory A,Subcategory B,Subcategory C",
				targetCollection = "Dynamic Collection",
				vocabularyName = "Vocabulary Name");
		}

		task ("View the category name is shown in Collection Filter") {
			AssertTextEquals.assertPartialText(
				index = "1",
				key_fragmentName = "Collection Filter",
				locator1 = "Fragment#FRAGMENT_CONTENT",
				value1 = "Category Name");
		}

		task ("Open the Preview modal") {
			PageEditor.openPreviewMode();
		}

		task ("View the order of elements inside of Container") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[1]//*[contains(@data-lfr-editable-id,'element-text')][normalize-space(text())='Dynamic Collection']");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[2]//div[contains(@class,'row')]");
		}

		task ("View Contains Any Subcategories works in preview modal") {
			var n = "1";

			for (var title : list "Document Title With Subcategory,Document Title,Blogs Entry Title With Subcategory,Blogs Entry Title,Web Content Title With Subcategory,Web Content Title") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Subcategory A",
				multipleSelection = "true",
				selectedName = "Subcategory A",
				title = "Category Name");

			AssertTextEquals(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "1",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
				value1 = "Web Content Title With Subcategory");

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "2",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Subcategory A,Subcategory B",
				multipleSelection = "true",
				selectedName = "2 Selected",
				title = "Category Name");

			var n = "1";

			for (var title : list "Blogs Entry Title With Subcategory,Web Content Title With Subcategory") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "3",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Subcategory A,Subcategory B,Subcategory C",
				multipleSelection = "true",
				selectedName = "3 Selected",
				title = "Category Name");

			var n = "1";

			for (var title : list "Document Title With Subcategory,Blogs Entry Title With Subcategory,Web Content Title With Subcategory") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "4",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Navigate to page at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Collection Page Name",
				siteName = "Test Site Name");
		}

		task ("View the order of elements inside of Container") {
			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[1]//*[contains(@data-lfr-editable-id,'element-text')][normalize-space(text())='Dynamic Collection']");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[2]//div[contains(@class,'row')]");
		}

		task ("View Contains Any Subcategories works at view mode") {
			var n = "1";

			for (var title : list "Document Title With Subcategory,Document Title,Blogs Entry Title With Subcategory,Blogs Entry Title,Web Content Title With Subcategory,Web Content Title") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Subcategory A",
				multipleSelection = "true",
				selectedName = "Subcategory A",
				title = "Category Name");

			AssertTextEquals(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "1",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
				value1 = "Web Content Title With Subcategory");

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "2",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Subcategory A,Subcategory B",
				multipleSelection = "true",
				selectedName = "2 Selected",
				title = "Category Name");

			var n = "1";

			for (var title : list "Blogs Entry Title With Subcategory,Web Content Title With Subcategory") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "3",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Subcategory A,Subcategory B,Subcategory C",
				multipleSelection = "true",
				selectedName = "3 Selected",
				title = "Category Name");

			var n = "1";

			for (var title : list "Document Title With Subcategory,Blogs Entry Title With Subcategory,Web Content Title With Subcategory") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_fragmentName = "heading",
				key_rowPosition = "4",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY");
		}
	}

	@description = "This is a test for LPS-124226. Can filter the results of a collection page based on dynamic collection via selecting single category."
	@priority = "5"
	test FilterResultsOfCollectionPageBasedOnDynamicCollectionBySingleCategory {
		property portal.acceptance = "true";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			var categoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content based on Basic Web Content without category") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a web content based on Basic Web Content with category") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryId}",
				content = "Web Content Content With Category",
				groupName = "Test Site Name",
				title = "Web Content Title With Category");
		}

		task ("Add a blogs entry without category") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Add a blogs entry with category") {
			HeadlessBlog.addBlogEntry(
				assetCategoryIds = "${categoryId}",
				content = "Blogs Entry Content With Category",
				groupName = "Test Site Name",
				title = "Blogs Entry Title With Category");
		}

		task ("Add a document without category") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a document with category") {
			JSONDocument.addFileWithUploadedFile(
				assetCategoryIds = "${categoryId}",
				dmDocumentTitle = "Document Title With Category",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_2.jpg");
		}

		task ("Add a dynamic collection with All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add a collection page based on dynamic collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Dynamic Collection",
				pageName = "Collection Page Name",
				tabName = "Collections");
		}

		task ("Set up List Style and Change Max Number of Items to 6") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Title",
				maxNumberOfItemsToDisplay = "6",
				selectedName = "Dynamic Collection",
				styleDisplay = "Bordered List");
		}

		task ("Add a Collection Filter above the Container") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Collection Filter",
				targetFragmentName = "Container");
		}

		task ("Select the vocabulary in Collection Filter") {
			PageEditor.editCollectionFilter(
				categoryNameList = "Category Name",
				filter = "Category",
				fragmentName = "Collection Filter",
				singleSelection = "true",
				targetCollection = "Dynamic Collection",
				vocabularyName = "Vocabulary Name");
		}

		task ("View the vocabulary name shown in Collection Filter") {
			AssertTextEquals.assertPartialText(
				index = "1",
				key_fragmentName = "Collection Filter",
				locator1 = "Fragment#FRAGMENT_CONTENT",
				value1 = "Vocabulary Name");
		}

		task ("Open the Preview modal") {
			PageEditor.openPreviewMode();
		}

		task ("View the order of elements inside of Container") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[1]//*[contains(@data-lfr-editable-id,'element-text')][normalize-space(text())='Dynamic Collection']");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[2]//ul[contains(@class,'list-group')]");
		}

		task ("View the filter works in preview modal") {
			var n = "1";

			for (var title : list "Document Title With Category,Document Title,Blogs Entry Title With Category,Blogs Entry Title,Web Content Title With Category,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				filterName = "Category Name",
				selectedName = "Category Name",
				title = "Vocabulary Name");

			var n = "1";

			for (var title : list "Document Title With Category,Blogs Entry Title With Category,Web Content Title With Category") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "4",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Navigate to page at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Collection Page Name",
				siteName = "Test Site Name");
		}

		task ("View the order of elements inside of Container") {
			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[1]//*[contains(@data-lfr-editable-id,'element-text')][normalize-space(text())='Dynamic Collection']");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[2]//ul[contains(@class,'list-group')]");
		}

		task ("View the filter works at view mode") {
			var n = "1";

			for (var title : list "Document Title With Category,Document Title,Blogs Entry Title With Category,Blogs Entry Title,Web Content Title With Category,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				filterName = "Category Name",
				selectedName = "Category Name",
				title = "Vocabulary Name");

			var n = "1";

			for (var title : list "Document Title With Category,Blogs Entry Title With Category,Web Content Title With Category") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "4",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");
		}
	}

	@description = "This is a test for LPS-111807. Can filter the results of a collection page based on manual collection via selecting multiple categories in multiple filters."
	@priority = "4"
	test FilterResultsOfCollectionPageBasedOnManualCollectionByContainsAllCategories {
		task ("Add two vocabularies") {
			for (var title : list "Vocabulary A,Vocabulary B") {
				JSONCategory.addVocabulary(
					groupName = "Test Site Name",
					title = "${title}");
			}
		}

		task ("Add a category in Vocabulary A") {
			var categoryAId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category A",
				vocabularyName = "Vocabulary A");
		}

		task ("Add a category in Vocabulary B") {
			var categoryBId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category B",
				vocabularyName = "Vocabulary B");
		}

		task ("Add a web content based on Basic Web Content with Category A") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryAId}",
				content = "Web Content Content With Category A",
				groupName = "Test Site Name",
				title = "Web Content Title With Category A");
		}

		task ("Add a web content based on Basic Web Content with Category A and Category B") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryAId},${categoryBId}",
				content = "Web Content Content With Both Categories",
				groupName = "Test Site Name",
				title = "Web Content Title With Both Categories");
		}

		task ("Add a blogs entry with Category A") {
			HeadlessBlog.addBlogEntry(
				assetCategoryIds = "${categoryAId}",
				content = "Blogs Entry Content With Category A",
				groupName = "Test Site Name",
				title = "Blogs Entry Title With Category A");
		}

		task ("Add a blogs entry with Both Categories") {
			HeadlessBlog.addBlogEntry(
				assetCategoryIds = "${categoryAId},${categoryBId}",
				content = "Blogs Entry Content With Both Categories",
				groupName = "Test Site Name",
				title = "Blogs Entry Title With Both Categories");
		}

		task ("Add a document with Category A") {
			JSONDocument.addFileWithUploadedFile(
				assetCategoryIds = "${categoryAId}",
				dmDocumentTitle = "Document Title With Category A",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a document with Both Categories") {
			JSONDocument.addFileWithUploadedFile(
				assetCategoryIds = "${categoryAId},${categoryBId}",
				dmDocumentTitle = "Document Title With Both Categories",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_2.jpg");
		}

		task ("Add a manual collection with All Types") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Manual Collection");
		}

		task ("Select all assets as collection items") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Manual Collection");

			for (var assetName : list "Web Content Title With Category A,Web Content Title With Both Categories") {
				AssetListsAdmin.selectAsset(
					assetName = "${assetName}",
					assetType = "Basic Web Content");
			}

			for (var assetName : list "Blogs Entry Title With Category A,Blogs Entry Title With Both Categories") {
				AssetListsAdmin.selectAsset(
					assetName = "${assetName}",
					assetType = "Blogs Entry");
			}

			for (var assetName : list "Document Title With Category A,Document Title With Both Categories") {
				AssetListsAdmin.selectAsset(
					assetName = "${assetName}",
					assetType = "Basic Document");
			}
		}

		task ("Add a collection page based on manual collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Manual Collection",
				pageName = "Collection Page Name",
				tabName = "Collections");
		}

		task ("Set up List Style and Change Max Number of Items to 6") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Title",
				maxNumberOfItemsToDisplay = "6",
				selectedName = "Manual Collection",
				styleDisplay = "Inline List");
		}

		task ("Add a Grid above the Container") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				dropTarget = "Header",
				fragmentName = "Grid",
				targetFragmentName = "Container");
		}

		task ("Change Number of Modules to 2") {
			PageEditor.editLayoutGrid(
				columnCount = "2",
				panel = "General");
		}

		task ("Add a Collection Filter to each module of Grid") {
			for (var columnNumber : list "1,2") {
				PageEditor.addElementToColumn(
					collectionName = "Content Display",
					columnNumber = "${columnNumber}",
					fragmentName = "Collection Filter",
					navTab = "Fragments");
			}
		}

		task ("Select the Vocabulary A in Collection Filter inside first module") {
			PageEditor.editCollectionFilter(
				categoryNameList = "Category A",
				columnNumber = "1",
				filter = "Category",
				fragmentName = "Collection Filter",
				singleSelection = "true",
				targetCollection = "Manual Collection",
				vocabularyName = "Vocabulary A");

			AssertTextEquals.assertPartialText(
				key_columnNumber = "1",
				key_elementHeader = "//div[@aria-label='Collection Filter']//div[contains(@class,'page-editor__topper__content')]",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT",
				value1 = "Vocabulary A");
		}

		task ("Select the Vocabulary B in Collection Filter inside second module and choose Multiple Selection") {
			PageEditor.editCollectionFilter(
				categoryNameList = "Category B",
				columnNumber = "2",
				filter = "Category",
				fragmentName = "Collection Filter",
				targetCollection = "Manual Collection",
				vocabularyName = "Vocabulary B");

			AssertTextEquals.assertPartialText(
				key_columnNumber = "2",
				key_elementHeader = "//div[@aria-label='Collection Filter']//div[contains(@class,'page-editor__topper__content')]",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT",
				value1 = "Vocabulary B");
		}

		task ("Open the Preview modal") {
			PageEditor.openPreviewMode();
		}

		task ("Assert the order of elements inside of Container") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container-fluid-max-xl')]/div)[1]//*[contains(@data-lfr-editable-id,'element-text')][normalize-space(text())='Manual Collection']");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container-fluid-max-xl')]/div)[2]//ul[contains(@class,'list-inline')]");
		}

		task ("Assert Contains All Categories works in preview mode") {
			var n = "1";

			for (var title : list "Web Content Title With Category A,Web Content Title With Both Categories,Blogs Entry Title With Category A,Blogs Entry Title With Both Categories,Document Title With Category A,Document Title With Both Categories") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				columnNumber = "1",
				filterName = "Category A",
				selectedName = "Category A",
				title = "Vocabulary A");

			var n = "1";

			for (var title : list "Web Content Title With Category A,Web Content Title With Both Categories,Blogs Entry Title With Category A,Blogs Entry Title With Both Categories,Document Title With Category A,Document Title With Both Categories") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Category B",
				columnNumber = "2",
				multipleSelection = "true",
				selectedName = "Category B",
				title = "Vocabulary B");

			var n = "1";

			for (var title : list "Web Content Title With Both Categories,Blogs Entry Title With Both Categories,Document Title With Both Categories") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "4",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Navigate to page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Collection Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the order of elements inside of Container") {
			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container-fluid-max-xl')]/div)[1]//*[contains(@data-lfr-editable-id,'element-text')][normalize-space(text())='Manual Collection']");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container-fluid-max-xl')]/div)[2]//ul[contains(@class,'list-inline')]");
		}

		task ("Assert Contains All Categories works in view mode") {
			var n = "1";

			for (var title : list "Web Content Title With Category A,Web Content Title With Both Categories,Blogs Entry Title With Category A,Blogs Entry Title With Both Categories,Document Title With Category A,Document Title With Both Categories") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				columnNumber = "1",
				filterName = "Category A",
				selectedName = "Category A",
				title = "Vocabulary A");

			var n = "1";

			for (var title : list "Web Content Title With Category A,Web Content Title With Both Categories,Blogs Entry Title With Category A,Blogs Entry Title With Both Categories,Document Title With Category A,Document Title With Both Categories") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Category B",
				columnNumber = "2",
				multipleSelection = "true",
				selectedName = "Category B",
				title = "Vocabulary B");

			var n = "1";

			for (var title : list "Web Content Title With Both Categories,Blogs Entry Title With Both Categories,Document Title With Both Categories") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "4",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");
		}
	}

	@description = "This is a test for LPS-111807. Can filter the results of a collection page based on manual collection via selecting multiple categories in one filter."
	@priority = "5"
	test FilterResultsOfCollectionPageBasedOnManualCollectionByContainsAnyCategories {
		property portal.acceptance = "true";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add three categories") {
			var categoryAId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category A",
				vocabularyName = "Vocabulary Name");

			var categoryBId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category B",
				vocabularyName = "Vocabulary Name");

			var categoryCId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category C",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content based on Basic Web Content without category") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a web content based on Basic Web Content with Category A") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryAId}",
				content = "Web Content Content With Category",
				groupName = "Test Site Name",
				title = "Web Content Title With Category");
		}

		task ("Add a blogs entry without category") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Add a blogs entry with Category B") {
			HeadlessBlog.addBlogEntry(
				assetCategoryIds = "${categoryBId}",
				content = "Blogs Entry Content With Category",
				groupName = "Test Site Name",
				title = "Blogs Entry Title With Category");
		}

		task ("Add a document without category") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a document with Category C") {
			JSONDocument.addFileWithUploadedFile(
				assetCategoryIds = "${categoryCId}",
				dmDocumentTitle = "Document Title With Category",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_2.jpg");
		}

		task ("Add a manual collection with All Types") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Manual Collection");
		}

		task ("Select all assets as collection items") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Manual Collection");

			for (var assetName : list "Web Content Title,Web Content Title With Category") {
				AssetListsAdmin.selectAsset(
					assetName = "${assetName}",
					assetType = "Basic Web Content");
			}

			for (var assetName : list "Blogs Entry Title,Blogs Entry Title With Category") {
				AssetListsAdmin.selectAsset(
					assetName = "${assetName}",
					assetType = "Blogs Entry");
			}

			for (var assetName : list "Document Title,Document Title With Category") {
				AssetListsAdmin.selectAsset(
					assetName = "${assetName}",
					assetType = "Basic Document");
			}
		}

		task ("Add a collection page based on manual collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Manual Collection",
				pageName = "Collection Page Name",
				tabName = "Collections");
		}

		task ("Set up List Style and Change Max Number of Items to 6") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Title",
				maxNumberOfItemsToDisplay = "6",
				selectedName = "Manual Collection",
				styleDisplay = "Bulleted List");
		}

		task ("Add a Collection Filter above the Container") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Collection Filter",
				targetFragmentName = "Container");
		}

		task ("Select the Vocabulary Name in Collection Filter and choose Multiple Selection") {
			PageEditor.editCollectionFilter(
				categoryNameList = "Category A,Category B,Category C",
				filter = "Category",
				fragmentName = "Collection Filter",
				targetCollection = "Manual Collection",
				vocabularyName = "Vocabulary Name");
		}

		task ("Assert Vocabulary Name is shown in Collection Filter") {
			AssertTextEquals.assertPartialText(
				index = "1",
				key_fragmentName = "Collection Filter",
				locator1 = "Fragment#FRAGMENT_CONTENT",
				value1 = "Vocabulary Name");
		}

		task ("Open the Preview modal") {
			PageEditor.openPreviewMode();
		}

		task ("Assert the order of elements inside of Container") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[1]//*[contains(@data-lfr-editable-id,'element-text')][normalize-space(text())='Manual Collection']");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[2]//ul[not(contains(@class,'list-group'))]");
		}

		task ("Assert Contains Any Categories works in preview mode") {
			var n = "1";

			for (var title : list "Web Content Title,Web Content Title With Category,Blogs Entry Title,Blogs Entry Title With Category,Document Title,Document Title With Category") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Category A",
				multipleSelection = "true",
				selectedName = "Category A",
				title = "Vocabulary Name");

			AssertVisible(
				key_entryContent = "[normalize-space(text())='Web Content Title With Category']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Category A,Category B",
				multipleSelection = "true",
				selectedName = "2 Selected",
				title = "Vocabulary Name");

			var n = "1";

			for (var title : list "Web Content Title With Category,Blogs Entry Title With Category") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "3",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Category A,Category B,Category C",
				multipleSelection = "true",
				selectedName = "3 Selected",
				title = "Vocabulary Name");

			var n = "1";

			for (var title : list "Web Content Title With Category,Blogs Entry Title With Category,Document Title With Category") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "4",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Navigate to page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Collection Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the order of elements inside of Container") {
			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[1]//*[contains(@data-lfr-editable-id,'element-text')][normalize-space(text())='Manual Collection']");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[2]//ul[not(contains(@class,'list-group'))]");
		}

		task ("Assert Contains Any Categories works in view mode") {
			var n = "1";

			for (var title : list "Web Content Title,Web Content Title With Category,Blogs Entry Title,Blogs Entry Title With Category,Document Title,Document Title With Category") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Category A",
				multipleSelection = "true",
				selectedName = "Category A",
				title = "Vocabulary Name");

			AssertVisible(
				key_entryContent = "[normalize-space(text())='Web Content Title With Category']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Category A,Category B",
				multipleSelection = "true",
				selectedName = "2 Selected",
				title = "Vocabulary Name");

			var n = "1";

			for (var title : list "Web Content Title With Category,Blogs Entry Title With Category") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "3",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Category A,Category B,Category C",
				multipleSelection = "true",
				selectedName = "3 Selected",
				title = "Vocabulary Name");

			var n = "1";

			for (var title : list "Web Content Title With Category,Blogs Entry Title With Category,Document Title With Category") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "4",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");
		}
	}

	@description = "This is a test for LPS-111807. Can filter the results of a collection page based on manual collection via selecting single category."
	@priority = "5"
	test FilterResultsOfCollectionPageBasedOnManualCollectionBySingleCategory {
		property portal.acceptance = "true";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			var categoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content based on Basic Web Content without category") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a web content based on Basic Web Content with category") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryId}",
				content = "Web Content Content With Category",
				groupName = "Test Site Name",
				title = "Web Content Title With Category");
		}

		task ("Add a blogs entry without category") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Add a blogs entry with category") {
			HeadlessBlog.addBlogEntry(
				assetCategoryIds = "${categoryId}",
				content = "Blogs Entry Content With Category",
				groupName = "Test Site Name",
				title = "Blogs Entry Title With Category");
		}

		task ("Add a document without category") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a document with category") {
			JSONDocument.addFileWithUploadedFile(
				assetCategoryIds = "${categoryId}",
				dmDocumentTitle = "Document Title With Category",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_2.jpg");
		}

		task ("Add a manual collection with All Types") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Manual Collection");
		}

		task ("Select all assets as collection items") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Manual Collection");

			for (var assetName : list "Web Content Title,Web Content Title With Category") {
				AssetListsAdmin.selectAsset(
					assetName = "${assetName}",
					assetType = "Basic Web Content");
			}

			for (var assetName : list "Blogs Entry Title,Blogs Entry Title With Category") {
				AssetListsAdmin.selectAsset(
					assetName = "${assetName}",
					assetType = "Blogs Entry");
			}

			for (var assetName : list "Document Title,Document Title With Category") {
				AssetListsAdmin.selectAsset(
					assetName = "${assetName}",
					assetType = "Basic Document");
			}
		}

		task ("Add a collection page based on manual collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Manual Collection",
				pageName = "Collection Page Name",
				tabName = "Collections");
		}

		task ("Set up List Style and Change Max Number of Items to 6") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Title",
				maxNumberOfItemsToDisplay = "6",
				selectedName = "Manual Collection",
				styleDisplay = "Bordered List");
		}

		task ("Add a Collection Filter above the Container") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Collection Filter",
				targetFragmentName = "Container");
		}

		task ("Select the Vocabulary Name in Collection Filter") {
			PageEditor.editCollectionFilter(
				categoryNameList = "Category Name",
				filter = "Category",
				fragmentName = "Collection Filter",
				singleSelection = "true",
				targetCollection = "Manual Collection",
				vocabularyName = "Vocabulary Name");
		}

		task ("Assert Vocabulary Name is shown in Collection Filter") {
			AssertTextEquals.assertPartialText(
				index = "1",
				key_fragmentName = "Collection Filter",
				locator1 = "Fragment#FRAGMENT_CONTENT",
				value1 = "Vocabulary Name");
		}

		task ("Open the Preview modal") {
			PageEditor.openPreviewMode();
		}

		task ("Assert the order of elements inside of Container") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[1]//*[contains(@data-lfr-editable-id,'element-text')][normalize-space(text())='Manual Collection']");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[2]//ul[contains(@class,'list-group')]");
		}

		task ("Assert filter works in preview mode") {
			var n = "1";

			for (var title : list "Web Content Title,Web Content Title With Category,Blogs Entry Title,Blogs Entry Title With Category,Document Title,Document Title With Category") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				filterName = "Category Name",
				selectedName = "Category Name",
				title = "Vocabulary Name");

			var n = "1";

			for (var title : list "Web Content Title With Category,Blogs Entry Title With Category,Document Title With Category") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "4",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Navigate to page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Collection Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the order of elements inside of Container") {
			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[1]//*[contains(@data-lfr-editable-id,'element-text')][normalize-space(text())='Manual Collection']");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[2]//ul[contains(@class,'list-group')]");
		}

		task ("Assert filter works in view mode") {
			var n = "1";

			for (var title : list "Web Content Title,Web Content Title With Category,Blogs Entry Title,Blogs Entry Title With Category,Document Title,Document Title With Category") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				filterName = "Category Name",
				selectedName = "Category Name",
				title = "Vocabulary Name");

			var n = "1";

			for (var title : list "Web Content Title With Category,Blogs Entry Title With Category,Document Title With Category") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "4",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");
		}
	}

	@description = "This is a test for LPS-111807. Can filter the results of a collection page based on manual collection with via selecting subcategories from Global site."
	@priority = "4"
	test FilterResultsOfCollectionPageBasedOnManualCollectionBySubcategoryFromGlobalSite {
		task ("Add a category in Topic from Global site") {
			var categoryId = JSONCategory.addCategory(
				groupName = "Global",
				title = "Category Name",
				vocabularyName = "Topic");
		}

		task ("Add a subcategory") {
			var subcategoryId = JSONCategory.addSubcategory(
				groupName = "Global",
				parentCategoryName = "Category Name",
				title = "Subcategory Name",
				vocabularyName = "Topic");
		}

		task ("Add a web content based on Basic Web Content with category") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryId}",
				content = "Web Content Content With Category",
				groupName = "Test Site Name",
				title = "Web Content Title With Category");
		}

		task ("Add a web content based on Basic Web Content with subcategory") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${subcategoryId}",
				content = "Web Content Content With Subcategory",
				groupName = "Test Site Name",
				title = "Web Content Title With Subcategory");
		}

		task ("Add a blogs entry with category") {
			HeadlessBlog.addBlogEntry(
				assetCategoryIds = "${categoryId}",
				content = "Blogs Entry Content With Category",
				groupName = "Test Site Name",
				title = "Blogs Entry Title With Category");
		}

		task ("Add a blogs entry with subcategory") {
			HeadlessBlog.addBlogEntry(
				assetCategoryIds = "${subcategoryId}",
				content = "Blogs Entry Content With Subcategory",
				groupName = "Test Site Name",
				title = "Blogs Entry Title With Subcategory");
		}

		task ("Add a document with category") {
			JSONDocument.addFileWithUploadedFile(
				assetCategoryIds = "${categoryId}",
				dmDocumentTitle = "Document Title With Category",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a document with subcategory") {
			JSONDocument.addFileWithUploadedFile(
				assetCategoryIds = "${subcategoryId}",
				dmDocumentTitle = "Document Title With Subcategory",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_2.jpg");
		}

		task ("Add a manual collection with All Types") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Manual Collection");
		}

		task ("Select all assets as collection items") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Manual Collection");

			for (var assetName : list "Web Content Title With Category,Web Content Title With Subcategory") {
				AssetListsAdmin.selectAsset(
					assetName = "${assetName}",
					assetType = "Basic Web Content");
			}

			for (var assetName : list "Blogs Entry Title With Category,Blogs Entry Title With Subcategory") {
				AssetListsAdmin.selectAsset(
					assetName = "${assetName}",
					assetType = "Blogs Entry");
			}

			for (var assetName : list "Document Title With Category,Document Title With Subcategory") {
				AssetListsAdmin.selectAsset(
					assetName = "${assetName}",
					assetType = "Basic Document");
			}
		}

		task ("Add a collection page based on manual collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Manual Collection",
				pageName = "Collection Page Name",
				tabName = "Collections");
		}

		task ("Set up List Style and Change Max Number of Items to 6") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Title",
				maxNumberOfItemsToDisplay = "6",
				selectedName = "Manual Collection",
				styleDisplay = "Numbered List");
		}

		task ("Add a Collection Filter above the Container") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Collection Filter",
				targetFragmentName = "Container");
		}

		task ("Select the Category Name in Collection Filter") {
			PageEditor.editCollectionFilter(
				categoryName = "Category Name",
				categoryNameList = "Category Name",
				filter = "Category",
				fragmentName = "Collection Filter",
				singleSelection = "true",
				subcategoryNameList = "Subcategory Name",
				targetCollection = "Manual Collection",
				vocabularyName = "Topic");
		}

		task ("Assert Category Name is shown in Collection Filter") {
			AssertTextEquals.assertPartialText(
				index = "1",
				key_fragmentName = "Collection Filter",
				locator1 = "Fragment#FRAGMENT_CONTENT",
				value1 = "Category Name");
		}

		task ("Open the Preview modal") {
			PageEditor.openPreviewMode();
		}

		task ("Assert the order of elements inside of Container") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[1]//*[contains(@data-lfr-editable-id,'element-text')][normalize-space(text())='Manual Collection']");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[2]//ol");
		}

		task ("Assert filter works in preview mode") {
			var n = "1";

			for (var title : list "Web Content Title With Category,Web Content Title With Subcategory,Blogs Entry Title With Category,Blogs Entry Title With Subcategory,Document Title With Category,Document Title With Subcategory") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				filterName = "Subcategory Name",
				selectedName = "Subcategory Name",
				title = "Category Name");

			var n = "1";

			for (var title : list "Web Content Title With Subcategory,Blogs Entry Title With Subcategory,Document Title With Subcategory") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "4",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Navigate to page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Collection Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert the order of elements inside of Container") {
			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[1]//*[contains(@data-lfr-editable-id,'element-text')][normalize-space(text())='Manual Collection']");

			AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//div[contains(@class,'container')]/div)[2]//ol");
		}

		task ("Assert filter works in view mode") {
			var n = "1";

			for (var title : list "Web Content Title With Category,Web Content Title With Subcategory,Blogs Entry Title With Category,Blogs Entry Title With Subcategory,Document Title With Category,Document Title With Subcategory") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				filterName = "Subcategory Name",
				selectedName = "Subcategory Name",
				title = "Category Name");

			var n = "1";

			for (var title : list "Web Content Title With Subcategory,Blogs Entry Title With Subcategory,Document Title With Subcategory") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "4",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");
		}
	}

	@description = "This is a test for LPS-131947. The user could view a warning info in Collection Filter fragment when no collection in page. Can filter different Collection Displays by different Collection Filters."
	@priority = "4"
	test FilterResultsOfMultipleCollectionDisplaysByMultipleCollectionFilters {
		task ("Add three web contents") {
			for (var style : list "501,510,512") {
				JSONWebcontent.addWebContent(
					content = "${style}",
					groupName = "Test Site Name",
					title = "${style}");
			}
		}

		task ("Add three blogs entries") {
			for (var style : list "X,Y,S") {
				HeadlessBlog.addBlogEntry(
					content = "Model ${style}",
					groupName = "Test Site Name",
					title = "Model ${style}");
			}
		}

		task ("Add the first dynamic collection for Web Content Article and Basic Web Content") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article",
				title = "Levis");
		}

		task ("Add the second dynamic collection for Blogs Entry") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "Blogs Entry",
				title = "Tesla");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add the first Grid to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Change Number of Modules to 2") {
			PageEditor.editLayoutGrid(
				columnCount = "2",
				panel = "General");
		}

		task ("Add one Collection Filter to each module of Grid") {
			for (var n : list "1,2") {
				PageEditor.addElementToColumn(
					collectionName = "Content Display",
					columnNumber = "${n}",
					fragmentName = "Collection Filter",
					navTab = "Fragments");
			}
		}

		task ("View the alert info shown in General panel of Collection Filter") {
			PageEditor.editCollectionFilter(
				columnNumber = "1",
				fragmentName = "Collection Filter");

			AssertTextEquals(
				locator1 = "PageEditor#ITEM_CONFIGURATION_ALERT_INFO",
				value1 = "Display a collection on the page that support at least one filter type.");
		}

		task ("Add the second Grid below the first one") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid",
				targetFragmentName = "Grid");
		}

		task ("Change Number of Modules to 2") {
			PageEditor.editLayoutGrid(
				columnCount = "2",
				panel = "General",
				position = "2");
		}

		task ("Add one Collection Display to each module of the second Grid") {
			for (var n : list "1,2") {
				PageEditor.addElementToColumn(
					collectionName = "Content Display",
					columnNumber = "${n}",
					fragmentName = "Collection Display",
					navTab = "Fragments",
					position = "2");
			}
		}

		task ("Select the Levis in the first Collection Display and Select the Bordered List as List Style") {
			PageEditor.editCollectionDisplay(
				assetListName = "Levis",
				fragmentName = "Collection Display",
				styleDisplay = "Bordered List");
		}

		task ("Select the Tesla in the second Collection Display and Select the Bordered List as List Style") {
			PageEditor.editCollectionDisplay(
				assetListName = "Tesla",
				fragmentName = "Collection Display",
				index = "2",
				styleDisplay = "Bordered List");
		}

		task ("Select the Levis as Target Collection and Select the Keywords as Filter in the first Collection Filter") {
			PageEditor.editCollectionFilter(
				columnNumber = "1",
				filter = "Keywords",
				fragmentName = "Collection Filter",
				targetCollection = "Levis");
		}

		task ("Select the Tesla as Target Collection and Select the Keywords as Filter in the second Collection Filter") {
			PageEditor.editCollectionFilter(
				columnNumber = "2",
				filter = "Keywords",
				fragmentName = "Collection Filter",
				targetCollection = "Tesla");
		}

		task ("Filter results of multiple Collection Displays by multiple Collection Filters at Preview mode") {
			PageEditor.openPreviewMode();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			var n = "1";

			for (var style : list "512,510,501") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${style}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			var n = "4";

			for (var style : list "S,Y,X") {
				AssertVisible(
					key_entryContent = "[normalize-space()='Model ${style}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.searchInCollectionFilter(searchTerm = "501");

			AssertVisible(
				key_entryContent = "[normalize-space()='501']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			Page.searchInCollectionFilter(
				index = "2",
				searchTerm = "X");

			AssertVisible(
				key_entryContent = "[normalize-space()='Model X']",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "[normalize-space()='501']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Filter results of multiple Collection Displays by multiple Collection Filters at View mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			var n = "1";

			for (var style : list "512,510,501") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${style}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			var n = "4";

			for (var style : list "S,Y,X") {
				AssertVisible(
					key_entryContent = "[normalize-space()='Model ${style}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.searchInCollectionFilter(searchTerm = "501");

			AssertVisible(
				key_entryContent = "[normalize-space()='501']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			Page.searchInCollectionFilter(
				index = "2",
				searchTerm = "X");

			AssertVisible(
				key_entryContent = "[normalize-space()='Model X']",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "[normalize-space()='501']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");
		}
	}

	@description = "This is a test for LPS-111807. The user could show the label of selected vocabulary or category in Collection Filter."
	@priority = "5"
	test ShowLabelOfSelectedSource {
		property portal.acceptance = "true";

		task ("Add two vocabularies") {
			for (var vocabularyName : list "Size,Color") {
				JSONCategory.addVocabulary(
					groupName = "Test Site Name",
					title = "${vocabularyName}");
			}
		}

		task ("Add three categories in Size vocabulary") {
			var largeId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Large",
				vocabularyName = "Size");

			var mediumId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Medium",
				vocabularyName = "Size");

			var smallId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Small",
				vocabularyName = "Size");
		}

		task ("Add a category in Color vocabulary") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Pure Color",
				vocabularyName = "Color");
		}

		task ("Add three subcategories in Pure Color cabulary") {
			var blueId = JSONCategory.addSubcategory(
				groupName = "Test Site Name",
				parentCategoryName = "Pure Color",
				title = "Blue",
				vocabularyName = "Color");

			var redId = JSONCategory.addSubcategory(
				groupName = "Test Site Name",
				parentCategoryName = "Pure Color",
				title = "Red",
				vocabularyName = "Color");

			var greenId = JSONCategory.addSubcategory(
				groupName = "Test Site Name",
				parentCategoryName = "Pure Color",
				title = "Green",
				vocabularyName = "Color");
		}

		task ("Add the first web content with Large and Green") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${largeId},${greenId}",
				content = "T-shirt 1",
				groupName = "Test Site Name",
				title = "T-shirt 1");
		}

		task ("Add the second web content with Medium and Green") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${mediumId},${greenId}",
				content = "T-shirt 2",
				groupName = "Test Site Name",
				title = "T-shirt 2");
		}

		task ("Add the third web content with Small and Red") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${smallId},${redId}",
				content = "T-shirt 3",
				groupName = "Test Site Name",
				title = "T-shirt 3");
		}

		task ("Add the fourth web content with Large and Blue") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${largeId},${blueId}",
				content = "T-shirt 4",
				groupName = "Test Site Name",
				title = "T-shirt 4");
		}

		task ("Add a dynamic collection for All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add a collection page based on dynamic collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Dynamic Collection",
				pageName = "Collection Page Name",
				tabName = "Collections");
		}

		task ("Select the Bordered List in Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Title",
				selectedName = "Dynamic Collection",
				styleDisplay = "Bordered List");
		}

		task ("Add a Grid above the Container") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				dropTarget = "Header",
				fragmentName = "Grid",
				targetFragmentName = "Container");
		}

		task ("Change Number of Modules to 2") {
			PageEditor.editLayoutGrid(
				columnCount = "2",
				panel = "General");
		}

		task ("Add the first Collection Filter to first module of Grid") {
			PageEditor.addElementToColumn(
				collectionName = "Content Display",
				columnNumber = "1",
				fragmentName = "Collection Filter",
				navTab = "Fragments");
		}

		task ("Check the Show Label in Collection Filter") {
			PageEditor.editCollectionFilter(
				filter = "Category",
				fragmentName = "Collection Filter",
				targetCollection = "Dynamic Collection");

			Check.checkNotVisible(
				checkboxName = "Show Label",
				locator1 = "Checkbox#ANY_CHECKBOX");

			PageEditor.waitForAutoSave();
		}

		task ("View the empty source label shown in Collection Filter") {
			AssertElementPresent(
				locator1 = "PageEditor#COLLECTION_FILTER_SOURCE_LABEL_VISIBLE",
				sourceLabel = "");
		}

		task ("Select the Size vocabulary in Collection Filter") {
			PageEditor.editCollectionFilter(
				categoryNameList = "Large,Medium,Small",
				columnNumber = "1",
				fragmentName = "Collection Filter",
				vocabularyName = "Size");

			AssertTextEquals.assertPartialText(
				key_columnNumber = "1",
				key_elementHeader = "//div[@aria-label='Collection Filter']//div[contains(@class,'page-editor__topper__content')]",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT",
				value1 = "Size");
		}

		task ("View the source label of Collection Filter is Size") {
			AssertElementPresent(
				locator1 = "PageEditor#COLLECTION_FILTER_SOURCE_LABEL_VISIBLE",
				sourceLabel = "Size");
		}

		task ("Add the second Collection Filter to second module of Grid") {
			PageEditor.addElementToColumn(
				collectionName = "Content Display",
				columnNumber = "2",
				fragmentName = "Collection Filter",
				navTab = "Fragments");
		}

		task ("Select the Pure Color category and Single Selection in the second Collection Filter") {
			PageEditor.editCollectionFilter(
				categoryName = "Pure Color",
				categoryNameList = "Pure Color",
				columnNumber = "2",
				filter = "Category",
				fragmentName = "Collection Filter",
				singleSelection = "true",
				subcategoryNameList = "Blue,Red,Green",
				targetCollection = "Dynamic Collection",
				vocabularyName = "Color");

			AssertTextEquals.assertPartialText(
				key_columnNumber = "2",
				key_elementHeader = "//div[@aria-label='Collection Filter']//div[contains(@class,'page-editor__topper__content')]",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT",
				value1 = "Pure Color");
		}

		task ("View the source label of second Collection Filter is not shown") {
			AssertElementPresent(
				key_columnNumber = "2",
				key_elementHeader = "//div[.//button[contains(@class,'dropdown-toggle')]]//label[normalize-space(text())='Pure Color'][contains(@class,'sr-only')]",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}

		task ("Check the Show Label in the second Collection Filter") {
			PageEditor.editCollectionFilter(
				columnNumber = "2",
				fragmentName = "Collection Filter",
				selectedName = "Pure Color",
				showLabel = "true");
		}

		task ("View the source label of the second Collection Filter is Pure Color") {
			AssertElementPresent(
				key_columnNumber = "2",
				key_elementHeader = "//div[.//button[contains(@class,'dropdown-toggle')]]//label[normalize-space(text())='Pure Color'][not(contains(@class,'sr-only'))]",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}

		task ("Edit the source label of the second Collection Filter") {
			PageEditor.editCollectionFilter(
				columnNumber = "2",
				fragmentName = "Collection Filter",
				label = "T-shirt Color",
				selectedName = "Pure Color");
		}

		task ("View the source label of the second Collection Filter is T-shirt Color") {
			AssertElementPresent(
				key_columnNumber = "2",
				key_elementHeader = "//div[.//button[contains(@class,'dropdown-toggle')]]//label[normalize-space(text())='T-shirt Color'][not(contains(@class,'sr-only'))]",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}

		task ("Open the Preview modal") {
			PageEditor.openPreviewMode();
		}

		task ("View the source label of the first Collection Filter is Size") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			AssertElementPresent(
				locator1 = "PageEditor#COLLECTION_FILTER_SOURCE_LABEL_VISIBLE",
				sourceLabel = "Size");
		}

		task ("Select the Large and Medium in the first Collection Filter") {
			Page.selectFilterInCollectionFilter(
				categoryNameList = "Large,Medium",
				multipleSelection = "true",
				selectedName = "2 Selected",
				title = "Size");
		}

		task ("View only the T-shirt 1, T-shirt 2 and T-shirt 4 shown in Collection Display") {
			var n = "1";

			for (var title : list "T-shirt 4,T-shirt 2,T-shirt 1") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}

		task ("View the source label of the second Collection Filter is T-shirt Color") {
			AssertElementPresent(
				locator1 = "PageEditor#COLLECTION_FILTER_SOURCE_LABEL_VISIBLE",
				sourceLabel = "T-shirt Color");
		}

		task ("Select the Green in the second Collection Filter") {
			Page.selectFilterInCollectionFilter(
				columnNumber = "2",
				filterName = "Green",
				selectedName = "Green",
				title = "T-shirt Color");
		}

		task ("View only the T-shirt 1 and T-shirt 2 shown in Collection Display") {
			var n = "1";

			for (var title : list "T-shirt 2,T-shirt 1") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Navigate to page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Collection Page Name",
				siteName = "Test Site Name");
		}

		task ("View the source label of the second Collection Filter is T-shirt Color") {
			AssertElementPresent(
				locator1 = "PageEditor#COLLECTION_FILTER_SOURCE_LABEL_VISIBLE",
				sourceLabel = "T-shirt Color");
		}

		task ("Select the Green in the second Collection Filter") {
			Page.selectFilterInCollectionFilter(
				columnNumber = "2",
				filterName = "Green",
				selectedName = "Green",
				title = "T-shirt Color");
		}

		task ("View only the T-shirt 1 and T-shirt 2 shown in Collection Display") {
			var n = "1";

			for (var title : list "T-shirt 2,T-shirt 1") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}

		task ("View the source label of the first Collection Filter is Size") {
			AssertElementPresent(
				locator1 = "PageEditor#COLLECTION_FILTER_SOURCE_LABEL_VISIBLE",
				sourceLabel = "Size");
		}

		task ("Select the Large and Small in the first Collection Filter") {
			Page.selectFilterInCollectionFilter(
				categoryNameList = "Large,Small",
				multipleSelection = "true",
				selectedName = "2 Selected",
				title = "Size");
		}

		task ("View only the T-shirt 1 shown in Collection Display") {
			AssertVisible(
				key_entryContent = "[normalize-space(text())='T-shirt 1']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");
		}
	}

	@description = "This is a test for LPS-113926 and LPS-137722. View no results found when no matched collection items in Collection Display."
	@priority = "4"
	test ViewNoResultsFoundInCollectionDisplayWhenNoMatchedCollectionItems {
		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Type");
		}

		task ("Add 4 categories in Type vocabulary") {
			var suvId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "SUV",
				vocabularyName = "Type");

			var carId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Car",
				vocabularyName = "Type");

			for (var title : list "Trunk,Hatchback") {
				JSONCategory.addCategory(
					groupName = "Test Site Name",
					title = "${title}",
					vocabularyName = "Type");
			}
		}

		task ("Add the first web content with Car") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${carId}",
				content = "Tesla Model X",
				groupName = "Test Site Name",
				title = "Tesla Model X");
		}

		task ("Add the second web content with SUV") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${suvId}",
				content = "Tesla Model Y",
				groupName = "Test Site Name",
				title = "Tesla Model Y");
		}

		task ("Add the third web content with Car") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${carId}",
				content = "Tesla Model 3",
				groupName = "Test Site Name",
				title = "Tesla Model 3");
		}

		task ("Add a dynamic collection for All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add the first content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name 1",
				type = "content");
		}

		task ("Add a Collection Display fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name 1",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Add a Heading fragment into the Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Tesla Model 3",
				fragmentName = "Heading");
		}

		task ("Map the Title of collection items to editable field") {
			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Add a Collection Filter above the Collection Display") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Collection Filter",
				targetFragmentName = "Collection Display");
		}

		task ("Select the dynamic collection as Target Collection and select the Keywords as Filter") {
			PageEditor.editCollectionFilter(
				filter = "Keywords",
				fragmentName = "Collection Filter",
				targetCollection = "Dynamic Collection");
		}

		task ("View No Results Found in Collection Dipslay when search Toyota at Preview mode") {
			PageEditor.openPreviewMode();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			var n = "1";

			for (var title : list "Tesla Model 3,Tesla Model Y,Tesla Model X") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}

			Page.searchInCollectionFilter(searchTerm = "Toyota");

			AssertTextEquals.assertPartialText(
				index = "2",
				locator1 = "PageEditor#COLLECTION_DISPLAY_EMPTY_STATE",
				value1 = "No Results Found");

			AssertTextEquals.assertPartialText(
				index = "2",
				locator1 = "PageEditor#COLLECTION_DISPLAY_EMPTY_STATE",
				value1 = "Sorry, no results were found.");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("View No Results Found in Collection Dipslay when search BMW at View mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name 1",
				siteName = "Test Site Name");

			var n = "1";

			for (var title : list "Tesla Model 3,Tesla Model Y,Tesla Model X") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}

			Page.searchInCollectionFilter(searchTerm = "BMW");

			AssertTextEquals.assertPartialText(
				index = "2",
				locator1 = "PageEditor#COLLECTION_DISPLAY_EMPTY_STATE",
				value1 = "No Results Found");

			AssertTextEquals.assertPartialText(
				index = "2",
				locator1 = "PageEditor#COLLECTION_DISPLAY_EMPTY_STATE",
				value1 = "Sorry, no results were found.");
		}

		task ("Add the second content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name 2",
				type = "content");
		}

		task ("Add a Collection Display fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name 2",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection and Bordered List in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display",
				styleDisplay = "Bordered List");
		}

		task ("Add a Collection Filter above the Collection Display") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Collection Filter",
				targetFragmentName = "Collection Display");
		}

		task ("Select the dynamic collection as Target Collection and select the Category as Filter and Type as Source") {
			PageEditor.editCollectionFilter(
				categoryNameList = "SUV,Car,Trunk,Hatchback",
				filter = "Category",
				fragmentName = "Collection Filter",
				targetCollection = "Dynamic Collection",
				vocabularyName = "Type");
		}

		task ("View No Results Found in Collection Dipslay when select Trunk at Preview mode") {
			PageEditor.openPreviewMode();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			var n = "1";

			for (var title : list "Tesla Model 3,Tesla Model Y,Tesla Model X") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Trunk",
				multipleSelection = "true",
				selectedName = "Trunk",
				title = "Type");

			AssertTextEquals.assertPartialText(
				index = "2",
				locator1 = "PageEditor#COLLECTION_DISPLAY_EMPTY_STATE",
				value1 = "No Results Found");

			AssertTextEquals.assertPartialText(
				index = "2",
				locator1 = "PageEditor#COLLECTION_DISPLAY_EMPTY_STATE",
				value1 = "Sorry, no results were found.");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("View No Results Found in Collection Dipslay when select Hatchback at View mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name 2",
				siteName = "Test Site Name");

			var n = "1";

			for (var title : list "Tesla Model 3,Tesla Model Y,Tesla Model X") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Hatchback",
				multipleSelection = "true",
				selectedName = "Hatchback",
				title = "Type");

			AssertTextEquals.assertPartialText(
				index = "2",
				locator1 = "PageEditor#COLLECTION_DISPLAY_EMPTY_STATE",
				value1 = "No Results Found");

			AssertTextEquals.assertPartialText(
				index = "2",
				locator1 = "PageEditor#COLLECTION_DISPLAY_EMPTY_STATE",
				value1 = "Sorry, no results were found.");
		}
	}

}