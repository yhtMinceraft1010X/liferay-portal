@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Web Content Administration";
	property testray.main.component.name = "Web Content Administration";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-81244. The web content can be assigned to the default display page."
	@priority = "4"
	test AddWebContentAssignedToDefaultDisplayPage {
		task ("Add a display page template for Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add a Display Page Content fragment to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Display Page Content");

			PageEditor.clickPublish();
		}

		task ("Mark the display page as default") {
			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add an Asset Publisher widget to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Configure Asset Link Behavior to View in Context") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureAssetLinkBehaviorPG(assetLinkBehavior = "View in Context");
		}

		task ("View web content should be rendered in the default display page") {
			AssetPublisherPortlet.clickAssetTitle(assetTitle = "Web Content Title");

			ControlMenu.viewHeaderTitle(headerTitle = "Display Page Name");
		}
	}

	@description = "The user can add the web content with an expiration date."
	@priority = "3"
	@uitest
	test AddWebContentExpirationDate {
		task ("Add a web content with an experation date") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			WebContent.addExpirationDateCP(expirationDate = "01/02/3000");

			PortletEntry.publish();
		}

		task ("View expeiration date is shown") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.viewCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			WebContent.viewExpirationDateCP(expirationDate = "01/02/3000");
		}
	}

	@description = "This is a test for LPS-125458. The web content created via Headless should be assigned to the default display page."
	@priority = "4"
	test AddWebContentViaHeadlessAssignedToDefaultDisplayPage {
		task ("Add a web content folder") {
			JSONWebcontent.addFolder(
				folderName = "WC Folder Name",
				groupName = "Test Site Name");
		}

		task ("Add a display page template for Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add a Display Page Content fragment to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Display Page Content");

			PageEditor.clickPublish();
		}

		task ("Mark the display page as default") {
			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Add a web content based on Basic Web Content via Headless") {
			HeadlessWebcontent.addBasicWebContent(
				content = "Web Content Content",
				folderName = "WC Folder Name",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("View the web content assigned to the default display page") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentFolder.gotoCP(
				folderName = "WC Folder Name",
				webContentTitle = "WC Folder Name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Content");

			ControlMenu.viewHeaderTitle(headerTitle = "Display Page Name");

			AssertTextEquals(
				index = "1",
				locator1 = "WCD#WEB_CONTENT_CONTENT",
				value1 = "Web Content Content");
		}
	}

	@description = "The user cannot republish an expired web content."
	@priority = "4"
	test CannotRepublishExpiredWebContent {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Expire the web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.viewTitle(webContentTitle = "Web Content Title");

			WebContent.expireCP(webContentTitleList = "Web Content Title");
		}

		task ("View web content has expired status") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.viewStatus(
				webContentContent = "Web Content Content",
				webContentStatus = "Expired",
				webContentTitle = "Web Content Title");
		}

		task ("View cannot republish expired web content") {
			Button.clickPublish();

			Alert.viewRequestFailedToComplete();
		}

		task ("View expired message in Schedule panel") {
			ScrollWebElementIntoView(
				key_panel = "Schedule",
				locator1 = "Panel#PANEL");

			Alert.viewExpireContentFailedMessage();
		}
	}

	@description = "The user can compare the web content history in web content admin."
	@priority = "4"
	test CompareWebContentVersionsHistory {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Edit the web content to add a new version") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.viewTitle(webContentTitle = "Web Content Title");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editCP(
				webContentContentEdit = "Web Content Content Edit",
				webContentTitleEdit = "Web Content Title Edit");
		}

		task ("Compare versions of the web content") {
			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title Edit",
				menuItem = "View History");

			LexiconTable.clickEllipsisItem(
				item = "Compare to...",
				tableEntry = "Web Content Title");

			WebContent.viewCompareVersions(
				newContent = "Web Content Content Edit",
				version = "1.1");
		}
	}

	@description = "Delete a web content in web content admin."
	@priority = "5"
	test DeleteWebContent {
		property portal.acceptance = "true";

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Delete web content in web content admin and recycle bin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.viewTitle(webContentTitle = "Web Content Title");

			WebContent.deleteCP(
				siteURLKey = "test-site-name",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "The user can edit the global basic strucutre and template in web content admin."
	@priority = "4"
	test EditBasicWebContentStructureAndTemplate {
		task ("Edit basic strucutre in global site") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "global");

			NavItem.gotoStructures();

			WebContentNavigator.gotoEditStructure(structureName = "Basic Web Content");

			PortletEntry.inputName(name = "Basic Web Content Edit");

			DataEngine.addFields(fieldNameList = "Date,Image");

			WebContentStructures.saveCP();
		}

		task ("Edit basic template") {
			NavItem.gotoTemplates();

			WebContentTemplates.modifyTemplate(
				templateDescription = "Basic Web Content Description",
				templateFieldNames = "Date,Image",
				templateName = "Basic Web Content Edit",
				templatePreviousName = "Basic Web Content");
		}

		task ("View edited web content strucutre is shown") {
			NavItem.gotoStructures();

			WebContentNavigator.gotoEditStructure(structureName = "Basic Web Content Edit");

			for (var structureFieldName : list "Date,Image") {
				DataEngine.viewField(
					fieldFieldLabel = "${structureFieldName}",
					fieldName = "${structureFieldName}");
			}
		}

		task ("View edited web content template is shown") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "global");

			Navigator.gotoNavItem(navItem = "Templates");

			WebContentTemplates.viewCP(
				structureName = "Basic Web Content Edit",
				templateDescription = "Basic Web Content Description",
				templateName = "Basic Web Content Edit",
				templateScript = "Image.getData()");
		}
	}

	@description = "The user can edit a web content."
	@priority = "5"
	test EditWebContent {
		property portal.acceptance = "true";
		property testray.component.names = "Web Content Administration,WYSIWYG";

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Edit the web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editCP(
				webContentContentEdit = "Web Content Content Edit",
				webContentTitle = "Web Content Title",
				webContentTitleEdit = "Web Content Title Edit");
		}

		task ("View edited fields are shown") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title Edit");

			WebContent.viewCP(
				webContentContent = "Web Content Content Edit",
				webContentTitle = "Web Content Title Edit");
		}
	}

	@description = "This is a use case for LPS-141842. View Error message when editing web contents concurrently."
	@priority = "4"
	test EditWebContentConcurrently {
		property portal.acceptance = "true";

		task ("Add a Web Content article") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Go to the Edit Web Content mode in the first tab") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");
		}

		task ("Open a second tab and select it") {
			var baseURL = PropsUtil.get("portal.url");

			Open.openInTheNewTab(locator1 = "${baseURL}/group/test-site-name/~/control_panel/manage?p_p_id=com_liferay_journal_web_portlet_JournalPortlet");

			SelectWindow.selectPopUp(locator1 = "null");
		}

		task ("Edit Web Content article in the second tab") {
			WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

			WebContent.editCP(
				webContentContentEdit = "WC WebContent Content Edit",
				webContentTitle = "WC WebContent Title",
				webContentTitleEdit = "WC WebContent Title Edit");
		}

		task ("Select the first tab and edit Web Content Title") {
			SelectWindow.selectPopUp(locator1 = "null");

			WebContent.addCP(webContentTitle = "WC WebContent Title Edit");
		}

		task ("Publish Web Content and view the error message") {
			PortletEntry.publish();

			Alert.viewErrorMessage(errorMessage = "Another user has made changes since you started editing. Publish this article to save this version and overwrite the recent changes.");
		}
	}

	@description = "The user can edit a web content clicking in the article title in the serach result."
	@priority = "5"
	test EditWebContentViaArticleTitle {
		property portal.acceptance = "true";

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Search for the first web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.searchCP(webContentTitle = "Web Content Title");

			WebContent.viewTitle(webContentTitle = "Web Content Title");
		}

		task ("Edit the web content via Article Title") {
			LexiconEntry.gotoEntry(rowEntry = "Web Content Title");

			WebContent.editCP(
				webContentContentEdit = "Web Content Content Edit",
				webContentTitleEdit = "Web Content Title Edit");
		}

		task ("View edited fields are shown") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title Edit");

			WebContent.viewCP(
				webContentContent = "Web Content Content Edit",
				webContentTitle = "Web Content Title Edit");
		}
	}

	@description = "This is a use case for LPS-129096. The user can edit and save a web content after upload a featured image."
	@priority = "4"
	test EditWebContentWithUploadedFeaturedImage {
		task ("Add a web content with a featured image") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			WebContent.addFeaturedImageFromComputer(uploadFileName = "Document_1.jpg");

			PortletEntry.publish();
		}

		task ("Edit the web content") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editCP(
				webContentContentEdit = "Web Content Content Edit",
				webContentTitle = "Web Content Title",
				webContentTitleEdit = "Web Content Title Edit");
		}

		task ("View edited fields are shown") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title Edit");

			WebContent.viewCP(
				webContentContent = "Web Content Content Edit",
				webContentTitle = "Web Content Title Edit");
		}
	}

	@description = "The user can edit an expired web content."
	@priority = "3"
	test ExpireEditedWebContent {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Edit the web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.viewTitle(webContentTitle = "Web Content Title");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editCP(
				webContentContentEdit = "Web Content Content Edit",
				webContentTitle = "Web Content Title",
				webContentTitleEdit = "Web Content Title Edit");
		}

		task ("Expire the web content") {
			WebContent.expireCP(webContentTitleList = "Web Content Title Edit");
		}

		task ("View edited web content is expired") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title Edit");

			WebContent.viewStatus(
				webContentContent = "Web Content Content Edit",
				webContentStatus = "Expired",
				webContentTitle = "Web Content Title Edit");
		}
	}

	@description = "This is a use case for LPS-80208. The user can expire the latest web content version and view the previous."
	@priority = "4"
	test ExpireLastestVersion {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a new version editing the web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.viewTitle(webContentTitle = "Web Content Title");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editCP(
				webContentContentEdit = "Web Content Content Edit",
				webContentTitle = "Web Content Title",
				webContentTitleEdit = "Web Content Title Edit");
		}

		task ("Add a Web Content Display to widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");
		}

		task ("Select the web content in Web Content Display widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title Edit");

			IFrame.closeFrame();
		}

		task ("View latest version is shown") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content Edit",
				webContentTitle = "Web Content Title Edit");
		}

		task ("Expire the web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.expireSpecificVersionCP(webContentTitle = "Web Content Title Edit");
		}

		task ("View first version of web content is shown in Web Content Display widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "The user can expire multiple web contents in web content admin."
	@priority = "4"
	test ExpireMultipleWebContents {
		task ("Add three web contents") {
			for (var i : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content ${i}",
					groupName = "Test Site Name",
					title = "Web Content Title ${i}");
			}
		}

		task ("Expire all web contents in web content admin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.expireCP(webContentTitleList = "Web Content Title 1,Web Content Title 2,Web Content Title 3");
		}

		task ("View all web contents are expired") {
			for (var i : list "1,2,3") {
				WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

				WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title ${i}");

				WebContent.viewStatus(
					webContentContent = "Web Content Content ${i}",
					webContentStatus = "Expired",
					webContentTitle = "Web Content Title ${i}");
			}
		}
	}

	@description = "The user can expire a web content."
	@priority = "4"
	test ExpireWebContent {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Expire the web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.expireCP(webContentTitleList = "Web Content Title");
		}

		task ("View expired status is shown") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.viewStatus(
				webContentContent = "Web Content Content",
				webContentStatus = "Expired",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "Can move multiple web contents via icon to a new folder."
	@priority = "4"
	test MoveMultipleWebContentsToFolder {
		task ("Add a folder") {
			JSONWebcontent.addFolder(
				folderName = "WC Folder Name",
				groupName = "Test Site Name");
		}

		task ("Add three web contents") {
			for (var i : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = "Test Site Name",
					title = "Web Content Title ${i}");
			}
		}

		task ("Move web contents to new folder") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.moveMultipleToFolderCP(
				folderName = "WC Folder Name",
				rowEntryCheckList = "Web Content Title 1,Web Content Title 2,Web Content Title 3");
		}

		task ("View web contents are shown within folder") {
			WebContentFolder.gotoCP(
				folderName = "WC Folder Name",
				webContentTitle = "WC Folder Name");

			for (var webContentTitle : list "Web Content Title 1,Web Content Title 2,Web Content Title 3") {
				WebContent.viewTitle(webContentTitle = "${webContentTitle}");
			}
		}
	}

	@description = "Can move a single web content to a new folder via menu item."
	@priority = "5"
	test MoveWebContentToFolder {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Add a folder") {
			JSONWebcontent.addFolder(
				folderName = "WC Folder Name",
				groupName = "Test Site Name");
		}

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Move web content to folder") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.viewTitle(webContentTitle = "Web Content Title");

			WebContent.moveToFolderCP(
				folderName = "WC Folder Name",
				webContentTitle = "Web Content Title");
		}

		task ("View web content is shown within folder") {
			WebContentFolder.gotoCP(
				folderName = "WC Folder Name",
				webContentTitle = "WC Folder Name");

			WebContent.viewTitle(webContentTitle = "Web Content Title");
		}
	}

	@description = "This is a test for LPS-86845. A user can preview a draft or pending status Web Content article through the 'View Usages' screen."
	@priority = "5"
	test PreviewDraftWebContentInWCD {
		property portal.acceptance = "true";

		task ("Add a Web Content article") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a page with a Web Content Display widget and display the Web Content article in the Web Content Display widget") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");
		}

		task ("Edit the Web Content article and save it as draft") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editCP(
				saveAsDraft = "true",
				webContentContentEdit = "Web Content Content Edit",
				webContentTitle = "Web Content Title",
				webContentTitleEdit = "Web Content Title Edit");
		}

		task ("View the usages of the Web Content article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Usages");
		}

		task ("Preview the draft article within the context of the Web Content Display widget") {
			WebContentViewUsages.previewDraftInPage(page = "Test Page Name");
		}

		task ("Assert the user is taken to the Web Content Display Page and the draft version of the Web Content article displays in the Web Content Display widget") {
			SelectWindow.selectPopUp(locator1 = "null");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content Edit",
				webContentTitle = "Web Content Title Edit");
		}
	}

	@description = "This is a test for LPS-86845. A user can preview a draft or pending status Web Content article through the 'View Usages' screen."
	@priority = "5"
	test PreviewPendingWebContentInWCD {
		property portal.acceptance = "true";

		task ("Add a Web Content article") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a page with a Web Content Display widget and display the Web Content article in the Web Content Display widget") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");
		}

		task ("Configure Web Content Article workflow to Single Approver") {
			Workflow.openWorkflowAdmin(siteURLKey = "test-site-name");

			Workflow.configureWorkflow(
				workflowDefinition = "Single Approver",
				workflowResourceValue = "Web Content Article");
		}

		task ("Edit the Web Content article and submit it for publication") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.addCP(
				webContentContent = "Web Content Content Edit",
				webContentTitle = "Web Content Title Edit");

			Button.clickSubmitForPublication();

			Pause(locator1 = "2000");
		}

		task ("View the usages of the Web Content article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Usages");
		}

		task ("Preview the pending article within the context of the Web Content Display widget") {
			WebContentViewUsages.previewPendingInPage(page = "Test Page Name");
		}

		task ("Assert the user is taken to the Web Content Display Page and the pending version of the Web Content article displays in the Web Content Display widget") {
			SelectWindow.selectPopUp(locator1 = "null");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content Edit",
				webContentTitle = "Web Content Title Edit");
		}
	}

	@description = "This is a test for LPS-90066 and LPS-127728. A user can preview a scheduled web content via View Usage. The warning message should have link in Web Content Display."
	@priority = "5"
	test PreviewScheduledWebContentInWCD {
		property portal.acceptance = "true";

		task ("Add a web content article with a future display date") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			WebContent.editDisplayDate(
				displayDate = "01/01/2100",
				displayTime = "01:01 AM");

			PortletEntry.publish();
		}

		task ("Add a page with a Web Content Display widget and display the Web Content article in the Web Content Display widget") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("View the warning message shown in Web Content Display") {
			Alert.viewWarningSpecific(warningMessage = "Web Content Title is scheduled and will be displayed on 1/1/00 1:01 AM.");
		}

		task ("Access to web content editor via warning message link") {
			Click(
				key_warningMessage = "Web Content Title is scheduled and will be displayed on 1/1/00 1:01 AM.",
				locator1 = "Message#WARNING_SPECIFIC");

			WebContent.viewCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("View the usages of the Web Content article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title",
				menuItem = "View Usages");
		}

		task ("Preview the scheduled article within the context of the Web Content Display widget") {
			WebContentViewUsages.previewScheduledInPage(page = "Test Page Name");
		}

		task ("Assert the user is taken to the Web Content Display Page and the scheduled Web Content article displays in the Web Content Display widget") {
			SelectWindow.selectPopUp(locator1 = "null");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "The user can publish a draft web content in web content admin."
	@priority = "4"
	test PublishDraftWebContent {
		task ("Add a draft web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title",
				workflowAction = "DRAFT");
		}

		task ("View draf web content is shown") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoViewStatus(
				webContentStatus = "DRAFT",
				webContentTitle = "Web Content Title");

			WebContent.viewStatus(
				webContentContent = "Web Content Content",
				webContentStatus = "Draft",
				webContentTitle = "Web Content Title");
		}

		task ("Publish the web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("View approved status in the web content") {
			WebContent.viewApprovedStatus(webContentTitle = "Web Content Title");
		}
	}

	@description = "The user can search for a specific web content in web content admin."
	@priority = "5"
	test SearchWebContent {
		property portal.acceptance = "true";

		task ("Add two web contents") {
			for (var i : list "1,2") {
				JSONWebcontent.addWebContent(
					content = "Web${i} Content${i} Content${i}",
					groupName = "Test Site Name",
					title = "Web${i} Content${i} Title${i}");
			}
		}

		task ("View web contents are shown") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			for (var i : list "1,2") {
				WebContent.viewTitle(webContentTitle = "Web${i} Content${i} Title${i}");
			}
		}

		task ("Search for the first web content") {
			WebContent.searchCP(webContentTitle = "Web1 Content1 Title1");

			AssertTextNotPresent(
				key_webContentTitle = "Web2 Content2 Title2",
				locator1 = "WC#ENTRY_LIST_TITLE",
				value1 = "Web2 Content2 Title2");
		}

		task ("Search for an invalid title") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.searchNoResultsCP(
				searchQuery = "Web3 Content3 Title3",
				webContentTitle = "Web2 Content2 Title2");
		}
	}

	@description = "This is a use case for LPS-98669. The user could select the 12th page in Link to Page field."
	@priority = "4"
	test SelectThe12thPageInLinkToPage {
		task ("Add 12 pages") {
			for (var pageName : list "P1,P2,P3,P4,P5,P6,P7,P8,P9,P10,P11,P12") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "${pageName}");
			}
		}

		task ("Add a web content structure with a Link to Page field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Link to Page",
				fieldName = "Link to Page");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateFieldNames = "Link to Page",
				templateName = "WC Template Name");
		}

		task ("Select the 12th page in Link to Page field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentLinkToPage = "P12",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("View the P12 shown in Link to Page field") {
			WebContent.viewWithStructureCP(
				webContentLinkToPage = "P12",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "This is a test for LPS-141766. The user could view associated display page from copy of web content."
	@priority = "4"
	test ViewAssociatedDisplayPageFromCopyOfWebContent {
		task ("Add two Public Pages and Add an Asset Publisher to each page") {
			for (var i : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${i}");

				JSONLayout.addWidgetToPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${i}",
					widgetName = "Asset Publisher");
			}
		}

		task ("Set Asset Publisher in the second page as the Default Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name 2",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureDisplaySettings(displaySettings = "Set as the Default Asset Publisher for This Page");
		}

		task ("Add the first web content and select the display page template in web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent 1");

			WebContent.editDisplayPage(
				pageName = "Test Page Name 2",
				pageType = "Pages");

			PortletEntry.publish();
		}

		task ("Copy the Web Content") {
			WebContentNavigator.gotoEntryMenuItem(
				entry = "WC WebContent 1",
				menuItem = "Copy");
		}

		task ("Add the second web content and select the display page template in web content") {
			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent 2");

			WebContent.editDisplayPage(
				pageName = "Test Page Name 2",
				pageType = "Pages");

			PortletEntry.publish();
		}

		task ("View the friendly URL shown in address") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name 1",
				siteName = "Test Site Name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "WC WebContent 1 Duplicate 2");

			AssertLocation.assertPartialLocation(value1 = "web/test-site-name/-/wc-webcontent-1-duplicate-2");
		}
	}

	@description = "This is a use case for LPS-80445. View the categorization settings after delete the category of web content."
	@priority = "5"
	test ViewCategorizationSettingsAfterDeleteCategoryOfWebContent {
		property portal.acceptance = "true";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			var categoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content with the category") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryId}",
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Delete the vocabulary") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.deleteByMenuCP(vocabularyName = "Vocabulary Name");
		}

		task ("View the categorization settings") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			Panel.expandPanel(panel = "Categorization");

			AssertElementNotPresent(locator1 = "AssetCategorization#VOCABULARY");

			AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");
		}
	}

	@description = "The content cannot be lost after try to publish a web content without title."
	@priority = "4"
	test ViewContentNotLostWithBlankTitle {
		task ("View cannot add a web content without title") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addNullCP(webContentContent = "Web Content Content");
		}

		task ("View content is still shown") {
			WaitForElementPresent(
				key_fieldLabel = "content",
				locator1 = "CKEditor#BODY_FIELD_IFRAME_WEB_CONTENT_ARTICLE");

			SelectFrame.selectFrameNoLoading(
				key_fieldLabel = "content",
				locator1 = "CKEditor#BODY_FIELD_IFRAME_WEB_CONTENT_ARTICLE");

			AssertTextEquals(
				locator1 = "CKEditor#BODY",
				value1 = "Web Content Content");
		}
	}

	@description = "This is a use case for LPS-138504. Assert display page is still selected after adding a web content without adding required category."
	@priority = "4"
	test ViewDisplayPageAfterAddingWebContentWithoutAddingRequiredCategory {
		property testray.component.names = "Asset Publisher";

		task ("Add a widget page and add Asset Publisher in it") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Set Asset Publisher in created page as the Default Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureDisplaySettings(displaySettings = "Set as the Default Asset Publisher for This Page");
		}

		task ("Add a vocabulary for Web Content Article") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addWithAssociatedAssetTypeCP(
				assetSubtype = "Basic Web Content",
				assetType = "Web Content Article",
				required = "true",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content and select the display page template in web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title");

			WebContent.editDisplayPage(
				pageName = "Test Page Name",
				pageType = "Pages");

			PortletEntry.publish();
		}

		task ("View publishing fails and no error in console") {
			AssertElementPresent(
				locator1 = "Message#ERROR",
				value1 = "Your request failed to complete.");
		}

		task ("View the selected display page is not saved") {
			WebContent.viewSelectedDisplayPageTemplateCP(
				displayPageTemplateName = "Pages > Test Page Name",
				displayPageTemplateType = "Specific");
		}
	}

	@description = "View web content title with cards, list and table display styles in web content admin."
	@priority = "3"
	test ViewDisplayStyles {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("View web content with all display styles") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.viewDisplayStyleCP(webContentTitle = "Web Content Title");
		}
	}

	@description = "This is a test for LPS-134566. View doAsUserId parameter not shown in URL field after add page link to text."
	@priority = "4"
	test ViewDoAsUserIdNotShownInURLFieldAfterAddPageLinkToText {
		task ("Add new user") {
			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");
		}

		task ("Assign Administrator Role to the user") {
			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Assign the user the site") {
			JSONUser.addUserToSite(
				groupName = "Test Site Name",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Add a page to the site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Impersonate the user") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.impersonateCP(userName = "userfn1");
		}

		task ("Add a Basic Web Content") {
			ApplicationsMenu.gotoSite(site = "Test Site Name");

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Web Content");

			WebContentNavigator.gotoAddCP();
		}

		task ("Add link to page and verify the URL is correct") {
			CKEditor.addTextWithLink(
				displayText = "Web Content Content",
				entryExternalURL = "/web/test-site-name/test-page-name",
				fieldLabel = "content",
				pageName = "Test Page Name");
		}
	}

	@description = "This is a test for LPS-145292. The user could view new icons on dropdown menu of web content admin."
	@priority = "4"
	test ViewDropdownMenuIconsInWebContentAdmin {
		task ("Given a Web Content creator has a new web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("When the Web Content creator opens the dropdown menu of management toolbar after selecting the new web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			ManagementBar.clickSelectAllCheckbox();

			Click(locator1 = "ManagementBar#MORE_ACTIONS_ELLIPSIS");
		}

		task ("Then the Web Content creator can see the new icons on the dropdown menu") {
			DropdownMenuItem.viewIcon(iconList = "time,move-folder,trash");
		}

		task ("When the Web Content creator opens the dropdown menu of web content") {
			LexiconEntry.openEntryMenu(rowEntry = "Web Content Title");
		}

		task ("Then the Web Content creator can see the new icons on the dropdown menu") {
			DropdownMenuItem.viewIcon(iconList = "pencil,view,automatic-translate,time,bell-on,date-time,list-ul,copy,upload,download,move-folder,password-policies,trash");
		}

		task ("When the Web Content creator opens the dropdown menu of given version on View History page") {
			MenuItem.click(menuItem = "View History");

			LexiconEntry.openEntryMenu(rowEntry = "Web Content Title");
		}

		task ("Then the Web Content creator can see the new icons on the dropdown menu") {
			DropdownMenuItem.viewIcon(iconList = "view,time,copy,trash");
		}

		task ("When the Web Content creator opens the dropdown menu of management toolbar after selecting all versions") {
			ManagementBar.clickSelectAllCheckbox();

			Click(locator1 = "ManagementBar#MORE_ACTIONS_ELLIPSIS");
		}

		task ("Then the Web Content creator can see the new icons on the dropdown menu") {
			DropdownMenuItem.viewIcon(iconList = "time,trash");
		}

		task ("Given a Web Content creator has a new web content structure") {
			WebContentStructures.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("When the Web Content creator opens the dropdown menu of management toolbar after selecting new structure") {
			ManagementBar.clickSelectAllCheckbox();

			Click(locator1 = "ManagementBar#MORE_ACTIONS_ELLIPSIS");
		}

		task ("Then the Web Content creator can see the new icon on the dropdown menu") {
			DropdownMenuItem.viewIcon(iconList = "trash");
		}

		task ("When the Web Content creator opens the dropdown menu of new strucure") {
			LexiconEntry.openEntryMenu(rowEntry = "WC Structure Name");
		}

		task ("Then the Web Content creator can see the new icons on the dropdown menu") {
			DropdownMenuItem.viewIcon(iconList = "pencil,copy,upload,password-policies,trash");
		}

		task ("Given a Web Content creator has a new web content template") {
			WebContentTemplates.openWebContentTemplatesAdmin(siteURLKey = "test-site-name");

			WebContentTemplates.addCP(templateName = "WC Template Name");
		}

		task ("When the Web Content creator opens the dropdown menu of management toolbar after selecting new template") {
			ManagementBar.clickSelectAllCheckbox();

			Click(locator1 = "ManagementBar#MORE_ACTIONS_ELLIPSIS");
		}

		task ("Then the Web Content creator can see the new icon on the dropdown menu") {
			DropdownMenuItem.viewIcon(iconList = "trash");
		}

		task ("When the Web Content creator opens the dropdown menu of new template") {
			Click.waitForMenuToggleJSClick(
				key_card = "WC Template Name",
				locator1 = "Card#CARD_ELLIPSIS");
		}

		task ("Then the Web Content creator can see the new icons on the dropdown menu") {
			DropdownMenuItem.viewIcon(iconList = "pencil,copy,password-policies,trash");
		}
	}

	@description = "The user can add multiple categories wihtin web content."
	@priority = "4"
	@uitest
	test ViewMultipleCategoriesInWebContentEditor {
		property testray.component.names = "Categories,Web Content Administration";

		task ("Add five categories") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");

			for (var i : list "1,2,3,4,5") {
				JSONCategory.addCategory(
					groupName = "Test Site Name",
					title = "Category Name ${i}",
					vocabularyName = "Vocabulary Name");
			}
		}

		task ("Add a web content with five categories") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addWithMultipleCategories(
				categoryNameList = "Category Name 1,Category Name 2,Category Name 3,Category Name 4,Category Name 5",
				vocabularyName = "Vocabulary Name",
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("View categories are shown") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.viewCategorizationCategoryCP(categoryNameList = "Category Name 1,Category Name 2,Category Name 3,Category Name 4,Category Name 5");
		}
	}

	@description = "This is a use case for LPS-103344. View the same name categorization of web content."
	@priority = "4"
	test ViewMultipleCategoriesWithSameNameInWebContentEditor {
		task ("Add two categories") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");

			for (var i : list "1,2") {
				JSONCategory.addCategory(
					groupName = "Test Site Name",
					title = "Category Name ${i}",
					vocabularyName = "Vocabulary Name");
			}
		}

		task ("Add two subcategories with the same name in different categories") {
			var subcategoryId = JSONCategory.addSubcategory(
				groupName = "Test Site Name",
				parentCategoryName = "Category Name 1",
				title = "Subcategory Name",
				vocabularyName = "Vocabulary Name");

			var subcategoryId2 = JSONCategory.addSubcategory(
				groupName = "Test Site Name",
				parentCategoryName = "Category Name 2",
				title = "Subcategory Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content with both subcategories") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${subcategoryId},${subcategoryId2}",
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("View categories are shown in web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.viewCategorizationCategoryCP(categoryNameList = "Subcategory Name,Subcategory Name");
		}
	}

	@description = "View available vocabularies within a web content."
	@priority = "4"
	test ViewMultipleVocabulariesInWebContentEditor {
		property testray.component.names = "Categories,Web Content Administration";

		task ("Add five vocabularies with one category in each one") {
			for (var i : list "1,2,3,4,5") {
				JSONCategory.addVocabulary(
					groupName = "Test Site Name",
					title = "Vocabulary Name ${i}");

				JSONCategory.addCategory(
					groupName = "Test Site Name",
					title = "Category Name",
					vocabularyName = "Vocabulary Name ${i}");
			}
		}

		task ("View vocabularies are shown within web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(webContentTitle = "Web Content Title");

			WebContent.viewCategorizationVocabularyCP(vocabularyNameList = "Vocabulary Name 1,Vocabulary Name 2,Vocabulary Name 3,Vocabulary Name 4,Vocabulary Name 5");
		}
	}

	@description = "This is a use case for LPS-140253. View no private page in web content."
	@priority = "4"
	test ViewNoPrivatePageInWebContent {
		task ("Add a content page and add Asset Publisher in it") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addWidget(portletName = "Asset Publisher");
		}

		task ("Set Asset Publisher in created page as the Default Asset Publisher") {
			AssetPublisherPortlet.configureDisplaySettings(displaySettings = "Set as the Default Asset Publisher for This Page");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Add a web content and select the display page template in web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title");

			WebContent.editDisplayPage(
				pageName = "Content Page Name",
				pageType = "Pages");
		}

		task ("Assert no public pages displayed in ckeditor link > Broswer Server") {
			SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME_2");

			Click(locator1 = "CKEditor#BODY");

			RobotType.robotTypeShortcut(locator1 = "Ctrl + k");

			SelectFrameTop();

			Click(
				key_text = "Browse Server",
				locator1 = "Link#ANY");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Navigator.viewNoNavTab(navTab = "Public Pages");

			Navigator.gotoNavTab(navTab = "Pages");

			Portlet.expandTree();

			AssertClick.assertPartialTextClickAt(
				key_nodeName = "Content Page Name",
				locator1 = "Treeview#NODE_UNSELECTED",
				value1 = "Content Page Name");

			Click(locator1 = "CKEditor#OK_BUTTON");

			SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME_2");

			AssertTextEquals(
				key_text = "/web/test-site-name/content-page-name",
				locator1 = "Link#ANY",
				value1 = "/web/test-site-name/content-page-name");
		}
	}

	@description = "This is a test for LPS-88500. At any given time, a user can view all the places a web content article is displayed through a Web Content Display widget or an Asset Publisher widget with manual selection."
	@priority = "5"
	test ViewWebContentArticleUsages {
		property portal.acceptance = "true";

		task ("Add a Web Content article") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Add a page with a Web Content Display widget and display the Web Content article in the Web Content Display widget") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Web Content Display Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Web Content Display Page",
				widgetName = "Web Content Display");

			Navigator.gotoSitePage(
				pageName = "Web Content Display Page",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");
		}

		task ("Add a page with an Asset Publisher widget and display the Web Content article in the Asset Publisher Widget") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Asset Publisher Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Asset Publisher Page",
				widgetName = "Asset Publisher");

			Navigator.gotoSitePage(
				pageName = "Asset Publisher Page",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureManualAssetSelectionPG(
				assetTitle = "WC WebContent Title",
				assetType = "Basic Web Content");
		}

		task ("Add a page with Web Content Display and Asset Publisher widgets and display the Web Content article in both widgets") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Web Content Display and Asset Publisher Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Web Content Display and Asset Publisher Page",
				widgetName = "Web Content Display");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Web Content Display and Asset Publisher Page",
				widgetName = "Asset Publisher");

			Navigator.gotoSitePage(
				pageName = "Web Content Display and Asset Publisher Page",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

			IFrame.closeFrame();

			AssetPublisherPortlet.configureManualAssetSelectionPG(
				assetTitle = "WC WebContent Title",
				assetType = "Basic Web Content");
		}

		task ("Add a page with Web Content Display and Asset Publisher widgets but do not display the Web Content article in either of those widgets") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Unused Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Unused Page",
				widgetName = "Web Content Display");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Unused Page",
				widgetName = "Asset Publisher");

			Navigator.gotoSitePage(
				pageName = "Unused Page",
				siteName = "Test Site Name");
		}

		task ("View the usages of the Web Content article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "WC WebContent Title",
				menuItem = "View Usages");
		}

		task ("Assert the usage on the page with the Web Content Display widget appears in the list") {
			AssertTextEquals(
				locator1 = "//tr[1]/td[1]",
				value1 = "Web Content Display Page");

			AssertTextEquals(
				locator1 = "//tr[1]/td[2]",
				value1 = "Page");

			AssertTextEquals(
				locator1 = "//tr[1]/td[3]",
				value1 = "Web Content Display Widget");
		}

		task ("Assert the usage on the page with the Asset Publisher widget appears in the list") {
			AssertTextEquals(
				locator1 = "//tr[2]/td[1]",
				value1 = "Asset Publisher Page");

			AssertTextEquals(
				locator1 = "//tr[2]/td[2]",
				value1 = "Page");

			AssertTextEquals(
				locator1 = "//tr[2]/td[3]",
				value1 = "Asset Publisher Widget");
		}

		task ("Assert the two usages on the page with the Web Content Display and Asset Publisher widgets appear in the list") {
			AssertTextEquals(
				locator1 = "//tr[3]/td[1]",
				value1 = "Web Content Display and Asset Publisher Page");

			AssertTextEquals(
				locator1 = "//tr[3]/td[2]",
				value1 = "Page");

			AssertTextEquals(
				locator1 = "//tr[3]/td[3]",
				value1 = "Web Content Display Widget");

			AssertTextEquals(
				locator1 = "//tr[4]/td[1]",
				value1 = "Web Content Display and Asset Publisher Page");

			AssertTextEquals(
				locator1 = "//tr[4]/td[2]",
				value1 = "Page");

			AssertTextEquals(
				locator1 = "//tr[4]/td[3]",
				value1 = "Asset Publisher Widget");
		}

		task ("Assert there is no usage on the unused page") {
			AssertElementNotPresent(locator1 = "//tr[contains(.,'Unused Page')]");
		}

		task ("Remove the Web Content Display and Asset Publisher widgets from the page that has both widgets") {
			Navigator.gotoSitePage(
				pageName = "Web Content Display and Asset Publisher Page",
				siteName = "Test Site Name");

			Portlet.deletePG(portletName = "Web Content Display");

			Portlet.deletePG(portletName = "Asset Publisher");
		}

		task ("View the usages of the Web Content article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "WC WebContent Title",
				menuItem = "View Usages");
		}

		task ("Assert the usage on the page with the Web Content Display widget appears in the list") {
			AssertTextEquals(
				locator1 = "//tr[1]/td[1]",
				value1 = "Web Content Display Page");

			AssertTextEquals(
				locator1 = "//tr[1]/td[2]",
				value1 = "Page");

			AssertTextEquals(
				locator1 = "//tr[1]/td[3]",
				value1 = "Web Content Display Widget");
		}

		task ("Assert the usage on the page with the Asset Publisher widget appears in the list") {
			AssertTextEquals(
				locator1 = "//tr[2]/td[1]",
				value1 = "Asset Publisher Page");

			AssertTextEquals(
				locator1 = "//tr[2]/td[2]",
				value1 = "Page");

			AssertTextEquals(
				locator1 = "//tr[2]/td[3]",
				value1 = "Asset Publisher Widget");
		}

		task ("Assert there is no usage on the page that originally had both the Web Content Display and Asset Publisher widgets") {
			AssertElementNotPresent(locator1 = "//tr[contains(.,'Web Content Display and Asset Publisher Page')]");
		}

		task ("Assert there is no usage on the unused page") {
			AssertElementNotPresent(locator1 = "//tr[contains(.,'Unused Page')]");
		}
	}

}