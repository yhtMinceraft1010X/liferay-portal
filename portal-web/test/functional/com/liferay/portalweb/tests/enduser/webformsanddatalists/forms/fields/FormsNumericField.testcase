@component-name = "portal-web-forms-and-data-lists"
definition {

	property custom.properties = "minifier.enabled=true";
	property osgi.module.configuration.file.names = "com.liferay.frontend.js.loader.modules.extender.internal.configuration.Details.config";
	property osgi.module.configurations = "waitTimeout=&quot;15&quot;";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Forms";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Forms");

			FormsAdmin.teardownForms();

			PagesAdmin.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-75457, LPS-80246 and LPS-75393. Automate Numeric field with Decimal configurations."
	@priority = "4"
	test AutomateNumericFieldWithDecimalConfigurations {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "FormsNumericField#AutomateNumericFieldWithDecimalConfigurations";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		FormFields.selectRadioOption(
			fieldName = "",
			radioOption = "Integer");

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "123.123");

		FormFields.viewTextValue(
			fieldName = "Numeric",
			fieldValue = "123123");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "111111111111111111111");

		FormFields.viewTextValue(
			fieldName = "Numeric",
			fieldValue = "111111111111111111111");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		FormViewBuilder.clickFieldLabel(fieldLabel = "Numeric");

		FormFields.selectRadioOption(
			fieldName = "",
			radioOption = "Decimal");

		Form.addTranslation(localizedLanguage = "Portuguese (Brazil)");

		Form.save();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "123.123");

		FormFields.viewTextValue(
			fieldName = "Numeric",
			fieldValue = "123.123");

		FormViewBuilder.changeAppLanguageTo(changeAppLanguageTo = "en-US");

		FormViewBuilder.changeAppLanguageTo(changeAppLanguageTo = "portuguÃªs-Brasil");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "1,1");

		FormPortlet.submitSuccessfully();
	}

	@description = "Verify that a Numeric Field can be created"
	@priority = "5"
	test CanBeCreated {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		Form.save();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		FormFields.viewDateLabel(
			fieldLabel = "Numeric",
			fieldName = "Numeric");
	}

	@description = "Verify that a Numeric Field can be deleted"
	@priority = "5"
	test CanBeDeleted {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.addTextField(fieldPositionNumber = "0");

		FormViewBuilder.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric",
			formPageNumber = "0");

		FormViewBuilder.closeSidebar();

		FormsAdminNavigator.gotoDeleteField(fieldName = "Numeric");

		FormFields.viewDeletedFieldLabel(fieldName = "Numeric");

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		FormFields.viewDeletedFieldLabel(fieldName = "Numeric");
	}

	@description = "Verify that a Numeric Field can be duplicated"
	@priority = "5"
	test CanBeDuplicated {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		FormViewBuilder.setPlaceholder(fieldValue = "Placeholder Text Test");

		FormViewBuilder.editText(
			fieldName = "Help Text",
			fieldValue = "Help Text Test");

		FormFields.duplicateField();

		FormViewBuilder.validateFieldLabel(fieldLabel = "Numeric");

		FormViewBuilder.validateFieldLabel(fieldLabel = "Copy of Numeric");

		FormViewBuilder.assertPlaceholderTextFormField(
			key_fieldLabel = "Numeric",
			placeHolder = "Placeholder Text Test");

		FormViewBuilder.assertPlaceholderTextFormField(
			key_fieldLabel = "Copy of Numeric",
			placeHolder = "Placeholder Text Test");

		FormViewBuilder.assertHelpTextPresent(
			fieldName = "Numeric",
			fieldValue = "Help Text Test");

		FormViewBuilder.assertHelpTextPresent(
			fieldName = "Copy of Numeric",
			fieldValue = "Help Text Test");
	}

	@description = "Verify that a Numeric Field can be edited"
	@priority = "5"
	test CanBeEdited {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		Click(
			key_name = "Numeric",
			locator1 = "FormFields#FIELD_TARGET_LABEL");

		Form.editFieldLabelMetal(fieldValue = "Test Numeric");

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		FormViewBuilder.validateFieldLabel(fieldLabel = "Test Numeric");

		FormViewBuilder.validateNoFieldLabel(fieldLabel = "Numeric");
	}

	@description = "Verify that a Numeric Field can be required"
	@priority = "5"
	test CanBeRequired {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		FormFields.enableSwitch(fieldName = "Required Field");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormViewBuilder.validateFieldLabelRequired(fieldLabel = "Numeric");

		FormPortlet.waitFormRenderer(text = "Submit");

		FormPortlet.submitWithValidationError(validationErrorMessage = "This field is required.");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "123");

		FormPortlet.submitSuccessfully();
	}

	@description = "Verify that a Numeric Field can accept decimals when the numeric type set to Decimal"
	@priority = "5"
	test CanBeSetToAcceptDecimals {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		FormFields.selectRadioOption(
			fieldName = "",
			radioOption = "Decimal");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "123.123");

		FormFields.viewTextValue(
			fieldName = "Numeric",
			fieldValue = "123.123");

		FormPortlet.submitSuccessfullyAndViewSuccessPage();
	}

	@description = "Verify that a Numeric Field can be set to repeatable"
	@priority = "5"
	test CanBeSetToRepeatable {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Repeatable");

		FormFields.viewFieldRepeatableButton(
			fieldName = "Numeric",
			key_repeatableFieldsNumber = "1");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.addRepeatableField(
			key_fieldName = "Numeric",
			key_repeatableFieldNumber = "1");

		FormFields.viewFieldRepeatableButton(
			fieldName = "Numeric",
			key_repeatableFieldsNumber = "1,2");

		for (var number : list "1,2") {
			FormFields.editRepeatingText(
				fieldName = "Numeric",
				fieldValue = "123",
				fieldValueRepeat = "123");
		}

		FormPortlet.submitSuccessfullyAndViewSuccessPage();
	}

	@description = "Verify that a Form can be submitted with the Numeric Field"
	@priority = "5"
	test CanBeSubmitted {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "123");

		FormPortlet.submitSuccessfully();

		FormPortlet.viewSuccessPage(
			successPageDescription = "Your information was successfully received. Thank you for filling out the form.",
			successPageTitle = "Thank you.");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdminNavigator.gotoView();

		FormsAdmin.viewTextEntry(
			fieldLabel = "Numeric",
			fieldName = "Numeric",
			fieldValue = "123");
	}

	@description = "Verify that the "Is Equal To" option can be used to validate a Numeric Field"
	@priority = "5"
	test CanBeValidatedUsingIsEqualTo {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		Form.gotoAdvancedTab();

		FormViewBuilder.checkSwitch(propertyName = "Validation");

		FormFields.editValidationTargetArgument(
			validationArgument = "Is Equal To",
			validationErrorMessage = "Test Error",
			validationInput = "123");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "122");

		FormPortlet.viewValidationErrorMessage(validationErrorMessage = "Test Error");

		FormPortlet.submit();

		FormPortlet.viewValidationErrorMessage(validationErrorMessage = "Test Error");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "123");

		FormPortlet.waitForValidationErrorNotPresent(validationErrorMessage = "Test Error");

		FormPortlet.submitSuccessfullyAndViewSuccessPage();
	}

	@description = "Verify that the "Is Greater Than" option can be used to validate a Numeric Field"
	@priority = "5"
	test CanBeValidatedUsingIsGreaterThan {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		Form.gotoAdvancedTab();

		FormFields.enableCheckbox(fieldName = "Validation");

		FormFields.editValidationTargetArgument(
			validationArgument = "Is Greater Than",
			validationErrorMessage = "Test Error",
			validationInput = "122");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "121");

		FormFields.viewFieldValidationErrorMessage(
			fieldName = "Numeric",
			fieldValidationErrorMessage = "Test Error");

		FormPortlet.submitWithValidationError(validationErrorMessage = "Test Error");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "123");

		FormPortlet.waitForValidationErrorNotPresent(validationErrorMessage = "Test Error");

		FormPortlet.submitSuccessfullyAndViewSuccessPage();
	}

	@description = "Verify that the "Is Greater Than Or Equal To" option can be used to validate a Numeric Field"
	@priority = "5"
	test CanBeValidatedUsingIsGreaterThanOrEqualTo {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		Form.gotoAdvancedTab();

		FormFields.enableCheckbox(fieldName = "Validation");

		FormFields.editValidationTargetArgument(
			validationArgument = "Is Greater Than Or Equal To",
			validationErrorMessage = "Test Error",
			validationInput = "123");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "122");

		FormFields.viewFieldValidationErrorMessage(
			fieldName = "Numeric",
			fieldValidationErrorMessage = "Test Error");

		FormPortlet.submitWithValidationError(validationErrorMessage = "Test Error");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "123");

		FormPortlet.waitForValidationErrorNotPresent(validationErrorMessage = "Test Error");

		FormPortlet.submitSuccessfullyAndViewSuccessPage();
	}

	@description = "Verify that the "Is Less Than" option can be used to validate a Numeric Field"
	@priority = "5"
	test CanBeValidatedUsingIsLessThan {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		Form.gotoAdvancedTab();

		FormFields.enableCheckbox(fieldName = "Validation");

		FormFields.editValidationTargetArgument(
			validationArgument = "Is Less Than",
			validationErrorMessage = "Test Error",
			validationInput = "123");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "123");

		FormFields.viewFieldValidationErrorMessage(
			fieldName = "Numeric",
			fieldValidationErrorMessage = "Test Error");

		FormPortlet.submitWithValidationError(validationErrorMessage = "Test Error");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "122");

		FormPortlet.waitForValidationErrorNotPresent(validationErrorMessage = "Test Error");

		FormPortlet.submitSuccessfullyAndViewSuccessPage();
	}

	@description = "Verify that the "Is Less Than Or Equal To" option can be used to validate a Numeric Field"
	@priority = "5"
	test CanBeValidatedUsingIsLessThanOrEqualTo {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		Form.gotoAdvancedTab();

		FormFields.enableCheckbox(fieldName = "Validation");

		FormFields.editValidationTargetArgument(
			validationArgument = "Is Less Than Or Equal To",
			validationErrorMessage = "Test Error",
			validationInput = "123");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "124");

		FormFields.viewFieldValidationErrorMessage(
			fieldName = "Numeric",
			fieldValidationErrorMessage = "Test Error");

		FormPortlet.submitWithValidationError(validationErrorMessage = "Test Error");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "123");

		FormPortlet.waitForValidationErrorNotPresent(validationErrorMessage = "Test Error");

		FormPortlet.submitSuccessfullyAndViewSuccessPage();
	}

	@description = "Verify that the "Is Not Equal To" option can be used to validate a Numeric Field"
	@priority = "5"
	test CanBeValidatedUsingIsNotEqualTo {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		Form.gotoAdvancedTab();

		FormFields.enableCheckbox(fieldName = "Validation");

		FormFields.editValidationTargetArgument(
			validationArgument = "Is Not Equal To",
			validationErrorMessage = "Test Error",
			validationInput = "123");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "123");

		FormFields.viewFieldValidationErrorMessage(
			fieldName = "Numeric",
			fieldValidationErrorMessage = "Test Error");

		FormPortlet.submitWithValidationError(validationErrorMessage = "Test Error");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "122");

		FormPortlet.waitForValidationErrorNotPresent(validationErrorMessage = "Test Error");

		FormPortlet.submitSuccessfullyAndViewSuccessPage();
	}

	@description = "Verify that changes to a Field can be canceled"
	@ignore = "Test Stub"
	@priority = "4"
	test ChangesCanBeCanceled {
		property portal.acceptance = "false";

		// TODO LPS-132839 ChangesCanBeCanceled pending implementation

	}

	@description = "Verify that Validation options are reset after changing the Field Type from a Numeric Field to Text Field"
	@priority = "4"
	test ConfirmationWithDecimal {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		FormFields.selectRadioOption(
			fieldName = "",
			radioOption = "Decimal");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "requireConfirmation");

		FormFields.enableSwitch(fieldName = "Input Mask");

		ScrollBy(value1 = "0, 2000");

		FormFields.setInputMaskOnDecimal(decimalSeparator = "0,00");

		FormFields.editFieldPredefined(key_fieldReference = "1,2");

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "1");

		FormPortlet.viewValidationErrorMessage(validationErrorMessage = "The information does not match.");

		FormFields.editConfirmationFieldText(
			fieldName = "Numeric",
			fieldValue = "1,2");

		FormPortlet.viewValidationErrorMessage(validationErrorMessage = "The information does not match.");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "1,2");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Numeric",
			fieldValue = "1.2");
	}

	@description = "Verify that a Numeric Field does not accept decimals by default"
	@priority = "5"
	test DoesNotAcceptDecimalsByDefault {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		FormFields.selectRadioOption(
			fieldName = "",
			radioOption = "Integer");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "123.123");

		FormFields.viewTextValue(
			fieldName = "Numeric",
			fieldValue = "123123");
	}

	@description = "Verify that a help text can be added"
	@priority = "5"
	test HelpTextCanBeAdded {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		FormViewBuilder.setFieldHelpText(fieldLabel = "Numeric Help Text");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewFieldHelpText(
			fieldHelpText = "Numeric Help Text",
			fieldName = "Help Text");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "123");

		FormPortlet.submitSuccessfully();

		FormPortlet.viewSuccessPage(
			successPageDescription = "Your information was successfully received. Thank you for filling out the form.",
			successPageTitle = "Thank you.");
	}

	@description = "LPS-129411 - Verify that a field can be hidden"
	@priority = "5"
	test HiddenFieldCanBeEnabled {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Hide Field");

		Form.viewHiddenField(fieldLabel = "Numeric");

		for (var switchName : list "Show Label,Repeatable,Require Confirmation,Validation,Input Mask") {
			AssertElementPresent(
				key_switchOption = "${switchName}",
				locator1 = "FormFields#SWITCH_NOT_VISIBLE");
		}
	}

	@description = "LPS-129411 - Verify that hidden field is working on Forms Rules"
	@priority = "5"
	test HiddenFieldIWorkingOnRules {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		Form.editFieldLabelMetal(fieldValue = "Numeric 1");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Hide Field");

		Form.viewHiddenField(fieldLabel = "Numeric 1");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric",
			formPageNumber = "0");

		Form.editFieldLabelMetal(fieldValue = "Numeric 2");

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.selectConditionField(
			conditionField = "Numeric 2",
			conditionRowNumber = "1");

		FormRules.selectConditionOperator(
			conditionOperator = "Is Not Empty",
			conditionRowNumber = "1");

		FormRules.configureActionOptions(
			action = "Calculate",
			actionRowNumber = "1",
			actionTarget = "Numeric 1");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "2");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "+");

		FormRules.clickOnCalculatorNumbersKeyboard(buttonName = "2");

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormViewBuilder.editText(
			fieldName = "Numeric 2",
			fieldValue = "1");

		FormPortlet.submitSuccessfullyAndViewSuccessPage();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Numeric 1",
			fieldValue = "4");

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Numeric 2",
			fieldValue = "1");
	}

	@description = "LPS-130164 - Verify that the Input Mask can be enabled on decimals"
	@priority = "5"
	test InputMaskCanBeEnabledOnDecimal {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		FormFields.editNumericType(numericType = "Decimal");

		FormFields.viewOptionSelected(optionSelected = "double");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Input Mask");

		for (var default : list "Thousands Separator-None,Decimal Separator-0.0") {
			var key_fieldName = StringUtil.extractFirst("${default}", "-");
			var key_fieldValue = StringUtil.extractLast("${default}", "-");

			AssertElementPresent(locator1 = "FormFields#PREDEFINED_VALUE_AT_FORM_SELECT");
		}

		FormFields.viewDisabledSelectOption(
			fieldName = "Thousands Separator",
			optionValue = "1.000");

		MenuItem.click(menuItem = "1,000");

		FormFields.viewDisabledSelectOption(
			fieldName = "Decimal Separator",
			optionValue = "0,00");

		Type(
			locator1 = "FormFields#INPUT_MASK_PREFIX_OR_SUFFIX",
			value1 = "a");

		FormFields.viewOptionSelected(optionSelected = "prefix");

		FormFields.setInputMaskOnDecimal(prefix = "more than 10 characters");

		FormFields.viewWarningMessage(
			fieldName = "Prefix or Suffix",
			warningMessage = "The maximum length is 10 characters.");

		FormFields.setInputMaskOnDecimal(prefix = "123456789$");

		FormFields.viewOptionSelected(optionSelected = "prefix");

		FormFields.viewNumericInputMask(
			affixValue = "123456789$",
			inputMaskValue = "0.00");

		Type(
			locator1 = "FormFields#INPUT_MASK_PREFIX_OR_SUFFIX",
			value1 = "");

		AssertElementNotPresent(
			key_affixValue = "123456789$",
			locator1 = "FormFields#INPUT_MASK_PREFIX_OR_SUFFIX_VALUE");

		for (var radioOption : list "Prefix,Suffix") {
			AssertElementNotPresent(
				key_fieldName = "",
				key_radioOption = "${radioOption}",
				locator1 = "FormFields#RADIO_OPTION_LABEL");
		}
	}

	@description = "LPS-125861 - Verify that the Input Mask can be enabled on integers"
	@priority = "5"
	test InputMaskCanBeEnabledOnIntegers {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		FormFields.viewOptionSelected(optionSelected = "integer");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Input Mask");

		AssertElementPresent(locator1 = "FormFields#CHARACTER_OPTIONS_SHOW_MORE_BUTTON");

		Click(locator1 = "FormFields#CHARACTER_OPTIONS_SHOW_MORE_BUTTON");

		AssertElementPresent(locator1 = "FormFields#CHARACTER_OPTIONS_SHOW_LESS_BUTTON");

		FormFields.setInputMaskFormat(inputMaskFormat = "E.g +99 (99) 9999-9999");

		FormFields.viewNumericInputMask(inputMaskValue = "E.g +__ (__) ____-____");
	}

	@description = "LPS-130164 - Verify that the Input Mask can be enabled on decimals using prefix"
	@priority = "5"
	test InputMaskIsWorkingOnDecimalWithPrefix {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		FormFields.editNumericType(numericType = "Decimal");

		FormFields.viewOptionSelected(optionSelected = "double");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Input Mask");

		FormFields.setInputMaskOnDecimal(
			prefix = "ABC123@$&*",
			thousandsSeparator = "1 000");

		FormFields.viewNumericInputMask(
			affixValue = "ABC123@$&*",
			inputMaskValue = "0.00");

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewNumericInputMask(
			affixValue = "ABC123@$&*",
			inputMaskValue = "0.00");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "9999999");

		FormFields.viewNumericFieldValue(
			fieldName = "Numeric",
			rowNumber = "1",
			value = "9 999 999");

		FormPortlet.submitSuccessfullyAndViewSuccessPage();

		FormsAdmin.openFormsAdmin(siteURLKey = "guest");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdminNavigator.gotoView();

		FormFields.viewTextValue(
			fieldName = "Numeric",
			fieldValue = "9 999 999");

		FormFields.viewNumericInputMask(
			affixValue = "ABC123@$&*",
			inputMaskValue = "0.00");
	}

	@description = "LPS-130164 - Verify that the Input Mask can be enabled on decimals using suffix"
	@priority = "5"
	test InputMaskIsWorkingOnDecimalWithSuffix {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		FormFields.editNumericType(numericType = "Decimal");

		FormFields.viewOptionSelected(optionSelected = "double");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Input Mask");

		FormFields.setInputMaskOnDecimal(
			suffix = "ABC12 @$&*",
			thousandsSeparator = "1,000");

		FormFields.viewNumericInputMask(
			affixValue = "ABC12 @$&*",
			inputMaskValue = "0.00");

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewNumericInputMask(
			affixValue = "ABC12 @$&*",
			inputMaskValue = "0.00");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "9999999");

		FormFields.viewNumericFieldValue(
			fieldName = "Numeric",
			rowNumber = "1",
			value = "9,999,999");

		FormPortlet.submitSuccessfullyAndViewSuccessPage();

		FormsAdmin.openFormsAdmin(siteURLKey = "guest");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdminNavigator.gotoView();

		FormFields.viewTextValue(
			fieldName = "Numeric",
			fieldValue = "9,999,999");

		FormFields.viewNumericInputMask(
			affixValue = "ABC12 @$&*",
			inputMaskValue = "0.00");
	}

	@description = "LPS-130848 - Verify that the Input Mask can be applied on integers"
	@priority = "5"
	test InputMaskIsWorkingOnIntegers {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		FormFields.viewOptionSelected(optionSelected = "integer");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Input Mask");

		FormFields.setInputMaskFormat(inputMaskFormat = "E.g +99 (99) 9999-9999");

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewNumericInputMask(inputMaskValue = "E.g +__ (__) ____-____");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "123");

		FormPortlet.submitWithValidationError(validationErrorMessage = "Input format is not satisfied.");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "123412341234");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdminNavigator.gotoView();

		FormsAdmin.viewTextEntry(
			fieldLabel = "Numeric",
			fieldName = "Numeric",
			fieldValue = "E.g +12 (34) 1234-1234");
	}

	@description = "LRQA-70003 - Verify that input mask on decimal can be translated"
	@priority = "5"
	test InputMaskOnDecimalCanBeTranslated {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		FormFields.editNumericType(numericType = "Decimal");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Input Mask");

		ScrollBy(value1 = "0, 2000");

		FormFields.setInputMaskOnDecimal(
			decimalSeparator = "0,00",
			prefix = "ABC",
			thousandsSeparator = "1 000");

		FormFields.viewNumericInputMask(inputMaskValue = "0,00");

		Form.addTranslation(localizedLanguage = "Portuguese (Brazil)");

		ScrollBy(value1 = "0, 2000");

		FormFields.setInputMaskOnDecimal(
			decimalSeparator = "0.00",
			prefix = "123");

		FormFields.viewNumericInputMask(inputMaskValue = "0.00");

		Form.publishForm();

		FormsAdminNavigator.gotoPublishCopyURLLink();

		var publishedFormPublicURL = Form.getPublishedFormPublicURL(publishedFormPublicURL = "${publishedFormPublicURL}");

		Navigator.openSpecificURL(url = "${publishedFormPublicURL}");

		FormFields.viewNumericInputMask(inputMaskValue = "0,00");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "1000");

		FormPortlet.submitSuccessfully();

		Navigator.openSpecificURL(url = "${publishedFormPublicURL}");

		FormPortlet.changeLocale(locale = "portuguÃªs-Brasil");

		FormFields.viewNumericInputMask(inputMaskValue = "0.00");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "1000");

		FormPortlet.submitSuccessfully();
	}

	@description = "LRQA-70003 - Verify if the decimal input mask is working in the rules"
	@priority = "5"
	test InputMaskOnDecimalWorkingOnRules {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		Form.editFieldLabelMetal(fieldValue = "Numeric 1");

		FormFields.editNumericType(numericType = "Decimal");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Input Mask");

		FormFields.viewDisabledSelectOption(
			fieldName = "Thousands Separator",
			optionValue = "1.000");

		MenuItem.click(menuItem = "1,000");

		FormFields.viewDisabledSelectOption(
			fieldName = "Decimal Separator",
			optionValue = "0,00");

		Type(
			locator1 = "FormFields#INPUT_MASK_PREFIX_OR_SUFFIX",
			value1 = "a");

		FormFields.viewOptionSelected(optionSelected = "prefix");

		FormFields.setInputMaskOnDecimal(prefix = "123456789$");

		FormViewBuilder.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric");

		Form.editFieldLabelMetal(fieldValue = "Numeric 2");

		FormFields.editNumericType(numericType = "Decimal");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Input Mask");

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Numeric 1",
			conditionFieldValue = "1000",
			conditionOperator = "Is Equal To",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Show",
			actionRowNumber = "1",
			actionTarget = "Numeric 2");

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		Form.validateNoFieldLabel(fieldLabel = "Numeric 2");

		FormFields.viewNumericInputMask(inputMaskValue = "0.00");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "1000");

		FormFields.viewLabel(
			fieldLabel = "Numeric 2",
			fieldName = "Numeric 2");
	}

	@description = "Verify that input mask on integers can be translated"
	@priority = "5"
	test InputMaskOnIntegersCanBeTranslated {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		FormFields.viewOptionSelected(optionSelected = "integer");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Input Mask");

		FormFields.setInputMaskFormat(inputMaskFormat = "+9 (999) 999 9999");

		Form.addTranslation(localizedLanguage = "Portuguese (Brazil)");

		FormFields.viewNumericInputMask(inputMaskValue = "+_ (___) ___ ____");

		FormFields.setInputMaskFormat(inputMaskFormat = "+99 (99) 99999 9999");

		FormFields.viewNumericInputMask(inputMaskValue = "+__ (__) _____ ____");

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewNumericInputMask(inputMaskValue = "+_ (___) ___ ____");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "11111111111");

		FormPortlet.submitSuccessfully();

		Refresh();

		FormPortlet.changeLocale(locale = "portuguÃªs-Brasil");

		FormFields.viewNumericInputMask(inputMaskValue = "+__ (__) _____ ____");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "2222222222222");

		FormPortlet.submitSuccessfully();
	}

	@description = "Verify that input mask on integers working on rules"
	@priority = "5"
	test InputMaskOnIntegersWorkingOnRules {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		Form.editFieldLabelMetal(fieldValue = "Numeric 1");

		FormFields.viewOptionSelected(optionSelected = "integer");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Input Mask");

		FormFields.setInputMaskFormat(inputMaskFormat = "E.g +99 (99) 9999-9999");

		FormFields.viewNumericInputMask(inputMaskValue = "E.g +__ (__) ____-____");

		FormViewBuilder.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric");

		Form.editFieldLabelMetal(fieldValue = "Numeric 2");

		FormFields.viewOptionSelected(optionSelected = "integer");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Input Mask");

		FormFields.setInputMaskFormat(inputMaskFormat = "E.g +99 (99) 9999-9999");

		FormFields.viewNumericInputMask(inputMaskValue = "E.g +__ (__) ____-____");

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "Numeric 1",
			conditionFieldValue = "999999999999",
			conditionOperator = "Is Equal To",
			conditionRowNumber = "1",
			conditionValueType = "Value");

		FormRules.configureActionOptions(
			action = "Show",
			actionRowNumber = "1",
			actionTarget = "Numeric 2");

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		Form.validateNoFieldLabel(fieldLabel = "Numeric 2");

		FormFields.editText(
			fieldName = "Numeric",
			fieldValue = "999999999999");

		FormFields.viewLabel(
			fieldLabel = "Numeric 2",
			fieldName = "Numeric 2");
	}

	@description = "Verify that the Field Label can be edited"
	@priority = "5"
	test LabelCanBeEdited {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		Form.editFieldLabelMetal(fieldValue = "Test Numeric");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewLabel(
			fieldLabel = "Test Numeric",
			fieldName = "Test Numeric");
	}

	@description = "Verify that the Field Label can be hidden"
	@priority = "5"
	test LabelCanBeHidden {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		FormFields.viewFieldLabel(
			fieldName = "label",
			fieldValue = "Numeric");

		Form.gotoAdvancedTab();

		FormFields.disableSwitch(fieldName = "Show Label");

		FormFields.viewFieldLabelNotPresent(fieldLabel = "Numeric");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewFieldLabelNotPresent(fieldLabel = "Numeric");
	}

	@description = "Verify that a Numeric Field only accepts numbers"
	@priority = "5"
	test OnlyAcceptsNumbers {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormViewBuilder.editText(
			fieldName = "Numeric",
			fieldValue = "123abc");

		FormFields.viewTextValue(
			fieldName = "Numeric",
			fieldValue = "123");
	}

	@description = "Verify that a Placeholder Text can be set"
	@priority = "5"
	test PlaceholderTextCanBeSet {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		FormViewBuilder.setPlaceholder(fieldValue = "Numeric Placeholder Text");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		AssertElementPresent(
			key_fieldName = "Numeric",
			locator1 = "FormFields#TEXT_FIELD",
			value1 = "Numeric Placeholder Text");

		FormPortlet.submitSuccessfully();

		FormPortlet.viewSuccessPage(
			successPageDescription = "Your information was successfully received. Thank you for filling out the form.",
			successPageTitle = "Thank you.");
	}

	@description = "Verify that a Predefined Value can be set"
	@priority = "5"
	test PredefinedValueCanBeSet {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		FormFields.editFieldPredefined(key_fieldReference = "123");

		FormFields.viewTextValue(
			fieldName = "Numeric",
			fieldValue = "123");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewTextValue(
			fieldName = "Numeric",
			fieldValue = "123");

		FormPortlet.submitSuccessfullyAndViewSuccessPage();
	}

	@description = "Verify that Predefined Value has higher priority than Placeholder Text for the Numeric Field"
	@priority = "4"
	test PredefinedValueHasHigherPriorityThanPlaceholderText {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric",
			formPageNumber = "0");

		FormViewBuilder.setPlaceholder(fieldValue = "Numeric Placeholder Text");

		Form.gotoAdvancedTab();

		FormViewBuilder.setFieldPredefinedDate(fieldValue = "123");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		AssertElementPresent(
			key_fieldName = "Numeric",
			locator1 = "FormFields#TEXT_FIELD",
			value1 = "123");

		FormPortlet.submitSuccessfully();

		FormPortlet.viewSuccessPage(
			successPageDescription = "Your information was successfully received. Thank you for filling out the form.",
			successPageTitle = "Thank you.");
	}

	@description = "Verify that when erasing the Predefined Value in the Numeric Field it will be replaced by the Placeholder Text"
	@priority = "4"
	test PredefinedValueIsReplacedByPlaceholderText {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		FormViewBuilder.setPlaceholder(fieldValue = "Numeric Placeholder Text");

		Form.gotoAdvancedTab();

		FormViewBuilder.setFieldPredefinedText(fieldValue = "123");

		FormViewBuilder.validatePredefinedText(
			fieldName = "Numeric",
			fieldValue = "123");

		FormViewBuilder.setFieldPredefinedText(fieldValue = " ");

		Form.save();

		Form.viewFormPlaceholderText(fieldPlaceholderText = "Numeric Placeholder Text");
	}

	@description = "Verify that the Field Reference can be Edited"
	@priority = "5"
	test ReferenceCanBeEdited {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		Form.gotoAdvancedTab();

		Form.editFieldReferenceMetal(fieldValue = "Numeric1234");

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		FormFields.viewFieldReference(
			fieldName = "Numeric",
			key_fieldReferenceValue = "Numeric1234");
	}

	@description = "Verify that the Field Type can be changed"
	@ignore = "Test Stub"
	@priority = "5"
	test TypeCanBeChanged {
		property portal.acceptance = "false";

		// TODO LPS-132837 TypeCanBeChanged pending implementation

	}

	@description = "Verify that Validation options are reset after changing the Field Type from a Numeric Field to Text Field"
	@ignore = "Test Stub"
	@priority = "4"
	test ValidationIsResetAfterChangingFieldType {
		property portal.acceptance = "false";

		// TODO LPS-132838 ValidationIsResetAfterChangingFieldType pending implementation

	}

}