@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Navigation";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Enable local live") {
			JSONStaging.enableLocalStaging(
				branchingPrivate = "false",
				branchingPublic = "false",
				groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-135675. The user can create navigate menu items based on assets with associated display page template in staging site."
	@priority = "4"
	test AddDisplayPageTypeNavigationMenuItems {
		task ("Add the first display page template for Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Web Content DPT",
				groupName = "Test Site Name-staging",
				site = "false",
				subType = "Basic Web Content");
		}

		task ("Add a Display Page Content fragment to the first display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name-staging");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Web Content DPT");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Display Page Content");

			PageEditor.clickPublish();
		}

		task ("Mark the first display page template as default") {
			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Web Content DPT");
		}

		task ("Add the second display page template for Blogs Entry") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Blogs Entry",
				displayPageTemplateEntryName = "Blogs Entry DPT",
				groupName = "Test Site Name-staging",
				site = "false");
		}

		task ("Add a Display Page Content fragment to the second display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name-staging");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Blogs Entry DPT");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Display Page Content");

			PageEditor.clickPublish();
		}

		task ("Mark the second display page template as default") {
			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Blogs Entry DPT");
		}

		task ("Add the third display page template for Document") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Document",
				displayPageTemplateEntryName = "Document DPT",
				groupName = "Test Site Name-staging",
				site = "false",
				subType = "Basic Document");
		}

		task ("Add a Display Page Content fragment to the third display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name-staging");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Document DPT");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Display Page Content");

			PageEditor.clickPublish();
		}

		task ("Mark the third display page template as default") {
			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Document DPT");
		}

		task ("Add the fourth display page template for Category") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Category",
				displayPageTemplateEntryName = "Category DPT",
				groupName = "Test Site Name-staging",
				site = "false");
		}

		task ("Add a Display Page Content fragment to the fourth display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name-staging");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Category DPT");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Display Page Content");

			PageEditor.clickPublish();
		}

		task ("Mark the fourth display page template as default") {
			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Category DPT");
		}

		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name (Staging)",
				site = "false",
				title = "Web Content Title");
		}

		task ("Add a blogs entry") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name (Staging)",
				site = "false",
				title = "Blogs Entry Title");
		}

		task ("Add a document with an image") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name-staging",
				mimeType = "image/jpeg",
				site = "false",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name (Staging)",
				site = "false",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name (Staging)",
				site = "false",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = "Test Site Name (Staging)",
				site = "false",
				siteNavigationMenuName = "Navigation Menu Name");
		}

		task ("Add the Display Page type items in navigation menu") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name-staging");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Edit",
				rowEntry = "Navigation Menu Name");
		}

		task ("Add the Display Page items to the navigation menu") {
			NavigationMenusAdmin.addItem(
				assetTitle = "Web Content Title",
				item = "Web Content Article");

			NavigationMenusAdmin.addItem(
				assetTitle = "Blogs Entry Title",
				item = "Blogs Entry");

			NavigationMenusAdmin.addItem(
				assetTitle = "Document Title",
				item = "Document");

			NavigationMenusAdmin.addItem(
				assetTitleList = "Category Name",
				item = "Category");
		}

		task ("View the Display Page items") {
			for (var itemName : list "Web Content Title,Blogs Entry Title,Document Title,Category Name") {
				NavigationMenusAdmin.viewItem(itemName = "${itemName}");
			}
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Test Page Name",
				site = "false");
		}

		task ("Select the navigation menu in Navigation Menu widget") {
			Navigator.gotoStagedSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.chooseMenu(menuName = "Navigation Menu Name");

			PortletEntry.save();

			IFrame.closeFrame();
		}

		task ("View the items shown in Navigation Menu widget") {
			for (var itemName : list "Web Content Title,Blogs Entry Title,Document Title,Category Name") {
				AssertVisible(
					key_pageName = "${itemName}",
					locator1 = "Home#PAGE");
			}
		}

		task ("Navigate to associated display page template via Navigation Menu widget in staging site") {
			Click(
				key_pageName = "Web Content Title",
				locator1 = "Home#PAGE");

			ControlMenu.viewHeaderTitle(headerTitle = "Web Content DPT");

			AssertTextEquals(
				index = "1",
				locator1 = "WCD#WEB_CONTENT_CONTENT",
				value1 = "Web Content Content");

			Click(
				key_pageName = "Blogs Entry Title",
				locator1 = "Home#PAGE");

			ControlMenu.viewHeaderTitle(headerTitle = "Blogs Entry DPT");

			AssertVisible(
				key_entryContent = "Blogs Entry Content",
				locator1 = "BlogsEntry#CONTENT");

			Click(
				key_pageName = "Document Title",
				locator1 = "Home#PAGE");

			ControlMenu.viewHeaderTitle(headerTitle = "Document DPT");

			ContentPages.viewFragmentBackgroundImage(image = "Document_1.jpg");

			Click(
				key_pageName = "Category Name",
				locator1 = "Home#PAGE");

			ControlMenu.viewHeaderTitle(headerTitle = "Category DPT");

			ContentPages.viewFragmentText(
				fragmentName = "Content Display",
				text = "Category Name");
		}

		task ("Publish to live") {
			Staging.gotoPublishToLive();

			Staging.publishToLive();
		}

		task ("Navigate to live site") {
			Navigator.openStagingSiteURL(siteName = "Test Site Name");

			ProductMenu.gotoLiveSite();
		}

		task ("Navigate to associated display page template via Navigation Menu widget in live site") {
			Click(
				key_pageName = "Web Content Title",
				locator1 = "Home#PAGE");

			ControlMenu.viewHeaderTitle(headerTitle = "Web Content DPT");

			AssertVisible(
				key_tab = "Live",
				locator1 = "NavTab#ACTIVE_TAB_LINK");

			AssertTextEquals(
				index = "1",
				locator1 = "WCD#WEB_CONTENT_CONTENT",
				value1 = "Web Content Content");

			Click(
				key_pageName = "Blogs Entry Title",
				locator1 = "Home#PAGE");

			ControlMenu.viewHeaderTitle(headerTitle = "Blogs Entry DPT");

			AssertVisible(
				key_tab = "Live",
				locator1 = "NavTab#ACTIVE_TAB_LINK");

			AssertVisible(
				key_entryContent = "Blogs Entry Content",
				locator1 = "BlogsEntry#CONTENT");

			Click(
				key_pageName = "Document Title",
				locator1 = "Home#PAGE");

			ControlMenu.viewHeaderTitle(headerTitle = "Document DPT");

			AssertVisible(
				key_tab = "Live",
				locator1 = "NavTab#ACTIVE_TAB_LINK");

			ContentPages.viewFragmentBackgroundImage(image = "Document_1.jpg");

			Click(
				key_pageName = "Category Name",
				locator1 = "Home#PAGE");

			ControlMenu.viewHeaderTitle(headerTitle = "Category DPT");

			AssertVisible(
				key_tab = "Live",
				locator1 = "NavTab#ACTIVE_TAB_LINK");

			ContentPages.viewFragmentText(
				fragmentName = "Content Display",
				text = "Category Name");
		}
	}

	@description = "The user can edit the navigation menus in the staging site but cannot in the live site."
	@priority = "5"
	@uitest
	test CannotEditNavigationMenuInLive {
		property portal.acceptance = "true";

		task ("Add a navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = "Test Site Name (Staging)",
				site = "false",
				siteNavigationMenuName = "Navigation Menu Name");
		}

		task ("Publish to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("Navigate to Navigation Menus admin in the staging site") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name-staging");
		}

		task ("Assert the navigation menu is editable in the staging site") {
			AssertVisible(
				key_rowEntry = "Navigation Menu Name",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME_LINK");

			LexiconEntry.openEntryMenu(rowEntry = "Navigation Menu Name");

			AssertVisible(
				key_menuItem = "Edit",
				locator1 = "MenuItem#ANY_MENU_ITEM");
		}

		task ("Navigate to Navigation Menus admin in the live site") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name");
		}

		task ("Assert the navigation menu is not editable in the live site") {
			AssertVisible(
				key_rowEntry = "Navigation Menu Name",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

			AssertElementNotPresent(
				key_rowEntry = "Navigation Menu Name",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME_LINK");

			LexiconEntry.openEntryMenu(rowEntry = "Navigation Menu Name");

			AssertElementNotPresent(
				key_menuItem = "Edit",
				locator1 = "MenuItem#ANY_MENU_ITEM");
		}
	}

	@description = "This is a test for LPS-89358. Deleted navigation menus will not appear in live after publish."
	@priority = "3"
	test DeletedNavigationMenuNotShownInLiveAfterPublish {
		task ("Add a page in staging site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Test Page Name",
				site = "false");
		}

		task ("Add a navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = "Test Site Name (Staging)",
				site = "false",
				siteNavigationMenuName = "Navigation Menu Name");
		}

		task ("Add a page item to the navigation menu") {
			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name (Staging)",
				privateLayout = "false",
				site = "false",
				siteNavigationMenuItemName = "Test Page Name",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "layout");
		}

		task ("Add a URL item to the navigation menu") {
			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name (Staging)",
				site = "false",
				siteNavigationMenuItemName = "Liferay",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "url",
				url = "https://www.liferay.com/",
				useNewTab = "false");
		}

		task ("Publish to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("View the navigation menu shown in the live site") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name");

			LexiconEntry.viewEntryName(rowEntry = "Navigation Menu Name");
		}

		task ("Navigate to Navigation Menus admin in the staging site") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name-staging");
		}

		task ("Delete the navigation menu") {
			NavigationMenusAdmin.deleteCP(navigationMenuName = "Navigation Menu Name");
		}

		task ("Publish to live") {
			Navigator.gotoStagedSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			Staging.gotoPublishToLive();

			Staging.publishToLive();
		}

		task ("View the navigation menu not shown in the live site") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name");

			LexiconEntry.viewNoEntry(rowEntry = "Navigation Menu Name");
		}
	}

	@description = "This is a test for LPS-86525. The user could publish changes of navigation menu to live."
	@priority = "5"
	test PublishEditedNavigationMenuToLive {
		property portal.acceptance = "true";

		task ("Add two pages in staging site") {
			for (var n : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name (Staging)",
					layoutName = "Test Page Name ${n}",
					site = "false");
			}
		}

		task ("Add a navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = "Test Site Name (Staging)",
				site = "false",
				siteNavigationMenuName = "Navigation Menu Name");
		}

		task ("Add the first page item to the navigation menu") {
			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name (Staging)",
				privateLayout = "false",
				site = "false",
				siteNavigationMenuItemName = "Test Page Name 1",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "layout");
		}

		task ("Add a URL item to the navigation menu") {
			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name (Staging)",
				site = "false",
				siteNavigationMenuItemName = "Liferay",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "url",
				url = "https://www.liferay.com/",
				useNewTab = "false");
		}

		task ("Navigate to the Navigation Menu widget in the staging site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name-staging");
		}

		task ("Configure the Navigation Menu widget to use the navigation menu") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.chooseMenu(menuName = "Navigation Menu Name");

			Portlet.saveAndCloseConfig();
		}

		task ("Publish to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("Add the second page item to the navigation menu") {
			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name (Staging)",
				privateLayout = "false",
				site = "false",
				siteNavigationMenuItemName = "Test Page Name 2",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "layout");
		}

		task ("Navigate to the navigation menu in the staging site") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name-staging");

			LexiconEntry.gotoEntry(rowEntry = "Navigation Menu Name");
		}

		task ("Delete the first page from the navigation menu") {
			NavigationMenusAdmin.deleteItem(itemName = "Test Page Name 1");
		}

		task ("Navigate to the Navigation Menu widget in the staging site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name-staging");
		}

		task ("View the changes of navigation menu shown in Navigation Menu widget") {
			AssertVisible(
				key_pageName = "Liferay",
				locator1 = "Home#PAGE");

			AssertVisible(
				key_pageName = "Test Page Name 2",
				locator1 = "Home#PAGE");

			AssertElementNotPresent(
				key_pageName = "Test Page Name 1",
				locator1 = "Home#PAGE");
		}

		task ("Navigate to the Navigation Menu widget in the live site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name");
		}

		task ("View the changes of navigation menu not shown in Navigation Menu widget") {
			AssertVisible(
				key_pageName = "Test Page Name 1",
				locator1 = "Home#PAGE");

			AssertVisible(
				key_pageName = "Liferay",
				locator1 = "Home#PAGE");

			AssertElementNotPresent(
				key_pageName = "Test Page Name 2",
				locator1 = "Home#PAGE");
		}

		task ("Publish the site to live and flag the 'Replicate Individual Deletions' checkbox while publishing") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			LexiconEntry.gotoAdd();

			Check(locator1 = "StagingPublishToLive#DELETIONS_REPLICATE_INDIVIDUAL_DELETIONS_CHECKBOX");

			AssertClickNoError(
				locator1 = "Staging#STAGING_PUBLISH_TO_LIVE_BUTTON",
				value1 = "Publish to Live");

			WaitForElementNotPresent(
				key_listEntry = "In Progress",
				locator1 = "LexiconList#LIST_ENTRY_INFO");
		}

		task ("Navigate to the Navigation Menu widget in the live site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name");
		}

		task ("View the changes of navigation menu shown in Navigation Menu widget") {
			AssertVisible(
				key_pageName = "Liferay",
				locator1 = "Home#PAGE");

			AssertVisible(
				key_pageName = "Test Page Name 2",
				locator1 = "Home#PAGE");

			AssertElementNotPresent(
				key_pageName = "Test Page Name 1",
				locator1 = "Home#PAGE");
		}

		task ("Assert the links in the Navigation Menu widget work properly") {
			Click(
				key_pageName = "Test Page Name 2",
				locator1 = "Home#PAGE");

			AssertLocation.assertPartialLocation(value1 = "web/test-site-name/test-page-name-2");

			Click(
				key_pageName = "Liferay",
				locator1 = "Home#PAGE");

			AssertLocation(value1 = "https://www.liferay.com/");
		}
	}

	@description = "This is a test for LPS-86529. The user could publish changes of primary navigation menu to live."
	@priority = "5"
	test PublishEditedPrimaryNavigationMenuToLive {
		property portal.acceptance = "true";

		task ("Add two pages in staging site") {
			for (var n : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name (Staging)",
					layoutName = "Test Page Name ${n}",
					site = "false");
			}
		}

		task ("Add a navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = "Test Site Name (Staging)",
				site = "false",
				siteNavigationMenuName = "Navigation Menu Name");
		}

		task ("Add the first page item to the navigation menu") {
			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name (Staging)",
				privateLayout = "false",
				site = "false",
				siteNavigationMenuItemName = "Test Page Name 1",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "layout");
		}

		task ("Add a URL item to the navigation menu") {
			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name (Staging)",
				site = "false",
				siteNavigationMenuItemName = "Liferay",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "url",
				url = "https://www.liferay.com/",
				useNewTab = "false");
		}

		task ("Mark the navigation menu as Primary Navigation") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name-staging");

			NavigationMenusAdmin.configureMenuType(
				menuType = "Primary Navigation",
				navigationMenu = "Navigation Menu Name");
		}

		task ("Navigate to the Navigation Menu widget in the staging site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name-staging");
		}

		task ("Configure the Navigation Menu widget to use Primary Navigation") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.selectNavigation(menuType = "Primary Navigation");

			Portlet.saveAndCloseConfig();
		}

		task ("Publish to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("Add the second page item to the navigation menu") {
			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name (Staging)",
				privateLayout = "false",
				site = "false",
				siteNavigationMenuItemName = "Test Page Name 2",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "layout");
		}

		task ("Navigate to the navigation menu in the staging site") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name-staging");

			LexiconEntry.gotoEntry(rowEntry = "Navigation Menu Name");
		}

		task ("Delete the first page from the navigation menu") {
			NavigationMenusAdmin.deleteItem(itemName = "Test Page Name 1");
		}

		task ("Navigate to the Navigation Menu widget in the staging site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name-staging");
		}

		task ("View the changes of navigation menu shown in Navigation Menu widget") {
			AssertVisible(
				key_pageName = "Liferay",
				locator1 = "Home#PAGE");

			AssertVisible(
				key_pageName = "Test Page Name 2",
				locator1 = "Home#PAGE");

			AssertElementNotPresent(
				key_pageName = "Test Page Name 1",
				locator1 = "Home#PAGE");
		}

		task ("Navigate to the Navigation Menu widget in the live site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name");
		}

		task ("View the changes of navigation menu not shown in Navigation Menu widget") {
			AssertVisible(
				key_pageName = "Test Page Name 1",
				locator1 = "Home#PAGE");

			AssertVisible(
				key_pageName = "Liferay",
				locator1 = "Home#PAGE");

			AssertElementNotPresent(
				key_pageName = "Test Page Name 2",
				locator1 = "Home#PAGE");
		}

		task ("Publish the site to live and flag the 'Replicate Individual Deletions' checkbox while publishing") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			LexiconEntry.gotoAdd();

			Check(locator1 = "StagingPublishToLive#DELETIONS_REPLICATE_INDIVIDUAL_DELETIONS_CHECKBOX");

			AssertClickNoError(
				locator1 = "Staging#STAGING_PUBLISH_TO_LIVE_BUTTON",
				value1 = "Publish to Live");

			WaitForElementNotPresent(
				key_listEntry = "In Progress",
				locator1 = "LexiconList#LIST_ENTRY_INFO");

			AssertTextEquals(
				locator1 = "Staging#PROCESS_RESULT",
				value1 = "Successful");
		}

		task ("Navigate to the Navigation Menu widget in the live site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name");
		}

		task ("View the changes of navigation menu shown in Navigation Menu widget") {
			AssertVisible(
				key_pageName = "Liferay",
				locator1 = "Home#PAGE");

			AssertVisible(
				key_pageName = "Test Page Name 2",
				locator1 = "Home#PAGE");

			AssertElementNotPresent(
				key_pageName = "Test Page Name 1",
				locator1 = "Home#PAGE");
		}

		task ("Assert the links in the Navigation Menu widget work properly") {
			Click(
				key_pageName = "Test Page Name 2",
				locator1 = "Home#PAGE");

			AssertLocation.assertPartialLocation(value1 = "web/test-site-name/test-page-name-2");

			Click(
				key_pageName = "Liferay",
				locator1 = "Home#PAGE");

			AssertLocation(value1 = "https://www.liferay.com/");
		}
	}

	@description = "This is a test for LPS-86142 and LPS-112993. The user could publish navigation menu to live."
	@priority = "5"
	test PublishNavigationMenuToLive {
		property portal.acceptance = "true";

		task ("Add three pages in staging site") {
			for (var n : list "1,2,3") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name (Staging)",
					layoutName = "Test Page Name ${n}",
					site = "false");
			}
		}

		task ("Add a navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = "Test Site Name (Staging)",
				site = "false",
				siteNavigationMenuName = "Navigation Menu Name");
		}

		task ("Add the first page item to the navigation menu") {
			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name (Staging)",
				privateLayout = "false",
				site = "false",
				siteNavigationMenuItemName = "Test Page Name 1",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "layout");
		}

		task ("Add a URL item to the navigation menu") {
			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name (Staging)",
				site = "false",
				siteNavigationMenuItemName = "Liferay",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "url",
				url = "https://www.liferay.com/",
				useNewTab = "false");
		}

		task ("Navigate to the Navigation Menu widget in the staging site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name-staging");
		}

		task ("View the Public Pages Hierarchy applied to Navigation Menu widget") {
			for (var n : list "1,2,3") {
				AssertVisible(
					key_pageName = "Test Page Name ${n}",
					locator1 = "Home#PAGE");
			}

			AssertElementNotPresent(
				key_pageName = "Liferay",
				locator1 = "Home#PAGE");
		}

		task ("Configure the Navigation Menu widget to use the navigation menu") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.chooseMenu(menuName = "Navigation Menu Name");

			Portlet.saveAndCloseConfig();
		}

		task ("Publish to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("Navigate to Navigation Menus admin in the live site") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name");
		}

		task ("View the navigation menu shown in the live site") {
			AssertVisible(
				key_rowEntry = "Navigation Menu Name",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");
		}

		task ("Navigate to the live site via Applications Menu") {
			ApplicationsMenu.gotoSite(site = "Test Site Name");
		}

		task ("View the navigation menu applied to Navigation Menu widget") {
			AssertVisible(
				key_pageName = "Test Page Name 1",
				locator1 = "Home#PAGE");

			AssertVisible(
				key_pageName = "Liferay",
				locator1 = "Home#PAGE");

			for (var n : list "2,3") {
				AssertElementNotPresent(
					key_pageName = "Test Page Name ${n}",
					locator1 = "Home#PAGE");
			}
		}

		task ("Assert the links in the Navigation Menu widget work properly") {
			Click(
				key_pageName = "Test Page Name 1",
				locator1 = "Home#PAGE");

			AssertLocation.assertPartialLocation(value1 = "web/test-site-name/test-page-name-1");

			Click(
				key_pageName = "Liferay",
				locator1 = "Home#PAGE");

			AssertLocation(value1 = "https://www.liferay.com/");
		}
	}

	@description = "This is a test for LPS-86525. The user could publish a navigation menu without deleted pages from live."
	@priority = "5"
	test PublishNavigationMenuWithoutDeletedPagesFromLive {
		property portal.acceptance = "true";

		task ("Add three pages in staging site") {
			for (var n : list "1,2,3") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name (Staging)",
					layoutName = "Test Page Name ${n}",
					site = "false");
			}
		}

		task ("Add a navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = "Test Site Name (Staging)",
				site = "false",
				siteNavigationMenuName = "Navigation Menu Name");
		}

		task ("Add three page items to the navigation menu") {
			for (var n : list "1,2,3") {
				JSONSitenavigation.addSiteNavigationMenuItem(
					groupName = "Test Site Name (Staging)",
					privateLayout = "false",
					site = "false",
					siteNavigationMenuItemName = "Test Page Name ${n}",
					siteNavigationMenuName = "Navigation Menu Name",
					type = "layout");
			}
		}

		task ("Navigate to the Navigation Menu widget in the staging site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name-staging");
		}

		task ("Configure the Navigation Menu widget to use the navigation menu") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.chooseMenu(menuName = "Navigation Menu Name");

			Portlet.saveAndCloseConfig();
		}

		task ("Publish to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("Navigate to Pages admin in the live site") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");
		}

		task ("Delete the third page from the live site") {
			PagesAdmin.deletePage(pageName = "Test Page Name 3");
		}

		task ("Publish to live without the third page") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			LexiconEntry.gotoAdd();

			if (IsElementPresent(key_entryName = "Test Page Name 3", locator1 = "StagingPublishToLive#PAGES_TO_PUBLISH_CHECKBOX_CHECKED")) {
				Click(
					key_entryName = "Test Page Name 3",
					locator1 = "StagingPublishToLive#PAGES_TO_PUBLISH_CHECKBOX_CHECKED");
			}

			AssertVisible(
				key_entryName = "Test Page Name 3",
				locator1 = "StagingPublishToLive#PAGES_TO_PUBLISH_CHECKBOX_UNCHECKED");

			AssertClickNoError(
				locator1 = "Staging#STAGING_PUBLISH_TO_LIVE_BUTTON",
				value1 = "Publish to Live");

			WaitForElementNotPresent(
				key_listEntry = "In Progress",
				locator1 = "LexiconList#LIST_ENTRY_INFO");

			AssertTextEquals(
				locator1 = "Staging#PROCESS_RESULT",
				value1 = "Successful");
		}

		task ("Navigate to the Navigation Menu widget in the live site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name");
		}

		task ("View the third page not shown in Navigation Menu widget") {
			for (var n : list "1,2") {
				AssertVisible(
					key_pageName = "Test Page Name ${n}",
					locator1 = "Home#PAGE");
			}

			AssertElementNotPresent(
				key_pageName = "Test Page Name 3",
				locator1 = "Home#PAGE");
		}
	}

	@description = "This is a test for LPS-86142. The user could publish primary navigation menu to live.."
	@priority = "5"
	test PublishPrimaryNavigationMenuToLive {
		property portal.acceptance = "true";

		task ("Add three pages in staging site") {
			for (var n : list "1,2,3") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name (Staging)",
					layoutName = "Test Page Name ${n}",
					site = "false");
			}
		}

		task ("Add a navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = "Test Site Name (Staging)",
				site = "false",
				siteNavigationMenuName = "Navigation Menu Name");
		}

		task ("Add the first page item to the navigation menu") {
			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name (Staging)",
				privateLayout = "false",
				site = "false",
				siteNavigationMenuItemName = "Test Page Name 1",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "layout");
		}

		task ("Add a URL item to the navigation menu") {
			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name (Staging)",
				site = "false",
				siteNavigationMenuItemName = "Liferay",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "url",
				url = "https://www.liferay.com/",
				useNewTab = "false");
		}

		task ("Mark the navigation menu as Primary Navigation") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name-staging");

			NavigationMenusAdmin.configureMenuType(
				menuType = "Primary Navigation",
				navigationMenu = "Navigation Menu Name");
		}

		task ("Navigate to the Navigation Menu widget in the staging site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name-staging");
		}

		task ("Configure the Navigation Menu widget to use Primary Navigation") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.selectNavigation(menuType = "Primary Navigation");

			Portlet.saveAndCloseConfig();
		}

		task ("Publish to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("View the primary navigation menu shown in the live site") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name");

			AssertVisible(
				key_rowEntry = "Navigation Menu Name",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");
		}

		task ("Navigate to the Navigation Menu widget in the live site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name");
		}

		task ("View the primary navigation menu applied to Navigation Menu widget") {
			AssertVisible(
				key_pageName = "Test Page Name 1",
				locator1 = "Home#PAGE");

			AssertVisible(
				key_pageName = "Liferay",
				locator1 = "Home#PAGE");

			for (var n : list "2,3") {
				AssertElementNotPresent(
					key_pageName = "Test Page Name ${n}",
					locator1 = "Home#PAGE");
			}
		}

		task ("Assert the links in the Navigation Menu widget work properly") {
			Click(
				key_pageName = "Test Page Name 1",
				locator1 = "Home#PAGE");

			AssertLocation.assertPartialLocation(value1 = "web/test-site-name/test-page-name-1");

			Click(
				key_pageName = "Liferay",
				locator1 = "Home#PAGE");

			AssertLocation(value1 = "https://www.liferay.com/");
		}
	}

	@description = "This is a test for LPS-86525. The user could publish a primary navigation menu without deleted pages from live."
	@priority = "5"
	test PublishPrimaryNavigationMenuWithoutDeletedPagesFromLive {
		property portal.acceptance = "true";

		task ("Add three pages in staging site") {
			for (var n : list "1,2,3") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name (Staging)",
					layoutName = "Test Page Name ${n}",
					site = "false");
			}
		}

		task ("Add a navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = "Test Site Name (Staging)",
				site = "false",
				siteNavigationMenuName = "Navigation Menu Name");
		}

		task ("Add three page items to the navigation menu") {
			for (var n : list "1,2,3") {
				JSONSitenavigation.addSiteNavigationMenuItem(
					groupName = "Test Site Name (Staging)",
					privateLayout = "false",
					site = "false",
					siteNavigationMenuItemName = "Test Page Name ${n}",
					siteNavigationMenuName = "Navigation Menu Name",
					type = "layout");
			}
		}

		task ("Mark the navigation menu as Primary Navigation") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name-staging");
		}

		task ("Configure the Navigation Menu widget to use Primary Navigation") {
			NavigationMenusAdmin.configureMenuType(
				menuType = "Primary Navigation",
				navigationMenu = "Navigation Menu Name");
		}

		task ("Navigate to the Navigation Menu widget in the staging site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name-staging");
		}

		task ("Configure the Navigation Menu widget to use Primary Navigation") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.selectNavigation(menuType = "Primary Navigation");

			Portlet.saveAndCloseConfig();
		}

		task ("Publish to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("Navigate to pages admin in the live site") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");
		}

		task ("Delete the third page from the live site") {
			PagesAdmin.deletePage(pageName = "Test Page Name 3");
		}

		task ("Publish to live without the third page") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			LexiconEntry.gotoAdd();

			if (IsElementPresent(key_entryName = "Test Page Name 3", locator1 = "StagingPublishToLive#PAGES_TO_PUBLISH_CHECKBOX_CHECKED")) {
				Click(
					key_entryName = "Test Page Name 3",
					locator1 = "StagingPublishToLive#PAGES_TO_PUBLISH_CHECKBOX_CHECKED");
			}

			AssertVisible(
				key_entryName = "Test Page Name 3",
				locator1 = "StagingPublishToLive#PAGES_TO_PUBLISH_CHECKBOX_UNCHECKED");

			AssertClickNoError(
				locator1 = "Staging#STAGING_PUBLISH_TO_LIVE_BUTTON",
				value1 = "Publish to Live");

			WaitForElementNotPresent(
				key_listEntry = "In Progress",
				locator1 = "LexiconList#LIST_ENTRY_INFO");

			AssertTextEquals(
				locator1 = "Staging#PROCESS_RESULT",
				value1 = "Successful");
		}

		task ("Navigate to the Navigation Menu widget in the live site") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name");
		}

		task ("View the third page not shown in Navigation Menu widget") {
			for (var n : list "1,2") {
				AssertVisible(
					key_pageName = "Test Page Name ${n}",
					locator1 = "Home#PAGE");
			}

			AssertElementNotPresent(
				key_pageName = "Test Page Name 3",
				locator1 = "Home#PAGE");
		}
	}

	@description = "This is a test for LPS-137577. The user can select multiple categories in the navigation menu in a staging site."
	@priority = "4"
	test SelectMultipleCategories {
		task ("Add three hierarchy levels categories to a vocabulary within Global site") {
			JSONCategory.addVocabulary(
				groupName = "Global",
				title = "Global Vocabulary Name");

			JSONCategory.addCategory(
				groupName = "Global",
				title = "Global Category Name",
				vocabularyName = "Global Vocabulary Name");

			JSONCategory.addSubcategory(
				groupName = "Global",
				parentCategoryName = "Global Category Name",
				title = "Global Subcategory Name",
				vocabularyName = "Global Vocabulary Name");

			JSONCategory.addSubcategory(
				groupName = "Global",
				parentCategoryName = "Global Subcategory Name",
				title = "Global SubSubcategory Name",
				vocabularyName = "Global Vocabulary Name");
		}

		task ("Add three hierarchy levels categories to a vocabulary within a staging site") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name (Staging)",
				site = "false",
				title = "Site Vocabulary Name");

			JSONCategory.addCategory(
				groupName = "Test Site Name (Staging)",
				site = "false",
				title = "Site Category Name",
				vocabularyName = "Site Vocabulary Name");

			JSONCategory.addSubcategory(
				groupName = "Test Site Name (Staging)",
				parentCategoryName = "Site Category Name",
				site = "false",
				title = "Site Subcategory Name",
				vocabularyName = "Site Vocabulary Name");

			JSONCategory.addSubcategory(
				groupName = "Test Site Name (Staging)",
				parentCategoryName = "Site Subcategory Name",
				site = "false",
				title = "Site SubSubcategory Name",
				vocabularyName = "Site Vocabulary Name");
		}

		task ("Add a navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = "Test Site Name (Staging)",
				site = "false",
				siteNavigationMenuName = "Navigation Menu Name");
		}

		task ("Add all categories from each vocabulary into Navigation Menu") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name-staging");

			NavigationMenusAdmin.editMenu(navigationMenuName = "Navigation Menu Name");

			NavigationMenusAdmin.addItem(
				assetTitleList = "Global Category Name,Global Subcategory Name,Global SubSubcategory Name,Site Category Name,Site Subcategory Name,Site SubSubcategory Name",
				item = "Category");
		}

		task ("View categories are shown in hiearchy order") {
			NavigationMenusAdmin.viewItemNested(
				groupName = "Test Site Name (Staging)",
				itemNameList = "Global Subcategory Name,Global SubSubcategory Name,Site Subcategory Name,Site SubSubcategory Name",
				parentItemNameList = "Global Category Name,Global Subcategory Name,Site Category Name,Site Subcategory Name",
				site = "false",
				siteNavigationMenuName = "Navigation Menu Name");

			NavigationMenusAdmin.viewItemNotNested(itemNameList = "Global Category Name,Site Category Name");
		}

		task ("Delete the global vocabulary") {
			JSONCategory.deleteVocabulary(
				groupName = "Global",
				vocabularyName = "Global Vocabulary Name");
		}
	}

	@description = "This is a use case for LPS-113994. The Navigation Menu widget can display more than 2 sublevels page hierarchy when use the default template after enable Live."
	@priority = "3"
	@uitest
	test ShowMoreThanTwoSublevelsWhenSelectPublicPagesHierarchyAndBarMinimallyStyled {
		task ("Add a widget page with 3 sublevels child pages") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Home",
				site = "false");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Child Page",
				parentLayoutName = "Home",
				site = "false");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Child Child Page",
				parentLayoutName = "Child Page",
				site = "false");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Child Child Child Page",
				parentLayoutName = "Child Child Page",
				site = "false");
		}

		task ("Navigate to Home in staging site") {
			Navigator.gotoStagedSitePage(
				pageName = "Home",
				siteName = "Test Site Name");
		}

		task ("Select Public Pages Hierarchy and Bar minimally styled") {
			NavigationMenusWidget.gotoNavigationMenuWidgetConfig();

			NavigationMenusWidget.selectNavigation(menuType = "Pages Hierarchy");

			Pause(locator1 = "1000");

			NavigationMenusWidget.selectDisplayTemplate(templateName = "Bar minimally styled");

			Pause(locator1 = "1000");

			Portlet.saveAndCloseConfig();
		}

		task ("Navigate to Child Page via Navigation Menu widget") {
			NavigationMenusWidget.gotoSublevel(
				itemName = "Child Page",
				pageName = "Home",
				type = "Drop Down");

			ControlMenu.viewHeaderTitle(headerTitle = "Child Page");
		}

		task ("Publish to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("Navigate to Home in Live site") {
			Navigator.gotoSitePage(
				pageName = "Home",
				siteName = "Test Site Name");
		}

		task ("Navigate to Child Child Page via Navigation Menu widget") {
			NavigationMenusWidget.gotoSublevel(
				itemName = "Child Child Page",
				pageName = "Home",
				type = "Drop Down");

			AssertLocation.assertPartialLocation(value1 = "web/test-site-name/child-child-page");
		}
	}

}