@component-name = "portal-document-management"
definition {

	property custom.properties = "default.layout.template.id=1_column";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Document Management";

	var pageName = "Documents and Media Page";
	var portletName = "Documents and Media";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			DMFolder.tearDownCP();

			DMDocumentType.tearDownCP();

			PagesAdmin.tearDownCP();
		}
	}

	@description = "This test covers LPS-102179. It ensures that the user can create a shortcut using a file from a different site after setting the root folder."
	@priority = "5"
	@refactordone
	test CanReferenceDocumentFromOtherSiteAfterSettingRootFolder {
		property portal.acceptance = "true";

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "Test Folder",
			groupName = "Site Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		Navigator.openSiteURL(siteName = "Site Name");

		DMDocument.enableActionsMenuOnPortlet();

		Navigator.openSiteURL(siteName = "Site Name");

		DMDocument.setRootFolder(dmRootFolderName = "Test Folder");

		Navigator.openSiteURL(siteName = "Site Name");

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		DMDocument.addDMShortcutPG(
			dmDocumentTitle = "DM Document Title",
			siteName = "${siteName}");

		Navigator.openSiteURL(siteName = "Site Name");

		DMDocument.viewPG(dmDocumentTitle = "DM Document Title");
	}

	@priority = "4"
	@refactordone
	test CanRemoveCurrentDisplayStyleViews {
		property portal.acceptance = "true";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMPortlet.configureDisplaySettingsPG(currentDisplayStyleViews = "");
	}

	@priority = "5"
	@refactordone
	test CanRemovePortlet {
		property portal.acceptance = "true";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		Portlet.deletePG(portletName = "Documents and Media");
	}

	@priority = "4"
	@refactordone
	test ConfigurationsAreIndependentAcrossPages {
		property portal.acceptance = "true";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page 2");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Documents and Media Page 2",
			widgetName = "Documents and Media");

		Navigator.gotoSitePage(
			pageName = "Documents and Media Page 2",
			siteName = "Guest");

		DMPortlet.configureDisplaySettingsPG(
			enableDisplaySettingsRelatedAssets = "false",
			enableDisplaySettingsShowSearch = "false",
			entriesToDisplayCount = "60");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMPortlet.viewDefaultConfigurationDisplaySettingsPG();
	}

	@description = "This test covers LPS-104252. It validates that the search bar in the DM widget cannot execute XSS."
	@ignore = "Test Stub"
	@priority = "4"
	test SearchBarDoesNotExecuteXSS {

		// TODO LPS-129152

	}

	@description = "This is a use case for LPS-95662. Selecting an asset from the second does not invoke the management toolbar on the first."
	@priority = "4"
	test SelectAssetFromSecondWidgetInvokesSecondManagementToolbar {
		property portal.acceptance = "true";
		property test.assert.javascript.errors = "true";
		property test.assert.warning.exceptions = "true";

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "Test Folder",
			groupName = "Guest");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		PortletEntry.SelectAllOnSpecificWidget(widgetPosition = "2");

		AssertNotChecked.assertNotCheckedNotVisible(locator1 = "Checkbox#LEXICON_SELECT_ALL_INPUT");
	}

	@description = "This test covers LPS-91595. It ensures that the document selection persists when navigating through the pagination in the DM widget."
	@priority = "4"
	@refactordone
	test SelectionPersistsWhenTraversingPages {
		property portal.acceptance = "true";

		for (var documentName : list "Document_2.doc,Document_1.xls,Document_4.jpg,Document_3.jpg,Document_2.xls,Document_1.txt,Document_4.txt,Document_3.xls,Document_2.jpg,Document_1.doc") {
			var extension = StringUtil.extractLast("${documentName}", ".");

			if ("${extension}" == "doc") {
				var mimeType = "application/msword";
			}
			else if ("${extension}" == "jpg") {
				var mimeType = "image/jpg";
			}
			else if ("${extension}" == "xls") {
				var mimeType = "application/vnd.ms-excel";
			}
			else if ("${extension}" == "txt") {
				var mimeType = "text/plain";
			}

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "${documentName}",
				groupName = "Guest",
				mimeType = "${mimeType}",
				sourceFileName = "${documentName}");
		}

		Navigator.gotoPage(pageName = "Documents and Media Page");

		Pagination.changePagination(itemsPerPage = "4");

		Pagination.viewResults(results = "Showing 1 to 4 of 10 entries.");

		DMDocument.checkDocumentCheckboxPG(dmDocumentTitle = "Document_2.jpg");

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "1 of 10 Selected");

		Click(locator1 = "Pagination#NEXT_LINK");

		DMDocument.checkDocumentCheckboxPG(dmDocumentTitle = "Document_4.jpg");

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "2 of 10 Selected");
	}

	@description = "This test ensures that the DM widgets follow W3C accessibility standards."
	@ignore = "true"
	@priority = "4"
	test WidgetsFollowAccessibilityStandards {
		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Media Gallery");

		Navigator.openSitePage(
			pageName = "Documents and Media Page",
			siteName = "Guest");

		AssertAccessible();
	}

	@description = "This test checks that the javascript in the user name will not be executed when viewing a document on page."
	@priority = "3"
	test XSSIsNotExecutedWhenViewingUsernameInDocument {
		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

		User.editUserInformation(userLastNameEdit = '''Test<script>alert('hello!')</script>''');

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "Document_1.txt");

		AssertAlertNotPresent();
	}

}