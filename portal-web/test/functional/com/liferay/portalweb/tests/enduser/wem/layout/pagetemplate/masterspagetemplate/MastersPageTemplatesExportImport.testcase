@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Master Page Templates";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a use case for LPS-102207. Can not export a master page template when it doesn't has published version."
	@priority = "5"
	test CannotExportMastersPageTemplateWithoutPublishedVersion {
		property portal.acceptance = "true";

		task ("Add a custom master but not publish") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");
		}

		task ("Assert custom master has a Draft label") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			LexiconCard.viewCardLabel(
				card = "Custom Masters Page Template",
				cardLabel = "Draft");
		}

		task ("Assert Export action is disabled") {
			Click.waitForMenuToggleJSClick(
				key_card = "Custom Masters Page Template",
				locator1 = "Card#CARD_ELLIPSIS");

			AssertVisible(
				key_menuItem = "Export",
				locator1 = "MenuItem#DISABLED_MENU_ITEM");
		}

		task ("Assert Export button is disabled") {
			MastersPageTemplatesAdmin.selectMasters(masterLayoutName = "Custom Masters Page Template");

			AssertElementPresent(
				key_text = "upload",
				locator1 = "Icon#ANY_DISABLED");
		}
	}

	@description = "This is a use case for LPS-102207. Can export a master page template containing the layout elements and nested elements and import."
	@priority = "5"
	test ExportImportMastersPageTemplateWithCompositionOfFragments {
		property portal.acceptance = "true";

		task ("Add a custom master") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");
		}

		task ("Add composition of fragments to custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Edit",
				masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				dropTarget = "Footer",
				fragmentName = "Container",
				scope = "Master");

			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				navTab = "Fragments");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				dropTarget = "Footer",
				fragmentName = "Grid",
				scope = "Master");

			PageEditor.expandFragmentCollection(collectionName = "Basic Components");

			DragAndDrop.javaScriptDragAndDropToObject(
				key_collectionName = "Basic Components",
				key_columnNumber = "1",
				key_fragmentName = "Button",
				key_position = "1",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "PageEditor#GRID_COLUMN",
				value1 = "");

			PageEditor.waitForAutoSave();

			AssertElementPresent(
				key_columnNumber = "1",
				key_elementHeader = "//div[@aria-label='Button']",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

			Button.click(button = "Publish Master");

			Alert.viewSuccessMessage();
		}

		task ("Export custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Export",
				masterLayoutName = "Custom Masters Page Template");

			DownloadTempFile();
		}

		task ("Import masters page template in new site") {
			JSONGroup.addGroup(groupName = "Site Name");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "site-name");

			MastersPageTemplatesAdmin.importMastersFromTempFolder();
		}

		task ("Assert the composition of fragments are imported") {
			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.viewFragment(fragmentName = "Container");

			AssertElementPresent(
				key_elementHeader = "//div[@aria-label='Heading']",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");

			PageEditor.viewFragment(fragmentName = "Grid");

			AssertElementPresent(
				key_columnNumber = "1",
				key_elementHeader = "//div[@aria-label='Button']",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}
	}

	@description = "This is a use case for LPS-102207. Can export a master page template containing the custom configuration settings of fragments and import."
	@priority = "5"
	test ExportImportMastersPageTemplateWithCustomConfigurationSettingOfFragments {
		property portal.acceptance = "true";

		task ("Add a custom master") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");
		}

		task ("Add a Container and a Heading to custom master and set up configuration settings of them") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Edit",
				masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				dropTarget = "Footer",
				fragmentName = "Container",
				scope = "Master");

			PageEditor.editLayoutContainer(
				backgroundImage = "Direct",
				panel = "Styles",
				uploadFileName = "Document_1.png");

			PageEditor.viewContainerStyle(
				backgroundImage = "Document_1.png",
				position = "1");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				dropTarget = "Header",
				fragmentName = "Heading",
				scope = "Master");

			PageEditor.gotoStyle(fragmentName = "Heading");

			PageEditor.configureFragment(
				alignment = "Center",
				textColor = "Danger");

			PageEditor.gotoConfiguration(fragmentName = "Heading");

			PageEditor.configureFragment(headingLevel = "H2");

			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "heading",
				headingLevel = "h2",
				textColor = "danger");

			Button.click(button = "Publish Master");

			Alert.viewSuccessMessage();
		}

		task ("Export custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Export",
				masterLayoutName = "Custom Masters Page Template");

			DownloadTempFile();
		}

		task ("Import masters page template in new site") {
			JSONGroup.addGroup(groupName = "Site Name");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "site-name");

			MastersPageTemplatesAdmin.importMastersFromTempFolder();
		}

		task ("Assert the custom configuration settings of fragments are imported") {
			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.viewContainerStyle(
				backgroundImage = "Document_1.png",
				position = "1");

			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "heading",
				headingLevel = "h2",
				textColor = "danger");
		}
	}

	@description = "This is a use case for LPS-102207. Can export a master page template with the custom Look and Feel and import."
	@priority = "4"
	test ExportImportMastersPageTemplateWithCustomLookAndFeel {
		task ("Add a custom master") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");
		}

		task ("Configure the Look and Feel of custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Edit",
				masterLayoutName = "Custom Masters Page Template");

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			Theme.configureLookAndFeelShowFooter(showFooter = "true");

			Theme.configureLookAndFeelShowHeader(showHeader = "true");

			Theme.configureLookAndFeelShowHeaderSearch(showHeaderSearch = "true");

			Theme.configureLookAndFeelShowMaxMinAppLinks(showMaxMinAppLinks = "true");

			Theme.configureLookAndFeelWrapWidgetPageContent(wrapWidgetPageContent = "true");

			PortletEntry.save();

			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();

			Button.click(button = "Publish Master");

			Alert.viewSuccessMessage();
		}

		task ("Export custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Export",
				masterLayoutName = "Custom Masters Page Template");

			DownloadTempFile();
		}

		task ("Import masters page template in new site") {
			JSONGroup.addGroup(groupName = "Site Name");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "site-name");

			MastersPageTemplatesAdmin.importMastersFromTempFolder();
		}

		task ("Assert the Look and Feel Settings are imported") {
			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			Pause(locator1 = "3000");

			AssertChecked.assertCheckedNotVisible(locator1 = "Radio#SPECIFIC_LOOK");

			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Show Footer",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Show Header",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Show Header Search",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Show Maximize/Minimize Application Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Wrap Widget Page Content",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
	}

	@description = "This is a use case for LPS-102207. Can export a master page template containing the edited inline content of fragments and import."
	@priority = "4"
	test ExportImportMastersPageTemplateWithEditedInlineContentOfFragments {
		task ("Add a custom master") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");
		}

		task ("Add fragments to custom master and edit inline content") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Edit",
				masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				dropTarget = "Header",
				fragmentName = "Heading",
				scope = "Master");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Modified Text");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				dropTarget = "Header",
				fragmentName = "HTML",
				scope = "Master");

			PageEditor.editFragmentHTML(
				fileName = "fragment_static_text.html",
				fragmentName = "HTML",
				id = "element-html");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				dropTarget = "Footer",
				fragmentName = "Image",
				scope = "Master");

			PageEditor.editFragmentImage(
				fileName = "Document_1.png",
				fragmentName = "Image",
				id = "image",
				imageDescription = "This is Document 1 png");

			PageEditor.viewFragmentEditableText(
				editableText = "Modified Text",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.viewFragmentEditableText(
				editableText = "This is static text.",
				fragmentName = "HTML",
				id = "element-html");

			PageEditor.viewFragmentEditableImage(
				id = "image",
				imageDescription = "This is Document 1 png",
				imageFileName = "Document_1.png");

			Button.click(button = "Publish Master");

			Alert.viewSuccessMessage();
		}

		task ("Export custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Export",
				masterLayoutName = "Custom Masters Page Template");

			DownloadTempFile();
		}

		task ("Import masters page template in new site") {
			JSONGroup.addGroup(groupName = "Site Name");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "site-name");

			MastersPageTemplatesAdmin.importMastersFromTempFolder();
		}

		task ("Assert the edited inline content of fragments are imported") {
			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			for (var fragmentName : list "Heading,HTML,Image") {
				PageEditor.viewFragment(fragmentName = "${fragmentName}");
			}

			PageEditor.viewFragmentEditableText(
				editableText = "Modified Text",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.viewFragmentEditableText(
				editableText = "This is static text.",
				fragmentName = "HTML",
				id = "element-html");

			PageEditor.viewFragmentEditableImage(
				id = "image",
				imageDescription = "This is Document 1 png",
				imageFileName = "Document_1.png");
		}
	}

	@description = "This is a use case for LPS-106815. The Organization Role permission settings of widgets will be exported and imported with master page template."
	@priority = "4"
	test ExportImportMastersPageTemplateWithOrganizationRolePermissionSettingsOfWidgets {
		property osgi.app.includes = "account";
		property test.name.skip.portal.instance = "MastersPageTemplatesExportImport#ExportImportMastersPageTemplateWithOrganizationRolePermissionSettingsOfWidgets";

		task ("Restart the server") {
			Portlet.shutdownServer();

			Portlet.startServer(deleteLiferayHome = "false");
		}

		task ("Add a organization and organization site") {
			JSONOrganization.addOrganization(
				organizationName = "Organization Name 1",
				organizationSite = "true");
		}

		task ("Add a custom master in organization site") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Organization Name 1 LFR_ORGANIZATION",
				masterPageTemplateEntryName = "Custom Masters Page Template");
		}

		task ("Add a Categories Navigation portlet to master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "organization-name-1");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.addWidget(
				dropTarget = "Header",
				portletName = "Category Filter",
				scope = "Master");
		}

		task ("Configure Organization Role permission settings of Categories Navigation") {
			MouseOver.mouseOverNotVisible(
				key_portletName = "Category Filter",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			Click.waitForMenuToggleJSClick(
				key_portletName = "Category Filter",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			WaitForLiferayEvent.initializeLiferayEventLog();

			MenuItem.click(menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			Check(
				key_roleTitle = "account-manager",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			Button.clickSave();

			Alert.viewSuccessMessage();

			SelectFrameTop();

			Click(locator1 = "Icon#CLOSE");

			Button.click(button = "Publish Master");

			Alert.viewSuccessMessage();
		}

		task ("Export custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "organization-name-1");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Export",
				masterLayoutName = "Custom Masters Page Template");

			DownloadTempFile();
		}

		task ("Import masters page template in new organization site") {
			JSONOrganization.addOrganization(
				organizationName = "Organization Name 2",
				organizationSite = "true");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "organization-name-2");

			MastersPageTemplatesAdmin.importMastersFromTempFolder();
		}

		task ("Assert the Organization Role permission settings of Categories Navigation are imported") {
			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.viewFragment(fragmentName = "Category Filter");

			MouseOver.mouseOverNotVisible(
				key_portletName = "Category Filter",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			Click.waitForMenuToggleJSClick(
				key_portletName = "Category Filter",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			WaitForLiferayEvent.initializeLiferayEventLog();

			MenuItem.click(menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			AssertChecked(
				key_roleTitle = "account-manager",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");
		}
	}

	@description = "This is a use case for LPS-102207. Can export a master page template with the thumbnail and import."
	@priority = "4"
	test ExportImportMastersPageTemplateWithThumbnail {
		task ("Add a custom master") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			Button.click(button = "Publish Master");

			Alert.viewSuccessMessage();
		}

		task ("Change thumbnail of custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Change Thumbnail",
				masterLayoutName = "Custom Masters Page Template");

			ItemSelector.uploadFile(uploadFileName = "Document_1.png");

			LexiconCard.viewCardThumbnail(card = "Custom Masters Page Template");

			SelectFrameTop(value1 = "relative=top");
		}

		task ("Export custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Export",
				masterLayoutName = "Custom Masters Page Template");

			DownloadTempFile();
		}

		task ("Import masters page template in new site") {
			JSONGroup.addGroup(groupName = "Site Name");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "site-name");

			MastersPageTemplatesAdmin.importMastersFromTempFolder();
		}

		task ("Assert the thumbnail of custom master is imported") {
			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Custom Masters Page Template");

			LexiconCard.viewCardThumbnail(card = "Custom Masters Page Template");
		}
	}

	@description = "This is a use case for LPS-102207. The existing entry will be overwriten when import a master page template with thumbnail if check Overwrite Existing Entries."
	@priority = "4"
	test OverwriteExistingEntryWithThumbnailIfCheckOverwriteExistingEntries {
		task ("Add a custom master") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			Button.click(button = "Publish Master");

			Alert.viewSuccessMessage();
		}

		task ("Change thumbnail of custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Change Thumbnail",
				masterLayoutName = "Custom Masters Page Template");

			ItemSelector.uploadFile(uploadFileName = "Document_1.png");

			LexiconCard.viewCardThumbnail(card = "Custom Masters Page Template");

			SelectFrameTop(value1 = "relative=top");
		}

		task ("Export custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Export",
				masterLayoutName = "Custom Masters Page Template");

			DownloadTempFile();
		}

		task ("Import masters page template in the current site") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Import");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			var mastersZipFileName = TestCase.getDownloadedTempFileName(fileNamePattern = "master-page-*.zip");

			UploadTempFile(
				locator1 = "TextInput#FILE",
				value1 = "${mastersZipFileName}");

			AssertChecked(
				checkboxName = "Overwrite Existing Page Templates",
				locator1 = "Checkbox#ANY_CHECKBOX");

			Button.clickImport();

			Alert.viewSuccessMessage();

			IFrame.closeFrame();
		}

		task ("Assert the thumbnail of custom master is imported") {
			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Custom Masters Page Template");

			LexiconCard.viewCardThumbnail(card = "Custom Masters Page Template");
		}
	}

	@description = "This is a use case for LPS-102207. The specific error message should be shown when import a master page template with invalid value in json file."
	@priority = "4"
	test ShowSpecificErrorMessageWhenImportMastersPageTemplateWithInvalidValue {
		task ("Import masters page template with invalid value") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Import");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			UploadDependencyFile.uploadArchiveFile(fileName = "master-page-invalid-value.zip");

			Button.clickImport();
		}

		task ("Assert the specific error message is shown on Import popup") {
			Alert.viewErrorMessage(errorMessage = "No page template could be imported.");

			AssertElementPresent(
				key_dangerInfo = "master-page.json could not be imported because its page definition is invalid.",
				locator1 = "Message#DANGER_INFO");
		}

		task ("Assert custom master is not imported") {
			IFrame.closeFrame();

			LexiconCard.viewCardNotPresent(card = "Custom Masters Page Template");
		}
	}

}