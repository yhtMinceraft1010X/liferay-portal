@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Content Page Name",
			type = "content");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a use case for LPS-109590 and LPS-106776. Assert no Container element is outside when add a Grid element to content page. Can nest a Grid fragment or multiple Grid inside one module of another one."
	@priority = "5"
	@uitest
	test AddGridToColumnOfAnotherGrid {
		property portal.acceptance = "true";

		task ("Assert add Grid without Container") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");

			PageEditor.viewFragmentNotPresent(fragmentName = "Container");
		}

		task ("Assert add the second Grid in module 1 of the first Grid") {
			PageEditor.addElementToColumn(
				collectionName = "Layout Elements",
				columnNumber = "1",
				fragmentName = "Grid",
				navTab = "Fragments");
		}

		task ("Assert add the third Grid in module 1 of the first Grid") {
			PageEditor.addElementToColumn(
				collectionName = "Layout Elements",
				columnNumber = "1",
				fragmentName = "Grid",
				height = "Tall",
				navTab = "Fragments",
				targetFragmentName = "Grid");

			AssertElementPresent(
				key_columnNumber = "1",
				key_elementHeader = "//div[@aria-label='Grid'][2]",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}
	}

	@description = "This is a use case for LPS-108339 and LPS-106776. Can add several Grid elements to Container."
	@priority = "5"
	@uitest
	test AddGridToContainer {
		property portal.acceptance = "true";

		task ("Assert add a Grid element to Container") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");

			PageEditor.addElementToContainer(
				collectionName = "Layout Elements",
				fragmentName = "Grid",
				navTab = "Fragments");
		}

		task ("Add the second Grid element to the bottom of the first Grid inside Container") {
			PageEditor.addElementToContainer(
				collectionName = "Layout Elements",
				fragmentName = "Grid",
				index = "2",
				navTab = "Fragments",
				targetElementName = "Grid");

			AssertElementPresent(
				key_elementHeader = "//div[@aria-label='Grid'][2]",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}
	}

	@description = "This is a test for LPS-110708 and LPS-121112. Can add Grid element into a custom module of anthor one. Assert the height of empty row is greater than 20px after adding element to the resized module of another row."
	@priority = "4"
	test AddGridToCustomModuleOfAnotherGrid {
		task ("Add a Grid to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Move the third module to the second row") {
			PageEditor.clickConfigurableField(fragmentName = "Grid");

			var n = "0";

			while ("${n}" != "4") {
				DragAndDrop.dragAndDrop(
					key_position = "3",
					locator1 = "PageEditor#GRID_COLUMN_RESIZER",
					value1 = "100,0");

				var n = ${n} + 1;
			}

			PageEditor.waitForAutoSave();

			AssertVisible(locator1 = "PageEditor#GRID_COLUMN_FIRST_RESIZER");
		}

		task ("Add a Grid to the third module") {
			PageEditor.addElementToColumn(
				collectionName = "Layout Elements",
				columnNumber = "3",
				fragmentName = "Grid",
				navTab = "Fragments");

			PageEditor.waitForAutoSave();

			AssertElementPresent(
				key_columnNumber = "3",
				key_elementHeader = "//div[@aria-label='Grid']",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}

		task ("Assert the height of the first module is greater than 20px") {
			var moduleHeight = selenium.getElementHeight("//div[@aria-label='Grid']//div[contains(@class,'page-editor__topper__content')]//div[contains(@class,'col-4')]");
			var moduleHeight = StringUtil.replace("${moduleHeight}", "px", "");

			TestUtils.isGreaterThan(
				actual = "${moduleHeight}",
				expected = "20");
		}
	}

	@description = "This is a test for LPS-108463. Assert no Container is outside when add a Grid element to content page template."
	@priority = "4"
	test AddGridWithoutContainerInContentPageTemplate {
		property testray.main.component.name = "Content Page Templates";

		task ("Add a page template collection") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");
		}

		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");
		}

		task ("Add a Grid to content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("View no Container is outside of Grid") {
			PageEditor.viewFragmentNotPresent(fragmentName = "Container");
		}
	}

	@description = "This is a test for LPS-108463. Assert no Container is outside when add a Grid element to display page template."
	@priority = "4"
	test AddGridWithoutContainerInDisplayPageTemplate {
		property testray.main.component.name = "Display Pages";

		task ("Add a display page") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add a Grid to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("View no Container is outside of Grid") {
			PageEditor.viewFragmentNotPresent(fragmentName = "Container");
		}
	}

	@description = "This is a use case for LPS-106776 and LPS-102959. Configure the Grid element."
	@priority = "5"
	@uitest
	test ConfigureGrid {
		property portal.acceptance = "true";

		task ("Add a Grid to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("View the Grid Styles") {
			PageEditor.viewGridStyle(
				columnCount = "3",
				position = "1",
				spaceBetweenColumns = "true");
		}

		task ("Configure the Grid") {
			PageEditor.editLayoutGrid(
				columnCount = "2",
				inverseOrder = "true",
				layout = "1 Module per Row",
				panel = "General",
				spaceBetweenColumns = "false",
				verticalAlignment = "Bottom");
		}

		task ("View the Grid styles") {
			PageEditor.viewGridStyle(
				columnCount = "2",
				inverseOrder = "true",
				layout = "12",
				position = "1",
				spaceBetweenColumns = "false",
				verticalAlignment = "Bottom");
		}

		task ("Duplicate the Gird") {
			PageEditor.gotoDuplicate(fragmentName = "Grid");
		}

		task ("View the duplicate Grid fragment") {
			PageEditor.viewDuplicateFragment(fragmentName = "Grid");
		}
	}

	@description = "This is a test for LPS-107285. Can duplicate the Grid in a Container."
	@priority = "5"
	@uitest
	test DuplicateGridInContainer {
		property portal.acceptance = "true";

		task ("Add a Container to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Container");
		}

		task ("Add a Grid into Container") {
			PageEditor.addElementToContainer(
				collectionName = "Layout Elements",
				fragmentName = "Grid",
				navTab = "Fragments");
		}

		task ("Assert duplicate Grid in the Container") {
			PageEditor.gotoDuplicate(fragmentName = "Grid");

			PageEditor.viewDuplicateFragment(fragmentName = "Grid");

			AssertElementPresent(
				key_elementHeader = "//div[@aria-label='Grid'][2]",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}
	}

	@description = "This is a test for LPS-107285. When the Grid fragment is duplicated, the components in each of modules should also be duplicated."
	@priority = "4"
	test DuplicateGridWithElements {
		task ("Add a Grid to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Add a Web Content Display widget to module 1") {
			PageEditor.gotoTab(tabName = "Widgets");

			Type.sendKeysApplicationSearch(
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_SEARCH_FIELD",
				value1 = "Web Content Display");

			DragAndDrop.javaScriptDragAndDropToObject(
				key_columnNumber = "1",
				key_indexItem = "1",
				key_portletName = "Web Content Display",
				key_position = "1",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_WIDGET",
				locator2 = "PageEditor#GRID_COLUMN",
				value1 = "Web Content Display");

			Pause(locator1 = "5000");

			AssertElementPresent(
				key_columnNumber = "1",
				key_elementHeader = "//div[@aria-label='Web Content Display']",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

			PageEditor.gotoTab(tabName = "Browser");
		}

		task ("Add a Heading fragment to module 2") {
			PageEditor.expandFragmentCollection(collectionName = "Basic Components");

			DragAndDrop.javaScriptDragAndDropToObject(
				key_collectionName = "Basic Components",
				key_columnNumber = "2",
				key_fragmentName = "Heading",
				key_position = "1",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "PageEditor#GRID_COLUMN",
				value1 = "");

			PageEditor.waitForAutoSave();

			AssertElementPresent(
				key_columnNumber = "2",
				key_elementHeader = "//div[@aria-label='Heading']",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}

		task ("Add a Button fragment to module 3") {
			PageEditor.expandFragmentCollection(collectionName = "Basic Components");

			DragAndDrop.javaScriptDragAndDropToObject(
				key_collectionName = "Basic Components",
				key_columnNumber = "3",
				key_fragmentName = "Button",
				key_position = "1",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "PageEditor#GRID_COLUMN",
				value1 = "");

			PageEditor.waitForAutoSave();

			AssertElementPresent(
				key_columnNumber = "3",
				key_elementHeader = "//div[@aria-label='Button']",
				key_position = "1",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}

		task ("Assert nested elements duplicated with Grid") {
			PageEditor.gotoDuplicate(fragmentName = "Grid");

			PageEditor.viewDuplicateFragment(fragmentName = "Grid");

			AssertElementPresent(
				key_columnNumber = "1",
				key_elementHeader = "//div[@aria-label='Web Content Display']",
				key_position = "2",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

			AssertElementPresent(
				key_columnNumber = "2",
				key_elementHeader = "//div[@aria-label='Heading']",
				key_position = "2",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");

			AssertElementPresent(
				key_columnNumber = "3",
				key_elementHeader = "//div[@aria-label='Button']",
				key_position = "2",
				locator1 = "PageEditor#GRID_COLUMN_NESTED_ELEMENT");
		}
	}

	@description = "This is a test for LPS-121078. Resize module of Grid."
	@priority = "4"
	test ResizeModuleOfGrid {
		task ("Add a Grid to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Add a Heading fragment to the second module of Grid") {
			PageEditor.addElementToColumn(
				collectionName = "Basic Components",
				columnNumber = "2",
				fragmentName = "Heading",
				navTab = "Fragments");
		}

		task ("Configure the Heading's style") {
			PageEditor.gotoStyle(fragmentName = "Heading");

			PageEditor.configureFragment(
				alignment = "Center",
				textColor = "Success");

			PageEditor.gotoConfiguration(fragmentName = "Heading");

			PageEditor.configureFragment(headingLevel = "H2");
		}

		task ("View the Heading's style") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "heading",
				headingLevel = "h2",
				textColor = "success");
		}

		task ("Add a Button fragment above the Grid") {
			PageEditor.gotoTab(tabName = "Fragments and Widgets");

			Navigator.gotoNavTab(navTab = "Fragments");

			DragAndDrop.javaScriptDragAndDropToUp(
				key_collectionName = "Basic Components",
				key_fragmentName = "Button",
				key_targetFragmentName = "Grid",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "PageEditor#ANY_FRAGMENT_DROP_TARGET",
				value1 = "");

			PageEditor.waitForAutoSave();
		}

		task ("Configure the Button's style") {
			PageEditor.gotoConfiguration(fragmentName = "Button");

			PageEditor.configureFragment(
				size = "Large",
				type = "Link");

			PageEditor.gotoStyle(fragmentName = "Button");

			PageEditor.configureFragment(alignment = "Center");
		}

		task ("View the Button's style") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "button",
				size = "lg",
				type = "link");
		}

		task ("Resize the modules") {
			PageEditor.clickConfigurableField(fragmentName = "Grid");

			DragAndDrop.dragAndDrop(
				key_position = "3",
				locator1 = "PageEditor#GRID_COLUMN_RESIZER",
				value1 = "100,0");

			PageEditor.waitForAutoSave();
		}

		task ("Assert the width of modules") {
			PageEditor.viewGridStyle(
				columnCount = "3",
				position = "1");

			AssertElementPresent(locator1 = "//div[@aria-label='Grid']//div[contains(@class,'page-editor__topper__content')]//div[contains(@class,'col-4')][1]");

			AssertElementNotPresent(locator1 = "//div[@aria-label='Grid']//div[contains(@class,'page-editor__topper__content')]//div[contains(@class,'col-4')][2]");

			AssertElementNotPresent(locator1 = "//div[@aria-label='Grid']//div[contains(@class,'page-editor__topper__content')]//div[contains(@class,'col-4')][3]");

			var thirdModuleWidth = selenium.getElementWidth("xpath=(//div[contains(@class,'page-editor__col__border')])[3]");

			TestUtils.assertNotEquals(
				actual = "${thirdModuleWidth}",
				expected = "0");
		}

		task ("View the Heading's style") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "heading",
				headingLevel = "h2",
				textColor = "success");
		}

		task ("View the Button's style") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "button",
				size = "lg",
				type = "link");
		}

		task ("Assert the width of modules in view mode") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			for (var n : list "1,2,3") {
				AssertElementPresent(locator1 = "//div[contains(@class,'container-fluid')]/div[contains(@class,'row')]//div[contains(@class,'col')][${n}]");
			}

			AssertElementPresent(locator1 = "//div[contains(@class,'col-md-4')][1]");

			AssertElementNotPresent(locator1 = "//div[contains(@class,'col-md-4')][2]");

			AssertElementNotPresent(locator1 = "//div[contains(@class,'col-md-4')][3]");

			var thirdModuleWidth = selenium.getElementWidth("//div[contains(@class,'container-fluid')]/div[contains(@class,'row')]//div[contains(@class,'col-12')][3]");

			TestUtils.assertNotEquals(
				actual = "${thirdModuleWidth}",
				expected = "0");
		}

		task ("View the Heading's style in view mode") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "Heading",
				headingLevel = "h2",
				textColor = "success");
		}

		task ("View the Button's style in view mode") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "button",
				size = "lg",
				type = "link");
		}
	}

	@description = "This is a use case for LPS-146029. View the defined layout style of Grid in the non-desktop viewport."
	@priority = "4"
	test ViewDefinedGridLayoutStyleInNonDesktopViewport {
		property test.name.skip.portal.instance = "Grid#ViewDefinedGridLayoutStyleInNonDesktopViewport";

		task ("Add a Grid to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Change the Number of Modules to 6") {
			PageEditor.editLayoutGrid(
				columnCount = "6",
				panel = "General");
		}

		task ("Change to the Landscape Phone viewport") {
			PageEditor.switchViewport(deviceType = "Landscape Phone");
		}

		task ("View Grid styles in Landscape Phone viewport") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#PAGE_EDITOR_GLOBAL_CONTEXT_IFRAME");

			PageEditor.viewGridStyle(
				columnCount = "6",
				layout = "12",
				position = "1");

			SelectFrame(value1 = "relative=top");
		}

		task ("Change the Layout to 2 Modules per Row") {
			Select(
				key_fieldLabel = "Layout",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "2 Modules per Row");
		}

		task ("View edited Grid styles in shown") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#PAGE_EDITOR_GLOBAL_CONTEXT_IFRAME");

			PageEditor.viewGridStyle(
				columnCount = "6",
				layout = "6",
				position = "1");
		}
	}

}