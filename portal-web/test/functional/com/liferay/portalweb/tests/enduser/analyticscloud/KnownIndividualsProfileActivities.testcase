@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();

		ACUtils.addSiteAndPage();

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8942 | Test Summary: Assert that a User can't create a Custom Range past 365 days max for Individuals"
	@ignore = "true"
	@priority = "2"
	test AssertIndividualsTimeFIlterInvalidCustom {
		property portal.upstream = "quarantine";

		// AC Quarantine Reason: Active individuals chart takes time to load
		// AC Quarantine: Can be validated through personas

		task ("Sign in as new user to view the site page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Go to the Individual > KnownIndividual > Overview") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();

			ACIndividualsDashboard.goToKnownIndividualDetails(individualName = "ac ac");
		}

		task ("Select a Custom Range time period in Active Individuals chart") {
			ACTimeFilter.setCustomRange(
				endDay = "2",
				endMonth = "July",
				endYear = "2020",
				invalid = "true",
				startDay = "1",
				startMonth = "July",
				startYear = "2019");
		}

		task ("Assert that a user can't create a Custom Range past 365 days max for Individuals") {
			ACTimeFilter.assertCurrentTimeFilterRange(
				invalid = "true",
				timeFilterRangeWarning = "This exceeds the maximum range of 365 days.");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LLRAC-8940 | Test Summary: Assert Chart ticks for Individuals Metrics standardized"
	@priority = "3"
	test AssertIndividualTicksDateFormat {
		property portal.upstream = "quarantine";

		// AC Quarantine Reason: Active individuals chart takes time to load

		task ("Sign in as new user to view the site page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Go to the Individual > KnownIndividual > Details") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();

			ACIndividualsDashboard.goToKnownIndividualDetails(individualName = "ac ac");
		}

		task ("View the time period is Last 30 days in individuals metrics chart") {
			ACTimeFilter.assertCurrentTimeFilterRange(
				cardName = "Individual Events",
				timeFilterRange = "Last 30 days");
		}

		task ("View the interval is D in individuals metrics chart") {
			ACCards.viewSelectedInterval(
				cardName = "Individual Events",
				interval = "D");
		}

		task ("View the format of recharts xAxis ticks is MMM d") {
			var date = ACCards.getAxisTick(
				axis = "xAxis",
				cardName = "Individual Events");

			ACUtils.assertDatePattern(
				date = "${date}",
				format = "MMM d");
		}

		task ("Select the W in interval selector") {
			ACCards.selectInterval(
				cardName = "Individual Events",
				interval = "W");
		}

		task ("View the format of recharts xAxis ticks is MMM d - MMM d or MMM d - d") {
			var date = ACCards.getAxisTick(
				axis = "xAxis",
				cardName = "Individual Events");

			var dateLength = StringUtil.length("${date}");

			if (("${dateLength}" == "9") || ("${dateLength}" == "10") || ("${dateLength}" == "11")) {
				ACUtils.assertDatePattern(
					date = "${date}",
					format = "MMM d - d");
			}
			else {
				ACUtils.assertDatePattern(
					date = "${date}",
					format = "MMM d - MMM d");
			}
		}

		task ("Select the M in interval selector") {
			ACCards.selectInterval(
				cardName = "Individual Events",
				interval = "M");
		}

		task ("View the format of recharts xAxis ticks is MMM") {
			var date = ACCards.getAxisTick(
				axis = "xAxis",
				cardName = "Individual Events");

			ACUtils.assertDatePattern(
				date = "${date}",
				format = "MMM");
		}

		task ("Select the Last 24 hours time period in individuals metrics chart") {
			ACTimeFilter.clickTimeFilterButton(cardName = "Individual Events");

			ACTimeFilter.setLast24Hours();
		}

		task ("View the interval option buttons are disabled") {
			for (var interval : list "D,W,M") {
				AssertVisible(
					key_text = "${interval}",
					locator1 = "Button#ANY_DISABLED");
			}
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8941 | Test Summary: Assert Known Individual Chart Popover follows format"
	@priority = "3"
	test AssertKnownIndividualChartPopover {
		property portal.upstream = "quarantine";

		// AC Quarantine Reason: Active individuals chart takes time to load

		task ("Sign in as new user to view the site page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Go to the Individual > KnownIndividual > Overview") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();

			ACIndividualsDashboard.goToKnownIndividualDetails(individualName = "ac ac");
		}

		task ("Assert chart popover date formatted") {
			var formattedDate = ACIndividualsDashboard.getChartPopoverDateWithoutBar();

			ACUtils.assertDatePattern(
				date = "${formattedDate}",
				format = "yyyy MMM dd");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8124 | Test Summary: Individual activities graph shows activities from today when switched to 24 hour view"
	@priority = "5"
	test GraphShowsIndividualActivitiesFromTodayWhenSwitchedTo24HourView {
		property portal.upstream = "quarantine";

		// AC Quarantine Reason: Active individuals chart takes time to load

		task ("Create a Document And Media") {
			ACUtils.createDMAndAddToPage();
		}

		task ("Sign in as AC user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");
		}

		task ("Visit the document") {
			ACUtils.navigateToSitePage(
				actionType = "View DM",
				documentTitleList = "DM AC Title,DM AC Title,DM AC Title,DM AC Title",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Go to the Individual and KnownIndividuals tab") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();
		}

		task ("Open item") {
			ACNavigation.openItem(itemName = "ac ac");
		}

		task ("Select the Last 24 hours time period in individuals metrics chart") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("View the charts bar with individuals activities") {
			ACIndividualsDashboard.viewRechartsBarOnIndividualsActivitiesChart();
		}
	}

}