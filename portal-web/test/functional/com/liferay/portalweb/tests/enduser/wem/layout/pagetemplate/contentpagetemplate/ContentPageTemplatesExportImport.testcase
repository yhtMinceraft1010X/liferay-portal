@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Page Templates";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a use case for LPS-106212. Can not export multiple selected page templates if one of them is widget page template."
	@priority = "4"
	test CannotExportMultipleWhenOneOfSelectedIsWidgetPageTemplate {
		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Add a Heading fragment then publish") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.clickPublish();
		}

		task ("Add a widget page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Widget Page Template Name",
				layoutPageTemplateStatus = "Approved",
				layoutPageTemplateType = "Widget Page Template");
		}

		task ("Assert workflow status of both and select them") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			for (var entry : list "Page Template Name,Widget Page Template Name") {
				PageTemplatesAdmin.viewEntryWorkflowStatus(
					entry = "${entry}",
					workflowStatus = "Approved");

				PageTemplatesAdmin.selectPageTemplate(pageTemplateName = "${entry}");
			}
		}

		task ("Assert Export button is disabled") {
			AssertElementPresent(
				key_text = "upload",
				locator1 = "Icon#ANY_DISABLED");
		}
	}

	@description = "This is a use case for LPS-106212. Can not export multiple selected content page templates when one of them doesn't has published version."
	@priority = "4"
	test CannotExportMultipleWhenOneOfSelectedWithoutPublishedVersion {
		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Add a Heading fragment then publish") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.clickPublish();
		}

		task ("Add a second content page template but not publish") {
			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Second Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Second Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Assert workflow status of both and select them") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.viewEntryWorkflowStatus(
				entry = "Page Template Name",
				workflowStatus = "Approved");

			PageTemplatesAdmin.viewEntryWorkflowStatus(
				entry = "Second Page Template Name",
				workflowStatus = "Draft");

			for (var entry : list "Page Template Name,Second Page Template Name") {
				PageTemplatesAdmin.selectPageTemplate(pageTemplateName = "${entry}");
			}
		}

		task ("Assert Export button is disabled") {
			AssertElementPresent(
				key_text = "upload",
				locator1 = "Icon#ANY_DISABLED");
		}
	}

	@description = "This is a use case for LPS-106212. Can export a content page template based on custom master and import."
	@priority = "4"
	@uitest
	test ExportImportContentPageTemplateBasedOnCustomMaster {
		task ("Add a custom master with Heading then Publish") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.addMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				dropTarget = "Header",
				fragmentName = "Heading",
				scope = "Master");

			Button.click(button = "Publish Master");

			Alert.viewSuccessMessage();
		}

		task ("Add a content page template based on custom master") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template",
				masterLayoutEntryName = "Custom Masters Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			AssertVisible(
				key_fragmentName = "heading",
				locator1 = "PageEditor#FRAGMENT_INHERITED_FROM_CUSTOM_MASTERS");

			PageEditor.clickPublish();
		}

		task ("Export content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.viewEntryWorkflowStatus(
				entry = "Page Template Name",
				workflowStatus = "Approved");

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Export",
				pageTemplateName = "Page Template Name");

			DownloadTempFile();
		}

		task ("Add a custom master have the same name in a new site") {
			JSONGroup.addGroup(groupName = "Site Name");

			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "site-name");

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Edit",
				masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				dropTarget = "Header",
				fragmentName = "Button",
				scope = "Master");

			Button.click(button = "Publish Master");

			Alert.viewSuccessMessage();
		}

		task ("Import content page template in new site") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			PageTemplatesAdmin.importPageTemplatesFromTempFolder();
		}

		task ("Assert only the reference of custom master is exported and imported") {
			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Page Template Name");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			AssertElementNotPresent(
				key_fragmentName = "heading",
				locator1 = "PageEditor#FRAGMENT_INHERITED_FROM_CUSTOM_MASTERS");

			AssertVisible(
				key_fragmentName = "button",
				locator1 = "PageEditor#FRAGMENT_INHERITED_FROM_CUSTOM_MASTERS");

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			AssertTextEquals(
				key_masterLayoutName = "Custom Masters Page Template",
				locator1 = "PagesAdmin#MASTER_LAYOUT_NAME",
				value1 = "Custom Masters Page Template");
		}
	}

	@description = "This is a use case for LPS-107748. Can export a content page template with custom fragments and import."
	@priority = "4"
	test ExportImportContentPageTemplateWithCustomFragment {
		task ("Add a fragment collection via JSON") {
			JSONFragment.addFragmentCollection(
				groupName = "Test Site Name",
				name = "Collection Name");
		}

		task ("Add a section fragment to the fragment collection via JSON") {
			JSONFragment.addSection(
				collectionName = "Collection Name",
				groupName = "Test Site Name",
				name = "Title");
		}

		task ("Edit content of new fragment") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdminNavigator.gotoEntryEllipsisItem(
				entry = "Title",
				item = "Edit");

			FragmentsEditor.typeFileContent(fileName = "fragment_title.html");

			FragmentsEditor.typeFileContent(fileName = "fragment_title.css");

			PortletEntry.publish();
		}

		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Add the new fragment to content page template") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title");

			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "Lorem ipsum dolor sit amet",
				fragmentName = "Title");

			PageEditor.clickPublish();
		}

		task ("Export content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Export",
				pageTemplateName = "Page Template Name");

			DownloadTempFile();
		}

		task ("Export new fragment") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdmin.exportCollection(collectionName = "Collection Name");

			DownloadTempFile();
		}

		task ("Import new fragment to a new site") {
			JSONGroup.addGroup(groupName = "Site Name");

			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "site-name");

			FragmentsAdmin.importCollectionFromTempFolder();

			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "site-name");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdmin.viewEntryPresent(entry = "Title");
		}

		task ("Import content page template to the new site") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			PageTemplatesAdmin.importPageTemplatesFromTempFolder();

			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Page Template Name");
		}

		task ("Assert new fragment is shown in content page template") {
			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "Lorem ipsum dolor sit amet",
				fragmentName = "Title");
		}
	}

	@description = "This is a use case for LPS-106212. Can export a content page template with the custom Look and Feel and import."
	@priority = "4"
	test ExportImportContentPageTemplateWithCustomLookAndFeel {
		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Set up Look and Feel") {
			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			Theme.configureLookAndFeelSpecificLook();

			Theme.configureLookAndFeelShowFooter(showFooter = "false");

			Theme.configureLookAndFeelShowHeader(showHeader = "false");

			Theme.configureLookAndFeelShowHeaderSearch(showHeaderSearch = "false");

			Theme.configureLookAndFeelShowMaxMinAppLinks(showMaxMinAppLinks = "true");

			Theme.configureLookAndFeelWrapWidgetPageContent(wrapWidgetPageContent = "false");

			PortletEntry.save();

			Navigator.gotoBack();

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.clickPublish();
		}

		task ("Export content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.viewEntryWorkflowStatus(
				entry = "Page Template Name",
				workflowStatus = "Approved");

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Export",
				pageTemplateName = "Page Template Name");

			DownloadTempFile();
		}

		task ("Import content page template in a new site") {
			JSONGroup.addGroup(groupName = "Site Name");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			PageTemplatesAdmin.importPageTemplatesFromTempFolder();
		}

		task ("Assert the Look and Feel Setting is imported") {
			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Page Template Name");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			Pause(locator1 = "3000");

			AssertChecked.assertCheckedNotVisible(locator1 = "Radio#SPECIFIC_LOOK");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_toggleSwitchLabel = "Show Footer",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_toggleSwitchLabel = "Show Header",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_toggleSwitchLabel = "Show Header Search",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertChecked.assertCheckedNotVisible(
				key_toggleSwitchLabel = "Show Maximize/Minimize Application Links",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_toggleSwitchLabel = "Wrap Widget Page Content",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");
		}
	}

	@description = "This is a use case for LPS-106815. The Team Role permission settings of widgets will be exported and imported with content page template."
	@priority = "4"
	test ExportImportContentPageTemplateWithTeamRolePermissionSettingsOfWidgets {
		task ("Add a Team in site") {
			Site.openSiteTeamsAdmin(siteURLKey = "test-site-name");

			Team.addCP(
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");
		}

		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Add a Sites Directory portlet to content page template") {
			PageEditor.addWidget(portletName = "Sites Directory");
		}

		task ("Configure Team Role permission settings of Sites Directory") {
			MouseOver.mouseOverNotVisible(
				key_portletName = "Sites Directory",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			Click.waitForMenuToggleJSClick(
				key_portletName = "Sites Directory",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			MenuItem.click(menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			Team.definePermissionPG(
				permissionDefinitionKey = "ACTION_VIEW",
				teamName = "Site Team Name");

			Button.clickSave();

			Alert.viewSuccessMessage();

			SelectFrameTop();

			Click(locator1 = "Icon#CLOSE");

			PageEditor.clickPublish();
		}

		task ("Export content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Export",
				pageTemplateName = "Page Template Name");

			DownloadTempFile();
		}

		task ("Export Team") {
			Site.openSiteTeamsAdmin(siteURLKey = "test-site-name");

			LAR.exportTeam(larFileName = "Site Team Name");
		}

		task ("Import Team in a new site") {
			JSONGroup.addGroup(groupName = "Site Name");

			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			LAR.importTeam(larFileName = "Site Team Name");
		}

		task ("Import content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			PageTemplatesAdmin.importPageTemplatesFromTempFolder();
		}

		task ("Assert Team Role permission settings of widgets are imported") {
			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Page Template Name");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			WaitForLiferayEvent.initializeLiferayEventLog();

			MouseOver.mouseOverNotVisible(
				key_portletName = "Sites Directory",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			Click.waitForMenuToggleJSClick(
				key_portletName = "Sites Directory",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			MenuItem.click(menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			AssertChecked(locator1 = "//tr[contains(.,'Site Team Name')]/td/input[contains(@id,'ACTION_VIEW')]");
		}
	}

	@description = "This is a test for LPS-128399. Selected Stylebook is exported when exporting a page template."
	@priority = "4"
	test ExportImportPageTemplateWithStylebook {
		task ("Add a style book") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "test-site-name");

			StyleBooksAdmin.addStyleBooks(styleBookName = "Test Style Book Name");
		}

		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Select Style Book from Page Design Options and Publish") {
			PageEditor.gotoTab(tabName = "Page Design Options");

			StyleBooks.selectStyleBookViaPageDesignOptions(styleBookName = "Test Style Book Name");

			PageEditor.clickPublish();
		}

		task ("Export content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Export",
				pageTemplateName = "Page Template Name");

			DownloadTempFile();
		}

		task ("Delete the page template collection") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			PageTemplatesAdmin.deletePageTemplateSet(setName = "Page Template Collection");
		}

		task ("Import the previously exported page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Import");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			var pageTemplateZipFileName = TestCase.getDownloadedTempFileName(fileNamePattern = "page-template-*.zip");

			UploadTempFile(
				locator1 = "TextInput#FILE",
				value1 = "${pageTemplateZipFileName}");

			Button.clickImport();

			Alert.viewSuccessMessage();
		}

		task ("Edit the page template to check whether the stylebook is still applied") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.gotoTab(tabName = "Page Design Options");

			AssertElementPresent(
				key_card = "Test Style Book Name",
				locator1 = "Card#CARD_SELECTED");
		}
	}

	@description = "This is a use case for LPS-107748. Can export a content page template with custom fragments and import."
	@priority = "4"
	test IgnoreFragmentNotExistInSiteWhenImportContentPageTemplate {
		task ("Add a fragment collection via JSON") {
			JSONFragment.addFragmentCollection(
				groupName = "Test Site Name",
				name = "Collection Name");
		}

		task ("Add a section fragment to the fragment collection via JSON") {
			JSONFragment.addSection(
				collectionName = "Collection Name",
				groupName = "Test Site Name",
				name = "Title");
		}

		task ("Edit content of new fragment") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdminNavigator.gotoEntryEllipsisItem(
				entry = "Title",
				item = "Edit");

			FragmentsEditor.typeFileContent(fileName = "fragment_title.html");

			FragmentsEditor.typeFileContent(fileName = "fragment_title.css");

			PortletEntry.publish();
		}

		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Add the new fragment to content page template") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Title");

			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "Lorem ipsum dolor sit amet",
				fragmentName = "Title");

			PageEditor.clickPublish();
		}

		task ("Export content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Export",
				pageTemplateName = "Page Template Name");

			DownloadTempFile();
		}

		task ("Export new fragment") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdmin.exportCollection(collectionName = "Collection Name");

			DownloadTempFile();
		}

		task ("Import content page template to the new site") {
			JSONGroup.addGroup(groupName = "Site Name");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Import");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			var pageTemplateZipFileName = TestCase.getDownloadedTempFileName(fileNamePattern = "page-template-*.zip");

			UploadTempFile(
				locator1 = "TextInput#FILE",
				value1 = "${pageTemplateZipFileName}");

			Button.clickImport();

			Alert.viewSuccessMessage();
		}

		task ("Assert specific warning message is shown in Import popup") {
			Alert.viewWarningSpecific(warningMessage = "Some page templates were imported with warnings.");

			AssertElementPresent(
				key_warningInfo = "Fragment with key Title was ignored because it does not exist.",
				locator1 = "Message#WARNING_INFO");
		}

		task ("Assert new fragment is not shown in content page template") {
			IFrame.closeFrame();

			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Page Template Name");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.viewFragmentNotPresent(fragmentName = "Title");
		}

		task ("Import new fragment to a new site") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "site-name");

			FragmentsAdmin.importCollectionFromTempFolder();

			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "site-name");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdmin.viewEntryPresent(entry = "Title");
		}

		task ("Assert new fragment is not shown in content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.viewFragmentNotPresent(fragmentName = "Title");
		}
	}

	@description = "This is a use case for LPS-129107 Unable to import a page template that includes a deleted fragment."
	@priority = "4"
	test ImportContentPageTemplateThatIncludesDeletedFragment {
		task ("Create a new test fragment.") {
			JSONFragment.addFragmentCollection(
				groupName = "Test Site Name",
				name = "Collection Name");

			JSONFragment.addSection(
				collectionName = "Collection Name",
				fragmentStatus = "Approved",
				groupName = "Test Site Name",
				name = "Fragment Name");
		}

		task ("Create a new page template.") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");
		}

		task ("Add the test page fragment and 2 heading to the page template.") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Fragment Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				targetFragmentName = "Fragment Name");

			PageEditor.clickPublish();
		}

		task ("Export the template.") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Export",
				pageTemplateName = "Page Template Name");

			DownloadTempFile();
		}

		task ("Delete the template.") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.deletePageTemplate(pageTemplateName = "Page Template Name");
		}

		task ("Delete the test page fragment.") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdmin.deleteEntry(entry = "Fragment Name");
		}

		task ("Import the exported page template.") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Import");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			var pageTemplateZipFileName = TestCase.getDownloadedTempFileName(fileNamePattern = "page-template-*.zip");

			UploadTempFile(
				locator1 = "TextInput#FILE",
				value1 = "${pageTemplateZipFileName}");

			Button.clickImport();

			Alert.viewSuccessMessage();

			Alert.viewWarningSpecific(warningMessage = "Some page templates were imported with warnings");
		}

		task ("Assert Template has been imported without the deleted fragment.") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.viewFragmentNotPresent(fragmentName = "Fragment Name");

			PageEditor.viewFragment(fragmentName = "Heading");
		}
	}

	@description = "This is a use case for LPS-106212. Can export a content page template in draft status when it has published version and only the published version is exported."
	@priority = "4"
	test OnlyPublishedVersionIsExported {
		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Add a Heading fragment and edit inline content then publish") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "New editable fragment text");

			PageEditor.clickPublish();
		}

		task ("Assert content page template has Approved label") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.viewEntryWorkflowStatus(
				entry = "Page Template Name",
				workflowStatus = "Approved");
		}

		task ("Edit inline content of Heading in content page template but not publish") {
			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Modified Text");
		}

		task ("Assert content page template has Draft label") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.viewEntryWorkflowStatus(
				entry = "Page Template Name",
				workflowStatus = "Draft");
		}

		task ("Export content page template") {
			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Export",
				pageTemplateName = "Page Template Name");

			DownloadTempFile();
		}

		task ("Import content page template in a new site") {
			JSONGroup.addGroup(groupName = "Site Name");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			PageTemplatesAdmin.importPageTemplatesFromTempFolder();
		}

		task ("Assert only published version is imported") {
			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Page Template Name");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.viewFragmentEditableText(
				editableText = "New editable fragment text",
				fragmentName = "Heading",
				id = "element-text");
		}
	}

	@description = "This is a use case for LPS-106815. The specific message will be shown when import content page template where the widget has permission settings for a Role if it doesn't exist in site."
	@priority = "4"
	test ShowSpecificWarningMessageWhenImportContentPageTemplateWithPermissionSettingsOfWidgetsToSiteWhereTheSpecificRoleNotExist {
		task ("Add a organization and organization site") {
			JSONOrganization.addOrganization(
				organizationName = "Organization Name",
				organizationSite = "true");
		}

		task ("Add a content page template to organization site") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Organization Name LFR_ORGANIZATION",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Organization Name LFR_ORGANIZATION",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "organization-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Add a Sites Directory portlet to content page template") {
			PageEditor.addWidget(portletName = "RSS Publisher");
		}

		task ("Configure Team Role permission settings of Sites Directory") {
			MouseOver.mouseOverNotVisible(
				key_portletName = "RSS Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			Click.waitForMenuToggleJSClick(
				key_portletName = "RSS Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			MenuItem.click(menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			Check(
				key_roleTitle = "account-manager",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

			Button.clickSave();

			Alert.viewSuccessMessage();

			SelectFrameTop();

			Click(locator1 = "Icon#CLOSE");

			PageEditor.clickPublish();
		}

		task ("Export content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "organization-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Export",
				pageTemplateName = "Page Template Name");

			DownloadTempFile();
		}

		task ("Import content page template in a normal site") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			MenuItem.click(menuItem = "Import");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			var pageTemplateZipFileName = TestCase.getDownloadedTempFileName(fileNamePattern = "page-template-*.zip");

			UploadTempFile(
				locator1 = "TextInput#FILE",
				value1 = "${pageTemplateZipFileName}");

			Button.clickImport();

			Alert.viewSuccessMessage();
		}

		task ("Assert specific warning message is shown in Import popup") {
			Alert.viewWarningSpecific(warningMessage = "Some page templates were imported with warnings.");

			AssertElementPresent(
				key_warningInfo = "Role with key Account Manager was ignored because it does not exist.",
				locator1 = "Message#WARNING_INFO");
		}

		task ("Assert Account Manager is not shown in permissions panel of RSS Publisher") {
			IFrame.closeFrame();

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Page Template Name");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			MouseOver.mouseOverNotVisible(
				key_portletName = "RSS Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			Click.waitForMenuToggleJSClick(
				key_portletName = "RSS Publisher",
				locator1 = "Portlet#SPECIFIC_BORDERLESS_ELLIPSIS_ICON");

			MenuItem.click(menuItem = "Permissions");

			IFrame.selectPermissionsFrame();

			AssertElementNotPresent(
				key_roleName = "Account Manager",
				locator1 = "Permissions#CONFIGURATION_PERMISSIONS_ROLE_NAME");
		}
	}

}