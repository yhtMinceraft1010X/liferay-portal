@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8462 | Test Summary: Inform the User when there are no disabled Segments"
	@priority = "3"
	test AssertUserIsInformedWhenThereAreNoDisabledSegments {
		property test.name.skip.portal.instance = "SegmentsList#AssertUserIsInformedWhenThereAreNoDisabledSegments";

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Go to Segments and filter by "Disable Segments"") {
			ACNavigation.goToSegments();

			ACSegments.filterAndOrderForSegLists(filterName = "Disabled Segments");
		}

		task ("Assert there is message There are no Segments found.") {
			ACUtils.viewGenericText(textValueList = "There are no results found.,Please try a different search term.");
		}
	}

	@description = "Search for specific segment"
	@priority = "5"
	test CanSearchForSegment {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "SegmentsList#CanSearchForSegment";

		var usernameList = "ac,userea";
		var emailList = "ac@liferay.com,userea@liferay.com";

		for (var name : list "${usernameList}") {
			JSONUser.addUser(
				userEmailAddress = "${name}@liferay.com",
				userFirstName = "${name}",
				userLastName = "${name}",
				userScreenName = "${name}");
		}

		ACDXPSettings.syncNewContactData();

		ACUtils.navigateToSitePageWithUser(
			emailList = "${emailList}",
			pageName = "AC Page",
			siteName = "Site Name");

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

		ACNavigation.goToSegments();

		ACSegments.createStaticSegment();

		ACUtils.setItemName(itemName = "Static Segment Test");

		ACSegments.addStaticMember(tableMember = "ac ac");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.createStaticSegment();

		ACUtils.setItemName(itemName = "Static Segment Test 2");

		ACSegments.addStaticMember(tableMember = "userea userea");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.viewSegmentName(searchTerm = "Static Segment Test");

		ACSegments.viewSegmentName(searchTerm = "Static Segment Test 2");

		ACSegments.deleteSegment(searchTerm = "Static Segment Test");

		ACSegments.deleteSegment(searchTerm = "Static Segment Test 2");
	}

	@description = "Search for specific segment"
	@priority = "5"
	test CanShowSegmentList {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "SegmentsList#CanShowSegmentList";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ACUtils.navigateToSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

		ACNavigation.goToSegments();

		ACSegments.createStaticSegment();

		ACUtils.setItemName(itemName = "Static Segment Test");

		ACSegments.addStaticMember(tableMember = "userfn userln");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACUtils.setItemName(itemName = "Dynamic Segment Test");

		ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

		ACSegments.addSegmentField(segmentField = "email");

		ACSegments.editTextCriterion(textInput = "userea@liferay.com");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.assertSegmentPresent(segmentName = "Static Segment Test");

		ACSegments.assertSegmentPresent(segmentName = "Dynamic Segment Test");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8578 | Test Summary: Order the Segment List By Membership"
	@priority = "4"
	test OrderSegmentListByMembership {
		property portal.upstream = "quarantine";

		// AC Quarantine Reason: Segment membership takes long time to load
		// AC refactor ticket: LRAC-10769

		var usernameList = "user1,user2,user3";
		var emailList = "user1@liferay.com,user2@liferay.com,user3@liferay.com";

		for (var name : list "${usernameList}") {
			JSONUser.addUser(
				userEmailAddress = "${name}@liferay.com",
				userFirstName = "${name}",
				userLastName = "${name}",
				userScreenName = "${name}");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "${name}@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as different users") {
			ACUtils.navigateToSitePageWithUser(
				emailList = "${emailList}",
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add 3 new Static Segments") {
			for (var segmentName : list "Static Segment Test1,Static Segment Test2,Static Segment Test3") {
				ACNavigation.goToSegments();

				ACSegments.createStaticSegment();

				ACUtils.setItemName(itemName = "${segmentName}");

				if ("${segmentName}" == "Static Segment Test1") {
					ACSegments.addStaticMultiMember(tableMember = "user1 user1,user2 user2,user3 user3");
				}

				if ("${segmentName}" == "Static Segment Test2") {
					ACSegments.addStaticMultiMember(tableMember = "user1 user1,user2 user2");
				}

				if ("${segmentName}" == "Static Segment Test3") {
					ACSegments.addStaticMultiMember(tableMember = "user1 user1");
				}

				ACSegments.saveSegment();
			}
		}

		task ("Go to Segments and filter by 'Membership'") {
			ACNavigation.goToSegments();

			ACSegments.filterAndOrderForSegLists(filterName = "Membership");
		}

		task ("Assert 3 segments in order filter by membership display") {
			ACUtils.viewNameListInOrder(
				index = "1",
				name = "Static Segment Test1");

			ACUtils.viewNameListInOrder(
				index = "2",
				name = "Static Segment Test2");

			ACUtils.viewNameListInOrder(
				index = "3",
				name = "Static Segment Test3");
		}

		task ("Check descending arrow descending of table title of Membership") {
			ACUtils.orderTableTitleArrow(type = "up");
		}

		task ("Assert 3 segments in order filter by membership display") {
			ACUtils.viewNameListInOrder(
				index = "1",
				name = "Static Segment Test3");

			ACUtils.viewNameListInOrder(
				index = "2",
				name = "Static Segment Test2");

			ACUtils.viewNameListInOrder(
				index = "3",
				name = "Static Segment Test1");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8460 | Test Summary: Order the Segment List By Name"
	@priority = "4"
	test OrderSegmentListByName {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "SegmentsList#OrderSegmentListByName";

		task ("Add a new user in DXP") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as different users") {
			var fullName = "userfn userln";

			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "${fullName}");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add 3 new Static Segments") {
			for (var segmentName : list "Static Segment Test1,Static Segment Test2,Static Segment Test3") {
				ACNavigation.goToSegments();

				ACSegments.createStaticSegment();

				ACUtils.setItemName(itemName = "${segmentName}");

				ACSegments.addStaticMember(tableMember = "userfn userln");

				ACSegments.saveSegment();
			}
		}

		task ("Go to Segments and filter by 'Name'") {
			ACNavigation.goToSegments();

			ACSegments.filterAndOrderForSegLists(filterName = "Name");
		}

		task ("Assert 3 segments filter by name display") {
			ACUtils.viewNameListInOrder(
				index = "1",
				name = "Static Segment Test1");

			ACUtils.viewNameListInOrder(
				index = "2",
				name = "Static Segment Test2");

			ACUtils.viewNameListInOrder(
				index = "3",
				name = "Static Segment Test3");
		}

		task ("Go to Segments and filter by descending order of 'Name'") {
			ACNavigation.goToSegments();

			ACUtils.orderArrow(type = "descending");
		}

		task ("Assert 3 segments in order filter by membership display") {
			ACUtils.viewNameListInOrder(
				index = "1",
				name = "Static Segment Test3");

			ACUtils.viewNameListInOrder(
				index = "2",
				name = "Static Segment Test2");

			ACUtils.viewNameListInOrder(
				index = "3",
				name = "Static Segment Test1");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8461 | Test Summary: Paginate Segment list"
	@priority = "3"
	test PaginateSegmentList {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "SegmentsList#PaginateSegmentList";

		task ("Add a new user in DXP") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as different users") {
			var fullName = "userfn userln";

			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "${fullName}");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add 6 new Static Segments") {
			for (var segmentName : list "Static Segment Test1,Static Segment Test2,Static Segment Test3,Static Segment Test4,Static Segment Test5,Static Segment Test6") {
				ACNavigation.goToSegments();

				ACSegments.createStaticSegment();

				ACUtils.setItemName(itemName = "${segmentName}");

				ACSegments.addStaticMember(tableMember = "userfn userln");

				ACSegments.saveSegment();
			}
		}

		task ("Assert 6 segments display") {
			ACNavigation.goToSegments();

			for (var segmentName : list "Static Segment Test1,Static Segment Test2,Static Segment Test3,Static Segment Test4,Static Segment Test5,Static Segment Test6") {
				ACSegments.assertSegmentPresent(segmentName = "${segmentName}");
			}
		}

		task ("Assert default pagination display '20 Items' message and page number") {
			AssertTextEquals.assertText(
				locator1 = "ACUtils#PAGINATION_ITEMS_PER_PAGE_SELECT",
				value1 = "20 Items");

			ACUtils.viewResultsMessage(results = "Showing 1 to 6 of 6 entries.");

			ACUtils.viewResultsPages(pageNumber = "1");
		}

		task ("Change the pagination to "5"") {
			ACUtils.changePagination(itemsPerPage = "5");

			for (var segmentName : list "Static Segment Test1,Static Segment Test2,Static Segment Test3,Static Segment Test4,Static Segment Test5") {
				ACSegments.assertSegmentPresent(segmentName = "${segmentName}");
			}

			ACUtils.viewResultsMessage(results = "Showing 1 to 5 of 6 entries.");

			ACUtils.viewResultsPages(pageNumber = "1");

			ACUtils.viewResultsPages(pageNumber = "2");
		}

		task ("Page number display 1 2 and check previous next button") {
			ACUtils.checkPreviousNextButton(nextButton = "true");

			ACUtils.viewResultsMessage(results = "Showing 6 to 6 of 6 entries.");

			ACSegments.assertSegmentPresent(segmentName = "Static Segment Test6");

			ACUtils.checkPreviousNextButton(previousButton = "true");

			ACUtils.viewResultsMessage(results = "Showing 1 to 5 of 6 entries.");
		}
	}

}