@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");

			JSONUser.tearDownNonAdminUsers();
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8483 | Test Summary: Add members from different pages"
	@priority = "3"
	test CanAddMembersFromDifferentPages {
		property analytics.cloud.upstream = "false";

		var usernameList = "user1,user2,user3,user4,user5";
		var emailList = "userea@liferay.com,user1@liferay.com,user2@liferay.com,user3@liferay.com,user4@liferay.com,user5@liferay.com";

		task ("Add 5 more new users") {
			for (var name : list "${usernameList}") {
				JSONUser.addUser(
					userEmailAddress = "${name}@liferay.com",
					userFirstName = "${name}",
					userLastName = "${name}",
					userScreenName = "${name}");

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "${name}@liferay.com");
			}
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as different users") {
			ACUtils.navigateToSitePageWithUser(
				emailList = "${emailList}",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new static segment") {
			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();
		}

		task ("Type the segment name") {
			ACUtils.setItemName(itemName = "Static Segment Test");
		}

		task ("Select the 5 items in Add Members modal") {
			Click(locator1 = "ACSegments#ADD_MEMBERS_BUTTON");

			ACUtils.changePagination(itemsPerPage = "5");
		}

		task ("Add the user1 user1 as member") {
			Click(
				key_tableMember = "user1 user1",
				locator1 = "ACSegments#TABLE_CHECKBOX");

			Click(locator1 = "ACSegments#ADD_BUTTON");
		}

		task ("Select the 5 items in Add Members modal") {
			Click(locator1 = "ACSegments#ADD_MEMBERS_BUTTON");

			ACUtils.changePagination(itemsPerPage = "5");
		}

		task ("Navigate to page 2") {
			ACUtils.checkAnyPage(pageNumber = "2");
		}

		task ("Add the userfn userln as member") {
			Click(
				key_tableMember = "userfn userln",
				locator1 = "ACSegments#TABLE_CHECKBOX");

			Click(locator1 = "ACSegments#ADD_BUTTON");
		}

		task ("Create the segment") {
			ACSegments.saveSegment();
		}

		task ("View members of segment") {
			ACNavigation.switchTab(tabName = "Membership");

			for (var username : list "user1 user1,userfn userln") {
				AssertVisible(
					key_userName = "${username}",
					locator1 = "ACSegments#SEGMENT_MEMBERS");
			}
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8476 | Test Summary: Cancel Creating a Dynamic Segment"
	@priority = "3"
	test CanCancelCreatingDynamicSegment {
		property analytics.cloud.upstream = "false";

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");
		}

		task ("Add an email field") {
			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "email");

			ACSegments.editTextCriterion(textInput = "userea@liferay.com");
		}

		task ("Cancel the creation") {
			ACSegments.cancelSegment();

			Button.click(button = "Leave Page");
		}

		task ("View the empty info in Segments admin") {
			ACUtils.viewGenericText(textValueList = "There are no segments found.,Create a segment to get started.,Access our documentation to learn more.");

			AssertVisible(locator1 = "ACSegments#CREATE_SEGMENT_BUTTON");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8477 | Test Summary: Cancel creating a static segment"
	@priority = "3"
	test CanCancelCreatingStaticSegment {
		property analytics.cloud.upstream = "false";

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new static segment") {
			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();

			ACUtils.setItemName(itemName = "Static Segment Test");
		}

		task ("Add the new user as member") {
			ACSegments.addStaticMember(tableMember = "userfn userln");
		}

		task ("Cancel the creation") {
			ACSegments.cancelSegment();

			Button.click(button = "Leave Page");
		}

		task ("View the empty info in Segments admin") {
			ACUtils.viewGenericText(textValueList = "There are no segments found.,Create a segment to get started.,Access our documentation to learn more.");

			AssertVisible(locator1 = "ACSegments#CREATE_SEGMENT_BUTTON");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8478 | Test Summary: Create a Dynamic Individuals Segment By Date"
	@priority = "4"
	test CanCreateDynamicIndividualsSegmentByDate {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "SegmentsCreation#CanCreateDynamicIndividualsSegmentByDate";

		var fullNameList = "userfn userln,user1 user1";

		task ("Add one more user with a given birth date") {
			JSONUser.addUser(
				birthdayDay = "10",
				birthdayMonth = "10",
				birthdayYear = "2020",
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as different users") {
			ACUtils.navigateToSitePageWithUser(
				emailList = "userea@liferay.com,user1@liferay.com",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions and wait for 30 seconds") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");
		}

		task ("Add a birthDate field") {
			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "birthDate");

			ACSegments.selectOperator(operator = "is after");

			ACSegments.editDateCriterion(
				day = "14",
				month = "September",
				year = "1985");
		}

		task ("Create the segment") {
			ACSegments.saveSegment();
		}

		task ("Navigate to Segments") {
			ACNavigation.goToSegments();
		}

		task ("Search the new segment") {
			ACUtils.searchBar(searchItem = "Dynamic Segment Test");

			ACSegments.accessSegment(segmentName = "Dynamic Segment Test");
		}

		task ("View the segment criteria card") {
			ACSegments.viewSegmentCriteriaIndividualAttributes(
				attributeName = "birthDate",
				attributeValue = "1985-09-14",
				condition = "is after");
		}

		task ("Switch tab to membership and check the membership list") {
			ACNavigation.switchTab(tabName = "Membership");

			ACUtils.viewNameList(nameList = "${fullNameList}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8481 | Test Summary: Create a Dynamic Individuals Segment with a criteria that uses a boolean and a does not contain"
	@priority = "4"
	test CanCreateDynamicSegmentWithIndividualCriteriaUsesBooleanAndDoesNotContain {
		property portal.upstream = "quarantine";

		// AC Quarantine Reason: The membership list takes a long time to update
		// AC Refactor ticket: LRAC-10769

		property test.name.skip.portal.instance = "SegmentsCreation#CanCreateDynamicSegmentWithIndividualCriteriaUsesBooleanAndDoesNotContain";

		var usernameList = "user1,user2,user3";
		var emailList = "user1@liferay.com,user2@liferay.com,user3@liferay.com";

		task ("Add three more new users") {
			for (var name : list "${usernameList}") {
				JSONUser.addUser(
					userEmailAddress = "${name}@liferay.com",
					userFirstName = "${name}",
					userLastName = "${name}",
					userScreenName = "${name}");

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "${name}@liferay.com");
			}
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as different users") {
			ACUtils.navigateToSitePageWithUser(
				emailList = "${emailList}",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions and wait for 30 seconds") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a CSV Data Source") {
			ACSettings.addCSVDataSource(
				dataSourceName = "CSV Gender",
				sourceFileName = "contacts_doNotCall.csv");
		}

		task ("Exit Settings") {
			ACNavigation.exitSettings();
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");
		}

		task ("Add a jobTitle criteria from Individual Attributes") {
			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "jobTitle");

			ACSegments.selectOperator(operator = "does not contain");

			ACSegments.editTextCriterion(textInput = "Doctor");
		}

		task ("Add a male criteria from Individual Attributes") {
			ACSegments.addSegmentField(segmentField = "doNotCall");

			ACSegments.editWebBehaviorCriterion(
				activitiesOption = "False",
				indexField = "2");
		}

		task ("Create the segment") {
			ACSegments.saveSegment();
		}

		task ("Navigate to Segments admin") {
			ACNavigation.goToSegments();
		}

		task ("Search the new segment") {
			ACUtils.searchBar(searchItem = "Dynamic Segment Test");

			ACSegments.accessSegment(segmentName = "Dynamic Segment Test");
		}

		task ("View the segment criteria card") {
			ACSegments.viewSegmentCriteriaIndividualAttributes(
				attributeName = "jobTitle",
				attributeValue = '''"Doctor"''',
				condition = "does not contain",
				conjunction = "AND");

			ACSegments.viewSegmentCriteriaIndividualAttributes(
				attributeName = "doNotCall",
				attributeValue = "FALSE",
				condition = "is",
				index = "2");
		}

		task ("Switch tab to membership and check the membership list") {
			ACNavigation.switchTab(tabName = "Membership");

			ACUtils.viewNameList(nameList = "user3 user3");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8480 | Test Summary: Create a Dynamic Individuals Segment with a criteria that uses is known and is not"
	@priority = "4"
	test CanCreateDynamicSegmentWithIndividualCriteriaUsesIsKnownAndIsNot {
		property portal.upstream = "quarantine";

		// AC Quarantine Reason: The membership list takes a long time to update
		// AC Refactor ticket: LRAC-10769

		property test.name.skip.portal.instance = "SegmentsCreation#CanCreateDynamicSegmentWithIndividualCriteriaUsesIsKnownAndIsNot";

		var usernameList = "user1,user2,user3";
		var emailList = "user1@liferay.com,user2@liferay.com,user3@liferay.com";
		var membershipList = "user1 user1,user3 user3";

		task ("Add three more new users") {
			for (var name : list "${usernameList}") {
				JSONUser.addUser(
					userEmailAddress = "${name}@liferay.com",
					userFirstName = "${name}",
					userLastName = "${name}",
					userScreenName = "${name}");

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "${name}@liferay.com");
			}
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as different users") {
			ACUtils.navigateToSitePageWithUser(
				emailList = "${emailList}",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions and wait for 30 seconds") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a CSV Data Source") {
			ACSettings.addCSVDataSource(
				dataSourceName = "CSV Country",
				sourceFileName = "contacts_country.csv");
		}

		task ("Exit Settings") {
			ACNavigation.exitSettings();
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");
		}

		task ("Add the first country criteria from Individual Attributes") {
			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "country");

			ACSegments.selectOperator(operator = "is not");

			ACSegments.editTextCriterion(textInput = "USA");
		}

		task ("Add the second country criteria from Individual Attributes") {
			ACSegments.addSegmentField(segmentField = "country");

			ACSegments.editWebBehaviorCriterion(
				activitiesOption = "is known",
				indexField = "2");
		}

		task ("Create the segment") {
			ACSegments.saveSegment();
		}

		task ("Navigate to Segments admin") {
			ACNavigation.goToSegments();
		}

		task ("Search the new segment") {
			ACUtils.searchBar(searchItem = "Dynamic Segment Test");

			ACSegments.accessSegment(segmentName = "Dynamic Segment Test");
		}

		task ("View the segment criteria card") {
			ACSegments.viewSegmentCriteriaIndividualAttributes(
				attributeName = "country",
				attributeValue = '''"USA"''',
				condition = "is not",
				conjunction = "AND");

			ACSegments.viewSegmentCriteriaIndividualAttributes(
				attributeName = "country",
				condition = "is known",
				index = "2");
		}

		task ("Switch tab to membership and check the membership list") {
			ACNavigation.switchTab(tabName = "Membership");

			ACUtils.viewNameList(nameList = "${membershipList}");
		}
	}

	@description = "Create a dynamic segment with individuals"
	@priority = "5"
	test CanCreateDynamicSegmentWithIndividuals {
		property portal.upstream = "quarantine";

		// AC Quarantine Reason: Segment membership takes long time to load LRAC-10769

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACUtils.setItemName(itemName = "Dynamic Segment Test");

		ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

		ACSegments.addSegmentField(segmentField = "email");

		ACSegments.editTextCriterion(textInput = "userea@liferay.com");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Dynamic Segment Test");

		ACNavigation.switchTab(tabName = "Membership");

		AssertTextEquals(
			locator1 = "ACSegments#SEGMENT_LABEL",
			value1 = "DYNAMIC SEGMENT");

		AssertElementPresent(
			key_userName = "userfn userln",
			locator1 = "ACSegments#SEGMENT_MEMBERS");
	}

	@description = "Create a Dynamic Individuals Segment with a criteria that uses is unknown"
	@priority = "5"
	test CanCreateDynamicSegmentWithIndividualsUseUnknown {
		property portal.upstream = "quarantine";

		// AC Quarantine Reason: Segment membership takes long time to load LRAC-10769

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACUtils.setItemName(itemName = "Dynamic Segment Test");

		ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

		ACSegments.addSegmentField(segmentField = "fullName");

		ACSegments.editFormControlCriterion(
			criterionName = "fullName",
			option = "is unknown");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Dynamic Segment Test");

		ACNavigation.switchTab(tabName = "Membership");

		AssertTextEquals(
			locator1 = "ACSegments#SEGMENT_LABEL",
			value1 = "DYNAMIC SEGMENT");

		AssertElementPresent(
			key_userName = "userfn userln",
			locator1 = "ACSegments#SEGMENT_MEMBERS");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8482 | Test Summary: Create a nested criteria"
	@priority = "3"
	test CanCreateNestedCriteria {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "SegmentsCreation#CanCreateNestedCriteria";

		var usernameList = "userea,user1,test";
		var emailList = "userea@liferay.com,user1@liferay.com,test@liferay.com";
		var fullNameList = "userfn userln,Test Test,user1 user1";

		task ("Add one more user with a given birth date") {
			JSONUser.addUser(
				birthdayDay = "10",
				birthdayMonth = "10",
				birthdayYear = "2020",
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as different users") {
			ACUtils.navigateToSitePageWithUser(
				emailList = "${emailList}",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions and wait for 30 seconds") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");
		}

		task ("Add an email criteria from Individual Attributes") {
			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "email");

			ACSegments.selectOperator(operator = "contains");

			ACSegments.editTextCriterion(textInput = "@liferay.com");
		}

		task ("Add a birthDate criteria from Individual Attributes") {
			ACSegments.addSegmentField(segmentField = "birthDate");

			ACSegments.selectOperator(
				index = "2",
				operator = "is after");

			ACSegments.editDateCriterion(
				day = "10",
				month = "September",
				year = "2000");
		}

		task ("Add a userName criteria from Individual Attributes nested in email") {
			ACSegments.addNestedSegmentField(
				index = "2",
				segmentField = "additionalName");

			ACSegments.selectOperator(
				index = "3",
				operator = "does not contain");

			ACSegments.editTextCriterion(
				index = "3",
				textInput = "@liferay.com");
		}

		task ("View the first conjunction") {
			ACSegments.viewConjunction(conjunction = "And");
		}

		task ("Change the second conjunction to OR") {
			ACSegments.editConjunction(index = "2");

			ACSegments.viewConjunction(
				conjunction = "Or",
				index = "2");
		}

		task ("Save the segment") {
			ACSegments.saveSegment();
		}

		task ("Navigate to Segments admin") {
			ACNavigation.goToSegments();
		}

		task ("Search the new segment") {
			ACUtils.searchBar(searchItem = "Dynamic Segment Test");

			ACUtils.viewNameList(nameList = "Dynamic Segment Test");

			ACSegments.accessSegment(segmentName = "Dynamic Segment Test");
		}

		task ("View both criterias in Segment Criteria card") {
			ACSegments.viewSegmentCriteriaIndividualAttributes(
				attributeName = "email",
				attributeValue = '''"@liferay.com"''',
				condition = "contains",
				conjunction = "AND");

			ACSegments.viewSegmentCriteriaIndividualAttributes(
				attributeName = "birthDate",
				attributeValue = "2000-09-10",
				condition = "is after",
				conjunction = "OR",
				index = "2");

			ACSegments.viewSegmentCriteriaIndividualAttributes(
				attributeName = "additionalName",
				attributeValue = '''"@liferay.com"''',
				condition = "does not contain",
				index = "2",
				key_indexNested = "2");
		}

		task ("Switch tab to membership and check the membership list") {
			ACNavigation.switchTab(tabName = "Membership");

			ACUtils.viewNameList(nameList = "${fullNameList}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-7962 | Test Summary: Create a segment that contains anonymous individuals"
	@priority = "5"
	test CanCreateSegmentWithAnonymousIndividuals {
		var usernameList = "ac,liferay,dxp";
		var emailList = "ac@liferay.com,liferay@liferay.com,dxp@liferay.com";
		var nameList = "ac ac,liferay liferay,dxp dxp";

		task ("Add new users") {
			for (var username : list "${usernameList}") {
				JSONUser.addUser(
					userEmailAddress = "${username}@liferay.com",
					userFirstName = "${username}",
					userLastName = "${username}",
					userScreenName = "${username}");

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "${username}@liferay.com");
			}
		}

		task ("Login with users and view the site page") {
			ACUtils.navigateToSitePageWithUser(
				emailList = "${emailList}",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");
		}

		task ("Mark anonymous toggle") {
			ACSegments.includeAnonymous();
		}

		task ("Add an fullName criteria from Individual Attributes") {
			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "fullName");

			ACSegments.editFormControlCriterion(
				criterionName = "fullName",
				option = "is unknown");
		}

		task ("Save the segment") {
			ACSegments.saveSegment();
		}

		task ("Navigate to Segments admin") {
			ACNavigation.goToSegments();
		}

		task ("Access the new segment") {
			ACSegments.accessSegment(segmentName = "Dynamic Segment Test");
		}

		task ("View include anonymous label") {
			ACSegments.viewIncludeAnonymousLabel();
		}

		task ("Switch tab to membership and check the membership list") {
			ACNavigation.switchTab(tabName = "Membership");

			ACUtils.viewGenericText(textValueList = "There are no members found on the selected time period.,Check back later to verify if data has been received from your data sources.Learn more about individuals.");
		}

		task ("Edit the segment") {
			ACNavigation.goToSegments();

			ACSegments.editSegment(segmentName = "Dynamic Segment Test");
		}

		task ("View preview number") {
			ACSegments.viewPreviewNumber(previewNumber = "3");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8479 | Test Summary: Create a Segment with a Number Property"
	@priority = "4"
	test CanCreateSegmentWithNumberProperty {
		property portal.upstream = "quarantine";

		// AC Quarantine Reason: The membership list takes a long time to update
		// AC Refactor ticket: LRAC-10769

		property test.name.skip.portal.instance = "SegmentsCreation#CanCreateSegmentWithNumberProperty";

		var usernameList = "user1,user2,user3";
		var emailList = "user1@liferay.com,user2@liferay.com,user3@liferay.com";
		var membershipList = "user1 user1,user3 user3";

		task ("Add three more new users") {
			for (var name : list "${usernameList}") {
				JSONUser.addUser(
					userEmailAddress = "${name}@liferay.com",
					userFirstName = "${name}",
					userLastName = "${name}",
					userScreenName = "${name}");

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "${name}@liferay.com");
			}
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as different users") {
			ACUtils.navigateToSitePageWithUser(
				emailList = "${emailList}",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions and wait for 30 seconds") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a CSV Data Source") {
			ACSettings.addCSVDataSource(
				dataSourceName = "CSV Age",
				fieldName = "age",
				fieldType = "Number",
				newField = "true",
				selectAnalyticsCloudField = "true",
				sourceFileName = "contacts_age.csv");
		}

		task ("Exit Settings") {
			ACNavigation.exitSettings();
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");
		}

		task ("Add an age criteria from Individual Attributes") {
			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "age");

			ACSegments.selectOperator(operator = "less than");

			ACSegments.editNumberCriterion(numberInput = "40");
		}

		task ("Create the segment") {
			ACSegments.saveSegment();
		}

		task ("Navigate to Segments admin") {
			ACNavigation.goToSegments();
		}

		task ("Search the new segment") {
			ACUtils.searchBar(searchItem = "Dynamic Segment Test");

			ACSegments.accessSegment(segmentName = "Dynamic Segment Test");
		}

		task ("View the segment criteria card") {
			ACSegments.viewSegmentCriteriaIndividualAttributes(
				attributeName = "age",
				attributeValue = "40",
				condition = "less than");
		}

		task ("Switch tab to membership and check the membership list") {
			ACNavigation.switchTab(tabName = "Membership");

			ACUtils.viewNameList(nameList = "${membershipList}");
		}
	}

	@description = "Create a static segment with individual"
	@priority = "5"
	test CanCreateStaticSegmentWithIndividuals {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "SegmentsCreation#CanCreateStaticSegmentWithIndividuals";

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

		ACNavigation.goToSegments();

		ACSegments.createStaticSegment();

		ACUtils.setItemName(itemName = "Static Segment Test");

		ACSegments.addStaticMember(tableMember = "userfn userln");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.accessSegment(segmentName = "Static Segment Test");

		ACNavigation.switchTab(tabName = "Membership");

		AssertTextEquals(
			locator1 = "ACSegments#SEGMENT_LABEL",
			value1 = "STATIC SEGMENT");

		AssertElementPresent(
			key_userName = "userfn userln",
			locator1 = "ACSegments#SEGMENT_MEMBERS");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8474 | Test Summary: Duplicate a criteria"
	@priority = "3"
	test CanDuplicateCriteria {
		property test.name.skip.portal.instance = "SegmentsCreation#CanDuplicateCriteria";

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");
		}

		task ("Add a jobTitle field") {
			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "jobTitle");
		}

		task ("Duplicate the criteria") {
			ACSegments.duplicateSegmentCriteria(criteriaName = "jobTitle");
		}

		task ("View the both criterias") {
			ACSegments.viewDuplicatedCriteria(
				criteriaName = "jobTitle",
				totalCriteriaCount = "2");
		}

		task ("Define the first criteria") {
			ACSegments.selectOperator(operator = "contains");

			ACSegments.editTextCriterion(textInput = "web developer");
		}

		task ("Define the second criteria") {
			ACSegments.selectOperator(
				index = "2",
				operator = "contains");

			ACSegments.editTextCriterion(
				index = "2",
				textInput = "lawyer");
		}

		task ("Save the segment") {
			ACSegments.saveSegment();
		}

		task ("View both criterias in Segment Criteria card") {
			ACSegments.viewSegmentCriteriaIndividualAttributes(
				attributeName = "jobTitle",
				attributeValue = '''"web developer"''',
				condition = "contains",
				conjunction = "AND");

			ACSegments.viewSegmentCriteriaIndividualAttributes(
				attributeName = "jobTitle",
				attributeValue = '''"lawyer"''',
				condition = "contains",
				index = "2");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8471 | Test Summary: Paginate Segment Profile in Membership List"
	@priority = "3"
	test CanPaginateSegmentProfileInMembershipList {
		property portal.upstream = "quarantine";

		// AC Quarantine Reason: The membership list takes a long time to update
		// AC Refactor ticket: LRAC-10769

		property test.name.skip.portal.instance = "SegmentsCreation#CanPaginateSegmentProfileInMembershipList";

		var usernameList = "user1,user2,user3,user4,user5";
		var emailList = "userea@liferay.com,user1@liferay.com,user2@liferay.com,user3@liferay.com,user4@liferay.com,user5@liferay.com";
		var nameList = "userfn userln,user1 user1,user2 user2,user3 user3,user4 user4";

		task ("Add 5 more new users") {
			for (var name : list "${usernameList}") {
				JSONUser.addUser(
					userEmailAddress = "${name}@liferay.com",
					userFirstName = "${name}",
					userLastName = "${name}",
					userScreenName = "${name}");

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "${name}@liferay.com");
			}
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as different users") {
			ACUtils.navigateToSitePageWithUser(
				emailList = "${emailList}",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");
		}

		task ("Add an email field") {
			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "email");

			ACSegments.selectOperator(operator = "contains");

			ACSegments.editTextCriterion(textInput = "@liferay.com");

			ACSegments.saveSegment();
		}

		task ("Return the segment list and access the segment") {
			ACNavigation.goToSegments();

			ACSegments.accessSegment(segmentName = "Dynamic Segment Test");
		}

		task ("Navigate to Membership tab") {
			ACNavigation.switchTab(tabName = "Membership");
		}

		task ("View all users are shown in current page") {
			ACUtils.viewNameList(nameList = "${nameList},user5 user5");
		}

		task ("Select the 5 Items in Pagination") {
			ACUtils.changePagination(itemsPerPage = "5");
		}

		task ("View only 5 users are shown in page 1") {
			ACUtils.viewNameList(nameList = "${nameList}");

			AssertElementNotPresent(
				key_nameList = "user5 user5",
				locator1 = "ACUtils#NAME_LIST");
		}

		task ("Navigate to the page 2") {
			ACUtils.checkAnyPage(pageNumber = "2");
		}

		task ("View the user5 user5 is shown in page 2") {
			ACUtils.viewNameList(nameList = "user5 user5");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8472 | Test Summary: Paginate static segment 'Add Members' creation model"
	@priority = "3"
	test CanPaginateStaticSegmentAddMembers {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "SegmentsCreation#CanPaginateStaticSegmentAddMembers";

		var usernameList = "user1,user2,user3,user4,user5";
		var emailList = "userea@liferay.com,user1@liferay.com,user2@liferay.com,user3@liferay.com,user4@liferay.com,user5@liferay.com";
		var nameList = "user1 user1,user2 user2,user3 user3,user4 user4,user5 user5";

		task ("Add 5 more new users") {
			for (var name : list "${usernameList}") {
				JSONUser.addUser(
					userEmailAddress = "${name}@liferay.com",
					userFirstName = "${name}",
					userLastName = "${name}",
					userScreenName = "${name}");

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "${name}@liferay.com");
			}
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as different users") {
			ACUtils.navigateToSitePageWithUser(
				emailList = "${emailList}",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new static segment") {
			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();
		}

		task ("View the Pagination is 10 items in Add Members modal") {
			Click(locator1 = "ACSegments#ADD_MEMBERS_BUTTON");

			ACUtils.viewPaginationItemsPerPage(itemsPerPage = "10");
		}

		task ("View all users are shown in current page") {
			ACUtils.viewNameList(nameList = "${nameList},userfn userln");
		}

		task ("Select the 5 items in Add Members modal") {
			ACUtils.changePagination(itemsPerPage = "5");
		}

		task ("View only 5 users are shown in current page") {
			ACUtils.viewNameList(nameList = "${nameList}");

			AssertElementNotPresent(
				key_tableMember = "userfn userln",
				locator1 = "ACSegments#TABLE_CHECKBOX");
		}

		task ("Navigate to the page 2") {
			ACUtils.checkAnyPage(pageNumber = "2");
		}

		task ("View the userfn userln is shown in modal") {
			ACUtils.viewNameList(nameList = "userfn userln");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8475 | Test Summary: Dynamic segment members preview in real time"
	@priority = "3"
	test CanPreviewDynamicSegmentMembers {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "SegmentsCreation#CanPreviewDynamicSegmentMembers";

		var emailList = "userea@liferay.com,user1@liferay.com";
		var usernameList = "userfn userln,user1 user1";

		task ("Add one more user with a jobTitle") {
			JSONUser.addUser(
				jobTitle = "lawyer",
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as different users") {
			ACUtils.navigateToSitePageWithUser(
				emailList = "${emailList}",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");
		}

		task ("Add an email criteria") {
			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "email");

			ACSegments.selectOperator(operator = "contains");

			ACSegments.editTextCriterion(textInput = "@liferay.com");
		}

		task ("View two users are shown on the Preview mode") {
			ACSegments.previewSegmentMembership();

			ACUtils.viewNameList(nameList = "${usernameList}");

			Click.mouseDownMouseUp(locator1 = "Modal#CLOSE_BUTTON");
		}

		task ("Add a jobTitle criteria") {
			ACSegments.addSegmentField(segmentField = "jobTitle");

			ACSegments.editTextCriterion(
				index = "2",
				textInput = "lawyer");
		}

		task ("View only one user is shown on Preview mode") {
			ACSegments.previewSegmentMembership();

			ACUtils.viewNameList(nameList = "user1 user1");

			AssertElementNotPresent(
				key_nameList = "userfn userln",
				locator1 = "ACUtils#NAME_LIST");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8473 | Test Summary: Filter the Segment 'Add Members' Modal"
	@priority = "3"
	test CanSearchUserInAddMembersModal {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "SegmentsCreation#CanSearchUserInAddMembersModal";

		var emailList = "userea@liferay.com,user1@liferay.com";

		task ("Add one more user with a given birth date") {
			JSONUser.addUser(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as different users") {
			ACUtils.navigateToSitePageWithUser(
				emailList = "${emailList}",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new static segment") {
			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();
		}

		task ("Search username in Add Members modal") {
			Click(locator1 = "ACSegments#ADD_MEMBERS_BUTTON");

			ACUtils.searchBar(searchItem = "userfn userln");
		}

		task ("View only the userea shown in modal") {
			ACUtils.viewNameList(nameList = "userfn userln");

			AssertElementNotPresent(
				key_nameList = "user1 user1",
				locator1 = "ACUtils#NAME_LIST");
		}

		task ("Search email in Add Members modal") {
			ACUtils.clearSearchBar();

			ACUtils.searchBar(searchItem = "user1@liferay.com");
		}

		task ("View only the user1 shown in modal") {
			ACUtils.viewNameList(nameList = "user1 user1");

			AssertElementNotPresent(
				key_nameList = "userfn userln",
				locator1 = "ACUtils#NAME_LIST");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8133 | Test Summary: Create button shows option to create static or dynamic"
	@priority = "5"
	test CanSeeOptionsToCreateStaticOrDynamicSegment {
		property test.name.skip.portal.instance = "SegmentsCreation#CanSeeOptionsToCreateStaticOrDynamicSegment";

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

		ACNavigation.goToSegments();

		Click(locator1 = "ACSegments#CREATE_SEGMENT_BUTTON");

		for (var segmentType : list "Dynamic Segment,Static Segment") {
			var getFirst = StringUtil.extractFirst("${segmentType}", " ");
			var getFirst = StringUtil.upperCase("${getFirst}");

			AssertTextEquals(
				key_segmentType = "${getFirst}",
				locator1 = "ACSegments#SELECT_SEGMENT_TYPE",
				value1 = "${segmentType}");
		}

		ACSegments.selectSegmentType(segmentType = "STATIC");

		AssertTextEquals(
			locator1 = "ACSegments#SEGMENT_LABEL",
			value1 = "STATIC SEGMENT");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		AssertTextEquals(
			locator1 = "ACSegments#SEGMENT_LABEL",
			value1 = "DYNAMIC SEGMENT");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8484 | Test Summary: Segment Form Validation"
	@priority = "5"
	test ViewSegmentFormValidation {
		property test.name.skip.portal.instance = "SegmentsCreation#ViewSegmentFormValidation";

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new static segment") {
			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();
		}

		task ("View the Create button is disabled when the Name field is empty") {
			AssertVisible(
				key_text = "Create",
				locator1 = "Button#ANY_DISABLED");
		}

		task ("Type the segment name") {
			ACUtils.setItemName(itemName = "Static Segment Test");
		}

		task ("View the Create button is still disabled when there are no individuals") {
			AssertTextEquals(
				locator1 = "ACSegments#NO_MEMBER_TITLE",
				value1 = "There are no Individuals found.");

			AssertVisible(
				key_text = "Create",
				locator1 = "Button#ANY_DISABLED");
		}

		task ("Cancel the creation") {
			ACSegments.cancelSegment();

			ACUtils.viewGenericText(textValueList = "There are no segments found.,Create a segment to get started.,Access our documentation to learn more.");
		}

		task ("Add a new dynamic segment") {
			ACSegments.createDynamicSegment();
		}

		task ("View the Save Segment button is disabled when the Name field is empty") {
			AssertVisible(
				key_text = "Save Segment",
				locator1 = "Button#ANY_DISABLED");
		}

		task ("Type the segment name") {
			ACUtils.setItemName(itemName = "Dynamic Segment Test");
		}

		task ("View the Save Segment button is still disabled when the form is empty") {
			ACSegments.viewDeletedCriteria();

			AssertTextPresent(
				locator1 = "//body",
				value1 = "Drag and drop over an existing criteria to form groups.");

			AssertVisible(
				key_text = "Save Segment",
				locator1 = "Button#ANY_DISABLED");
		}
	}

}