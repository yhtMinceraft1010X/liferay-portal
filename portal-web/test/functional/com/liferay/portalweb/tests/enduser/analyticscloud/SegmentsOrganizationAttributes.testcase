@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();

		ACUtils.addSiteAndPage();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8548 | Test Summary: Add segment using an organization property 'date modified'"
	@ignore = "true"
	@priority = "4"
	test CanCreateSegmentUsingOrganizationPropertyDateModified {

		// AC Refactor: Team not sure of which steps should be done to assert Date modified
		// AC Refactor ticket: LRAC-9277

		task ("Add user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add organization and add the user to the organization") {
			JSONOrganization.addOrganization(organizationName = "Organization Name");

			JSONOrganization.assignUserToOrganization(
				organizationName = "Organization Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Connect to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Launch AC and enter in the new property") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new segment using the organization property date modified") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");

			ACSegments.goToSidebarAttributes(criterion = "Organization Attributes");

			ACSegments.addSegmentField(segmentField = "Date Modified");

			ACSegments.saveSegment();
		}

		task ("Assert Date Modified is present in Segment Criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Date Modified");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8550 | Test Summary: Add segment using an organization property 'hierarchy path'"
	@ignore = "true"
	@priority = "4"
	test CanCreateSegmentUsingOrganizationPropertyHierarchyPath {

		// AC Refactor: Team not sure of which values or what steps are expected in this test
		// AC Refactor ticket: LRAC-9279

		task ("Add users") {
			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");

			JSONUser.addUser(
				userEmailAddress = "userea2@liferay.com",
				userFirstName = "userfn2",
				userLastName = "userln2",
				userScreenName = "usersn2");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea2@liferay.com");

			JSONUser.addUser(
				userEmailAddress = "userea3@liferay.com",
				userFirstName = "userfn3",
				userLastName = "userln3",
				userScreenName = "usersn3");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea3@liferay.com");

			JSONUser.addUser(
				userEmailAddress = "userea4@liferay.com",
				userFirstName = "userfn4",
				userLastName = "userln4",
				userScreenName = "usersn4");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea4@liferay.com");

			JSONUser.addUser(
				userEmailAddress = "userea5@liferay.com",
				userFirstName = "userfn5",
				userLastName = "userln5",
				userScreenName = "usersn5");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea5@liferay.com");
		}

		task ("Add organization and add the user to the organization") {
			JSONOrganization.addOrganization(organizationName = "Organization Name 1");

			JSONOrganization.assignUserToOrganization(
				organizationName = "Organization Name 1",
				userEmailAddress = "userea1@liferay.com");

			JSONOrganization.addOrganization(
				organizationName = "Organization Name 11}",
				parentOrganizationName = "Organization Name 1");

			JSONOrganization.addOrganization(
				organizationName = "Organization Name 111}",
				parentOrganizationName = "Organization Name 11");
		}

		task ("Connect to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Launch AC and enter in the new property") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new segment using the organization property Hierarchy Path") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");

			ACSegments.goToSidebarAttributes(criterion = "Organization Attributes");

			ACSegments.addSegmentField(segmentField = "Hierarchy Path");

			ACSegments.addOrganizationName(organizationName = "Test Hierarchy Path");

			ACSegments.saveSegment();
		}

		task ("Assert Hierarchy Path is present in Segment Criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Hierarchy Path");
		}

		task ("Assert Test Hierarchy Path is also present in segment criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Test Hierarchy Path");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8549 | Test Summary: Add segment using an organization property 'name'"
	@ignore = "true"
	@priority = "4"
	test CanCreateSegmentUsingOrganizationPropertyName {

		// AC Refactor: Team not sure of which steps should be done to assert property Name, please check steps and update if necessary
		// AC Refactor ticket: LRAC-9278

		task ("Add users") {
			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");

			JSONUser.addUser(
				userEmailAddress = "userea2@liferay.com",
				userFirstName = "userfn2",
				userLastName = "userln2",
				userScreenName = "usersn2");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea2@liferay.com");
		}

		task ("Add organization and add the user to the organization") {
			JSONOrganization.addOrganization(organizationName = "Organization Name 1");

			JSONOrganization.assignUserToOrganization(
				organizationName = "Organization Name 1",
				userEmailAddress = "userea1@liferay.com");

			JSONOrganization.addOrganization(organizationName = "Organization Name 2");

			JSONOrganization.assignUserToOrganization(
				organizationName = "Organization Name 2",
				userEmailAddress = "userea2@liferay.com");
		}

		task ("Add blog") {
			ACUtils.createBlogsAndAddToPage();
		}

		task ("Connect to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Interact with DXP with user1") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea1@liferay.com",
				userLoginFullName = "userfn1 userln1");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Launch AC and enter in the new property") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new segment using the organization roperty Name for Organization Name 1") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test 1");

			ACSegments.goToSidebarAttributes(criterion = "Organization Attributes");

			ACSegments.addSegmentField(segmentField = "Name");

			ACSegments.addOrganizationName(organizationName = "Organization Name 1");

			ACSegments.saveSegment();
		}

		task ("Assert Name is present in Segment Criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Name");
		}

		task ("Assert Test Name is also present in segment criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Organization Name 1");
		}

		task ("Add a new segment using the organization roperty Name for Organization Name 2") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test 2");

			ACSegments.goToSidebarAttributes(criterion = "Organization Attributes");

			ACSegments.addSegmentField(segmentField = "Name");

			ACSegments.addOrganizationName(organizationName = "Organization Name 2");

			ACSegments.saveSegment();
		}

		task ("Assert Name is present in Segment Criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Name");
		}

		task ("Assert Test Name is also present in segment criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Organization Name 2");
		}

		task ("Assert that informations are shown correctly") {
			ACNavigation.goToSegments();

			ACSegments.assertMembershipValue(
				membership = "1",
				segmentName = "Dynamic Segment Test 1");

			ACSegments.assertTotalActivitiesValue(
				segmentName = "Dynamic Segment Test 1",
				totalActivities = "1");

			ACSegments.assertMembershipValue(
				membership = "0",
				segmentName = "Dynamic Segment Test 2");

			ACSegments.assertTotalActivitiesValue(
				segmentName = "Dynamic Segment Test 2",
				totalActivities = "0");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8551 | Test Summary: Add segment using an organization property 'organization'"
	@ignore = "true"
	@priority = "4"
	test CanCreateSegmentUsingOrganizationPropertyOrganization {

		// AC Refactor: the data takes some time to appear in the segment
		// AC Refactor ticket: LRAC-9324

		task ("Add user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add organization and add the user to the organization") {
			JSONOrganization.addOrganization(organizationName = "Organization Name");

			JSONOrganization.assignUserToOrganization(
				organizationName = "Organization Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Connect DXP to AC and sync by organization") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(
				orgName = "Organization Name",
				siteName = "Site Name");
		}

		task ("Interact in DXP with the user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Launch AC and enter in the new property") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new dynamic segment using the parent organization criteria") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");

			ACSegments.goToSidebarAttributes(criterion = "Organization Attributes");

			ACSegments.addSegmentField(segmentField = "Organization");

			ACSegments.addOrganizationName(organizationName = "Organization Name");

			ACSegments.saveSegment();
		}

		task ("Assert Organization is present in segment criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Organization");
		}

		task ("Assert Organization Name is also present in segment criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Organization Name");
		}

		task ("Assert that informations are shown correctly") {
			ACNavigation.goToSegments();

			ACSegments.assertMembershipValue(
				membership = "1",
				segmentName = "Dynamic Segment Test");

			ACSegments.assertTotalActivitiesValue(
				segmentName = "Dynamic Segment Test",
				totalActivities = "1");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8552 | Test Summary: Add segment using an organization property 'parent organization'"
	@ignore = "true"
	@priority = "4"
	test CanCreateSegmentUsingOrganizationPropertyParentOrganization {

		// AC Refactor: the data takes some time to appear in the segment
		// AC Refactor ticket: LRAC-9323

		task ("Add user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add organization and add the user to the organization") {
			JSONOrganization.addOrganization(organizationName = "Organization Name");

			JSONOrganization.addOrganization(
				organizationName = "Organization Name child",
				parentOrganizationName = "Organization Name");

			JSONOrganization.assignUserToOrganization(
				organizationName = "Organization Name child",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Connect DXP to AC and sync by organization") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(
				orgName = "Organization Name child",
				siteName = "Site Name");
		}

		task ("Interact in DXP with the user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Launch AC and enter in the new property") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new dynamic segment using the parent organization criteria") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");

			ACSegments.goToSidebarAttributes(criterion = "Organization Attributes");

			ACSegments.addSegmentField(segmentField = "Parent Organization");

			ACSegments.addOrganizationName(organizationName = "Organization Name");

			ACSegments.saveSegment();
		}

		task ("Assert Parent Organization is present in segment criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Parent Organization");
		}

		task ("Assert Organization Name is also present in segment criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Organization Name");
		}

		task ("Assert that informations are shown correctly") {
			ACNavigation.goToSegments();

			ACSegments.assertMembershipValue(
				membership = "1",
				segmentName = "Dynamic Segment Test");

			ACSegments.assertTotalActivitiesValue(
				segmentName = "Dynamic Segment Test",
				totalActivities = "1");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8553 | Test Summary: Add segment using an organization property 'type'"
	@ignore = "true"
	@priority = "4"
	test CanCreateSegmentUsingOrganizationPropertyType {

		// AC Refactor: Team not sure of which steps should be done to assert property Type, please check steps and update if necessary
		// AC Refactor ticket: LRAC-9280

		task ("Add users") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add organization and add the user to the organization") {
			JSONOrganization.addOrganization(organizationName = "Organization Name");

			JSONOrganization.assignUserToOrganization(
				organizationName = "Organization Name ",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add blog") {
			ACUtils.createBlogsAndAddToPage();
		}

		task ("Connect to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Interact with DXP with user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Launch AC and enter in the new property") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new segment using the organization property Type") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");

			ACSegments.goToSidebarAttributes(criterion = "Organization Attributes");

			ACSegments.addSegmentField(segmentField = "Type");

			ACSegments.addOrganizationName(organizationName = "Organization Name");

			ACSegments.saveSegment();
		}

		task ("Assert Name is present in Segment Criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Type");
		}

		task ("Assert Test Name is also present in segment criteria") {
			ACSegments.assertCriteriaTable(criteriaName = "Organization Name");
		}

		task ("Assert that informations are shown correctly") {
			ACNavigation.goToSegments();

			ACSegments.assertMembershipValue(
				membership = "1",
				segmentName = "Dynamic Segment Test");

			ACSegments.assertTotalActivitiesValue(
				segmentName = "Dynamic Segment Test",
				totalActivities = "1");
		}
	}

}