@component-name = "portal-web-forms-and-data-lists"
definition {

	property custom.properties = "minifier.enabled=true";
	property osgi.module.configuration.file.names = "com.liferay.frontend.js.loader.modules.extender.internal.configuration.Details.config";
	property osgi.module.configurations = "waitTimeout=&quot;15&quot;";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Forms";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Forms");

			FormsAdmin.teardownForms();

			PagesAdmin.tearDownCP();
		}
	}

	@description = "Verify that is able to add a future validation using the response date as parameter"
	@priority = "5"
	test CanAddFutureValidationUsingResponseDate {
		property portal.acceptance = "true";

		var displayDateYear = DateUtil.getCurrentYear();
		var futureYear = ${displayDateYear} + 1;
		var displayFutureDate = "01/01/${futureYear}";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.editFieldLabelMetal(fieldValue = "Date Field");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Validation");

		FormFields.setValidationAcceptedDate(acceptedDateOption = "Future Dates");

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewLabel(
			fieldLabel = "Date Field",
			fieldName = "Date Field");

		FormViewBuilder.editDate(
			fieldName = "Date Field",
			fieldValue = "01/01/2020");

		FormPortlet.submitWithValidationError(validationErrorMessage = "This field is invalid.");

		FormViewBuilder.editDate(
			fieldName = "Date Field",
			fieldValue = "${displayFutureDate}");

		FormPortlet.submitSuccessfully();

		FormsAdmin.openFormsAdmin(siteURLKey = "guest");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Date Field",
			fieldValue = "${displayFutureDate}");
	}

	@description = "Verify that is able to add a past and range validation using the response date as parameter"
	@priority = "5"
	test CanAddPastValidationUsingResponseDate {
		property portal.acceptance = "true";

		var displayDateYear = DateUtil.getCurrentYear();
		var futureYear = ${displayDateYear} + 1;
		var pastYear = ${displayDateYear} - 1;
		var displayFutureDate = "01/01/${futureYear}";
		var displayPastDate = "01/01/${pastYear}";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.editFieldLabelMetal(fieldValue = "Date Field");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Validation");

		FormFields.setValidationAcceptedDate(acceptedDateOption = "Past Dates");

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewLabel(
			fieldLabel = "Date Field",
			fieldName = "Date Field");

		FormViewBuilder.editDate(
			fieldName = "Date Field",
			fieldValue = "${displayFutureDate}");

		FormPortlet.submitWithValidationError(validationErrorMessage = "This field is invalid.");

		FormViewBuilder.editDate(
			fieldName = "Date Field",
			fieldValue = "${displayPastDate}");

		FormPortlet.submitSuccessfully();

		FormsAdmin.openFormsAdmin(siteURLKey = "guest");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Date Field",
			fieldValue = "${displayPastDate}");
	}

	@description = "Verify that a Date Field can be created"
	@priority = "5"
	test CanBeCreated {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.save();

		Click(locator1 = "Icon#BACK");

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		AssertElementPresent(
			key_fieldLabel = "Date",
			locator1 = "FormFields#LABEL");
	}

	@description = "Verify that a Date Field can be deleted"
	@priority = "5"
	test CanBeDeleted {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		FormViewBuilder.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Numeric");

		FormViewBuilder.closeSidebar();

		FormsAdminNavigator.gotoDeleteField(fieldName = "Date");

		FormFields.viewDeletedFieldLabel(fieldName = "Date");

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		FormFields.viewDeletedFieldLabel(fieldName = "Date");
	}

	@description = "Verify that a Date Field can be duplicated"
	@priority = "5"
	test CanBeDuplicated {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.gotoAdvancedTab();

		FormFields.editDatePredefinedValue(fieldValue = "01/01/2020");

		Form.gotoBasicTab();

		FormFields.editHelpText(
			fieldHelpText = "Help Text Test",
			fieldName = "tip");

		FormFields.duplicateField();

		FormViewBuilder.validateFieldLabel(fieldLabel = "Date");

		FormViewBuilder.validateFieldLabel(fieldLabel = "Copy of Date");

		FormViewBuilder.assertPredefinedDateValuePresent(
			fieldLabel = "Date",
			fieldValue = "2020-01-01");

		FormViewBuilder.assertPredefinedDateValuePresent(
			fieldLabel = "Copy of Date",
			fieldValue = "2020-01-01");

		FormViewBuilder.assertHelpTextPresent(
			fieldName = "Date",
			fieldValue = "Help Text Test");

		FormViewBuilder.assertHelpTextPresent(
			fieldName = "Copy of Date",
			fieldValue = "Help Text Test");
	}

	@description = "Verify that a Date Field can be edited"
	@priority = "5"
	test CanBeEdited {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		Click(
			key_name = "Date",
			locator1 = "FormFields#FIELD_TARGET_LABEL");

		Form.editFieldLabelMetal(fieldValue = "Test Date");

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		AssertElementPresent(
			key_name = "Test Date",
			locator1 = "FormFields#FIELD_TARGET_LABEL");

		FormViewBuilder.validateFieldLabelIsNotShown(fieldLabel = "Date");
	}

	@description = "LPS-73322 - Verify that a Date Field can be required"
	@priority = "4"
	test CanBeRequired {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "FormsDateField#CanBeRequired";

		FormsAdmin.addForm();

		Form.editName();

		Form.editDescription();

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		var fieldDateField = FormFields.getFieldName();

		FormFields.enableSwitch(fieldName = "required");

		Form.editFieldLabelMetal(fieldValue = "Date Field");

		Form.closeSidebar();

		Form.save();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoEditFormByName();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormPortlet.waitFormRenderer(text = "Submit");

		FormFields.viewDateField(
			fieldLabel = "Date Field",
			fieldName = "${fieldDateField}");

		FormFields.viewRequiredAsterisk();

		FormPortlet.submitWithValidationError();

		Type(
			key_fieldName = "${fieldDateField}",
			locator1 = "FormFields#DATE_FIELD",
			value1 = "Invalid Value, Date Field");

		AssertTextEquals(
			key_fieldName = "${fieldDateField}",
			locator1 = "FormFields#DATE_FIELD",
			value1 = "__/__/____");

		FormPortlet.submitWithValidationError();

		FormFields.editDate(
			fieldName = "${fieldDateField}",
			fieldValue = "01/01/2016");

		FormPortlet.waitForValidationErrorNotPresent();

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdminNavigator.gotoView();

		FormsAdmin.viewDateEntry(
			fieldLabel = "Date Field",
			fieldName = "${fieldDateField}",
			fieldValue = "01/01/2016");
	}

	@description = "Verify that a Date Field can be Repeatable"
	@priority = "5"
	test CanBeSetAsRepeatable {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date",
			formPageNumber = "0");

		Form.gotoAdvancedTab();

		FormViewBuilder.setFieldRepeatable();

		AssertElementPresent(
			key_fieldName = "Date",
			key_repeatableFieldNumber = "1",
			locator1 = "FormFields#FIELD_ADD_SPECIFIC");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.addRepeatableField(
			fieldName = "Date",
			repeatableFieldNumber = "1");

		FormFields.viewPublishedFormFieldByIndex(
			fieldLabel = "Date",
			index = "1");

		FormFields.viewPublishedFormFieldByIndex(
			fieldLabel = "Date",
			index = "2");

		FormFields.editDateByIndex(
			index = "1",
			key_value = "01012021");

		FormFields.editDateByIndex(
			index = "2",
			key_value = "01012021");

		FormPortlet.submitSuccessfully();
	}

	@description = "Verify if the Custom Date has Plus, 1 and Days as default value"
	@priority = "5"
	test CanBeSetValidationWithCustomDate {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Validation");

		ScrollBy(value1 = "0, 2000");

		FormFields.setValidationAcceptedDate(acceptedDateOption = "Range");

		FormFields.viewValidationCustomDateStartsFrom(
			startsFromOperation = "Plus",
			startsFromOption = "Custom Date",
			startsFromQuantity = "1",
			startsFromUnit = "Days");

		FormFields.viewValidationCustomDateEndsOn(
			endsOnOperation = "Plus",
			endsOnOption = "Custom Date",
			endsOnQuantity = "1",
			endsOnUnit = "Days");
	}

	@description = "Verify that a Form can be submitted with the Date Field"
	@priority = "5"
	test CanBeSubmitted {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date",
			formPageNumber = "0");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "01/01/2021");

		FormPortlet.submitSuccessfully();

		FormPortlet.viewSuccessPage(
			successPageDescription = "Your information was successfully received. Thank you for filling out the form.",
			successPageTitle = "Thank you.");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdminNavigator.gotoView();

		FormsAdmin.viewDateEntry(
			fieldLabel = "Date",
			fieldName = "Date",
			fieldValue = "01/01/2021");
	}

	@description = "Verify that its possible to have more than one Date field using the Validation with custom date in a form"
	@priority = "5"
	test CanHaveMoreThanOneDateFieldUsingDateValidation {
		property portal.acceptance = "true";

		var displayDateYear = DateUtil.getCurrentYear();
		var futureYear = ${displayDateYear} + 1;

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Validation");

		ScrollBy(value1 = "0, 2000");

		FormFields.setValidationAcceptedDate(acceptedDateOption = "Range");

		FormFields.selectValidationCustomDateStartsFrom(
			startsFromOperation = "Plus",
			startsFromOption = "Custom Date",
			startsFromQuantity = "1",
			startsFromUnit = "Days");

		FormFields.selectValidationCustomDateEndsOn(
			endsOnOperation = "Plus",
			endsOnOption = "Custom Date",
			endsOnQuantity = "2",
			endsOnUnit = "Years");

		FormFields.duplicateField();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewLabel(
			fieldLabel = "Date",
			fieldName = "Date");

		FormFields.viewLabel(
			fieldLabel = "Copy of Date",
			fieldName = "Copy of Date");

		FormViewBuilder.editDate(
			fieldName = "Date",
			fieldValue = "01/01/${futureYear}");

		FormViewBuilder.editDate(
			fieldName = "Copy of Date",
			fieldValue = "01/01/${futureYear}");

		FormPortlet.submitSuccessfully();

		FormsAdmin.openFormsAdmin(siteURLKey = "guest");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Date",
			fieldValue = "01/01/${futureYear}");

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Copy of Date",
			fieldValue = "01/01/${futureYear}");
	}

	@description = "Verify that changes to the Field can be canceled"
	@ignore = "Test Stub"
	@priority = "4"
	test ChangesCanBeCanceled {
		property portal.acceptance = "false";

		// TODO LPS-132819 ChangesCanBeCanceled pending implementation

	}

	@description = "Verify that the Dutch Netherlands Date Notation is correct"
	@priority = "5"
	test DateNotationDutchNetherlands {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.editFieldLabelMetal(fieldValue = "My Date");

		FormFields.viewLabel(
			fieldLabel = "My Date",
			fieldName = "My Date");

		Form.addTranslation(localizedLanguage = "Dutch (Netherlands)");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormPortlet.changeLocale(locale = "nederlands-Nederland");

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "01-01-0010");

		FormFields.viewDateValue(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "01-01-0010");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "My Date",
			fieldValue = "01/01/0010");

		FormsAdminNavigator.gotoView();

		FormsAdmin.viewDateEntry(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "01-01-0010");
	}

	@description = "Verify that the English United States Date Notation is correct"
	@priority = "5"
	test DateNotationEnglishUnitedStates {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.editFieldLabelMetal(fieldValue = "My Date");

		FormFields.viewLabel(
			fieldLabel = "My Date",
			fieldName = "My Date");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "01/01/0010");

		FormFields.viewDateValue(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "01/01/0010");

		FormPortlet.submitSuccessfully();

		Form.submitAgain();

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "01/01/1000");

		FormFields.viewDateValue(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "01/01/1000");

		FormPortlet.submitSuccessfully();

		Form.submitAgain();

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "01/01/0100");

		FormFields.viewDateValue(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "01/01/0100");

		FormPortlet.submitSuccessfully();

		Form.submitAgain();

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "01/01/0001");

		FormFields.viewDateValue(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "01/01/0001");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "My Date",
			fieldValue = "01/01/0010");

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "My Date",
			fieldValue = "01/01/1000");

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "My Date",
			fieldValue = "01/01/0100");

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "My Date",
			fieldValue = "01/01/0001");
	}

	@description = "Verify that the Hungarian Hungary Date Notation is correct"
	@priority = "5"
	test DateNotationFinishFinland {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.editFieldLabelMetal(fieldValue = "My Date");

		FormFields.viewLabel(
			fieldLabel = "My Date",
			fieldName = "My Date");

		Form.addTranslation(localizedLanguage = "Finnish (Finland)");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormPortlet.changeLocale(locale = "suomi-Suomi");

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "01.01.0010");

		FormFields.viewDateValue(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "01.01.0010");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "My Date",
			fieldValue = "01/01/0010");

		FormsAdminNavigator.gotoView();

		FormsAdmin.viewDateEntry(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "01.01.0010");
	}

	@description = "Verify that the German Germany Date Notation is correct"
	@priority = "5"
	test DateNotationGermanGermany {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.editFieldLabelMetal(fieldValue = "My Date");

		FormFields.viewLabel(
			fieldLabel = "My Date",
			fieldName = "My Date");

		Form.addTranslation(localizedLanguage = "German (Germany)");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormPortlet.changeLocale(locale = "deutsch-Deutschland");

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "01.01.0010");

		FormFields.viewDateValue(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "01.01.0010");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "My Date",
			fieldValue = "01/01/0010");

		FormsAdminNavigator.gotoView();

		FormsAdmin.viewDateEntry(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "01.01.0010");
	}

	@description = "Verify that the Hungarian Hungary Date Notation is correct"
	@priority = "5"
	test DateNotationHungarianHungary {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.editFieldLabelMetal(fieldValue = "My Date");

		FormFields.viewLabel(
			fieldLabel = "My Date",
			fieldName = "My Date");

		Form.addTranslation(localizedLanguage = "Hungarian (Hungary)");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormPortlet.changeLocale(locale = "magyar-Magyarország");

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "0010.01.01.");

		FormFields.viewDateValue(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "0010.01.01.");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "My Date",
			fieldValue = "01/01/0010");

		FormsAdminNavigator.gotoView();

		FormsAdmin.viewDateEntry(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "0010.01.01.");
	}

	@description = "Verify that the Japanese Japan Date Notation is correct"
	@priority = "5"
	test DateNotationJapaneseJapan {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.editFieldLabelMetal(fieldValue = "My Date");

		FormFields.viewLabel(
			fieldLabel = "My Date",
			fieldName = "My Date");

		Form.addTranslation(localizedLanguage = "Japanese (Japan)");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormPortlet.changeLocale(locale = "日本語-日本");

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "0010/01/01");

		FormFields.viewDateValue(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "0010/01/01");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "My Date",
			fieldValue = "01/01/0010");

		FormsAdminNavigator.gotoView();

		FormsAdmin.viewDateEntry(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "0010/01/01");
	}

	@description = "Verify that the Portuguese Brazil Date Notation is correct"
	@priority = "5"
	test DateNotationPortugueseBrazil {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.editFieldLabelMetal(fieldValue = "My Date");

		FormFields.viewLabel(
			fieldLabel = "My Date",
			fieldName = "My Date");

		Form.addTranslation(localizedLanguage = "Portuguese (Brazil)");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormPortlet.changeLocale(locale = "português-Brasil");

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "01/01/0001");

		FormFields.viewDateValue(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "01/01/0001");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "My Date",
			fieldValue = "01/01/0001");

		FormsAdminNavigator.gotoView();

		FormsAdmin.viewDateEntry(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "01/01/0001");
	}

	@description = "Verify that the Swedish Sweden	 Date Notation is correct"
	@priority = "5"
	test DateNotationSwedishSweden {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.editFieldLabelMetal(fieldValue = "My Date");

		FormFields.viewLabel(
			fieldLabel = "My Date",
			fieldName = "My Date");

		Form.addTranslation(localizedLanguage = "Swedish (Sweden)");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormPortlet.changeLocale(locale = "svenska-Sverige");

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "0010-01-01");

		FormFields.viewDateValue(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "0010-01-01");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "My Date",
			fieldValue = "01/01/0010");

		FormsAdminNavigator.gotoView();

		FormsAdmin.viewDateEntry(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "0010-01-01");
	}

	@description = "Verify that date value after translation change"
	@priority = "5"
	test DateValueAfterChangeTranslation {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.editFieldLabelMetal(fieldValue = "My Date");

		FormFields.viewLabel(
			fieldLabel = "My Date",
			fieldName = "My Date");

		Form.gotoAdvancedTab();

		FormViewBuilder.setFieldPredefinedDate(fieldValue = "01/01/0010");

		Form.addTranslation(localizedLanguage = "Portuguese (Brazil)");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewDateValue(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "01/01/0010");

		FormPortlet.changeLocale(locale = "português-Brasil");

		FormFields.viewDateValue(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "01/01/0010");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "My Date",
			fieldValue = "01/01/0010");

		FormsAdminNavigator.gotoView();

		FormsAdmin.viewDateEntry(
			fieldLabel = "My Date",
			fieldName = "Date",
			fieldValue = "01/01/0010");
	}

	@description = "Verify that a help text can be added"
	@priority = "5"
	test HelpTextCanBeAdded {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date",
			formPageNumber = "0");

		FormViewBuilder.setFieldHelpText(fieldLabel = "Date Help Text");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewFieldHelpText(
			fieldHelpText = "Date Help Text",
			fieldName = "Help Text");

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "01/01/2021");

		FormPortlet.submitSuccessfully();

		FormPortlet.viewSuccessPage(
			successPageDescription = "Your information was successfully received. Thank you for filling out the form.",
			successPageTitle = "Thank you.");
	}

	@description = "Verify that the Field Label can be edited"
	@priority = "5"
	test LabelCanBeEdited {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date",
			formPageNumber = "0");

		Form.editFieldLabelMetal(fieldValue = "Test Date");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewRadioLabel(
			fieldLabel = "Test Date",
			fieldName = "Test Date");
	}

	@description = "Veriy that the Field Label can be hidden"
	@priority = "5"
	test LabelCanBeHidden {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.gotoAdvancedTab();

		FormViewBuilder.clickShowLabel();

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormViewBuilder.validateFieldLabelIsNotShown(fieldLabel = "Date");
	}

	@description = "Verify that a Predefined Value can be applied"
	@priority = "5"
	test PredefinedValueCanBeAdded {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.gotoAdvancedTab();

		FormViewBuilder.setFieldPredefinedDate(fieldValue = "01/01/2021");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.viewDateValue(
			fieldLabel = "Date",
			fieldName = "Date",
			fieldValue = "01/01/2021");

		FormPortlet.submitSuccessfully();

		FormPortlet.viewSuccessPage(
			successPageDescription = "Your information was successfully received. Thank you for filling out the form.",
			successPageTitle = "Thank you.");
	}

	@description = "Verify that the Field Reference can be Edited"
	@priority = "5"
	test ReferenceCanBeEdited {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.gotoAdvancedTab();

		Form.editFieldReferenceMetal(fieldValue = "Date1234");

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		Form.viewFieldReference(
			fieldName = "Date",
			fieldReference = "Date1234");
	}

	@description = "Verify that the Field Type can be changed"
	@ignore = "Test Stub"
	@priority = "5"
	test TypeCanBeChanged {
		property portal.acceptance = "false";

		// TODO LPS-132818 TypeCanBeChanged pending implementation

	}

	@description = "Verify if the Repeatable option is working correctly on the Date field using the Validation with custom date"
	@priority = "4"
	test ValidationCanBeRepeatable {
		property portal.acceptance = "true";

		var displayDateYear = DateUtil.getCurrentYear();
		var futureYear = ${displayDateYear} + 1;
		var displayFutureDate = "01/01/${futureYear}";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Validation");

		FormViewBuilder.setFieldRepeatable();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.addRepeatableField(
			fieldName = "Date",
			repeatableFieldNumber = "1");

		FormFields.viewPublishedFormFieldByIndex(
			fieldLabel = "Date",
			index = "1");

		FormFields.viewPublishedFormFieldByIndex(
			fieldLabel = "Date",
			index = "2");

		FormFields.editDateByIndex(
			index = "1",
			key_value = "${displayFutureDate}");

		FormFields.editDateByIndex(
			index = "2",
			key_value = "${displayFutureDate}");

		FormPortlet.submitSuccessfully();

		FormsAdmin.openFormsAdmin(siteURLKey = "guest");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Date",
			fieldValue = "${displayFutureDate}, ${displayFutureDate}");
	}

	@description = "Verify if the Date field using the Validation with custom date can be translated"
	@priority = "4"
	test ValidationCanBeTranslated {
		property portal.acceptance = "true";

		var displayDateYear = DateUtil.getCurrentYear();
		var futureYear = ${displayDateYear} + 1;
		var pastYear = ${displayDateYear} - 1;

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Validation");

		ScrollBy(value1 = "0, 2000");

		FormFields.setValidationAcceptedDate(acceptedDateOption = "Range");

		FormFields.selectValidationCustomDateStartsFrom(
			startsFromOperation = "Plus",
			startsFromOption = "Custom Date",
			startsFromQuantity = "1",
			startsFromUnit = "Days");

		FormFields.selectValidationCustomDateEndsOn(
			endsOnOperation = "Plus",
			endsOnOption = "Custom Date",
			endsOnQuantity = "2",
			endsOnUnit = "Years");

		Form.addTranslation(localizedLanguage = "Portuguese (Brazil)");

		FormFields.viewValidationCustomDateStartsFrom(
			startsFromOperation = "Plus",
			startsFromQuantity = "1",
			startsFromUnit = "Days");

		FormFields.viewValidationCustomDateEndsOn(
			endsOnOperation = "Plus",
			endsOnQuantity = "2",
			endsOnUnit = "Years");

		Type(
			locator1 = "FormFields#VALIDATION_ERROR_MESSAGE",
			value1 = "Esse campo e invalido.");

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "01/01/${pastYear}");

		FormPortlet.submitWithValidationError(validationErrorMessage = "This field is invalid.");

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "01/01/${futureYear}");

		FormPortlet.submitSuccessfully();

		Refresh();

		FormPortlet.changeLocale(locale = "português-Brasil");

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "01/01/${pastYear}");

		FormPortlet.viewValidationErrorMessage(validationErrorMessage = "Esse campo e invalido.");

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "01/01/${futureYear}");

		FormPortlet.submitSuccessfully();
	}

	@description = "Verify if that with date validation in the datefield the error message appears correctly on forms"
	@priority = "5"
	test ValidationErrorMessageCanBeEdited {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Validation");

		Type(
			locator1 = "FormFields#VALIDATION_ERROR_MESSAGE",
			value1 = "This is a customized message to test feature: 12345 &!@#$%");

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "01/01/2000");

		FormPortlet.submitWithValidationError(validationErrorMessage = "This is a customized message to test feature: 12345 &!@#$%");

		FormPortlet.waitForValidationErrorNotPresent(validationErrorMessage = "This is a customized message to test feature: 12345 &!@#$%r");

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "01/01/2030");

		FormPortlet.submitSuccessfullyAndViewSuccessPage();
	}

	@description = "Verify if the Predefined values are working correctly on the Date field using the Validation with custom date"
	@priority = "5"
	test ValidationIsWorkingOnPredefinedValue {
		property portal.acceptance = "true";

		var displayDateYear = DateUtil.getCurrentYear();
		var futureYear = ${displayDateYear} + 1;
		var pastYear = ${displayDateYear} - 1;
		var displayPastDate = "01/01/${pastYear}";
		var displayFutureDate = "01/01/${futureYear}";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Date");

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Validation");

		FormFields.editDatePredefinedValue(fieldValue = "${displayPastDate}");

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormPortlet.submitWithValidationError(validationErrorMessage = "This field is invalid.");

		FormFields.editDate(
			fieldName = "Date",
			fieldValue = "${displayFutureDate}");

		FormPortlet.submitSuccessfully();

		FormsAdmin.openFormsAdmin(siteURLKey = "guest");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Date",
			fieldValue = "${displayFutureDate}");
	}

}