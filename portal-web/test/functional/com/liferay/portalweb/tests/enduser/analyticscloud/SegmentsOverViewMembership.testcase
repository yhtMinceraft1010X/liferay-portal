@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8490 | Test Summary: Order a Dynamic Segment's Membership Preview Modal"
	@priority = "3"
	test OrderDynamicSegmentMembershipPreview {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "SegmentsOverViewMembership#OrderDynamicSegmentMembershipPreview";

		var usernameList = "user1,user2,user3";
		var emailList = "user1@liferay.com,user2@liferay.com,user3@liferay.com";

		task ("Add 3 new users in DXP") {
			for (var name : list "${usernameList}") {
				JSONUser.addUser(
					userEmailAddress = "${name}@liferay.com",
					userFirstName = "${name}",
					userLastName = "${name}",
					userScreenName = "${name}");

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "${name}@liferay.com");
			}
		}

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		task ("View the page as different users") {
			ACUtils.navigateToSitePageWithUser(
				emailList = "${emailList}",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");
		}

		task ("Add a criteria") {
			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "givenName");

			ACSegments.selectOperator(operator = "contains");

			ACSegments.editTextCriterion(textInput = "user");

			ACSegments.saveSegment();
		}

		task ("Edit the segment") {
			ACNavigation.goToSegments();

			ACSegments.editSegment(segmentName = "Dynamic Segment Test");
		}

		task ("View members in Preview mode and order by name descending") {
			ACSegments.previewSegmentMembership();

			ACSegments.filterKnownSegmentMembersList();

			ACUtils.viewNameListInOrder(
				index = "1",
				name = "user3 user3");

			ACUtils.viewNameListInOrder(
				index = "2",
				name = "user2 user2");

			ACUtils.viewNameListInOrder(
				index = "3",
				name = "user1 user1");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8486 | Test Summary: Membership card exists and shows members added"
	@ignore = "true"
	@priority = "5"
	test ViewMembershipCardExistsShowsMembersAdded {

		// AC Refactor: members are not appearing
		// AC Refactor ticket: LRAC-8818

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");

			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "givenName");

			ACSegments.selectOperator(operator = "contains");

			ACSegments.editTextCriterion(textInput = "user");

			ACSegments.saveSegment();
		}

		task ("Add a new user in DXP") {
			ACUtils.launchDXP();

			JSONUser.addUser(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Sign in as new user and view the site page") {
			ACUtils.navigateToSitePageWithUser(
				documentTitleList = "1,2",
				emailList = "user1@liferay.com",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Open AC and view the segment") {
			ACUtils.launchAC();

			ACNavigation.goToSegments();

			ACSegments.accessSegment(segmentName = "Dynamic Segment Test");
		}

		task ("Assert Membership card exists") {
			ACCards.viewCards(cardTitle = "Segment Membership");
		}

		task ("Show members added") {
			ACSegments.viewSegmentMembershipLegendNumbers(
				anonymousNumber = "0",
				knownNumber = "1",
				totalNumber = "1");

			// Fails here due to members not showing in segments

		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8489 | Test Summary: Points on membership card can be hovered for more details"
	@ignore = "true"
	@priority = "4"
	test ViewMembershipCardHoverDetails {

		// AC Refactor: timing issue for membership card
		// AC Refactor ticket: LRAC-9130

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");

			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "givenName");

			ACSegments.selectOperator(operator = "contains");

			ACSegments.editTextCriterion(textInput = "user");

			ACSegments.saveSegment();
		}

		task ("Add a new user in DXP") {
			ACUtils.launchDXP();

			JSONUser.addUser(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Sign in as new user and view the site page") {
			ACUtils.navigateToSitePageWithUser(
				documentTitleList = "1,2",
				emailList = "user1@liferay.com",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("View members") {
			ACUtils.launchAC();

			ACNavigation.goToSegments();

			ACSegments.accessSegment(segmentName = "Dynamic Segment Test");

			ACSegments.viewSegmentMembershipLegendNumbers(
				anonymousNumber = "0",
				knownNumber = "1",
				totalNumber = "1");
		}

		// Timing issue will cause this test to fail
		// The graph shows yesterdays date and would require a full day before you can actually see when member was added

		task ("View membership card when hovering") {
			ACSegments.viewSegmentMembershipChartNumbers(
				addedMember = "1",
				netChange = "0",
				removedMember = "0");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8488 | Test Summary: Membership card shows anonymous users"
	@ignore = "true"
	@priority = "5"
	test ViewMembershipCardShowsAnonymousUsers {

		// AC Refactor: timing issue for membership card
		// AC Refactor ticket: LRAC-9192

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new dynamic segment that includes anonymous users") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Test");

			ACSegments.includeAnonymous();

			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "givenName");

			ACSegments.selectOperator(operator = "is unknown");

			ACSegments.saveSegment();
		}

		task ("Sign in DXP") {
			ACUtils.launchDXP();

			User.logoutPG();

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Open AC and view the segment") {
			ACUtils.launchAC();

			ACNavigation.goToSegments();

			ACSegments.accessSegment(segmentName = "Dynamic Segment Test");
		}

		task ("Assert Membership card exists") {
			ACCards.viewCards(cardTitle = "Segment Membership");
		}

		// Timing issue will cause this test to fail
		// It is not possible to verify the number of anonymous visitors due to the timing issue

		task ("Show anonymous users") {
			ACSegments.viewSegmentMembershipLegendNumbers(
				anonymousNumber = "1",
				knownNumber = "0",
				totalNumber = "1");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8487 | Test Summary: Membership card shows members removed"
	@ignore = "true"
	@priority = "5"
	test ViewMembershipCardShowsMembersRemoved {

		// AC Refactor: timing issue for membership card
		// AC Refactor ticket: LRAC-8887

		var userList = "user1,user2";
		var emailList = "user1@liferay.com,user2@liferay.com";
		var nameList = "user1 user1,user2 user2";

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		task ("Add new users in DXP") {
			for (var n : list "${userList}") {
				JSONUser.addUser(
					userEmailAddress = "${n}@liferay.com",
					userFirstName = "${n}",
					userLastName = "${n}",
					userScreenName = "${n}");

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "${n}@liferay.com");
			}
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as different users") {
			ACUtils.navigateToSitePageWithUser(
				emailList = "${emailList}",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Open AC and create new segment with members") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();

			ACUtils.setItemName(itemName = "Static Segment Test");

			ACSegments.addStaticMultiMember(tableMember = "${nameList}");

			ACSegments.saveSegment();
		}

		// Data takes to long to appear

		task ("Show members added") {
			ACSegments.viewSegmentMembershipLegendNumbers(
				anonymousNumber = "0",
				knownNumber = "2",
				totalNumber = "2");
		}

		task ("Go to Segment and remove a user") {
			ACNavigation.goToSegments();

			ACSegments.editSegment(segmentName = "Static Segment Test");

			ACSegments.removeStaticMember(tableMember = "user2 user2");

			ACSegments.saveSegment();
		}

		task ("Show updated numbers") {
			ACSegments.viewSegmentMembershipLegendNumbers(
				anonymousNumber = "0",
				knownNumber = "1",
				totalNumber = "1");
		}

		// Data takes to long to appear

		task ("View membership card when hovering") {
			ACSegments.viewSegmentMembershipChartNumbers(
				addedMember = "0",
				netChange = "0",
				removedMember = "1");
		}
	}

}