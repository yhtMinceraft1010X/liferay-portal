@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Team.tearDownCP();

			UserGroup.tearDownCP();

			JSONUser.tearDownNonAdminUsers();

			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "Able to add site team."
	@priority = "4"
	@uitest
	test AddSiteTeam {
		property testray.component.names = "Site Administration";

		task ("Add a site team in new site") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.addCP(
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");
		}

		task ("View site team added") {
			Team.viewCP(
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");
		}
	}

	@description = "Able to assign user to site team."
	@priority = "4"
	test AddSiteTeamAssignUser {
		property testray.component.names = "Site Administration,Users and Organizations";

		task ("Add a user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("Assign user to created site") {
			Site.openSiteMembershipsAdmin(siteURLKey = "site-name");

			Site.assignUserAsMemberCP(
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("Add a site team in site") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.addCP(
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");
		}

		task ("Assign user to created site team") {
			Team.assignMembersCP(
				teamName = "Site Team Name",
				userScreenName = "usersn");
		}

		task ("View user assigned to created site team") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.viewMemberCP(
				membershipType = "User",
				teamName = "Site Team Name",
				userFirstName = "userfn",
				userLastName = "userln");
		}
	}

	@description = "Able to assign user to user group."
	@priority = "4"
	@uitest
	test AddSiteTeamAssignUserGroup {
		property testray.component.names = "Site Administration,User Groups";

		task ("Add a site team in site") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.addCP(
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");
		}

		task ("View site team added") {
			Team.viewCP(
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");
		}

		task ("Add a user group") {
			UserGroup.openUserGroupsAdmin();

			UserGroup.addCP(userGroupName = "User Group Name");
		}

		task ("Assign user group to the site") {
			Site.openSiteMembershipsAdmin(siteURLKey = "site-name");

			Site.assignUserGroupAsMemberCP(userGroupName = "User Group Name");
		}

		task ("Assign user group to the site team") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.assignUserGroups(
				teamName = "Site Team Name",
				userGroupName = "User Group Name");
		}

		task ("View user group assiged to the site team") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.viewMemberCP(
				membershipType = "User Group",
				teamName = "Site Team Name",
				userGroupName = "User Group Name");
		}
	}

	@description = "Able to add multiple site teams."
	@priority = "5"
	test AddSiteTeamMultiple {
		property portal.acceptance = "true";
		property testray.component.names = "Site Administration";

		task ("Add a site page") {
			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Site Page");
		}

		task ("Add thress site teams in site") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.addCP(
				teamDescription = "Site Team1 Description",
				teamName = "Site Team1 Name");

			Team.addCP(
				teamDescription = "Site Team2 Description",
				teamName = "Site Team2 Name");

			Team.addCP(
				teamDescription = "Site Team3 Description",
				teamName = "Site Team3 Name");
		}

		task ("View three site teams are added") {
			Team.viewCP(
				teamDescription = "Site Team1 Description",
				teamName = "Site Team1 Name");

			Team.viewCP(
				teamDescription = "Site Team2 Description",
				teamName = "Site Team2 Name");

			Team.viewCP(
				teamDescription = "Site Team3 Description",
				teamName = "Site Team3 Name");
		}
	}

	@description = "Able to remove user after assigning to site team."
	@priority = "5"
	@uitest
	test AddSiteTeamRemoveUser {
		property portal.acceptance = "true";
		property testray.component.names = "Site Administration,Users and Organizations";

		task ("Add a user and assign it to the created site") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.addUserToSite(
				groupName = "Site Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add a site team in site") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.addCP(
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");
		}

		task ("Assign user to the created site team") {
			Team.assignMembersCP(
				teamName = "Site Team Name",
				userScreenName = "usersn");
		}

		task ("View user assigned to the site team") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.viewMemberCP(
				membershipType = "User",
				teamName = "Site Team Name",
				userFirstName = "userfn",
				userLastName = "userln");
		}

		task ("Remove user from the created site team") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.removeMemberCP(
				membershipType = "User",
				teamName = "Site Team Name",
				userFirstName = "userfn",
				userLastName = "userln");
		}

		task ("View user removed from the site team") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.viewNoMembersCP(teamName = "Site Team Name");
		}
	}

	@description = "Able to remove user group after assigning to site team."
	@priority = "4"
	@uitest
	test AddSiteTeamRemoveUserGroup {
		property testray.component.names = "Site Administration,User Groups";

		task ("Add a site team in site") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.addCP(
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");
		}

		task ("View user assigned to the site team") {
			Team.viewCP(
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");
		}

		task ("Add a user group") {
			UserGroup.openUserGroupsAdmin();

			UserGroup.addCP(userGroupName = "User Group Name");
		}

		task ("Assign user group to the site") {
			Site.openSiteMembershipsAdmin(siteURLKey = "site-name");

			Site.assignUserGroupAsMemberCP(userGroupName = "User Group Name");
		}

		task ("Assign user group to the site team") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.assignUserGroups(
				teamName = "Site Team Name",
				userGroupName = "User Group Name");
		}

		task ("View user group assigned to the site team") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.viewMemberCP(
				membershipType = "User Group",
				teamName = "Site Team Name",
				userGroupName = "User Group Name");
		}

		task ("Remove user group from the created site team") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.removeMemberCP(
				membershipType = "User Group",
				teamName = "Site Team Name",
				userGroupName = "User Group Name");
		}

		task ("View user group removed from the site team") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.viewNoMembersCP(teamName = "Site Team Name");
		}
	}

	@description = "Able to find user group in site team."
	@priority = "4"
	test AddSiteTeamSearchUserGroups {
		property testray.component.names = "Site Administration,User Groups";

		task ("Add 2 user groups andd assign them to the site") {
			for (var n : list "1,2") {
				UserGroup.openUserGroupsAdmin();

				UserGroup.addCP(userGroupName = "User Group Name ${n}");

				Site.openSiteMembershipsAdmin(siteURLKey = "site-name");

				Site.assignUserGroupAsMemberCP(userGroupName = "User Group Name ${n}");
			}
		}

		task ("Add a user group") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.addCP(
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");
		}

		task ("Assign user group to site team") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.assignUserGroups(
				teamName = "Site Team Name",
				userGroupName = "User Group Name 1");
		}

		task ("Search the 2 user groups in site team, assert only the user group assigned displays") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			LexiconEntry.gotoEntry(rowEntry = "Site Team Name");

			Team.searchCP(
				membershipType = "User Group",
				searchTerm = "&quot;User Group Name 1&quot;");

			Team.searchCP(
				isEmpty = "true",
				membershipType = "User Group",
				searchTerm = "&quot;User Group Name 2&quot;");
		}
	}

	@description = "Able to find user in site team."
	@priority = "5"
	test AddSiteTeamSearchUsers {
		property portal.acceptance = "true";
		property testray.component.names = "Site Administration,Users and Organizations";

		task ("Add 2 users and assign them to the created site") {
			for (var n : list "1,2") {
				JSONUser.addUser(
					userEmailAddress = "userea${n}@liferay.com",
					userFirstName = "userfn${n}",
					userLastName = "userln${n}",
					userScreenName = "usersn${n}");

				Site.openSiteMembershipsAdmin(siteURLKey = "site-name");

				Site.assignUserAsMemberCP(
					userFirstName = "userfn${n}",
					userLastName = "userln${n}",
					userScreenName = "usersn${n}");
			}
		}

		task ("Add a site team and assign user to it") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.addCP(
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");

			Team.assignMembersCP(
				teamName = "Site Team Name",
				userScreenName = "usersn1");
		}

		task ("Search the 2 users in site team, assert only the user assigned displays") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			LexiconEntry.gotoEntry(rowEntry = "Site Team Name");

			for (var searchTerm : list "userfn1,userln1,usersn1") {
				Team.searchCP(
					membershipType = "User",
					searchTerm = "${searchTerm}");
			}

			for (var searchTerm : list "userfn2,userln2,usersn2") {
				Team.searchCP(
					isEmpty = "true",
					membershipType = "User",
					searchTerm = "${searchTerm}");
			}
		}
	}

	@description = "Able to delete site team."
	@priority = "5"
	@uitest
	test DeleteSiteTeam {
		property portal.acceptance = "true";
		property testray.component.names = "Site Administration";

		task ("Add a site team and delete it") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.addCP(
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");

			Team.deleteCP(
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");
		}

		task ("View site team is deleted") {
			Team.viewDefaultCP(teamName = "Site Team Name");
		}
	}

	@description = "Able to edit site team."
	@priority = "5"
	@uitest
	test EditSiteTeam {
		property portal.acceptance = "true";
		property testray.component.names = "Site Administration";

		task ("Add a site team and edit it") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.addCP(
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");

			Team.editCP(
				teamDescriptionEdit = "Site Team Description Edit",
				teamName = "Site Team Name",
				teamNameEdit = "Site Team Name Edit");
		}

		task ("View site team is edited") {
			Team.viewCP(
				teamDescription = "Site Team Description Edit",
				teamName = "Site Team Name Edit");
		}
	}

	@description = "Check site teams permissions to see it is able to view page."
	@priority = "4"
	test SiteTeamsPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property testray.component.names = "Permissions,Site Administration";

		task ("Add a site team and a public page basing on Search page template") {
			JSONGroup.addGroup(groupName = "Site Name");

			PagesAdmin.openPagesAdmin(siteURLKey = "Site Name");

			PagesAdmin.addPage(
				pageName = "Search Page Template",
				pageTemplateName = "Search");
		}

		task ("Add a user") {
			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("Assign user to the created site") {
			User.openUsersAdmin();

			User.editUserSiteCP(
				siteName = "Site Name",
				userScreenName = "usersn1");
		}

		task ("Add another user") {
			JSONUser.addUser(
				userEmailAddress = "userea2@liferay.com",
				userFirstName = "userfn2",
				userLastName = "userln2",
				userScreenName = "usersn2");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea2@liferay.com");
		}

		task ("Assign the second user to the created site") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.editUserSiteCP(
				siteName = "Site Name",
				userScreenName = "usersn2");
		}

		task ("Add a site team and assign the first user to it") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.addCP(
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");

			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.assignMembersCP(
				teamName = "Site Team Name",
				userScreenName = "usersn1");
		}

		task ("Edit page permission, remove view permission for guest") {
			PermissionsInline.gotoPagePG(
				pageName = "Search Page Template",
				site = "Site Name");

			Role.removePermissionPG(
				permissionDefinitionKey = "CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "Guest");
		}

		task ("Edit page permission, remove view and add discussion permission for site memeber") {
			Navigator.gotoSitePage(
				pageName = "Search Page Template",
				siteName = "Site Name");

			PermissionsInline.gotoPagePG(
				pageName = "Search Page Template",
				site = "Site Name");

			for (var permissionsInLineUncheckListsCount : list "CONTENT_PERMISSIONS_ADD_DISCUSSION_CHECKBOX,CONTENT_PERMISSIONS_VIEW_CHECKBOX") {
				Role.removePermissionPG(
					permissionDefinitionKey = "${permissionsInLineUncheckListsCount}",
					roleTitle = "Site Member");
			}
		}

		task ("Edit page permission, add configure page permissions for site team") {
			Navigator.gotoSitePage(
				pageName = "Search Page Template",
				siteName = "Site Name");

			PermissionsInline.gotoPagePG(
				pageName = "Search Page Template",
				site = "Site Name");

			for (var permissionsInLineCheckListsCount : list "ACTION_ADD_DISCUSSION,ACTION_ADD_LAYOUT,ACTION_CONFIGURE_PORTLETS,ACTION_CUSTOMIZE,ACTION_DELETE,ACTION_DELETE_DISCUSSION,ACTION_PERMISSIONS,ACTION_UPDATE,ACTION_UPDATE_DISCUSSION,ACTION_VIEW") {
				Team.definePermissionPG(
					permissionDefinitionKey = "${permissionsInLineCheckListsCount}",
					teamName = "Site Team Name");
			}
		}

		task ("Log out and log in as the first created user") {
			User.firstLoginPG(
				password = "test",
				userEmailAddress = "userea1@liferay.com");
		}

		task ("View portlets in search page template page") {
			Navigator.gotoSitePage(
				pageName = "Search Page Template",
				siteName = "Site Name");

			for (var portletName : list "SearchBar,Suggestions,SiteFacet,TypeFacet,TagFacet,CategoryFacet,FolderFacet,UserFacet,ModifiedFacet,SearchResults,SearchOptions") {
				AssertVisible(
					key_decorator = "barebone",
					key_portletTitleName = "${portletName}",
					locator1 = "Portlet#SPECIFIC_PORTLET_BORDER_DECORATOR");
			}
		}

		task ("Log out and log in as the second created user") {
			User.firstLoginPG(
				password = "test",
				userEmailAddress = "userea2@liferay.com");
		}

		task ("Assert can not view page") {
			Navigator.openSiteURL(siteName = "Site Name");

			AssertElementNotPresent(locator1 = "Home#PAGE");
		}

		task ("Log out and log in as default user") {
			User.firstLoginPG(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}
	}

	@description = "Add site team name with XSS."
	@priority = "4"
	test SiteTeamsXSS {
		property testray.component.names = "Site Administration,XSS";

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Add a site team with alert") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.addCP(
				teamDescription = '''<script>alert(123);</script>''',
				teamName = '''<script>alert(123);</script>''');
		}

		task ("Assign site team to site") {
			Site.openSiteSettingsAdmin(siteURLKey = "site-name");

			Site.assignDefaultSiteTeam(teamName = '''<script>alert(123);</script>''');
		}

		task ("View no alert") {
			AssertAlertNotPresent();
		}

		task ("View alert is escaped in page") {
			var actualScript = '''<script>alert(123);</script>''';

			var escapedScript = '''&lt;script&gt;alert(123);&lt;/script&gt;''';

			AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

			AssertHTMLSourceTextPresent(value1 = "${escapedScript}");
		}
	}

}