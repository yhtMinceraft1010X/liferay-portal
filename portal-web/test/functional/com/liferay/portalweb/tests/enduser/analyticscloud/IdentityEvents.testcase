@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8715 | Test Summary: Check identity is triggered when logging in after a unintended session close"
	@priority = "3"
	test CheckIdentityTriggeredWhenLoginAfterASessionClose {
		property proxy.server.enabled = "true";

		task ("Sign out and Close sessions") {
			UserBar.signOut();

			ACUtils.closeAllSessions();
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Sign in new site") {
			var portalURL = PropsUtil.get("portal.url");

			User.firstLoginUI(
				specificURL = "${portalURL}/web/site-name/ac-page",
				userEmailAddress = "test@liferay.com",
				userPassword = "test");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "15000");
		}

		task ("View the identity request properties value") {
			ACUtils.assertIdentityRequestPropertiesValue(expectedDataSourceId = "${expectedDataSourceId}");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8714 | Test Summary: Check Identity is triggered when logging out and in again"
	@priority = "3"
	test CheckIdentityTriggeredWhenLogoutAndLoginAgain {
		property proxy.server.enabled = "true";

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as Test Test") {
			ACUtils.launchDXP();
		}

		task ("Navigate to the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Sign out") {
			UserBar.signOut();
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Sign in new site") {
			var portalURL = PropsUtil.get("portal.url");

			User.firstLoginUI(
				specificURL = "${portalURL}/web/site-name/ac-page",
				userEmailAddress = "test@liferay.com",
				userPassword = "test");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("View the identity request properties value") {
			ACUtils.assertIdentityRequestPropertiesValue(expectedDataSourceId = "${expectedDataSourceId}");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8713 | Test Summary: Check Identity triggers upon logging in and check its properties (see reference document in comments)"
	@priority = "5"
	test CheckIdentityUponLogin {
		property proxy.server.enabled = "true";

		task ("Sign out") {
			User.logoutPG();
		}

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Start Har recording") {
			ProxyUtil.startHarRecording("identity");
		}

		task ("Sign in new site") {
			var portalURL = PropsUtil.get("portal.url");

			User.firstLoginUI(
				specificURL = "${portalURL}/web/site-name/ac-page",
				userEmailAddress = "test@liferay.com",
				userPassword = "test");
		}

		task ("Wait for sending requests") {
			Pause(locator1 = "5000");
		}

		task ("View the identity request properties value") {
			ACUtils.assertIdentityRequestPropertiesValue(expectedDataSourceId = "${expectedDataSourceId}");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

}