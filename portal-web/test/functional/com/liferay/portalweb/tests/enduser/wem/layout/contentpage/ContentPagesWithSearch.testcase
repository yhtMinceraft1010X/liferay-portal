@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Execute Reindex all search indexes") {
			SearchAdministration.executeReindex();
		}

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a Search page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Search");
		}

		task ("Add a Search Results to Search page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Search",
				widgetName = "Search Results");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-148919. The user cannot search a content page without publish version and its content."
	@priority = "5"
	test CannotSearchContentPageWithoutPublishedVersion {
		property test.name.skip.portal.instance = "ContentPagesWithSearch#CannotSearchContentPageWithoutPublishedVersion";

		task ("Given a page creator has a content page with Heading fragment and keeps it as draft") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("When the page creator search the content page in Search Bar") {
			Navigator.gotoSitePage(
				pageName = "Search",
				siteName = "Test Site Name");

			SearchPortlets.searchEmbedded(searchTerm = "Content Page");
		}

		task ("Then the page creator should view empty search results") {
			SearchResultPortlet.viewNoSearchResults(searchTerm = "Content Page");
		}

		task ("When the page creator search the content on content page in Search Bar") {
			SearchPortlets.searchEmbedded(searchTerm = "Heading Example");
		}

		task ("Then the page creator should view empty search results") {
			SearchResultPortlet.viewNoSearchResults(searchTerm = "Heading Example");
		}
	}

	@description = "This is a test for LPS-78928. View content page in search results when filter by Type Facet."
	@priority = "5"
	test FilterByTypeFacet {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentPagesWithSearch#FilterByTypeFacet";

		task ("Add a Type Facet to Search page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Search",
				widgetName = "Type Facet");
		}

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "This is a heading content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Navigate to the content page") {
			Navigator.gotoSitePage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Search by keywords") {
			Search.searchCP(searchTerm = "heading");
		}

		task ("View both the content page and web content shown in the search results") {
			Search.viewResultAssetTitle(searchAssetTitle = "Test Content Page Name");

			Search.viewResultAssetTitle(searchAssetTitle = "Web Content Title");
		}

		task ("Check the Page type in Type Facet") {
			SearchFacetPortlet.checkFacet(facetValueName = "Page");
		}

		task ("View only the content page shown in the search results") {
			Search.viewResultAssetTitle(searchAssetTitle = "Test Content Page Name");

			Search.viewNoResultAssetTitle(searchAssetTitle = "Web Content Title");
		}
	}

	@description = "This is a test for LPS-78928. Search content page by inline text."
	@priority = "5"
	test SearchByInlineText {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentPagesWithSearch#SearchByInlineText";

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Navigate to the content page") {
			Navigator.gotoSitePage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Search by inline text of Heading") {
			Search.searchCP(searchTerm = "Example");
		}

		task ("View the content page shown in the search results") {
			Search.viewResultAssetTitle(searchAssetTitle = "Test Content Page Name");
		}

		task ("Edit the inline text") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "New editable fragment text");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Navigate to the content page") {
			Navigator.gotoSitePage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Search by edited inline text") {
			Search.searchCP(searchTerm = "editable");
		}

		task ("View the content page shown in the search results") {
			Search.viewResultAssetTitle(searchAssetTitle = "Test Content Page Name");
		}

		task ("Search by default inline text") {
			Search.searchCP(searchTerm = "Example");
		}

		task ("View the content page not shown in the search results") {
			Search.viewNoResultAssetTitle(searchAssetTitle = "Test Content Page Name");
		}
	}

	@description = "This is a test for LPS-78928. Search content page by not editable text."
	@priority = "5"
	test SearchByNotEditableText {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentPagesWithSearch#SearchByNotEditableText";

		task ("Add a fragment collection") {
			JSONFragment.addFragmentCollection(
				groupName = "Test Site Name",
				name = "Collection Name");
		}

		task ("Add a fragment in new collection") {
			var newLine = '''
''';

			var htmlSnippet = '''
<div class="fragment-static-text">
	<div class="static-text">This is static text.</div>
</div>
			''';
			var htmlSnippet = StringUtil.regexReplaceAll("${htmlSnippet}", "${newLine}", "");

			JSONFragment.addSection(
				collectionName = "Collection Name",
				fragmentStatus = "Approved",
				groupName = "Test Site Name",
				html = "${htmlSnippet}",
				name = "Fragment Name");
		}

		task ("Add a new fragment to content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Fragment Name");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Navigate to the content page") {
			Navigator.gotoSitePage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Search by non editable text") {
			Search.searchCP(searchTerm = "static");
		}

		task ("View the content page shown in the search results") {
			Search.viewResultAssetTitle(searchAssetTitle = "Test Content Page Name");
		}
	}

	@description = "This is a use case for LPS-120198. Search page in page select modal when map it to editable field."
	@priority = "4"
	test SearchPageInSelectModalWhenMapPageToEditableField {
		property test.name.skip.portal.instance = "ContentPagesWithSearch#SearchPageInSelectModalWhenMapPageToEditableField";

		task ("Add a parent widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Parent Page Name");
		}

		task ("Add a child widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Child Page Name");
		}

		task ("Add a grandchild widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Grand Child Page Name");
		}

		task ("Add a Banner Center fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Featured Content",
				composition = "true",
				fragmentName = "Banner Center");
		}

		task ("Search the grandchild widget page in select modal then map it to link type editable field") {
			PageEditorEditableLink.mapEditableFieldToPage(
				fragmentName = "Button",
				id = "link",
				keywords = "Grand Child",
				pageName = "Test Grand Child Page Name");
		}

		task ("View the selected page is shown in Page field") {
			AssertTextEquals(
				key_fieldLabel = "Page",
				locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT",
				value1 = "Test Grand Child Page Name");
		}

		task ("View selected page is linked to Banner Center fragment") {
			AssertVisible(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_url = "/web/test-site-name/test-grand-child-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");

			PageEditor.clickPublish();
		}

		task ("Navigate to content page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Assert redirect to grandchild widget page") {
			Click(
				key_append = "[normalize-space(text())='Go Somewhere']",
				key_url = "/web/test-site-name/test-grand-child-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Test Grand Child Page Name");

			AssertLocation.assertPartialLocation(value1 = "web/test-site-name/test-grand-child-page-name");
		}
	}

	@description = "This is a test for LPS-91405. View content page is not shown in search results after deleting the associated category."
	@priority = "3"
	test ViewContentPageNotShownInSearchResultsAfterDeleteCategory {
		property test.name.skip.portal.instance = "ContentPagesWithSearch#ViewContentPageNotShownInSearchResultsAfterDeleteCategory";

		task ("Publish the content page") {
			JSONLayout.publishLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name");
		}

		task ("Add a a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Associate a category to page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Test Content Page Name");

			PagesAdmin.addCategory(
				categoryName = "Category Name",
				vocabularyName = "Vocabulary Name");

			PortletEntry.save();
		}

		task ("Navigate to the search page") {
			Navigator.gotoSitePage(
				pageName = "Search",
				siteName = "Test Site Name");
		}

		task ("Search for category") {
			Search.searchCP(searchTerm = "Category");
		}

		task ("View the content page is shown in the search results") {
			Search.viewResultAssetTitle(searchAssetTitle = "Test Content Page Name");
		}

		task ("Delete the category") {
			JSONCategory.deleteCategory(
				categoryName = "Category Name",
				groupName = "Test Site Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Navigate to the search page") {
			Navigator.gotoSitePage(
				pageName = "Search",
				siteName = "Test Site Name");
		}

		task ("Search for category") {
			Search.searchCP(searchTerm = "Category");
		}

		task ("View the content page is not shown in the search results") {
			Search.viewNoResultAssetTitle(searchAssetTitle = "Test Content Page Name");
		}
	}

	@description = "This is a test for LPS-119582. View content page shown in search results after execute reindex all."
	@priority = "5"
	test ViewContentPageShownInSearchResultsAfterExecuteReindexAll {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ContentPagesWithSearch#ViewContentPageShownInSearchResultsAfterExecuteReindexAll";

		task ("Add a Paragraph fragment to content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph");
		}

		task ("Edit the inline content of Paragraph") {
			PageEditor.editFragmentText(
				fragmentName = "Paragraph",
				id = "element-text",
				text = "Searchable paragraph");
		}

		task ("Publish the content page") {
			PageEditor.clickPublish();
		}

		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Searchable Web Content Title");
		}

		task ("Navigate to the search page") {
			Navigator.gotoSitePage(
				pageName = "Search",
				siteName = "Test Site Name");
		}

		task ("Search keyword via search bar") {
			Search.searchCP(searchTerm = "Searchable");
		}

		task ("View both content page and web content shown in the search results") {
			for (var title : list "Test Content Page Name,Searchable Web Content Title") {
				Search.viewResultAssetTitle(searchAssetTitle = "${title}");
			}
		}

		task ("Execute Reindex all search indexes") {
			SearchAdministration.executeReindex();
		}

		task ("Navigate to the search page") {
			Navigator.gotoSitePage(
				pageName = "Search",
				siteName = "Test Site Name");
		}

		task ("Search keyword via search bar") {
			Search.searchCP(searchTerm = "Searchable");
		}

		task ("View both content page and web content are still shown in the search results") {
			for (var title : list "Test Content Page Name,Searchable Web Content Title") {
				Search.viewResultAssetTitle(searchAssetTitle = "${title}");
			}
		}
	}

}