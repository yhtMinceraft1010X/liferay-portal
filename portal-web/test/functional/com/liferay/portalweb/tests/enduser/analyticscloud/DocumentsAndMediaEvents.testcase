@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		AntCommand(
			locator1 = "build-test.xml",
			value1 = "record-test-generated-properties");

		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a document Display to page") {
			ACUtils.createDMAndAddToPage(
				dmDocumentFile = "Document_1.jpg",
				dmDocumentTitle = "New Document");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");

			JSONUser.tearDownNonAdminUsers();
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8969 | Test Summary: Check documentDownloaded triggers when a file is downloaded in a DXP site and check its properties (see reference document in comments)"
	@priority = "5"
	test CheckDocumentDownloadedInSiteAndCheckProperties {
		property proxy.server.enabled = "true";

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Get groupId of new site") {
			var groupId = JSONGroupSetter.setGroupId(groupName = "Site Name");
		}

		task ("Get articleId of document") {
			var fileEntryId = JSONDocument.getFileEntryId(
				dmDocumentTitle = "New Document",
				groupName = "Site Name");
		}

		task ("Get groupId of new site") {
			var groupId = JSONGroupSetter.setGroupId(groupName = "Site Name");
		}

		task ("Download the document from widget") {
			ACUtils.navigateToSitePage(
				actionType = "View DM",
				documentTitleList = "New Document",
				pageName = "AC Page",
				siteName = "Site Name");

			DMDocument.expandInfo();

			ProxyUtil.startHarRecording("documentEvents");

			AssertClick.assertPartialTextClickAt(
				locator1 = "Button#DOWNLOAD_SIDEBAR",
				value1 = "Download");

			Pause(locator1 = "5000");
		}

		task ("View the Document events triggered") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentDownloaded",
				property = "fileEntryId",
				value = "${fileEntryId}");

			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentDownloaded",
				property = "title",
				value = "New Document");

			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentDownloaded",
				property = "preview",
				value = "true");

			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentDownloaded",
				property = "version",
				value = "");

			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentDownloaded",
				property = "groupId",
				value = "${groupId}");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8944 | Test Summary: Check documentPreviewed is triggered when viewing the document on a page and has the right parameters"
	@priority = "3"
	test CheckDocumentPreviewedWhenViewOnPageAndCheckParameters {
		property proxy.server.enabled = "true";

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			Pause(locator1 = "10000");

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Get articleId of document") {
			var fileEntryId = JSONDocument.getFileEntryId(
				dmDocumentTitle = "New Document",
				groupName = "Site Name");
		}

		task ("Get groupId of new site") {
			var groupId = JSONGroupSetter.setGroupId(groupName = "Site Name");
		}

		task ("Get fileEntryUUID of document") {
			var fileEntryUuid = JSONDocument.getFileEntryUUID(
				dmDocumentTitle = "New Document",
				groupName = "Site Name");
		}

		task ("Download the document from widget") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			ProxyUtil.startHarRecording("documentEvents");

			Click(
				key_card = "New Document",
				locator1 = "Card#CARD_TITLE");

			Pause(locator1 = "10000");
		}

		task ("View the Document events triggered") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentPreviewed",
				property = "fileEntryId",
				value = "${fileEntryId}");

			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentPreviewed",
				property = "title",
				value = "New Document");

			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentPreviewed",
				property = "groupId",
				value = "${groupId}");

			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentPreviewed",
				property = "fileEntryUUID",
				value = "${fileEntryUuid}");

			ACUtils.assertEventPropertyValue(
				applicationId = "Document",
				eventId = "documentPreviewed",
				property = "version",
				value = "1.0");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

}