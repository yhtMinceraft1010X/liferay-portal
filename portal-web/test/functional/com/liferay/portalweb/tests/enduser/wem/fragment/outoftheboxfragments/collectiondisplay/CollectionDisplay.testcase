@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page Name",
				type = "content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-112249. The Content Flags, Content Ratings and Content Display are compatible and consistent in the same cell of Collection Display."
	@priority = "4"
	test AddAllThreeContentFragmentsToOneCell {
		task ("Add three web contents") {
			for (var i : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "WC WebContent Content ${i}",
					groupName = "Test Site Name",
					title = "WC WebContent Title ${i}");
			}
		}

		task ("Add a dynamic collection for Web Content Article and Basic Web Content") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Display fragment to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");

			var n = "1";

			for (var i : list "3,2,1") {
				PageEditor.viewCollectionItem(
					assetTitle = "WC WebContent Title ${i}",
					row = "${n}");

				var n = ${n} + 1;
			}
		}

		task ("Add a Content Flags, Content Ratings and Content Display into one cell of Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "WC WebContent Title 3",
				fragmentName = "Content Flags");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				fragmentName = "Content Ratings",
				targetFragmentName = "Content Flags");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				fragmentName = "Content Display",
				targetFragmentName = "Content Ratings");
		}

		task ("View above fragments also shown in other cells of Collection Display") {
			for (var i : list "1,2,3") {
				AssertTextEquals(
					index = "${i}",
					locator1 = "Fragment#CONTENT_RATINGS_YOUR_RATING_STAR_RESULT",
					value1 = "-");

				AssertVisible(
					index = "${i}",
					locator1 = "Fragment#CONTENT_RATINGS_AVERAGE_STAR");

				AssertTextEquals(
					index = "${i}",
					key_fragmentName = "Content Flags",
					locator1 = "Fragment#FRAGMENT_CONTENT",
					value1 = "Report");
			}

			var n = "1";

			for (var i : list "3,2,1") {
				ContentPages.viewFragmentText(
					assetType = "journal",
					fragmentName = "Content Display",
					position = "${n}",
					text = "WC WebContent Content ${i}");

				var n = ${n} + 1;
			}
		}

		task ("View the title of collection item shown in Item field") {
			for (var fragmentName : list "Content Flags,Content Ratings,Content Display") {
				PageEditor.gotoConfiguration(fragmentName = "${fragmentName}");

				InputField.viewText(
					fieldLabel = "Item",
					text = "WC WebContent Title 3");
			}
		}
	}

	@description = "This is a use case for LPS-86141 and for LPS-107665. The fragment should be added to all cells of the Collection Display when add it to one cell."
	@priority = "5"
	@uitest
	test AddFragmentToOneCell {
		property portal.acceptance = "true";

		task ("Add three Web Content Articles based on Basic Web Content") {
			for (var entryTitle : list "First Web Content,Second Web Content,Third Web Content") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = "Test Site Name",
					title = "${entryTitle}");
			}
		}

		task ("Add a dynamic Collections and select Web Content Article as Asset Entry Type") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Add a Button fragment to the first cell") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Third Web Content",
				fragmentName = "Button");
		}

		task ("Assert the Button fragment is also added to other cells") {
			for (var n : list "1,2,3") {
				PageEditor.viewFragmentEditableText(
					editableText = "Go Somewhere",
					fragmentName = "Button",
					id = "link",
					position = "${n}");
			}
		}
	}

	@description = "This is a use case for LPS-86141. The mapped content of asset entries in selected collection should be respectively shown in each cell of the Collection Display when map content to editable field of one fragment in one cell."
	@priority = "4"
	test MapContentToTextFragment {
		task ("Add three Web Content Articles based on Basic Web Content") {
			for (var entryTitle : list "First Web Content,Second Web Content,Third Web Content") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = "Test Site Name",
					title = "${entryTitle}");
			}
		}

		task ("Add a dynamic Collections and select Web Content Article as Asset Entry Type") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Add a Heading fragment to the first cell") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Third Web Content",
				fragmentName = "Heading");
		}

		task ("Map Title of collection items to editable field") {
			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Assert the title of three Web Content Articles are respectively shown in each cell") {
			var n = "1";

			for (var title : list "Third Web Content,Second Web Content,First Web Content") {
				PageEditor.viewFragmentEditableText(
					editableText = "${title}",
					fragmentName = "Heading",
					id = "element-text",
					position = "${n}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-116034. The custom ddmfields of single type collection items are available for mapping in editable field."
	@priority = "4"
	test MapCustomDDMFieldToFragmentBasedOnSingleTypeCollection {
		task ("Add a custom Web Content structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a template for new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Text",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				structureName = "WC Structure Name",
				webContentText = "Web Content Content",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a custom Document type") {
			DMNavigator.openDocumentTypesAdmin(siteURLKey = "test-site-name");

			DMDocumentType.add(
				dmDocumentTypeDescription = "DM Document Type Description",
				dmDocumentTypeFieldNames = "Text",
				dmDocumentTypeName = "DM Document Type Name");
		}

		task ("Add a document based on new document type") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title",
				dmDocumentTypeName = "DM Document Type Name",
				textField = "DM Document Text");
		}

		task ("Add a dynamic collection with Web Content Article and new web content structure") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "WC Structure Name",
				itemType = "Web Content Article",
				title = "Dynamic Collection");
		}

		task ("Add a manual collection with new document entry") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "DM Document Type Name",
				itemType = "Document",
				title = "Manual Collection");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Collection",
				assetName = "DM Document Title",
				assetType = "DM Document Type Name");
		}

		task ("Map custom ddmfield of web content structure to Heading fragment in Collection Display based on the dynamic collection") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Web Content Title",
				fragmentName = "Heading");

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Text",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.viewFragmentEditableText(
				editableText = "Web Content Content",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Web Content Content");
		}

		task ("Map custom ddmfield of document type to Paragraph fragment in Collection Display based on the manual collection") {
			ContentPages.gotoPageEditor();

			PageEditor.removeFragment(fragmentName = "Collection Display");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				assetListName = "Manual Collection",
				fragmentName = "Collection Display");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "DM Document Title",
				fragmentName = "Paragraph");

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Text",
				fragmentName = "Paragraph",
				id = "element-text");

			PageEditor.viewFragmentEditableText(
				editableText = "DM Document Text",
				fragmentName = "Paragraph",
				id = "element-text");

			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			ContentPages.viewFragmentText(
				fragmentName = "paragraph",
				id = "element-text",
				text = "DM Document Text");
		}
	}

	@description = "This is a use case for LPS-127706. Assert the mapped image to background image of Container in collection display is shown in view mode."
	@priority = "3"
	test MapImageToBackgroundImageOfContainer {
		task ("Add a custom structure with image field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Image",
				fieldName = "Image");

			WebContentStructures.saveCP();
		}

		task ("Add a web content article based on new structure and select an image") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				navTab = "Web Content Images",
				webContentImage = "Document_1.jpg",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a manual collecton with Web Content Article item type and WC Structure Name item subtype") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "WC Structure Name",
				itemType = "Web Content Article",
				title = "Manual Collection");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Collection",
				assetName = "Web Content Title",
				assetType = "WC Structure Name");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the Manual Collection") {
			PageEditor.editCollectionDisplay(
				assetListName = "Manual Collection",
				fragmentName = "Collection Display");
		}

		task ("Add a Container element to the cell of Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Layout Elements",
				entryTitle = "Web Content Title",
				fragmentName = "Container");
		}

		task ("Add a Paragraph fragment into Container") {
			PageEditor.addElementToContainer(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				navTab = "Fragments");
		}

		task ("Map image field of web content article to background image of Container") {
			PageEditor.editLayoutContainer(
				backgroundImage = "Mapping",
				fieldName = "Image",
				panel = "Styles");
		}

		task ("Assert the mapping image is shown in Container") {
			PageEditor.viewContainerStyle(
				backgroundImage = "Document_1.jpg",
				position = "1");
		}

		task ("Assert the image is shown in view mode") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			ContentPages.viewFragmentText(
				fragmentName = "paragraph",
				id = "element-text",
				text = "A paragraph is a self-contained unit of a discourse in writing dealing with a particular point or idea. Paragraphs are usually an expected part of formal writing, used to organize longer prose.");

			ContentPages.viewFragmentBackgroundImage(image = "Document_1.jpg");
		}
	}

	@description = "This is a use case for LPS-120309. Assert the mapped image to Image fragment in collection display is shown in view mode."
	@priority = "4"
	test MapImageToImageFragment {
		task ("Add a custom structure with image field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Image",
				fieldName = "Image");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content article based on new structure and select an image") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				navTab = "Web Content Images",
				structureName = "WC Structure Name",
				webContentImage = "Document_1.jpg",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Add a dynamic collection with Web Content Article and new structure") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.addDynamicSelection(assetListTitle = "Dynamic Collection");

			AssetListsAdmin.configureItemTypeInDynamicCollection(
				itemSubtype = "WC Structure Name",
				itemType = "Web Content Article");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Add an Image fragment to the cell of Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Web Content Title",
				fragmentName = "Image");
		}

		task ("Map image field of web content article to editable field") {
			PageEditorMapping.gotoEditableFieldMapping(
				fragmentName = "Image",
				id = "image-square");

			Select(
				key_fieldLabel = "Field",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Image");

			PageEditor.waitForAutoSave();
		}

		task ("Assert the image is shown in collection display") {
			AssertVisible(
				id = "image-square",
				key_image = "Document_1.jpg",
				key_imageDescription = "",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_EDITABLE_FIELD_IMAGE_PROPERTIES");
		}

		task ("Assert the image is shown in view mode") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			ContentPages.viewFragmentImage(
				fragmentName = "image",
				id = "image-square",
				image = "Document_1.jpg");
		}
	}

	@description = "This is a use case for LPS-86141. The changes will be propagated to others cells when edit inline content of fragment in one cell."
	@priority = "4"
	test PropagateChangesOfInlineContentToOtherCells {
		task ("Add three documents") {
			for (var entryTitle : list "First Document,Second Document,Third Document") {
				JSONDocument.addFile(
					dmDocumentDescription = "DM Description",
					dmDocumentTitle = "${entryTitle}",
					groupName = "Test Site Name");
			}
		}

		task ("Add a dynamic Collections and select Document as Asset Entry Type") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Document",
				itemType = "Document",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection and 3 Columns") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display",
				layout = "3 Columns");
		}

		task ("Add a Heading fragment to the first cell") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Third Document",
				fragmentName = "Heading");
		}

		task ("Edit inline Content of Heading in the first column") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Modified Text");
		}

		task ("Assert propagate changes of inline content to other cells") {
			for (var n : list "1,2,3") {
				PageEditor.viewFragmentEditableText(
					editableText = "Modified Text",
					fragmentName = "Heading",
					id = "element-text",
					position = "${n}");
			}
		}
	}

	@description = "This is a test for LPS-112093. The Blogs Entries of collection are displayed using Full Content when add a Content Display to Collection Display."
	@priority = "4"
	test ViewBlogEntryInContentDisplay {
		task ("Add three blog entries") {
			for (var i : list "1,2,3") {
				HeadlessBlog.addBlogEntry(
					content = "Blogs Entry Content ${i}",
					groupName = "Test Site Name",
					title = "Blogs Entry Title ${i}");
			}
		}

		task ("Add a dynamic collection for Blogs Entry") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "Blogs Entry",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("View the collection items shown in Collection Display") {
			var n = "1";

			for (var i : list "3,2,1") {
				PageEditor.viewCollectionItem(
					assetTitle = "Blogs Entry Title ${i}",
					row = "${n}");

				var n = ${n} + 1;
			}
		}

		task ("Add a Content Display into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "Blogs Entry Title 3",
				fragmentName = "Content Display");
		}

		task ("View the content of blogs entries shown in Content Display") {
			var n = "1";

			for (var i : list "3,2,1") {
				ContentPages.viewFragmentText(
					assetType = "widget-content",
					fragmentName = "Content Display",
					position = "${n}",
					text = "Blogs Entry Content ${i}");

				var n = ${n} + 1;
			}
		}

		task ("View the Full Content applied to Content Display") {
			PageEditor.gotoConfiguration(fragmentName = "Content Display");

			AssertSelectedLabel(
				key_fieldLabel = "Template",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Full Content");
		}
	}

	@description = "This is a test for LPS-112093. The documents of collection are displayed using Abstract when add a Content Display to Collection Display."
	@priority = "5"
	@uitest
	test ViewDocumentInContentDisplay {
		property portal.acceptance = "true";

		task ("Add three documents with image") {
			for (var i : list "1,2,3") {
				JSONDocument.addFileWithUploadedFile(
					dmDocumentDescription = "DM Document Description",
					dmDocumentTitle = "Document Title ${i}",
					groupName = "Test Site Name",
					mimeType = "image/jpeg",
					sourceFileName = "Document_${i}.jpg");
			}
		}

		task ("Add a dynamic collection for Document and Basic Document") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Document",
				itemType = "Document",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("View the collection items shown in Collection Display") {
			var n = "1";

			for (var i : list "3,2,1") {
				PageEditor.viewCollectionItem(
					assetTitle = "Document Title ${i}",
					row = "${n}");

				var n = ${n} + 1;
			}
		}

		task ("Add a Content Display into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "Document Title 3",
				fragmentName = "Content Display");
		}

		task ("View the images shown in Content Display") {
			var n = "1";

			for (var image : list "Document_3.jpg,Document_2.jpg,Document_1.jpg") {
				ContentPages.viewFragmentBackgroundImage(
					image = "${image}",
					position = "${n}");

				var n = ${n} + 1;
			}
		}

		task ("View the Abstract applied to Content Display") {
			PageEditor.gotoConfiguration(fragmentName = "Content Display");

			AssertSelectedLabel(
				key_fieldLabel = "Template",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Abstract");
		}
	}

	@description = "This is a use case for LPS-114770. The Collection Display can select a dynamic collection with Any asset types."
	@priority = "5"
	@uitest
	test ViewDynamicCollectionWithAnyAssetType {
		property portal.acceptance = "true";

		task ("Add a Web Content Article,a Blogs Entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a dynamic Collection and select Any as Asset Entry Type") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Assert assets are available to Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				PageEditor.viewCollectionItem(
					assetTitle = "${title}",
					row = "${n}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a use case for LPS-114770. The Collection Display can select a dynamic collection with Select More Than One asset type."
	@priority = "4"
	test ViewDynamicCollectionWithMoreThanOneAssetType {
		task ("Add a Web Content Article,a Blogs Entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a dynamic Collection and select Select More Than One... as Asset Entry Type") {
			JSONAssetlist.addDynamicAssetListEntry(
				groupName = "Test Site Name",
				title = "Dynamic Collection");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Dynamic Collection");

			AssetListsAdmin.configureItemTypeInDynamicCollection(itemType = "Select Types...");

			for (var key_type : list "Web Content Article,Blogs Entry,Document") {
				AssertVisible(locator1 = "AssetLists#ASSET_LIST_ENTRY_TYPE_SELECTED");
			}
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Assert assets are available to Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				PageEditor.viewCollectionItem(
					assetTitle = "${title}",
					row = "${n}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-112249. The flags of each collection item are shown when add a Content Flags fragment to Collection Display."
	@priority = "5"
	@uitest
	test ViewFlagsInContentFlags {
		property portal.acceptance = "true";

		task ("Add three web contents") {
			for (var i : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "WC WebContent Content ${i}",
					groupName = "Test Site Name",
					title = "WC WebContent Title ${i}");
			}
		}

		task ("Add a dynamic collection for Web Content Article and Basic Web Content") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("View the collection items shown in Collection Display") {
			var n = "1";

			for (var i : list "3,2,1") {
				PageEditor.viewCollectionItem(
					assetTitle = "WC WebContent Title ${i}",
					row = "${n}");

				var n = ${n} + 1;
			}
		}

		task ("Add a Content Flags into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "WC WebContent Title 3",
				fragmentName = "Content Flags");
		}

		task ("View the Content Flags are shown in each cell") {
			for (var i : list "1,2,3") {
				AssertTextEquals(
					index = "${i}",
					key_fragmentName = "Content Flags",
					locator1 = "Fragment#FRAGMENT_CONTENT",
					value1 = "Report");
			}
		}

		task ("View the web content title shown in Item field") {
			var n = "1";

			for (var i : list "3,2,1") {
				PageEditor.gotoConfiguration(
					fragmentName = "Content Flags",
					index = "${n}");

				InputField.viewText(
					fieldLabel = "Item",
					text = "WC WebContent Title ${i}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a use case for LPS-112749. When mapping asset field to fragment in Collection Display based on collection with multiple itemTypes, the Item Type label will be shown in mapping label."
	@priority = "4"
	test ViewItemTypeLabelMappedInCollectionWithMultipleItemTypes {
		task ("Add a web content, blog entry and document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a dynamic collection for All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add a manual collection for All Types") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Manual Collection");
		}

		task ("Select all assets in manual collection") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Collection",
				assetName = "Document Title",
				assetType = "Basic Document");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Collection",
				assetName = "Blogs Entry Title",
				assetType = "Blogs Entry",
				siteURLKey = "test-site-name");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Collection",
				assetName = "Web Content Title",
				assetType = "Basic Web Content",
				pageName = "Content Page Name",
				siteName = "Test Site Name");
		}

		task ("Add a Collection Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Add a Heading fragment into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Web Content Title",
				fragmentName = "Heading");
		}

		task ("View item type shown in Mapping panel") {
			PageEditorMapping.gotoEditableFieldMapping(
				contributed = "true",
				fragmentName = "Heading",
				id = "text");

			AssertTextEquals(
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_SECONDARY_TEXT",
				value1 = "You can use mapping to display specific fields of the items in the collection. The fields available depend on the type and subtype common to all items in the collection.");

			AssertTextEquals(
				locator1 = "PageEditor#MAPPING_PANEL_TYPE_LABEL",
				value1 = "Type:Asset");
		}

		task ("View available mappable fields") {
			for (var field : list "Title,Description,Summary,User Name,Create Date,Modified Date,Expiration Date,View Count,URL,All Categories,Tags") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_value = "${field}",
					locator1 = "Select#GENERIC_SELECT_VALUE");
			}
		}

		task ("Change to manual collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Manual Collection",
				fragmentName = "Collection Display");
		}

		task ("View item type shown in Mapping panel") {
			PageEditorMapping.gotoEditableFieldMapping(
				contributed = "true",
				fragmentName = "Heading",
				id = "text");

			AssertTextEquals(
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_SECONDARY_TEXT",
				value1 = "You can use mapping to display specific fields of the items in the collection. The fields available depend on the type and subtype common to all items in the collection.");

			AssertTextEquals(
				locator1 = "PageEditor#MAPPING_PANEL_TYPE_LABEL",
				value1 = "Type:Asset");
		}

		task ("View available mappable fields") {
			for (var field : list "Title,Description,Summary,User Name,Create Date,Modified Date,Expiration Date,View Count,URL,All Categories,Tags") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_value = "${field}",
					locator1 = "Select#GENERIC_SELECT_VALUE");
			}
		}
	}

	@description = "This is a use case for LPS-112749. When mapping asset field fragment in Collection Display based on collection with single itemType and specific subType, the Item Type and Item Subtype label will be shown in mapping panel."
	@priority = "4"
	test ViewItemTypeLabelMappedInCollectionWithSingleAndSpecificItemType {
		task ("Add a web content and document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a dynamic collection for Web Content Article and Basic Web Content") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article",
				title = "Dynamic Collection");
		}

		task ("Add a manual collection for Document and Basic Document") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Document",
				itemType = "Document",
				title = "Manual Collection");
		}

		task ("Select the document in manual collection") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Collection",
				assetName = "Document Title",
				assetType = "Basic Document");
		}

		task ("Add a Collection Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Add a Heading fragment into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Web Content Title",
				fragmentName = "Heading");
		}

		task ("View item type and item subtype shown in Mapping panel") {
			PageEditorMapping.gotoEditableFieldMapping(
				contributed = "true",
				fragmentName = "Heading",
				id = "text");

			AssertTextEquals(
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_SECONDARY_TEXT",
				value1 = "You can use mapping to display specific fields of the items in the collection. The fields available depend on the type and subtype common to all items in the collection.");

			AssertTextEquals(
				locator1 = "PageEditor#MAPPING_PANEL_TYPE_LABEL",
				value1 = "Type:Web Content Article");

			AssertTextEquals(
				locator1 = "PageEditor#MAPPING_PANEL_SUB_TYPE_LABEL",
				value1 = "Subtype:Basic Web Content");
		}

		task ("Change to manual collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Manual Collection",
				fragmentName = "Collection Display");
		}

		task ("View item type and item subtype shown in Mapping panel") {
			PageEditorMapping.gotoEditableFieldMapping(
				contributed = "true",
				fragmentName = "Heading",
				id = "text");

			AssertTextEquals(
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_SECONDARY_TEXT",
				value1 = "You can use mapping to display specific fields of the items in the collection. The fields available depend on the type and subtype common to all items in the collection.");

			AssertTextEquals(
				locator1 = "PageEditor#MAPPING_PANEL_TYPE_LABEL",
				value1 = "Type:Document");

			AssertTextEquals(
				locator1 = "PageEditor#MAPPING_PANEL_SUB_TYPE_LABEL",
				value1 = "Subtype:Basic Document");
		}
	}

	@description = "This is a use case for LPS-112749. When mapping asset field to fragment in Collection Display based on collection with single itemType, the Item Type label will be shown in mapping panel."
	@priority = "4"
	test ViewItemTypeLabelMappedInCollectionWithSingleItemType {
		task ("Add a web content, blog entry and document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add the first dynamic collection for Web Content Article and Basic Web Content") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article",
				title = "First Dynamic Collection");
		}

		task ("Add the second dynamic collection for Blogs Entry") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "Blogs Entry",
				title = "Second Dynamic Collection");
		}

		task ("Add a manual collection for Document and All Subtypes") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "All Subtypes",
				itemType = "Document",
				title = "Manual Collection");
		}

		task ("Select the document in manual collection") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Collection",
				assetName = "Document Title",
				assetType = "Basic Document");
		}

		task ("Add a Collection Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the first dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "First Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Add a Heading fragment into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Web Content Title",
				fragmentName = "Heading");
		}

		task ("View item type and item subtype shown in Mapping panel") {
			PageEditorMapping.gotoEditableFieldMapping(
				contributed = "true",
				fragmentName = "Heading",
				id = "text");

			AssertTextEquals(
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_SECONDARY_TEXT",
				value1 = "You can use mapping to display specific fields of the items in the collection. The fields available depend on the type and subtype common to all items in the collection.");

			AssertTextEquals(
				locator1 = "PageEditor#MAPPING_PANEL_TYPE_LABEL",
				value1 = "Type:Web Content Article");
		}

		task ("Change to the second dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Second Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("View item type and item subtype shown in Mapping panel") {
			PageEditorMapping.gotoEditableFieldMapping(
				contributed = "true",
				fragmentName = "Heading",
				id = "text");

			AssertTextEquals(
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_SECONDARY_TEXT",
				value1 = "You can use mapping to display specific fields of the items in the collection. The fields available depend on the type and subtype common to all items in the collection.");

			AssertTextEquals(
				locator1 = "PageEditor#MAPPING_PANEL_TYPE_LABEL",
				value1 = "Type:Blogs Entry");
		}

		task ("Change to the manual collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Manual Collection",
				fragmentName = "Collection Display");
		}

		task ("View item type and item subtype shown in Mapping panel") {
			PageEditorMapping.gotoEditableFieldMapping(
				contributed = "true",
				fragmentName = "Heading",
				id = "text");

			AssertTextEquals(
				locator1 = "PageEditor#FRAGMENT_SIDEBAR_SECONDARY_TEXT",
				value1 = "You can use mapping to display specific fields of the items in the collection. The fields available depend on the type and subtype common to all items in the collection.");

			AssertTextEquals(
				locator1 = "PageEditor#MAPPING_PANEL_TYPE_LABEL",
				value1 = "Type:Document");
		}
	}

	@description = "This is a use case for LPS-114770. The Collection Display can select a manual collection with multiple asset types."
	@priority = "5"
	@uitest
	test ViewManualCollectionWithAssetTypes {
		property portal.acceptance = "true";

		task ("Add a Web Content Article,a Blogs Entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a manual Collection and select the Web Content Article,Blogs Entry and document") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Manual Collection");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Collection",
				assetName = "Web Content Title",
				assetType = "Basic Web Content");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Collection",
				assetName = "Blogs Entry Title",
				assetType = "Blogs Entry");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Collection",
				assetName = "Document Title",
				assetType = "Basic Document");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Assert manual collection is unavailable to Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Manual Collection",
				fragmentName = "Collection Display");

			var n = "1";

			for (var title : list "Web Content Title,Blogs Entry Title,Document Title") {
				PageEditor.viewCollectionItem(
					assetTitle = "${title}",
					row = "${n}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-118979. The mappable fields are grouped by fieldset in Collection Display based on single type collection."
	@priority = "4"
	test ViewMappableFieldsAreGroupedByFieldsetBasedOnSingleTypeCollection {
		task ("Add a web content article based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a blogs entry") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Add a custom Document type") {
			DMNavigator.openDocumentTypesAdmin(siteURLKey = "test-site-name");

			DMDocumentType.add(
				dmDocumentTypeDescription = "DM Document Type Description",
				dmDocumentTypeFieldNames = "Text",
				dmDocumentTypeName = "DM Document Type Name");
		}

		task ("Add a document based on new document type") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title",
				dmDocumentTypeName = "DM Document Type Name",
				textField = "DM Document Text");
		}

		task ("Add a dynamic collection based on Web Content Article and Basic Web Content") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article",
				title = "Dynamic Collection 1");
		}

		task ("Add a dynamic collection based on Blogs Entry") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "Blogs Entry",
				title = "Dynamic Collection 2");
		}

		task ("Add a manual collection based on Document and new document type and Select the document") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "DM Document Type Name",
				itemType = "Document",
				title = "Manual Collection");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Collection",
				assetName = "DM Document Title",
				assetType = "DM Document Type Name");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the Dynamic Collection 1") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection 1",
				fragmentName = "Collection Display");
		}

		task ("Add a Heading fragment to the cell of Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Web Content Title",
				fragmentName = "Heading");
		}

		task ("Access to the mapping panel of Heading") {
			Click.clickNoWaitForVisible(
				key_colPosition = "1",
				key_element = "//div[@aria-label='Heading']",
				key_fragmentName = "Collection Display",
				key_rowPosition = "1",
				locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT");

			Click(
				key_colPosition = "1",
				key_element = "//*[contains(@class,'heading') and contains(@data-lfr-editable-id,'element-text')]",
				key_fragmentName = "Collection Display",
				key_rowPosition = "1",
				locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT");

			Pause(locator1 = "3000");

			AssertClick(
				key_navItem = "Mapping",
				locator1 = "PageEditor#NAV_ITEM_BUTTON",
				value1 = "Mapping");
		}

		task ("Assert the mappable fields are grouped by fieldset") {
			for (var field : list "Title,Description,Publish Date,Author Name,Last Editor Name") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Basic Information",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			AssertElementPresent(
				key_fieldLabel = "Field",
				key_groupLabel = "Content (Basic Web Content)",
				key_value = "Content",
				locator1 = "Select#GROUPED_SELECT_VALUE");

			AssertElementPresent(
				key_fieldLabel = "Field",
				key_groupLabel = "Templates",
				key_value = "Basic Web Content",
				locator1 = "Select#GROUPED_SELECT_VALUE");

			AssertElementPresent(
				key_fieldLabel = "Field",
				key_groupLabel = "Display Page",
				key_value = "Display Page URL",
				locator1 = "Select#GROUPED_SELECT_VALUE");

			for (var field : list "All Categories,Topic,Tags") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Categorization",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			for (var field : list "Display Date,Expiration Date") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Schedule",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}
		}

		task ("Select the Dynamic Collection 2") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection 2",
				fragmentName = "Collection Display");
		}

		task ("Access to the mapping panel of Heading") {
			Click.clickNoWaitForVisible(
				key_colPosition = "1",
				key_element = "//div[@aria-label='Heading']",
				key_fragmentName = "Collection Display",
				key_rowPosition = "1",
				locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT");

			Click(
				key_colPosition = "1",
				key_element = "//*[contains(@class,'heading') and contains(@data-lfr-editable-id,'element-text')]",
				key_fragmentName = "Collection Display",
				key_rowPosition = "1",
				locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT");

			Pause(locator1 = "3000");

			AssertClick(
				key_navItem = "Mapping",
				locator1 = "PageEditor#NAV_ITEM_BUTTON",
				value1 = "Mapping");
		}

		task ("Assert the mappable fields are grouped by fieldset") {
			for (var field : list "Title,Author Name") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Basic Information",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			for (var field : list "Subtitle,Cover Image Caption,Content") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Content",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			for (var field : list "Display Page URL,Description,Display Date") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Configuration",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			for (var field : list "All Categories,Topic,Tags") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Categorization",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}
		}

		task ("Select the Manual Collection") {
			PageEditor.editCollectionDisplay(
				assetListName = "Manual Collection",
				fragmentName = "Collection Display");
		}

		task ("Access to the mapping panel of Heading") {
			Click.clickNoWaitForVisible(
				key_colPosition = "1",
				key_element = "//div[@aria-label='Heading']",
				key_fragmentName = "Collection Display",
				key_rowPosition = "1",
				locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT");

			Click(
				key_colPosition = "1",
				key_element = "//*[contains(@class,'heading') and contains(@data-lfr-editable-id,'element-text')]",
				key_fragmentName = "Collection Display",
				key_rowPosition = "1",
				locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT");

			Pause(locator1 = "3000");

			AssertClick(
				key_navItem = "Mapping",
				locator1 = "PageEditor#NAV_ITEM_BUTTON",
				value1 = "Mapping");
		}

		task ("Assert the mappable fields are grouped by fieldset") {
			for (var field : list "Title,Description,Version,Publish Date,Author Name") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Basic Information",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			for (var field : list "File Name,Download URL,MIME Type,Size") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "File Information",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}

			AssertElementPresent(
				key_fieldLabel = "Field",
				key_groupLabel = "DM Document Type Name",
				key_value = "Text",
				locator1 = "Select#GROUPED_SELECT_VALUE");

			for (var field : list "All Categories,Topic,Tags") {
				AssertElementPresent(
					key_fieldLabel = "Field",
					key_groupLabel = "Categorization",
					key_value = "${field}",
					locator1 = "Select#GROUPED_SELECT_VALUE");
			}
		}
	}

	@description = "This is a test for LPS-112249. The ratings of each collection item are shown when add a Content Ratings fragment to Collection Display."
	@priority = "5"
	@uitest
	test ViewRatingsInContentRatings {
		property portal.acceptance = "true";

		task ("Add three web contents") {
			for (var i : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "WC WebContent Content ${i}",
					groupName = "Test Site Name",
					title = "WC WebContent Title ${i}");
			}
		}

		task ("Add a dynamic collection") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("View the collection items shown in Collection Display") {
			var n = "1";

			for (var i : list "3,2,1") {
				PageEditor.viewCollectionItem(
					assetTitle = "WC WebContent Title ${i}",
					row = "${n}");

				var n = ${n} + 1;
			}
		}

		task ("Add a Content Ratings into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "WC WebContent Title 3",
				fragmentName = "Content Ratings");
		}

		task ("View the Content Ratings shown in each cell") {
			for (var i : list "1,2,3") {
				AssertTextEquals(
					index = "${i}",
					locator1 = "Fragment#CONTENT_RATINGS_YOUR_RATING_STAR_RESULT",
					value1 = "-");

				AssertVisible(
					index = "${i}",
					locator1 = "Fragment#CONTENT_RATINGS_AVERAGE_STAR");
			}
		}

		task ("View the web content title shown in Item field") {
			var n = "1";

			for (var i : list "3,2,1") {
				PageEditor.gotoConfiguration(
					fragmentName = "Content Ratings",
					index = "${n}");

				InputField.viewText(
					fieldLabel = "Item",
					text = "WC WebContent Title ${i}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-112094. The title of asset entries should be shown when select Title as List Item Style for different List styles."
	@priority = "5"
	@uitest
	test ViewTitleListItemStyleInDifferentListStyles {
		property environment.acceptance = "true";
		property portal.acceptance = "true";

		task ("Add a Web Content Article,a Blogs Entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a dynamic collection with All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Display fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection, Bordered List as List Style and Title as List Item Style") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display",
				listItemStyle = "Title",
				styleDisplay = "Bordered List");
		}

		task ("Assert the Title of collection items are shown in Bordered List") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST");

				var n = ${n} + 1;
			}
		}

		task ("Assert the Title of collection items are shown in Bordered List at view mode") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}

		task ("Select the Bulleted List as List Style and Title as List Item Style") {
			ContentPages.gotoPageEditor();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Title",
				selectedName = "Dynamic Collection",
				styleDisplay = "Bulleted List");
		}

		task ("Assert the Title of collection items are shown in Bulleted List") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST");

				var n = ${n} + 1;
			}
		}

		task ("Assert the Title of collection items are shown in Bulleted List at view mode") {
			PageEditor.clickPublish();

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}

		task ("Select the Inline List as List Style and Title as List Item Style") {
			ContentPages.gotoPageEditor();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Title",
				selectedName = "Dynamic Collection",
				styleDisplay = "Inline List");
		}

		task ("Assert the Title of collection items are shown in Inline List") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST");

				var n = ${n} + 1;
			}
		}

		task ("Assert the Title of collection items are shown in Inline List at view mode") {
			PageEditor.clickPublish();

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}

		task ("Select the Numbered List as List Style and Title as List Item Style") {
			ContentPages.gotoPageEditor();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Title",
				selectedName = "Dynamic Collection",
				styleDisplay = "Numbered List");
		}

		task ("Assert the Title of collection items are shown in Numbered List") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST");

				var n = ${n} + 1;
			}
		}

		task ("Assert the Title of collection items are shown in Numbered List at view mode") {
			PageEditor.clickPublish();

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}

		task ("Select the Unstyled List as List Style and Title as List Item Style") {
			ContentPages.gotoPageEditor();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Title",
				selectedName = "Dynamic Collection",
				styleDisplay = "Unstyled List");
		}

		task ("Assert the Title of collection items are shown in Unstyled List") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST");

				var n = ${n} + 1;
			}
		}

		task ("Assert the Title of collection items are shown in Unstyled List at view mode") {
			PageEditor.clickPublish();

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a use case for LPS-86141 and for LPS-107665. The title of asset entries in selected collection should be shown as a list in the Collection Display."
	@priority = "5"
	@uitest
	test ViewTitleOfCollectionItems {
		property portal.acceptance = "true";

		task ("Add three Web Content Articles based on Basic Web Content") {
			for (var entryTitle : list "First Web Content,Second Web Content,Third Web Content") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = "Test Site Name",
					title = "${entryTitle}");
			}
		}

		task ("Add three Blogs entries") {
			for (var entryTitle : list "First Blogs Entry,Second Blogs Entry,Third Blogs Entry") {
				HeadlessBlog.addBlogEntry(
					content = "Blogs Entry Content",
					groupName = "Test Site Name",
					title = "${entryTitle}");
			}
		}

		task ("Add a dynamic Collections and select Web Content Article as Asset Entry Type") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article",
				title = "Dynamic Collection");
		}

		task ("Add a manual Collections and select three Blogs entries") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "Blogs Entry",
				title = "Manual Collection");

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Collection",
				assetType = "Blogs Entry",
				entryList = "First Blogs Entry,Second Blogs Entry,Third Blogs Entry");
		}

		task ("Add a Collection Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Assert the title of three Web Content Articles are shown as a list in Collection Display") {
			var n = "1";

			for (var title : list "Third Web Content,Second Web Content,First Web Content") {
				PageEditor.viewCollectionItem(
					assetTitle = "${title}",
					row = "${n}");

				var n = ${n} + 1;
			}
		}

		task ("Select the manual collection") {
			PageEditor.editCollectionDisplay(
				assetListName = "Manual Collection",
				fragmentName = "Collection Display");
		}

		task ("Assert the title of three Blogs Entry are shown as a list in Collection Display") {
			var n = "1";

			for (var title : list "First Blogs Entry,Second Blogs Entry,Third Blogs Entry") {
				PageEditor.viewCollectionItem(
					assetTitle = "${title}",
					row = "${n}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-112093. The Web Content Articles of collection are displayed using Default Template when add a Content Display to Collection Display."
	@priority = "5"
	@uitest
	test ViewWebContentInContentDisplay {
		property portal.acceptance = "true";

		task ("Add three web contents") {
			for (var i : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "WC WebContent Content ${i}",
					groupName = "Test Site Name",
					title = "WC WebContent Title ${i}");
			}
		}

		task ("Add a dynamic collection for Web Content Article and Basic Web Content") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("View the collection items shown in Collection Display") {
			var n = "1";

			for (var i : list "3,2,1") {
				PageEditor.viewCollectionItem(
					assetTitle = "WC WebContent Title ${i}",
					row = "${n}");

				var n = ${n} + 1;
			}
		}

		task ("Add a Content Display into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "WC WebContent Title 3",
				fragmentName = "Content Display");
		}

		task ("View the contents shown in Content Display") {
			var n = "1";

			for (var i : list "3,2,1") {
				ContentPages.viewFragmentText(
					assetType = "journal",
					fragmentName = "Content Display",
					position = "${n}",
					text = "WC WebContent Content ${i}");

				var n = ${n} + 1;
			}
		}

		task ("View the Default Template applied to Content Display") {
			PageEditor.gotoConfiguration(fragmentName = "Content Display");

			AssertSelectedLabel(
				key_fieldLabel = "Template",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Default Template");
		}
	}

	@description = "This is a test for LPS-112093. Can display Web Content Articles of collection using custom template when add a Content Display to Collection Display."
	@priority = "5"
	@uitest
	test ViewWebContentWithCustomTemplateInContentDisplay {
		property portal.acceptance = "true";

		task ("Add a web content structure with a Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoTemplates();

			var templateScript = '''${Text.getData()}<hr>${Text.getName()}''';

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateName = "WC Template Name",
				templateScript = "${templateScript}");
		}

		task ("Add three web contents based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			for (var i : list "1,2,3") {
				WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

				WebContent.addWithStructureCP(
					structureName = "WC Structure Name",
					webContentText = "WC WebContent Text ${i}",
					webContentTitle = "WC WebContent Title ${i}");

				PortletEntry.publish();
			}
		}

		task ("Add a dynamic collection for Web Content Article and new structure") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "WC Structure Name",
				itemType = "Web Content Article",
				title = "Dynamic Collection");
		}

		task ("Add a Collection Display to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("View the collection items shown in Collection Display") {
			var n = "1";

			for (var i : list "3,2,1") {
				PageEditor.viewCollectionItem(
					assetTitle = "WC WebContent Title ${i}",
					row = "${n}");

				var n = ${n} + 1;
			}
		}

		task ("Add a Content Display into Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "WC WebContent Title 3",
				fragmentName = "Content Display");
		}

		task ("View the displayed content in Content Display") {
			var n = "1";

			for (var i : list "3,2,1") {
				ContentPages.viewFragmentText(
					assetType = "journal",
					fragmentName = "Content Display",
					position = "${n}",
					text = "WC WebContent Text ${i} Text");

				var n = ${n} + 1;
			}
		}

		task ("View the Default Template applied to Content Display") {
			PageEditor.gotoConfiguration(fragmentName = "Content Display");

			AssertSelectedLabel(
				key_fieldLabel = "Template",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Default Template");
		}

		task ("Select the Title as template") {
			Select(
				key_fieldLabel = "Template",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Title");

			PageEditor.waitForAutoSave();

			AssertSelectedLabel(
				key_fieldLabel = "Template",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Title");
		}

		task ("View the web content title shown in Content Display") {
			var n = "1";

			for (var i : list "3,2,1") {
				ContentPages.viewFragmentText(
					fragmentName = "Content Display",
					position = "${n}",
					text = "WC WebContent Title ${i}");

				var n = ${n} + 1;
			}
		}
	}

}