@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a Web Content Display to page and display the custom event") {
			ACCustomEvents.createWCWithCustomEventAndAddToPage();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: LRAC-7868 | Automation ID: LRAC-10264 | Test Summary: Event Analysis creation with Attribute ad Filter Attribute"
	@priority = "5"
	test AddAttributeAndAttributeFilterInEventsAnalysis {
		property test.name.skip.portal.instance = "CustomEventsFilterBreakdown#AddAttributeAndAttributeFilterInEventsAnalysis";

		var attributeName = "pageTitle";
		var filterName = "url";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("After adding an event, assert there is no '+' under Analyze") {
			AssertElementNotPresent(locator1 = "ACEventAnalysis#ADD_EVENT_BUTTON");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "site",
				optionValue = "contains");
		}

		task ("Check that the analysis dashboard contains the event,attribute and filter") {
			ACEventAnalysis.viewAnalysisDashboard(
				attributeNameList = "${attributeName}",
				eventName = "${customEventName}",
				filterNameList = "${filterName}");
		}
	}

	@description = "Feature ID: LRAC-7868 | Automation ID: LRAC-10265 | Test Summary: Max of 3 breakdowns options are allowed"
	@priority = "4"
	test AddMaxOf3AttributesToEvent {
		property test.name.skip.portal.instance = "CustomEventsFilterBreakdown#AddMaxOf3AttributesToEvent";

		var attributeNameList = "category,pageTitle,url";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the 3 breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeNameList}");
		}

		task ("Check that the analysis dashboard contains the 3 attributes") {
			ACEventAnalysis.viewAnalysisDashboard(attributeNameList = "${attributeNameList}");
		}

		task ("Assert there is no “+” after having 3 breakdown") {
			AssertElementNotPresent(
				key_sectionType = "breakdown",
				locator1 = "ACEventAnalysis#ADD_ATTRIBUTE_BUTTON");
		}
	}

	@description = "Feature ID: LRAC-7868 | Automation ID: LRAC-10269 | Test Summary: Attribute breakdowns are sorted by the highest event count"
	@priority = "4"
	test AssertAttributeBreakdownsSortedByHighestEventCount {
		property test.name.skip.portal.instance = "CustomEventsFilterBreakdown#AssertAttributeBreakdownsSortedByHighestEventCount";

		var attributeNameList = "pageTitle,url";
		var layoutNameList = "Custom 1,Custom 2";
		var dataSource = StringUtil.extractFirst("${assignedPropertyName}", " ");

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "3");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");
		}

		task ("Create new pages and place custom event fields") {
			for (var layoutName : list "${layoutNameList}") {
				ACUtils.addPage(layoutName = "${layoutName}");

				ACCustomEvents.addWCWithCustomEventToPage(layoutName = "${layoutName}");
			}
		}

		task ("Fill fields and make new interactions with custom event") {
			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "2");
		}

		task ("Fill fields and make new interactions with custom event") {
			ACUtils.navigateToSitePage(
				pageName = "Custom 1",
				siteName = "Site Name");

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeNameList}");
		}

		task ("Check that the analysis is being ordered by the number of interactions by default") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACEventAnalysis.viewAnalysisInformationInOrder(
				commonInformation = "site name",
				index = "1",
				informationValue = "ac page - site name - ${dataSource}");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				commonInformation = "site name",
				index = "2",
				informationValue = "custom 2 - site name - ${dataSource}");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				commonInformation = "site name",
				index = "3",
				informationValue = "custom 1 - site name - ${dataSource}");
		}
	}

	@description = "Feature ID: LRAC-7868 | Automation ID: LRAC-10267 | Test Summary: Rearrange breakdown and assert data change and after rearrange to return to original state"
	@priority = "4"
	test AssertDataChangeWhenRearrangeBreakdownAndReturnOriginalState {
		property test.name.skip.portal.instance = "CustomEventsFilterBreakdown#AssertDataChangeWhenRearrangeBreakdownAndReturnOriginalState";

		var attributeNameList = "category,pageTitle,url";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the 3 breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeNameList}");
		}

		task ("Change the time filter to 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Check the order of analysis columns") {
			ACEventAnalysis.viewAnalysisColumnInOrder(
				columnName = "category",
				index = "1");

			ACEventAnalysis.viewAnalysisColumnInOrder(
				columnName = "pageTitle",
				index = "2");

			ACEventAnalysis.viewAnalysisColumnInOrder(
				columnName = "url",
				index = "3");
		}

		task ("Change the breakdown position order") {
			ACEventAnalysis.changeBreakdownPosition(
				indexEnd = "1",
				indexStart = "2");
		}

		task ("Check the order of the columns of the analysis has changed") {
			ACEventAnalysis.viewAnalysisColumnInOrder(
				columnName = "pageTitle",
				index = "1");

			ACEventAnalysis.viewAnalysisColumnInOrder(
				columnName = "category",
				index = "2");

			ACEventAnalysis.viewAnalysisColumnInOrder(
				columnName = "url",
				index = "3");
		}

		task ("Change the breakdown position order") {
			ACEventAnalysis.changeBreakdownPosition(
				indexEnd = "1",
				indexStart = "3");
		}

		task ("Check the order of the columns of the analysis has changed") {
			ACEventAnalysis.viewAnalysisColumnInOrder(
				columnName = "url",
				index = "1");

			ACEventAnalysis.viewAnalysisColumnInOrder(
				columnName = "pageTitle",
				index = "2");

			ACEventAnalysis.viewAnalysisColumnInOrder(
				columnName = "category",
				index = "3");
		}

		task ("Change the breakdown position order to return to the original positions") {
			ACEventAnalysis.changeBreakdownPosition(
				indexEnd = "3",
				indexStart = "1");

			ACEventAnalysis.changeBreakdownPosition(
				indexEnd = "1",
				indexStart = "3");
		}

		task ("Check that the order of the analysis columns returned to the original order") {
			ACEventAnalysis.viewAnalysisColumnInOrder(
				columnName = "category",
				index = "1");

			ACEventAnalysis.viewAnalysisColumnInOrder(
				columnName = "pageTitle",
				index = "2");

			ACEventAnalysis.viewAnalysisColumnInOrder(
				columnName = "url",
				index = "3");
		}
	}

	@description = "Feature ID: LRAC-7868 | Automation ID: LRAC-10266 | Test Summary: Event Analysis is reset when removing the event"
	@priority = "4"
	test AssertRemovedEventIsNotPresent {
		property test.name.skip.portal.instance = "CustomEventsFilterBreakdown#AssertRemovedEventIsNotPresent";

		var attributeName = "pageTitle";
		var filterName = "url";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "site",
				optionValue = "contains");
		}

		task ("Check that the analysis dashboard contains the event,attribute and filter") {
			ACEventAnalysis.viewAnalysisDashboard(
				attributeNameList = "${attributeName}",
				eventName = "${customEventName}",
				filterNameList = "${filterName}");
		}

		task ("Remove the custom event from the analysis") {
			ACEventAnalysis.removeFromAnalysis(removeValue = "${customEventName}");
		}

		task ("Check that the analysis dashboard does not contain the event, attribute and filter") {
			AssertNotVisible(
				key_buttonName = "${customEventName}",
				locator1 = "ACUtils#GENERIC_BUTTON");

			for (var attributeName : list "${attributeName},${filterName}") {
				AssertElementNotPresent(
					key_attributeName = "${attributeName}",
					locator1 = "ACEventAnalysis#VIEW_DASHBOARD_INFORMATION");
			}
		}
	}

	@description = "Feature ID: LRAC-7868 | Automation ID: LRAC-10270 | Test Summary: Sorting the analysis result ascending and descending"
	@priority = "4"
	test AssertTheAnalysisResultIsSorted {
		property test.name.skip.portal.instance = "CustomEventsFilterBreakdown#AssertTheAnalysisResultIsSorted";

		var attributeNameList = "pageTitle,url";
		var layoutNameList = "Custom 1,Custom 2";
		var dataSource = StringUtil.extractFirst("${assignedPropertyName}", " ");

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "3");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");
		}

		task ("Create new pages and place custom event fields") {
			for (var layoutName : list "${layoutNameList}") {
				ACUtils.addPage(layoutName = "${layoutName}");

				ACCustomEvents.addWCWithCustomEventToPage(layoutName = "${layoutName}");
			}
		}

		task ("Fill fields and make new interactions with custom event") {
			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "2");
		}

		task ("Fill fields and make new interactions with custom event") {
			ACUtils.navigateToSitePage(
				pageName = "Custom 1",
				siteName = "Site Name");

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeNameList}");
		}

		task ("Change the time filter to 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Sort the analysis list and check the positions") {
			ACEventAnalysis.sortAnalysis(attributeName = "pageTitle");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				commonInformation = "site name",
				index = "1",
				informationValue = "custom 1 - site name - ${dataSource}");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				commonInformation = "site name",
				index = "2",
				informationValue = "custom 2 - site name - ${dataSource}");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				commonInformation = "site name",
				index = "3",
				informationValue = "ac page - site name - ${dataSource}");
		}

		task ("Sort the analysis list and check the positions") {
			ACEventAnalysis.sortAnalysis(attributeName = "pageTitle");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				commonInformation = "site name",
				index = "1",
				informationValue = "ac page - site name - ${dataSource}");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				commonInformation = "site name",
				index = "2",
				informationValue = "custom 2 - site name - ${dataSource}");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				commonInformation = "site name",
				index = "3",
				informationValue = "custom 1 - site name - ${dataSource}");
		}
	}

	@description = "Feature ID: LRAC-8171 | Automation ID: LRAC-10316 | Test Summary: Add a duplicate filter in Event Analysis"
	@priority = "4"
	test CanAddDuplicateFilterInEventAnalysis {
		property test.name.skip.portal.instance = "CustomEventsFilterBreakdown#CanAddDuplicateFilterInEventAnalysis";

		var attributeName = "pageTitle";
		var filterName = "category";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "wetsuit",
				optionValue = "is");
		}

		task ("Add the same filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "wetsuit",
				optionValue = "is");
		}

		task ("Check that the two equal filters are present in the dashboard") {
			for (var index : list "1,2") {
				AssertElementPresent(
					index = "${index}",
					key_attributeName = "${filterName}",
					locator1 = "ACEventAnalysis#VIEW_REPEATED_FILTER_DASHBOARD");
			}
		}

		task ("Check that the analysis result appears") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACEventAnalysis.viewAnalysisInformation(informationValueList = "ac page - site name - liferay dxp");
		}
	}

	@description = "Feature ID: LRAC-9481 | Automation ID: LRAC-10696 | Test Summary: Event Analysis breakdown filter provide auto complete suggestions for all conditions"
	@priority = "5"
	test CheckAutocompleteSuggestionsForAllConditions {
		property test.name.skip.portal.instance = "CustomEventsFilterBreakdown#CheckAutocompleteSuggestionsForAllConditions";

		var attributeName = "city";
		var inputValue = "recife";
		var attributeValueList = "${inputValue},los angeles,madrid";
		var optionValueList = "contains,not contains,is,is not";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			for (var attributesValue : list "${attributeValueList}") {
				ACCustomEvents.createCustomEvent(
					attributesName = "${attributeName}",
					attributesValue = "${attributesValue}",
					customEventName = "${customEventName}",
					timeToSendCustomEvent = "1");
			}
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Change the time filter to 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		for (var optionValue : list "${optionValueList}") {
			task ("Add the filter to analysis and check if the filter provides autocomplete suggestions") {
				ACEventAnalysis.clickToAddFilterButton();

				ACEventAnalysis.searchEventAnalysis(searchItem = "${attributeName}");

				Click(
					key_filterName = "${attributeName}",
					locator1 = "ACEventAnalysis#CHOOSE_FILTER");

				Select(
					locator1 = "Select#SELECT",
					value1 = "${optionValue}");

				Click(locator1 = "ACEventAnalysis#INPUT_CONDITION");

				for (var attributeValue : list "${attributeValueList}") {
					AssertElementPresent(
						key_buttonName = "${attributeValue}",
						locator1 = "ACUtils#GENERIC_BUTTON");
				}

				Click(
					key_buttonName = "${inputValue}",
					locator1 = "ACUtils#GENERIC_BUTTON");

				Click(locator1 = "ACEventAnalysis#FILTER_DONE_BUTTON");
			}

			task ("Check that the analysis result appears") {
				ACEventAnalysis.viewAnalysisInformation(informationValueList = "${customEventName}");
			}

			task ("Remove the filter from the analysis") {
				ACEventAnalysis.removeFromAnalysis(removeValue = "${attributeName}");
			}
		}
	}

	@description = "Feature ID: LRAC-7868 | Automation ID: LRAC-10286 | Test Summary: Event Analysis creation with Filtered Attribute (Boolean) and (True/False) condition"
	@priority = "3"
	test CreateEventAnalysisWithBooleanAttributeFilterTrueAndFalseCondition {
		property test.name.skip.portal.instance = "CustomEventsFilterBreakdown#CreateEventAnalysisWithBooleanAttributeFilterTrueAndFalseCondition";

		var attributeName = "pageTitle";
		var filterName1 = "like";
		var filterName2 = "dislike";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				attributesName = "${filterName1},${filterName2}",
				attributesValue = "true,false",
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName1}",
				optionValue = "True");
		}

		task ("Change the time filter to 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Check that the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "ac page - site name - liferay dxp");
		}

		task ("Remove the filter from the analysis") {
			ACEventAnalysis.removeFromAnalysis(removeValue = "${filterName1}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName1}",
				optionValue = "False");
		}

		task ("Check that the analysis result does not appear") {
			ACEventAnalysis.viewAnalysisInformationNotPresent(informationValueList = "ac page - site name - liferay dxp");
		}

		task ("Remove the filter from the analysis") {
			ACEventAnalysis.removeFromAnalysis(removeValue = "${filterName1}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName2}",
				optionValue = "False");
		}

		task ("Check that the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "ac page - site name - liferay dxp");
		}

		task ("Remove the filter from the analysis") {
			ACEventAnalysis.removeFromAnalysis(removeValue = "${filterName2}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName2}",
				optionValue = "True");
		}

		task ("Check that the analysis result does not appear") {
			ACEventAnalysis.viewAnalysisInformationNotPresent(informationValueList = "ac page - site name - liferay dxp");
		}
	}

	@description = "Feature ID: LRAC-7868 | Automation ID: LRAC-10280 | Test Summary: Event Analysis creation with Filtered Attribute (Date) and (Is/Is before/Is after/Is between) condition"
	@priority = "3"
	test CreateEventAnalysisWithDateAttributeFilterAllCondition {
		property test.name.skip.portal.instance = "CustomEventsFilterBreakdown#CreateEventAnalysisWithDateAttributeFilterAllCondition";

		var attributeName = "pageTitle";
		var filterName = "birthdate";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "25",
				month = "November",
				optionValue = "is",
				year = "2021");
		}

		task ("Change the time filter to 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Check that the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "ac page - site name - liferay dxp");
		}

		task ("Remove the filter from the analysis") {
			ACEventAnalysis.removeFromAnalysis(removeValue = "${filterName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "24",
				month = "November",
				optionValue = "before",
				year = "2021");
		}

		task ("Check that the analysis result does not appear") {
			ACEventAnalysis.viewAnalysisInformationNotPresent(informationValueList = "ac page - site name - liferay dxp");
		}

		task ("Remove the filter from the analysis") {
			ACEventAnalysis.removeFromAnalysis(removeValue = "${filterName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "24",
				month = "November",
				optionValue = "after",
				year = "2021");
		}

		task ("Check that the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "ac page - site name - liferay dxp");
		}

		task ("Remove the filter from the analysis") {
			ACEventAnalysis.removeFromAnalysis(removeValue = "${filterName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputEndValue = "26",
				inputValue = "23",
				month = "November",
				optionValue = "is between",
				year = "2021");
		}

		task ("Check that the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "ac page - site name - liferay dxp");
		}
	}

	@description = "Feature ID: LRAC-7868 | Automation ID: LRAC-10277 | Test Summary: Event Analysis creation with Filtered Attribute (Number) and (Is greater than/Is less than/Is between) condition"
	@priority = "3"
	test CreateEventAnalysisWithNumberAttributeFilterAllCondition {
		property test.name.skip.portal.instance = "CustomEventsFilterBreakdown#CreateEventAnalysisWithNumberAttributeFilterAllCondition";

		var attributeName = "pageTitle";
		var filterName = "price";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "250",
				optionValue = "is greater than");
		}

		task ("Change the time filter to 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Check that the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "ac page - site name - liferay dxp");
		}

		task ("Remove the filter from the analysis") {
			ACEventAnalysis.removeFromAnalysis(removeValue = "${filterName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "250",
				optionValue = "is less than");
		}

		task ("Check that the analysis result does not appear") {
			ACEventAnalysis.viewAnalysisInformationNotPresent(informationValueList = "ac page - site name - liferay dxp");
		}

		task ("Remove the filter from the analysis") {
			ACEventAnalysis.removeFromAnalysis(removeValue = "${filterName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputEndValue = "260",
				inputValue = "259.95",
				optionValue = "between");
		}

		task ("Check that the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "ac page - site name - liferay dxp");
		}
	}

	@description = "Feature ID: LRAC-7868 | Automation ID: LRAC-10273 | Test Summary: Event Analysis creation with Filtered Attribute (String) and (Contains/Does not Contains) condition"
	@priority = "5"
	test CreateEventAnalysisWithStringAttributeFilterContainsAndNotContains {
		var attributeName = "pageTitle";
		var filterName = "category";
		var dataSource = StringUtil.extractFirst("${assignedPropertyName}", " ");

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "w",
				optionValue = "contains");
		}

		task ("Change the time filter to 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Check that the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "ac page - site name - ${dataSource}");
		}

		task ("Remove the filter from the analysis") {
			ACEventAnalysis.removeFromAnalysis(removeValue = "${filterName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "w",
				optionValue = "not contains");
		}

		task ("Check that the analysis result does not appear") {
			ACEventAnalysis.viewAnalysisInformationNotPresent(informationValueList = "ac page - site name - ${dataSource}");
		}
	}

	@description = "Feature ID: LRAC-7868 | Automation ID: LRAC-10275 | Test Summary: Event Analysis creation with Filtered Attribute (String) and (Is/Is Not) condition"
	@priority = "3"
	test CreateEventAnalysisWithStringAttributeFilterIsAndIsNotCondition {
		var attributeName = "pageTitle";
		var filterName = "category";
		var dataSource = StringUtil.extractFirst("${assignedPropertyName}", " ");

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "wetsuit",
				optionValue = "is");
		}

		task ("Change the time filter to 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Check that the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "ac page - site name - ${dataSource}");
		}

		task ("Remove the filter from the analysis") {
			ACEventAnalysis.removeFromAnalysis(removeValue = "${filterName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "wetsuit",
				optionValue = "is not");
		}

		task ("Check that the analysis result does not appear") {
			ACEventAnalysis.viewAnalysisInformationNotPresent(informationValueList = "ac page - site name - ${dataSource}");
		}
	}

	@description = "Feature ID: LRAC-7868 | Automation ID: LRAC-10272 | Test Summary: Sorting the analysis result after rearranging the breakdowns"
	@priority = "3"
	test SortTheResultsAnalysisAfterRearrangingBreakdowns {
		var attributeNameList = "pageTitle,category";
		var layoutNameList = "Custom 1,Custom 2";
		var dataSource = StringUtil.extractFirst("${assignedPropertyName}", " ");

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "3");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");
		}

		task ("Create new pages and place custom event fields") {
			for (var layoutName : list "${layoutNameList}") {
				ACUtils.addPage(layoutName = "${layoutName}");

				ACCustomEvents.addWCWithCustomEventToPage(layoutName = "${layoutName}");
			}
		}

		task ("Fill fields and make new interactions with custom event") {
			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "2");
		}

		task ("Fill fields and make new interactions with custom event") {
			ACUtils.navigateToSitePage(
				pageName = "Custom 1",
				siteName = "Site Name");

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeNameList}");
		}

		task ("Change the time filter to 24 hours") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Change the breakdown position order") {
			ACEventAnalysis.changeBreakdownPosition(
				indexEnd = "1",
				indexStart = "2");
		}

		task ("Sort the analysis list and check the positions") {
			ACEventAnalysis.sortAnalysis(attributeName = "pageTitle");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				commonInformation = "site name",
				index = "1",
				informationValue = "custom 1 - site name - ${dataSource}");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				commonInformation = "site name",
				index = "2",
				informationValue = "custom 2 - site name - ${dataSource}");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				commonInformation = "site name",
				index = "3",
				informationValue = "ac page - site name - ${dataSource}");
		}

		task ("Change the breakdown position order") {
			ACEventAnalysis.changeBreakdownPosition(
				indexEnd = "1",
				indexStart = "2");
		}

		task ("Sort the analysis list and check the positions") {
			ACEventAnalysis.sortAnalysis(attributeName = "pageTitle");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				commonInformation = "site name",
				index = "1",
				informationValue = "ac page - site name - ${dataSource}");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				commonInformation = "site name",
				index = "2",
				informationValue = "custom 2 - site name - ${dataSource}");

			ACEventAnalysis.viewAnalysisInformationInOrder(
				commonInformation = "site name",
				index = "3",
				informationValue = "custom 1 - site name - ${dataSource}");
		}
	}

}