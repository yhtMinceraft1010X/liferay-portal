@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Recycle Bin";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "This is a use case for LPS-109555. Can bulk restore multiple items from recycle bin."
	@priority = "5"
	test BulkRestoreMultipleAssetsFromRecycleBin {
		property portal.acceptance = "true";

		task ("Add a Web Content Article, Blogs Entry and Document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Site Name",
				title = "Web Content Title");

			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Site Name",
				title = "Blogs Entry Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document_1.png",
				groupName = "Site Name",
				mimeType = "image/png",
				sourceFileName = "Document_1.png");
		}

		task ("Move them to recycle bin") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

			DMDocument.moveToRecycleBinCP(dmDocumentTitle = "Document_1.png");

			BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

			BlogsEntry.moveToRecycleBinCP(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContent.moveToRecycleBinCP(webContentTitle = "Web Content Title");
		}

		task ("Bulk restore them from recycle bin") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name");

			RecycleBin.viewCP(
				assetName = "Document_1.png",
				assetType = "Document",
				deleteUser = "Test Test");

			RecycleBin.viewCP(
				assetName = "Blogs Entry Title",
				assetType = "Blogs Entry",
				deleteUser = "Test Test");

			RecycleBin.viewCP(
				assetName = "Web Content Title",
				assetType = "Web Content Article",
				deleteUser = "Test Test");

			RecycleBin.bulkRestoreCP(assetList = "Document_1.png,Blogs Entry Title,Web Content Title");
		}

		task ("Assert they are restored") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

			DMDocument.viewCardTitle(dmDocumentTitle = "Document_1.png");

			BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

			Blogs.viewEntryPresent(entryTitle = "Blogs Entry Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContentAdmin.viewEntryTitle(entry = "Web Content Title");
		}
	}

	@description = "Restore blog entry from recycle bin."
	@priority = "3"
	test RecycleBinBlogs {
		task ("Add a blogs widget to page and an entry to blogs") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Site Name",
				layoutName = "Test Page",
				widgetName = "Blogs");

			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Site Name",
				title = "Blogs Entry Title");
		}

		task ("Move blog entry to recycle bin") {
			Navigator.gotoSitePage(
				pageName = "Test Page",
				siteName = "Site Name");

			BlogsEntry.moveToRecycleBinPG(
				assetType = "Blogs Entry",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");
		}

		task ("Go to recycle bin to view entry and restore") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name");

			RecycleBin.viewCP(
				assetName = "Blogs Entry Title",
				assetType = "Blogs Entry",
				deleteUser = "Test Test");

			RecycleBin.restoreCP(
				assetName = "Blogs Entry Title",
				assetRestoreLocation = "Blogs",
				assetType = "Blogs Entry");
		}

		task ("Go to page and view the blog entry is restored") {
			Navigator.gotoSitePage(
				pageName = "Test Page",
				siteName = "Site Name");

			BlogsNavigator.gotoPG(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");

			BlogsEntry.viewEntryPG(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");
		}
	}

	@description = "Restore bookmark subfolder and bookmark from recycle bin."
	@priority = "3"
	test RecycleBinBookmarks {
		property portal.release = "false";

		task ("Add bookmarks widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Site Name",
				layoutName = "Test Page",
				widgetName = "Bookmarks");
		}

		task ("Add a folder and a subfolder to the folder") {
			JSONBookmarks.addFolder(
				folderDescription = "Folder Description",
				folderName = "Folder Name",
				groupName = "Site Name");

			JSONBookmarks.addFolder(
				folderDescription = "Subfolder Description",
				folderName = "Subfolder Name",
				groupName = "Site Name",
				parentFolderName = "Folder Name");
		}

		task ("Add a bookmark to subfolder") {
			JSONBookmarks.addBookmarks(
				description = "Bookmark Description",
				folderName = "Subfolder Name",
				groupName = "Site Name",
				name = "Bookmark Name",
				url = "https://www.liferay.com");
		}

		task ("Go to page and move subfolder to recycle bin") {
			Navigator.gotoSitePage(
				pageName = "Test Page",
				siteName = "Site Name");

			BookmarksFolder.gotoPG(folderName = "Folder Name");

			BookmarksFolder.moveSubfolderToRecycleBinPG(subfolderName = "Subfolder Name");
		}

		task ("View and restore subfolder") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name");

			RecycleBin.viewCP(
				assetName = "Subfolder Name",
				assetType = "Bookmarks Folder",
				deleteUser = "Test Test");

			RecycleBin.restoreCP(
				assetName = "Subfolder Name",
				assetRestoreLocation = "Folder Name",
				assetType = "Bookmarks Folder");
		}

		task ("Go to view the bookmark in subfolder") {
			BookmarksFolder.gotoSubfolderPG(
				folderName = "Folder Name",
				pageName = "Test Page",
				siteName = "Site Name",
				subfolderName = "Subfolder Name");

			Bookmark.viewBookmark(
				bookmarkName = "Bookmark Name",
				bookmarkURL = "https://www.liferay.com");
		}

		task ("Move the bookmark in subfolder to recycle bin") {
			BookmarksFolder.gotoSubfolderPG(
				folderName = "Folder Name",
				pageName = "Test Page",
				siteName = "Site Name",
				subfolderName = "Subfolder Name");

			Bookmark.moveToRecycleBinPG(bookmarkName = "Bookmark Name");
		}

		task ("Restore the bookmark in recycle bin") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name");

			RecycleBin.viewCP(
				assetName = "Bookmark Name",
				assetType = "Bookmarks Entry",
				deleteUser = "Test Test");

			RecycleBin.restoreCP(
				assetName = "Bookmark Name",
				assetRestoreLocation = "Subfolder Name",
				assetType = "Bookmarks Entry");
		}

		task ("Go to subfolder and view the bookmark is restored") {
			BookmarksFolder.gotoSubfolderPG(
				folderName = "Folder Name",
				pageName = "Test Page",
				siteName = "Site Name",
				subfolderName = "Subfolder Name");

			Bookmark.viewBookmark(
				bookmarkName = "Bookmark Name",
				bookmarkURL = "https://www.liferay.com");
		}
	}

	@description = "Restore MB attachment from recycle bin."
	@priority = "3"
	test RecycleBinMBAttachment {
		task ("Add a message and attachement to mb") {
			JSONMBMessage.addMessage(
				groupName = "Site Name",
				threadBody = "MB Body",
				threadSubject = "MB Subject");

			JSONMBMessage.addAttachmentToMessage(
				fileName = "Document_1.doc",
				groupName = "Site Name",
				mimeType = "application/msword",
				threadSubject = "MB Subject");
		}

		task ("Remove the attachement in mb") {
			MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "site-name");

			MessageboardsThread.editCP(
				mbAttachmentFile = "Document_1.doc",
				threadAttachmentRemove = "true",
				threadBodyEdit = "MB Body Edit");

			PortletEntry.publish();
		}

		task ("View attachement is removed") {
			MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "site-name");

			MessageboardsThread.viewCP(
				replyCount = "0",
				threadBody = "MB Body Edit",
				threadSubject = "MB Subject",
				userName = "Test Test");

			AssertElementNotPresent(locator1 = "MessageBoardsThread#MESSAGE_BODY_ATTACHMENT_1");
		}

		task ("Restore the attachement and view attachement is restored") {
			PortletEntry.clickEditFromEllipsis();

			MessageboardsThread.restoreMBAttachmentCP(mbAttachmentFile = "Document_1.doc");

			MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "site-name");

			MessageboardsThread.viewCP(
				mbAttachmentFile = "Document_1.doc",
				replyCount = "0",
				threadBody = "MB Body Edit",
				threadSubject = "MB Subject",
				userName = "Test Test");
		}
	}

	@description = "Assert scheduled clean up in recycle bin works."
	@priority = "3"
	test RecycleBinScheduledCleanup {
		property custom.properties = "trash.entry.check.interval=1${line.separator}trash.entries.max.age=1";

		task ("Add a blogs widget to page and a blog entry") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Site Name",
				layoutName = "Test Page",
				widgetName = "Blogs");

			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Site Name",
				title = "Blogs Entry Title");
		}

		task ("Move blog entry to recycle bin") {
			Navigator.gotoSitePage(
				pageName = "Test Page",
				siteName = "Site Name");

			BlogsEntry.moveToRecycleBinPG(
				assetType = "Blogs Entry",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");
		}

		task ("Go to recycle bin and wait 2 minutes") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name");

			RecycleBin.viewCP(
				assetName = "Blogs Entry Title",
				assetType = "Blogs Entry",
				customMaxAge = "1 minute",
				deleteUser = "Test Test");

			Pause(locator1 = "120000");
		}

		task ("Refresh and assert no blog entry") {
			Refresh();

			RecycleBin.viewDefaultCP(assetName = "Blogs Entry Title");
		}
	}

	@description = "Assert 3 blog entries moved to recycle bin are searchable."
	@priority = "3"
	test RecycleBinSearchBlogsEntries {
		task ("Add blogs to page and 3 blog entries") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Site Name",
				layoutName = "Test Page",
				widgetName = "Blogs");

			for (var n : list "1,2,3") {
				HeadlessBlog.addBlogEntry(
					content = "Blogs Entry Content ${n}",
					groupName = "Site Name",
					title = "Blogs Entry Title ${n}");
			}
		}

		task ("Go to page and remove 3 blog entries") {
			Navigator.gotoSitePage(
				pageName = "Test Page",
				siteName = "Site Name");

			for (var n : list "1,2,3") {
				BlogsEntry.moveToRecycleBinPG(
					assetType = "Blogs Entry",
					entryContent = "Blogs Entry Content ${n}",
					entryTitle = "Blogs Entry Title ${n}");
			}
		}

		task ("View 3 blog entries in recycle bin") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name");

			for (var n : list "1,2,3") {
				Search.searchCP(searchTerm = "${n}");

				RecycleBin.viewCP(
					assetName = "Blogs Entry Title ${n}",
					assetType = "Blogs Entry",
					deleteUser = "Test Test");
			}
		}
	}

	@description = "Assert 2 documents moved to recycle bin are searchable."
	@priority = "3"
	test RecycleBinSearchDMEntriesInFolder {
		property custom.properties = "default.layout.template.id=1_column";

		task ("Add DM widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Site Name",
				layoutName = "Test Page",
				widgetName = "Documents and Media");
		}

		task ("Go to page and enable action in DM") {
			Navigator.gotoSitePage(
				pageName = "Test Page",
				siteName = "Site Name");

			DMDocument.enableActionsMenuOnPortlet();
		}

		task ("Add a folder from DM in page") {
			Navigator.gotoSitePage(
				pageName = "Test Page",
				siteName = "Site Name");

			LexiconEntry.changeDisplayStyle(displayStyle = "list");

			DMFolder.addPG(
				dmFolderDescription = "DM Folder Description",
				dmFolderName = "DM Folder Name");
		}

		task ("Add 2 documents to DM folder") {
			Navigator.gotoSitePage(
				pageName = "Test Page",
				siteName = "Site Name");

			DMNavigator.gotoFolder(dmFolderName = "DM Folder Name");

			DMDocument.addPG(
				dmDocumentDescription = "DM Document Description 1",
				dmDocumentFile = "Document_1.doc",
				dmDocumentTitle = "DM Document Title 1");

			Navigator.gotoSitePage(
				pageName = "Test Page",
				siteName = "Site Name");

			DMNavigator.gotoFolder(dmFolderName = "DM Folder Name");

			DMDocument.addPG(
				dmDocumentDescription = "DM Document Description 2",
				dmDocumentFile = "Document_2.doc",
				dmDocumentTitle = "DM Document Title 2");
		}

		task ("Go to page and delete the DM folder") {
			Navigator.gotoSitePage(
				pageName = "Test Page",
				siteName = "Site Name");

			DMFolder.deletePG(dmFolderName = "DM Folder Name");
		}

		task ("Assert 2 documents are moved to recycle bin") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name");

			Search.searchCP(searchTerm = "1");

			RecycleBin.viewCP(
				assetName = "DM Document Title 1",
				assetType = "Document",
				deleteUser = "test test");

			RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name");

			Search.searchCP(searchTerm = "2");

			RecycleBin.viewCP(
				assetName = "DM Document Title 2",
				assetType = "Document",
				deleteUser = "test test");
		}
	}

	@description = "Restore Wiki node and Wiki page in recycle bin."
	@priority = "3"
	test RecycleBinWiki {
		task ("Add 2 wiki node and a wiki page") {
			JSONWiki.addWikiNode(
				groupName = "Site Name",
				wikiNodeName = "Wiki Node Name");

			JSONWiki.addWikiNode(
				groupName = "Site Name",
				wikiNodeName = "Wiki2 Node2 Name2");

			JSONWiki.addWikiPage(
				groupName = "Site Name",
				wikiNodeName = "Wiki Node Name",
				wikiPageContent = "Wiki Page Content",
				wikiPageName = "Wiki Page Title");
		}

		task ("Delete wiki page and a wiki node") {
			WikiNavigator.openWikiAdmin(siteURLKey = "site-name");

			WikiNavigator.gotoNode(wikiNodeName = "Wiki Node Name");

			LexiconEntry.changeDisplayStyle(displayStyle = "table");

			WikiPage.deleteCP(
				assetType = "Wiki Page",
				wikiNodeName = "Wiki Node Name",
				wikiPageTitle = "Wiki Page Title");

			WikiNavigator.openWikiAdmin(siteURLKey = "site-name");

			WikiNode.deleteCP(
				assetType = "Wiki Node",
				wikiNodeName = "Wiki Node Name");
		}

		task ("View wiki page and wiki node and restore them") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name");

			RecycleBin.viewCP(
				assetName = "Wiki Page Title",
				assetType = "Wiki Page",
				deleteUser = "Test Test");

			RecycleBin.viewCP(
				assetName = "Wiki Node Name",
				assetType = "Wiki Node",
				deleteUser = "Test Test");

			RecycleBin.restoreCP(
				assetName = "Wiki Node Name",
				assetRestoreLocation = "Wiki",
				assetType = "Wiki Node",
				multipleAssets = "true");

			Refresh();

			RecycleBin.restoreCP(
				assetName = "Wiki Page Title",
				assetRestoreLocation = "Wiki Node",
				assetType = "Wiki Page");

			Refresh();
		}

		task ("Assert wiki page and wiki node are restored") {
			WikiNavigator.openWikiAdmin(siteURLKey = "site-name");

			WikiNode.viewCP(
				numberOfWikiPages = "2",
				wikiNodeName = "Wiki Node Name");

			LexiconEntry.changeDisplayStyle(displayStyle = "list");

			WikiNavigator.gotoCP(wikiPageTitle = "Wiki Page Title");

			WikiPage.viewCP(
				wikiPageContent = "Wiki Page Content",
				wikiPageTitle = "Wiki Page Title");
		}
	}

	@description = "This is a use case for LPS-109555. Automatically rename documents when bulk restore them from recycle bin if document names already exist in the destination."
	@priority = "5"
	test RenameBulkRestoreDocumentsAutomaticallyWhenDocumentNamesAlreadyExistInTheDestination {
		property portal.acceptance = "true";
		property portal.upstream = "true";

		task ("Add multiple document entries") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document_1.png",
				groupName = "Site Name",
				mimeType = "image/png",
				sourceFileName = "Document_1.png");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document_1.txt",
				groupName = "Site Name",
				mimeType = "text/plain",
				sourceFileName = "Document_1.txt");
		}

		task ("Move all items to recycle bin") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

			DMDocument.moveAllToRecycleBinCP();
		}

		task ("Add multiple document entries with the same names as ones in recycle bin") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document_1.png",
				groupName = "Site Name",
				mimeType = "image/png",
				sourceFileName = "Document_1.png");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document_1.txt",
				groupName = "Site Name",
				mimeType = "text/plain",
				sourceFileName = "Document_1.txt");
		}

		task ("Bulk restore all documents in recycle bin") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name");

			for (var entryName : list "Document_1.png,Document_1.txt") {
				RecycleBin.viewCP(
					assetName = "${entryName}",
					assetType = "Document",
					deleteUser = "Test Test");
			}

			RecycleBin.bulkRestoreCP(assetList = "Document_1.png,Document_1.txt");
		}

		task ("Assert restored documents are renamed") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

			for (var assetName : list "Document_1.png,Document_1.txt,Document_1 (1).png,Document_1 (1).txt") {
				DMDocument.viewCardTitle(dmDocumentTitle = "${assetName}");
			}
		}
	}

	@description = "Restore DM document in DM folder in recycle bin."
	@priority = "5"
	test RestoreDMDocumentFromFolderCP {
		property portal.acceptance = "true";
		property portal.upstream = "true";

		task ("Add a DM folder and 3 documents to the folder") {
			JSONFolder.addFolder(
				dmFolderName = "DM Folder Name",
				groupName = "Site Name");

			for (var i : list "1,2,3") {
				JSONDocument.addFile(
					dmDocumentDescription = "DM Document Description ${i}",
					dmDocumentTitle = "DM Document Title ${i}",
					folderName = "DM Folder Name",
					groupName = "Site Name");
			}
		}

		task ("Move document to recycle bin and restore") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

			DMFolder.moveToRecycleBinCP(
				assetType = "Documents Folder",
				dmFolderName = "DM Folder Name");

			RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name");

			RecycleBin.restoreContentFromFolderCP(
				assetName = "DM Folder Name",
				assetRestoreLocation = "Home",
				assetType = "Documents Folder",
				assetType2 = "Document",
				documentName = "DM Document Title 2");
		}

		task ("View document is restored") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

			DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title 2");

			DMDocument.viewCP(dmDocumentTitle = "DM Document Title 2");
		}
	}

	@description = "This is a test for LPS-44099. The blogs entry moved to the recycle bin shouldn't be searchable by its comments."
	@priority = "4"
	test SearchBlogsEntryByComments {
		task ("Add a Blogs widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Site Name",
				layoutName = "Test Page",
				widgetName = "Blogs");
		}

		task ("Add two blogs entries") {
			for (var n : list "1,2") {
				HeadlessBlog.addBlogEntry(
					content = "Blogs Entry Content ${n}",
					groupName = "Site Name",
					title = "Blogs Entry Title ${n}");
			}
		}

		task ("Add comments for both blogs entries via Blogs widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page",
				siteName = "Site Name");

			BlogsNavigator.gotoEntryPG(
				entryContent = "Blogs Entry Content 1",
				entryTitle = "Blogs Entry Title 1");

			Pause(locator1 = "3000");

			Comments.addPG(entryComment = "Blogs Entry Comment");

			Navigator.gotoSitePage(
				pageName = "Test Page",
				siteName = "Site Name");

			BlogsNavigator.gotoEntryPG(
				entryContent = "Blogs Entry Content 2",
				entryTitle = "Blogs Entry Title 2");

			Pause(locator1 = "3000");

			Comments.addPG(entryComment = "Blogs Entry Comment");
		}

		task ("Search by comments in Blogs admin") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

			LexiconEntry.changeDisplayStyle(displayStyle = "list");

			Search.searchCP(searchTerm = "Comment");

			AssertTextEquals(
				locator1 = "Search#SEARCH_INFO",
				value1 = "2 Results for &quot;Comment&quot;");

			for (var title : list "Blogs Entry Title 1,Blogs Entry Title 2") {
				Blogs.viewEntryTitle(entryTitle = "${title}");
			}
		}

		task ("Move one of blogs entries to the recycle bin") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

			BlogsNavigator.moveToRecycleBinCP(entryTitle = "Blogs Entry Title 1");
		}

		task ("Search by comments in Blogs admin") {
			Search.searchCP(searchTerm = "Comment");

			AssertTextEquals(
				locator1 = "Search#SEARCH_INFO",
				value1 = "1 Result for &quot;Comment&quot;");

			Blogs.viewEntryTitle(entryTitle = "Blogs Entry Title 2");

			Blogs.viewEntryNotPresent(entryTitle = "Blogs Entry Title 1");
		}
	}

	@description = "This is a test for LPS-109555 and LPS-33785. The error message should be shown when restore a document from recycle bin when it has the same name as existing document. Keep both document entries and rename the document entry from the Recycle Bin."
	@priority = "4"
	test ViewErrorMessageWhenRestoreDocumentHasTheSameNameWithExistingOne {
		task ("Add a document entry named DM Document Title") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "DM Document Title",
				groupName = "Site Name",
				mimeType = "image/png",
				sourceFileName = "Document_1.png");
		}

		task ("Remove the document to the recycle bin") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

			DMDocument.moveToRecycleBinCP(dmDocumentTitle = "DM Document Title");
		}

		task ("Add another document entry with the same name") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "DM Document Title",
				groupName = "Site Name",
				mimeType = "text/plain",
				sourceFileName = "Document_1.txt");
		}

		task ("Keep both entries and rename the entry from the Recycle Bin") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name");

			RecycleBin.viewCP(
				assetName = "DM Document Title",
				assetType = "Document",
				deleteUser = "Test Test");

			RecycleBin.restoreRenameCP(
				assetName = "DM Document Title",
				newName = "Previous Document Title");
		}

		task ("View documents in Documents admin") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

			for (var assetName : list "DM Document Title,Previous Document Title") {
				DMDocument.viewCardTitle(dmDocumentTitle = "${assetName}");
			}
		}
	}

	@description = "This is a test for LPS-44554. View restored document in subfolder after restore parent folder from the recycle bin."
	@priority = "4"
	test ViewRestoredDocumentInSubFolderAfterRestoreParentFolder {
		task ("Add a dm folder") {
			JSONFolder.addFolder(
				dmFolderName = "DM Folder Name",
				groupName = "Site Name");
		}

		task ("Add a dm subfolder") {
			JSONFolder.addFolder(
				dmFolderName = "DM Subfolder Name",
				groupName = "Site Name",
				parentFolderName = "DM Folder Name");
		}

		task ("Add a basic document in subfolder") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "DM Document Title",
				folderName = "DM Subfolder Name",
				groupName = "Site Name",
				mimeType = "image/jpeg",
				parentFolderName = "DM Folder Name",
				sourceFileName = "Document_1.jpg");
		}

		task ("Move the dm folder to the Recycle Bin") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

			DMFolder.moveToRecycleBinCP(
				assetType = "Documents Folder",
				dmFolderName = "DM Folder Name");
		}

		task ("Restore the dm folder from the Recycle Bin") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name");

			RecycleBin.restoreCP(
				assetName = "DM Folder Name",
				assetType = "Documents Folder");
		}

		task ("View the restored document in subfolder") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

			for (var folderName : list "DM Folder Name,DM Subfolder Name") {
				DMFolder.gotoEntry(dmFolderName = "${folderName}");
			}

			DMDocument.viewCardTitle(dmDocumentTitle = "DM Document Title");
		}
	}

}