@component-name = "portal-lima"
definition {

	property custom.properties = "default.layout.template.id=1_column${line.separator}jsonws.web.service.paths.excludes=";
	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Notification";
	property testray.main.component.name = "Notifications";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Site Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Site Page",
			widgetName = "Blogs");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Site Page",
			widgetName = "Message Boards");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Blogs.tearDownCP();

			NotificationsPortlet.tearDownUserDeliveries();

			PagesAdmin.tearDownCP();

			JSONUser.tearDownNonAdminUsers();
		}
	}

	@priority = "4"
	@refactordone
	test CanDeleteNotifications {
		Navigator.gotoPage(pageName = "Site Page");

		Blogs.subscribePG();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		for (var entryCount : list "1,2") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry${entryCount} Content",
				entryTitle = "Blogs Entry${entryCount} Title",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");
		}

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Notifications.viewBadgeCount(
			activePanel = "Notifications",
			notificationCount = "2");

		Notifications.gotoNotifications();

		for (var entryCount : list "1,2") {
			Notifications.viewNewContent(
				assetType = "Blogs Entry",
				contentBody = "Blogs Entry${entryCount} Title",
				user = "userfn userln");
		}

		for (var entryCount : list "1,2") {
			Notifications.deleteNotification(contentBody = "Blogs Entry${entryCount} Title");
		}

		Notifications.viewDefaultContent();

		Notifications.viewNoNotifications(activePanel = "Notifications");
	}

	@priority = "5"
	@refactordone
	test CanFilterByReadAndUnread {
		Navigator.gotoPage(pageName = "Site Page");

		MessageboardsPortlet.subscribePG();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		for (var threadCount : list "1,2") {
			JSONMBMessage.addMessage(
				groupName = "Guest",
				threadBody = "MB Thread Message Body${threadCount}",
				threadSubject = "MB Thread Message Subject${threadCount}",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");
		}

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Notifications.viewBadgeCount(
			activePanel = "Notifications",
			notificationCount = "2");

		Notifications.gotoNotifications();

		Notifications.goToFilterValues(filterValues = "Read");

		Notifications.viewDefaultContent();

		Notifications.goToFilterValues(filterValues = "Unread");

		for (var threadCount : list "1,2") {
			Notifications.viewNewContent(
				assetType = "message boards message",
				contentBody = "MB Thread Message Subject${threadCount}",
				user = "userfn userln");
		}

		NotificationsPortlet.configureNotificationPG(menuItem = "Mark All Notifications as Read");

		Notifications.viewDefaultContent();

		Notifications.viewNoNotifications(activePanel = "Notifications");

		Navigator.gotoNotifications();

		PortletEntry.selectAll();

		Click(locator1 = "Icon#MARK_AS_UNREAD");

		Notifications.viewBadgeCount(notificationCount = "2");
	}

	@priority = "4"
	@refactordone
	test CanMarkAllNotificationsAsRead {
		Navigator.gotoPage(pageName = "Site Page");

		Blogs.subscribePG();

		Notifications.viewNoNotifications(activePanel = "Profile");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		for (var entryCount : list "1,2,3") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry${entryCount} Content",
				entryTitle = "Blogs Entry${entryCount} Title",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");
		}

		Notifications.viewNoNotifications(activePanel = "Profile");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Notifications.viewBadgeCount(
			activePanel = "Notifications",
			notificationCount = "3");

		Notifications.gotoNotifications();

		NotificationsPortlet.configureNotificationPG(menuItem = "Mark All Notifications as Read");

		Notifications.viewNoNotifications(activePanel = "Notifications");
	}

	@priority = "4"
	@refactordone
	test CanMarkNotificationAsReadAndAcceptRequest {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Invite Members Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "2",
			groupName = "Test Site Name",
			layoutName = "Invite Members Page",
			widgetName = "Invite Members");

		Navigator.gotoSitePage(
			pageName = "Invite Members Page",
			siteName = "Test Site Name");

		InviteMembers.inviteMembers(inviteUserFullName = "userfn userln");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "Site Page");

		Blogs.subscribePG();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		BlogsNavigator.openToAddEntry(
			layoutName = "Site Page",
			siteURLKey = "guest");

		BlogsEntry.addEntryContent(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		PortletEntry.publish();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Notifications.viewBadgeCount(notificationCount = "2");

		Notifications.gotoNotifications();

		Notifications.viewNewContent(
			assetType = "Blogs Entry",
			contentBody = "Blogs Entry Title",
			user = "Test Test");

		Notifications.viewRequest(requestsTitle = "Test Test invited you to join Test Site Name.");

		Notifications.acceptRequest(requestsTitle = "Test Test invited you to join Test Site Name.");

		Refresh();

		Notifications.viewNoRequest();

		Notifications.viewNoNotifications();
	}

	@description = "This ensures that a user can mark all selected notifications as read via the management bar no matter if they are all in the same state or not."
	@priority = "5"
	test CanMarkNotificationsWithDifferentStatesAsRead {
		Workflow.openWorkflowAdmin(siteURLKey = "guest");

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Blogs Entry");

		for (var num : list "1,2") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content${num}",
				entryTitle = "Blogs Entry Title${num}");
		}

		Navigator.gotoPage(pageName = "Site Page");

		Notifications.viewBadgeCount(notificationCount = "2");

		Notifications.gotoNotifications();

		Notifications.markAsReadViaManagementBar(notificationsTitle = "Test Test sent you a Blogs Entry for review in the workflow");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.markAsReadViaManagementBar(selectAll = "true");

		Notifications.viewNoNotifications(activePanel = "Notifications");
	}

	@description = "This ensures that a user can mark all selected notifications as unread via the management bar no matter if they are all in the same state or not."
	@priority = "5"
	test CanMarkNotificationsWithDifferentStatesAsUnread {
		Workflow.openWorkflowAdmin(siteURLKey = "guest");

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Blogs Entry");

		for (var num : list "1,2") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content${num}",
				entryTitle = "Blogs Entry Title${num}");
		}

		Navigator.gotoPage(pageName = "Site Page");

		Notifications.viewBadgeCount(notificationCount = "2");

		Notifications.gotoNotifications();

		Notifications.markAsReadViaManagementBar(notificationsTitle = "Test Test sent you a Blogs Entry for review in the workflow");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.markAsUnreadViaManagementBar(selectAll = "true");

		Notifications.viewBadgeCount(notificationCount = "2");
	}

	@description = "This ensures that an obsolete notification can not be selected."
	@priority = "5"
	test CannotSelectObsoleteNotification {
		Workflow.openWorkflowAdmin(siteURLKey = "guest");

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Blogs Entry");

		for (var num : list "1,2") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content${num}",
				entryTitle = "Blogs Entry Title${num}");
		}

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsEntry.moveToRecycleBinCP(
			entryContent = "Blogs Entry Content2",
			entryTitle = "Blogs Entry Title2");

		Notifications.gotoNotifications();

		AssertVisible(
			key_rowEntry = "Notification no longer applies",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_CHECKBOX_DISABLED");

		PortletEntry.selectAll();

		AssertNotChecked(
			key_rowEntry = "Notification no longer applies",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_CHECKBOX");
	}

	@description = "This test covers LPS-102749. It views a notification of the edited Web Content Article when staging is turned on."
	@priority = "4"
	@refactordone
	test CanViewEditedArticleNotificationInStagingEnvironment {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONGroup.addGroup(groupName = "Subscribe Site");

		JSONLayout.addPublicLayout(
			groupName = "Subscribe Site",
			layoutName = "Staging Test Page");

		JSONStaging.enableLocalStaging(groupName = "Subscribe Site");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "subscribe-site");

		WebContent.subscribeToCurrentFolderCP();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		WebContentNavigator.openToAddBasicArticle(
			groupName = "Subscribe Site (Staging)",
			site = "false",
			siteURLKey = "subscribe-site-staging");

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		Staging.publishToLiveNowViaPortletCP();

		WebContentNavigator.openToEditWCInSite(
			groupName = "Subscribe Site (Staging)",
			site = "false",
			siteURLKey = "subscribe-site-staging",
			webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		Staging.publishToLiveNowViaPortletCP();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Notifications.viewBadgeCount(notificationCount = "2");

		Notifications.gotoNotifications();

		Notifications.viewUpdatedContent(
			assetType = "web content article",
			contentBody = "WC WebContent Title Edit",
			user = "Test Test");

		Notifications.navigateToContent(contentBody = "WC WebContent Title Edit");

		WebContent.viewTitle(
			onLive = "true",
			webContentTitle = "WC WebContent Title Edit");

		AssertConsoleTextNotPresent(value1 = "java.lang.IllegalArgumentException");
	}

	@description = "This test covers LPS-104398. It views a notification of a web content article created in a folder."
	@priority = "4"
	@refactordone
	test CanViewFolderArticleNotification {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Site Page");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

		WebContent.subscribeToCurrentFolderCP();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		JSONWebcontent.addFolder(
			folderName = "WC Folder Name",
			groupName = "Test Site Name");

		WebContentNavigator.openToAddBasicArticle(
			folderName = "WC Folder Name",
			groupName = "Test Site Name",
			siteURLKey = "test-site-name");

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewNewContent(
			assetType = "web content article",
			contentBody = "WC WebContent Title",
			user = "Test Test");

		Notifications.navigateToContent(contentBody = "WC WebContent Title");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");
	}

	@priority = "4"
	@refactordone
	test CanViewMultipleNotifications {
		Navigator.gotoPage(pageName = "Site Page");

		Blogs.subscribePG();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		for (var entryCount : list "1,2,3") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry${entryCount} Content",
				entryTitle = "Blogs Entry${entryCount} Title",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");
		}

		Notifications.viewNoNotifications(activePanel = "Profile");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Notifications.viewBadgeCount(
			activePanel = "Notifications",
			notificationCount = "3");

		Notifications.gotoNotifications();

		Notifications.navigateToContent(contentBody = "Blogs Entry1 Title");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		Notifications.viewBadgeCount(
			activePanel = "Notifications",
			notificationCount = "2");

		Notifications.gotoNotifications();

		Notifications.navigateToContent(contentBody = "Blogs Entry2 Title");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry2 Title");

		Notifications.viewBadgeCount(
			activePanel = "Notifications",
			notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.navigateToContent(contentBody = "Blogs Entry3 Title");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry3 Content",
			entryTitle = "Blogs Entry3 Title");

		Notifications.viewBadgeCount(
			activePanel = "Notifications",
			notificationCount = "0");
	}

	@description = "This test covers LPS-126145. This ensures that the notification can be viewed after restoring the entry from recycle bin."
	@priority = "4"
	@refactordone
	test CanViewNotificationAfterRestoring {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Site Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Test Site Name",
			layoutName = "Test Site Page",
			widgetName = "Web Content Display");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		Navigator.gotoSitePage(
			pageName = "Test Site Page",
			siteName = "Test Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		WebContentDisplayPortlet.configureSetup(metadataNameList = "Comments");

		WebContentDisplayPortlet.saveConfiguration();

		Navigator.gotoSitePage(
			pageName = "Test Site Page",
			siteName = "Test Site Name");

		Comments.subscribePG();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoSitePage(
			pageName = "Test Site Page",
			siteName = "Test Site Name");

		Comments.addPG(entryComment = "WC WebContent Content Comment");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		var resourcePrimKey = JSONWebcontent.getResourcePrimKeyByURLTitle(
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		JSONWebcontent.moveWebContentToTrash(
			groupName = "Test Site Name",
			title = "WC WebContent Title");

		Notifications.gotoNotifications();

		Notifications.viewNewComment(
			assetType = "comment",
			content = "WC WebContent Title",
			contentBody = "WC WebContent Content Comment",
			user = "userfn userln",
			viewEllipsisIcon = "true");

		JSONWebcontent.restoreWebContentFromTrashViaResourcePrimKey(resourcePrimKey = "${resourcePrimKey}");

		Notifications.gotoNotifications();

		Notifications.viewNewComment(
			assetType = "comment",
			content = "WC WebContent Title",
			contentBody = "WC WebContent Content Comment",
			user = "userfn userln",
			viewEllipsisIcon = "true");
	}

	@priority = "5"
	@refactordone
	@uitest
	test CanViewNotificationDefault {
		Notifications.viewNoNotifications(activePanel = "Profile");

		Notifications.viewNoRequest();

		Notifications.viewNoNotificationEntry();
	}

	@description = "This ensures that the obsolete notification will be removed after refreshing the page."
	@priority = "5"
	test RefreshingPageRemovesObsoleteNotifications {
		Workflow.openWorkflowAdmin(siteURLKey = "guest");

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Blogs Entry");

		for (var num : list "1,2") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content${num}",
				entryTitle = "Blogs Entry Title${num}");
		}

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsEntry.moveToRecycleBinCP(
			entryContent = "Blogs Entry Content2",
			entryTitle = "Blogs Entry Title2");

		Notifications.gotoNotifications();

		Notifications.removeNotificationsViaManagementBar(selectAll = "true");

		Notifications.viewNoRequest();

		Notifications.viewNoNotificationEntry();
	}

}