@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Web Content Administration";
	property testray.main.component.name = "Web Content Administration";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "The user can add an embedded portlet in a freemarker template."
	@priority = "3"
	test AddEmbeddedPortletFreemarkerTemplate {
		task ("Add a Web Content Display widget to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");
		}

		task ("Add a web content structure with a text field") {
			WebContentNavigator.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("Add a web content template with an embedded script") {
			NavItem.gotoTemplates();

			LexiconEntry.gotoAdd();

			var templateScript = '''<@liferay_portlet["runtime"] portletName="com_liferay_blogs_web_portlet_BlogsPortlet" />''';

			WebContentTemplates.inputTemplateAddScreenFields(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateName = "WC Template Name",
				templateScript = "${templateScript}");

			PortletEntry.save();
		}

		task ("Add web content based on custom structure via WCD") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.add(
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				webContentTitle = "Web Content Title");
		}

		task ("View embeeded portlet is shown") {
			Portlet.viewBody(
				portletBody = "No entries were found.",
				portletName = "Blogs");
		}
	}

	@description = "This is a test for LPS-102795. Can add translations to removable fields sets contents to null."
	@priority = "4"
	test AddTranslationsToRemovableFields {
		task ("Add a Web Content Display widget to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");
		}

		task ("Add a web content strcuture with repeatable fields") {
			WebContentNavigator.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text",
				fieldType = "Multiple Lines");

			DataEngine.toggleFieldRepeatable(fieldFieldLabel = "Text");

			WebContentStructures.saveCP();
		}

		task ("Add a web conten template via manage templates") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			var templateScript = '''
<#if Text.getSiblings()?has_content>
	<#list Text.getSiblings() as cur_Text>
		<#if (cur_Text.getData())??>
			${cur_Text.getData()}
		</#if>
	</#list>
</#if>
''';

			WebContentTemplates.addCP(
				templateName = "WC Template Name",
				templateScript = "${templateScript}");
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				fieldName = "Text",
				fieldType = "Multiple Lines",
				structureName = "WC Structure Name",
				webContentText = "Web Content Content 1",
				webContentTitle = "Web Content Title");

			DataEngine.addRepeatableField(fieldLabel = "Text");

			Type(
				key_fieldFieldLabel = "Text",
				locator1 = "DDMField#MULTIPLE_LINES_2",
				value1 = "Web Content Content 2");

			PortletEntry.publish();
		}

		task ("View web content is shown after selected in the Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();

			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content 1 Web Content Content 2",
				webContentTitle = "Web Content Title");
		}

		task ("Add a Spanish translation in the first text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			PortletEntry.changeLocale(locale = "es-ES");

			Type(
				key_fieldFieldLabel = "Text",
				locator1 = "DDMField#MULTIPLE_LINES",
				value1 = "Contenido web Contenido");

			PortletEntry.publish();
		}

		task ("View web content is shown in English") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content 1 Web Content Content 2",
				webContentTitle = "Web Content Title");
		}

		task ("View web content is shown with Spanish translation") {
			Navigator.openWithAppendToBaseURL(urlAppend = "es/web/test-site-name");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "Contenido web Contenido Web Content Content 2",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "A child site can use structures and templates inherited from its parent."
	@priority = "4"
	test AddWebContentBasedOnStructureAndTemplateFromParentSite {
		property test.name.skip.portal.instance = "WebContentWithCustomStructures#AddWebContentBasedOnStructureAndTemplateFromParentSite";

		task ("Enable ancestor scopes by default in System Settings") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Web Content",
				configurationName = "Administration",
				configurationScope = "System Scope");

			FormFields.enableCheckbox(fieldName = "showAncestorScopesByDefault");

			SystemSettings.saveConfiguration();
		}

		task ("Add a child site") {
			JSONGroup.addChildGroup(
				groupName = "Child Site Name",
				parentGroupName = "Test Site Name");
		}

		task ("Add a web content structure with rich text field") {
			WebContentNavigator.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Rich Text",
				fieldName = "Rich Text");

			WebContentStructures.saveCP();
		}

		task ("Add a web content template associated with new structure") {
			WebContentNavigator.openWebContentTemplatesAdmin(siteURLKey = "test-site-name");

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Rich Text",
				templateName = "WC Template Name");
		}

		task ("View parent structure is shown in child site") {
			WebContentNavigator.openWebContentStructuresAdmin(siteURLKey = "child-site-name");

			WebContentStructures.viewCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");
		}

		task ("View parent tempalte is shown in child site") {
			WebContentNavigator.openWebContentTemplatesAdmin(siteURLKey = "child-site-name");

			LexiconEntry.changeDisplayStyle(displayStyle = "table");

			WebContentTemplates.viewTableEntryCP(
				templateDescription = "WC Template Description",
				templateName = "WC Template Name");
		}

		task ("Add a web content with new structure in parent site") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			PortletEntry.inputTitle(title = "Web Content Title");

			CKEditor.addContentInWebContent(
				content = "Web Content Content",
				fieldLabel = "Rich Text");

			PortletEntry.publish();
		}

		task ("View web content is shown in web content admin") {
			WebContent.viewTitle(webContentTitle = "Web Content Title");
		}
	}

	@description = "The user can add a web content via Web Content Display widget based on global structure and local template."
	@priority = "4"
	test AddWebContentViaWCDWithGlobalStructureAndLocalTemplate {
		task ("Add a web content global structure with a text field") {
			WebContentNavigator.openWebContentStructuresAdmin(siteURLKey = "global");

			WebContentStructures.addCP(
				structureDescription = "Global WC Structure Description",
				structureName = "Global WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("Add a web content template in local site associated to global structure") {
			WebContentNavigator.openWebContentTemplatesAdmin(siteURLKey = "test-site-name");

			WebContentTemplates.addCP(
				structureName = "Global WC Structure Name",
				templateDescription = "Local WC Template Description",
				templateFieldNames = "Text",
				templateName = "Local WC Template Name");
		}

		task ("Add a Web Content Display widget to widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");
		}

		task ("Add a web content via Web Content Display based on global structure and local template") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.add(
				fieldLabelList = "Text",
				structureName = "Global WC Structure Name",
				templateName = "Local WC Template Name",
				webContentTextSingleLine = "Web Content Text",
				webContentTitle = "Web Content Title");
		}

		task ("View web content is shown in WCD") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Text",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "The user can add a web content with color field."
	@priority = "3"
	test AddWebContentWithColorField {
		task ("Add a web content structure with a Color field") {
			WebContentNavigator.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Color",
				fieldName = "Color");

			WebContentStructures.saveCP();
		}

		task ("Add a web content template associated with new structure") {
			WebContentNavigator.openWebContentTemplatesAdmin(siteURLKey = "test-site-name");

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Color",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				webContentColor = "FFFFFF",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("View web contnet is shown in web content admin") {
			WebContent.viewTitle(webContentTitle = "Web Content Title");
		}

		task ("Display the web content in widget page via Add content panel") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page");

			Navigator.gotoSitePage(
				pageName = "Test Page",
				siteName = "Test Site Name");

			WidgetPages.addRecentContent(assetTitle = "Web Content Title");
		}

		task ("View web content is shown in WCD") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "FFFFFF",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "The user can add a web content with image field."
	@priority = "4"
	test AddWebContentWithImageField {
		task ("Add a web content with an Image field") {
			WebContentNavigator.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Image",
				fieldName = "Image");

			WebContentStructures.saveCP();
		}

		task ("Add a web content template based on new structure") {
			WebContentNavigator.openWebContentTemplatesAdmin(siteURLKey = "test-site-name");

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Image",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				navTab = "Web Content Images",
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				webContentImage = "Document_2.jpeg",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("View web content is shown in web content admin") {
			WebContent.viewTitle(webContentTitle = "Web Content Title");
		}

		task ("Add a Web Content Display to widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");
		}

		task ("View web content is shown after selected in the Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();

			WebContentDisplayPortlet.viewContent(
				imageFileName = "Document_2.jpeg",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "Add a web content with custom structure that has nested fields."
	@priority = "4"
	test AddWebContentWithNestedFields {
		task ("Add a web content strcuture with custom fields") {
			WebContentNavigator.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			DataEngine.addFieldNested(
				fieldFieldLabel = "Numeric",
				fieldName = "Numeric",
				targetFieldLabel = "Text");

			WebContentStructures.saveCP();
		}

		task ("Add a web content template based on new strcuture") {
			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateFieldNames = "Text,Numeric",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				webContentNumeric = "123",
				webContentText = "Text",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("View custom values are shown in web content") {
			WebContent.viewTitle(webContentTitle = "Web Content Title");

			WebContent.viewWithStructureCP(
				webContentText = "Text",
				webContentTitle = "Web Content Title");

			DataEngine.viewNestedField(
				fieldName = "Text",
				nestedField = "Numeric",
				nestedFieldData = "123");
		}

		task ("View custom fields are shown in web content structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.viewCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			LexiconEntry.gotoEntry(rowEntry = "WC Structure Name");

			for (var structureFieldName : list "Text,Numeric") {
				DataEngine.viewField(
					fieldFieldLabel = "${structureFieldName}",
					fieldName = "${structureFieldName}");
			}
		}
	}

	@description = "This is a test for LPS-86223. A user can create web content without having a template, and web content without templates will display using an automatically defined template."
	@priority = "4"
	test AddWebContentWithoutTemplate {
		task ("Add a structure with a text field without adding a template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content article using the structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "Web Content Text",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Assert the web content article was added properly") {
			WebContent.viewTitle(webContentTitle = "Web Content Title");

			WebContent.viewWithStructureCP(
				webContentText = "Web Content Text",
				webContentTitle = "Web Content Title");
		}

		task ("Assert an automatic template is used when the web content article is displayed in a web content display widget") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();

			AssertTextEquals(
				index = "1",
				locator1 = "WCD#WEB_CONTENT_TITLE",
				value1 = "Web Content Title");

			AssertTextEquals(
				key_content = "//dt",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY",
				value1 = "Text");

			AssertTextEquals(
				key_content = "//dd",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY",
				value1 = "Web Content Text");
		}
	}

	@description = "This is a use case for LRQA-61632. Add web content with repeatable HTML field."
	@priority = "4"
	test AddWebContentWithRepeatableRichTextField {
		property environment.acceptance = "true";
		property portal.acceptance = "true";

		task ("Add a web content structure with a repeatable Rich Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Rich Text",
				fieldName = "Rich Text");

			DataEngine.toggleFieldRepeatable(fieldFieldLabel = "Rich Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");
		}

		task ("Repeat Rich Text field") {
			AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

			PortletEntry.inputTitle(title = "Web Content Title");

			DataEngine.addRepeatableField(fieldLabel = "Rich Text");
		}

		task ("Type content to the first Rich Text field") {
			CKEditor.addContentInWebContent(
				content = "This is the first HTML field",
				fieldLabel = "Rich Text");
		}

		task ("Type content to the second Rich Text field") {
			SelectFrame.selectFrameNoLoading(
				index = "2",
				key_fieldLabel = "Rich Text",
				locator1 = "CKEditor#ANY_BODY_FIELD_IFRAME_WEB_CONTENT_ARTICLE");

			Type(
				locator1 = "CKEditor#BODY",
				value1 = "This is the second HTML field");

			SelectFrame(value1 = "relative=top");

			PortletEntry.publish();
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add a Web Content Display to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");
		}

		task ("Select the web content article") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			IFrame.closeFrame();
		}

		task ("Assert the content shown in Web Content Display") {
			for (var ordinalNumber : list "first,second") {
				WebContentDisplayPortlet.viewContent(
					webContentContent = "This is the ${ordinalNumber} HTML field",
					webContentTitle = "Web Content Title");
			}
		}
	}

	@description = "This is a use case for LRQA-61632. Add web content with required HTML field."
	@priority = "4"
	test AddWebContentWithRequiredRichTextField {
		task ("Add a web content structure with a required Rich Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Rich Text",
				fieldName = "Rich Text");

			DataEngine.editFieldRequired(fieldFieldLabel = "Rich Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");
		}

		task ("Assert the alert message when publish without content in Rich Text field") {
			AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

			PortletEntry.inputTitle(title = "Web Content Title");

			Button.clickPublish();

			AssertTextEquals(
				key_fieldFieldLabel = "Rich Text",
				locator1 = "WCEditWebContent#FIELD_REQUIRED_ALERT",
				value1 = "This field is required.");
		}

		task ("Assert the alert message is still shown after click the outside of Rich Text field") {
			WebContent.clickMarginOfContentContainer();

			AssertTextEquals(
				key_fieldFieldLabel = "Rich Text",
				locator1 = "WCEditWebContent#FIELD_REQUIRED_ALERT",
				value1 = "This field is required.");
		}

		task ("Assert the alert message is still shown after clear content of Rich Text field") {
			CKEditor.addContentInWebContent(
				content = "Web Content Content",
				fieldLabel = "Rich Text");

			CKEditor.addContentInWebContent(
				content = " ",
				fieldLabel = "Rich Text");

			AssertTextEquals(
				key_fieldFieldLabel = "Rich Text",
				locator1 = "WCEditWebContent#FIELD_REQUIRED_ALERT",
				value1 = "This field is required.");
		}

		task ("Type content in Rich Text field then Publish") {
			CKEditor.addContentInWebContent(
				content = "Web Content Content",
				fieldLabel = "Rich Text");

			PortletEntry.publish();

			WebContent.viewTitle(webContentTitle = "Web Content Title");
		}
	}

	@description = "This is a use case for LPS-52248. View no error is thrown when add a web content with separator field in custom structure."
	@priority = "4"
	test AddWebContentWithSeparatorField {
		task ("Add a web content structure with a separator field") {
			WebContentNavigator.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Separator",
				fieldName = "Separator");

			WebContentStructures.saveCP();
		}

		task ("Add a web content template based on new strcuture") {
			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("View no error is thrown on console") {
			WebContent.viewTitle(webContentTitle = "Web Content Title");

			AssertConsoleTextNotPresent(value1 = "Expression Separator is instead a com.liferay.portal.freemarker.LiferayTemplateModel");

			AssertConsoleTextNotPresent(value1 = "freemarker.core.NonStringException");
		}
	}

	@description = "Add a web content based on new structure with a text field."
	@priority = "4"
	test AddWebContentWithTextField {
		task ("Add a web content structure with a text field") {
			WebContentNavigator.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("Add a web content template associated with new structure") {
			WebContentNavigator.openWebContentTemplatesAdmin(siteURLKey = "test-site-name");

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Text",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				webContentText = "Web Content Text",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("View web content is shown in web content admin") {
			WebContent.viewTitle(webContentTitle = "Web Content Title");
		}
	}

	@description = "This is a use case for LPS-69560. Can add a web content with custom structure that has a geolocation field."
	@priority = "5"
	test AddWebContentWithWebContentAndGeolocationFields {
		property portal.acceptance = "true";

		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content 1",
				groupName = "Test Site Name",
				title = "Web Content Title 1");
		}

		task ("Add a web content strcuture with custom fields") {
			WebContentNavigator.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Web Content",
				fieldName = "Web Content");

			DataEngine.addField(
				fieldFieldLabel = "Geolocation",
				fieldLocation = "2",
				fieldName = "Geolocation");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content template based on new strcuture") {
			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateFieldNames = "Web Content,Geolocation",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentTitle = "Web Content Title 2",
				webContentWebContent = "Web Content Title 1");

			PortletEntry.publish();
		}

		task ("View web content and geolocation field are shown") {
			WebContent.viewTitle(webContentTitle = "Web Content Title 2");

			WebContent.viewWithStructureCP(
				webContentGeolocation = "true",
				webContentTitle = "Web Content Title 2",
				webContentWebContent = "Web Content Title 1");
		}
	}

	@description = "The user cannot delete a web content structure and template that have a referenced web content."
	@priority = "4"
	test CannotDeleteTemplateAndStructureWithReferencedWebContent {
		task ("Add a web content structure with a text field") {
			WebContentNavigator.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("Add a web content template associated with new structure") {
			WebContentNavigator.openWebContentTemplatesAdmin(siteURLKey = "test-site-name");

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Text",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				webContentText = "Web Content Text",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("View web content is shown in web content admin") {
			WebContent.viewTitle(webContentTitle = "Web Content Title");
		}

		task ("View cannot delete structure and template with a referenced web content") {
			WebContentStructures.deleteCP(
				structureName = "WC Structure Name",
				webContentHasReference = "true");

			NavItem.gotoTemplates();

			WebContentTemplates.deleteCP(
				templateName = "WC Template Name",
				webContentHasReference = "true");
		}
	}

	@description = "Can edit a global web content template via Web Content Display widget then view edited template is shown in web content admin"
	@priority = "4"
	test EditGlobalWebContentTemplate {
		task ("Add a global web content structure with a text field") {
			WebContentNavigator.openWebContentStructuresAdmin(siteURLKey = "global");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "Global WC Structure Description",
				structureName = "Global WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("Add a global web content template associated with new structure") {
			WebContentNavigator.openWebContentTemplatesAdmin(siteURLKey = "global");

			WebContentTemplates.addCP(
				structureName = "Global WC Structure Name",
				templateDescription = "Global WC Template Description",
				templateFieldNames = "Text",
				templateName = "Global WC Template Name");
		}

		task ("Add a Web Content Display to widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");
		}

		task ("Add a web content via WCD based on global structure") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.add(
				fieldLabelList = "Text",
				structureName = "Global WC Structure Name",
				templateName = "Global WC Template Name",
				webContentTextSingleLine = "Web Content Text",
				webContentTitle = "Web Content Title");
		}

		task ("View web content is shown in WCD") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Text",
				webContentTitle = "Web Content Title");
		}

		task ("Edit global template via WCD") {
			WebContentDisplayPortlet.editTemplate(
				editTemplateButton = "true",
				structureName = "Global WC Structure Name",
				templateName = "Template Edit",
				webContentContent = "Web Content Text",
				webContentTitle = "Web Content Title");
		}

		task ("View edited web content is shown in web content admin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.viewSelectedTemplateCP(
				templateName = "Template Edit",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "Can edit a web content from global structure in web content display widget."
	@priority = "4"
	test EditWebContentBasedOnGlobalStructure {
		task ("Add a web content structure with a Text field in global site") {
			WebContentNavigator.openWebContentStructuresAdmin(siteURLKey = "global");

			WebContentStructures.addCP(structureName = "Global WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "Global WC Structure Name");
		}

		task ("Add a web content template in global site associated to global structure") {
			WebContentNavigator.openWebContentTemplatesAdmin(siteURLKey = "global");

			WebContentTemplates.addCP(
				structureName = "Global WC Structure Name",
				templateFieldNames = "Text",
				templateName = "Global WC Template Name");
		}

		task ("Add a Web Content Display widget to widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");
		}

		task ("Add a web content via Web Content Display based on global structure and global template") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.add(
				fieldLabelList = "Text",
				structureName = "Global WC Structure Name",
				templateName = "Global WC Template Name",
				webContentTextSingleLine = "Web Content Text",
				webContentTitle = "Web Content Title");
		}

		task ("View web content is shown in WCD") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Text",
				webContentTitle = "Web Content Title");
		}

		task ("Edit the web content via WCD") {
			WebContentDisplayPortletNavigator.gotoEdit(
				menuItem = "Edit Web Content",
				webContentTitle = "Web Content Title");

			WebContentDisplayPortlet.edit(
				webContentTextSingleLine = "Web Content Text Edit",
				webContentTitleEdit = "Web Content Title Edit");
		}

		task ("View edited web contet is shown in WCD") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Text Edit",
				webContentTitle = "Web Content Title Edit");
		}
	}

	@description = "Can edit a local web content template then view edited template is shown in web content admin"
	@priority = "4"
	test EditWebContentTemplate {
		task ("Add a global web content structure with a text field") {
			WebContentNavigator.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("Add two web content templates") {
			for (var i : list "1,2") {
				WebContentNavigator.openWebContentTemplatesAdmin(siteURLKey = "test-site-name");

				WebContentTemplates.addCP(
					structureName = "WC Structure Name",
					templateDescription = "WC Template Description ${i}",
					templateFieldNames = "Text",
					templateName = "WC Template Name ${i}");
			}
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "Web Content Text",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("View second template is shown within web content") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.viewSelectedTemplateCP(
				templateName = "WC Template Name 2",
				webContentTitle = "Web Content Title");
		}

		task ("Select the first template") {
			WebContent.selectTemplateCP(
				structureName = "WC Structure Name",
				templateName = "WC Template Name 1");

			PortletEntry.publish();
		}

		task ("View first template is shown within web content") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.viewSelectedTemplateCP(
				templateName = "WC Template Name 1",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "The user can edit a web content title even though the fields are empty."
	@priority = "5"
	test EditWebContentTitleWithEmptyFields {
		property portal.acceptance = "true";
		property testray.component.names = "Training,Web Content Administration";

		task ("Add a web content structure with custom fields") {
			WebContentNavigator.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addFields(fieldNameList = "Date,Numeric,Upload,Image,Link to Page,Numeric,Single Selection,Multiple Selection,Grid,Select from List,Text,Rich Text");

			WebContentStructures.saveCP();
		}

		task ("Add a web content template associated with new structure") {
			WebContentNavigator.openWebContentTemplatesAdmin(siteURLKey = "test-site-name");

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Date,Numeric,Upload,Image,Link to Page,Numeric,Single Selection,Multiple Selection,Grid,Select from List,Text,Rich Text",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				webContentTitle = "Web Content Title");

			PortletEntry.publishAndWait();
		}

		task ("View web content is shown") {
			WebContent.viewTitle(webContentTitle = "Web Content Title");
		}

		task ("Edit the web content title") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editCP(
				webContentTitle = "Web Content Title",
				webContentTitleEdit = "Web Content Title Edit");
		}
	}

	@description = "This is a test for LPS-96545. Cancel reset and reset the default values when edit default values in imported web content structure."
	@priority = "4"
	test ResetStructureDefaultValues {
		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add a web content based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Test Site Name",
				title = "WC Title");
		}

		task ("Add a blogs entry") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Add a web content structure with all fields") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addFields(fieldNameList = "Text,Select from List,Single Selection,Multiple Selection,Grid,Date,Numeric,Image,Rich Text,Upload,Color,Web Content,Link to Page");

			WebContentStructures.saveCP();
		}

		task ("Add a template for new structure") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				templateFieldNames = "Text,Select from List,Single Selection,Multiple Selection,Grid,Date,Numeric,Image,Rich Text,Upload,Color,Web Content,Link to Page",
				templateName = "WC Template Name");
		}

		task ("Edit the default values of new structure") {
			NavItem.gotoStructures();

			WebContentStructures.editStructureDefaultValuesCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				column = "1",
				dmNavTab = "User Personal Folder",
				navTab = "Web Content Images",
				row = "1",
				webContentColor = "FF0D0D",
				webContentDate = "10/10/2020",
				webContentGrid = "true",
				webContentImage = "Document_3.png",
				webContentLinkToPage = "Test Page Name",
				webContentMultipleSelection = "Option 1",
				webContentNumeric = "9",
				webContentRichText = "This is a Rich Text field",
				webContentSelectFromList = "Option 2",
				webContentSingleSelection = "Option 3",
				webContentText = "Enter Text Here",
				webContentUpload = "Document_1.jpg",
				webContentWebContent = "WC Title");

			PortletEntry.save();
		}

		task ("Edit the default values of web content structure again") {
			WebContentStructures.editStructureDefaultValuesCP(structureName = "WC Structure Name");

			RelatedAssets.selectAsset(
				assetTitle = "Blogs Entry Title",
				assetType = "Blogs Entry",
				scopeSite = "Everywhere");
		}

		task ("Cancel reset the default values") {
			WebContentStructures.resetStructureDefaultValuesCP(
				assetTitle = "Blogs Entry Title",
				cancel = "true",
				templateName = "WC Template Name");

			WebContent.viewWithStructureCP(
				column = "1",
				predefinedValue = "true",
				row = "1",
				webContentColor = "FF0D0D",
				webContentDate = "10/10/2020",
				webContentGrid = "true",
				webContentImage = "Document_3.png",
				webContentLinkToPage = "Test Page Name",
				webContentMultipleSelection = "Option 1",
				webContentNumeric = "9",
				webContentRichText = "This is a Rich Text field",
				webContentSelectFromList = "Option 2",
				webContentSingleSelection = "Option 3",
				webContentText = "Enter Text Here",
				webContentUpload = "Document_1.jpg",
				webContentWebContent = "WC Title");
		}

		task ("Reset the default values") {
			WebContentStructures.resetStructureDefaultValuesCP(
				assetTitle = "Blogs Entry Title",
				templateName = "WC Template Name");

			WebContent.viewWithStructureCP(
				column = "1",
				predefinedValue = "true",
				row = "1",
				webContentColor = "000000",
				webContentDate = "__/__/____",
				webContentGrid = "false",
				webContentLinkToPage = "",
				webContentNumeric = "",
				webContentRichText = "",
				webContentSelectFromList = "Choose an Option",
				webContentText = "",
				webContentUpload = "",
				webContentWebContent = "");

			AssertTextEquals(
				key_fieldFieldLabel = "Image",
				locator1 = "TextInput#SELECTOR_INPUT",
				value1 = "");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_fieldFieldLabel = "Single Selection",
				key_optionValue = "Option 3",
				locator1 = "WCEditWebContent#SELECTION_OPTION");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_fieldFieldLabel = "Multiple Selection",
				key_optionValue = "Option 1",
				locator1 = "WCEditWebContent#SELECTION_OPTION");
		}
	}

	@description = "This is a test for LPS-130506. Aseert Web Content Structure defaults not showing in Search Results."
	@priority = "3"
	test SearchStructureWithDefaultValue {
		property test.name.skip.portal.instance = "WebContentWithCustomStructures#SearchStructureWithDefaultValue";

		task ("Add a web content structure with text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("Edit the default values of new structure") {
			NavItem.gotoStructures();

			WebContentStructures.editStructureDefaultValuesCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(webContentText = "WC WebContent Title");

			PortletEntry.save();
		}

		task ("Go to Home page and assert no web content displayed after searching") {
			Navigator.openURL();

			SearchPortlets.searchEmbedded(searchTerm = "WC WebContent Title");

			SearchResultPortlet.viewNoSearchResults(searchTerm = "WC WebContent Title");
		}

		task ("Reindex and search it again") {
			SearchAdministration.executeReindex();

			Navigator.openURL();

			SearchPortlets.searchEmbedded(searchTerm = "WC WebContent Title");

			SearchResultPortlet.viewNoSearchResults(searchTerm = "WC WebContent Title");
		}
	}

	@description = "This is a test for LPS-125933. Create, read, update and delete a Web Content from a Structure with all possible fields and using a Template with all posible fields."
	@priority = "5"
	test ViewAndEditAsWellAsDeleteContentWithTitleAndAllFields {
		property portal.acceptance = "true";

		task ("Add two widget pages") {
			for (var i : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${i}");
			}
		}

		task ("Add two web content based on Basic Web Content") {
			for (var i : list "1,2") {
				JSONWebcontent.addWebContent(
					content = "WC Content",
					groupName = "Test Site Name",
					title = "WC ${i}");
			}
		}

		task ("Add a web content structure with all fields") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addFields(fieldNameList = "Text,Select from List,Single Selection,Multiple Selection,Grid,Date,Numeric,Image,Rich Text,Upload,Color,Web Content,Geolocation,Link to Page,Separator");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content template with all fields") {
			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "WC Structure Name");

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Text,Select from List,Single Selection,Multiple Selection,Grid,Date,Numeric,Image,Rich Text,Upload,Color,Web Content,Geolocation,Link to Page",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure and template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				column = "1",
				dmNavTab = "User Personal Folder",
				navTab = "Web Content Images",
				row = "1",
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				webContentColor = "FF0D0D",
				webContentDate = "10/10/2020",
				webContentGrid = "true",
				webContentImage = "Document_3.png",
				webContentLinkToPage = "Test Page Name 1",
				webContentMultipleSelection = "Option 1",
				webContentNumeric = "9",
				webContentRichText = "This is a Rich Text field",
				webContentSelectFromList = "Option 2",
				webContentSingleSelection = "Option 3",
				webContentText = "This is a Text field",
				webContentTitle = "Web Content Title",
				webContentUpload = "Document_1.doc",
				webContentWebContent = "WC 1");

			PortletEntry.publish();
		}

		task ("View web content") {
			WebContent.viewWithStructureCP(
				column = "1",
				row = "1",
				webContentColor = "FF0D0D",
				webContentDate = "10/10/2020",
				webContentGeolocation = "true",
				webContentGrid = "true",
				webContentImage = "Document_3.png",
				webContentLinkToPage = "Test Page Name 1",
				webContentMultipleSelection = "Option 1",
				webContentNumeric = "9",
				webContentRichText = "This is a Rich Text field",
				webContentSelectFromList = "Option 2",
				webContentSeparator = "true",
				webContentSingleSelection = "Option 3",
				webContentText = "This is a Text field",
				webContentTitle = "Web Content Title",
				webContentUpload = "Document_1.doc",
				webContentWebContent = "WC 1");

			Button.clickCancel();
		}

		task ("Edit web content") {
			WebContent.editWithStructureCP(
				column = "2",
				dmNavTab = "User Personal Folder",
				navTab = "Web Content Images",
				row = "2",
				webContentColor = "5F5F5F",
				webContentDate = "11/11/2019",
				webContentGrid = "true			WebContentNavigator.openWebContentAdmin(siteURLKey = &quot;test-site-name&quot;);",
				webContentLinkToPage = "Test Page Name 2",
				webContentMultipleSelection = "Option 2",
				webContentNumeric = "8",
				webContentRichText = "This is a Edited Rich Text field",
				webContentSelectFromList = "Option 1",
				webContentSingleSelection = "Option 4",
				webContentText = "This is an edited Text field",
				webContentTitle = "Web Content Title",
				webContentTitleEdit = "Web Content Title Edit",
				webContentUpload = "Document_3.doc",
				webContentWebContent = "WC 2");
		}

		task ("Assert web content has been edited") {
			WebContent.viewWithStructureCP(
				column = "2",
				row = "2",
				webContentColor = "5F5F5F",
				webContentDate = "11/11/2019",
				webContentGrid = "true",
				webContentLinkToPage = "Test Page Name 2",
				webContentMultipleSelection = "Option 2",
				webContentNumeric = "8",
				webContentRichText = "This is a Edited Rich Text field",
				webContentSelectFromList = "Option 1",
				webContentSingleSelection = "Option 4",
				webContentText = "This is an edited Text field",
				webContentTitle = "Web Content Title Edit",
				webContentUpload = "Document_3.doc",
				webContentWebContent = "WC 2");

			Button.clickCancel();
		}

		task ("Delete web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.deleteCP(
				siteURLKey = "test-site-name",
				webContentTitle = "Web Content Title Edit");
		}
	}

	@description = "This is a use case for LRQA-61632. View structure field with predefined value."
	@priority = "4"
	test ViewFieldWithPredefinedValue {
		task ("Add a web content article based on Basic Web Content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");
		}

		task ("Add the following fields") {
			DataEngine.addFields(fieldNameList = "Multiple Selection,Color,Date,Upload,Numeric,Rich Text,Single Selection,Select from List,Text,Web Content");

			DataEngine.addField(
				fieldFieldLabel = "Text Box",
				fieldLocation = "11",
				fieldName = "Text",
				fieldType = "Multiple Lines");

			DataEngine.addField(
				fieldFieldLabel = "Decimal",
				fieldLocation = "12",
				fieldName = "Numeric",
				numericType = "Decimal");

			var index = "1";

			for (var optionValue : list "Option 1,Option 2,Option 3") {
				DataEngine.addFieldOption(
					fieldFieldLabel = "Select from List",
					index = "${index}",
					optionValue = "${optionValue}");

				DataEngine.editFieldReferenceOfFieldOption(
					fieldFieldLabel = "Select from List",
					fieldReferenceOfFieldOption = "Value${index}",
					index = "${index}");

				var index = ${index} + 1;
			}

			var index = "1";

			for (var optionValue : list "Option 1,Option 2,Option 3") {
				DataEngine.addFieldOption(
					fieldFieldLabel = "Single Selection",
					index = "${index}",
					optionFieldLabel = "Options",
					optionValue = "${optionValue}");

				DataEngine.editFieldReferenceOfFieldOption(
					fieldFieldLabel = "Single Selection",
					fieldReferenceOfFieldOption = "Value${index}",
					index = "${index}");

				var index = ${index} + 1;
			}

			DataEngine.addFieldOption(
				fieldFieldLabel = "Multiple Selection",
				index = "1",
				optionFieldLabel = "Options",
				optionValue = "Boolean");
		}

		task ("Save the new structure") {
			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Edit Structure Default Values") {
			WebContentStructures.editStructureDefaultValuesCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				dmNavTab = "User Personal Folder",
				webContentColor = "FF0D0D",
				webContentDate = "10/10/2020",
				webContentMultipleSelection = "Boolean",
				webContentNumeric = "9",
				webContentRichText = "This is a Rich Text field",
				webContentSelectFromList = "Option 2",
				webContentSingleSelection = "Option 1",
				webContentText = "This is a Text field",
				webContentUpload = "Document_1.jpg",
				webContentWebContent = "Web Content Title");

			WebContent.addWithStructureCP(
				numericType = "Decimal",
				webContentNumeric = "0.5",
				webContentNumericFieldLabel = "Decimal");

			WebContent.addWithStructureCP(
				fieldType = "Multiple Lines",
				webContentText = "This is a Text Box field",
				webContentTextFieldLabel = "Text Box");

			PortletEntry.save();
		}

		task ("Add a web content article based on new structure") {
			NavItem.click(navItem = "Web Content");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");
		}

		task ("Assert the predefined value are shown in each field") {
			AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

			WebContent.viewWithStructureCP(
				predefinedValue = "true",
				webContentColor = "FF0D0D",
				webContentDate = "10/10/2020",
				webContentMultipleSelection = "Boolean",
				webContentNumeric = "9",
				webContentRichText = "This is a Rich Text field",
				webContentSelectFromList = "Option 2",
				webContentSingleSelection = "Option 1",
				webContentText = "This is a Text field",
				webContentUpload = "Document_1.jpg",
				webContentWebContent = "Web Content Title");

			WebContent.viewWithStructureCP(
				predefinedValue = "true",
				webContentNumeric = "0.5",
				webContentNumericFieldLabel = "Decimal");

			WebContent.viewWithStructureCP(
				fieldType = "Multiple Lines",
				predefinedValue = "true",
				webContentText = "This is a Text Box field",
				webContentTextFieldLabel = "Text Box");
		}
	}

	@description = "The user can view a global web content structure via add menu icon."
	@priority = "3"
	test ViewGlobalStructureAvailableToNormalSite {
		task ("Add a global web content structure with text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "global");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("View global structure in local site via add icon") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.viewStructureViaAddMenuCP(structureName = "WC Structure Name");
		}
	}

	@description = "This is a use case for LPS-102867. View Select From List cannot lose the selection after add repeatable fields."
	@priority = "4"
	test ViewSelectedOptionsInRepeatableFields {
		task ("Add a web content structure with custom fields") {
			WebContentNavigator.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			for (var fieldName : list "Select from List,Color,Geolocation") {
				DataEngine.addField(
					fieldFieldLabel = "${fieldName}",
					fieldName = "${fieldName}");

				DataEngine.toggleFieldRepeatable(fieldFieldLabel = "${fieldName}");
			}

			for (var i : list "1,2,3") {
				DataEngine.addFieldOption(
					fieldFieldLabel = "Select from List",
					index = "${i}",
					optionValue = "option ${i}");
			}

			WebContentStructures.saveCP();
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentSelectFromList = "option 1",
				webContentSelectFromListFieldLabel = "Select from List",
				webContentTitle = "Web Content Title");
		}

		task ("View options are shown in Select From List") {
			Click(
				key_fieldFieldLabel = "Select from List",
				locator1 = "WCEditWebContent#SELECT_FIELD_TRIGGER");

			for (var selectFromListOption : list "Choose an Option,option 1,option 2,option 3") {
				AssertElementPresent(
					key_menuItem = "${selectFromListOption}",
					locator1 = "MenuItem#DROPDOWN_MENU_ITEM");
			}
		}

		task ("Add a repeatable field in each Field") {
			for (var fieldLabel : list "Color,Geolocation,Select from List") {
				DataEngine.addRepeatableField(fieldLabel = "${fieldLabel}");
			}
		}

		task ("View options are shown in Select From List after add repeatable fields") {
			for (var selectFromListOption : list "Choose an Option,option 1,option 2,option 3") {
				Click(
					key_fieldFieldLabel = "Select from List",
					locator1 = "WCEditWebContent#SELECT_FIELD_TRIGGER_2");

				DropdownMenuItem.click(menuItem = "${selectFromListOption}");
			}
		}
	}

	@description = "This is a test for LPS-71204. Web content structure with localization cannot save garbage data in place of images."
	@priority = "4"
	test ViewSourceContainsNoGarbageData {
		task ("Add a web content structure with custom fields") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			DataEngine.addField(
				fieldFieldLabel = "Image",
				fieldLocation = "2",
				fieldName = "Image");

			WebContentStructures.saveCP();
		}

		task ("Add a web content template associated with new structure") {
			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Text,Image",
				templateName = "WC Template Name");
		}

		task ("Add a web content based on new structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				webContentText = "Web Content Text",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("Edit the web content") {
			WebContent.viewTitle(webContentTitle = "Web Content Title");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.addWithStructureCP(
				navTab = "Web Content Images",
				webContentImage = "Document_3.png",
				webContentImageDescription = "English (United States) Image Description",
				webContentTitle = "English (United States) Title");
		}

		task ("Add a Spanish translation") {
			PortletEntry.changeLocale(locale = "es-ES");

			PortletEntry.inputTitle(title = "Spanish (Spain) Title");

			Type(
				key_fieldFieldLabel = "Image",
				locator1 = "WCEditWebContent#IMAGE_DESCRIPTION",
				value1 = "Spanish (Spain) Image Description");
		}

		task ("View English translation is shown") {
			PortletEntry.changeLocale(locale = "en-US");

			AssertTextEquals(
				locator1 = "TextInput#TITLE",
				value1 = "English (United States) Title");

			AssertTextEquals(
				key_fieldFieldLabel = "Image",
				locator1 = "WCEditWebContent#IMAGE_DESCRIPTION",
				value1 = "English (United States) Image Description");
		}

		task ("View Spanish translation is shown then publish") {
			PortletEntry.changeLocale(locale = "es-ES");

			AssertTextEquals(
				locator1 = "TextInput#TITLE",
				value1 = "Spanish (Spain) Title");

			AssertTextEquals(
				key_fieldFieldLabel = "Image",
				locator1 = "WCEditWebContent#IMAGE_DESCRIPTION",
				value1 = "Spanish (Spain) Image Description");

			PortletEntry.publish();
		}

		task ("View no garbage data is shown") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "English (United States) Title");

			LexiconEntry.gotoHeaderMenuItem(menuItem = "View Source");

			AssertElementNotPresent(locator1 = "WC#SOURCE_GARBAGE_DATA");
		}
	}

	@description = "The user cannot add a web content, structure and template without a title."
	@priority = "4"
	test WebContentAdministrationDataValidation {
		task ("View cannot add web content without title") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addNullCP(webContentContent = "Web Content Content");
		}

		task ("Add a title and content then publish") {
			WebContent.addCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("View web content is shown") {
			WebContent.viewTitle(webContentTitle = "Web Content Title");
		}

		task ("Edit the web content then try to publish again without a title") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editNullCP(webContentContent = "Web Content Content 2");
		}

		task ("Add a new title and content to web content") {
			WebContent.editCP(
				webContentContentEdit = "WC WebContent Content Edit",
				webContentTitle = "Web Content Title",
				webContentTitleEdit = "WC WebContent Title Edit");
		}

		task ("View cannot add a structure without title") {
			WebContentNavigator.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.addNullCP();
		}

		task ("View cannot add a structure without title") {
			WebContentNavigator.openWebContentTemplatesAdmin(siteURLKey = "test-site-name");

			WebContentTemplates.addNullCP();
		}
	}

}