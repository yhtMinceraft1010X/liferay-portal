@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-113929. The page creator could use Clear Filters to reset the filters."
	@priority = "5"
	@uitest
	test ResetAppliedFilters {
		property portal.acceptance = "true";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Size");
		}

		task ("Add three categories in Size vocabulary") {
			var largeId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Large",
				vocabularyName = "Size");

			var mediumId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Medium",
				vocabularyName = "Size");

			var smallId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Small",
				vocabularyName = "Size");
		}

		task ("Add the first web content with Large") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${largeId}",
				content = "Levis 511",
				groupName = "Test Site Name",
				title = "Levis 511");
		}

		task ("Add the second web content with Medium") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${mediumId}",
				content = "Levis 501",
				groupName = "Test Site Name",
				title = "Levis 501");
		}

		task ("Add the third web content with Small") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${smallId}",
				content = "Levis 510",
				groupName = "Test Site Name",
				title = "Levis 510");
		}

		task ("Add a dynamic collection for All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add the first collection page based on dynamic collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Dynamic Collection",
				pageName = "Collection Page Name",
				tabName = "Collections");
		}

		task ("Select the Bordered List in Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				selectedName = "Dynamic Collection",
				styleDisplay = "Bordered List");
		}

		task ("Add an Applied Filters above the Container") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Applied Filters",
				targetFragmentName = "Container");
		}

		task ("Select the dynamic collection as Target Collection and Check the Include Clear Filters Option in Applied Filters") {
			PageEditor.editAppliedFilters(
				includeClearFiltersOption = "true",
				targetCollection = "Dynamic Collection");
		}

		task ("View the Clear Filters is shown in Applied Filters") {
			AssertVisible(
				button = "Clear Filters",
				locator1 = "PageEditor#APPLIED_FILTERS_INNER_BUTTON");
		}

		task ("Add a Collection Filter above the Applied Filters") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Collection Filter",
				targetFragmentName = "Applied Filters");
		}

		task ("Select the dynamic collection as Target Collection and Select the Category as Filter and Size vocabulary as Source") {
			PageEditor.editCollectionFilter(
				categoryNameList = "Large,Medium,Small",
				filter = "Category",
				fragmentName = "Collection Filter",
				targetCollection = "Dynamic Collection",
				vocabularyName = "Size");
		}

		task ("Reset applied filters at Preview mode") {
			PageEditor.openPreviewMode();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			var n = "1";

			for (var style : list "510,501,511") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='Levis ${style}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Large",
				multipleSelection = "true",
				selectedName = "Large",
				title = "Size");

			AssertVisible(
				filterName = "Large",
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");

			AssertVisible(
				key_entryContent = "[normalize-space(text())='Levis 511']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			Page.clearFiltersInAppliedFilters();

			AssertElementNotPresent(
				filterName = "Large",
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");

			var n = "1";

			for (var style : list "510,501,511") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='Levis ${style}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Reset applied filters at Preview mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Collection Page Name",
				siteName = "Test Site Name");

			var n = "1";

			for (var style : list "510,501,511") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='Levis ${style}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Large",
				multipleSelection = "true",
				selectedName = "Large",
				title = "Size");

			AssertVisible(
				filterName = "Large",
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");

			AssertVisible(
				key_entryContent = "[normalize-space(text())='Levis 511']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			Page.clearFiltersInAppliedFilters();

			AssertElementNotPresent(
				filterName = "Large",
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");

			var n = "1";

			for (var style : list "510,501,511") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='Levis ${style}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-113929. The page creator could see the alert info in the General panel of Applied Filters fragment. The Applied Filters fragment could show applied category and keywords filters in Preview and View mode."
	@priority = "5"
	@uitest
	test ViewAppliedCategoryAndKeywordsFilters {
		property portal.acceptance = "true";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Size");
		}

		task ("Add three categories in Size vocabulary") {
			var largeId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Large",
				vocabularyName = "Size");

			var mediumId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Medium",
				vocabularyName = "Size");

			var smallId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Small",
				vocabularyName = "Size");
		}

		task ("Add the first web content with Large") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${largeId}",
				content = "Levis 511",
				groupName = "Test Site Name",
				title = "Levis 511");
		}

		task ("Add the second web content with Medium") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${mediumId}",
				content = "Levis 501",
				groupName = "Test Site Name",
				title = "Levis 501");
		}

		task ("Add the third web content with Small") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${smallId}",
				content = "Levis 510",
				groupName = "Test Site Name",
				title = "Levis 510");
		}

		task ("Add a dynamic collection for All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add the first collection page based on dynamic collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Dynamic Collection",
				pageName = "Collection Page Name 1",
				tabName = "Collections");
		}

		task ("Select the Bordered List in Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				selectedName = "Dynamic Collection",
				styleDisplay = "Bordered List");
		}

		task ("Add an Applied Filters above the Container") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Applied Filters",
				targetFragmentName = "Container");
		}

		task ("View the No Active Filters is shown in Applied Filters fragment") {
			AssertTextEquals(
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_PLACEHOLDER",
				value1 = "No Active Filters");
		}

		task ("View the alert info shown in General panel of Applied Filters") {
			PageEditor.editAppliedFilters();

			AssertTextEquals(
				locator1 = "PageEditor#ITEM_CONFIGURATION_ALERT_INFO",
				value1 = "You will see this fragment on the page only after applying a filter.");
		}

		task ("Select the dynamic collection as Target Collection") {
			PageEditor.editAppliedFilters(targetCollection = "Dynamic Collection");
		}

		task ("Add a Collection Filter above the Applied Filters") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Collection Filter",
				targetFragmentName = "Applied Filters");
		}

		task ("Select the dynamic collection as Target Collection and Select the Category as Filter and Size vocabulary as Source") {
			PageEditor.editCollectionFilter(
				categoryNameList = "Large,Medium,Small",
				filter = "Category",
				fragmentName = "Collection Filter",
				targetCollection = "Dynamic Collection",
				vocabularyName = "Size");
		}

		task ("View the Applied Filters doesn't present when no applied filter at Preview mode") {
			PageEditor.openPreviewMode();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			AssertElementNotPresent(locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_PLACEHOLDER");
		}

		task ("View applied category filter at Preview mode") {
			var n = "1";

			for (var style : list "510,501,511") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='Levis ${style}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Large",
				multipleSelection = "true",
				selectedName = "Large",
				title = "Size");

			AssertVisible(
				filterName = "Large",
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");

			AssertVisible(
				key_entryContent = "[normalize-space(text())='Levis 511']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Navigate to page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Collection Page Name 1",
				siteName = "Test Site Name");
		}

		task ("View the Applied Filters doesn't present when no applied filter at Preview mode") {
			AssertElementNotPresent(locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_PLACEHOLDER");
		}

		task ("View applied category filter at View mode") {
			var n = "1";

			for (var style : list "510,501,511") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='Levis ${style}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Small",
				multipleSelection = "true",
				selectedName = "Small",
				title = "Size");

			AssertVisible(
				filterName = "Small",
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");

			AssertVisible(
				key_entryContent = "[normalize-space(text())='Levis 510']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");
		}

		task ("Add the second collection page based on dynamic collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Dynamic Collection",
				pageName = "Collection Page Name 2",
				tabName = "Collections");
		}

		task ("Select the Bordered List in Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				selectedName = "Dynamic Collection",
				styleDisplay = "Bordered List");
		}

		task ("Add an Applied Filters above the Container") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Applied Filters",
				targetFragmentName = "Container");
		}

		task ("Select the dynamic collection as Target Collection") {
			PageEditor.editAppliedFilters(targetCollection = "Dynamic Collection");
		}

		task ("Add a Collection Filter above the Applied Filters") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				dropTarget = "Header",
				fragmentName = "Collection Filter",
				targetFragmentName = "Applied Filters");
		}

		task ("Select the dynamic collection as Target Collection and Select the Keywords as Filter") {
			PageEditor.editCollectionFilter(
				filter = "Keywords",
				fragmentName = "Collection Filter",
				targetCollection = "Dynamic Collection");
		}

		task ("View applied category filter at Preview mode") {
			PageEditor.openPreviewMode();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			var n = "1";

			for (var style : list "510,501,511") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='Levis ${style}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.searchInCollectionFilter(searchTerm = "501");

			AssertVisible(
				filterName = "501",
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");

			AssertVisible(
				key_entryContent = "[normalize-space(text())='Levis 501']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("Navigate to page in view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Collection Page Name 2",
				siteName = "Test Site Name");
		}

		task ("View applied category filter at View mode") {
			var n = "1";

			for (var style : list "510,501,511") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='Levis ${style}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.searchInCollectionFilter(searchTerm = "510");

			AssertVisible(
				filterName = "510",
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");

			AssertVisible(
				key_entryContent = "[normalize-space(text())='Levis 510']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");
		}
	}

	@description = "This is a test for LPS-113929. The Applied Filters will show the second line and Show More button when there are lots of applied filters."
	@priority = "4"
	test ViewShowMoreButtonWhenTheNumberOfAppliedFiltersMoreThanLimitation {
		task ("Add two vocabularies") {
			for (var vocabularyName : list "Color,Gender") {
				JSONCategory.addVocabulary(
					groupName = "Test Site Name",
					title = "${vocabularyName}");
			}
		}

		task ("Add 2 categories in Gender vocabulary") {
			var maleId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Male",
				vocabularyName = "Gender");

			var femaleId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Female",
				vocabularyName = "Gender");
		}

		task ("Add 8 categories in Color vocabulary") {
			var redId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Red",
				vocabularyName = "Color");

			var brownId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Brown",
				vocabularyName = "Color");

			var blackId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Black",
				vocabularyName = "Color");

			var greyId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Grey",
				vocabularyName = "Color");

			var blueId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Blue",
				vocabularyName = "Color");

			var greenId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Green",
				vocabularyName = "Color");

			var yellowId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Yellow",
				vocabularyName = "Color");

			var whiteId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "White",
				vocabularyName = "Color");
		}

		task ("Add the first web content with Black, Grey, Blue, Male, Female") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${blackId},${greyId},${blueId},${maleId},${femaleId}",
				content = "Levis 511",
				groupName = "Test Site Name",
				title = "Levis 511");
		}

		task ("Add the second web content with White,Yellow,Red,Female") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${whiteId},${yellowId},${redId},${femaleId}",
				content = "Levis 501",
				groupName = "Test Site Name",
				title = "Levis 501");
		}

		task ("Add the third web content with Brown, Black, Green, Male, Female") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${brownId},${blackId},${greenId},${maleId},${femaleId}",
				content = "Levis 510",
				groupName = "Test Site Name",
				title = "Levis 510");
		}

		task ("Add the fourth web content with Black, Grey, Blue, Male") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${blackId},${greyId},${blueId},${maleId}",
				content = "Lee 709",
				groupName = "Test Site Name",
				title = "Lee 709");
		}

		task ("Add a dynamic collection for All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add a collection page based on dynamic collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Dynamic Collection",
				pageName = "Collection Page Name",
				tabName = "Collections");
		}

		task ("Select the Bordered List in Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				selectedName = "Dynamic Collection",
				styleDisplay = "Bordered List");
		}

		task ("Add a Grid above the Container") {
			PageEditor.addFragment(
				collectionName = "Layout Elements",
				dropTarget = "Header",
				fragmentName = "Grid",
				targetFragmentName = "Container");
		}

		task ("Change Number of Modules to 4") {
			PageEditor.editLayoutGrid(
				columnCount = "4",
				panel = "General");
		}

		task ("Add a Collection Filter to first three modules of Grid") {
			for (var columnNumber : list "1,2,3") {
				PageEditor.addElementToColumn(
					collectionName = "Content Display",
					columnNumber = "${columnNumber}",
					fragmentName = "Collection Filter",
					navTab = "Fragments");
			}
		}

		task ("Add an Applied Filters to the fourth modules of Grid") {
			PageEditor.addElementToColumn(
				collectionName = "Content Display",
				columnNumber = "4",
				fragmentName = "Applied Filters",
				navTab = "Fragments");
		}

		task ("Select the dynamic collection as Target Collection and Select the Keywords as Filter in the first Collection Filter") {
			PageEditor.editCollectionFilter(
				columnNumber = "1",
				filter = "Keywords",
				fragmentName = "Collection Filter",
				targetCollection = "Dynamic Collection");
		}

		task ("Select the dynamic collection as Target Collection and Select the Category as Filter, Gender vocabulary as Source and Single Selection in the second Collection Filter") {
			PageEditor.editCollectionFilter(
				categoryNameList = "Male,Female",
				columnNumber = "2",
				filter = "Category",
				fragmentName = "Collection Filter",
				singleSelection = "true",
				targetCollection = "Dynamic Collection",
				vocabularyName = "Gender");
		}

		task ("Select the dynamic collection as Target Collection and Select the Category as Filter and Color vocabulary as Source in the third Collection Filter") {
			PageEditor.editCollectionFilter(
				categoryNameList = "Red,Brown,Black,Grey,Blue,Green,Yellow,White",
				columnNumber = "3",
				filter = "Category",
				fragmentName = "Collection Filter",
				targetCollection = "Dynamic Collection",
				vocabularyName = "Color");
		}

		task ("Select the dynamic collection as Target Collection in the Applied Filters") {
			PageEditor.editAppliedFilters(
				columnNumber = "4",
				targetCollection = "Dynamic Collection");
		}

		task ("View the Show More button when the number of applied filters more than limitation at Preview mode") {
			PageEditor.openPreviewMode();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			var n = "1";

			for (var title : list "Lee 709,Levis 510,Levis 501,Levis 511") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.searchInCollectionFilter(searchTerm = "Levis");

			Page.selectFilterInCollectionFilter(
				columnNumber = "2",
				filterName = "Female",
				selectedName = "Female",
				title = "Gender");

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Yellow,White",
				columnNumber = "3",
				multipleSelection = "true",
				selectedName = "2 Selected",
				title = "Color");

			for (var filterName : list "Levis,Female,Yellow,White") {
				AssertVisible(
					filterName = "${filterName}",
					locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");
			}

			AssertVisible(
				key_entryContent = "[normalize-space(text())='Levis 501']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Red,Green,Brown",
				columnNumber = "3",
				multipleSelection = "true",
				selectedName = "5 Selected",
				title = "Color");

			for (var filterName : list "Levis,Female") {
				AssertVisible(
					filterName = "${filterName}",
					locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");
			}

			AssertAttributeValue(
				attribute1 = "style",
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST",
				value1 = "max-height: 4em;");

			var n = "1";

			for (var title : list "Levis 510,Levis 501") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Click(
				button = "Show More",
				locator1 = "PageEditor#APPLIED_FILTERS_INNER_BUTTON");

			AssertAttributeValue(
				attribute1 = "style",
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST",
				value1 = "");

			for (var filterName : list "Levis,Female,Yellow,White,Red,Green,Brown") {
				AssertVisible(
					filterName = "${filterName}",
					locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");
			}

			Click(
				button = "Show Less",
				locator1 = "PageEditor#APPLIED_FILTERS_INNER_BUTTON");

			AssertAttributeValue(
				attribute1 = "style",
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST",
				value1 = "max-height: 4em;");

			for (var filterName : list "Levis,Female") {
				AssertVisible(
					filterName = "${filterName}",
					locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");
			}

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("View the Show More button when the number of applied filters more than limitation at View mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Collection Page Name",
				siteName = "Test Site Name");

			var n = "1";

			for (var title : list "Lee 709,Levis 510,Levis 501,Levis 511") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Page.searchInCollectionFilter(searchTerm = "Levis");

			Page.selectFilterInCollectionFilter(
				columnNumber = "2",
				filterName = "Female",
				selectedName = "Female",
				title = "Gender");

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Yellow,White,Red",
				columnNumber = "3",
				multipleSelection = "true",
				selectedName = "3 Selected",
				title = "Color");

			for (var filterName : list "Levis,Female,Yellow,White,Red") {
				AssertVisible(
					filterName = "${filterName}",
					locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");
			}

			AssertVisible(
				key_entryContent = "[normalize-space(text())='Levis 501']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			AssertElementNotPresent(
				key_entryContent = "",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			Page.selectFilterInCollectionFilter(
				categoryNameList = "Green,Brown",
				columnNumber = "3",
				multipleSelection = "true",
				selectedName = "5 Selected",
				title = "Color");

			for (var filterName : list "Levis,Female,Yellow,White") {
				AssertVisible(
					filterName = "${filterName}",
					locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");
			}

			AssertAttributeValue(
				attribute1 = "style",
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST",
				value1 = "max-height: 4em;");

			var n = "1";

			for (var title : list "Levis 510,Levis 501") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			Click(
				button = "Show More",
				locator1 = "PageEditor#APPLIED_FILTERS_INNER_BUTTON");

			AssertAttributeValue(
				attribute1 = "style",
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST",
				value1 = "");

			for (var filterName : list "Levis,Female,Yellow,White,Red,Green,Brown") {
				AssertVisible(
					filterName = "${filterName}",
					locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");
			}

			Click(
				button = "Show Less",
				locator1 = "PageEditor#APPLIED_FILTERS_INNER_BUTTON");

			AssertAttributeValue(
				attribute1 = "style",
				locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST",
				value1 = "max-height: 4em;");

			for (var filterName : list "Levis,Female,Yellow,White") {
				AssertVisible(
					filterName = "${filterName}",
					locator1 = "PageEditor#APPLIED_FILTERS_FILTER_LIST_FILTER_ITEM");
			}
		}
	}

}