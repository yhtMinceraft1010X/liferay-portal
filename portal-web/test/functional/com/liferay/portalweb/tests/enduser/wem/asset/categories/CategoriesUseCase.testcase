@component-name = "portal-categories"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Categories";
	property testray.main.component.name = "Categories";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Add a category as Site Role."
	@priority = "4"
	test AddCategoryAsSiteRole {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign the new user to a site") {
			JSONUser.addUserToSite(
				groupName = "Test Site Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add a site role") {
			JSONRole.addSiteRole(
				roleKey = "Category Role Name",
				roleTitle = "Category Role Name");
		}

		task ("Define the permissions") {
			for (var resourceActionIndex : list "ADD_VOCABULARY,ADD_CATEGORY") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.asset.categories",
					roleTitle = "Category Role Name",
					roleType = "site");
			}

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.asset.kernel.model.AssetVocabulary",
				roleTitle = "Category Role Name",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ADD_CATEGORY",
				resourceName = "com.liferay.asset.kernel.model.AssetCategory",
				roleTitle = "Category Role Name",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_asset_categories_admin_web_portlet_AssetCategoriesAdminPortlet",
				roleTitle = "Category Role Name",
				roleType = "site");
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Category Role Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Add a category as site role") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addCP(vocabularyName = "Vocabulary Name");

			Category.addCP(
				categoryName = "Category Name",
				vocabularyName = "Vocabulary Name");
		}
	}

	@description = "LPS-134960 When in Blogs, search by category or to assign a category to an item, all categories, regardless the visibility of the vocabularies they belong to, are available."
	@priority = "4"
	test AddCategoryOfAnyVisibilityToBlogs {
		task ("Create public vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Public Vocabulary Name");
		}

		task ("Add category to public vocabulary") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Public Category Name",
				vocabularyName = "Public Vocabulary Name");
		}

		task ("Create internal vocabulary") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addInternalVocabulary(vocabularyName = "Internal Vocabulary Name");
		}

		task ("Add categories to internal vocabulary") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Internal Category Name",
				vocabularyName = "Internal Vocabulary Name");
		}

		task ("Create a new blog") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Add public and internal categories to Blogs") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

			BlogsNavigator.gotoEditCP(entryTitle = "Blogs Entry Title");

			Panel.expandPanel(panel = "Categorization");

			AssetCategorization.addCategory(
				categoryName = "Public Category Name",
				vocabularyName = "Public Vocabulary Name");

			AssetCategorization.addCategory(
				categoryName = "Internal Category Name",
				vocabularyName = "Internal Vocabulary Name");

			PortletEntry.publish();
		}
	}

	@description = "LPS-134960 When in Documents & Media, search by category or to assign a category to an item, all categories, regardless the visibility of the vocabularies they belong to, are available."
	@priority = "4"
	test AddCategoryOfAnyVisibilityToDocsAndMedia {
		task ("Create public vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Public Vocabulary Name");
		}

		task ("Add category to public vocabulary") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Public Category Name",
				vocabularyName = "Public Vocabulary Name");
		}

		task ("Create internal vocabulary") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addInternalVocabulary(vocabularyName = "Internal Vocabulary Name");
		}

		task ("Add categories to internal vocabulary") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Internal Category Name",
				vocabularyName = "Internal Vocabulary Name");
		}

		task ("Create a new Document") {
			JSONDocument.addFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title",
				groupName = "Test Site Name");
		}

		task ("Add public and internal categories to Document") {
			DMDocument.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Edit",
				rowEntry = "DM Document Title");

			DMDocument.addCategories(
				categoryNameList = "Public Category Name",
				vocabularyName = "Public Vocabulary Name");

			DMDocument.addCategories(
				categoryNameList = "Internal Category Name",
				vocabularyName = "Internal Vocabulary Name");

			Button.clickSubmitButton();

			Alert.viewSuccessMessage();
		}
	}

	@description = "LPS-134960 When in Web Content, search by category or to assign a category to an item, all categories, regardless the visibility of the vocabularies they belong to, are available."
	@priority = "4"
	test AddCategoryOfAnyVisibilityToWebContent {
		task ("Create public vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Public Vocabulary Name");
		}

		task ("Add category to public vocabulary") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Public Category Name",
				vocabularyName = "Public Vocabulary Name");
		}

		task ("Create internal vocabulary") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addInternalVocabulary(vocabularyName = "Internal Vocabulary Name");
		}

		task ("Add categories to internal vocabulary") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Internal Category Name",
				vocabularyName = "Internal Vocabulary Name");
		}

		task ("Create a new web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add public and internal categories to web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.selectCategory(
				categoryName = "Public Category Name",
				vocabularyName = "Public Vocabulary Name");

			WebContent.selectCategory(
				categoryName = "Internal Category Name",
				vocabularyName = "Internal Vocabulary Name");

			PortletEntry.publish();
		}
	}

	@description = "Add a web content with a category from parent site."
	@priority = "4"
	test AddWebContentWithCategoryFromParentSite {
		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a child site") {
			JSONGroup.addChildGroup(
				groupName = "Child SiteName",
				parentGroupName = "Test Site Name");
		}

		task ("Add a web content with category from parent site") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "child-sitename");

			WebContentNavigator.gotoAddCP();

			WebContent.addWithCategoryCP(
				categoryName = "Category Name",
				vocabularyName = "Vocabulary Name",
				webContentContent = "WC Content Body",
				webContentTitle = "WC Content Title");
		}

		task ("View the category is assigned to the web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "child-sitename");

			WebContentNavigator.gotoEditCP(webContentTitle = "WC Content Title");

			WebContent.viewCategorizationCategoryCP(categoryNameList = "Category Name");
		}
	}

	@description = "Add a web content with required category."
	@priority = "3"
	test AddWebContentWithRequiredCategory {
		task ("Add a vocabulary for Web Content Article") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addWithAssociatedAssetTypeCP(
				assetType = "Web Content Article",
				required = "true",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Cannot add a web content without required category") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addFailWithoutRequiredCategoryAssetTypeCP(vocabularyName = "Vocabulary Name");
		}

		task ("View add a web content with required category") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addWithCategoryCP(
				categoryName = "Category Name",
				vocabularyName = "Vocabulary Name",
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("View the category is assigned to web content") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.viewCategorizationCategoryCP(
				categoryNameList = "Category Name",
				vocabularyName = "Vocabulary Name");
		}
	}

	@description = "Add a web content with a specific type category."
	@priority = "3"
	test AddWebContentWithSpecificTypeCategory {
		task ("Add a vocabulary for Web Content Article") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addWithAssociatedAssetTypeCP(
				assetType = "Web Content Article",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content with the category") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addWithCategoryCP(
				categoryName = "Category Name",
				vocabularyName = "Vocabulary Name",
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("View the category is assigned to web content") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.viewCategorizationCategoryCP(
				categoryNameList = "Category Name",
				vocabularyName = "Vocabulary Name");
		}
	}

	@description = "Cannot add multiple categories when disallow multiple categories."
	@priority = "4"
	test CannotAddMultipleCategoriesWhenDisallowMultipleCategories {
		task ("Add a vocabulary disallow multiple categories") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addCP(
				allowMultipleCategories = "false",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add two categories") {
			for (var n : list "1,2") {
				JSONCategory.addCategory(
					groupName = "Test Site Name",
					title = "Category Name ${n}",
					vocabularyName = "Vocabulary Name");
			}
		}

		task ("Cannot add multiple categories") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addWithMultipleCategories(
				allowMultipleCategories = "false",
				categoryNameList = "Category Name 1,Category Name 2",
				vocabularyName = "Vocabulary Name",
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			WebContent.viewCategorizationCategoryCP(
				categoryNameList = "Category Name 1,Category Name 2",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "Cannot delete a category without permission."
	@priority = "4"
	test CannotDeleteCategoryWithoutPermission {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Add a site role") {
			JSONRole.addSiteRole(
				roleKey = "Category Role Name",
				roleTitle = "Category Role Name");
		}

		task ("Define the permissions") {
			for (var resourceActionIndex : list "ADD_VOCABULARY,ADD_CATEGORY") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.asset.categories",
					roleTitle = "Category Role Name",
					roleType = "site");
			}

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_SITE_ADMINISTRATION",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Category Role Name",
				roleType = "site");

			for (var resourceActionIndex : list "VIEW,CONFIGURATION,ACCESS_IN_CONTROL_PANEL") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com_liferay_asset_categories_admin_web_portlet_AssetCategoriesAdminPortlet",
					roleTitle = "Category Role Name",
					roleType = "site");
			}

			for (var resourceActionIndex : list "ADD_TO_PAGE,PERMISSIONS,CONFIGURATION,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com_liferay_asset_categories_navigation_web_portlet_AssetCategoriesNavigationPortlet",
					roleTitle = "Category Role Name",
					roleType = "site");
			}

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_SITE_ADMINISTRATION",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Category Role Name",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.asset.kernel.model.AssetCategory",
				roleTitle = "Category Role Name",
				roleType = "site");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.asset.kernel.model.AssetVocabulary",
				roleTitle = "Category Role Name",
				roleType = "site");
		}

		task ("Assign the new user to a site") {
			JSONUser.addUserToSite(
				groupName = "Test Site Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign the site role to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Category Role Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Cannot delete the category") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.deleteCategoryNoPermissionCP(
				rowEntry = "Category Name",
				vocabularyName = "Vocabulary Name");

			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.viewCP(
				categoryName = "Category Name",
				vocabularyName = "Vocabulary Name");
		}
	}

	@description = "Copy a web content with a category."
	@priority = "3"
	test CopyWebContentWithCategory {
		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			var categoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content with the category") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryId}",
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Copy the web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.copyCP(webContentTitle = "Web Content Title");
		}

		task ("View the category is assigned to the copy of web content") {
			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title Duplicate 1");

			WebContent.viewCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title Duplicate 1");

			WebContent.viewCategorizationVocabularyCP(vocabularyNameList = "Vocabulary Name");

			WebContent.viewCategorizationCategoryCP(categoryNameList = "Category Name");
		}
	}

	@description = "Export and import vocabularies."
	@priority = "5"
	test ExportImportVocabularies {
		property portal.acceptance = "true";

		task ("Add a new site based on Blank Site") {
			JSONGroup.addGroup(groupName = "Site Name 2");
		}

		task ("Add multiple vocabularies") {
			for (var title : list "Unit 2 - Moon Minerals,Unit 3 - Ingeneous Moon Rocks,Unit 4 - Metamorphic Moon Rocks,Unit 5 - Sedimentary Moon Rocks,Unit 6 - Moon Rock Structure and Deformation,Unit 7 - Geological Structures on the Moon,Unit 8 - Moon Tectonics,Unit 9 - Nova Rocks,Unit 10 - Moon Crust Formation,Unit 11 - Evidence of Moon Rivers,Unit 12 - Geological Mapping,Unit 13 - Moon Topography,Unit 14 - Field Techniques,Unit 15 - Climate Through Moon History") {
				JSONCategory.addVocabulary(
					groupName = "Site Name 2",
					siteURLKey = "site-name-2",
					title = "${title}");
			}
		}

		task ("Export the vocabularies") {
			Category.openCategoriesAdmin(siteURLKey = "site-name-2");

			LAR.exportPortlet(larFileName = "Moon-Rocks-Unit-Category-Hierarchy.lar");
		}

		task ("Import the vocabularies to another site") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			LAR.importPortlet(larFileName = "Moon-Rocks-Unit-Category-Hierarchy.lar");
		}
	}

	@description = "Export and import a web content with a category or a subcategory."
	@priority = "5"
	test ExportImportWebContentWithCategoryOrSubCategory {
		property portal.acceptance = "true";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add widgets to page") {
			for (var portletName : list "Asset Publisher,Category Filter") {
				JSONLayout.addWidgetToPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name",
					widgetName = "${portletName}");
			}
		}

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			var categoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a subcategory") {
			var subcategoryId = JSONCategory.addSubcategory(
				groupName = "Test Site Name",
				parentCategoryName = "Category Name",
				title = "Subcategory Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content with the category") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryId}",
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a web content with the subcategory") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${subcategoryId}",
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Subcategory WC Title");
		}

		task ("Export the whole site") {
			LAR.exportSiteCP(siteScopeName = "Test Site Name");

			var key_larFileName = "${larFileName}";

			AssertTextEquals(
				locator1 = "ExportImport#CURRENT_AND_PREVIOUS_STATUS_1",
				value1 = "Successful");

			var larFileName = LAR.getLarFileName();

			LAR.downloadLar();
		}

		task ("Add a new site based on Blank Site") {
			JSONGroup.addGroup(groupName = "Import Site Name");
		}

		task ("Import the lar to new site") {
			LAR.importSiteCP(
				larFileName = "${larFileName}",
				siteName = "Import Site Name");
		}

		task ("Select the category in Categories Navigation") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Import Site Name");

			CategoriesNavigationPortlet.selectCategoryPG(categoryName = "Category Name");
		}

		task ("View the web content with category shown in AP") {
			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Web Content Content",
				assetTitle = "Web Content Title");
		}

		task ("Select the subcategory in Categories Navigation") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Import Site Name");

			CategoriesNavigationPortlet.selectCategoryPG(categoryName = "Subcategory Name");
		}

		task ("View the web content with subcategory shown in AP") {
			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Web Content Content",
				assetTitle = "Subcategory WC Title");
		}

		task ("View the category or subcategory are assigned to web contents") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "import-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.viewCategorizationCategoryCP(
				categoryNameList = "Category Name",
				webContentTitle = "Web Content Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "import-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Subcategory WC Title");

			WebContent.viewCategorizationCategoryCP(
				categoryNameList = "Subcategory Name",
				webContentTitle = "Subcategory WC Title");
		}
	}

	@description = "Search categories in vocabulary."
	@priority = "4"
	test SearchCategoryInVocabulary {
		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add categories") {
			JSONCategory.addCategory(
				description = "black and white",
				groupName = "Test Site Name",
				title = "panda",
				vocabularyName = "Vocabulary Name");

			JSONCategory.addCategory(
				description = "brown or white",
				groupName = "Test Site Name",
				title = "llama",
				vocabularyName = "Vocabulary Name");
		}

		task ("Search categories by name") {
			for (var categoryName : list "llama,panda") {
				Category.openCategoriesAdmin(siteURLKey = "test-site-name");

				Category.searchCP(
					categorySearchEntry = "${categoryName}",
					vocabularyName = "Vocabulary Name");

				Category.viewSearchResultsCP(categoryNameList = "${categoryName}");
			}
		}

		task ("Search categories by description") {
			for (var categoryDescription : list "brown,black") {
				Category.openCategoriesAdmin(siteURLKey = "test-site-name");

				Category.searchCP(
					categorySearchEntry = "${categoryDescription}",
					vocabularyName = "Vocabulary Name");

				Category.viewSearchResultsCP(categoryDefinitionList = "${categoryDescription}");
			}

			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.searchCP(
				categorySearchEntry = "white",
				vocabularyName = "Vocabulary Name");

			Category.viewSearchResultsCP(
				categoryDefinitionList = "brown or white,black and white",
				categoryNameList = "llama,panda");
		}
	}

	@description = "Search a category with localization as Site Administrator."
	@priority = "4"
	test SearchCategorywithLocalizationAsSiteAdministrator {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category with localization") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.addCategoryLocalizationCP(
				categoryName = "Category Name",
				locale = "de-DE",
				localizationName = "Kategorienamen",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign the new user to a site") {
			JSONUser.addUserToSite(
				groupName = "Test Site Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign the Site Administrator to new user") {
			JSONRole.assignSiteRoleToUser(
				groupName = "Test Site Name",
				roleTitle = "Site Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Change the user language to Deutsch") {
			User.openUsersAdmin(siteURLKey = "test-site-name");

			User.editDisplaySettingsCP(
				languageName = "Deutsch (Deutschland)",
				userScreenName = "usersn");
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Category Page Name");
		}

		task ("Add a Web Content Display to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Category Page Name",
				widgetName = "Web Content Display");
		}

		task ("Add a Search page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Search");
		}

		task ("Add a Search Results widget to Search page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Search",
				widgetName = "Search Results");
		}

		task ("Add a web content with the category") {
			var categoryId = JSONCategory.getCategoryId(
				categoryName = "Category Name",
				groupName = "Test Site Name",
				vocabularyName = "Vocabulary Name");

			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryId}",
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Select the web content in Web Content Display") {
			Navigator.gotoSitePage(
				pageName = "Category Page Name",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Navigate to the Search page") {
			Navigator.gotoSitePage(
				pageName = "Search",
				siteName = "Test Site Name");
		}

		task ("Search localized category name") {
			Search.searchCP(searchTerm = "Kategorienamen");
		}

		task ("View the search results") {
			SearchResultPortlet.viewSearchResults(
				searchAssetTitle = "Web Content Title",
				searchAssetType = "Webcontent");
		}
	}

	@description = "Search subcategories in category."
	@priority = "4"
	test SearchSubcategoryInCategory {
		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add categories") {
			JSONCategory.addSubcategory(
				description = "friendly chops",
				groupName = "Test Site Name",
				parentCategoryName = "Category Name",
				title = "beard hair",
				vocabularyName = "Vocabulary Name");

			JSONCategory.addSubcategory(
				description = "handlebar",
				groupName = "Test Site Name",
				parentCategoryName = "Category Name",
				title = "mustache hair",
				vocabularyName = "Vocabulary Name");
		}

		task ("Search subcategory by name") {
			for (var categoryName : list "beard,mustache") {
				Category.openCategoriesAdmin(siteURLKey = "test-site-name");

				Subcategory.searchCP(
					categoryName = "Category Name",
					subcategorySearchEntry = "${subcategoryName}",
					vocabularyName = "Vocabulary Name");

				Subcategory.viewSearchResultsCP(categoryNameList = "${categoryName}");
			}
		}

		task ("Search subcategory by description") {
			for (var categoryDescription : list "friendly chops,handlebar") {
				Category.openCategoriesAdmin(siteURLKey = "test-site-name");

				Subcategory.searchCP(
					categoryName = "Category Name",
					categorySearchEntry = "${subcategoryDescription}",
					vocabularyName = "Vocabulary Name");

				Subcategory.viewSearchResultsCP(subcategoryDefinitionList = "${subcategoryDescription}");
			}

			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Subcategory.searchCP(
				categoryName = "Category Name",
				categorySearchEntry = "hair",
				vocabularyName = "Vocabulary Name");

			Subcategory.viewSearchResultsCP(
				subcategoryDefinitionList = "friendly chops,handlebar",
				subcategoryNameList = "mustache,beard");
		}
	}

	@description = "Search web content by edited category."
	@priority = "4"
	test SearchWebContentByEditedCategory {
		task ("Add a Search page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Search");
		}

		task ("Add a Search Results widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Search",
				widgetName = "Search Results");
		}

		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			var categoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a web content with category") {
			JSONWebcontent.addWebContent(
				assetCategoryIds = "${categoryId}",
				content = "Test Content",
				groupName = "Test Site Name",
				title = "Test Title");
		}

		task ("Edit the category") {
			JSONCategory.updateCategoryName(
				categoryName = "Category Name",
				groupName = "Test Site Name",
				title = "Edited",
				vocabularyName = "Vocabulary Name");
		}

		task ("Navigate to the Search page") {
			Navigator.gotoSitePage(
				pageName = "Search",
				siteName = "Test Site Name");
		}

		task ("Search the web content by edited category") {
			Search.searchCP(searchTerm = "Edited");
		}

		task ("View the web content is shown in search result") {
			SearchResultPortlet.viewSearchResults(
				searchAssetTitle = "Test Title",
				searchAssetType = "Web Content Article");
		}
	}

	@description = "This is for LPS-101409. Validate selecting multiple categories when creating page with blank template."
	@priority = "4"
	test SelectMultipleRequiredCategoriesInContentPageCreation {
		task ("Add a vocabulary with required for page") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addWithAssociatedAssetTypeCP(
				assetType = "Page",
				required = "true",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add categories") {
			for (var index : list "1,2,3") {
				JSONCategory.addCategory(
					groupName = "Test Site Name",
					title = "Category Name ${index}",
					vocabularyName = "Vocabulary Name");
			}
		}

		task ("Select all categories in content page creation") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				categoryNameList = "Category Name 1,Category Name 2,Category Name 3",
				pageName = "Test Content Page Name",
				vocabularyName = "Vocabulary Name");

			Alert.viewSuccessMessage();
		}

		task ("View the new page in Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			AssertVisible(
				key_itemName = "Test Content Page Name",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM");
		}
	}

	@description = "This is for LPS-101409. Validate if select a required category when entering the page name not based on a page template."
	@priority = "5"
	test SelectRequiredCategoryInContentPageCreation {
		property portal.acceptance = "true";

		task ("Add a vocabulary with required for page") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addWithAssociatedAssetTypeCP(
				assetType = "Page",
				required = "true",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a content page and select a required category") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				categoryName = "Category Name",
				pageName = "Test Content Page Name",
				vocabularyName = "Vocabulary Name");

			Alert.viewSuccessMessage();
		}

		task ("View the new page in Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			AssertVisible(
				key_itemName = "Test Content Page Name",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM");
		}
	}

	@description = "This is for LPS-101409. Validate if select a required category when entering the page name based on a page template. Also add a step to check adding page with category successfully via json."
	@priority = "5"
	test SelectRequiredCategoryInWidgetPageCreation {
		property portal.acceptance = "true";

		task ("Add a vocabulary with required for page") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addWithAssociatedAssetTypeCP(
				assetType = "Page",
				required = "true",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a category") {
			var categoryId = JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a widget page and select a required category") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.addPage(
				categoryName = "Category Name",
				pageName = "Test Widget Page Name",
				vocabularyName = "Vocabulary Name");

			Alert.viewSuccessMessage();
		}

		task ("View the new page in Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			AssertVisible(
				key_itemName = "Test Widget Page Name",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM");
		}

		task ("Add a page with category via JSONWS") {
			JSONLayout.addPublicLayout(
				assetCategoryIds = "${categoryId}",
				groupName = "Test Site Name",
				layoutName = "Test Page Name 2");
		}

		task ("View the new page in Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			AssertVisible(
				key_itemName = "Test Page Name 2",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM");
		}
	}

	@description = "View empty search result."
	@priority = "3"
	test ViewEmptySearchResult {
		task ("Add a vocabulary") {
			JSONCategory.addVocabulary(
				groupName = "Test Site Name",
				title = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a subcategory") {
			JSONCategory.addSubcategory(
				groupName = "Test Site Name",
				parentCategoryName = "Category Name",
				title = "Subcategory Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Search an unrelated keyword in vocabulary") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Category.searchCP(
				categorySearchEntry = "Null",
				vocabularyName = "Vocabulary Name");
		}

		task ("View empty search result") {
			Category.viewSearchResultsCP(nullResult = "true");
		}

		task ("Search an unrelated keyword in category") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Subcategory.searchCP(
				categoryName = "Category Name",
				subCategorySearchEntry = "Null",
				vocabularyName = "Vocabulary Name");
		}

		task ("View empty search result") {
			Subcategory.viewSearchResultsCP(nullResult = "true");
		}
	}

	@description = "This is a use case for LPS-142234. The user could view error message when save site settings without required category."
	@priority = "4"
	test ViewErrorMessageWhenSaveSiteSettingsWithoutRequiredCategory {
		task ("Add a vocabulary with associated asset type") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addWithAssociatedAssetTypeCP(
				assetType = "Site",
				required = "true",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("Go to Categorization settings") {
			Site.openSiteSettingsAdmin(siteURLKey = "test-site-name");

			Click(
				key_itemName = "Assets",
				locator1 = "ListGroupItem#ITEM_TEXT");

			Navigator.gotoNavTab(navTab = "Categorization");
		}

		task ("View error message is shown when save site settings") {
			Button.click(button = "Save");

			Alert.viewErrorMessage(errorMessage = "Error: Please select at least one category for Vocabulary Name.");
		}
	}

	@description = "View the vocabulary for asset subtype in web content editor."
	@priority = "3"
	test ViewVocabularyForAssetSubtypeInWebContentEditor {
		task ("Add a web content structure with a Text field") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP();
		}

		task ("Add a vocabulary for Web Content Article and Basic Web Content") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.addWithAssociatedAssetTypeCP(
				assetSubtype = "Basic Web Content",
				assetType = "Web Content Article",
				vocabularyName = "Vocabulary Name");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("View vocabulary for asset subtype in web content editor") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(webContentTitle = "WC Title");

			Panel.expandPanel(panel = "Categorization");

			AssetCategorization.addCategory(
				categoryName = "Category Name",
				vocabularyName = "Vocabulary Name");

			PortletEntry.publish();
		}

		task ("View the vocabulary for asset subtype not shown in web content editor based on new structure") {
			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			Panel.expandPanel(panel = "Categorization");

			AssertTextNotPresent(value1 = "Vocabulary Name");
		}
	}

	@description = "This is a test for LPS-131984. View vocabulary for specific Asset Types in asset editor."
	@priority = "4"
	test ViewVocabularyForSpecificAssetTypesInAssetEditor {
		task ("Add a vocabulary for specific assets types") {
			Category.openCategoriesAdmin(siteURLKey = "test-site-name");

			Vocabulary.gotoAddVocabulary();

			PortletEntry.inputName(name = "Vocabulary Name");

			Vocabulary.addAssociatedAssetType(assetType = "Blogs Entry");

			Button.clickAddRow();

			Vocabulary.addAssociatedAssetType(
				assetType = "Web Content Article",
				required = "true",
				rowNumber = "2");

			Button.clickNoError(button = "Save");

			AssertConfirm.assertPartialConfirmation(value1 = "Are you sure you want to create this vocabulary with public visibility?");

			Alert.viewSuccessMessage();
		}

		task ("View associated asset types of vocabulary in Categories admin") {
			AssertVisible(
				assetTitle = "Vocabulary Name",
				info = "Asset Types: Blogs Entry, Web Content Article *(Required)",
				locator1 = "Message#ASSET_INFO");
		}

		task ("Add a category") {
			JSONCategory.addCategory(
				groupName = "Test Site Name",
				title = "Category Name",
				vocabularyName = "Vocabulary Name");
		}

		task ("View the vocabulary in web content editor") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addWithCategoryCP(
				categoryName = "Category Name",
				vocabularyName = "Vocabulary Name",
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Page Name");
		}

		task ("View the vocabulary not shown in page editor") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Page Name");

			PagesAdmin.viewVocabularyNotPresent(
				pageName = "Page Name",
				vocabularyName = "Vocabulary Name");
		}
	}

}