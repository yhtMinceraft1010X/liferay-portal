@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Page Templates";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Import test fragments from dependencies folder") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "fragment-collection.zip");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-91552."
	@priority = "5"
	test CanViewPaginationContentViaAP {
		property portal.acceptance = "true";

		task ("Add 3 basic web content articles") {
			for (var count : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "WC Content ${count}",
					groupName = "Test Site Name",
					title = "WC Title ${count}");
			}
		}

		task ("Add Display Page and mark it as default") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addWidget(portletName = "Asset Publisher");

			AssetPublisherPortlet.configurePaginationPG(
				paginationNumber = "2",
				paginationType = "Regular");

			Portlet.saveAndCloseConfig();

			PageEditor.clickPublish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Select Display Page Name as Specific Display Page Template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			for (var count : list "1,2,3") {
				WebContentNavigator.gotoEditCP(webContentTitle = "WC Title ${count}");

				WebContent.editDisplayPage(
					pageName = "Display Page Name",
					pageType = "Display Page Templates");

				PortletEntry.publish();
			}
		}

		task ("Add widget pages with Asset Publisher") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Asset Publisher");
		}

		task ("View paginated web content via Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssetPublisherPortlet.clickAssetTitle(assetTitle = "WC Title 1");

			AssetPublisherPortlet.changePagination(
				currentPageNumber = "2 of 2",
				paginationItem = "2");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "WC Content 1",
				assetTitle = "WC Title 1");
		}
	}

	@description = "Change a fragment's editable image field."
	@priority = "5"
	test ChangeEditableImage {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Add an Image fragment to the content page template") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Image");
		}

		task ("Edit the Image fragment's image") {
			PageEditor.editFragmentImage(
				contributed = "false",
				fileName = "Document_1.png",
				fragmentName = "Image");
		}

		task ("Assert the Image fragment's image was changed") {
			PageEditor.viewFragmentEditableImage(
				contributed = "false",
				fragmentClass = "image",
				imageFileName = "Document_1.png");
		}
	}

	@description = "Change a fragment's editable text field."
	@priority = "5"
	test ChangeEditableText {
		property portal.acceptance = "true";

		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Add a Content fragment to the content page template") {
			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Content");
		}

		task ("Edit the Content fragment's editable text") {
			PageEditor.editFragmentText(
				contributed = "false",
				fragmentName = "Content",
				text = "Editing Finished");
		}

		task ("Assert the Content fragment's editable text was changed") {
			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "Editing Finished",
				fragmentName = "Content");
		}
	}

	@description = "This is a test for LPS-110144. Configure the Heading fragment in content page template."
	@priority = "5"
	test ConfigureBasicComponentHeading {
		property portal.acceptance = "true";

		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();
		}

		task ("Add a Heading fragment to content page template") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Configure the fragment") {
			PageEditor.gotoStyle(fragmentName = "Heading");

			PageEditor.configureFragment(
				alignment = "Center",
				textColor = "Success");

			PageEditor.gotoConfiguration(fragmentName = "Heading");

			PageEditor.configureFragment(headingLevel = "H2");
		}

		task ("View the fragment style") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "heading",
				headingLevel = "h2",
				textColor = "success");

			PageEditor.clickPublish();
		}

		task ("Add a page based on content page template") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				collectionName = "Page Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Page Template Name");
		}

		task ("View the fragment style") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "heading",
				headingLevel = "h2",
				textColor = "success");
		}

		task ("Assert the fragment styles are shown in view mode") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertVisible(locator1 = "//div[contains(@class,'text-center')][//h2[contains(@class,'component-heading')]]");

			AssertCssValue(
				locator1 = "//div[contains(@class,'text-center')][//h2[contains(@class,'component-heading')]]",
				locator2 = "color",
				value1 = "rgba(40, 125, 60, 1)");
		}
	}

	@description = "Delete a page template collection."
	@priority = "5"
	test DeleteCollection {
		property portal.acceptance = "true";

		task ("Delete the page template collection") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Collection Name");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			PageTemplatesAdmin.deletePageTemplateSet(setName = "Collection Name");
		}

		task ("Assert the collection was deleted") {
			PageTemplatesAdmin.viewPageTemplateSetNotPresent(setName = "Collection Name");
		}
	}

	@description = "Delete a page template."
	@priority = "5"
	test DeletePageTemplate {
		property portal.acceptance = "true";

		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");
		}

		task ("Delete the content page template") {
			PageTemplatesAdmin.deletePageTemplate(pageTemplateName = "Page Template Name");
		}

		task ("Assert the content page template was deleted") {
			PageTemplatesAdmin.viewPageTemplateNotPresent(pageTemplateName = "Page Template Name");
		}
	}

	@description = "Rename a page template collection."
	@priority = "4"
	test RenameCollection {
		task ("Add a page template collection") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				description = "Collection Description Original",
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Collection Name Original");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");
		}

		task ("Rename the collection") {
			Collection.renameCollection(
				collectionDescription = "Collection Description New",
				collectionName = "Collection Name Original",
				collectionNameEdit = "Collection Name New");
		}

		task ("Assert the collection was renamed") {
			Collection.viewPresent(collectionName = "Collection Name New");
		}
	}

	@description = "Rename a page template."
	@priority = "4"
	test RenamePageTemplate {
		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");
		}

		task ("Rename the content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.renamePageTemplate(
				newPageTemplateName = "Page Template Name New",
				pageTemplateName = "Page Template Name");
		}

		task ("Assert the content page template was renamed") {
			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Page Template Name New");
		}
	}

	@description = "An unpublished fragment should not show up in the fragments sidebar."
	@priority = "4"
	test ViewDraftFragmentDoesNotDisplayInSidebar {
		task ("Add a fragment without publishing it") {
			JSONFragment.addFragmentCollection(
				description = "Collection Description",
				groupName = "Test Site Name",
				name = "New Collection");

			JSONFragment.addSection(
				collectionName = "New Collection",
				groupName = "Test Site Name",
				name = "Fragment Name");
		}

		task ("Assert the unpublished fragment does not appear in the sidebar when editing a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");

			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.viewCollectionNotPresent(collectionName = "New Collection");
		}
	}

}