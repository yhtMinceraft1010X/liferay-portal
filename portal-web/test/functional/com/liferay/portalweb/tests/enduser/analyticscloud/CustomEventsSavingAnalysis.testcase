@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a Web Content Display to page and display the custom event") {
			ACCustomEvents.createWCWithCustomEventAndAddToPage();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: LRAC-6280 | Automation ID: LRAC-10563 | Test Summary: Search for analysis report"
	@priority = "3"
	test AnalysisReportListSearchable {
		var eventAnalysisNameList = "Save Analysis 1,Save Analysis 2";
		var defaultEventName = "webContentViewed";

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		for (var eventAnalysisName : list "${eventAnalysisNameList}") {
			task ("Add the event to analysis") {
				ACEventAnalysis.addEvent(customEventName = "${defaultEventName}");
			}

			task ("Name the report") {
				ACUtils.setItemName(itemName = "${eventAnalysisName}");
			}

			task ("Check the analysis result appears") {
				ACTimeFilter.clickTimeFilterButton();

				ACTimeFilter.setLast24Hours();

				ACEventAnalysis.viewAnalysisInformation(informationValueList = "${defaultEventName},1");
			}

			task ("Save the newly created analysis") {
				ACUtils.saveButton();
			}
		}

		task ("Search for the name of the analysis and check if it is present in the list") {
			for (var eventAnalysisName : list "${eventAnalysisNameList}") {
				ACUtils.searchBar(searchItem = "${eventAnalysisName}");

				ACUtils.viewPartialNameList(nameList = "${eventAnalysisName}");
			}
		}

		task ("Search for an analysis name that does not exist and check that it is not present in the list") {
			ACUtils.searchBar(searchItem = "ac dxp");

			ACUtils.viewNameListIsNotPresent(nameList = "ac dxp");
		}
	}

	@description = "Feature ID: LRAC-6280 | Automation ID: LRAC-10557 | Test Summary: Change data type with event already in use"
	@priority = "4"
	test CanChangeAttributeTypeInUseWithoutAffectingExistingAnalysisReports {
		var attributeNameList = "temp,category,duration";
		var attributeNameChangeList = "temp,duration";
		var filterName = "temp";
		var newDataTypeList = "Date,String";
		var oldDataTypeList = "Number,Duration";
		var list1 = ListUtil.newListFromString("${attributeNameChangeList}");
		var list2 = ListUtil.newListFromString("${newDataTypeList}");
		var list3 = ListUtil.newListFromString("${oldDataTypeList}");
		var size = ListUtil.size("${list1}");
		var i = "0";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis by the all tab") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeNameList}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "10",
				optionValue = "is greater than");
		}

		task ("Name the report") {
			ACUtils.setItemName(itemName = "Save Analysis");
		}

		task ("Check the analysis result appears") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACEventAnalysis.viewAnalysisInformation(informationValueList = "10 - 19,wetsuit,01:00:00 - 01:00:59,1");
		}

		task ("Save the newly created analysis") {
			ACUtils.saveButton();
		}

		task ("Assert the analysis is saved and show up on event analysis list") {
			ACUtils.viewNameList(nameList = "Save Analysis");
		}

		task ("Navigation to attributes tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEventAttributes();

			ACNavigation.openItem(itemName = "Attributes");
		}

		while ("${i}" != "${size}") {
			var attributeName = ListUtil.get("${list1}", "${i}");
			var newDataType = ListUtil.get("${list2}", "${i}");

			task ("Edit the new attribute") {
				ACUtils.searchBar(searchItem = "${attributeName}");

				ACNavigation.openItem(itemName = "${attributeName}");

				ACUtils.clickAnyButton(button = "Edit");
			}

			task ("Change the type of the attribute") {
				ACCustomEvents.changeAttributeDataType(newDataType = "${newDataType}");
			}

			task ("Back to Event Attributes and Navigation to attributes tab") {
				ACNavigation.backNavigation(pageName = "Event Attributes");

				ACNavigation.openItem(itemName = "Attributes");
			}

			task ("Check if the type has been changed") {
				ACUtils.searchBar(searchItem = "${attributeName}");

				ACCustomEvents.viewDataTypeList(
					attributeName = "${attributeName}",
					typeValue = "${newDataType}");
			}

			var i = ${i} + 1;
			var i = StringUtil.valueOf("${i}");
		}

		task ("Go to event analysis and click on newly created analysis") {
			ACNavigation.exitSettings();

			ACNavigation.goToEventAnalysis();

			ACNavigation.openItem(itemName = "Save Analysis");
		}

		task ("Check that the analysis dashboard contains the event,attribute and filter") {
			ACEventAnalysis.viewAnalysisDashboard(
				attributeNameList = "${attributeNameList}",
				eventName = "${customEventName}",
				filterNameList = "${filterName}");
		}

		task ("Check the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "10 - 19,wetsuit,01:00:00 - 01:00:59,1");
		}

		task ("Check that the attributes used have not had the attribute type changed") {
			var size = ListUtil.size("${list1}");
			var i = "0";

			while ("${i}" != "${size}") {
				var attributeName = ListUtil.get("${list1}", "${i}");
				var oldDataType = ListUtil.get("${list3}", "${i}");
				var oldDataType = StringUtil.upperCase("${oldDataType}");

				Click(
					key_attributeName = "${attributeName}",
					locator1 = "ACEventAnalysis#VIEW_DASHBOARD_INFORMATION");

				AssertTextEquals(
					key_attributeName = "${attributeName}",
					locator1 = "ACEventAnalysis#EDITOR_LABEL",
					value1 = "${oldDataType}");

				var i = ${i} + 1;
				var i = StringUtil.valueOf("${i}");
			}
		}
	}

	@description = "Feature ID: LRAC-6280 | Automation ID: LRAC-10558 | Test Summary: Viewing newly created analysis report"
	@priority = "5"
	test CanCreateAnalysisReport {
		var attributeName = "category";
		var filterName = "like";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis by the all tab") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				optionValue = "True");
		}

		task ("Name the report") {
			ACUtils.setItemName(itemName = "Save Analysis");
		}

		task ("Check the analysis result appears") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACEventAnalysis.viewAnalysisInformation(informationValueList = "wetsuit,1");
		}

		task ("Save the newly created analysis") {
			ACUtils.saveButton();
		}

		task ("Assert the analysis is saved and show up on event analysis list") {
			ACUtils.viewNameList(nameList = "Save Analysis");
		}

		task ("Click on newly created analysis") {
			ACNavigation.openItem(itemName = "Save Analysis");
		}

		task ("Check that the analysis dashboard contains the event,attribute and filter") {
			ACEventAnalysis.viewAnalysisDashboard(
				attributeNameList = "${attributeName}",
				eventName = "${customEventName}",
				filterNameList = "${filterName}");
		}

		task ("Check the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "wetsuit,1");
		}
	}

	@description = "Feature ID: LRAC-6280 | Automation ID: LRAC-10567 | Test Summary: Special character on report name"
	@priority = "2"
	test CanCreateAnalysisReportWithSpecialCharacterOnName {
		var eventAnalysisName = "@#$%*&_>Save+Analysis<!?";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Name the report") {
			ACUtils.setItemName(itemName = "${eventAnalysisName}");
		}

		task ("Check the analysis result appears") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACEventAnalysis.viewAnalysisInformation(informationValueList = "${customEventName},1");
		}

		task ("Save the newly created analysis") {
			ACUtils.saveButton();
		}

		task ("Assert the analysis is saved and show up on event analysis list") {
			ACUtils.viewNameList(nameList = "${eventAnalysisName}");
		}

		task ("Click on newly created analysis") {
			ACNavigation.openItem(itemName = "${eventAnalysisName}");
		}

		task ("Check that the analysis dashboard contains the event") {
			ACEventAnalysis.viewAnalysisDashboard(eventName = "${customEventName}");
		}

		task ("Check the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "${customEventName},1");
		}
	}

	@description = "Feature ID: LRAC-6280 | Automation ID: LRAC-10560 | Test Summary: Delete an analysis report and Bulk delete analysis reports"
	@priority = "5"
	test CanDeleteAnalysisReport {
		var eventAnalysisNameList = "Save Analysis 1,Save Analysis 2,Save Analysis 3";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		for (var eventAnalysisName : list "${eventAnalysisNameList}") {
			task ("Add the custom event to analysis by the all tab") {
				ACEventAnalysis.addEvent(customEventName = "${customEventName}");
			}

			task ("Name the report") {
				ACUtils.setItemName(itemName = "${eventAnalysisName}");
			}

			task ("Check the analysis result appears") {
				ACTimeFilter.clickTimeFilterButton();

				ACTimeFilter.setLast24Hours();

				ACEventAnalysis.viewAnalysisInformation(informationValueList = "${customEventName},1");
			}

			task ("Save the newly created analysis") {
				ACUtils.saveButton();
			}

			task ("Assert the analysis is saved and show up on event analysis list") {
				ACUtils.viewNameList(nameList = "${eventAnalysisName}");
			}
		}

		task ("Click on newly created analysis and get the URL link") {
			ACNavigation.openItem(itemName = "Save Analysis 1");

			var currentURL = Navigator.getCurrentURL();

			ACNavigation.goToEventAnalysis();
		}

		task ("Delete one of the analysis from the list") {
			ACUtils.deleteItemFromList(itemName = "Save Analysis 1");
		}

		task ("Assert analysis not present in event analysis list") {
			ACUtils.viewNameListIsNotPresent(nameList = "Save Analysis 1");
		}

		task ("Navigate to the URL of the deleted analysis") {
			Navigator.openSpecificURL(url = "${currentURL}");
		}

		task ("Check that the deleted analysis cannot be accessed via the URL") {
			ACUtils.viewGenericText(textValueList = "404,Analysis Not Found,The analysis you are looking for does not exist.");
		}

		task ("Navigate to the event analysis list") {
			ACUtils.clickAnyButton(button = "Go to Event Analysis");
		}

		task ("Delete all analysis from the list") {
			ACEventAnalysis.deleteAllEventAnalysis();
		}

		task ("Assert analysis not present in event analysis list") {
			ACUtils.viewNameListIsNotPresent(nameList = "Save Analysis 2,Save Analysis 3");
		}
	}

	@description = "Feature ID: LRAC-6280 | Automation ID: LRAC-10559 | Test Summary: Edit an analysis report"
	@priority = "5"
	test CanEditAnalysisReport {
		var attributeName1 = "price";
		var attributeName2 = "like";
		var filterName = "birthdate";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis by the all tab") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName1}");
		}

		task ("Name the report") {
			ACUtils.setItemName(itemName = "Save Analysis");
		}

		task ("Check the analysis result appears") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACEventAnalysis.viewAnalysisInformation(informationValueList = "260 - 269,1");
		}

		task ("Save the newly created analysis") {
			ACUtils.saveButton();
		}

		task ("Click on newly created analysis") {
			ACNavigation.openItem(itemName = "Save Analysis");
		}

		task ("Edit the analysis name") {
			ACUtils.setItemName(itemName = "Edited Analysis");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName2}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				inputValue = "25",
				month = "November",
				optionValue = "is",
				year = "2021");
		}

		task ("Check the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "260 - 269,true,1");
		}

		task ("Save the newly created analysis") {
			ACUtils.saveButton();
		}

		task ("Click on newly created analysis") {
			ACNavigation.openItem(itemName = "Edited Analysis");
		}

		task ("Check that the analysis dashboard contains the event,attribute and filter") {
			ACEventAnalysis.viewAnalysisDashboard(
				attributeNameList = "${attributeName1},${attributeName2}",
				eventName = "${customEventName}",
				filterNameList = "${filterName}");
		}

		task ("Check the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "260 - 269,true,1");
		}
	}

	@description = "Feature ID: LRAC-6280 | Automation ID: LRAC-10561 | Test Summary: Edit report name to the same name as existing report"
	@priority = "4"
	test CannotSaveAnalysisReportWithExistingName {
		var defaultEventName = "webContentViewed";
		var eventAnalysisNameList = "Save Analysis 1,Save Analysis 2";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		for (var eventName : list "${customEventName},${defaultEventName}") {
			task ("Add the custom event to analysis by the all tab") {
				ACEventAnalysis.addEvent(customEventName = "${eventName}");
			}

			task ("Name the report") {
				ACUtils.setItemName(itemName = "Save Analysis 1");
			}

			task ("Check the analysis result appears") {
				ACTimeFilter.clickTimeFilterButton();

				ACTimeFilter.setLast24Hours();

				ACEventAnalysis.viewAnalysisInformation(informationValueList = "${eventName},1");
			}

			task ("Save the newly created analysis") {
				ACUtils.saveButton();
			}
		}

		task ("Assert that the warning pop-up appears") {
			Alert.viewWarningSpecific(warningMessage = "Warning:This analysis name is currently in use. Please try a different one.");
		}

		task ("Name the report and save") {
			ACUtils.setItemName(itemName = "Save Analysis 2");

			ACUtils.saveButton();
		}

		task ("Assert the analysis is saved and show up on event analysis list") {
			ACUtils.viewNameList(nameList = "${eventAnalysisNameList}");
		}

		var list1 = ListUtil.newListFromString("${eventAnalysisNameList}");
		var list2 = ListUtil.newListFromString("${customEventName},${defaultEventName}");
		var size = ListUtil.size("${list1}");
		var i = "0";

		while ("${i}" != "${size}") {
			var eventAnalysisName = ListUtil.get("${list1}", "${i}");
			var eventName = ListUtil.get("${list2}", "${i}");

			task ("Click on newly created analysis") {
				ACNavigation.openItem(itemName = "${eventAnalysisName}");
			}

			task ("Check that the analysis dashboard contains the event,attribute and filter") {
				ACEventAnalysis.viewAnalysisDashboard(eventName = "${eventName}");
			}

			task ("Check the analysis result appears") {
				ACEventAnalysis.viewAnalysisInformation(informationValueList = "${eventName},1");
			}

			task ("Go to event analysis") {
				ACNavigation.goToEventAnalysis();
			}

			var i = ${i} + 1;
			var i = StringUtil.valueOf("${i}");
		}
	}

	@description = "Feature ID: LRAC-6280 | Automation ID: LRAC-10562 | Test Summary: Pagination for analysis report"
	@priority = "4"
	test CanPaginationAnalysisReportList {
		var eventAnalysisNameList1 = "Save Analysis 0,Save Analysis 1,Save Analysis 2,Save Analysis 3,Save Analysis 4";
		var eventAnalysisNameList2 = "Save Analysis 5,Save Analysis 6,Save Analysis 7,Save Analysis 8,Save Analysis 9";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		for (var eventAnalysisName : list "${eventAnalysisNameList1},${eventAnalysisNameList2}") {
			task ("Add the custom event to analysis by the all tab") {
				ACEventAnalysis.addEvent(customEventName = "${customEventName}");
			}

			task ("Name the report") {
				ACUtils.setItemName(itemName = "${eventAnalysisName}");
			}

			task ("Check the analysis result appears") {
				ACTimeFilter.clickTimeFilterButton();

				ACTimeFilter.setLast24Hours();

				ACEventAnalysis.viewAnalysisInformation(informationValueList = "${customEventName},1");
			}

			task ("Save the newly created analysis") {
				ACUtils.saveButton();
			}

			task ("Assert the analysis is saved and show up on event analysis list") {
				ACUtils.viewNameList(nameList = "${eventAnalysisName}");
			}
		}

		task ("Check pagination for "20" item filter") {
			ACUtils.viewResultsMessage(results = "Showing 1 to 10 of 10 entries.");

			ACUtils.viewResultsPages(pageNumber = "1");
		}

		task ("Change the pagination to "5" and Check pagination for "5" item filter") {
			ACUtils.changePagination(itemsPerPage = "5");

			ACUtils.viewResultsMessage(results = "Showing 1 to 5 of 10 entries.");

			ACUtils.viewResultsPages(pageNumber = "1");

			ACUtils.viewResultsPages(pageNumber = "2");
		}

		task ("Assert the analysis is saved and show up on event analysis list") {
			for (var eventAnalysisName : list "${eventAnalysisNameList1}") {
				ACUtils.viewNameList(nameList = "${eventAnalysisName}");
			}
		}

		task ("Navigate to the next page and check the pagination") {
			ACUtils.checkPreviousNextButton(nextButton = "true");

			ACUtils.viewResultsMessage(results = "Showing 6 to 10 of 10 entries.");
		}

		task ("Assert the analysis is saved and show up on event analysis list") {
			for (var eventAnalysisName : list "${eventAnalysisNameList2}") {
				ACUtils.viewNameList(nameList = "${eventAnalysisName}");
			}
		}
	}

	@description = "Feature ID: LRAC-6280 | Automation ID: LRAC-10564 | Test Summary: Sorting analysis report by name and order of creation"
	@priority = "3"
	test CanSortAnalysisReport {
		var eventAnalysisNameList = "Save Analysis 1,Save Analysis 2,Save Analysis 3";
		var defaultEventName = "webContentViewed";
		var list1 = ListUtil.newListFromString("${eventAnalysisNameList}");
		var list2 = ListUtil.newListFromString("3,2,1");
		var size = ListUtil.size("${list1}");
		var i = "0";

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		for (var eventAnalysisName : list "${eventAnalysisNameList}") {
			task ("Add the event to analysis") {
				ACEventAnalysis.addEvent(customEventName = "${defaultEventName}");
			}

			task ("Name the report") {
				ACUtils.setItemName(itemName = "${eventAnalysisName}");
			}

			task ("Check the analysis result appears") {
				ACTimeFilter.clickTimeFilterButton();

				ACTimeFilter.setLast24Hours();

				ACEventAnalysis.viewAnalysisInformation(informationValueList = "${defaultEventName},1");
			}

			task ("Save the newly created analysis") {
				ACUtils.saveButton();
			}
		}

		task ("Order the list by Name and check if the positions are correct") {
			ACUtils.orderAnyTable(columnName = "Name");

			while ("${i}" != "${size}") {
				var eventAnalysisName = ListUtil.get("${list1}", "${i}");
				var position = ListUtil.get("${list2}", "${i}");

				ACUtils.viewNameListInOrder(
					index = "${position}",
					name = "${eventAnalysisName}");

				var i = ${i} + 1;
				var i = StringUtil.valueOf("${i}");
			}
		}

		task ("Order the list by Name and check if the positions are correct") {
			ACUtils.orderAnyTable(columnName = "Name");

			for (var n : list "1,2,3") {
				ACUtils.viewNameListInOrder(
					index = "${n}",
					name = "Save Analysis ${n}");
			}
		}

		task ("Order the list by Created by and check if the positions are correct") {
			ACUtils.orderAnyTable(columnName = "Created by");

			for (var n : list "1,2,3") {
				ACUtils.viewNameListInOrder(
					index = "${n}",
					name = "Save Analysis ${n}");
			}
		}
	}

	@description = "Feature ID: LRAC-6280 | Automation ID: LRAC-10566 | Test Summary: Empty state of analysis report"
	@priority = "2"
	test CheckEmptyStateOfAnalysisReport {
		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Check that the empty page message and check the hyperlink taking user to event analysis document") {
			ACUtils.viewGenericText(textValueList = "There are no analysis found.,Create a analysis to get started.,Access our documentation to learn more.");

			ACUtils.clickGenericHyperlink(hyperlinkText = "Access our documentation to learn more.");

			task ("Switch to the documentation tab") {
				SelectWindow(locator1 = "title=Events Analysis — Liferay Learn");
			}

			ACUtils.viewGenericText(textValueList = "Documentation,Events Analysis");
		}
	}

	@description = "Feature ID: LRAC-6280 | Automation ID: LRAC-10569 | Test Summary: Viewing the newly created analysis report with member permission"
	@priority = "4"
	test UserWithMemberPermissionCanViewAndCreateAnalysisReport {
		var attributeName = "category";
		var filterName = "like";
		var defaultEventName = "webContentViewed";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis by the all tab") {
			ACEventAnalysis.addEvent(customEventName = "${customEventName}");
		}

		task ("Add the breakdown to analysis") {
			ACEventAnalysis.addBreakdown(attributeNameList = "${attributeName}");
		}

		task ("Add the filter to analysis") {
			ACEventAnalysis.addFilter(
				filterName = "${filterName}",
				optionValue = "True");
		}

		task ("Name the report") {
			ACUtils.setItemName(itemName = "Save Analysis 1");
		}

		task ("Check the analysis result appears") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACEventAnalysis.viewAnalysisInformation(informationValueList = "wetsuit,1");
		}

		task ("Save the newly created analysis") {
			ACUtils.saveButton();
		}

		task ("Assert the analysis is saved and show up on event analysis list") {
			ACUtils.viewNameList(nameList = "Save Analysis 1");
		}

		task ("SingOut and Login as member") {
			ACWorkspace.signOut();

			ACLogin.loginAs(
				emailAddress = "corbin.murakami@faro.io",
				password = "test");

			ACWorkspace.openWorkspace();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Add the custom event to analysis") {
			ACEventAnalysis.addEvent(customEventName = "${defaultEventName}");
		}

		task ("Name the report") {
			ACUtils.setItemName(itemName = "Save Analysis 2");
		}

		task ("Check the analysis result appears") {
			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();

			ACEventAnalysis.viewAnalysisInformation(informationValueList = "${defaultEventName},1");
		}

		task ("Save the newly created analysis") {
			ACUtils.saveButton();
		}

		task ("Open the analysis previously created by a different user") {
			ACNavigation.openItem(itemName = "Save Analysis 1");
		}

		task ("Check that the analysis dashboard contains the event,attribute and filter") {
			ACEventAnalysis.viewAnalysisDashboard(
				attributeNameList = "${attributeName}",
				eventName = "${customEventName}",
				filterNameList = "${filterName}");
		}

		task ("Check the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "wetsuit,1");
		}

		task ("Go to event analysis") {
			ACNavigation.goToEventAnalysis();
		}

		task ("Click on newly created analysis") {
			ACNavigation.openItem(itemName = "Save Analysis 2");
		}

		task ("Check that the analysis dashboard contains the event") {
			ACEventAnalysis.viewAnalysisDashboard(eventName = "${defaultEventName}");
		}

		task ("Check the analysis result appears") {
			ACEventAnalysis.viewAnalysisInformation(informationValueList = "${defaultEventName},1");
		}
	}

}