@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Localization";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add two sites") {
			for (var i : list "1,2") {
				JSONGroup.addGroup(groupName = "Test Site Name ${i}");
			}
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			for (var i : list "1,2") {
				JSONGroup.deleteGroupByName(groupName = "Test Site Name ${i}");
			}

			JSONUser.tearDownNonAdminUsers();
		}
	}

	@description = "Add site name translation in site settings."
	@priority = "4"
	test AddSiteNameTranslations {
		property testray.component.names = "Localization,Site Administration";

		task ("Add two localized site names") {
			Site.openSiteSettingsAdmin(siteURLKey = "test-site-name-1");

			Site.addLocalizedName(
				localeList = "es-ES,zh-CN",
				localizedNameList = "Nombre del Sitio,站点名称");
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name 1",
				layoutName = "Test Page Name");
		}

		task ("Add a Language Selector widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name 1",
				layoutName = "Test Page Name",
				widgetName = "Language Selector");
		}

		task ("View site name translations are shown") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name 1");

			Page.viewSiteNameTranslationsPG(
				localeList = "en-US,es-ES,zh-CN",
				siteNameList = "Test Site Name 1,Nombre del Sitio,站点名称",
				textIconList = "english-United States,español-España,中文-中国");

			LanguagePortlet.tearDownLanguagePG();
		}
	}

	@description = "Can not remove the site default language in instance settings."
	@priority = "5"
	test CannotRemoveSiteDefaultLanguageInInstanceSettings {
		property portal.acceptance = "true";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name 1",
				layoutName = "Test Page Name");
		}

		task ("Configure site languages") {
			Site.openSiteSettingsAdmin(siteURLKey = "test-site-name-1");

			Site.configureCurrentLanguagesCP(
				currentSiteLanguages = "English (United States),German (Germany),Spanish (Spain)",
				defaultSiteLanguage = "Spanish (Spain)",
				displaySettings = "Display Settings");
		}

		task ("View cannot remove site default language in instance settings") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Localization",
				configurationName = "Language",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.configureCurrentLanguagesCP(
				currentPortalLanguages = "Arabic (Saudi Arabia),Czech (Czech Republic),French (France)",
				errorMessage = "Error: You cannot remove a language that is the current default language.",
				failExpected = "true");
		}
	}

	@description = "The user can configure languages of a site created from a site template."
	@priority = "5"
	test ConfigureLanguagesOfSiteBasedOnSiteTemplate {
		property portal.acceptance = "true";
		property testray.component.names = "Site and Page Templates";

		task ("Add a site template") {
			SiteTemplates.addCP(
				siteTemplateActive = "Yes",
				siteTemplateName = "Site Template Name");
		}

		task ("View workflow is not shown in site template") {
			SiteTemplatesNavigator.openSiteTemplatesAdmin();

			SiteTemplates.viewNoSiteOrWorkflowLinksCP();
		}

		task ("Add a site based in site template") {
			Site.openSitesAdmin();

			Site.addCP(
				portletNames = "Site Settings,Social Activities,Workflow Configuration",
				siteName = "Test Site Name",
				siteTemplateActive = "Yes",
				siteTemplateName = "Site Template Name",
				siteType = "Site Template",
				uncheckPropagation = "true");
		}

		task ("Define English, Germand and Spanish as current site language") {
			Site.openSiteSettingsAdmin(siteURLKey = "test-site-name");

			Site.configureCurrentLanguagesCP(
				currentSiteLanguages = "English (United States),German (Germany),Spanish (Spain)",
				defaultSiteLanguage = "Spanish (Spain)",
				displaySettings = "Display Settings");
		}

		task ("View site is cloned from site template") {
			Site.openSiteSettingsAdmin(siteURLKey = "test-site-name");

			Site.viewSiteClonedFromSiteTemplateCP(
				clonedFromTemplate = "true",
				siteTemplateName = "Site Template Name");
		}
	}

	@description = "The user can configure the site default language."
	@priority = "5"
	test ConfigureSiteDefaultLanguage {
		property portal.acceptance = "true";
		property testray.component.names = "Site Localization";

		task ("View default site language in Portal Settings") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Localization",
				configurationName = "Language",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.viewDefaultLanguageCP(defaultPortalLanguage = "English (United States)");
		}

		task ("Define Portuguese and Spanish as current site languages") {
			Site.openSiteSettingsAdmin(siteURLKey = "test-site-name-1");

			Site.configureCurrentLanguagesCP(
				currentSiteLanguages = "Portuguese (Brazil),Spanish (Spain)",
				defaultSiteLanguage = "Spanish (Spain)",
				displaySettings = "Display Settings");
		}

		task ("Add a widget page") {
			PagesAdmin.addPage(pageName = "Test Page Name");
		}

		task ("View current languages are shown in Pages admin") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name 1");

			ProductMenu.gotoPortlet(
				category = "Generador del sitio",
				portlet = "Páginas del sitio web");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configurar",
				pageName = "Test Page Name");

			PagesAdmin.viewAvailableLanguages(
				availableLanguageList = "es-ES,pt-BR",
				fieldName = "Nombre",
				unavailableLanguageList = "en-US");
		}
	}

	@description = "A new user can add an organization with localized country name."
	@priority = "3"
	test LocalizeCountryName {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property testray.component.names = "Users and Organizations";

		task ("Add a new user") {
			JSONUser.addUser(
				preferredLocale = "es_ES",
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign the administrator role to new user") {
			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = "userea@liferay.com");
		}

		task ("Add an organization with localized country") {
			ApplicationsMenu.gotoPortlet(
				category = "Usuarios",
				panel = "Panel de control",
				portlet = "Usuarios y organizaciones");

			Organization.addWithLocalizedCountryCP(
				countryName = "Estados Unidos",
				localizedOption = "Organización",
				navItem = "Organizaciones",
				orgName = "Organization Name",
				saveButton = "Guardar");
		}

		task ("Sign out and sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = "userea@liferay.com");
		}

		task ("View localized country organization is shown") {
			ApplicationsMenu.gotoPortlet(
				category = "Usuarios",
				panel = "Panel de control",
				portlet = "Usuarios y organizaciones");

			Organization.viewLocalizedCountryCP(
				countryName = "Estados Unidos",
				editLocalized = "Editar",
				navItem = "Organizaciones",
				orgName = "Organization Name");
		}

		task ("Delete organization") {
			JSONOrganization.deleteOrganizationByName(organizationName = "Organization Name");
		}
	}

	@description = "The locale won't be prepended when it matches with user's preferred locale."
	@priority = "3"
	test NoLocalePrependedWhenItMatchUserPreferredLocale {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Get portal URL") {
			var portalURL = PropsUtil.get("portal.url");
		}

		task ("Add a widget page to each site") {
			for (var i : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name ${i}",
					layoutName = "Test Page Name");
			}
		}

		task ("Configure default custom language for each site") {
			var i = "1";

			for (var language : list "English (United States),Spanish (Spain)") {
				Site.openSiteSettingsAdmin(siteURLKey = "test-site-name-${i}");

				Site.configureCurrentLanguagesCP(defaultSiteLanguage = "${language}");

				var i = ${i} + 1;
			}
		}

		task ("Add a new user") {
			JSONUser.addUser(
				preferredLocale = "es_ES",
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign the new user to sites") {
			for (var i : list "1,2") {
				JSONUser.addUserToSite(
					groupName = "Test Site Name ${i}",
					userEmailAddress = "userea@liferay.com");
			}
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = "userea@liferay.com");
		}

		task ("View locale is not shown in URL when it matches with user's preferred locale") {
			for (var i : list "1,2") {
				Page.openURLLocale(localizationPageURL = "${portalURL}/web/test-site-name-${i}");

				Page.viewURLLocale(localizationPageURL = "${portalURL}/web/test-site-name-${i}");
			}
		}

		task ("Sign in as Test Test") {
			User.logoutAndLoginPG(userLoginEmailAddress = "test@liferay.com");
		}

		task ("View locale is shown in URL when it doesn't match with user's preferred locale") {
			Page.openURLLocale(localizationPageURL = "${portalURL}/es/web/test-site-name-2");

			Page.viewURLLocale(
				localizationOption = "Display the page in English (United States).",
				localizationPageURL = "${portalURL}/web/test-site-name-2/");
		}
	}

	@description = "This is a use case for LPS-59345. The user must be redirected when the friendly url does not match."
	@priority = "4"
	test RedirectLocalizedFriendlyURL {
		task ("Get portal url") {
			var portalURL = PropsUtil.get("portal.url");
		}

		task ("Define English and Hungarian as current site languages") {
			Site.openSiteSettingsAdmin(siteURLKey = "test-site-name-1");

			Site.configureCurrentLanguagesCP(
				currentSiteLanguages = "English (United States),Hungarian (Hungary)",
				defaultSiteLanguage = "English (United States)");
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name 1",
				layoutName = "Test Page Name");
		}

		task ("Add new friendly url") {
			PagesAdmin.openPagesAdmin(siteURLKey = "Test Site Name 1");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Test Page Name");

			PagesAdmin.addLocalizedFriendlyURL(
				friendlyURLLocalizedList = "hu-HU,en-US",
				localizedFriendlyURLList = "/friendlyhu,/friendlyen",
				localizedNameList = "-,-");
		}

		task ("View non logged user will be redirected to friendly url") {
			User.logoutPG();

			Navigator.openSpecificURL(url = "${portalURL}/hu/web/test-site-name-1/friendlyen");

			Alert.closePortalLocalizationWarning();

			AssertLocation(value1 = "${portalURL}/hu/web/test-site-name-1/friendlyhu");
		}
	}

	@description = "An alert localization message will be shown for user with different language from the site."
	@priority = "4"
	test ViewAvailableSiteLocaleAlternatives {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Add a new user") {
			JSONUser.addUser(
				preferredLocale = "es_ES",
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Define English as current site languages") {
			Site.openSiteSettingsAdmin(siteURLKey = "test-site-name-1");

			Site.configureCurrentLanguagesCP(
				currentSiteLanguages = "English (United States)",
				defaultSiteLanguage = "English (United States)",
				displaySettings = "Display Settings");
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name 1",
				layoutName = "Test Page Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = "userea@liferay.com");
		}

		task ("View alert localization message is shown") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name 1");

			Alert.viewLocalizationMessage(
				preferredLanguageLocalizationMessage = "Set English (United States) as your preferred language.",
				translationLanguageLocalizationMessage = "Esta página se muestra en inglés (Estados Unidos).");
		}
	}

	@description = "View page is shown when access to unavailable locale if set locale.use.default.if.not.available to true."
	@priority = "4"
	test ViewPageShownWhenAccessToUnavailableLocaleIfSetNotAvailableToTrue {
		property custom.properties = "locale.use.default.if.not.available=true";

		task ("Get portal url") {
			var portalURL = PropsUtil.get("portal.url");
		}

		task ("Define English and Hungarian as current language for both sites") {
			for (var i : list "1,2") {
				Site.openSiteSettingsAdmin(siteURLKey = "test-site-name-${i}");

				Site.configureCurrentLanguagesCP(
					currentSiteLanguages = "English (United States),Hungarian (Hungary)",
					defaultSiteLanguage = "English (United States)");
			}
		}

		task ("Add a widget page to each site") {
			for (var i : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name ${i}",
					layoutName = "Test Page Name ${i}");
			}
		}

		task ("View pages are shown in fr-FR to guest") {
			User.logoutPG();

			Navigator.openSpecificURL(url = "${portalURL}/fr/web/test-site-name-2/test-page-name-2");

			AssertLocation(value1 = "${portalURL}/fr/web/test-site-name-2/test-page-name-2");

			AssertTextNotPresent(value1 = "The requested resource could not be found.");

			Page.viewSpecificPG(pageNameList = "Test Page Name 2");

			Navigator.openSpecificURL(url = "${portalURL}/fr/web/test-site-name-1");

			AssertTextNotPresent(value1 = "The requested resource could not be found.");

			Page.viewSpecificPG(pageNameList = "Test Page Name 1");
		}

		task ("Sign in as Test Test") {
			User.firstLoginUI(
				password = "test",
				specificURL = "${portalURL}/fr/web/test-site-name-1",
				userEmailAddress = "test@liferay.com");

			AssertLocation(value1 = "${portalURL}/web/test-site-name-1");
		}

		task ("Add a virtual host for the second site") {
			Site.openSiteSettingsAdmin(siteURLKey = "test-site-name-2");

			Site.addVirtualHostsURLCP(
				pageVirtualHosts = "true",
				pageVirtualHostURL = "www.able.com");
		}

		task ("View page is shown in fr-FR via virtual host") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080/fr/");

			Site.viewVirtualHostsURLPG(
				pageName = "Test Page Name 2",
				siteName = "Test Site Name 2",
				sitePageURL = "http://www.able.com:8080/fr/");

			AssertTextNotPresent(value1 = "The requested resource could not be found.");

			Page.viewSpecificPG(pageNameList = "Test Page Name 2");
		}
	}

	@description = "View portlets interact with localization."
	@priority = "4"
	test ViewPortletInteractWithLocalization {
		task ("Add a localized site") {
			Site.openSiteSettingsAdmin(siteURLKey = "test-site-name-1");

			Site.addLocalizedName(
				localeList = "es-ES",
				localizedNameList = "Nombre del Sitio 1");
		}

		task ("Add two widget pages") {
			for (var i : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name 1",
					layoutName = "Test Page Name ${i}");
			}
		}

		task ("Add a Language Selector and Web Content Display widget to page") {
			for (var widgetName : list "Language Selector,Web Content Display") {
				JSONLayout.addWidgetToPublicLayout(
					groupName = "Test Site Name 1",
					layoutName = "Test Page Name 1",
					widgetName = "${widgetName}");
			}
		}

		task ("Define Spanish and German as current site languages") {
			Site.openSiteSettingsAdmin(siteURLKey = "test-site-name-1");

			Site.configureCurrentLanguagesCP(
				currentSiteLanguages = "Spanish (Spain),German (Germany)",
				defaultSiteLanguage = "Spanish (Spain)",
				displaySettings = "Display Settings");
		}

		task ("View pages are translated") {
			for (var i : list "1,2") {
				Navigator.gotoSitePage(
					pageName = "Test Page Name ${i}",
					siteName = "Test Site Name 1");

				Alert.closePortalLocalizationWarning();

				ProductMenu.gotoPortlet(
					category = "Generador del sitio",
					portlet = "Páginas del sitio web");

				PagesAdmin.gotoPageEllipsisMenuItem(
					menuItem = "Configurar",
					pageName = "Test Page Name ${i}");

				Navigator.gotoNavTab(navTab = "SEO");

				PortletEntry.viewLocale(locale = "es-ES");
			}
		}

		task ("View current default language in instance settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuración",
				panel = "Panel de control",
				portlet = "Configuración de instancia");

			PortalSettings.viewCurrentDefaultPortalLanguageCP(
				defaultPortalLanguage = "inglés (Estados Unidos)",
				localizationTranslation = "Localización");
		}

		task ("Define Spanish, German and English as current site languages") {
			ApplicationsMenu.gotoSite(site = "Nombre del Sitio 1");

			ProductMenu.gotoPortlet(
				category = "Configuración",
				portlet = "Ajustes del sitio");

			Site.configureCurrentLanguagesCP(
				category = "Localización",
				currentSiteLanguages = "español (España),alemán (Alemania),inglés (Estados Unidos)",
				defaultSiteLanguage = "español (España)",
				displaySettings = "Display Settings",
				localizedLanguageTab = "Idiomas",
				localizedSaveButton = "Guardar",
				localizedSuccessMessage = "Su petición ha terminado con éxito.");
		}

		task ("Add a localized web content via page") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name 1",
				siteName = "Test Site Name 1");

			WebContentDisplayPortlet.addLocalized(
				localizedBasicWebContent = "Contenido web básico",
				portletNameTranslation = "Visor de contenido web",
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("View Web Content is shown via WCD") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("View available languages when editing a Web Content") {
			WebContentDisplayPortletNavigator.gotoEdit(
				menuItem = "Editar contenido web",
				webContentTitle = "Web Content Title");

			WebContent.viewAvailableLanguages(
				availableLanguageList = "de-DE,en-US",
				fieldName = "Título",
				unavailableLanguageList = "ar-SA,ca-ES,zh-CN,nl-NL,fi-FI,fr-FR,hu-HU,ja-JP,pt-BR,sv-SE");
		}

		task ("Define Spanish and German as current site languages") {
			Site.openSiteSettingsAdmin(siteURLKey = "test-site-name-1");

			Site.configureCurrentLanguagesCP(
				category = "Localización",
				currentSiteLanguages = "español (España),alemán (Alemania)",
				defaultSiteLanguage = "español (España)",
				displaySettings = "Display Settings",
				localizedLanguageTab = "Idiomas",
				localizedSaveButton = "Guardar",
				localizedSuccessMessage = "Su petición ha terminado con éxito.");
		}

		task ("Select German via Language Selector widget") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name 1",
				siteName = "Test Site Name 1");

			LanguagePortlet.selectLanguagePG(
				locale = "de-DE",
				textIcon = "deutsch-Deutschland");
		}

		task ("View Web Content is shown via WCD") {
			WebContentDisplayPortlet.viewContent(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "View URLs in different languages when set locale.prepend.friendly.url.style to 0."
	@priority = "3"
	test ViewURLInDifferentLanguagesWhenSetStyle0 {
		property custom.properties = "locale.prepend.friendly.url.style=0";

		task ("Get portal URL") {
			var portalURL = PropsUtil.get("portal.url");
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name 1",
				layoutName = "Test Page Name");
		}

		task ("Add a Language Selector widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name 1",
				layoutName = "Test Page Name",
				widgetName = "Language Selector");
		}

		task ("View site's URL after switch to es-ES via Language Selector") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name 1");

			LanguagePortlet.selectLanguagePG(
				locale = "es_ES",
				textIcon = "español-España");

			AssertLocation(value1 = "${portalURL}/web/test-site-name-1/");
		}

		task ("View site's URL after switch to ja-JP via Language Selector") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name 1");

			LanguagePortlet.selectLanguagePG(
				locale = "ja_JP",
				textIcon = "日本語-日本");

			AssertLocation(value1 = "${portalURL}/web/test-site-name-1/");
		}
	}

	@description = "View URLs in different languages when set locale.prepend.friendly.url.style to 1."
	@priority = "3"
	test ViewURLInDifferentLanguagesWhenSetStyle1 {
		property custom.properties = "locale.prepend.friendly.url.style=1";

		task ("Get portal URL") {
			var portalURL = PropsUtil.get("portal.url");
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name 1",
				layoutName = "Test Page Name");
		}

		task ("Add a Language Selector widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name 1",
				layoutName = "Test Page Name",
				widgetName = "Language Selector");
		}

		task ("View site's URL after switch to es-ES via Language Selector") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name 1");

			LanguagePortlet.selectLanguagePG(
				locale = "es_ES",
				textIcon = "español-España");

			AssertLocation(value1 = "${portalURL}/es/web/test-site-name-1/");
		}

		task ("View site's URL after switch to ja-JP via Language Selector") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name 1");

			LanguagePortlet.selectLanguagePG(
				locale = "ja_JP",
				textIcon = "日本語-日本");

			AssertLocation(value1 = "${portalURL}/ja/web/test-site-name-1/");
		}
	}

	@description = "View URLs in different languages when set locale.prepend.friendly.url.style to 2."
	@priority = "3"
	test ViewURLInDifferentLanguagesWhenSetStyle2 {
		property custom.properties = "locale.prepend.friendly.url.style=2";

		task ("Get portal URL") {
			var portalURL = PropsUtil.get("portal.url");
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name 1",
				layoutName = "Test Page Name");
		}

		task ("Add a Language Selector widget to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name 1",
				layoutName = "Test Page Name",
				widgetName = "Language Selector");
		}

		task ("View site's URL after switch to es-ES via Language Selector") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name 1");

			LanguagePortlet.selectLanguagePG(
				locale = "es_ES",
				textIcon = "español-España");

			AssertLocation(value1 = "${portalURL}/es/web/test-site-name-1/");
		}

		task ("View site's URL after switch to ja-JP via Language Selector") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name 1");

			LanguagePortlet.selectLanguagePG(
				locale = "ja_JP",
				textIcon = "日本語-日本");

			AssertLocation(value1 = "${portalURL}/ja/web/test-site-name-1/");
		}
	}

}