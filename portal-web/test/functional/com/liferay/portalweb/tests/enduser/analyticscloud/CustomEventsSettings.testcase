@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a Web Content Display to page and display the custom event") {
			ACCustomEvents.createWCWithCustomEventAndAddToPage();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: LRAC-4265 | Automation ID: LRAC-10008 | Test Summary: Sample javascript copy"
	@priority = "5"
	test CanCopySampleJavascript {
		var layoutName = "Custom 2";
		var globalAttributesList = "canonicalUrl,pageTitle,referrer,url";
		var disableAttributesList = "${globalAttributesList},birthdate";
		var attributesList = "category,like";

		task ("Fill fields and create custom event") {
			var customEventName1 = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				attributesName = "category,like,birthdate",
				attributesValue = "wetsuit,true,2021-11-25T14:36:30.685Z",
				customEventName = "${customEventName1}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Access the custom event") {
			ACNavigation.openItem(itemName = "${customEventName1}");
		}

		task ("Copy the sample JS and replace an existing attribute with a new one") {
			var customEventName2 = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.copySampleJavascript(
				attributesList = "${attributesList}",
				disableAttributesList = "${disableAttributesList}",
				newAttributeList = "device",
				newCustomEventName = "${customEventName2}",
				newValueList = "linux",
				oldAttributeList = "category",
				oldCustomEventName = "${customEventName1}",
				oldValueList = "wetsuit");
		}

		task ("Launch DXP and create a new page") {
			ACUtils.launchDXP();

			ACUtils.addPage(layoutName = "${layoutName}");
		}

		task ("Create a web content with the sample JS and put it on the page") {
			ACUtils.createWCAndAddToPage(
				layoutName = "${layoutName}",
				webContentContent = '''<div><button class="mybutton-shop" onclick="buySurfwear()">Buy</button></div> <script> function buySurfwear() { ${sampleJavascript} } </script>''',
				webContentTitle = "Custom Event AC Title 2");
		}

		task ("Click on the button to send the event") {
			ACCustomEvents.createNCustomEvents();
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Access the custom event") {
			ACNavigation.openItem(itemName = "${customEventName2}");
		}

		task ("Check the attributes that the custom event has") {
			ACUtils.viewNameList(nameList = "${globalAttributesList},device,like");
		}
	}

	@description = "Feature ID: LRAC-4265 | Automation ID: LRAC-10004 | Test Summary: Rename Custom Event Display Name"
	@priority = "4"
	test CanRenameCustomEventName {
		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Edit the new custom event") {
			ACNavigation.openItem(itemName = "${customEventName}");

			ACUtils.clickAnyButton(button = "Edit");
		}

		task ("Change the display name of the custom event") {
			ACCustomEvents.changeCustomEventDisplayNameOrDescription(newDisplayName = "${customEventName} Display Name");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.backNavigation(pageName = "Events");

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Check if the display name has been changed") {
			ACCustomEvents.viewDisplayNameOrDescriptionList(nameValue = "${customEventName} Display Name");
		}
	}

	@description = "Feature ID: LRAC-4265 | Automation ID: LRAC-10005 | Test Summary: Update Custom Events description"
	@priority = "4"
	test CanUpdateCustomEventDescription {
		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Edit the new custom event") {
			ACNavigation.openItem(itemName = "${customEventName}");

			ACUtils.clickAnyButton(button = "Edit");
		}

		task ("Change the description of the custom event") {
			ACCustomEvents.changeCustomEventDisplayNameOrDescription(newDescription = "${customEventName} Description");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.backNavigation(pageName = "Events");

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Check if the description has been changed") {
			ACCustomEvents.viewDisplayNameOrDescriptionList(nameValue = "${customEventName} Description");
		}
	}

	@description = "Feature ID: LRAC-4265 | Automation ID: LRAC-10003 | Test Summary: Custom Event name character limit (255 chars)"
	@priority = "4"
	test CheckLimitOfCustomEventName {
		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Edit the new custom event") {
			ACUtils.searchBar(searchItem = "${customEventName}");

			ACNavigation.openItem(itemName = "${customEventName}");

			ACUtils.clickAnyButton(button = "Edit");
		}

		task ("Change the name of the custom event using 255+ characters") {
			ACCustomEvents.changeCustomEventDisplayNameOrDescription(newDisplayName = "testtttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt");
		}

		task ("Check that the custom event name cannot be more than 255 characters") {
			ACCustomEvents.viewInvalidCustomEventEdition(invalidMessage = "Exceeds maximum length.");
		}
	}

	@description = "Feature ID: LRAC-4265 | Automation ID: LRAC-9865 | Test Summary: Custom Event shown in AC"
	@priority = "5"
	test CustomEventIsShownInAC {
		property portal.acceptance = "true";
		property portal.release = "true";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("View the new custom events") {
			ACUtils.viewNameList(nameList = "${customEventName}");
		}
	}

	@description = "Bug: LRAC-9883 | Automation ID: LRAC-10262 | Test Summary: Custom Event is shown when pagination and searching are applied"
	@priority = "4"
	test CustomEventIsShownWhenPaginatingAndSearching {
		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Check that the custom event appears in the list") {
			ACUtils.viewNameList(nameList = "${customEventName}");
		}

		task ("Search for the name of the custom event and verify that it was found") {
			ACUtils.searchBar(searchItem = "${customEventName}");

			ACUtils.viewNameList(nameList = "${customEventName}");
		}

		task ("Clear the search and check that the custom event appears in the list") {
			ACUtils.clearSearchBar();

			ACUtils.viewNameList(nameList = "${customEventName}");
		}

		task ("Search for the name of the custom event and verify that it was found") {
			ACUtils.searchBar(searchItem = "${customEventName}");

			ACUtils.viewNameList(nameList = "${customEventName}");
		}

		task ("Change the pagination to "30"") {
			ACUtils.changePagination(itemsPerPage = "30");
		}

		task ("Clear the search and check that the custom event appears in the list") {
			ACUtils.clearSearchBar();

			ACUtils.viewNameList(nameList = "${customEventName}");
		}

		task ("Change the pagination to "20" and check that the custom event appears in the list") {
			ACUtils.changePagination(itemsPerPage = "20");

			ACUtils.viewNameList(nameList = "${customEventName}");
		}
	}

	@description = "Feature ID: LRAC-4265 | Automation ID: LRAC-10007 | Test Summary: Search for Custom Event"
	@ignore = "true"
	@priority = "3"
	test CustomEventListSearchable {

		// AC Story ticket: LRAC-9248

		task ("Fill fields and create 2 custom events") {
			var customEventName1 = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName1}",
				timeToSendCustomEvent = "1");

			var customEventName2 = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName2}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Search for the name of the custom event and verify that it was found") {
			ACUtils.searchBar(searchItem = "${customEventName1}");

			ACUtils.viewNameList(nameList = "${customEventName1}");
		}

		task ("Search for the name of the custom event and verify that it was found") {
			ACUtils.searchBar(searchItem = "${customEventName2}");

			ACUtils.viewNameList(nameList = "${customEventName2}");
		}

		task ("Search for the name of the custom event that doesn't exist and verify that it didn't find anything") {
			ACUtils.searchBar(searchItem = "acqa");

			// This test is being ignored due to a history that makes changes to empty state messages.

			ACUtils.viewNoResultsMessage(noResultMessage = "There are no items found.");
		}
	}

	@description = "Feature ID: LRAC-4265 | Automation ID: LRAC-10006 | Test Summary: Rename Custom Event that already exists custom event name"
	@priority = "4"
	test RenameCustomEventToExistingName {
		task ("Fill fields and create 3 custom events") {
			var customEventName1 = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName1}",
				timeToSendCustomEvent = "1");

			var customEventName2 = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName2}",
				timeToSendCustomEvent = "1");

			var customEventName3 = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName3}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Edit the new custom event") {
			ACNavigation.openItem(itemName = "${customEventName2}");

			ACUtils.clickAnyButton(button = "Edit");
		}

		task ("Change the display name of the custom event") {
			ACCustomEvents.changeCustomEventDisplayNameOrDescription(newDisplayName = "${customEventName2} Display Name");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.backNavigation(pageName = "Events");

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Edit the new custom event") {
			ACNavigation.openItem(itemName = "${customEventName1}");

			ACUtils.clickAnyButton(button = "Edit");
		}

		task ("Rename to an existing display name") {
			ACCustomEvents.changeCustomEventDisplayNameOrDescription(newDisplayName = "${customEventName3}");
		}

		task ("Check that the display name cannot be renamed to an existing one") {
			ACCustomEvents.viewInvalidCustomEventEdition(invalidMessage = "An event already exists with that display name. Please enter a different display name.");
		}

		task ("Rename to an existing display name") {
			ACCustomEvents.changeCustomEventDisplayNameOrDescription(newDisplayName = "${customEventName2} Display Name");
		}

		task ("Check that the display name cannot be renamed to an existing one") {
			ACCustomEvents.viewInvalidCustomEventEdition(invalidMessage = "An event already exists with that display name. Please enter a different display name.");
		}
	}

}