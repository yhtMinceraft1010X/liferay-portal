@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-120091. Can define displayed sublevels in Menu Display."
	@priority = "5"
	@uitest
	test DefineDisplayedSublevels {
		property portal.acceptance = "true";

		task ("Add a parent widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Parent Page");
		}

		task ("Add a child widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Child Page",
				parentLayoutName = "Test Parent Page");
		}

		task ("Add a grand child content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Grand Child Page",
				parentLayoutName = "Test Child Page",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Grand Child Page",
				siteName = "Test Site Name");

			PageEditor.clickPublish();
		}

		task ("Add a great grand child content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Great Grand Child Page",
				parentLayoutName = "Test Grand Child Page",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Great Grand Child Page",
				siteName = "Test Site Name");

			PageEditor.clickPublish();
		}

		task ("Add a custom master page") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");
		}

		task ("Add a Menu Display fragment as header in custom master page") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Menu Display",
				dropTarget = "Header",
				fragmentName = "Menu Display",
				scope = "Master");
		}

		task ("Assert the Test Parent Page item is shown in Menu Display") {
			AssertVisible(
				key_pageName = "Test Parent Page",
				locator1 = "Home#PAGE");
		}

		task ("Assert the Test Child Page, Test Grand Child Page and Test Great Grand Child Page items are shown in dropdown menu") {
			MouseOver(
				key_pageName = "Test Parent Page",
				locator1 = "NavigationMenusWidget#CHILD_TOGGLE");

			while (IsElementNotPresent(key_pageName = "Test Parent Page", locator1 = "NavigationMenusWidget#OPEN_DROPDOWN_MENU")) {
				Pause(locator1 = "3000");

				MouseOver(
					key_pageName = "Test Parent Page",
					locator1 = "NavigationMenusWidget#CHILD_TOGGLE");
			}

			AssertVisible(
				key_menuItem = "Test Child Page",
				locator1 = "MenuItem#DROPDOWN_MENU_ITEM");

			AssertVisible(
				key_itemName = "Test Grand Child Page",
				key_parentItemName = "Test Child Page",
				locator1 = "NavigationMenusWidget#DROPDOWN_MENU_CHILD_ITEM");

			AssertVisible(
				key_itemName = "Test Great Grand Child Page",
				key_parentItemName = "Test Grand Child Page",
				locator1 = "NavigationMenusWidget#DROPDOWN_MENU_CHILD_ITEM");
		}

		task ("Assert the All is shown in Sublevels field") {
			PageEditor.clickConfigurableField(fragmentName = "Menu Display");

			Pause(locator1 = "3000");

			AssertSelectedLabel(
				key_fieldLabel = "Sublevels",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "All");
		}

		task ("Select 1 in Sublevels field") {
			PageEditor.editMenuDisplay(
				panel = "General",
				sublevels = "1");

			PageEditor.clickManagementBar();
		}

		task ("Assert only the Test Child Page item is shown in dropdown menu") {
			MouseOver(
				key_pageName = "Test Parent Page",
				locator1 = "NavigationMenusWidget#CHILD_TOGGLE");

			while (IsElementNotPresent(key_pageName = "Test Parent Page", locator1 = "NavigationMenusWidget#OPEN_DROPDOWN_MENU")) {
				Pause(locator1 = "3000");

				MouseOver(
					key_pageName = "Test Parent Page",
					locator1 = "NavigationMenusWidget#CHILD_TOGGLE");
			}

			AssertVisible(
				key_menuItem = "Test Child Page",
				locator1 = "MenuItem#DROPDOWN_MENU_ITEM");

			for (var itemName : list "Test Grand Child Page,Test Great Grand Child Page") {
				AssertElementNotPresent(
					key_menuItem = "${itemName}",
					locator1 = "MenuItem#DROPDOWN_MENU_ITEM");
			}
		}

		task ("Select 0 in Sublevels field") {
			PageEditor.editMenuDisplay(
				panel = "General",
				sublevels = "0");
		}

		task ("Assert the child toggle is not shown") {
			AssertElementNotPresent(
				key_pageName = "Test Parent Page",
				locator1 = "NavigationMenusWidget#CHILD_TOGGLE");
		}
	}

	@description = "This is a test for LPS-120091. Can define Display Style of Menu Display."
	@priority = "5"
	@uitest
	test DefineDisplayStyle {
		property portal.acceptance = "true";

		task ("Add a parent widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Parent Page");
		}

		task ("Add a child widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Child Page",
				parentLayoutName = "Test Parent Page");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page",
				siteName = "Test Site Name");

			PageEditor.clickPublish();
		}

		task ("Add a custom master page") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");
		}

		task ("Add a Menu Display fragment as header in custom master page") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Menu Display",
				dropTarget = "Header",
				fragmentName = "Menu Display",
				scope = "Master");
		}

		task ("Assert the Test Parent Page and Test Content Page items are shown in Menu Display") {
			for (var itemName : list "Test Parent Page,Test Content Page") {
				AssertVisible(
					key_pageName = "${itemName}",
					locator1 = "Home#PAGE");
			}
		}

		task ("Assert the Test Child Page item is shown in dropdown menu") {
			MouseOver(
				key_pageName = "Test Parent Page",
				locator1 = "NavigationMenusWidget#CHILD_TOGGLE");

			while (IsElementNotPresent(key_pageName = "Test Parent Page", locator1 = "NavigationMenusWidget#OPEN_DROPDOWN_MENU")) {
				Pause(locator1 = "3000");

				MouseOver(
					key_pageName = "Test Parent Page",
					locator1 = "NavigationMenusWidget#CHILD_TOGGLE");
			}

			AssertVisible(
				key_menuItem = "Test Child Page",
				locator1 = "MenuItem#DROPDOWN_MENU_ITEM");
		}

		task ("Assert the Horizontal is shown in Display Style field") {
			PageEditor.clickConfigurableField(fragmentName = "Menu Display");

			Pause(locator1 = "3000");

			AssertSelectedLabel(
				key_fieldLabel = "Display Style",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Horizontal");
		}

		task ("Select Stacked in Display Style field") {
			PageEditor.editMenuDisplay(
				displayStyle = "Stacked",
				panel = "General");
		}

		task ("Assert Test Parent Page, Test Child Page and Test Content Page items are shown in Menu Display") {
			for (var itemName : list "Test Parent Page,Test Child Page,Test Content Page") {
				AssertVisible(
					key_itemName = "${itemName}",
					locator1 = "NavigationMenusWidget#LIST_MENU_ANY_ITEM");
			}

			AssertVisible(
				key_itemName = "Test Child Page",
				key_parentItemName = "Test Parent Page",
				locator1 = "NavigationMenusWidget#LIST_MENU_CHILD_ITEM");
		}
	}

	@description = "This is a test for LPS-120091. Can define the item color styles in Menu Display."
	@priority = "5"
	@uitest
	test DefineItemColorStyles {
		property portal.acceptance = "true";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page");
		}

		task ("Add a custom master page") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");
		}

		task ("Add a Menu Display fragment as header in custom master page") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Menu Display",
				dropTarget = "Header",
				fragmentName = "Menu Display",
				scope = "Master");
		}

		task ("Define item color styles") {
			PageEditor.editMenuDisplay(
				hoveredItemColor = "Warning",
				panel = "Styles",
				selectedItemColor = "Success");

			PageEditor.clickManagementBar();
		}

		task ("Assert the item color when hover on it") {
			MouseOver(
				key_pageName = "Test Widget Page",
				locator1 = "Home#PAGE");

			AssertCssValue(
				key_pageName = "Test Widget Page",
				locator1 = "Home#PAGE",
				locator2 = "color",
				value1 = "rgba(185, 80, 0, 1)");

			Button.click(button = "Publish Master");

			Alert.viewSuccessMessage();
		}

		task ("Add a page based on custom master page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addPage(
				masterLayoutName = "Custom Masters Page Template",
				pageName = "Test Content Page");
		}

		task ("Assert the item color when hover on it") {
			MouseOver(
				key_pageName = "Test Widget Page",
				locator1 = "Home#PAGE");

			AssertCssValue(
				key_pageName = "Test Widget Page",
				locator1 = "Home#PAGE",
				locator2 = "color",
				value1 = "rgba(185, 80, 0, 1)");

			PageEditor.clickPublish();
		}

		task ("Assert the Test Content Page item color") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Content Page",
				siteName = "Test Site Name");

			AssertCssValue(
				key_pageName = "Test Content Page",
				locator1 = "Home#PAGE",
				locator2 = "color",
				value1 = "rgba(40, 125, 60, 1)");
		}

		task ("Assert the item color when hover on it") {
			for (var itemName : list "Test Widget Page,Test Content Page") {
				MouseOver(
					key_pageName = "${itemName}",
					locator1 = "Home#PAGE");

				AssertCssValue(
					key_pageName = "${itemName}",
					locator1 = "Home#PAGE",
					locator2 = "color",
					value1 = "rgba(185, 80, 0, 1)");
			}
		}
	}

	@description = "This is a test for LPS-120091. Can select a navigation menu from existing ones in Menu Display fragment."
	@priority = "5"
	@uitest
	test SelectNavigationMenuFromExistingOnes {
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Add a public widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Public Page");
		}

		task ("Add a private widget page") {
			JSONLayout.addPrivateLayout(
				groupName = "Test Site Name",
				layoutName = "Test Private Page");
		}

		task ("Add a navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = "Test Site Name",
				siteNavigationMenuName = "Navigation Menu Name");
		}

		task ("Add an URL type item to navigation menu") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name");

			LexiconEntry.gotoEntry(rowEntry = "Navigation Menu Name");

			NavigationMenusAdmin.addItem(
				item = "URL",
				url = "https://www.liferay.com",
				urlName = "Liferay");
		}

		task ("Assert the URL item in navigation menu") {
			NavigationMenusAdmin.viewItem(itemName = "Liferay");
		}

		task ("Add a custom master page") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");
		}

		task ("Add a Menu Display fragment as header in custom master page") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Menu Display",
				dropTarget = "Header",
				fragmentName = "Menu Display",
				scope = "Master");
		}

		task ("Assert the Test Public Page is shown in Menu Display") {
			AssertVisible(
				key_pageName = "Test Public Page",
				locator1 = "Home#PAGE");
		}

		task ("Assert the Public Pages Hierarchy is shown in Source field") {
			PageEditor.clickConfigurableField(fragmentName = "Menu Display");

			AssertTextEquals(
				key_fieldLabel = "Source",
				locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT",
				value1 = "Public Pages Hierarchy");
		}

		task ("Select Private Pages Hierarchy in Menu Display") {
			PageEditor.editMenuDisplay(
				panel = "General",
				siteMenus = "Private Pages Hierarchy");
		}

		task ("Assert the Test Private Page is shown in Menu Display") {
			AssertVisible(
				key_pageName = "Test Private Page",
				locator1 = "Home#PAGE");
		}

		task ("Select Navigation Menu Name in Menu Display") {
			PageEditor.editMenuDisplay(
				panel = "General",
				siteMenus = "Navigation Menu Name");
		}

		task ("Assert the Liferay is shown in Menu Display") {
			AssertVisible(
				key_pageName = "Liferay",
				locator1 = "Home#PAGE");
		}
	}

}