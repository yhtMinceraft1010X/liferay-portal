@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		TestCase.setUpPortalInstance();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8785 | Test Summary: Add a keyword that already exists"
	@priority = "3"
	test AddKeywordAlreadyExists {
		task ("Enter in the Interests from Settings Definitions") {
			var word = "ac keyword";

			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACDefinitions.goToDefinitionType(definitionType = "Interests");
		}

		task ("make a keyword and check if it exist") {
			ACSettings.addKeywords(keyword = "${word}");

			ACInterests.assertKeywordPresentByIndex(
				index = "1",
				keywordName = "${word}");
		}

		task ("make other keyword equal the previois, and check if it not exist") {
			ACSettings.addKeywords(keyword = "${word}");

			ACInterests.assertKeywordNotPresentByIndex(
				index = "2",
				keywordName = "${word}");
		}

		task ("Select all keywords and delete them") {
			ACSettings.deleteAllKeywords();
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8786 | Test Summary: Add keyword when there are none"
	@ignore = "true"
	@priority = "3"
	test AddKeywordCurrentlyNone {

		// AC Story ticket: LRAC-9248

		task ("Go to AC Settings > definitions > Interests") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACDefinitions.goToDefinitionType(definitionType = "Interests");
		}

		task ("Check no result") {

			// This test is being ignored due to a history that makes changes to empty state messages.

			ACUtils.viewNoResultsMessage(noResultMessage = "You have not added keywords to the blocklist yet.");
		}

		task ("Add keywords and assert result") {
			ACSettings.addKeywords(keyword = "test");

			ACSettings.assertKeywords(keyword = "test");
		}

		task ("Select all keywords and delete them") {
			ACSettings.deleteAllKeywords();
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8787 | Test Summary: Add multiple keywords"
	@priority = "3"
	test AddMultipleKeywords {
		task ("Go to settings > definitions > interests") {
			var keywords = "ac keyword 1,ac keyword 2,ac keyword 3,ac keyword 4";

			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACDefinitions.goToDefinitionType(definitionType = "Interests");
		}

		task ("Add multiple keywords") {
			ACSettings.addMultiplesOptions(optionsList = "${keywords}");

			ACSettings.assertKeywords(keyword = "${keywords}");
		}

		task ("Select all keywords and delete them") {
			ACSettings.deleteAllKeywords();
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8795 | Test Summary: Add multiple of the same keyword"
	@priority = "3"
	test AddMultipleSameKeyword {
		task ("Enter in the Interests from Settings Definitions") {
			var keywords = "ac keyword,ac keyword,ac keyword,ac keyword,ac keyword";

			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACDefinitions.goToDefinitionType(definitionType = "Interests");
		}

		task ("make a keyword and check if it exist") {
			ACSettings.addMultiplesOptions(optionsList = "${keywords}");

			ACInterests.assertKeywordPresentByIndex(
				index = "1",
				keywordName = "ac keyword");

			ACInterests.assertKeywordNotPresentByIndex(
				index = "2",
				keywordName = "ac keyword");
		}

		task ("Select all keywords and delete them") {
			ACSettings.deleteAllKeywords();
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8788 | Test Summary: View only selected keywords"
	@priority = "3"
	test AssertSelectedKeywords {
		var keywordsList = "ac keyword 1,ac keyword 2,ac keyword 3,ac keyword 4";
		var list1 = "ac keyword 1,ac keyword 3";
		var list2 = "ac keyword 2,ac keyword 4";

		task ("Go to settings > definitions > interests") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACDefinitions.goToDefinitionType(definitionType = "Interests");
		}

		task ("Create keywords") {
			for (var keywords : list "${keywordsList}") {
				ACSettings.addKeywords(keyword = "${keywords}");
			}
		}

		task ("Click in two checkboxes") {
			for (var listChecked : list "${list1}") {
				ACInterests.clickKeywordCheckbox(keyword = "${listChecked}");
			}
		}

		task ("View the keywords selected") {
			Click(locator1 = "ACSettings#VIEW_SELECTED_KEYWORDS");
		}

		task ("Assert element is present") {
			for (var listChecked : list "${list1}") {
				ACSettings.assertKeywords(keyword = "${listChecked}");
			}
		}

		task ("Assert element not present") {
			for (var listUnchecked : list "${list2}") {
				ACSettings.assertKeywordNotPresent(keyword = "${listUnchecked}");
			}
		}

		task ("Select all keywords and delete them") {
			Refresh();

			ACSettings.deleteAllKeywords();
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8789 | Test Summary: Delete a keyword block"
	@ignore = "true"
	@priority = "3"
	test DeleteKeywordBlock {

		// AC Story ticket: LRAC-9248

		task ("Go to settings, definitions and definitions type") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACDefinitions.goToDefinitionType(definitionType = "Interests");
		}

		task ("Add two new keywords") {
			var words = "ac keyword 1,ac keyword 2";

			for (var word : list "${words}") {
				ACSettings.addKeywords(keyword = "${word}");

				ACSettings.assertKeywords(keyword = "${word}");
			}
		}

		task ("Select the keyword and delete") {
			for (var n : list "${words}") {
				ACSettings.deleteKeywordIcon(keyword = "${n}");
			}
		}

		task ("Assert that all keywords were deleted") {

			// This test is being ignored due to a history that makes changes to empty state messages.

			ACUtils.viewNoResultsMessage(noResultMessage = "You have not added keywords to the blocklist yet.");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8790 | Test Summary: Delete keyword using the check box"
	@priority = "3"
	test DeleteKeywordUsingTheCheckBox {
		var words = "ac keyword 1,ac keyword 2";

		task ("Go to settings, definitions and definitions type") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACDefinitions.goToDefinitionType(definitionType = "Interests");
		}

		task ("Add two new keywords") {
			for (var word : list "${words}") {
				ACSettings.addKeywords(keyword = "${word}");

				ACSettings.assertKeywords(keyword = "${word}");
			}
		}

		task ("Delete the keyword, assert deletion") {
			ACSettings.deleteKeywordCheckbox(keyword = "ac keyword 1");

			ACSettings.assertKeywordNotPresent(keyword = "ac keyword 1");

			ACSettings.assertKeywords(keyword = "ac keyword 2");

			ACSettings.deleteKeywordCheckbox(keyword = "ac keyword 2");

			ACSettings.assertKeywordNotPresent(keyword = "ac keyword 2");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8791 | Test Summary: Delete multiple keywords"
	@ignore = "true"
	@priority = "3"
	test DeleteMultipleKeywords {

		// AC Story ticket: LRAC-9248

		task ("Go to settings, definitions and definitions type") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACDefinitions.goToDefinitionType(definitionType = "Interests");
		}

		task ("Add two new keywords") {
			var words = "ac keyword 1,ac keyword 2";

			for (var word : list "${words}") {
				ACSettings.addKeywords(keyword = "${word}");

				ACSettings.assertKeywords(keyword = "${word}");
			}
		}

		task ("Select all the keywords and delete them") {
			ACSettings.deleteAllKeywords();
		}

		task ("Assert that all keywords were deleted") {

			// This test is being ignored due to a history that makes changes to empty state messages.

			ACUtils.viewNoResultsMessage(noResultMessage = "You have not added keywords to the blocklist yet.");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8792 | Test Summary: Paginate keyword block list"
	@priority = "3"
	test PaginateKeywordBlockList {
		var words = "ac keyword 1,ac keyword 2,ac keyword 3,ac keyword 4,ac keyword 5,ac keyword 6";

		task ("Go to settings, definitions and definitions type") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACDefinitions.goToDefinitionType(definitionType = "Interests");
		}

		task ("Add new keywords") {
			ACSettings.addMultiplesOptions(optionsList = "${words}");
		}

		ACSettings.assertKeywords(keyword = "${words}");

		task ("Assert default pagination display "20 Items" message and page number") {
			AssertTextEquals.assertText(
				locator1 = "ACUtils#PAGINATION_ITEMS_PER_PAGE_SELECT",
				value1 = "20 Items");

			ACUtils.viewResultsMessage(results = "Showing 1 to 6 of 6 entries.");

			ACUtils.viewResultsPages(pageNumber = "1");
		}

		task ("Change the pagination to 5") {
			ACUtils.changePagination(itemsPerPage = "5");
		}

		task ("Assert the keywords in the page") {
			var words = "ac keyword 1,ac keyword 2,ac keyword 3,ac keyword 4,ac keyword 5";
			var word = "ac keyword 6";

			ACSettings.assertKeywords(keyword = "${words}");

			ACSettings.assertKeywordNotPresent(keyword = "${word}");
		}

		task ("Assert the amount of entries in the page") {
			ACUtils.viewResultsMessage(results = "Showing 1 to 5 of 6 entries.");

			ACUtils.viewResultsPages(pageNumber = "1");

			ACUtils.viewResultsPages(pageNumber = "2");
		}

		task ("Page number display 1 2, check previous next button and assert the keyword displayed in the page") {
			ACUtils.checkPreviousNextButton(nextButton = "true");

			ACSettings.assertKeywords(keyword = "ac keyword 6");

			ACUtils.viewResultsMessage(results = "Showing 6 to 6 of 6 entries.");

			ACUtils.checkPreviousNextButton(previousButton = "true");

			ACUtils.viewResultsMessage(results = "Showing 1 to 5 of 6 entries.");
		}

		task ("Select all keywords and delete them") {
			ACSettings.deleteAllKeywords();
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8793 | Test Summary: Search for a blocked keyword"
	@priority = "3"
	test SearchForBlockedKeyword {
		var keywords = "test interest,ac keyword";

		task ("Go to Interest session") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACDefinitions.goToDefinitionType(definitionType = "Interests");
		}

		task ("Add two keywords and assert them") {
			ACSettings.addMultiplesOptions(optionsList = "${keywords}");

			ACSettings.assertKeywords(keyword = "${keywords}");
		}

		task ("Search the 'test interest' keyword and assert that the 'ac keyword' keyword is not present") {
			ACUtils.searchBar(searchItem = "test interest");

			ACSettings.assertKeywords(keyword = "test interest");

			ACSettings.assertKeywordNotPresent(keyword = "ac keyword}");
		}

		task ("Search the 'ac keyword' keyword and assert that the 'test interest' keyword is not present") {
			ACUtils.searchBar(searchItem = "ac keyword");

			ACSettings.assertKeywords(keyword = "ac keyword");

			ACSettings.assertKeywordNotPresent(keyword = "test interest");
		}

		task ("Search a keyword not added and assert that ones shouldn't be there") {
			ACUtils.searchBar(searchItem = "Should not be here");

			ACUtils.viewGenericText(textValueList = "There are no results found.,Please try a different search term.");

			ACUtils.clearSearchBar();
		}

		task ("Select all keywords and delete them") {
			ACSettings.deleteAllKeywords();
		}
	}

}