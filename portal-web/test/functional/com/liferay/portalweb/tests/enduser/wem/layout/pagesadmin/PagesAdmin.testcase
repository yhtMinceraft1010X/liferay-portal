@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Pages Administration";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a use case for LPS-107776. Can add collection items in a collection page based on dynamic collection with all types."
	@priority = "5"
	test AddCollectionItemsInCollectionPageBasedOnDynamicCollection {
		property portal.acceptance = "true";

		task ("Add a dynamic collection with All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add a collection page based on dynamic collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Dynamic Collection",
				pageName = "Test Collection Page Name",
				tabName = "Collections");
		}

		task ("View there is no collection items shown in Collection Display") {
			PageEditor.viewCollectionItem(assetTitle = "Sample Collection Item");

			PageEditor.viewNumberOfCollectionItemsInCollectionPage(numberOfItems = "(0 Items)");
		}

		task ("Add a web content article based on Basic Web Content in collection page") {
			ContentPages.addCollectionItemInCollectionPage(
				itemSubtype = "Basic Web Content",
				title = "New Collection Page Item");

			WebContent.addCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("View the web content article is shown in Collection Display") {
			PageEditor.viewCollectionItem(assetTitle = "Web Content Title");

			PageEditor.viewNumberOfCollectionItemsInCollectionPage(numberOfItems = "(1 Items)");
		}

		task ("Add a Blogs entry in collection page") {
			ContentPages.addCollectionItemInCollectionPage(
				itemSubtype = "Blogs Entry",
				title = "New Collection Page Item");

			BlogsEntry.addEntryContent(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");

			PortletEntry.publish();
		}

		task ("View the Blogs entry is shown in Collection Display") {
			var n = "1";

			for (var titleName : list "Blogs Entry Title,Web Content Title") {
				PageEditor.viewCollectionItem(
					assetTitle = "${titleName}",
					row = "${n}");

				var n = ${n} + 1;
			}

			PageEditor.viewNumberOfCollectionItemsInCollectionPage(numberOfItems = "(2 Items)");
		}

		task ("Add a document based on Basic Document in collection page") {
			ContentPages.addCollectionItemInCollectionPage(
				itemSubtype = "Basic Document",
				title = "New Collection Page Item");

			DMDocument.editDocument(
				dmDocumentFile = "Document_1.png",
				dmDocumentTitle = "Document Title");

			PortletEntry.publish();
		}

		task ("View the document is shown in Collection Display") {
			var n = "1";

			for (var titleName : list "Document Title,Blogs Entry Title,Web Content Title") {
				PageEditor.viewCollectionItem(
					assetTitle = "${titleName}",
					row = "${n}");

				var n = ${n} + 1;
			}

			PageEditor.viewNumberOfCollectionItemsInCollectionPage(numberOfItems = "(3 Items)");
		}
	}

	@description = "This is a use case for LPS-107776. Only can add specific type collection items in a collection page based on manual collection with single item type."
	@priority = "4"
	test AddCollectionItemsInCollectionPageBasedOnManualCollection {
		task ("Add a manual collection with Web Content Article item type") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "All Subtypes",
				itemType = "Web Content Article",
				title = "Manual Collection");
		}

		task ("Add a collection page based on manual collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Manual Collection",
				pageName = "Test Collection Page Name",
				tabName = "Collections");
		}

		task ("View there is no collection items shown in Collection Display") {
			PageEditor.viewCollectionItem(assetTitle = "Sample Collection Item");

			PageEditor.viewNumberOfCollectionItemsInCollectionPage(numberOfItems = "(0 Items)");
		}

		task ("Add a web content article based on Basic Web Content in collection page") {
			ContentPages.addCollectionItemInCollectionPage(title = "New Basic Web Content");

			WebContent.addCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();
		}

		task ("View the web content article is shown in Collection Display") {
			PageEditor.viewCollectionItem(assetTitle = "Web Content Title");

			PageEditor.viewNumberOfCollectionItemsInCollectionPage(numberOfItems = "(1 Items)");
		}
	}

	@description = "This is a test for LPS-107775. Can add new collections when add a collection page from pages admin."
	@priority = "5"
	@uitest
	test AddCollectionViaAddingCollectionPage {
		property portal.acceptance = "true";

		task ("Add a manual collection when adding a collection page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Manual Collection Name",
				menuItem = "Manual Collection",
				pageName = "Manual Collection Page Name",
				selectedAsset = "All Types",
				tabName = "Collections");

			PageEditor.clickPublish();
		}

		task ("Add a dynamic collection when adding a collection page") {
			ContentPages.addCollectionPage(
				collectionName = "Dynamic Collection Name",
				menuItem = "Dynamic Collection",
				pageName = "Dynamic Collection Page Name",
				selectedAsset = "All Types",
				tabName = "Collections");

			PageEditor.clickPublish();
		}

		task ("View collection pages are shown in pages admin") {
			for (var collectionType : list "Manual,Dynamic") {
				PagesAdmin.viewPageItemPresent(pageName = "${collectionType} Collection Page Name");
			}
		}
	}

	@description = "This is a test for LPS-110108. Can view the draft label of a page in pages admin."
	@priority = "4"
	test AddDraftContentPage {
		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("View Draft label is shown") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.viewPageStatus(
				pageName = "Test Page Name",
				status = "Draft");
		}
	}

	@description = "This is a test for LPS-110108. Can add a fourth level of child page and view it on Pages admin."
	@priority = "5"
	test AddFourthLevelChildPage {
		property portal.acceptance = "true";

		task ("Add a parent page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add the first level of child page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Child Page Name 1",
				parentLayoutName = "Test Page Name");
		}

		task ("Add the second level of child page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Child Page Name 2",
				parentLayoutName = "Child Page Name 1");
		}

		task ("Add the third level of child page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Child Page Name 3",
				parentLayoutName = "Child Page Name 2");
		}

		task ("Add the fourth level of child page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Child Page Name 4",
				parentLayoutName = "Child Page Name 3");
		}

		task ("View the children pages are shown in pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			var n = "2";

			for (var i : list "1,2,3,4") {
				PagesAdmin.viewPageItemPresent(
					depth = "${n}",
					pageName = "Child Page Name ${i}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-145215. View alert message when delete a page."
	@priority = "5"
	@uitest
	test DeletePage {
		property portal.acceptance = "true";

		task ("Add two widget pages") {
			for (var i : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${i}");
			}
		}

		task ("Delete the first widget page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.deletePage(pageName = "Test Page Name 1");
		}

		task ("View first widget page is not shown") {
			PagesAdmin.viewPageItemNotPresent(pageName = "Test Page Name 1");
		}
	}

	@description = "This is a test for LPS-145215. View alert message when delete a page with child page."
	@priority = "4"
	test DeletePageWithChildPage {
		task ("Add a page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add a child page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Child Test Page",
				parentLayoutName = "Test Page Name",
				type = "content");
		}

		task ("View alert message when delete a page with child") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.deletePage(
				hasChildren = "true",
				pageName = "Test Page Name");

			AssertVisible(locator1 = "Message#EMPTY_INFO_TAGLIB");
		}
	}

	@description = "This is a test for LPS-145215. View alert message when delete a page with scoped content."
	@priority = "4"
	test DeletePageWithScopedContent {
		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a Web Content Display widget to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addWidget(portletName = "Web Content Display");
		}

		task ("Select the page as scope for Web Content Display") {
			WebContentDisplayPortlet.configureScope(scopeSelection = "Test Page Name");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("View alert message when delete a page with scoped content") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.deletePage(
				hasScopeGroup = "true",
				pageName = "Test Page Name");

			AssertVisible(locator1 = "Message#EMPTY_INFO_TAGLIB");
		}
	}

	@description = "This is a test for LPS-145215. View alert message when delete a page with scoped content and child page."
	@priority = "4"
	test DeletePageWithScopedContentAndChildPage {
		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a child content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Child Test Page",
				parentLayoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a Web Content Display widget to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addWidget(portletName = "Web Content Display");
		}

		task ("Select the page as scope for Web Content Display") {
			WebContentDisplayPortlet.configureScope(scopeSelection = "Test Page Name");

			IFrame.closeFrame();

			PageEditor.clickPublish();
		}

		task ("View alert message when delete a page with scoped content and child page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.deletePage(
				hasChidren = "true",
				hasScopeGroup = "true",
				pageName = "Test Page Name");

			AssertVisible(locator1 = "Message#EMPTY_INFO_TAGLIB");
		}
	}

	@description = "This is a test for LPS-110183. Can access to edition of collection items in Collection Items modal."
	@priority = "4"
	test GoToCollectionItemEditModeViaViewCollectionItemsModal {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a blogs entry") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Add a document") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a collection page based on recent content collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Recent Content",
				pageName = "Test Collection Page Name",
				tabName = "Collection Providers");
		}

		task ("View assets can be aditable via collection items in pages admin") {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");

			for (var title : list "Web Content Title,Blogs Entry Title,Document Title") {
				WaitForLiferayEvent.initializeLiferayEventLog();

				PagesAdmin.gotoPageEllipsisMenuItem(
					menuItem = "View Collection Items",
					pageName = "Test Collection Page Name");

				SelectFrame(locator1 = "IFrame#MODAL_BODY");

				Page.gotoCollectionEntryEllipsisItem(
					item = "Edit Content",
					tableEntry = "${title}");

				ControlMenu.viewHeaderTitle(headerTitle = "${title}");

				Navigator.gotoBack();
			}
		}

		task ("View assets can be aditable via collection items in page tree") {
			PagesFinder.goToPagesFinder();

			for (var title : list "Web Content Title,Blogs Entry Title,Document Title") {
				WaitForLiferayEvent.initializeLiferayEventLog();

				PagesFinder.gotoPageEllipsisItem(
					item = "View Collection Items",
					pageName = "Test Collection Page Name");

				SelectFrame(locator1 = "IFrame#MODAL_BODY");

				Page.gotoCollectionEntryEllipsisItem(
					item = "Edit Content",
					tableEntry = "${title}");

				ControlMenu.viewHeaderTitle(headerTitle = "${title}");

				PageEditor.clickBack();

				ControlMenu.viewHeaderTitle(headerTitle = "Test Collection Page Name *");

				PagesFinder.viewPageNameInPagesFinder(pageName = "Test Collection Page Name*");
			}
		}
	}

	@description = "This is a test for LPS-110108. The hovered item shows Add Page quick action and a Kebab menu with the actions available for that item. Clicking on item title navigates to the content."
	@priority = "5"
	test MouseOverNonRootPageAndViewPage {
		property portal.acceptance = "true";

		task ("Add two content pages then publish") {
			for (var n : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${n}",
					type = "content");

				JSONLayout.publishLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${n}");
			}
		}

		task ("Add a child page then publish") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Child Page Name 1",
				parentLayoutName = "Test Page Name 1",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Test Site Name",
				layoutName = "Child Page Name 1");
		}

		task ("Select the first page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.expandPageTree(depth = "2");

			PagesAdmin.selectPageItem(pageName = "Test Page Name 1");
		}

		task ("View plus icon is shown when mouse over the page name") {
			MouseOver(
				key_itemName = "Child Page Name 1",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM");

			AssertVisible(
				key_pageName = "Child Page Name 1",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM_PLUS_ICON");
		}

		task ("View child page via kebab menu action") {
			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "View",
				pageName = "Child Page Name 1");

			ControlMenu.viewHeaderTitle(headerTitle = "Child Page Name 1");
		}

		task ("View parent page by clicking on page name") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			Click(
				key_pageName = "Test Page Name 1",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM_ENTRY_TITLE_LINK");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Page Name 1");
		}
	}

	@description = "This is a test for LPS-110108. Move child page to parent page level via drag and drop."
	@priority = "4"
	test MoveChildPageToParentLevel {
		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add a child page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Child Page Name",
				parentLayoutName = "Test Page Name");
		}

		task ("View child page is shown under parent page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.viewPageItemPresent(
				depth = "2",
				pageName = "Child Page Name");
		}

		task ("Move child page to parent level") {
			PagesAdmin.movePageItemUp(
				pageName = "Child Page Name",
				pageNameTo = "Test Page Name");
		}

		task ("View child and parent page are in the same level") {
			for (var name : list "Test,Child") {
				PagesAdmin.viewPageItemPresent(pageName = "${name} Page Name");
			}
		}
	}

	@description = "This is a test for LPS-114527. Can move multiple different level pages to the same level via dragging in Pages admin."
	@priority = "4"
	test MoveMultipleDifferentLevelsPagesToTheSameLevel {
		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name 1");
		}

		task ("Add a child page of Test Page Name 1") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Child Page Name 1",
				parentLayoutName = "Test Page Name 1");
		}

		task ("Add a child page of Child Page Name 1") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Child Child Page Name 1",
				parentLayoutName = "Child Page Name 1");
		}

		task ("Add a content page in the same level with Test Page Name 1") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name 2",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name 2");
		}

		task ("Move Test Page Name 2 and Child Child Page Name 1 to the same level with Child Page Name 1") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			for (var name : list "Test,Child") {
				Click(
					key_itemName = "${name} Page Name 1",
					locator1 = "PagesAdmin#LIST_GROUP_ITEM");
			}

			for (var pageName : list "Test Page Name 2,Child Child Page Name 1") {
				PagesAdmin.selectPageItem(pageName = "${pageName}");
			}

			PagesAdmin.movePageItemUp(
				pageName = "Test Page Name 2",
				pageNameTo = "Child Page Name 1");
		}

		task ("View Test Page Name 2 and Child Child Page Name 1 are moved to the same level with Child Page Name 1") {
			PagesAdmin.viewPagesOrder(
				depth = "2",
				pageNameList = "Test Page Name 2,Child Child Page Name 1,Child Page Name 1");
		}
	}

	@description = "This is a test for LPS-114527. Can move multiple same level pages at the same level via dragging in Pages admin."
	@priority = "5"
	test MoveMultiplePagesInSameLevel {
		property portal.acceptance = "true";

		task ("Add two widget pages and one content page in the same level") {
			for (var n : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${n}");
			}

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name 3",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name 3");
		}

		task ("View pages order in Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.viewPagesOrder(
				depth = "1",
				pageNameList = "Test Page Name 1,Test Page Name 2,Test Page Name 3");
		}

		task ("Move Test Page Name 2 and 3 to top of Test Page Name 1") {
			for (var n : list "2,3") {
				PagesAdmin.selectPageItem(pageName = "Test Page Name ${n}");
			}

			PagesAdmin.movePageItemUp(
				pageName = "Test Page Name 2",
				pageNameTo = "Test Page Name 1");
		}

		task ("View Test Page Name 2 and 3 are moved to top of Test Page Name 1") {
			PagesAdmin.viewPagesOrder(
				depth = "1",
				pageNameList = "Test Page Name 2,Test Page Name 3,Test Page Name 1");
		}
	}

	@description = "This is a test for LPS-114527. Can move multiple same level pages to different level via dragging in Pages admin."
	@priority = "4"
	test MoveMultipleSameLevelPagesToChildLevel {
		task ("Add two widget pages and 1 content page in the same level") {
			for (var n : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${n}");
			}

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name 3",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name 3");
		}

		task ("Move Test Page Name 1 and 2 to child level of Test Page Name 3") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			Click(
				key_itemName = "Test Page Name 3",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM");

			for (var n : list "1,2") {
				PagesAdmin.selectPageItem(pageName = "Test Page Name ${n}");
			}

			DragAndDrop.javaScriptDragAndDropToUp(
				key_pageName = "Test Page Name 1",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM_DRAG_HANDLER",
				locator2 = "//ul[contains(@class,'col')][3]",
				value1 = "");
		}

		task ("View Test Page Name 1 and 2 are moved to child level of Test Page Name 3") {
			PagesAdmin.viewPagesOrder(
				depth = "1",
				pageNameList = "Test Page Name 1,Test Page Name 2");
		}
	}

	@description = "This is a test for LPS-110108. Reorder pages in same level via drag and drop."
	@priority = "5"
	test MovePageInSameLevel {
		property portal.acceptance = "true";

		task ("Add two content pages then publish") {
			for (var n : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${n}",
					type = "content");

				JSONLayout.publishLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${n}");
			}
		}

		task ("View pages order in Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.viewPagesOrder(
				depth = "1",
				pageNameList = "Test Page Name 1,Test Page Name 2");
		}

		task ("Change order of pages") {
			PagesAdmin.movePageItemUp(
				pageName = "Test Page Name 2",
				pageNameTo = "Test Page Name 1");
		}

		task ("View new pages order in Pages admin") {
			PagesAdmin.viewPagesOrder(
				depth = "1",
				pageNameList = "Test Page Name 2,Test Page Name 1");
		}
	}

	@description = "This is a test for LPS-110108. Move parent page to child page level via drag and drop."
	@priority = "4"
	test MoveParentPageToChildLevel {
		task ("Add two content pages then publish") {
			for (var n : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${n}",
					type = "content");

				JSONLayout.publishLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${n}");
			}
		}

		task ("Add a child page then publish") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Child Page Name 1",
				parentLayoutName = "Test Page Name 1",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Test Site Name",
				layoutName = "Child Page Name 1");
		}

		task ("View child page in Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.viewPageItemPresent(
				depth = "2",
				pageName = "Child Page Name 1");
		}

		task ("Move Test Page Name 2 to child level of Test Page Name 1") {
			PagesAdmin.movePageItemUp(
				pageName = "Test Page Name 2",
				pageNameTo = "Child Page Name 1");
		}

		task ("View moved page is at the same level than child page") {
			var n = "1";

			for (var name : list "Child,Test") {
				PagesAdmin.viewPageItemPresent(
					depth = "2",
					pageName = "${name} Page Name ${n}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-139064. Users can preview draft for a collection page from Pages admin when they exist."
	@priority = "3"
	test PreviewDraftCollectionPage {
		task ("Add a collection page based on Highest Rated Assets collection provider") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Highest Rated Assets",
				pageName = "Test Page Name",
				tabName = "Collection Providers");
		}

		task ("Navigate to the Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");
		}

		task ("Preview the draft collection page in a new tab") {
			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Preview Draft",
				pageName = "Test Page Name");

			SelectWindow.selectPopUp(locator1 = "null");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Page Name *");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Highest Rated Assets");
		}
	}

	@description = "This is a test for LPS-139064. Users can preview draft for a content page from Pages admin when they exist."
	@priority = "5"
	test PreviewDraftContentPage {
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Add a public content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Public Page Name",
				type = "content");
		}

		task ("Add a private content page") {
			JSONLayout.addPrivateLayout(
				groupName = "Test Site Name",
				layoutName = "Test Private Page Name",
				type = "content");
		}

		task ("Add a Button fragment to public page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Public Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Add a Heading fragment to private page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Private Page Name",
				privateLayout = "true",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Navigate to the Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");
		}

		task ("Preview the draft public content page") {
			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Preview Draft",
				pageName = "Test Public Page Name");

			SelectWindow.selectPopUp(locator1 = "null");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Public Page Name *");

			ContentPages.viewFragmentText(
				fragmentName = "button",
				id = "link",
				text = "Go Somewhere");
		}

		task ("Close the new tab and select the original tab") {
			Navigator.closeWindow();
		}

		task ("Preview the draft private content page") {
			PagesAdmin.togglePrivacy(privacy = "Private Pages");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Preview Draft",
				pageName = "Test Private Page Name");

			SelectWindow.selectPopUp(locator1 = "null");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Private Page Name *");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");
		}
	}

	@description = "This is a test for LPS-76825 and LPS-149161. A user can search for a page from pages admin."
	@priority = "5"
	test SearchPages {
		property portal.acceptance = "true";

		task ("Add two pages to root and add one child page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.addPage(pageName = "Page One");

			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.addPage(pageName = "Page Two");

			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.addChildPage(
				childPageName = "Page Three",
				parentPageName = "Page One");
		}

		task ("Navigate to pages administration") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");
		}

		task ("Search for page one and assert only that page appears") {
			Search.searchCP(searchTerm = "one");

			AssertElementPresent(
				index = "1",
				key_tableEntry = "Page One",
				locator1 = "LexiconTable#TABLE_ENTRY_TITLE_INDEXED");

			for (var pageName : list "Page Two,Page Three") {
				AssertElementNotPresent(
					index = "2",
					key_tableEntry = "${pageName}",
					locator1 = "LexiconTable#TABLE_ENTRY_TITLE_INDEXED");
			}
		}

		task ("Search for child page and assert that page appears") {
			Search.searchCP(searchTerm = "three");

			AssertElementPresent(
				index = "1",
				key_tableEntry = "Page Three",
				locator1 = "LexiconTable#TABLE_ENTRY_TITLE_INDEXED");

			for (var pageName : list "Page One,Page Two") {
				AssertElementNotPresent(
					index = "2",
					key_tableEntry = "${pageName}",
					locator1 = "LexiconTable#TABLE_ENTRY_TITLE_INDEXED");
			}
		}

		task ("Search for all three pages and order by Create Date") {
			Search.searchCP(searchTerm = "page");

			ManagementBar.setFilterAndOrder(filterBy = "Create Date");

			var i = "1";

			for (var pageName : list "Page One,Page Two,Page Three") {
				AssertElementPresent(
					index = "${i}",
					key_tableEntry = "${pageName}",
					locator1 = "LexiconTable#TABLE_ENTRY_TITLE_INDEXED");

				var i = ${i} + 1;
			}
		}

		task ("Order by Relevance") {
			ManagementBar.setFilterAndOrder(filterBy = "Relevance");
		}

		task ("View redirect to Pages admin after clear search results") {
			Search.clearSearchResult();

			for (var pageName : list "Page One,Page Two") {
				PagesAdmin.viewPageItemPresent(pageName = "${pageName}");
			}
		}
	}

	@description = "This is a test for LPS-110108. Select non root item, it shows Add Page quick action and a Kebab menu with the actions available for that item."
	@priority = "4"
	test ViewChildPage {
		task ("Add a content page then publish") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add a child page then publish") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Child Page Name",
				parentLayoutName = "Test Page Name",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Test Site Name",
				layoutName = "Child Page Name");
		}

		task ("View the plus icon is shown after check the page in Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.expandPageTree(depth = "2");

			PagesAdmin.selectPageItem(pageName = "Child Page Name");

			AssertVisible(
				key_pageName = "Child Page Name",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM_PLUS_ICON");
		}

		task ("View child page via action menu") {
			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "View",
				pageName = "Child Page Name");

			ControlMenu.viewHeaderTitle(headerTitle = "Child Page Name");
		}
	}

	@description = "This is a test for LPS-110183. Can view information about collection items of collection page via Pages admin."
	@priority = "5"
	test ViewCollectionItemViaPageFinderAndPageAdmin {
		property portal.acceptance = "true";

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Add a blogs entry") {
			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");
		}

		task ("Add a document") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a dynamic collection with All Types") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Dynamic Collection");
		}

		task ("Add a collection page based on dynamic collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Dynamic Collection",
				pageName = "Dynamic Collection Page Name",
				tabName = "Collections");
		}

		task ("View header table are shown in collection items via page tree") {
			PagesFinder.goToPagesFinder();

			PagesFinder.viewPageNameInPagesFinder(pageName = "Dynamic Collection Page Name*");

			WaitForLiferayEvent.initializeLiferayEventLog();

			PagesFinder.gotoPageEllipsisItem(
				item = "View Collection Items",
				pageName = "Dynamic Collection Page Name");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			for (var tableHeader : list "Title,Type,Author,Modified Date,Create Date") {
				AssertElementPresent(
					key_tableHeader = "${tableHeader}",
					locator1 = "LexiconTable#TABLE_HEADER");
			}
		}

		task ("View assets are shown in collection items via page tree") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				Page.viewCollectionItem(
					itemName = "${title}",
					key_rowNumber = "${n}");

				var n = ${n} + 1;
			}
		}

		task ("View header table are shown in collection items via Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			WaitForLiferayEvent.initializeLiferayEventLog();

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "View Collection Items",
				pageName = "Dynamic Collection Page Name");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			for (var tableHeader : list "Title,Type,Author,Modified Date,Create Date") {
				AssertElementPresent(
					key_tableHeader = "${tableHeader}",
					locator1 = "LexiconTable#TABLE_HEADER");
			}
		}

		task ("View assets are shown in collection items via Pages admin") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				Page.viewCollectionItem(
					itemName = "${title}",
					key_rowNumber = "${n}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-110183. Can view more collection items use pagination in Collection Items modal."
	@priority = "4"
	test ViewCollectionItemWithPagination {
		task ("Add five web contents") {
			for (var n : list "5,4,3,2,1") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = "Test Site Name",
					title = "Web Content Title ${n}");
			}
		}

		task ("Add a collection page based on highest rated assets collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Highest Rated Assets",
				pageName = "Test Collection Page Name",
				tabName = "Collection Providers");

			PageEditor.clickPublish();
		}

		task ("View all web contents are shown in collection items") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "View Collection Items",
				pageName = "Test Collection Page Name");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			for (var rowNumber : list "1,2,3,4,5") {
				Page.viewCollectionItem(
					itemName = "Web Content Title ${rowNumber}",
					key_rowNumber = "${rowNumber}");
			}
		}

		task ("Change the pagination to four items per page") {
			Pagination.changePagination(itemsPerPage = "4");
		}

		task ("View four web contents are shown in collecion items") {
			for (var rowNumber : list "1,2,3,4") {
				Page.viewCollectionItem(
					itemName = "Web Content Title ${rowNumber}",
					key_rowNumber = "${rowNumber}");
			}

			LexiconTable.viewTableEntryNotPresent(tableEntry = "Web Content Title 5");
		}

		task ("View fifth web content is shown in the next page") {
			Click(locator1 = "Pagination#NEXT_LINK");

			Page.viewCollectionItem(itemName = "Web Content Title 5");
		}
	}

	@description = "This is a test for LPS-110183. Can access to display page in Collection Items modal when the collection item has associated display page template."
	@priority = "5"
	test ViewDisplayPageTemplateViaCollectionItems {
		property portal.acceptance = "true";

		task ("Add a display page template for Web Content Article and Basic Web Content") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Web Content DPT",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add a Display Page Content fragment to DPT then publish") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Web Content DPT");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Display Page Content");

			PageEditor.clickPublish();
		}

		task ("Add three web contents") {
			for (var i : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content ${i}",
					groupName = "Test Site Name",
					title = "Web Content Title ${i}");
			}
		}

		task ("Select Web Content DPT as Specific Display Page Template") {
			for (var i : list "1,2,3") {
				WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

				WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title ${i}");

				WebContent.editDisplayPage(
					pageName = "Web Content DPT",
					pageType = "Display Page Templates");

				PortletEntry.publish();
			}
		}

		task ("Add a manual collection with Web Content Article item type and Basic Web Content item subtype") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article",
				title = "Manual Collection");
		}

		task ("Select all web contents as collection item") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.selectAsset(
				assetListName = "Manual Collection",
				assetType = "Basic Web Content",
				entryList = "Web Content Title 1,Web Content Title 2,Web Content Title 3");
		}

		task ("Add a collection page based on manual collection") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ContentPages.addCollectionPage(
				collectionName = "Manual Collection",
				pageName = "Manual Collection Page Name",
				tabName = "Collections");

			PageEditor.clickPublish();
		}

		task ("View display page of all web contents via collection items in pages admin") {
			for (var i : list "1,2,3") {
				WaitForLiferayEvent.initializeLiferayEventLog();

				PagesAdmin.gotoPageEllipsisMenuItem(
					menuItem = "View Collection Items",
					pageName = "Manual Collection Page Name");

				SelectFrame(locator1 = "IFrame#MODAL_BODY");

				Page.gotoCollectionEntryEllipsisItem(
					item = "View Display Page",
					tableEntry = "Web Content Title ${i}");

				SelectFrameTop();

				ContentPages.viewFragmentText(
					assetType = "journal",
					fragmentName = "Display Page Content",
					text = "Web Content Content ${i}");

				Navigator.gotoBack();
			}
		}

		task ("View display page of all web contents via collection items in page tree") {
			ProductMenu.gotoHomePage();

			PagesFinder.goToPagesFinder();

			for (var i : list "1,2,3") {
				WaitForLiferayEvent.initializeLiferayEventLog();

				PagesFinder.gotoPageEllipsisItem(
					item = "View Collection Items",
					pageName = "Manual Collection Page Name");

				SelectFrame(locator1 = "IFrame#MODAL_BODY");

				Page.gotoCollectionEntryEllipsisItem(
					item = "View Display Page",
					tableEntry = "Web Content Title ${i}");

				SelectFrameTop();

				ContentPages.viewFragmentText(
					assetType = "journal",
					fragmentName = "Display Page Content",
					text = "Web Content Content ${i}");

				PageEditor.clickBack();

				ControlMenu.viewHeaderTitle(headerTitle = "Manual Collection Page Name");
			}
		}
	}

	@description = "This is a test for LPS-145292. The user could view new icons on dropdown menu of page in pages admin."
	@priority = "4"
	test ViewDropdownMenuIconsInPagesAdmin {
		task ("Given a Page designer has a widget page with a custom portlet") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Widget Page Name");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Widget Page Name",
				widgetName = "Web Content Display");

			Navigator.gotoSitePage(
				pageName = "Widget Page Name",
				siteName = "Test Site name");

			Portlet.viewSpecificPG(portletName = "Web Content Display");
		}

		task ("When the Page designer opens the dropdown menu of widget page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.openPageEllipsisMenu(pageName = "Widget Page Name");
		}

		task ("Then the Page designer can see the new icons on the dropdown menu") {
			DropdownMenuItem.viewIcon(iconList = "view,page,copy,cog,password-policies,trash");
		}

		task ("When the Page designer opens the dropdown menu of management toolbar after selecting the new widget page") {
			PagesAdmin.selectPageItem(pageName = "Widget Page Name");

			Click(locator1 = "ManagementBar#MORE_ACTIONS_ELLIPSIS");
		}

		task ("Then the Page designer can see the new icons on the dropdown menu") {
			DropdownMenuItem.viewIcon(iconList = "page,trash");
		}

		task ("When the Page designer access the Orphan Widgets page of widget page") {
			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Orphan Widgets",
				pageName = "Widget Page Name");
		}

		task ("Then the Page designer can see the new icon icon on orphan widget entries") {
			for (var entryName : list "Menu Display,Search Bar,User Personal Bar") {
				AssertVisible(
					key_listEntry = "${entryName}",
					key_text = "trash",
					locator1 = "LexiconList#ANY_ICON");
			}
		}

		task ("Given a Page designer has a published content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page Name",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page Name");
		}

		task ("When the Page designer opens the dropdown menu of content page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.openPageEllipsisMenu(pageName = "Content Page Name");
		}

		task ("Then the Page designer can see the new icons on the dropdown menu") {
			DropdownMenuItem.viewIcon(iconList = "pencil,automatic-translate,view,copy,upload,download,cog,password-policies,trash");
		}
	}

	@description = "This is a test for LPS-110108. Management Toolbar shows count of selected items and all visible items are selected after checking the Select All checkbox."
	@priority = "5"
	test ViewNumberOfSelectedPagesOnManagementToolbar {
		property portal.acceptance = "true";

		task ("Add two widget pages") {
			for (var i : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${i}");
			}
		}

		task ("Select first page in Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PagesAdmin.selectPageItem(pageName = "Test Page Name 1");
		}

		task ("View managment bar text is shown") {
			ManagementBar.viewNumberOfSelectedItems(text = "1 of 2 Selected");
		}

		task ("Select all pages via management bar") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			ManagementBar.clickSelectAllCheckbox();
		}

		task ("View managment bar text is shown") {
			ManagementBar.viewNumberOfSelectedItems(text = "All Selected");
		}

		task ("View both pages are selected") {
			for (var i : list "1,2") {
				PagesAdmin.viewSelectedPageItem(pageName = "Test Page Name ${i}");
			}
		}
	}

}