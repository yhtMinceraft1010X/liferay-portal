@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();

		ACUtils.addSiteAndPage();

		ACUtils.createBlogsAndAddToPage();

		ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		task ("Change blog rating type to star") {
			Ratings.configureRatingType(
				applications = "Blogs",
				portlet = "Ratings",
				ratingType = "Stars",
				siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8923 | Test Summary: Check vote is triggered when voting and check its properties"
	@priority = "5"
	test CheckVoteEventWhenVotingAndCheckProperties {
		property proxy.server.enabled = "true";

		task ("Get the Property ID in AC") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			Pause(locator1 = "10000");

			var expectedChannelId = ACSettings.getPropertyId(propertyName = "${assignedPropertyName}");
		}

		task ("Get the DXP Instance ID in AC") {
			var dataSourceName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var dataSourceName = StringUtil.trim("${dataSourceName}");

			var expectedDataSourceId = ACSettings.getDXPInstanceId(dataSourceName = "${dataSourceName}");
		}

		task ("Sign in as Test Test") {
			ACUtils.launchDXP();
		}

		task ("View the blog entry and rate it") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title",
				pageName = "AC Page",
				siteName = "Site Name");

			task ("Start Har recording") {
				ProxyUtil.startHarRecording("VOTE");

				Pause(locator1 = "5000");
			}

			Ratings.rateStar(ratingStarCount = "4");
		}

		task ("Get entryId of blog entry") {
			var entryId = JSONBlog.getBlogEntryId(
				entryTitle = "Blogs AC Title",
				groupName = "Site Name");
		}

		task ("View the properties of blogVOTE event") {
			ACUtils.assertEventPropertyValue(
				applicationId = "Ratings",
				eventId = "VOTE",
				property = "className",
				value = "com.liferay.blogs.model.BlogsEntry");

			ACUtils.assertEventPropertyValue(
				applicationId = "Ratings",
				eventId = "VOTE",
				property = "classPK",
				value = "${entryId}");

			ACUtils.assertEventPropertyValue(
				applicationId = "Ratings",
				eventId = "VOTE",
				property = "ratingType",
				value = "stars");

			ACUtils.assertEventPropertyValue(
				applicationId = "Ratings",
				eventId = "VOTE",
				property = "score",
				value = "0.8");
		}

		task ("View the request common properties value") {
			ACUtils.assertRequestCommonPropertiesValue(
				expectedChannelId = "${expectedChannelId}",
				expectedDataSourceId = "${expectedDataSourceId}");
		}
	}

}