@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a Web Content Display to page and display the custom event") {
			ACCustomEvents.createWCWithCustomEventAndAddToPage();
		}

		task ("Add a new user") {
			for (var username : list "ac1,ac2") {
				JSONUser.addUser(
					userEmailAddress = "${username}@liferay.com",
					userFirstName = "${username}",
					userLastName = "${username}",
					userScreenName = "${username}");

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "${username}@liferay.com");
			}
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac1@liferay.com",
				userLoginFullName = "ac1 ac1");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: LRAC-7536 | Automation ID: LRAC-10512 | Test Summary: Individual activities chart tooltip events and sessions shown"
	@ignore = "true"
	@priority = "5"
	test AssertChartTooltipEventsAndSessions {

		// AC Bug ticket: LRAC-10734

		var username = "ac1 ac1";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigate to the Known Individuals on the Individuals dashboard") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();
		}

		task ("Get the total number of user activities and navigate to the new individual's page") {
			ACUtils.viewNameList(nameList = "${username}");

			var key_userName = "${username}";
			var currentTotalActivities = selenium.getText("ACIndividualsDashboard#TOTAL_ACTIVITIES");

			ACNavigation.openItem(itemName = "${username}");
		}

		task ("Select Last 24 hours time period in Individuals Events chart") {
			ACTimeFilter.clickTimeFilterButton(cardName = "Individual Events");

			ACTimeFilter.setLast24Hours();
		}

		task ("Mouse over the user activity graph and confirm the elements that are shown in the tooltip") {
			ACIndividualsDashboard.viewActivitiesOnGraph(
				typeList = "Events,Sessions",
				valueList = "${currentTotalActivities},1");
		}

		task ("Go to DXP and create a new custom event") {
			ACUtils.launchDXP(userEmailAddress = "ac1@liferay.com");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigate to the Known Individuals on the Individuals dashboard") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();
		}

		task ("Get the total number of user activities and navigate to the new individual's page") {
			var key_userName = "${username}";
			var newTotalActivities = selenium.getText("ACIndividualsDashboard#TOTAL_ACTIVITIES");

			ACNavigation.openItem(itemName = "${username}");
		}

		task ("Select Last 24 hours time period in Individuals Events chart") {
			ACTimeFilter.clickTimeFilterButton(cardName = "Individual Events");

			ACTimeFilter.setLast24Hours();
		}

		task ("Mouse over the user activity graph and confirm the elements that are shown in the tooltip") {
			ACIndividualsDashboard.viewActivitiesOnGraph(
				notEquals = "${currentTotalActivities}",
				typeList = "Events,Sessions",
				valueList = "${newTotalActivities},2");
		}
	}

	@description = "Feature ID: LRAC-7536 | Automation ID: LRAC-10513 | Test Summary: Empty individual events state"
	@priority = "3"
	test AssertEmptyIndividualEvents {
		property analytics.cloud.upstream = "false";

		task ("Fill fields and create custom event") {
			var customEventName1 = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName1}",
				timeToSendCustomEvent = "1");

			var customEventName2 = ACCustomEvents.generateCustomEventName();
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigate to the Known Individuals on the Individuals dashboard") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();
		}

		task ("Navigate to the individuals page of new user") {
			ACUtils.searchBar(searchItem = "ac1 ac1");

			ACNavigation.openItem(itemName = "ac1 ac1");
		}

		task ("Assert empty state") {
			ACUtils.viewGenericText(textValueList = "There are no events found.,Check back later to verify if data has been received from your data sources.Learn more about individuals.");
		}

		task ("Select Last 24 hours time period in Individuals Events chart") {
			ACTimeFilter.clickTimeFilterButton(cardName = "Individual Events");

			ACTimeFilter.setLast24Hours();
		}

		task ("Assert empty state") {
			ACUtils.searchBar(searchItem = "${customEventName2}");

			ACUtils.viewGenericText(textValueList = "No Events Found,Try a different date range or search term.");
		}
	}

	@description = "Feature ID: LRAC-7536 | Automation ID: LRAC-10509 | Test Summary: Individual activities with session attributes"
	@priority = "5"
	test ViewIndividualActivitiesWithSessionAttributes {
		property analytics.cloud.upstream = "false";

		task ("Fill fields and create custom event") {
			var customEventName1 = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName1}",
				timeToSendCustomEvent = "1");

			// Pause is necessary because poshi logs in from one user to another very quickly.

			Pause(locator1 = "5000");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac2@liferay.com",
				userLoginFullName = "ac2 ac2");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Fill fields and create custom event") {
			var customEventName2 = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName2}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigate to the Known Individuals on the Individuals dashboard") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();
		}

		task ("Navigate to the individuals page of new user") {
			ACUtils.searchBar(searchItem = "ac1 ac1");

			ACNavigation.openItem(itemName = "ac1 ac1");
		}

		task ("Select Last 24 hours time period in Individuals Events chart") {
			ACTimeFilter.clickTimeFilterButton(cardName = "Individual Events");

			ACTimeFilter.setLast24Hours();
		}

		task ("Check if events appear in user history") {
			for (var eventName : list "${customEventName1},webContentClicked") {
				ACUtils.assertPageTitle(pageTitle = "${eventName}");
			}
		}

		task ("Check that the event generated by another user does not appear for ac1") {
			ACUtils.assertPageTitleNotPresent(pageTitle = "${customEventName2}");
		}

		task ("Navigate to the individuals page of new user") {
			ACNavigation.backNavigation(pageName = "Known Individuals");

			ACUtils.searchBar(searchItem = "ac2 ac2");

			ACNavigation.openItem(itemName = "ac2 ac2");
		}

		task ("Select Last 24 hours time period in Individuals Events chart") {
			ACTimeFilter.clickTimeFilterButton(cardName = "Individual Events");

			ACTimeFilter.setLast24Hours();
		}

		task ("Check if events appear in user history") {
			for (var eventName : list "${customEventName2},webContentClicked") {
				ACUtils.assertPageTitle(pageTitle = "${eventName}");
			}
		}

		task ("Check that the event generated by another user does not appear for ac2") {
			ACUtils.assertPageTitleNotPresent(pageTitle = "${customEventName1}");
		}
	}

}