@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Recycle Bin,Web Content Administration";
	property testray.main.component.name = "Recycle Bin";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "Delete web content in recycle bin."
	@priority = "4"
	test DeleteWebcontent {
		task ("Add a web content and move it to recycle bin") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.moveToRecycleBinCP(
				assetType = "Web Content Article",
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title");
		}

		task ("Go to recycle bin and delete it") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "test-site-name");

			RecycleBin.deleteCP(
				assetName = "WC WebContent Title",
				assetType = "Web Content Article");
		}

		task ("Assert asset is not existed in recycle bin") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "test-site-name");

			RecycleBin.viewDefaultCP(assetName = "WC WebContent Title");
		}

		task ("Assert asset is not existed in web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.viewDefaultCP(webContentTitle = "WC WebContent Title");
		}
	}

	@description = "Disable recycle bin and assert could not go to recycle bin after deleting."
	@priority = "3"
	test DisableRecycleBin {
		task ("Go to site to disable recycle bin") {
			Site.openSiteSettingsAdmin(siteURLKey = "test-site-name");

			RecycleBin.disableRecycleBinViaSiteSettings();
		}

		task ("Add a web content and delete it") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.deleteWithDisabledRB(entryTitle = "Web Content Title");
		}
	}

	@description = "Move folder with web content to recycle bin."
	@priority = "3"
	test MoveFolderWithWebContentToRecycleBin {
		task ("Add a wc folder and web content in the folder") {
			JSONWebcontent.addFolder(
				folderName = "WC Folder Name",
				groupName = "Test Site Name");

			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				folderName = "WC Folder Name",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Move the folder with web content to recycle bin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentFolder.moveToRecycleBinCP(
				assetType = "Web Content Folder",
				folderName = "WC Folder Name");
		}

		task ("Assert asset does not exist in web content and exists in recycle bin") {
			WebContent.viewDefaultCP(webContentTitle = "WC Folder Name");

			RecycleBin.openRecycleBinAdmin(siteURLKey = "test-site-name");

			RecycleBin.viewCP(
				assetName = "WC Folder Name",
				assetType = "Web Content Folder",
				deleteUser = "Test Test");
		}
	}

	@description = "This is a use case for LPS-123274. Can move web content to recycle bin via drag and drop."
	@priority = "3"
	test MoveWebContentToRecycleBinViaDragAndDrop {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Navigate to Web Content admin") {
			ApplicationsMenu.gotoSite(site = "Test Site Name");

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Web Content");
		}

		task ("Expand the Recycle Bin category") {
			ProductMenuHelper.expandCategory(category = "Recycle Bin");
		}

		task ("Move the web content to recycle bin via drag and drop") {
			DragAndDrop.dragAndDropToObject(
				key_listEntry = "Web Content Title",
				key_portlet = "Recycle Bin",
				locator1 = "LexiconList#LIST_ENTRY",
				locator2 = "ProductMenu#PORTLET",
				value1 = "Web Content Title");

			Alert.viewSuccessMessage();
		}

		task ("Assert the web content is not shown in Web Content admin") {
			AssertElementNotPresent(
				key_webContentTitle = "Web Content Title",
				locator1 = "WC#ENTRY_LIST_TITLE");
		}

		task ("Assert the web content is shown in Recycle Bin") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "test-site-name");

			RecycleBin.viewCP(
				assetName = "Web Content Title",
				assetType = "Web Content Article",
				deleteUser = "Test Test");
		}
	}

	@description = "Check the staging in recycle bin with and without staged content"
	@priority = "3"
	test RecycleBinStaging {
		task ("Add a page and add WCD to the page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page",
				widgetName = "Web Content Display");
		}

		task ("Go to page and add a web content via WCD") {
			Navigator.gotoSitePage(
				pageName = "Test Page",
				siteName = "Test Site Name");

			WebContentDisplayPortlet.add(
				webContentContent = "WC Content",
				webContentTitle = "WC Title");

			WebContentDisplayPortlet.viewContent(
				webContentContent = "WC Content",
				webContentTitle = "WC Title");
		}

		task ("Enbale local staging without web content") {
			JSONStaging.enableLocalStaging(
				groupName = "Test Site Name",
				unCheckedContent = "com_liferay_journal_web_portlet_JournalPortlet");
		}

		task ("Add a blogs widget and entry to blogs in staging site") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Test Page",
				site = "false",
				widgetName = "Blogs");

			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name (Staging)",
				site = "false",
				title = "Blogs Entry Title");
		}

		task ("Move web content and blog entry to recycle bin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.moveToRecycleBinCP(
				assetType = "Web Content Article",
				webContentTitle = "WC Title");

			Navigator.gotoStagedSitePage(
				pageName = "Test Page",
				siteName = "Test Site Name");

			BlogsEntry.moveToRecycleBinPG(
				assetType = "Blogs Entry",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");
		}

		task ("View blog and WC in recycle bin") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "test-site-name-staging");

			RecycleBin.viewCP(
				assetName = "Blogs Entry Title",
				assetType = "Blogs Entry",
				deleteUser = "Test Test");

			RecycleBin.openRecycleBinAdmin(siteURLKey = "test-site-name");

			RecycleBin.viewCP(
				assetName = "WC Title",
				assetType = "Web Content Article",
				deleteUser = "Test Test");
		}
	}

	@description = "Move a structured web content to recycle bin and restore it."
	@priority = "3"
	test RecycleBinWebContent {
		task ("Add a structure with text field and save") {
			WebContentStructures.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a template to that structure") {
			WebContentTemplates.openWebContentTemplatesAdmin(siteURLKey = "test-site-name");

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Text",
				templateName = "WC Template Name");
		}

		task ("Add a WC basing on the created structure and publish") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "WC WebContent Text",
				webContentTitle = "WC WebContent Title");

			PortletEntry.publish();
		}

		task ("Move WC to recycle bin and view in recycle bin") {
			WebContent.moveToRecycleBinCP(
				assetType = "Web Content Article",
				webContentTitle = "WC WebContent Title");

			RecycleBin.openRecycleBinAdmin(siteURLKey = "test-site-name");

			RecycleBin.viewCP(
				assetName = "WC WebContent Title",
				assetType = "Web Content Article",
				deleteUser = "Test Test");
		}

		task ("Restore WC and view the WC, structure, template are all restored") {
			RecycleBin.restoreCP(
				assetName = "WC WebContent Title",
				assetRestoreLocation = "Home",
				assetType = "Web Content Article");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.viewWithStructureCP(
				webContentText = "WC WebContent Text",
				webContentTitle = "WC WebContent Title");

			WebContentStructures.openWebContentStructuresAdmin(siteURLKey = "test-site-name");

			WebContentStructures.viewCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			LexiconEntry.gotoEntry(rowEntry = "WC Structure Name");

			DataEngine.viewField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentTemplates.openWebContentTemplatesAdmin(siteURLKey = "test-site-name");

			WebContentTemplates.viewCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Text",
				templateName = "WC Template Name");
		}
	}

	@description = "Can move web content to recycle bin via delete icon."
	@priority = "3"
	test RecycleWebContentViaDeleteIcon {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Move web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.moveToRecycleBinViaDeleteIconCP();
		}

		task ("Assert asset does not exist in web content and exists in recycle bin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.viewDefaultCP(webContentTitle = "WC WebContent Title");
		}

		task ("Assert asset does not exist in web content and exists in recycle bin") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "test-site-name");

			RecycleBin.viewCP(
				assetName = "WC WebContent Title",
				assetType = "Web Content Article",
				deleteUser = "Test Test");
		}
	}

	@description = "Can restore a basic web content in recycle bin."
	@priority = "5"
	test RestoreWebcontent {
		property portal.acceptance = "true";

		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Move web content to recycle bin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.moveToRecycleBinCP(
				assetType = "Web Content Article",
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title");
		}

		task ("Restore asset in recycle bin") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "test-site-name");

			RecycleBin.restoreCP(
				assetName = "WC WebContent Title",
				assetRestoreLocation = "Home",
				assetType = "Web Content Article");
		}

		task ("Assert asset does not exist in recycle bin and exists in web content") {
			RecycleBin.viewDefaultCP(assetName = "WC WebContent Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.viewTitle(webContentTitle = "WC WebContent Title");

			WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

			WebContent.viewCP(
				webContentContent = "WC WebContent Content",
				webContentTitle = "WC WebContent Title");
		}
	}

	@description = "Can restore web content within WC folder in recycle bin."
	@priority = "3"
	test RestoreWebContentFromFolderCP {
		task ("Add a WC folder and a web content to it") {
			JSONWebcontent.addFolder(
				folderName = "WC Folder Name",
				groupName = "Test Site Name");

			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				folderName = "WC Folder Name",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Move WC folder to recycle bin and restore the WC") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentFolder.moveToRecycleBinCP(
				assetType = "Web Content Folder",
				folderName = "WC Folder Name");

			RecycleBin.openRecycleBinAdmin(siteURLKey = "test-site-name");

			RecycleBin.restoreContentFromFolderCP(
				assetName = "WC Folder Name",
				assetRestoreLocation = "Home",
				assetType = "Web Content Folder",
				assetType2 = "Web Content Article",
				documentName = "Web Content Title");
		}

		task ("Assert WC is restored") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.viewCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}
	}

	@description = "Can restore web content with versions in recycle bin."
	@priority = "3"
	test RestoreWebContentWithArticleVersions {
		task ("Add a WC folder and WC to the folder") {
			JSONWebcontent.addFolder(
				folderName = "WC Folder Name",
				groupName = "Test Site Name");

			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				folderName = "WC Folder Name",
				groupName = "Test Site Name",
				title = "Web Content Title");
		}

		task ("Edit the web content 3 times") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentFolder.gotoCP(
				folderName = "WC Folder Name",
				webContentTitle = "WC Folder Name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editCP(
				webContentContentEdit = "Web Content Content Edit 1",
				webContentTitle = "Web Content Title",
				webContentTitleEdit = "Web Content Title Edit 1");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title Edit 1");

			WebContent.editCP(
				webContentContentEdit = "Web Content Content Edit 2",
				webContentTitle = "Web Content Title Edit 1",
				webContentTitleEdit = "Web Content Title Edit 2");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title Edit 2");

			WebContent.editCP(
				webContentContentEdit = "Web Content Content Edit 3",
				webContentTitle = "Web Content Title Edit 2",
				webContentTitleEdit = "Web Content Title Edit 3");
		}

		task ("Expire the third web content") {
			WebContent.expireSpecificVersionCP(
				webContentList = "Web Content Title Edit 1,Web Content Title Edit 2",
				webContentTitle = "Web Content Title Edit 3");
		}

		task ("Save the web content as draft") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentFolder.gotoCP(
				folderName = "WC Folder Name",
				webContentTitle = "WC Folder Name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title Edit 3");

			WebContent.editCP(
				saveAsDraft = "true",
				webContentContentEdit = "Web Content Content Edit Draft",
				webContentTitle = "Web Content Title Edit 3",
				webContentTitleEdit = "Web Content Title Edit Draft");
		}

		task ("Move WC folder to recycle bin and restore in recycle bin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentFolder.moveToRecycleBinCP(
				assetType = "Web Content Folder",
				folderName = "WC Folder Name");

			RecycleBin.openRecycleBinAdmin(siteURLKey = "test-site-name");

			RecycleBin.restoreCP(
				assetName = "WC Folder Name",
				assetRestoreLocation = "Home",
				assetType = "Web Content Folder");
		}

		task ("View WC status in specific version") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentFolder.gotoCP(
				folderName = "WC Folder Name",
				webContentTitle = "WC Folder Name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Web Content Title Edit Draft",
				menuItem = "View History");

			WebContent.viewSpecificVersionHistoryCP(
				webContentStatus = "APPROVED",
				webContentTitle = "Web Content Title");

			WebContent.viewSpecificVersionHistoryCP(
				webContentStatus = "EXPIRED",
				webContentTitle = "Web Content Title Edit 1");

			WebContent.viewSpecificVersionHistoryCP(
				webContentStatus = "EXPIRED",
				webContentTitle = "Web Content Title Edit 2");

			WebContent.viewSpecificVersionHistoryCP(
				webContentStatus = "APPROVED",
				webContentTitle = "Web Content Title Edit 3");

			WebContent.viewSpecificVersionHistoryCP(
				webContentStatus = "DRAFT",
				webContentTitle = "Web Content Title Edit Draft");
		}
	}

	@description = "Can undo move to recycle bin action."
	@priority = "3"
	test UndoMoveToRecycleBin {
		task ("Add a web conent") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Move wc to recycle bin and undo") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.moveToRecycleBinCP(
				assetType = "Web Content Article",
				webContentTitle = "WC WebContent Title");

			RecycleBin.undoMoveToRecycleBin();
		}

		task ("View web content exists in web content admin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.viewTitle(webContentTitle = "WC WebContent Title");
		}

		task ("View WC does not exist in recycle bin") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "test-site-name");

			RecycleBin.viewDefaultCP(assetName = "WC WebContent Title");
		}
	}

	@description = "Can have 2 duplicate asset names in recycle bin."
	@priority = "3"
	test ViewDuplicateAssetNamesInRecycleBin {
		task ("Add a web content and move it to recycle bin via delete icon") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.moveToRecycleBinViaDeleteIconCP();
		}

		task ("View WC exists in recycle bin") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "test-site-name");

			RecycleBin.viewCP(
				assetName = "WC WebContent Title",
				assetType = "Web Content Article",
				deleteUser = "Test Test");
		}

		task ("Add a same title web content and move it to recycle bin via delete icon") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.moveToRecycleBinViaDeleteIconCP();
		}

		task ("View 2 web content with same title exist") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "test-site-name");

			RecycleBin.viewDuplicateNames(assetName = "WC WebContent Title");
		}
	}

	@description = "Can have 2 duplicate folder names in recycle bin."
	@priority = "4"
	test ViewDuplicateFolderNamesInRecycleBin {
		task ("View 2 web content with same title exist") {
			JSONWebcontent.addFolder(
				folderName = "WC Folder Name",
				groupName = "Test Site Name");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentFolder.moveToRecycleBinCP(
				assetType = "Web Content Folder",
				folderName = "WC Folder Name");
		}

		task ("View 2 web content with same title exist") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "test-site-name");

			RecycleBin.viewCP(
				assetName = "WC Folder Name",
				assetType = "Web Content Folder",
				deleteUser = "Test Test");
		}

		task ("View 2 web content with same title exist") {
			JSONWebcontent.addFolder(
				folderName = "WC Folder Name",
				groupName = "Test Site Name");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentFolder.moveToRecycleBinCP(
				assetType = "Web Content Folder",
				folderName = "WC Folder Name");
		}

		task ("View 2 web content with same title exist") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "test-site-name");

			RecycleBin.viewDuplicateNames(assetName = "WC Folder Name");
		}
	}

	@description = "Can click success link to view the web content moved to recycle bin."
	@priority = "3"
	test ViewRecycleBinEntryViaSuccessMessageLink {
		task ("Add a web content") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Site Name",
				title = "WC WebContent Title");
		}

		task ("Move web content to recycle bin") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContent.moveToRecycleBinCP(
				assetType = "Web Content Article",
				webContentTitle = "WC WebContent Title");
		}

		task ("View web content via success message link") {
			RecycleBin.gotoEntryViaSuccessMessage(assetName = "WC WebContent Title");

			RecycleBin.viewEntry(assetName = "WC WebContent Title");
		}
	}

}