@component-name = "portal-segmentation"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Segmentation";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a use case for LPS-110191. The related assets should be in AP when select Related Assets as Collection Provider."
	@priority = "5"
	@uitest
	test DisplayRelatedAssetsInAssetPublisher {
		property portal.acceptance = "true";

		task ("Add a Web Content Article, a Blogs Entry and a Document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document_1.png",
				groupName = "Test Site Name",
				mimeType = "image/png",
				sourceFileName = "Document_1.png");
		}

		task ("Select the Blogs Entry and Document as Relate Assets in Web Content Article") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			RelatedAssets.selectAsset(
				assetTitle = "Blogs Entry Title",
				assetType = "Blogs Entry");

			WaitForElementNotPresent(locator1 = "IFrame#DIALOG");

			AssertTextEquals.assertPartialText(
				key_assetTitle = "Blogs Entry Title",
				locator1 = "AssetRelatedAssets#RELATED_ASSETS_TABLE_TITLE",
				value1 = "Blogs Entry Title");

			RelatedAssets.selectAsset(
				assetTitle = "Document_1.png",
				assetType = "Basic Document");

			WaitForElementNotPresent(locator1 = "IFrame#DIALOG");

			AssertTextEquals.assertPartialText(
				key_assetTitle = "Blogs Entry Title",
				locator1 = "AssetRelatedAssets#RELATED_ASSETS_TABLE_TITLE",
				value1 = "Blogs Entry Title");

			AssertTextEquals.assertPartialText(
				key_assetTitle = "Document_1.png",
				locator1 = "AssetRelatedAssets#RELATED_ASSETS_TABLE_TITLE",
				value1 = "Document_1.png");

			PortletEntry.publish();
		}

		task ("Add a widget page and add two Asset Publisher portlets to page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			JSONLayout.addWidgetToPublicLayout(
				column = "1",
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Asset Publisher");

			JSONLayout.addWidgetToPublicLayout(
				column = "2",
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Navigate to new site page") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");
		}

		task ("Select Related Assets as Collection Provider for Asset Publisher in Column 2") {
			AssetPublisherPortlet.configureCollectionProviderPG(
				collectionProviderName = "Related Assets",
				columnNumnber = "2");
		}

		task ("Assert no results message shown on Asset Publisher in Column 2") {
			AssertTextEquals(
				locator1 = "//div[@id='column-2']//section[contains(@id,'AssetPublisher')]//div[contains(@class,'alert alert-info')]",
				value1 = "There are no results.");
		}

		task ("Click the title of Web Content Article on Asset Publisher in Column 1") {
			AssertClick(
				key_assetTitle = "Web Content Title",
				locator1 = "AP#ASSET_ABSTRACT_TITLE",
				value1 = "Web Content Title");
		}

		task ("Assert Blogs Entry and Document are shown on Asset Publisher in Column 2") {
			AssertTextEquals(
				locator1 = "//div[@id='column-2']//section[contains(@id,'AssetPublisher')]//*[contains(@class,'asset-title')][normalize-space(text())='Blogs Entry Title']",
				value1 = "Blogs Entry Title");

			AssertTextEquals(
				locator1 = "//div[@id='column-2']//section[contains(@id,'AssetPublisher')]//*[contains(@class,'asset-title')][normalize-space(text())='Document_1.png']",
				value1 = "Document_1.png");
		}
	}

	@description = "This is a use case for LPS-91001. The assets are sorted correctly in Asset Publisher when select collection provider and enable pagination."
	@priority = "4"
	@uitest
	test ViewAssetsInAssetPublisherWhenSelectHighestRatedAssetsAndEnablePagination {
		task ("Add 5 Web Content Articles") {
			for (var n : list "1,2,3,4,5") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content ${n}",
					groupName = "Test Site Name",
					title = "Web Content Title ${n}");
			}
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Change layout template of page to 1 Column") {
			JSONLayout.updateLayoutTemplateOfPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				layoutTemplate = "1 Column");
		}

		task ("Add an Asset Publisher to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				widgetName = "Asset Publisher");
		}

		task ("Enable Ratings in Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssetPublisherPortlet.configureDisplaySettings(displaySettings = "Ratings");

			IFrame.closeFrame();
		}

		task ("Vote for web contents from 1 to 5") {
			var n = "1";

			for (var assetTitle : list "Web Content Title 3,Web Content Title 1,Web Content Title 5,Web Content Title 2,Web Content Title 4") {
				Ratings.rateStarSpecificAsset(
					assetTitle = "${assetTitle}",
					ratingStarCount = "${n}");

				var n = ${n} + 1;
			}
		}

		task ("Select Highest Rated Assets in Asset Publisher") {
			AssetPublisherPortlet.configureCollectionProviderPG(collectionProviderName = "Highest Rated Assets");
		}

		task ("Set 3 as Number of Items to Display and Select Regular in Pagination Type") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			AssetPublisherPortlet.configurePaginationPG(
				paginationNumber = "3",
				paginationType = "Regular");
		}

		task ("View web contents in Page 1") {
			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewPaginatedAssetsPG(
				pageMod = "1 - 3 of 5",
				pageNumber = "1 of 2",
				paginationNumber = "3",
				paginationType = "Regular");

			AssetPublisherPortlet.viewAssetOrderPG(assetTitleList = "Web Content Title 4,Web Content Title 2,Web Content Title 5");

			for (var n : list "1,3") {
				AssetPublisherPortlet.viewAssetNotPresentPG(
					assetContent = "Web Content Content ${n}",
					assetTitle = "Web Content Title ${n}");
			}
		}

		task ("View web contents in Page 2") {
			Click(locator1 = "Pagination#NEXT_LINK");

			AssetPublisherPortlet.viewPaginatedAssetsPG(
				pageMod = "4 - 5 of 5",
				pageNumber = "2 of 2",
				paginationNumber = "3",
				paginationType = "Regular");

			AssetPublisherPortlet.viewAssetOrderPG(assetTitleList = "Web Content Title 1,Web Content Title 3");

			for (var n : list "4,2,5") {
				AssetPublisherPortlet.viewAssetNotPresentPG(
					assetContent = "Web Content Content ${n}",
					assetTitle = "Web Content Title ${n}");
			}
		}
	}

	@description = "This is a use case for LPS-91001. The collection providers should be available in all areas where the Asset Publisher is available."
	@priority = "4"
	@uitest
	test ViewCollectionProvidersInAssetPublisher {
		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");
		}

		task ("Add an Asset Publisher to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name",
				widgetName = "Asset Publisher");
		}

		task ("View collection providers in Asset Publisher") {
			Navigator.gotoSitePage(
				pageName = "Test Widget Page Name",
				siteName = "Test Site Name");

			WaitForLiferayEvent.initializeLiferayEventLog();

			AssetPublisherPortlet.gotoConfigurationPG(portletName = "Asset Publisher");

			Navigator.gotoNavTab(navTab = "Asset Selection");

			Click(locator1 = "APConfiguration#ASSET_SELECTION_ASSET_LIST");

			Panel.expandPanel(panel = "Select Collection");

			Button.clickSelect();

			WaitForElementPresent(locator1 = "IFrame#ASSET_LIST_DIALOG");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			NavItem.click(navItem = "Collection Providers");

			for (var collectionProviderName : list "Highest Rated Assets,Most Viewed Assets,Related Assets,Recent Content") {
				LexiconCard.viewCardPresent(card = "${collectionProviderName}");
			}
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");
		}

		task ("Add an Asset Publisher to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addWidget(portletName = "Asset Publisher");
		}

		task ("View collection providers in Asset Publisher") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			AssetPublisherPortlet.gotoConfigurationPG(portletName = "Asset Publisher");

			Navigator.gotoNavTab(navTab = "Asset Selection");

			Click(locator1 = "APConfiguration#ASSET_SELECTION_ASSET_LIST");

			Panel.expandPanel(panel = "Select Collection");

			Button.clickSelect();

			WaitForElementPresent(locator1 = "IFrame#ASSET_LIST_DIALOG");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			NavItem.click(navItem = "Collection Providers");

			for (var collectionProviderName : list "Highest Rated Assets,Most Viewed Assets,Related Assets,Recent Content") {
				LexiconCard.viewCardPresent(card = "${collectionProviderName}");
			}
		}

		task ("Add a page template collection") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");
		}

		task ("Add a widget page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Test Widget Page Template Name",
				layoutPageTemplateStatus = "Approved",
				layoutPageTemplateType = "Widget Page Template");
		}

		task ("Add an Asset Publisher to widget page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Test Widget Page Template Name");

			Portlet.addPG(portletName = "Asset Publisher");
		}

		task ("View collection providers in Asset Publisher") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			AssetPublisherPortlet.gotoConfigurationPG(portletName = "Asset Publisher");

			Navigator.gotoNavTab(navTab = "Asset Selection");

			Click(locator1 = "APConfiguration#ASSET_SELECTION_ASSET_LIST");

			Panel.expandPanel(panel = "Select Collection");

			Button.clickSelect();

			WaitForElementPresent(locator1 = "IFrame#ASSET_LIST_DIALOG");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			NavItem.click(navItem = "Collection Providers");

			for (var collectionProviderName : list "Highest Rated Assets,Most Viewed Assets,Related Assets,Recent Content") {
				LexiconCard.viewCardPresent(card = "${collectionProviderName}");
			}
		}

		task ("Add a content page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Test Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Test Content Page Template Name",
				layoutPageTemplateStatus = "Draft",
				layoutPageTemplateType = "Content Page Template");
		}

		task ("Add an Asset Publisher to content page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "test-site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Test Content Page Template Name");

			PageEditor.assertFragmentSidebarLoaded();

			PageEditor.addWidget(portletName = "Asset Publisher");
		}

		task ("View collection providers in Asset Publisher") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			AssetPublisherPortlet.gotoConfigurationPG(portletName = "Asset Publisher");

			Navigator.gotoNavTab(navTab = "Asset Selection");

			Click(locator1 = "APConfiguration#ASSET_SELECTION_ASSET_LIST");

			Panel.expandPanel(panel = "Select Collection");

			Button.clickSelect();

			WaitForElementPresent(locator1 = "IFrame#ASSET_LIST_DIALOG");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			NavItem.click(navItem = "Collection Providers");

			for (var collectionProviderName : list "Highest Rated Assets,Most Viewed Assets,Related Assets,Recent Content") {
				LexiconCard.viewCardPresent(card = "${collectionProviderName}");
			}
		}

		task ("Add a display page template") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = "Test Site Name",
				subType = "Basic Web Content");
		}

		task ("Add an Asset Publisher to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addWidget(portletName = "Asset Publisher");
		}

		task ("View collection providers in Asset Publisher") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			AssetPublisherPortlet.gotoConfigurationPG(portletName = "Asset Publisher");

			Navigator.gotoNavTab(navTab = "Asset Selection");

			Click(locator1 = "APConfiguration#ASSET_SELECTION_ASSET_LIST");

			Panel.expandPanel(panel = "Select Collection");

			Button.clickSelect();

			WaitForElementPresent(locator1 = "IFrame#ASSET_LIST_DIALOG");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			NavItem.click(navItem = "Collection Providers");

			for (var collectionProviderName : list "Highest Rated Assets,Most Viewed Assets,Related Assets,Recent Content") {
				LexiconCard.viewCardPresent(card = "${collectionProviderName}");
			}
		}

		task ("Add a master page") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = "Test Site Name",
				masterPageTemplateEntryName = "Custom Masters Page Template");
		}

		task ("Add an Asset Publisher to master page") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "test-site-name");

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.addWidget(
				dropTarget = "Header",
				portletName = "Asset Publisher",
				scope = "Master");
		}

		task ("View collection providers in Asset Publisher") {
			WaitForLiferayEvent.initializeLiferayEventLog();

			AssetPublisherPortlet.gotoConfigurationPG(portletName = "Asset Publisher");

			Navigator.gotoNavTab(navTab = "Asset Selection");

			Click(locator1 = "APConfiguration#ASSET_SELECTION_ASSET_LIST");

			Panel.expandPanel(panel = "Select Collection");

			Button.clickSelect();

			WaitForElementPresent(locator1 = "IFrame#ASSET_LIST_DIALOG");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			NavItem.click(navItem = "Collection Providers");

			for (var collectionProviderName : list "Highest Rated Assets,Most Viewed Assets,Related Assets,Recent Content") {
				LexiconCard.viewCardPresent(card = "${collectionProviderName}");
			}
		}
	}

}