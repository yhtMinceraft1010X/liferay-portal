@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site and blog") {
			ACUtils.addSiteAndPage();

			ACUtils.createBlogsAndAddToPage();
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");

			CustomFields.tearDownCP();

			JSONUser.tearDownNonAdminUsers();
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8565 | Test Summary: Add segment using an individual property 'role'"
	@priority = "4"
	test CanAddSegmentUsingIndividualPropertyRole {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "SegmentsCreationIndividualAttributes#CanAddSegmentUsingIndividualPropertyRole";

		task ("Add a new regular role and assign to the user") {
			JSONRole.addRegularRole(
				roleKey = "AC Seg Reg Role",
				roleTitle = "AC Seg Reg Role");

			JSONRole.assignRoleToUser(
				roleTitle = "AC Seg Reg Role",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as the new added user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new dynamic segment using Individual Property Role") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Using Individual Property Role");

			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "Role");

			ACSegments.selectOperator(operator = "is");

			ACSegments.selectDocument(
				documentTitle = "AC Seg Reg Role",
				indexField = "1");
		}

		task ("View the user showns on the Preview mode") {
			ACSegments.previewSegmentMembership();

			ACUtils.viewNameList(nameList = "ac ac");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8564 | Test Summary: Add segment using an individual property 'site'"
	@priority = "4"
	test CanAddSegmentUsingIndividualPropertySite {
		property portal.upstream = "quarantine";

		// AC Quarantine Reason: Not navigating DXP with the correct user line 162

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac1@liferay.com",
				userFirstName = "ac1",
				userLastName = "ac1",
				userScreenName = "ac1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac1@liferay.com");
		}

		task ("Assign the user to site") {
			JSONGroup.assignUserToGroup(
				groupName = "Site Name",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as the new users") {
			ACUtils.navigateToSitePageWithUser(
				actionType = "View Blog",
				documentTitleList = "Blogs AC Title,Blogs AC Title",
				emailList = "${emailList}",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new dynamic segment using Individual Property Site") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Using Individual Property Site");

			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "Site Membership");

			ACSegments.selectOperator(operator = "is");

			ACSegments.selectDocument(
				documentTitle = "Site Name",
				indexField = "1");
		}

		task ("View the user showns on the Preview mode and save segment") {
			ACSegments.previewSegmentMembership();

			ACUtils.viewNameList(nameList = "ac ac");

			Button.clickDone();

			ACSegments.saveSegment();
		}

		task ("Assert that the user is present in the Segments") {
			ACNavigation.switchTab(tabName = "Membership");

			ACUtils.viewNameList(nameList = "ac ac");
		}

		task ("Edit Segment") {
			Button.click(button = "Edit Segment");

			ACSegments.selectOperator(operator = "is not");

			ACSegments.selectDocument(
				documentTitle = "Site Name",
				indexField = "1");

			ACSegments.previewSegmentMembership();

			ACUtils.viewNameList(nameList = "ac1 ac1");
		}

		task ("View the user showns on the Preview mode and save segment") {
			ACSegments.previewSegmentMembership();

			ACUtils.viewNameList(nameList = "ac1 ac1");

			Button.clickDone();

			ACSegments.saveSegment();
		}

		task ("Assert that the user is present in the Segments") {
			ACNavigation.switchTab(tabName = "Membership");

			ACUtils.viewNameList(nameList = "ac1 ac1");
		}

		task ("Edit Segment") {
			Button.click(button = "Edit Segment");

			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "Site Membership");

			ACSegments.selectOperator(operator = "is not");

			ACSegments.selectDocument(
				documentTitle = "Site Name",
				indexField = "1");

			ACSegments.selectDocument(
				documentTitle = "Site Name",
				indexField = "2");

			ACSegments.editConjunction();
		}

		task ("View the users showns on the Preview mode and save segment") {
			ACSegments.previewSegmentMembership();

			ACUtils.viewNameList(nameList = "ac ac,ac1 ac1");

			Button.clickDone();

			ACSegments.saveSegment();
		}

		task ("Assert that the users are present in the Segments") {
			ACNavigation.switchTab(tabName = "Membership");

			ACUtils.viewNameList(nameList = "ac ac,ac1 ac1");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8566 | Test Summary: Add segment using an individual property 'team'"
	@priority = "4"
	test CanAddSegmentUsingIndividualPropertyTeam {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "SegmentsCreationIndividualAttributes#CanAddSegmentUsingIndividualPropertyTeam";

		task ("Assign the site to user") {
			JSONGroup.assignUserToGroup(
				groupName = "Site Name",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Assign the user to Team") {
			Site.openSiteTeamsAdmin(siteURLKey = "site-name");

			Team.addCP(
				teamDescription = "Site Team Description",
				teamName = "Site Team Name");

			Team.assignMembersCP(
				teamName = "Site Team Name",
				userScreenName = "ac");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as the new added user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new dynamic segment using Individual Property Team") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Using Individual Property Team");

			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "Team");

			ACSegments.selectOperator(operator = "is");

			ACSegments.selectDocument(
				documentTitle = "Site Team Name",
				indexField = "1");
		}

		task ("View the user showns on the Preview mode") {
			ACSegments.previewSegmentMembership();

			ACUtils.viewNameList(nameList = "ac ac");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8568 | Test Summary: Add segment using an individual property 'user'"
	@ignore = "true"
	@priority = "4"
	test CanAddSegmentUsingIndividualPropertyUser {

		// AC Refactor ticket: LRAC-9332
		// AC Bug ticket: LRAC-10593

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as the new added user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new dynamic segment using Individual Property User criteria") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Using Individual Property User");

			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "DXP User");

			ACSegments.selectOperator(operator = "is");

			ACSegments.selectDocument(
				documentTitle = "ac ac",
				indexField = "1");
		}

		task ("View and assert that the user is in the list") {
			ACSegments.previewSegmentMembership();

			ACUtils.viewNameList(nameList = "ac ac");

			ACSegments.saveSegment();
		}

		task ("Go to membership tab and assert that the user is in the list") {
			ACNavigation.switchTab(tabName = "Membership");

			ACUtils.viewNameList(nameList = "ac ac");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8567 | Test Summary: Add segment using an individual property 'user group'"
	@priority = "4"
	test CanAddSegmentUsingIndividualPropertyUserGroup {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "SegmentsCreationIndividualAttributes#CanAddSegmentUsingIndividualPropertyUserGroup";

		task ("Add a new user group and assign to the user") {
			JSONUserGroup.addUserGroup(
				userGroupDescription = "UG UserGroup Description",
				userGroupName = "UG UserGroup Name");

			JSONUser.addUserToUserGroup(
				userEmailAddress = "ac@liferay.com",
				userGroupName = "UG UserGroup Name");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as the new added user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new dynamic segment using Individual Property User Group") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Using Individual Property User Group");

			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "User Group");

			ACSegments.selectOperator(operator = "is");

			ACSegments.selectDocument(
				documentTitle = "UG UserGroup Name",
				indexField = "1");
		}

		task ("View the user showns on the Preview mode") {
			ACSegments.previewSegmentMembership();

			ACUtils.viewNameList(nameList = "ac ac");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8569 | Test Summary: Add segment with custom field for individuals"
	@priority = "4"
	test CanAddSegmentWithCustomFieldsForIndividuals {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "SegmentsCreationIndividualAttributes#CanAddSegmentWithCustomFieldsForIndividuals";

		task ("Add a user custom field") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Custom Fields");

			CustomFields.addCP(
				customFieldName = "User Custom Field",
				customFieldType = "Input Field",
				customInputDataType = "Text",
				resourceName = "User");
		}

		task ("Define the value of custom field for new user") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.gotoEditCP(userScreenName = "ac");

			User.editUserInformation(
				userCustomField = "VIP",
				userCustomFieldLabel = "User Custom Field");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewUserData(fieldNameList = "user custom field");
		}

		task ("Redefine the value of the custom field") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.gotoEditCP(userScreenName = "ac");

			User.editUserInformation(
				userCustomField = "VIP AC",
				userCustomFieldLabel = "User Custom Field");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as the new added user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new dynamic segment using Individual Property Custom Fields") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Using Individual Property Custom Fields");

			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "user custom field");

			ACSegments.selectOperator(operator = "contains");

			ACSegments.editTextCriterion(textInput = "VIP AC");
		}

		task ("View the user shown on the Preview mode") {
			ACSegments.previewSegmentMembership();

			ACUtils.viewNameList(nameList = "ac ac");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8570 | Test Summary: Add segment with custom fields for organizations"
	@priority = "4"
	test CanAddSegmentWithCustomFieldsForOrganizations {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "SegmentsCreationIndividualAttributes#CanAddSegmentWithCustomFieldsForOrganizations";

		task ("Add a new organization and assign to the user") {
			JSONOrganization.addOrganization(organizationName = "Organization Name");

			JSONOrganization.assignUserToOrganization(
				organizationName = "Organization Name",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Add Custom Fields for organization") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Custom Fields");

			CustomFields.addCP(
				customFieldName = "Org Custom Field",
				customFieldType = "Text Area",
				resourceName = "Organization");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("View the page as the new added user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new dynamic segment using Organization Custom Fields") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "Dynamic Segment Using Organization Custom Fields");

			ACSegments.goToSidebarAttributes(criterion = "Organization Attributes");

			ACSegments.addSegmentField(segmentField = "org custom field");

			ACSegments.selectOperator(operator = "is not");

			ACSegments.editTextCriterion(textInput = "defined");
		}

		task ("View the user showns on the Preview mode") {
			ACSegments.previewSegmentMembership();

			ACUtils.viewNameList(nameList = "ac ac");
		}
	}

}