@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Pages Tree";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-103104. Can add pages of different types via page tree panel."
	@priority = "3"
	test AddAllTypesOfPages {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Add different types of pages via page tree") {
			ApplicationsMenu.gotoSite(site = "Test Site Name");

			PagesFinder.goToPagesFinder();

			for (var pageType : list "Widget Page,Panel,Page Set,Link to a Page of This Site,Full Page Application") {
				PagesFinder.addPublicPage(
					pageName = "Test ${pageType}",
					sitePageType = "${pageType}");
			}

			for (var pageType : list "Embedded,Link to URL") {
				PagesFinder.addPublicPage(
					pageName = "Test ${pageType}",
					pageTypeURL = "https://www.google.com",
					sitePageType = "${pageType}");
			}

			PagesFinder.addPublicContentPage(pageName = "Test Content Page");

			PageEditor.clickPublish();

			PagesFinder.goToPagesFinder();

			PagesFinder.addPrivatePage(
				pageName = "Test Private Widget Page",
				sitePageType = "Widget Page");
		}

		task ("View public page names in page tree") {
			PagesFinder.selectPageType(optionValue = "Public Pages");

			for (var pageType : list "Widget Page,Panel,Page Set,Link to a Page of This Site,Full Page Application,Embedded,Link to URL,Content Page") {
				PagesFinder.viewPageNameInPagesFinder(pageName = "Test ${pageType}");
			}
		}

		task ("View private page name in page tree") {
			PagesFinder.selectPageType(optionValue = "Private Pages");

			PagesFinder.viewPageNameInPagesFinder(pageName = "Test Private Widget Page");
		}
	}

	@description = "This is a test for LPS-103104 and LPS-140253. Can add pages of different types via page tree panel. View no private page in page tree."
	@priority = "3"
	test AddAllTypesOfPagesFF {
		task ("Add different types of pages via page tree") {
			ApplicationsMenu.gotoSite(site = "Test Site Name");

			PagesFinder.goToPagesFinder();

			for (var pageType : list "Widget Page,Panel,Page Set,Link to a Page of This Site,Full Page Application") {
				PagesFinder.addPage(
					pageName = "Test ${pageType}",
					sitePageType = "${pageType}");
			}

			for (var pageType : list "Embedded,Link to URL") {
				PagesFinder.addPage(
					pageName = "Test ${pageType}",
					pageTypeURL = "https://www.google.com",
					sitePageType = "${pageType}");
			}

			PagesFinder.addContentPage(pageName = "Test Content Page");

			PageEditor.clickPublish();
		}

		task ("View public page names in page tree") {
			PagesFinder.selectPageType(optionValue = "Pages Hierarchy");

			for (var pageType : list "Widget Page,Panel,Page Set,Link to a Page of This Site,Full Page Application,Embedded,Link to URL,Content Page") {
				PagesFinder.viewPageNameInPagesFinder(pageName = "Test ${pageType}");
			}
		}
	}

	@description = "This is a test for LPS-103104 and LPS-102544. Can add a child page via page tree panel."
	@priority = "5"
	@uitest
	test AddChildPage {
		property portal.acceptance = "true";

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}

		task ("Add a child page via page tree") {
			Navigator.openSiteURL(siteName = "Test Site Name");

			PagesFinder.goToPagesFinder();

			PagesFinder.addChildPage(
				childPageName = "Test Child Page",
				parentPageName = "Test Page Name");
		}

		task ("Navigate to child page via page tree") {
			PagesFinder.navigateToChildPage(
				childPageName = "Test Child Page",
				parentPageName = "Test Page Name");
		}
	}

	@description = "This is a test for LPS-107774. Can create a Collection Page based on Collections or Collection Providers in Pages Tree panel."
	@priority = "5"
	@uitest
	test AddCollectionPage {
		property portal.acceptance = "true";

		task ("Add three web contents based on Basic Web Content") {
			for (var n : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = "Test Site Name",
					title = "Web Content Title ${n}");
			}
		}

		task ("Add a dynamic collection for Web Content Article and Basic Web Content") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article",
				title = "Dynamic Collection");
		}

		task ("Add a collection page based on dynamic collection via page tree") {
			ApplicationsMenu.gotoSite(site = "Test Site Name");

			PagesFinder.goToPagesFinder();

			PagesFinder.addCollectionPage(
				collectionName = "Dynamic Collection",
				pageName = "Test Collection Page Name 1",
				tabName = "Collections");
		}

		task ("View the page name is shown on control menu") {
			ControlMenu.viewHeaderTitle(headerTitle = "Test Collection Page Name 1 *");
		}

		task ("View the collection name shown in Heading fragment") {
			AssertVisible(
				key_elementHeader = "//div[contains(.,'Dynamic Collection') and contains(@id,'fragment-')]",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}

		task ("View web contents are shown in Collection Display") {
			var i = "1";

			for (var n : list "3,2,1") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "Web Content Title ${n}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${i}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var i = ${i} + 1;
			}
		}

		task ("View the collection name as draft in the page tree") {
			PagesFinder.viewPageNameInPagesFinder(pageName = "Test Collection Page Name 1*");
		}

		task ("Add a collection page based on Highest Rated Assets via page tree") {
			PagesFinder.goToPagesFinder();

			PagesFinder.addCollectionPage(
				collectionName = "Highest Rated Assets",
				pageName = "Test Collection Page Name 2",
				tabName = "Collection Providers");
		}

		task ("View the page name is shown on control menu") {
			ControlMenu.viewHeaderTitle(headerTitle = "Test Collection Page Name 2 *");
		}

		task ("View the collection name shown in Heading fragment") {
			AssertVisible(
				key_elementHeader = "//div[contains(.,'Highest Rated Assets') and contains(@id,'fragment-')]",
				key_position = "1",
				locator1 = "PageEditor#CONTAINER_CONTAINER_NESTED_ELEMENT");
		}

		task ("View web contents are shown in Collection Display") {
			var i = "1";

			for (var n : list "3,2,1") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "Web Content Title ${n}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${i}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var i = ${i} + 1;
			}
		}

		task ("View the draft collection page name in the page tree") {
			PagesFinder.viewPageNameInPagesFinder(pageName = "Test Collection Page Name 1*");
		}
	}

	@description = "This is a test for LPS-107775. Can add new collections when add a collection page from page tree panel."
	@priority = "5"
	test AddCollectionWhenAddingCollectionPage {
		property portal.acceptance = "true";

		task ("Add a collection page based on manual collection via page tree") {
			ProductMenu.gotoSite(site = "Test Site Name");

			PagesFinder.goToPagesFinder();

			PagesFinder.addCollectionPage(
				collectionName = "Manual Collection Name",
				menuItem = "Manual Collection",
				pageName = "Manual Collection Page Name",
				selectedAsset = "All Types",
				tabName = "Collections");

			PageEditor.clickPublish();
		}

		task ("Add a collection page based on dynamic collection via page tree") {
			PagesFinder.addCollectionPage(
				collectionName = "Dynamic Collection Name",
				menuItem = "Dynamic Collection",
				pageName = "Dynamic Collection Page Name",
				selectedAsset = "All Types",
				tabName = "Collections");

			PageEditor.clickPublish();
		}

		task ("View collection page names in page tree") {
			for (var text : list "Manual,Dynamic") {
				PagesFinder.viewPageNameInPagesFinder(pageName = "${text} Collection Page Name");
			}
		}
	}

	@description = "This is a test for LPS-103104 and LPS-112989. Can add a widget page via page tree panel."
	@priority = "5"
	test AddWidgetPage {
		property portal.acceptance = "true";

		task ("Add a widget page via page tree") {
			ApplicationsMenu.gotoSite(site = "Test Site Name");

			PagesFinder.goToPagesFinder();

			PagesFinder.addPage(pageName = "Test Page Name");
		}

		task ("View widget page name in page tree") {
			PagesFinder.viewPageNameInPagesFinder(pageName = "Test Page Name");
		}

		task ("Navigate to widget page via page tree") {
			PagesFinder.navigateToPage(pageName = "Test Page Name");
		}
	}

	@description = "This is a test for LPS-116618 and LPS-112992. Configure page via Page Tree panel."
	@priority = "4"
	test ConfigurePage {
		task ("Assert Test Page Name is shown in Pages admin") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");

			ApplicationsMenu.gotoSite(site = "Test Site Name");

			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");

			AssertVisible(
				key_itemName = "Test Page Name",
				locator1 = "PagesAdmin#LIST_GROUP_ITEM");
		}

		task ("Configure page via Page Tree panel") {
			PagesFinder.goToPagesFinder();

			PagesFinder.gotoPageEllipsisItem(
				item = "Configure",
				pageName = "Test Page Name");

			PagesAdmin.editName(pageNameEdit = "New Test Page Name");
		}

		task ("View the renamed page is shown in Pages admin") {
			Click(locator1 = "Icon#ANGLE_LEFT_BACK");

			ControlMenu.viewHeaderTitle(headerTitle = "New Test Page Name");
		}

		task ("View the renamed page is shown in Page Tree panel") {
			PagesFinder.viewPageNameInPagesFinder(pageName = "New Test Page Name");
		}
	}

	@description = "This is a test for LPS-102544. Can navigate to both public and private pages from pages finder."
	@priority = "5"
	test NavigateToBothPageTypes {
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Add a public and private pages") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Public Page");

			JSONLayout.addPrivateLayout(
				groupName = "Test Site Name",
				layoutName = "Test Private Page");
		}

		task ("Navigate to public page via page tree") {
			Navigator.openSiteURL(siteName = "Test Site Name");

			PagesFinder.goToPagesFinder();

			PagesFinder.selectPageType(optionValue = "Public Pages");

			PagesFinder.navigateToPage(pageName = "Test Public Page");
		}

		task ("Navigate to private page via page tree") {
			PagesFinder.selectPageType(optionValue = "Private Pages");

			PagesFinder.navigateToPage(pageName = "Test Private Page");
		}
	}

	@description = "This is a test for LPS-102544. Can quickly browse and go to different pages with page tree."
	@priority = "4"
	test NavigateToDifferentPages {
		task ("Add different types of pages") {
			var i = "1";

			for (var pageType : list "portlet,content,embedded,full_page_application,panel") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${i}",
					type = "${pageType}");

				var i = ${i} + 1;
			}

			JSONLayout.publishLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name 2");
		}

		task ("Navigate to pages in page tree") {
			Navigator.openSiteURL(siteName = "Test Site Name");

			PagesFinder.goToPagesFinder();

			for (var i : list "1,2,3,4,5") {
				PagesFinder.navigateToPage(pageName = "Test Page Name ${i}");
			}
		}
	}

	@description = "This is a test for LPS-133709. The user can navigate to private and public pages defined in navigation menu via the Page Tree."
	@priority = "4"
	test NavigateToPrivateAndPublicPagesDefinedInNavigationMenu {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Add a public content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Parent Page 1",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Test Site Name",
				layoutName = "Test Parent Page 1");
		}

		task ("Add a child widget page under content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Child Page 1",
				parentPageName = "Test Parent Page 1");
		}

		task ("Add a private content page") {
			JSONLayout.addPrivateLayout(
				groupName = "Test Site Name",
				layoutName = "Test Parent Page 2",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Test Site Name",
				layoutName = "Test Parent Page 2",
				privateLayout = "true");
		}

		task ("Add a child widget page under content page") {
			JSONLayout.addPrivateLayout(
				groupName = "Test Site Name",
				layoutName = "Test Child Page 2",
				parentPageName = "Test Parent Page 2");
		}

		task ("Add a navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = "Test Site Name",
				siteNavigationMenuName = "Navigation Menu Name");
		}

		task ("Add two content pages as parent page items to the navigation menu") {
			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name",
				privateLayout = "false",
				siteNavigationMenuItemName = "Test Parent Page 1",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "layout");

			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name",
				privateLayout = "true",
				siteNavigationMenuItemName = "Test Parent Page 2",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "layout");
		}

		task ("Add a child widget page item under each parent page item") {
			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name",
				parentSiteNavigationMenuItem = "Test Parent Page 1",
				privateLayout = "false",
				siteNavigationMenuItemName = "Test Child Page 1",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "layout");

			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = "Test Site Name",
				parentSiteNavigationMenuItem = "Test Parent Page 2",
				privateLayout = "true",
				siteNavigationMenuItemName = "Test Child Page 2",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "layout");
		}

		task ("Select the navigation menu in page type selctor of Page Tree") {
			Navigator.openSiteURL(siteName = "Test Site Name");

			PagesFinder.goToPagesFinder();

			PagesFinder.selectPageType(optionValue = "Navigation Menu Name");
		}

		task ("Navigate to each page via Page Tree") {
			for (var pageName : list "Test Parent Page 1,Test Parent Page 2,Test Child Page 1,Test Child Page 2") {
				Portlet.expandTree();

				PagesFinder.navigateToPage(pageName = "${pageName}");
			}
		}
	}

	@description = "This is a test for LPS-133709. The user can navigate to public pages defined in navigation menu via the Page Tree."
	@priority = "4"
	test NavigateToPublicPagesDefinedInNavigationMenu {
		task ("Add two public widget pages") {
			for (var n : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Parent Page ${n}");
			}
		}

		task ("Add a child content page under each widget page") {
			for (var n : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Child Page ${n}",
					parentPageName = "Test Parent Page ${n}",
					type = "content");

				JSONLayout.publishLayout(
					groupName = "Test Site Name",
					layoutName = "Test Child Page ${n}");
			}
		}

		task ("Add a navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = "Test Site Name",
				siteNavigationMenuName = "Navigation Menu Name");
		}

		task ("Add two widget pages as parent page items to the navigation menu") {
			for (var n : list "1,2") {
				JSONSitenavigation.addSiteNavigationMenuItem(
					groupName = "Test Site Name",
					privateLayout = "false",
					siteNavigationMenuItemName = "Test Parent Page ${n}",
					siteNavigationMenuName = "Navigation Menu Name",
					type = "layout");
			}
		}

		task ("Add a child content page item under each parent page item") {
			for (var n : list "1,2") {
				JSONSitenavigation.addSiteNavigationMenuItem(
					groupName = "Test Site Name",
					parentSiteNavigationMenuItem = "Test Parent Page ${n}",
					privateLayout = "false",
					siteNavigationMenuItemName = "Test Child Page ${n}",
					siteNavigationMenuName = "Navigation Menu Name",
					type = "layout");
			}
		}

		task ("Select the navigation menu in page type selctor of Page Tree") {
			Navigator.openSiteURL(siteName = "Test Site Name");

			PagesFinder.goToPagesFinder();

			PagesFinder.selectPageType(optionValue = "Navigation Menu Name");
		}

		task ("Navigate to each page via Page Tree") {
			for (var pageName : list "Test Parent Page 1,Test Parent Page 2,Test Child Page 1,Test Child Page 2") {
				Portlet.expandTree();

				PagesFinder.navigateToPage(pageName = "${pageName}");
			}
		}
	}

	@description = "This is a test for LPS-139064. Users can preview draft for a content page from page tree when they exist."
	@priority = "4"
	test PreviewDraftContentPage {
		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a Button fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Access to the Page Tree") {
			PagesFinder.goToPagesFinder();
		}

		task ("Preview the draft content page in a new tab") {
			PagesFinder.gotoPageEllipsisItem(
				item = "Preview Draft",
				pageName = "Test Page Name");

			SelectWindow.selectPopUp(locator1 = "null");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Page Name *");

			ContentPages.viewFragmentText(
				fragmentName = "button",
				id = "link",
				text = "Go Somewhere");
		}
	}

	@description = "This is a test for LPS-139064. Users can see the preview draft when the content page at draft status."
	@priority = "5"
	test PreviewDraftWhenContentPageAtDraftStatus {
		property portal.acceptance = "true";

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Access to the Page Tree") {
			Navigator.openSiteURL(siteName = "Test Site Name");

			PagesFinder.goToPagesFinder();
		}

		task ("Preview draft via Page Tree") {
			PagesFinder.gotoPageEllipsisItem(
				item = "Preview Draft",
				pageName = "Test Page Name*");

			SelectWindow.selectPopUp(locator1 = "null");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Page Name *");
		}

		task ("Close the new tab and select the original tab") {
			Navigator.closeWindow();
		}

		task ("Add a Button fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Discard the draft in Pages admin") {
			PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

			PageEditor.clickDiscardDraft(pageName = "Test Page Name");
		}

		task ("Access to the Page Tree") {
			ProductMenu.gotoHomePage();
		}

		task ("Preview draft via Page Tree") {
			PagesFinder.gotoPageEllipsisItem(
				item = "Preview Draft",
				pageName = "Test Page Name*");

			SelectWindow.selectPopUp(locator1 = "null");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Page Name *");
		}

		task ("Close the new tab and select the original tab") {
			Navigator.closeWindow();
		}

		task ("Add a Heading fragment to page then pubilsh") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditor.clickPublish();
		}

		task ("Access to the Page Tree") {
			PagesFinder.goToPagesFinder();
		}

		task ("View the page name doesn't have asterisk icon in Page Tree") {
			PagesFinder.viewPageNameInPagesFinder(pageName = "Test Page Name");
		}

		task ("View the Preview Draft action not shown") {
			Click.mouseOverClick(
				key_pageName = "Test Page Name",
				locator1 = "PagesFinder#PAGE_ELLIPSIS_ICON");

			MenuItem.viewNotVisible(menuItem = "Preview Draft");
		}
	}

	@description = "This is a test for LPS-116428. Can reorganize the pages via Page Tree panel."
	@priority = "4"
	test ReorganizePages {
		task ("Access to Page Tree panel in Test Site Name") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Portlet Page",
				type = "portlet");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page",
				type = "content");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Embedded Page",
				type = "embedded");

			Navigator.openSiteURL(siteName = "Test Site Name");

			PagesFinder.goToPagesFinder();
		}

		task ("Assert the order of Pages in Page Tree panel") {
			var n = "1";

			for (var pageName : list "Test Portlet Page,Test Content Page,Test Embedded Page") {
				AssertVisible(
					key_index = "${n}",
					key_pageName = "${pageName}",
					locator1 = "PagesFinder#TREE_NODE_ITEM");

				var n = ${n} + 1;
			}
		}

		task ("Reorganize the order of Pages in Page Tree panel") {
			DragAndDrop.dragAndDropReorganizeObjects(
				locator1 = "//ul[contains(@class,'tree-container')]/li[contains(@class,'tree-node')][2][contains(.,'Test Content Page')]",
				locator2 = "//ul[contains(@class,'tree-container')]/li[contains(@class,'tree-node')][1][contains(.,'Test Portlet Page')]",
				position = "0,-4");
		}

		task ("Assert the order of Pages in Page Tree panel") {
			var n = "1";

			for (var pageName : list "Test Content Page,Test Portlet Page,Test Embedded Page") {
				AssertVisible(
					key_index = "${n}",
					key_pageName = "${pageName}",
					locator1 = "PagesFinder#TREE_NODE_ITEM");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-90363. Assert that all page types can be found and counted in the pages finder."
	@priority = "5"
	test SearchAllPageTypes {
		property portal.acceptance = "true";

		task ("Add different types of pages") {
			var i = "1";

			for (var pageType : list "portlet,content,embedded,full_page_application,panel") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${i}",
					type = "${pageType}");

				var i = ${i} + 1;
			}

			for (var i : list "6,7,8,9,10,11") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${i}");
			}
		}

		task ("Access to the Page Tree ") {
			Navigator.openSiteURL(siteName = "Test Site Name");

			PagesFinder.goToPagesFinder();
		}

		task ("Type search term") {
			PagesFinder.inputPageSearch(keyword = "Test");
		}

		task ("Assert all 11 pages shown in Pages Administration") {
			PagesFinder.viewInPagesAdministration();

			AssertTextEquals(
				locator1 = "Search#SEARCH_INFO",
				value1 = "11 Results for &quot;Test&quot;");
		}
	}

	@description = "This is a test for LPS-102544. Can search for a page in sidebar."
	@priority = "4"
	test SearchPageAndViewViaSidebar {
		task ("Add a widget and content pages") {
			var i = "1";

			for (var pageType : list "portlet,content") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Page Name ${i}",
					type = "${pageType}");

				var i = ${i} + 1;
			}
		}

		task ("Access to the Page Tree") {
			Navigator.openSiteURL(siteName = "Test Site Name");

			PagesFinder.goToPagesFinder();
		}

		task ("Type search term") {
			PagesFinder.inputPageSearch(keyword = '''"1"''');
		}

		task ("View 1 result shown") {
			AssertVisible(
				key_pageName = "Test Page Name 1",
				locator1 = "PagesFinder#PAGE_SEARCH_RESULT");

			AssertElementNotPresent(
				key_pageName = "Test Page Name 2",
				locator1 = "PagesFinder#PAGE_SEARCH_RESULT");
		}
	}

	@description = "This is a test for LPS-133709. The user can switch site navigation menus via page type selector in Page Tree."
	@priority = "4"
	test SwitchNavigationMenusViaPageTypeSelector {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Add two public pages") {
			for (var n : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name",
					layoutName = "Test Public Page ${n}");
			}
		}

		task ("Add two private pages") {
			for (var n : list "1,2") {
				JSONLayout.addPrivateLayout(
					groupName = "Test Site Name",
					layoutName = "Test Private Page ${n}");
			}
		}

		task ("Add the first navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = "Test Site Name",
				siteNavigationMenuName = "Navigation Menu Name 1");
		}

		task ("Add two public pages to the first navigation menu") {
			for (var n : list "1,2") {
				JSONSitenavigation.addSiteNavigationMenuItem(
					groupName = "Test Site Name",
					privateLayout = "false",
					siteNavigationMenuItemName = "Test Public Page ${n}",
					siteNavigationMenuName = "Navigation Menu Name 1",
					type = "layout");
			}
		}

		task ("Add the second navigation menu") {
			JSONSitenavigation.addSiteNavigationMenu(
				groupName = "Test Site Name",
				siteNavigationMenuName = "Navigation Menu Name 2");
		}

		task ("Add two private pages to the second navigation menu") {
			for (var n : list "1,2") {
				JSONSitenavigation.addSiteNavigationMenuItem(
					groupName = "Test Site Name",
					privateLayout = "true",
					siteNavigationMenuItemName = "Test Private Page ${n}",
					siteNavigationMenuName = "Navigation Menu Name 2",
					type = "layout");
			}
		}

		task ("Select the first navigation menu in page type selctor of Page Tree") {
			Navigator.openSiteURL(siteName = "Test Site Name");

			PagesFinder.goToPagesFinder();

			PagesFinder.selectPageType(optionValue = "Navigation Menu Name 1");
		}

		task ("Navigate to each page via Page Tree") {
			for (var pageName : list "Test Public Page 1,Test Public Page 2") {
				PagesFinder.navigateToPage(pageName = "${pageName}");
			}
		}

		task ("Select the second navigation menu in page type selctor of Page Tree") {
			Navigator.openSiteURL(siteName = "Test Site Name");

			PagesFinder.goToPagesFinder();

			PagesFinder.selectPageType(optionValue = "Navigation Menu Name 2");
		}

		task ("Navigate to each page via Page Tree") {
			for (var pageName : list "Test Private Page 1,Test Private Page 2") {
				PagesFinder.navigateToPage(pageName = "${pageName}");
			}
		}
	}

}