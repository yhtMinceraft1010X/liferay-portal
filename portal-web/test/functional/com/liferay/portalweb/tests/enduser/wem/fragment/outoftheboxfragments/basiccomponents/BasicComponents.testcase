@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-98241 and LPS-128667 and LPS-106776. The user could configure the Button fragment in page editor."
	@priority = "4"
	test ConfigureBasicComponentButton {
		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Widget Page Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Test Site Name",
				layoutName = "Test Content Page Name");
		}

		task ("Add a Button fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Configure the Button fragment") {
			PageEditor.gotoConfiguration(fragmentName = "Button");

			PageEditor.configureFragment(
				size = "Large",
				type = "Link");

			PageEditor.gotoStyle(fragmentName = "Button");

			PageEditor.configureFragment(alignment = "Center");
		}

		task ("View the Button styles") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "button",
				size = "lg",
				type = "link");
		}

		task ("Remove the Button") {
			PageEditor.removeFragment(fragmentName = "Button");
		}

		task ("Add a Button fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Link the widget page to Button fragment") {
			PageEditorEditableLink.mapEditableFieldToPage(
				fragmentName = "Button",
				id = "link",
				pageName = "Test Widget Page Name",
				target = "Self");
		}

		task ("View selected page is linked to Button fragment") {
			AssertVisible(
				key_append = "/parent::div[contains(@class,'component-button')]",
				key_url = "/web/test-site-name/test-widget-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");
		}

		task ("View the selected page is shown in Page field") {
			AssertTextEquals(
				key_fieldLabel = "Page",
				locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT",
				value1 = "Test Widget Page Name");
		}

		task ("Link the content page to Button fragment") {
			PageEditorEditableLink.mapEditableFieldToPage(
				fragmentName = "Button",
				id = "link",
				pageName = "Test Content Page Name");
		}

		task ("View selected page is linked to Button fragment") {
			AssertVisible(
				key_append = "/parent::div[contains(@class,'component-button')]",
				key_url = "/web/test-site-name/test-content-page-name",
				locator1 = "Fragment#FRAGMENT_LINK");
		}

		task ("View the selected page is shown in Page field") {
			AssertTextEquals(
				key_fieldLabel = "Page",
				locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT",
				value1 = "Test Content Page Name");
		}

		task ("Clear the selection") {
			PageEditor.gotoEllipsisMenuItemInItemSelector(
				fieldLabel = "Page",
				menuItem = "Remove Page");
		}

		task ("View the default link is shown in Button fragment") {
			AssertVisible(
				key_append = "/parent::div[contains(@class,'component-button')]",
				key_url = "#",
				locator1 = "Fragment#FRAGMENT_LINK");
		}

		task ("View the text placeholder is shown in Page field") {
			AssertAttributeValue(
				attribute1 = "placeholder",
				key_fieldLabel = "Page",
				locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT",
				value1 = "Select Page");
		}

		task ("Duplicate the Button") {
			PageEditor.gotoDuplicate(fragmentName = "Button");
		}

		task ("View the duplicated Button") {
			PageEditor.viewDuplicateFragment(
				fragmentName = "Button",
				id = "Button");
		}
	}

	@description = "This is a test for LPS-98241 and LPS-99749. The user could configure the Card fragment in page editor."
	@priority = "5"
	@uitest
	test ConfigureBasicComponentCard {
		property portal.acceptance = "true";

		task ("Add a Card fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Card");
		}

		task ("Configure the Card fragment") {
			PageEditor.gotoConfiguration(fragmentName = "Card");

			PageEditor.configureFragment(imageSize = "Fit");

			PageEditor.gotoStyle(fragmentName = "Card");

			PageEditor.configureFragment(
				alignment = "Center",
				borderRadius = "Border Radius Small",
				boxShadow = "Box Shadow Large",
				marginBottom = "5");
		}

		task ("View the Card styles") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				borderRadius = "border-radius-sm",
				boxShadow = "box-shadow-lg",
				fragmentName = "card",
				imageSize = "100",
				marginBottom = "5");
		}

		task ("Remove the Card") {
			PageEditor.removeFragment(fragmentName = "Card");
		}

		task ("Add a Card fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Card");
		}

		task ("Duplicate the Card") {
			PageEditor.gotoDuplicate(fragmentName = "Card");
		}

		task ("View the duplicated Card") {
			PageEditor.viewDuplicateFragment(
				fragmentName = "Card",
				id = "Card");
		}
	}

	@description = "This is a test for LPS-98241, LPS-115224 and LPS-141412. The user could configure the Heading fragment in page editor."
	@priority = "5"
	test ConfigureBasicComponentHeading {
		property portal.acceptance = "true";

		task ("Add a Heading fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Configure the Heading") {
			PageEditor.gotoStyle(fragmentName = "Heading");

			PageEditor.configureFragment(
				alignment = "Right",
				marginBottom = "2",
				marginLeft = "2",
				marginRight = "2",
				marginTop = "2",
				paddingBottom = "2",
				paddingLeft = "2",
				paddingRight = "2",
				paddingTop = "2",
				textColor = "Blockquote Small Color");

			PageEditor.gotoConfiguration(fragmentName = "Heading");

			PageEditor.configureFragment(headingLevel = "H2");
		}

		task ("View the Heading styles in page editor") {
			PageEditor.viewFragmentStyle(
				alignment = "right",
				fragmentName = "heading",
				headingLevel = "h2",
				marginBottom = "2",
				marginLeft = "2",
				marginRight = "2",
				marginTop = "2",
				paddingBottom = "2",
				paddingLeft = "2",
				paddingRight = "2",
				paddingTop = "2",
				textColor = "blockquote-small-color");

			PageEditor.clickPublish();
		}

		task ("View the Heading styles at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			AssertVisible(locator1 = "//div[contains(@class,'text-right')][//h2[contains(@class,'component-heading')]]");

			AssertCssValue(
				locator1 = "//div[contains(@class,'text-right')][//h2[contains(@class,'component-heading')]]",
				locator2 = "color",
				value1 = "rgba(107, 108, 126, 1)");
		}

		task ("Remove the Heading") {
			ContentPages.gotoPageEditor();

			PageEditor.removeFragment(fragmentName = "Heading");
		}

		task ("Add a Heading fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Duplicate the Heading") {
			PageEditor.gotoDuplicate(fragmentName = "Heading");
		}

		task ("View the duplicated Heading") {
			PageEditor.viewDuplicateFragment(
				fragmentName = "Heading",
				id = "Heading");
		}
	}

	@description = "This is a test for LPS-98241 and LPS-128667. The user could configure the Image fragment in page editor."
	@priority = "5"
	@uitest
	test ConfigureBasicComponentImage {
		property portal.acceptance = "true";

		task ("Add an Image fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");
		}

		task ("Configure the Image") {
			PageEditor.gotoConfiguration(fragmentName = "Image");

			PageEditor.configureFragment(imageSize = "Original Size");

			PageEditor.gotoStyle(fragmentName = "Image");

			PageEditor.configureFragment(
				alignment = "Center",
				marginBottom = "2");
		}

		task ("View the Image styles") {
			PageEditor.viewFragmentStyle(
				alignment = "center",
				fragmentName = "image",
				imageSize = "0",
				marginBottom = "2");
		}

		task ("Remove the Image") {
			PageEditor.removeFragment(fragmentName = "Image");
		}

		task ("Add an Image fragment to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Image");
		}

		task ("Directly select an Image in Image fragment") {
			PageEditor.editFragmentImage(
				fileName = "Document_1.jpg",
				fragmentName = "Image",
				id = "image-square");
		}

		task ("View the selected image is shown in Image fragment") {
			PageEditor.viewFragmentEditableImage(
				id = "image-square",
				imageDescription = "",
				imageFileName = "Document_1.jpg");
		}

		task ("Directly select another Image in Image fragment") {
			PageEditor.editFragmentImage(
				fileName = "Document_2.jpg",
				fragmentName = "Image",
				id = "image-square");
		}

		task ("View the selected image is shown in Image fragment") {
			PageEditor.viewFragmentEditableImage(
				id = "image-square",
				imageDescription = "",
				imageFileName = "Document_2.jpg");
		}

		task ("Clear the selection") {
			PageEditor.clearSelection(fieldLabel = "Image");
		}

		task ("View the image placeholder is shown in Image fragment") {
			PageEditor.viewFragmentEditableImage(
				id = "image-square",
				imageDescription = "",
				imageFileName = "data:image/png");
		}

		task ("View the text placeholder is shown in Image field") {
			AssertAttributeValue(
				attribute1 = "placeholder",
				key_fieldLabel = "Image",
				locator1 = "PageEditor#ITEM_SELECTOR_CONTENT_INPUT",
				value1 = "Select Image");
		}

		task ("Duplicate the Image") {
			PageEditor.gotoDuplicate(fragmentName = "Image");
		}

		task ("View the duplicated Image") {
			PageEditor.viewDuplicateFragment(
				fragmentName = "Image",
				id = "Image");
		}
	}

	@description = "This is a test for LPS-98241 and LPS-128667. The user could configure the Paragraph fragment in page editor."
	@priority = "5"
	@uitest
	test ConfigureBasicComponentParagraph {
		property portal.acceptance = "true";

		task ("Add a Paragraph fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph");
		}

		task ("Configure the Paragraph") {
			PageEditor.gotoStyle(fragmentName = "Paragraph");

			PageEditor.configureFragment(
				alignment = "Right",
				textColor = "Warning");
		}

		task ("View the Paragraph styles") {
			PageEditor.viewFragmentStyle(
				alignment = "right",
				fragmentName = "paragraph",
				textColor = "warning");
		}

		task ("Change the Text Color to Success") {
			PageEditor.configureFragment(textColor = "Success");
		}

		task ("View the Text Color of Paragraph") {
			PageEditor.viewFragmentStyle(
				fragmentName = "paragraph",
				textColor = "success");
		}

		task ("Clear the selection") {
			PageEditor.clearSelection(fieldLabel = "Text Color");
		}

		task ("View the Text Color of Paragraph") {
			AssertCssValue(
				fragmentName = "paragraph",
				id = "element-text",
				index = "1",
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
				locator2 = "color",
				value1 = "rgba(39, 40, 51, 1)");
		}

		task ("View the Default is shown in Text Color field") {
			AssertVisible(
				key_fieldLabel = "Text Color",
				key_text = "Default",
				locator1 = "Button#ANY_WITH_LABEL");
		}

		task ("Remove the Paragraph") {
			PageEditor.removeFragment(fragmentName = "Paragraph");
		}

		task ("Add a Paragraph fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph");
		}

		task ("Duplicate the Paragraph") {
			PageEditor.gotoDuplicate(fragmentName = "Paragraph");
		}

		task ("View the duplicated Paragraph") {
			PageEditor.viewDuplicateFragment(
				fragmentName = "Paragraph",
				id = "Paragraph");
		}
	}

	@description = "This is a test for LPS-98241. The user could configure the Separator fragment in page editor."
	@priority = "4"
	test ConfigureBasicComponentSeparator {
		task ("Add a basic component") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Separator");
		}

		task ("Configure the Separator") {
			PageEditor.gotoStyle(fragmentName = "Separator");

			PageEditor.configureFragment(
				borderColor = "Gray 100",
				bottomSpacing = "1",
				separatorColor = "danger");
		}

		task ("View the Separator styles") {
			PageEditor.viewFragmentStyle(
				borderColor = "gray-100",
				bottomSpacing = "1",
				fragmentName = "separator",
				separatorColor = "danger");
		}

		task ("Remove the Separator") {
			PageEditor.removeFragment(fragmentName = "Separator");
		}

		task ("Add a Separator fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Separator");
		}

		task ("Duplicate the Separator") {
			PageEditor.gotoDuplicate(fragmentName = "Separator");
		}

		task ("View the duplicated Separator") {
			PageEditor.viewDuplicateFragment(
				fragmentName = "Separator",
				id = "Separator");
		}
	}

	@description = "This is a test for LPS-98241. The user could configure the Spacer fragment in page editor."
	@priority = "4"
	test ConfigureBasicComponentSpacer {
		task ("Add a Spacer fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Spacer");
		}

		task ("Configure the Spacer") {
			PageEditor.gotoConfiguration(fragmentName = "Spacer");

			PageEditor.configureFragment(height = "4");
		}

		task ("View the Spacer styles") {
			PageEditor.viewFragmentStyle(height = "4");
		}

		task ("Remove the Spacer") {
			PageEditor.removeFragment(fragmentName = "Spacer");
		}

		task ("Add a Spacer fragment") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Spacer");
		}

		task ("Duplicate the Spacer") {
			PageEditor.gotoDuplicate(fragmentName = "Spacer");
		}

		task ("View the duplicated Spacer") {
			PageEditor.viewDuplicateFragment(
				fragmentName = "Spacer",
				id = "Spacer");
		}
	}

}