@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Sites Overview Cards appear on load"
	@priority = "3"
	test CanViewSitesOverviewDashboardCards {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSites();

		ACSites.viewSiteOverviewDashboardCards();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8260 | Test Summary: Site report page returns all cards filled out according to the site selected in the Site dropdown field"
	@priority = "5"
	test SiteReportPageReturnsAllCardsFilledAccordingSiteSelected {
		ACUtils.addSiteAndPage();

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		ACUtils.navigateToSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		for (var cardTitle : list "${propertyName} Activities,Top Pages,Acquisitions,Visitors by Day and Time,Search Terms,Interests,Sessions by Location,Session Technology,Cohort Analysis") {
			ACCards.viewCards(cardTitle = "${cardTitle}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8266 | Test Summary: Sites Report page has an empty state If no data source is connect"
	@priority = "4"
	test SitesReportPageHasEmptyStateIfNoDataSourceConnect {
		task ("Create site and page, connect the AC and disconnect") {
			ACUtils.addSiteAndPage();

			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

			ACDXPSettings.disconnectDXPFromAnalyticsCloud();
		}

		task ("View the page and go to AC") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();
		}

		task ("Go to the right and filter for 24 hours") {
			ACProperties.switchProperty(propertyName = "${propertyName}");

			ACTimeFilter.clickTimeFilterButton();

			ACTimeFilter.setLast24Hours();
		}

		task ("Assert if there is none unique visitors") {
			ACAssets.viewVisitorsBehaviorMetric(
				metricTitle = "Unique Visitors",
				metricValue = "0");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8261 | Test Summary: Make sure the Site Reports is the home page of AC"
	@priority = "5"
	test ViewSitesReportsAsHomePageAC {
		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();

		ACUtils.launchAC();

		ACNavigation.goToAssets();

		ACWorkspace.signOut();

		ACUtils.launchAC();

		ACUtils.assertPageTitle(pageTitle = "Sites");
	}

}