@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site and page") {
			ACUtils.addSiteAndPage();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");

			CustomFields.tearDownCP();

			JSONUser.tearDownNonAdminUsers();
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8595 | Test Summary: Delete a criteria"
	@priority = "3"
	test CanDeleteCriteria {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "DeleteSegments#CanDeleteCriteria";

		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "New Segment Test");
		}

		task ("Add a birthDate and createDate field") {
			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			for (var criteriaName : list "birthDate,createDate") {
				ACSegments.addSegmentField(segmentField = "${criteriaName}");
			}

			ACSegments.saveSegment();
		}

		task ("View the segment criteria") {
			ACSegments.viewSegmentCriteriaIndividualAttributes(attributeName = "birthDate");

			ACSegments.viewSegmentCriteriaIndividualAttributes(
				attributeName = "createDate",
				index = "2");
		}

		task ("Go to Segment and edit it") {
			ACNavigation.goToSegments();

			ACSegments.editSegment(segmentName = "New Segment Test");
		}

		task ("Delete the criteria") {
			ACSegments.deleteSegmentCriteria(criteriaName = "birthDate");

			ACSegments.saveSegment();
		}

		task ("View the segment criteria") {
			ACSegments.viewSegmentCriteriaIndividualAttributes(attributeName = "createDate");

			AssertElementNotPresent(
				key_criteriaName = "birthDate",
				locator1 = "ACSegments#CRITERIA_ROW");
		}
	}

	@description = "Delete a dynamic segment"
	@priority = "5"
	test CanDeleteDynamicSegment {
		property test.name.skip.portal.instance = "DeleteSegments#CanDeleteDynamicSegment";

		ACUtils.createBlogsAndAddToPage();

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		ACUtils.navigateToSitePage(
			actionType = "View Blog",
			documentTitleList = "Blogs AC Title",
			pageName = "AC Page",
			siteName = "Site Name");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createDynamicSegment();

		ACUtils.setItemName(itemName = "Dynamic Segment Test");

		ACSegments.addSegmentField(segmentField = "Viewed Blog");

		ACSegments.selectDocument(
			documentTitle = "Blogs AC Title",
			indexField = "1");

		ACSegments.saveSegment();

		ACNavigation.goToSegments();

		ACSegments.viewSegmentName(searchTerm = "Dynamic Segment Test");

		ACSegments.deleteSegment(searchTerm = "Dynamic Segment Test");

		ACSegments.viewDeletedSegmentName(searchTerm = "Dynamic Segment Test");
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8597 | Test Summary: Delete a Segment via the Segment List"
	@priority = "4"
	test CanDeleteSegmentViaSegmentList {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "DeleteSegments#CanDeleteSegmentViaSegmentList";

		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Add a new user in DXP") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Sign in with the new user to visit the site pages") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Go to Segments and add a new segment") {
			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();

			ACUtils.setItemName(itemName = "New Segment Test");

			ACSegments.addStaticMember(tableMember = "ac ac");

			ACSegments.saveSegment();
		}

		task ("Delete the segment via Segment List") {
			ACNavigation.goToSegments();

			ACSegments.deleteSegmentViaSegmentListInlineButton(segmentName = "New Segment Test");
		}

		task ("Assert the segment doesn't display in Segment List") {
			ACSegments.viewDeletedSegmentName(searchTerm = "New Segment Test");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8138 | Test Summary: Delete a static segment"
	@priority = "5"
	test CanDeleteStaticSegment {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "DeleteSegments#CanDeleteStaticSegment";

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "ac@liferay.com",
			userFirstName = "ac",
			userLastName = "ac",
			userScreenName = "ac");

		ACDXPSettings.syncNewContactData();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "ac@liferay.com",
			userLoginFullName = "ac ac");

		ACUtils.navigateToSitePage(
			pageName = "AC Page",
			siteName = "Site Name");

		ACUtils.closeAllSessionsAndWait();

		ACUtils.launchAC();

		ACProperties.switchProperty(propertyName = "${propertyName}");

		ACNavigation.goToSegments();

		ACSegments.createStaticSegment();

		ACUtils.setItemName(itemName = "Static Segment Test");

		ACSegments.addStaticMember(tableMember = "ac ac");

		ACSegments.saveSegment();

		AssertTextEquals(
			locator1 = "ACSegments#SEGMENT_LABEL",
			value1 = "STATIC SEGMENT");

		ACNavigation.goToSegments();

		ACSegments.viewSegmentName(searchTerm = "Static Segment Test");

		ACSegments.deleteSegment(searchTerm = "Static Segment Test");

		ACSegments.viewDeletedSegmentName(searchTerm = "Static Segment Test");
	}

	@description = "Bug: LRAC-10247 | Automation ID: LRAC-10247 | Test Summary: Deleting a static segment does not remove user in known individuals"
	@priority = "5"
	test CheckIfKnownIndividualsDontDisappearAfterDeleteStaticSegment {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "DeleteSegments#CheckIfKnownIndividualsDontDisappearAfterDeleteStaticSegment";

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Go to Segments and add a new segment") {
			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();

			ACUtils.setItemName(itemName = "Static Segment Test");

			ACSegments.addStaticMember(tableMember = "ac ac");

			ACSegments.saveSegment();
		}

		task ("Delete the segment via Segment List") {
			ACNavigation.goToSegments();

			ACSegments.viewSegmentName(searchTerm = "Static Segment Test");

			ACSegments.deleteSegment(searchTerm = "Static Segment Test");

			ACSegments.viewDeletedSegmentName(searchTerm = "Static Segment Test");
		}

		task ("Go to Individual > Known Individuals") {
			ACNavigation.goToIndividuals();

			ACIndividualsDashboard.goToKnownIndividualsTab();
		}

		task ("Search for user") {
			ACUtils.searchBar(searchItem = "ac ac");

			ACIndividualsDashboard.assertIndividualAttribute(key_individualAttribute = "ac ac");
		}

		task ("Go to Segments and add a new segment") {
			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();

			ACUtils.setItemName(itemName = "Static Segment Test");

			ACSegments.addStaticMember(tableMember = "ac ac");

			ACSegments.saveSegment();
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8592 | Test Summary: Deleting a custom field that is used by a segment should reset the data"
	@priority = "4"
	test DeleteCustomFieldUsedSegmentResetData {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "DeleteSegments#DeleteCustomFieldUsedSegmentResetData";

		task ("Connect DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Add a user custom field") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Custom Fields");

			CustomFields.addCP(
				customFieldName = "Hobby",
				customFieldType = "Input Field",
				customInputDataType = "Text",
				resourceName = "User");
		}

		task ("Add a new user in DXP and View the Custom Fields") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.gotoEditCP(userScreenName = "ac");

			User.editUserInformation(
				userCustomField = "reading",
				userCustomFieldLabel = "Hobby");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewUserData(fieldNameList = "hobby");
		}

		task ("Redefine the value of the custom field") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.gotoEditCP(userScreenName = "ac");

			User.editUserInformation(
				userCustomField = "writing",
				userCustomFieldLabel = "Hobby");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Sign in with the new user to visit the site pages") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "New Segment Test");
		}

		task ("Add a Hobby Custom Fields field") {
			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "hobby");

			ACSegments.selectOperator(operator = "contains");

			ACSegments.editTextCriterion(textInput = "writing");
		}

		task ("View the user shown on the Preview mode") {
			ACSegments.previewSegmentMembership();

			ACUtils.viewNameList(nameList = "ac ac");
		}

		task ("Sign in DXP") {
			ACUtils.launchDXP();
		}

		task ("Delete the user custom field") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Custom Fields");

			CustomFields.deleteCP(
				customFieldName = "Hobby",
				resourceName = "User");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "New Segment Test");
		}

		task ("Add a Hobby Custom Fields field") {
			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "hobby");

			ACSegments.selectOperator(operator = "contains");

			ACSegments.editTextCriterion(textInput = "writing");
		}

		task ("View that there's no user in the preview") {
			ACSegments.previewSegmentMembership();

			AssertTextEquals(
				locator1 = "ACSegments#NO_MEMBER_TITLE",
				value1 = "There are no Individuals found.");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8594 | Test Summary: Deleting a data source causes individuals to be removed from segment"
	@priority = "4"
	test DeleteDataSourceIndividualsRemovedSegment {
		property portal.upstream = "quarantine";

		// AC Quarantine Reason: Segment membership takes long time to load LRAC-10769

		task ("Get site assigned property name") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Add a new user in DXP") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");
		}

		task ("Sync the Contact Data") {
			ACDXPSettings.syncNewContactData();
		}

		task ("Sign in with the new user to visit the site pages") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");

			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.closeAllSessionsAndWait();

			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Add a CSV Data Source") {
			ACSettings.addCSVDataSource(
				dataSourceName = "CSV Job Title",
				sourceFileName = "jobTitle.csv");
		}

		task ("Exit Settings") {
			ACNavigation.exitSettings();
		}

		task ("Add a new dynamic segment") {
			ACNavigation.goToSegments();

			ACSegments.createDynamicSegment();

			ACUtils.setItemName(itemName = "New Segment Test");
		}

		task ("Add a jobTitle field") {
			ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

			ACSegments.addSegmentField(segmentField = "jobTitle");

			ACSegments.editTextCriterion(textInput = "farmer");
		}

		task ("Save the segment") {
			ACSegments.saveSegment();
		}

		task ("Go to Known Individuals") {
			ACNavigation.goToIndividuals();

			ACNavigation.switchTab(tabName = "Known Individuals");
		}

		task ("Assert the segment displays under the contact user") {
			ACIndividualsDashboard.goToKnownIndividualDetails(individualName = "ac ac");

			ACNavigation.switchTab(tabName = "Segments");

			ACIndividualsDashboard.assertIndividualAttribute(individualAttribute = "New Segment Test");
		}

		task ("Delete the CSV Data Source") {
			ACSettings.deleteDataSource(
				dataSourceName = "CSV Job Title",
				dataSourceType = "CSV");
		}

		task ("Exit Settings") {
			ACNavigation.exitSettings();
		}

		task ("Assert the segment doesn't display under the contact user") {
			ACNavigation.goToIndividuals();

			ACNavigation.switchTab(tabName = "Known Individuals");

			ACIndividualsDashboard.goToKnownIndividualDetails(individualName = "ac ac");

			ACNavigation.switchTab(tabName = "Segments");

			AssertElementNotPresent(
				key_individualAttribute = "New Segment Test",
				locator1 = "ACIndividualsDashboard#KNOWN_INDIVIDUAL_ATTRIBUTE");
		}
	}

}