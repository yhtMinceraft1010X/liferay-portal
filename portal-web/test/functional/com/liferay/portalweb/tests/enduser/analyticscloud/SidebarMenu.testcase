@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8972 | Test Summary: Assert the Property Menu after deleting a Property"
	@priority = "4"
	test AssertPropertyMenuAfterDeleteProperty {
		task ("Get the autogenerated property name") {
			var autogeneratedPropertyName = StringUtil.extractFirst("${assignedPropertyName}", "Combined");
			var autogeneratedPropertyName = StringUtil.trim("${autogeneratedPropertyName}");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigate to the Properties admin in Settings") {
			ACNavigation.goToSettings();

			ACSettings.goToProperties();
		}

		task ("Delete the new property") {
			ACSettings.deletePropertyByCheckbox(propertyName = "${assignedPropertyName}");
		}

		task ("View the property name is not shown in property menu") {
			ACNavigation.exitSettings();

			ACProperties.assertCurrentActivePropertyNotPresent(propertyName = "${assignedPropertyName}");
		}

		task ("Navigate to the Properties admin in Settings") {
			ACNavigation.goToSettings();

			ACSettings.goToProperties();
		}

		task ("Delete the auto generated property") {
			ACSettings.deletePropertyByCheckbox(propertyName = "${autogeneratedPropertyName}");
		}

		task ("View the autogenerated property name is not shown in property menu") {
			ACNavigation.exitSettings();

			ACProperties.assertCurrentActivePropertyNotPresent(propertyName = "${autogeneratedPropertyName}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8973 | Test Summary: Assert the Property Menu after editing a Property"
	@priority = "3"
	test AssertPropertyMenuAfterEditProperty {
		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigate to the Properties admin in Settings") {
			ACNavigation.goToSettings();

			ACSettings.goToProperties();
		}

		task ("Access to the new property configuration") {
			ACUtils.searchBar(searchItem = "${assignedPropertyName}");

			ACNavigation.openItem(itemName = "${assignedPropertyName}");
		}

		task ("Edit the property name") {
			ACProperties.editPropertyName(propertyName = "AC Test Property");
		}

		task ("View the edited property name shown in property menu") {
			ACNavigation.exitSettings();

			ACProperties.assertCurrentActiveProperty(propertyName = "AC Test Property");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8158 | Test Summary: Switch the property which was selected by default"
	@priority = "5"
	test CanSwitchPropertyWhichWasSelectedByDefault {
		ACUtils.launchAC();

		AssertTextNotEquals(
			locator1 = "ACSidebar#CURRENT_PROPERTY",
			value1 = "${assignedPropertyName}");

		ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

		AssertTextEquals(
			locator1 = "ACSidebar#CURRENT_PROPERTY",
			value1 = "${assignedPropertyName}");
	}

	@description = "Bug: LRAC-10856 | Automation ID: LRAC-10892 | Test Summary: Change the AC page default language"
	@priority = "2"
	test ChangeDefaultLanguage {
		var sidebarList1 = "Sites,Recursos,Eventos,Segmentos,Contas,Indivíduos,Testes";
		var sidebarList2 = "Sites,Assets,Events,Segments,Accounts,Individuals,Tests";

		task ("Switch to property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Change language in AC") {
			ACWorkspace.changeLanguage(
				language = "Language",
				languageOption = "Portuguese (Brazil)");
		}

		task ("View AC sidebar changed language") {
			ACUtils.viewGenericText(textValueList = "${sidebarList1}");
		}

		task ("Change language back in AC") {
			ACWorkspace.changeLanguage(
				language = "Idioma",
				languageOption = "Inglês");
		}

		task ("View AC sidebar changed language") {
			ACUtils.viewGenericText(textValueList = "${sidebarList2}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8974 | Test Summary: Assert the last selected Property is selected after re-logging"
	@priority = "3"
	test ViewLastSelectPropertyAfterRelogin {
		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Sign out AC") {
			ACWorkspace.signOut();
		}

		task ("Sign in AC then go to workspace") {
			ACUtils.launchAC();
		}

		task ("View the last selected property name shown in property menu") {
			ACProperties.assertCurrentActiveProperty(propertyName = "${assignedPropertyName}");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-9230 | Test Summary: Search With No Results"
	@priority = "1"
	test ViewNoResultsWhenSearchNonExistentProperty {
		task ("Sign in AC") {
			ACUtils.launchAC();
		}

		task ("Search a non existent property in property menu") {
			ACProperties.clickPropertyMenuButton();

			Type(
				locator1 = "ACSidebar#PROPERTY_SEARCH",
				value1 = "Non Existent Property");
		}

		task ("View no results returned") {
			AssertElementNotPresent(locator1 = "ACSidebar#PROPERTY_NAME");
		}
	}

}