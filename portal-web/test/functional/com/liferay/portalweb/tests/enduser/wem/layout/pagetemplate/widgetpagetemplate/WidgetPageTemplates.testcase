@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Widget Page Templates";
	property testray.main.component.name = "Widget Page Templates";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Site.tearDownCP();

			PageTemplatesAdminGlobalSite.tearDownCP();
		}
	}

	@description = "Add a page template in global site."
	@priority = "4"
	@uitest
	test AddGlobalPageTemplate {
		task ("Go to page template admin in global site") {
			PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();
		}

		task ("Add an active page template") {
			PageTemplatesAdminGlobalSite.addCP(
				pageTemplateActive = "Active",
				pageTemplateName = "Page Template Name");
		}
	}

	@description = "Add a page using gloabl page template, disable inherit changes and check it works."
	@priority = "5"
	test AddPageBasedOnGlobalPageTemplate {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		task ("Add an active page template") {
			JSONLayoutpagetemplate.addGlobalPageTemplateEntry(
				pageTemplateEntryActive = "true",
				pageTemplateEntryName = "Page Template Name");
		}

		task ("Add a site and page basing on the created page template") {
			JSONGroup.addGroup(groupName = "Site Name");

			PagesAdmin.openPagesAdmin(siteURLKey = "site-name");

			PagesAdmin.addPage(
				pageName = "Site Page",
				pageTemplateName = "Page Template Name");
		}

		task ("View page template is added") {
			Navigator.openSiteURL(siteName = "Site Name");

			PagesAdmin.viewPageTemplate(
				pageName = "Site Page",
				pageTemplateName = "Page Template Name");
		}

		task ("Edit page template and add a blogs widget") {
			PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

			PageTemplatesAdminGlobalSite.gotoPageTemplateViaEdit(pageTemplateName = "Page Template Name");

			Portlet.addPG(portletName = "Blogs");
		}

		task ("Assert blog widget in page basing on page template") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = "Site Name");

			Portlet.viewPG(portletName = "Blogs");
		}

		task ("Disable inherit changes") {
			PagesAdmin.openPagesAdmin(siteURLKey = "site-name");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Site Page");

			PagesAdmin.togglePageTemplateInheritChanges(toggleValue = "disable");

			Button.clickSave();
		}

		task ("Assert web content display in page basing on page template") {
			PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

			PageTemplatesAdminGlobalSite.gotoPageTemplateViaEdit(pageTemplateName = "Page Template Name");

			Portlet.addPG(portletName = "Web Content Display");
		}

		task ("Assert no web content display widget in page basing on page template") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = "Site Name");

			Portlet.viewNoSpecificPG(portletName = "Web Content Display");
		}
	}

	@description = "This is a use case for LPS-115361. Add a widget page template in normal site."
	@priority = "5"
	test AddPageTemplate {
		property portal.acceptance = "true";

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Add a page template collection") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");
		}

		task ("Add a widget page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.addPageTemplate(
				pageTemplateName = "Page Template Name",
				pageTemplateType = "Widget Page Template");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Page Template Name");
		}

		task ("Add a Web Content Display portlet to widget page template") {
			Portlet.addPG(portletName = "Web Content Display");

			Portlet.viewPG(portletName = "Web Content Display");
		}
	}

	@description = "This is a use case for LPS-115361. Can not delete a widget page template is used by a page in normal site."
	@priority = "5"
	test CannotDeletePageTemplateIsUsedByAPage {
		property portal.acceptance = "true";

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Add a page template collection") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");
		}

		task ("Add a widget page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Approved",
				layoutPageTemplateType = "Widget Page Template");

			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Edit",
				pageTemplateName = "Page Template Name");

			AssertTextEquals(
				locator1 = "ControlMenu#HEADING",
				value1 = "Page Template Name");

			Portlet.addPG(portletName = "Web Content Display");
		}

		task ("Add a page based on the widget page template") {
			PagesAdmin.openPagesAdmin(siteURLKey = "site-name");

			PagesAdmin.addPage(
				collectionName = "Page Template Collection",
				pageName = "Test Page Name",
				pageTemplateName = "Page Template Name");

			Navigator.gotoSitePage(
				pageName = "Test Page Name",
				siteName = "Site Name");

			WaitForPageLoad();

			Portlet.viewPG(portletName = "Web Content Display");
		}

		task ("Assert can not delete the widget page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.deletePageTemplate(pageTemplateName = "Page Template Name");

			Alert.viewErrorMessage(errorMessage = "You cannot delete page templates that are used by a page.");
		}
	}

	@description = "Add a active page template in global site, deactive and active it."
	@priority = "4"
	test DeactivateAndActivateGlobalPageTemplate {
		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Add an active page template") {
			PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

			PageTemplatesAdminGlobalSite.addCP(
				pageTemplateActive = "Active",
				pageTemplateName = "Page Template Name");
		}

		task ("Deactive the created page template and view status") {
			PageTemplatesAdminGlobalSite.deactivateAndActivate(
				pageTemplateName = "Page Template Name",
				pageTemplateStatus = "Not Active");

			PageTemplatesAdminGlobalSite.viewStatus(
				pageTemplateName = "Page Template Name",
				pageTemplateStatus = "Not Active");
		}

		task ("View inactive page template doesn't display") {
			PagesAdmin.openPagesAdmin(siteURLKey = "site-name");

			LexiconEntry.gotoAddMenuItem(menuItem = "Page");

			Navigator.gotoNavNested(navNested = "Global Templates");

			PagesAdmin.viewPageTemplateTypeNotPresent(pageTemplateName = "Page Template Name");
		}

		task ("Active the created page template and view status") {
			PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

			PageTemplatesAdminGlobalSite.deactivateAndActivate(
				pageTemplateName = "Page Template Name",
				pageTemplateStatus = "Active");

			PageTemplatesAdminGlobalSite.viewStatus(
				pageTemplateName = "Page Template Name",
				pageTemplateStatus = "Active");
		}

		task ("View active page template displays") {
			PagesAdmin.openPagesAdmin(siteURLKey = "site-name");

			LexiconEntry.gotoAddMenuItem(menuItem = "Page");

			Navigator.gotoNavNested(navNested = "Global Templates");

			PagesAdmin.viewPageTemplateTypePresent(pageTemplateName = "Page Template Name");
		}
	}

	@description = "Delete a page template in global site."
	@priority = "5"
	test DeleteGlobalPageTemplate {
		property portal.acceptance = "true";

		task ("Add an active page template") {
			JSONLayoutpagetemplate.addGlobalPageTemplateEntry(
				pageTemplateEntryActive = "true",
				pageTemplateEntryName = "Page Template Name");
		}

		task ("Delete the created page template") {
			PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

			PageTemplatesAdminGlobalSite.deleteCP(pageTemplateName = "Page Template Name");
		}

		task ("View no new page template") {
			PageTemplatesAdminGlobalSite.viewDefaultCP();
		}
	}

	@description = "This is a use case for LPS-115361. Delete a widget page template in normal site."
	@priority = "5"
	test DeletePageTemplate {
		property portal.acceptance = "true";

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Add a page template collection") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");
		}

		task ("Add a widget page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Approved",
				layoutPageTemplateType = "Widget Page Template");
		}

		task ("Delete the widget page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.deletePageTemplate(pageTemplateName = "Page Template Name");

			PageTemplatesAdmin.viewPageTemplateNotPresent(pageTemplateName = "Page Template Name");
		}
	}

	@description = "This is a use case for LPS-54099. Can configure MVC portlets in Page Templates."
	@priority = "5"
	test EditGlobalPageTemplate {
		property portal.acceptance = "true";

		task ("Add an active page template") {
			JSONLayoutpagetemplate.addGlobalPageTemplateEntry(
				pageTemplateEntryActive = "true",
				pageTemplateEntryName = "Page Template Name");
		}

		task ("Add a calebdar widget to page template and configure calendar") {
			PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

			PageTemplatesAdminGlobalSite.gotoPageTemplateViaEdit(pageTemplateName = "Page Template Name");

			Portlet.addPG(portletName = "Calendar");

			CalendarNavigator.gotoConfiguration();

			CalendarConfiguration.selectWeekStartsOn(weekStartDay = "Saturday");

			CalendarConfiguration.save();
		}

		task ("Assert able to deactive page template") {
			PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

			PageTemplatesAdminGlobalSite.editCP(
				pageTemplateActive = "Not Active",
				pageTemplateName = "Page Template Name");
		}
	}

	@description = "Edit page template description in global site."
	@priority = "4"
	test EditGlobalPageTemplateDescription {
		task ("Add an active page template with description") {
			JSONLayoutpagetemplate.addGlobalPageTemplateEntry(
				pageTemplateEntryActive = "true",
				pageTemplateEntryDescription = "This is a page template description",
				pageTemplateEntryName = "Page Template Name");
		}

		task ("Edit page template description") {
			PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

			PageTemplatesAdminGlobalSite.editDescription(
				pageTemplateDescription = "This is a page template description",
				pageTemplateName = "Page Template Name");
		}

		task ("View edited page template description") {
			PageTemplatesAdminGlobalSite.viewDescription(
				pageTemplateDescription = "This is a page template description edit",
				pageTemplateName = "Page Template Name");
		}
	}

	@description = "This is a use case for LPS-115361. Edit a widget page template in normal site."
	@priority = "5"
	test EditPageTemplate {
		property portal.acceptance = "true";

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Add a page template collection") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = "Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection");
		}

		task ("Add a widget page template") {
			JSONLayoutpagetemplate.addLayoutPageTemplateEntry(
				groupName = "Site Name",
				layoutPageTemplateCollectionName = "Page Template Collection",
				layoutPageTemplateEntryName = "Page Template Name",
				layoutPageTemplateStatus = "Approved",
				layoutPageTemplateType = "Widget Page Template");
		}

		task ("Edit the widget page template") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "site-name");

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Edit",
				pageTemplateName = "Page Template Name");

			Portlet.addPG(portletName = "Asset Publisher");

			Portlet.viewPG(portletName = "Asset Publisher");
		}
	}

	@description = "Export lar with global page templates and check all persist after importing."
	@priority = "5"
	test ImportLAR {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property testray.component.names = "Training";

		task ("Add 2 active page templates") {
			JSONLayoutpagetemplate.addGlobalPageTemplateEntry(
				pageTemplateEntryActive = "true",
				pageTemplateEntryName = "College Landing Page");

			JSONLayoutpagetemplate.addGlobalPageTemplateEntry(
				pageTemplateEntryActive = "true",
				pageTemplateEntryName = "Department Landing Page");
		}

		task ("Edit College Landing Page and add several widgets") {
			PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Edit",
				pageTemplateName = "College Landing Page");

			for (var portletName : list "Media Gallery,Web Content Display,Web Content Display,Web Content Display,Asset Publisher") {
				Portlet.addPG(portletName = "${portletName}");
			}
		}

		task ("Edit Department Landing Page and add several widgets") {
			PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

			PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
				item = "Edit",
				pageTemplateName = "Department Landing Page");

			for (var portletName : list "Media Gallery,Web Content Display,Web Content Display,Menu Display,Members,Asset Publisher") {
				Portlet.addPG(portletName = "${portletName}");
			}
		}

		task ("Export site lar and download it") {
			LAR.exportSiteCP(
				larFileName = "college-and-department-page-templates",
				siteScopeName = "Global");

			var key_larFileName = "${larFileName}";

			var larFileName = LAR.getLarFileName();

			LAR.downloadLar();
		}

		task ("Delete 2 new added page templates") {
			PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

			PageTemplatesAdminGlobalSite.deleteCP(pageTemplateName = "College Landing Page");

			PageTemplatesAdminGlobalSite.deleteCP(pageTemplateName = "Department Landing Page");
		}

		task ("Import site lar and check widgets in page templates persist") {
			LAR.importSiteCP(
				larFileName = "${larFileName}",
				siteName = "Global");

			PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

			PageTemplatesAdminGlobalSite.viewCP(pageTemplateName = "College Landing Page");

			PageTemplatesAdminGlobalSite.viewCP(pageTemplateName = "Department Landing Page");

			var siteName = TestCase.getSiteName(siteName = "${siteName}");

			PageTemplatesAdminGlobalSite.viewPG(
				pageTemplateName = "College Landing Page",
				siteName = "${siteName}");

			Portlet.viewSpecificPG(portletName = "Media Gallery");

			Portlet.viewDuplicatePG(
				portletName = "Web Content Display",
				totalPortletCount = "3");

			Portlet.viewSpecificPG(portletName = "Asset Publisher");

			PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

			PageTemplatesAdminGlobalSite.viewPG(
				pageTemplateName = "Department Landing Page",
				siteName = "${siteName}");

			Portlet.viewSpecificPG(portletName = "Media Gallery");

			Portlet.viewDuplicatePG(
				portletName = "Web Content Display",
				totalPortletCount = "2");

			Portlet.viewSpecificPG(portletName = "Members");

			Portlet.viewSpecificPG(portletName = "Menu Display");
		}
	}

	@description = "View page template in Spanish and English."
	@priority = "4"
	test LocalizeGlobalDefaultPageTemplates {
		property test.name.skip.portal.instance = "WidgetPageTemplates#LocalizeDefaultPageTemplates";

		task ("Edit Department Landing Page and add several widgets") {
			PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

			PageTemplatesAdminGlobalSite.viewDefaultCP();
		}

		task ("Change locale to Spanish") {
			Navigator.gotoAccountSettings();

			MyAccount.changeUserLanguage(
				languageName = "español (España)",
				saveButton = "Save",
				successMessage = "Su petición ha terminado con éxito.");
		}

		task ("View page template name in Spanish") {
			PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

			PageTemplatesAdminGlobalSite.viewDefaultLocalizedCP(
				pageTemplateNameList = "Búsqueda",
				portletTitle = "Plantillas de página");
		}

		task ("Change locale back to English") {
			Navigator.openURL();

			Click(locator1 = "UserBar#USER_AVATAR_IMAGE");

			Click(
				key_dropdownItem = "Mi cuenta",
				locator1 = "UserBar#USER_AVATAR_DROPDOWN_ITEM");

			MyAccount.changeUserLanguage(
				languageName = "English (United States)",
				saveButton = "Guardar",
				successMessage = "Your request completed successfully.");
		}

		task ("View page template name change back to English") {
			Navigator.openURL();

			PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

			PageTemplatesAdminGlobalSite.viewDefaultCP();
		}
	}

	@description = "Rename page template in global site."
	@priority = "4"
	test RenameGlobalPageTemplate {
		task ("Add an active page template") {
			JSONLayoutpagetemplate.addGlobalPageTemplateEntry(
				pageTemplateEntryActive = "true",
				pageTemplateEntryName = "Page Template Name");
		}

		task ("View added page template") {
			PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

			var siteName = TestCase.getSiteName(siteName = "${siteName}");

			PageTemplatesAdminGlobalSite.viewPG(
				pageTemplateName = "Page Template Name",
				siteName = "${siteName}");
		}

		task ("Rename page template and view change") {
			PageTemplatesAdminGlobalSite.openGlobalPageTemplatesAdmin();

			PageTemplatesAdminGlobalSite.editCP(
				pageTemplateActive = "Active",
				pageTemplateName = "Page Template Name");

			PageTemplatesAdminGlobalSite.viewPG(
				pageTemplateName = "Page Template Name Edit",
				siteName = "${siteName}");
		}
	}

}