@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Document Management";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This test covers LPS-94657. It ensures that auto complete for edit categories."
	@priority = "5"
	@refactorneeded
	test AddAutoAssertionCategoryViaDMDocument {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "DMFileEntry#AddAutoAssertionCategoryViaDMDocument";

		JSONCategory.addVocabulary(
			groupName = "Guest",
			title = "Topic");

		JSONCategory.addCategory(
			groupName = "Guest",
			title = "category",
			vocabularyName = "Topic");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.selectDocuments(dmDocumentTitle = "DM Document Title");

		Click(locator1 = "Icon#EDIT_CATEGORIES");

		SelectFrame(value1 = "relative=top");

		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "Edit Categories");

		AssertTextEquals.assertPartialText(
			locator1 = "Modal#BODY",
			value1 = "You are editing the categories for the selected item.");

		Type.sendKeys(
			locator1 = "AssetCategorization#TAGS_FIELD",
			value1 = "cat");

		AssertClick(
			locator1 = "AssetCategorization#TAG_AUTOCOMPLETE_CONTAINER",
			value1 = "category");

		Button.clickSave();

		SelectFrame(value1 = "relative=top");

		Alert.viewSuccessMessageText(successMessage = "Changes Saved");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Document Title");

		DMDocument.viewCategories(categoryNameList = "category");
	}

	@priority = "4"
	@refactordone
	test CanAddCommentToDocument {
		property portal.acceptance = "true";
		property testray.component.names = "Comment";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocumentComment.addPG(
			commentBody = "This is a comment",
			dmDocumentTitle = "DM Document Title");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocumentComment.viewPG(
			commentBody = "This is a comment",
			dmDocumentTitle = "DM Document Title");
	}

	@description = "This test asserts that a major version can be created for a file."
	@priority = "4"
	@refactordone
	test CanAddMajorVersionIncrement {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentDescription = "DM Document Description1",
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit",
			revision = "Major",
			versioning = "true");

		DMDocument.viewEditCP(
			dmDocumentTitleEdit = "DM Document Title Edit",
			dmDocumentVersionNumber = "2.0");
	}

	@description = "This test asserts that a major version can be created for a file."
	@priority = "4"
	@refactordone
	test CanAddMinorVersionIncrement {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentFileEdit = "Document_2.doc",
			dmDocumentTitle = "DM Document Title",
			revision = "Minor",
			versioning = "true");

		DMDocument.viewEditCP(
			dmDocumentTitleEdit = "DM Document Title",
			dmDocumentVersionNumber = "1.1");
	}

	@description = "This test covers LPS-96652. It ensures that the PDF file can be added after enabling text extraction."
	@priority = "4"
	@refactordone
	test CanAddPDFAfterEnablingTextExtraction {
		property custom.properties = "text.extraction.fork.process.enabled=true${line.separator}text.extraction.fork.process.mime.types=application/x-tika-ooxml,application/pdf";
		property portal.acceptance = "true";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.addPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.pdf",
			dmDocumentTitle = "Document_1.pdf");

		AssertConsoleTextNotPresent(value1 = "java.lang.ExceptionInInitializerError");

		DMDocument.viewAllPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.pdf",
			dmDocumentType = "Basic Document");
	}

	@description = "This test covers LPS-124959. It ensures that a user can upload documents with a document type via multiple upload."
	@priority = "4"
	@refactordone
	test CanAddWithDocumentTypeViaMultipleUpload {
		property portal.acceptance = "true";

		DMNavigator.openDocumentTypesAdmin(siteURLKey = "guest");

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Date",
			dmDocumentTypeName = "DM Document Type Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addMultipleCP(
			dateValue = "01/01/2022",
			dmDocumentFileList = "Document_1.doc,Document_2.jpg",
			documentType = "DM Document Type Name");

		for (var dmDocumentTitle : list "Document_1,Document_2") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			DMNavigator.gotoDocumentCP(dmDocumentTitle = "${dmDocumentTitle}");

			DMDocument.viewDocumentTypePG(dateValue = "01/01/2022");
		}
	}

	@description = "This test covers LPS-94657. It ensures that auto complete for edit categories."
	@priority = "5"
	@refactordone
	test CanAutoCompleteCategory {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "DMFileEntry#CanAutoCompleteCategory";

		JSONCategory.addVocabulary(
			groupName = "Guest",
			title = "Topic");

		JSONCategory.addCategory(
			groupName = "Guest",
			title = "category",
			vocabularyName = "Topic");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.selectDocuments(dmDocumentTitle = "DM Document Title");

		Click(locator1 = "Icon#EDIT_CATEGORIES");

		SelectFrame(value1 = "relative=top");

		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "Edit Categories");

		AssertTextEquals.assertPartialText(
			locator1 = "Modal#BODY",
			value1 = "You are editing the categories for the selected item.");

		Type.sendKeys(
			locator1 = "AssetCategorization#TAGS_FIELD",
			value1 = "cat");

		AssertClick(
			locator1 = "AssetCategorization#TAG_AUTOCOMPLETE_CONTAINER",
			value1 = "category");

		Button.clickSave();

		SelectFrame(value1 = "relative=top");

		Alert.viewSuccessMessageText(successMessage = "Changes Saved");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewCategories(categoryNameList = "category");
	}

	@description = "This test ensures that the filename character restriction can be configured through the blacklist."
	@priority = "4"
	@refactordone
	test CanBlacklistCharacters {
		property custom.properties = "dl.char.blacklist=\\\\,//,:,*,?,<,#,|,../,/..";
		property portal.acceptance = "true";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentFileName = '''#.jpg''',
			dmDocumentTitle = "DM Document Title",
			validateFileNameRestriction = "true");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentFileName = '''>.jpg''',
			dmDocumentTitle = "DM Document Title");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			siteURLKey = "guest");

		AssertTextEquals(
			key_fieldLabel = "File Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = ">.jpg");
	}

	@priority = "4"
	@refactordone
	test CanCancelCheckout {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.checkoutPG(dmDocumentTitle = "DM Document Title");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.cancelCheckoutPG(dmDocumentTitle = "DM Document Title");
	}

	@description = "This test ensures that the document type of a published basic document can be changed."
	@priority = "4"
	@refactordone
	test CanChangeDocumentType {
		property portal.acceptance = "true";

		DMNavigator.openDocumentTypesAdmin(siteURLKey = "guest");

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.txt",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_1.txt",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewCP(
			dmDocumentTitle = "Document_1.txt",
			dmDocumentType = "Basic Document");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentTitle = "Document_1.txt",
			dmDocumentTypeEdit = "DM Document Type Name");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_1.txt",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewCP(
			dmDocumentTitle = "Document_1.txt",
			dmDocumentType = "DM Document Type Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Document_1.txt");

		DMDocument.viewFieldLabels(labels = "Text");
	}

	@description = "This test covers LPS-101908. It makes sure that all elements selected on different pages can be checked out and checked in."
	@priority = "3"
	@refactordone
	test CanCheckInAllDocumentsOnDifferentPagesAtOnce {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_1.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_2.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_2.doc");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_3.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_3.doc");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "Document_1.txt",
			dmDocumentTitle = "Document_1.txt",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "Document_2.txt",
			dmDocumentTitle = "Document_2.txt",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_2.txt");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		Pagination.changePagination(itemsPerPage = "4");

		PortletEntry.selectAll();

		Click(locator1 = "Pagination#NEXT_LINK");

		PortletEntry.selectAll();

		Click(
			key_text = "ellipsis",
			locator1 = "ManagementBar#ANY_ICON");

		MenuItem.click(menuItem = "Checkout");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		for (var dmDocumentFileList : list "Document_1.doc,Document_2.doc,Document_3.doc,Document_1.txt,Document_2.txt") {
			AssertElementPresent(
				key_dmDocumentTitle = "${dmDocumentFileList}",
				locator1 = "DocumentsAndMedia#ICON_DOCUMENT_ICON_LOCKED");
		}

		Pagination.changePagination(itemsPerPage = "4");

		PortletEntry.selectAll();

		Click(locator1 = "Pagination#NEXT_LINK");

		DMDocument.checkinManagementBar(allFiles = "true");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		for (var dmDocumentFileList : list "Document_1.doc,Document_2.doc,Document_3.doc,Document_1.txt,Document_2.txt") {
			AssertElementNotPresent(
				key_dmDocumentTitle = "${dmDocumentFileList}",
				locator1 = "DocumentsAndMedia#ICON_DOCUMENT_ICON_LOCKED");
		}
	}

	@description = "This test covers LPS-88313 and LPS-92145. It ensures that a user can check in a document without changing versions."
	@priority = "5"
	@refactordone
	test CanCheckInAsCurrentVersion {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Check in as current version",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.editCP(
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "Check in as current version",
			revision = "Current",
			versioning = "true",
			versionNotes = '''<!DOCTYPE html> <html class="ltr" dir="ltr" lang="en-US"> <head> <title>''');

		DMDocument.checkoutCP(dmDocumentTitle = "Check in as current version");

		Refresh();

		DMDocument.checkinCP(
			dmDocumentTitle = "Check in as current version",
			revision = "Current");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		AssertElementNotPresent(
			key_dmDocumentTitle = "Check in as current version",
			locator1 = "DocumentsAndMedia#ICON_DOCUMENT_ICON_LOCKED");

		DMDocument.checkDocumentCheckboxCP(dmDocumentTitle = "Check in as current version");

		DMDocument.viewDocumentVersionNumberCmdPG(dmDocumentVersionNumber = "1.0");
	}

	@description = "This test ensures that a user can check in a document as a major version."
	@priority = "5"
	@refactordone
	test CanCheckInAsMajorVersion {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Check in as major version",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.checkoutCP(dmDocumentTitle = "Check in as major version");

		Refresh();

		DMDocument.checkinCP(
			dmDocumentTitle = "Check in as major version",
			revision = "Major");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		AssertElementNotPresent(
			key_dmDocumentTitle = "Check in as major version",
			locator1 = "DocumentsAndMedia#ICON_DOCUMENT_ICON_LOCKED");

		DMDocument.checkDocumentCheckboxCP(dmDocumentTitle = "Check in as major version");

		DMDocument.viewDocumentVersionNumberCmdPG(dmDocumentVersionNumber = "2.0");
	}

	@description = "This test ensures that a user can check in a document as a minor version."
	@priority = "5"
	@refactordone
	test CanCheckInAsMinorVersion {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Check in as minor version",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.checkoutCP(dmDocumentTitle = "Check in as minor version");

		Refresh();

		DMDocument.checkinCP(
			dmDocumentTitle = "Check in as minor version",
			revision = "Minor");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		AssertElementNotPresent(
			key_dmDocumentTitle = "Check in as minor version",
			locator1 = "DocumentsAndMedia#ICON_DOCUMENT_ICON_LOCKED");

		DMDocument.checkDocumentCheckboxCP(dmDocumentTitle = "Check in as minor version");

		DMDocument.viewDocumentVersionNumberCmdPG(dmDocumentVersionNumber = "1.1");
	}

	@description = "This test covers LPS-82306. It ensures that a user can check in a document through the Management toolbar."
	@priority = "4"
	@refactordone
	test CanCheckInViaManagementBar {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Check in as current version",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.checkoutCP(dmDocumentTitle = "Check in as current version");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.checkinManagementBar(
			dmDocumentTitle = "Check in as current version",
			revision = "Current");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		AssertElementNotPresent(
			key_dmDocumentTitle = "Check in as current version",
			locator1 = "DocumentsAndMedia#ICON_DOCUMENT_ICON_LOCKED");

		DMDocument.checkDocumentCheckboxCP(dmDocumentTitle = "Check in as current version");

		DMDocument.viewDocumentVersionNumberCmdPG(dmDocumentVersionNumber = "1.0");
	}

	@description = "This test covers LPS-90736. It makes sure that all files are deleted when user selects all."
	@priority = "4"
	@refactordone
	test CanDeleteAllDocumentsAtOnce {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_1.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_2.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_2.doc");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_3.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_3.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		PortletEntry.selectAll();

		Click(locator1 = "Icon#DELETE");

		Alert.viewSuccessMessage();

		DMDocument.viewDefault();
	}

	@priority = "4"
	@refactordone
	test CanDeleteDocumentInSitePage {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "/D/M/Document Title",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.deletePG(dmDocumentTitle = "/D/M/Document Title");

		DMDocument.viewDefault();
	}

	@description = "This test covers LPS-91597. It ensures that a user can delete multiple documents through the actions icon after selecting them one by one."
	@priority = "4"
	@refactordone
	test CanDeleteMultipleDocumentsViaActionsButton {
		property portal.acceptance = "true";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		for (var entryCount : list "1,2") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document_${entryCount}.doc",
				groupName = "Guest",
				mimeType = "application/msword",
				sourceFileName = "Document_${entryCount}.doc");
		}

		Navigator.gotoPage(pageName = "Documents and Media Page");

		for (var entryCount : list "1,2") {
			var dmDocumentTitle = "Document_${entryCount}.doc";

			LexiconCard.checkCardCheckbox(card = "${dmDocumentTitle}");
		}

		Click(locator1 = "Icon#MOVE_TO_RECYCLE_BIN");

		VerifyElementPresent(locator1 = "Message#SUCCESS");

		DMDocument.viewDefault();
	}

	@description = "This case covers LPS-110213. It ensures that a document file can be downloaded after moving it between folders."
	@priority = "5"
	@refactordone
	test CanDownloadDocumentMovedBetweenFolders {
		property portal.acceptance = "true";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder 1 Description",
			dmFolderName = "DM Folder 1 Name",
			groupName = "Guest");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder 2 Description",
			dmFolderName = "DM Folder 2 Name",
			groupName = "Guest");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description1",
			dmDocumentTitle = "DM Document Title",
			folderName = "DM Folder 1 Name",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder 1 Name");

		DMDocument.moveToFolderCP(
			dmDocumentTitle = "DM Document Title",
			dmFolderName = "DM Folder 2 Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder 2 Name");

		DMDocument.downloadCP(dmDocumentTitle = "DM Document Title");

		AssertTextNotPresent(value1 = "The requested resource could not be found.");
	}

	@description = "This ensures that multiple documents can be downloaded simultaneously."
	@priority = "5"
	@refactordone
	test CanDownloadMultipleFilesSimultaneously {
		property portal.acceptance = "true";

		JSONGroup.addGroup(groupName = "Site_1");

		for (var entryCount : list "1,2") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document_${entryCount}.jpg",
				groupName = "Site_1",
				mimeType = "image/jpeg",
				sourceFileName = "Document_${entryCount}.jpg");
		}

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site_1");

		DMDocument.downloadMultipleCP(dmDocumentTitleList = "Document_1.jpg,Document_2.jpg");

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(fileName = "Site_1.zip");
	}

	@description = "This ensures that the document file can be downloaded through the document file name."
	@priority = "5"
	@refactordone
	test CanDownloadThroughURLWithFileName {
		property portal.acceptance = "true";

		var portalURL = PropsUtil.get("portal.url");

		var siteId = JSONGroupAPI._getGroupIdByName(
			groupName = "Guest",
			site = "true");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.mp4",
			groupName = "Guest",
			mimeType = "video/mp4",
			sourceFileName = "Document_1.mp4");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteId}/0/Document_1.mp4");

		DownloadTempFile();

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(fileName = "Document_1.mp4");
	}

	@description = "This ensures that the document file can be downloaded through the document title."
	@priority = "5"
	@refactordone
	test CanDownloadThroughURLWithTitle {
		property portal.acceptance = "true";

		var portalURL = PropsUtil.get("portal.url");

		var siteId = JSONGroupAPI._getGroupIdByName(
			groupName = "Guest",
			site = "true");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Guest",
			mimeType = "video/mp4",
			sourceFileName = "Document_1.mp4");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteId}/0/Document_1");

		DownloadTempFile();

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(fileName = "Document_1.mp4");
	}

	@description = "This ensures that the document file can be downloaded using the updated document file name."
	@priority = "5"
	@refactordone
	test CanDownloadThroughURLWithUpdatedFileName {
		property portal.acceptance = "true";

		var portalURL = PropsUtil.get("portal.url");

		var siteId = JSONGroupAPI._getGroupIdByName(
			groupName = "Guest",
			site = "true");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_3.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_3.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentFileName = "Document_3.doc",
			dmDocumentFileNameEdit = "Document_3Edit.doc",
			dmDocumentTitle = "Document_3");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteId}/0/Document_3Edit.doc");

		DownloadTempFile();

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(fileName = "Document_3Edit.doc");
	}

	@description = "This ensures that the document file can be downloaded through the document title."
	@priority = "5"
	@refactordone
	test CanDownloadThroughURLWithUpdatedTitle {
		property portal.acceptance = "true";

		var portalURL = PropsUtil.get("portal.url");

		var siteId = JSONGroupAPI._getGroupIdByName(
			groupName = "Guest",
			site = "true");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_3.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_3.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentTitle = "Document_3",
			dmDocumentTitleEdit = "Document_3Edit");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteId}/0/Document_3Edit");

		DownloadTempFile();

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(fileName = "Document_3.doc");
	}

	@description = "This ensures that the document file name will be applied to the downloaded file name."
	@priority = "5"
	@refactordone
	test CanDownloadWithCustomFileName {
		property portal.acceptance = "true";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentFileName = "document_1_Edit.jpg",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.downloadCP(dmDocumentTitle = "DM Document Title");

		AssertTextNotPresent(value1 = "The requested resource could not be found.");

		DMDocument.assertFileNameFromTempFolder(fileName = "document_1_Edit.jpg");
	}

	@priority = "5"
	@refactordone
	test CanDownloadWithSpecialCharactersInTitle {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "/D/M/@!# Title",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.downloadPG(dmDocumentTitle = "/D/M/@!# Title");

		DMDocument.assertFileNameFromTempFolder(fileName = "Document_1.doc");
	}

	@description = "This test edits the title and description of a document. It asserts minor version increment because only its metadata was updated."
	@priority = "5"
	@refactordone
	@uitest
	test CanEditDocument {
		property app.server.types = "jboss,tcserver,tomcat,weblogic,websphere,wildfly";
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property environment.acceptance = "true";
		property portal.acceptance = "true";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(
			dmDocumentFileName = "Document_1.txt",
			dmDocumentSize = "259 B",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentFileName = "Document_1.txt",
			dmDocumentFileNameEdit = "Document_1_Edit.txt",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit");

		DMDocument.viewEditCP(
			dmDocumentFileName = "Document_1_Edit.txt",
			dmDocumentTitleEdit = "DM Document Title Edit",
			dmDocumentVersionNumber = "1.1");
	}

	@description = "This test covers LPS-128473. This test ensures that users can filter documents by Recent."
	@priority = "3"
	@refactordone
	test CanFilterByRecent {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "DM Document Title 2",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_2.doc");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "DM Document Title 3",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_3.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		ManagementBar.setFilterAndOrder(
			filterBy = "Recent",
			orderBy = "Modified Date");

		AssertTextEquals.assertPartialText(
			index = "1",
			locator1 = "LexiconTable#TABLE_ROW",
			value1 = "DM Document Title 3");

		AssertTextEquals.assertPartialText(
			index = "2",
			locator1 = "LexiconTable#TABLE_ROW",
			value1 = "DM Document Title 2");
	}

	@description = "This test covers LPS-136334. This test ensures that users can filter documents by Recent and order by Downloads."
	@priority = "4"
	test CanFilterByRecentAndOrderByDownloads {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_2.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_2.doc");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_3.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_3.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		DMDocument.downloadPG(dmDocumentTitle = "Document_3.doc");

		DMDocument.assertFileNameFromTempFolder(fileName = "Document_3.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		ManagementBar.setFilterAndOrder(
			filterBy = "Recent",
			orderBy = "Downloads");

		AssertTextNotPresent(value1 = "java.sql.SQLSyntaxErrorException");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		AssertTextEquals.assertPartialText(
			index = "1",
			locator1 = "LexiconTable#TABLE_ROW",
			value1 = "Document_3.doc");

		AssertTextEquals.assertPartialText(
			index = "2",
			locator1 = "LexiconTable#TABLE_ROW",
			value1 = "Document_2.doc");
	}

	@description = "This is a test for LPS-136825. It checks that a file entry can be imported with tags."
	@priority = "3"
	test CanImportWithTags {
		JSONDocument.addFileWithUploadedFile(
			assetTagNames = "Tag Name",
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LAR.exportPortlet(larFileName = "DocumentsandMedia_portlet.lar");

		JSONGroup.addGroup(groupName = "Site Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		LAR.importPortlet(larFileName = "DocumentsandMedia_portlet.lar");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewTagInfo(tagName = "tag name");
	}

	@description = "This test covers LPS-115949. It validates that resource allocation for forked processes can be controlled through portal.properties."
	@priority = "4"
	test CanLimitForkedProcessResourceAllocation {
		property custom.properties = "dl.file.entry.preview.fork.process.jvm.options=-Xmx0m";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "large_file.pdf",
			groupName = "Guest",
			mimeType = "application/pdf",
			sourceFileName = "large_file.pdf");

		AssertConsoleTextPresent(value1 = "Unable to process file version");
	}

	@description = "This test ensures that only the last two versions of a file are kept when the max version limit is set."
	@priority = "5"
	@refactordone
	test CanLimitMaximumAmountOfVersions {
		property test.name.skip.portal.instance = "DMFileEntry#CanLimitMaximumAmountOfVersions";

		// Can research how to update file using JSON

		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Edit this document two times",
			groupName = "Guest");

		DMDocument.updateMaximumVersions(fieldValue = "2");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentTitle = "Edit this document two times",
			dmDocumentTitleEdit = "First edit");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentTitle = "First edit",
			dmDocumentTitleEdit = "Second edit");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Second edit",
			groupName = "Guest",
			siteURLKey = "guest");

		for (var versionNumber : list "1.2,1.1") {
			AssertElementPresent(
				key_dmDocumentVersionNumber = "${versionNumber}",
				locator1 = "DocumentsAndMedia#DOCUMENT_VERSION_ANY");
		}

		AssertElementNotPresent(
			key_dmDocumentVersionNumber = "1.0",
			locator1 = "DocumentsAndMedia#DOCUMENT_VERSION_ANY");
	}

	@priority = "5"
	@refactordone
	test CanMoveDocumentToRecycleBin {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.moveToRecycleBinCP(
			assetType = "Document",
			dmDocumentTitle = "DM Document Title");
	}

	@description = "This validates that the location of the document accurately displays after it is moved from one folder to another."
	@priority = "4"
	@refactordone
	test CanMoveFromOneFolderToAnother {
		property portal.acceptance = "true";

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder1 Description",
			dmFolderName = "DM Folder1 Name",
			groupName = "Guest");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder2 Description",
			dmFolderName = "DM Folder2 Name",
			groupName = "Guest");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			folderName = "DM Folder1 Name",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder1 Name");

		DMDocument.moveToFolderPG(
			dmDocumentTitle = "DM Document Title",
			dmFolderName = "DM Folder2 Name");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder2 Name");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			dmFolderName = "DM Folder2 Name",
			locationFieldName = "true");
	}

	@priority = "4"
	@refactordone
	test CanMoveWithSlashesInTitle {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "/D/M/Document Title",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Guest");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.moveToFolderPG(
			dmDocumentTitle = "/D/M/Document Title",
			dmFolderName = "DM Folder Name");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder Name");

		DMDocument.viewPG(dmDocumentTitle = "/D/M/Document Title");
	}

	@priority = "4"
	@refactordone
	test CannotAddDocumentWithDuplicateName {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.addPG(
			dmDocument = "Duplicate",
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Title");
	}

	@priority = "4"
	@refactordone
	test CannotAddSpecialCharacterToName {
		property portal.acceptance = "true";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		DMFolder.addPG(
			dmFolder = "Invalid",
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name?");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMPortlet.viewDefaultPG();
	}

	@description = "This test ensures that a checked out document cannot be edited by another user."
	@priority = "5"
	@refactordone
	test CannotEditCheckedOutDocument {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		JSONUser.addUserToSite(
			groupName = "Guest",
			userEmailAddress = "userea@liferay.com");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.enableActionsMenuOnPortlet();

		DMDocument.checkoutPG(dmDocumentTitle = "DM Document Title");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.editCmdPG(
			checkedOut = "true",
			dmDocumentTitle = "DM Document Title",
			userName = "Test Test");
	}

	@description = "This is a test for LPS-82205. It checks that the XSS can not be executed after accessing HTML file."
	@priority = "4"
	test CannotExecuteXSSWhenAccessingHTMLFile {
		DMDocument.enableDirectoryIndexing(siteURLKey = "guest");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "The file is a basic HTML file with a simple JavaScript",
			dmDocumentTitle = "xss_test",
			groupName = "Guest",
			mimeType = "code/html",
			sourceFileName = "xss_test.html");

		DMDocument.downloadWithDirectoryIndexing(
			dmDocumentTitle = "xss_test",
			siteURLKey = "guest");

		AssertAlertNotPresent();

		DMDocument.assertFileNameFromTempFolder(fileName = "xss_test");
	}

	@priority = "4"
	@refactordone
	test CannotMoveToFolderWithDuplicateTitle {
		property portal.acceptance = "true";

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder1 Description",
			dmFolderName = "DM Folder1 Name",
			groupName = "Guest");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder2 Description",
			dmFolderName = "DM Folder2 Name",
			groupName = "Guest");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			folderName = "DM Folder1 Name",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			folderName = "DM Folder2 Name",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder1 Name");

		DMDocument.moveToFolderPG(
			dmDocumentTitle = "DM Document Title",
			dmDuplicateDocument = "true",
			dmFolderName = "DM Folder2 Name");
	}

	@description = "This is a test for LPS-91751. It ensures that a user cannot preview a file with size that exceeds the preview limit."
	@priority = "4"
	@refactordone
	test CannotPreviewFileThatExceedsLimit {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "DMFileEntry#CannotPreviewFileThatExceedsLimit";

		DMNavigator.openToConfigInSystemSettings(portlet = "File Entries");

		Type(
			key_fieldLabel = "Previewable Processor Maximum Size",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "1024");

		SystemSettings.saveConfiguration();

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description1",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "high_resolution_photo.jpg");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			siteURLKey = "guest");

		AssertVisible(
			key_title = "File too big to preview",
			locator1 = "Header#H3_TITLE");
	}

	@description = "This test ensures that a user cannot set a previous expiration date."
	@priority = "3"
	test CannotPublishInvalidExpirationDate {
		property custom.properties = "company.default.time.zone=America/Los_Angeles";

		DMNavigator.openToAddEntry(
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.editDocument(
			dmDocumentFile = "Document_5.txt",
			dmDocumentTitle = "Document_5.txt");

		DMDocument.setExpirationDate(
			enableExpirationDate = "true",
			increaseMinutes = "1",
			invalidExpirationDate = "true");
	}

	@description = "This is a use case for LPS-114470. Validate crafted or corrupted files cannot cause out of memory errors."
	@priority = "5"
	test CannotUploadFileThatCausesOutOfMemoryErrors {
		property testray.component.names = "Security";

		task ("Add new document") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title",
				groupName = "Guest",
				mimeType = "audio/x-mpeg",
				sourceFileName = "tika.mp3");
		}

		task ("Assert out of memory error message") {
			AssertConsoleTextPresent(value1 = "java.io.IOException: Record size");

			AssertConsoleTextPresent(value1 = "is larger than the allowed record size");

			AssertConsoleTextNotPresent(value1 = "java.lang.OutOfMemoryError");
		}
	}

	@description = "This test ensures that the guest cannot see an expired document."
	@priority = "4"
	test CannotViewExpiredDocumentAsGuest {
		property custom.properties = "company.default.time.zone=America/Los_Angeles";
		property test.name.skip.portal.instance = "DMFileEntry#CannotViewExpiredDocumentAsGuest";

		var portalURL = PropsUtil.get("portal.url");

		DMDocument.updateCheckInterval(fieldValue = "1");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_3.txt",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_3.txt");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_3.txt",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.setExpirationDate(
			enableExpirationDate = "true",
			increaseMinutes = "2");

		Navigator.openURL();

		Notifications.waitForNotificationFlexibly(
			flexibleRefreshingTime = "3000",
			waitingTime = "120000");

		Notifications.viewBadgeCount(notificationCount = "1");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.viewStatus(
			dmDocumentStatus = "Expired",
			dmDocumentTitle = "Document_3.txt");

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/documents-and-media-page");

		DMDocument.viewDefault();
	}

	@description = "This ensures that the empty state displays when the preview file doesn't have anything previewable."
	@priority = "4"
	@refactordone
	test CanPreviewEmptyState {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_1.doc",
			groupName = "Guest",
			siteURLKey = "guest");

		for (var emptyStateInfo : list "No preview available,Hmm... looks like this item does not have a preview we can show you.") {
			AssertTextEquals.assertPartialText(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_EMPTY_STATE_PREVIEW",
				value1 = "${emptyStateInfo}");
		}
	}

	@description = "This ensures that an image can be previewed through the original URL."
	@priority = "5"
	@refactordone
	test CanPreviewImageThroughURL {
		property portal.acceptance = "true";

		var portalURL = PropsUtil.get("portal.url");

		var siteId = JSONGroupAPI._getGroupIdByName(
			groupName = "Guest",
			site = "true");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_1",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		Navigator.openSpecificURL(url = "${portalURL}/documents/${siteId}/0/Document_1");

		var key_imageSourceURL = "${portalURL}/documents/${siteId}/0/Document_1";

		AssertElementPresent.pauseAssertVisible(locator1 = "DocumentsAndMediaDocument#DOCUMENT_VIEWPORT_PREVIEW");
	}

	@description = "This test covers LPS-104957. It ensures that the JPG file can be previewed."
	@priority = "5"
	@refactordone
	test CanPreviewJPG {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Guest",
			siteURLKey = "guest");

		AssertVisible(
			key_dmDocumentFileName = "Document_1.jpg",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");

		DMDocument.expandInfo();

		AssertVisible(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_THUMBNAIL");
	}

	@description = "This is a use case for LPS-88785."
	@priority = "5"
	@refactordone
	test CanPreviewPDF {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "large_file_2.pdf",
			groupName = "Guest",
			mimeType = "application/pdf",
			sourceFileName = "large_file_2.pdf");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "large_file_2.pdf",
			groupName = "Guest",
			siteURLKey = "guest");

		while (IsElementPresent(key_infoMessage = "Generating preview will take a few minutes.", locator1 = "Message#INFO_SPECIFIC")) {
			Pause(locator1 = "10000");

			Refresh();
		}

		AssertVisible(
			key_dmDocumentFileName = "large_file_2.pdf",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");

		AssertConsoleTextNotPresent(value1 = "Unable to render preview for file version: large_file_2.pdf");
	}

	@description = "This test covers LPS-146237. It validates that a PDF can be previewed from the Recycle Bin."
	@priority = "3"
	test CanPreviewPDFFromRecycleBin {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_1.pdf",
			groupName = "Guest",
			mimeType = "application/pdf",
			sourceFileName = "Document_1.pdf");

		JSONDocument.moveToRecycleBin(
			dmDocumentTitle = "Document_1.pdf",
			groupName = "Guest");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "guest");

		LexiconEntry.gotoEntry(rowEntry = "Document_1.pdf");

		AssertVisible(
			key_dmDocumentFileName = "Document_1.pdf",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");
	}

	@description = "This test covers LPS-148758. It ensures that a PDF without an extension can be previewed through the latest version URL."
	@priority = "3"
	test CanPreviewPDFWithoutExtensionViaLatestVersionURL {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_1.pdf",
			groupName = "Guest",
			mimeType = "application/pdf",
			sourceFileName = "Document_1.pdf");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "pdf_no_extension",
			groupName = "Guest",
			mimeType = "application/pdf",
			sourceFileName = "pdf_no_extension");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_1.pdf",
			groupName = "Guest",
			siteURLKey = "guest");

		var latestVersionURL = DMDocument.getLatestVersionURL();

		Navigator.openSpecificURL(url = "${latestVersionURL}");

		AssertAttributeValue(
			attribute1 = "baseURI",
			locator1 = "//embed",
			value1 = "${latestVersionURL}");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "pdf_no_extension",
			groupName = "Guest",
			siteURLKey = "guest");

		var latestVersionURL = DMDocument.getLatestVersionURL();

		Navigator.openSpecificURL(url = "${latestVersionURL}");

		AssertAttributeValue(
			attribute1 = "baseURI",
			locator1 = "//embed",
			value1 = "${latestVersionURL}");
	}

	@description = "This test covers LPS-104957. It ensures that the PNG file can be previewed."
	@priority = "5"
	@refactordone
	test CanPreviewPNG {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.png",
			groupName = "Guest",
			mimeType = "image/png",
			sourceFileName = "Document_1.png");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_1.png",
			groupName = "Guest",
			siteURLKey = "guest");

		AssertVisible(
			key_dmDocumentFileName = "Document_1.png",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");

		DMDocument.expandInfo();

		AssertVisible(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_THUMBNAIL");
	}

	@description = "This ensures that the SVG file can be previewed."
	@priority = "5"
	@refactordone
	test CanPreviewSVG {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.svg",
			groupName = "Guest",
			mimeType = "image/svg+xml",
			sourceFileName = "Document_1.svg");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_1.svg",
			groupName = "Guest",
			siteURLKey = "guest");

		AssertVisible(
			key_dmDocumentFileName = "Document_1.svg",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");

		DMDocument.expandInfo();

		AssertVisible(locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_THUMBNAIL");
	}

	@description = "This test ensures that a document with special characters in its title can be published successfully."
	@priority = "5"
	@refactordone
	test CanPublishTitleWithSpecialCharacters {
		property portal.acceptance = "true";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.addPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = '''/\<>:"?|*''');

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = '''/\<>:"?|*''',
			escapedTitle = '''/\&lt;&gt;:&#34;?|*''',
			specialCharacters = "true");
	}

	@description = "This test ensures that the user can republish an expired document after disabling expiration date."
	@priority = "4"
	test CanRepublishDocumentAfterDisablingExpirationDate {
		property custom.properties = "company.default.time.zone=America/Los_Angeles";
		property test.name.skip.portal.instance = "DMFileEntry#CanRepublishDocumentAfterDisablingExpirationDate";

		DMDocument.updateCheckInterval(fieldValue = "1");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_5.txt",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_5.txt");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_5.txt",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.setExpirationDate(
			enableExpirationDate = "true",
			increaseMinutes = "2");

		Navigator.openURL();

		Notifications.waitForNotificationFlexibly(
			flexibleRefreshingTime = "3000",
			waitingTime = "120000");

		Notifications.gotoNotifications();

		Notifications.navigateToContent(contentBody = "Document_5.txt");

		DMDocument.publishExpiredDocument(
			disableExpirationDate = "true",
			dmDocumentTitle = "Document_5.txt");

		DMDocument.viewStatus(
			dmDocumentStatus = "Approved",
			dmDocumentTitle = "Document_5.txt");
	}

	@description = "This case covers LPS-97708. It ensures that a document can be restored from the Recycle Bin even if its original folder no longer exists."
	@priority = "3"
	@refactordone
	test CanRestoreDocumentWithoutOriginalFolder {
		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Guest");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description1",
			dmDocumentTitle = "DM Document Title",
			folderName = "DM Folder Name",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		JSONDocument.moveToRecycleBin(
			dmDocumentTitle = "DM Document Title",
			folderName = "DM Folder Name",
			groupName = "Guest");

		JSONFolder.moveFolderToTrash(
			folderName = "DM Folder Name",
			groupName = "Guest");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "guest");

		RecycleBin.deleteCP(
			assetName = "DM Folder Name",
			assetType = "Documents Folder",
			multipleAssets = "true");

		RecycleBin.restoreContentWithoutOriginalFolder(
			assetName = "DM Document Title",
			assetRestoreLocation = "Home",
			assetType = "Document");

		AssertTextNotPresent(value1 = "NoSuchFolderException");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.viewCardTitle(dmDocumentTitle = "DM Document Title");
	}

	@description = "This test checks if file uploads can be restricted to .doc format."
	@priority = "5"
	@refactordone
	test CanRestrictFileExtensionToDoc {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "DMFileEntry#CanRestrictFileExtensionToDoc";

		DMDocument.updateFileExtensions(fieldValue = ".doc");

		SystemSettings.saveConfiguration();

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Title");

		for (var dmDocumentTitle : list "Document_1.docx,Document_1.jpeg") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			DMDocument.addCP(
				dmDocumentFile = "${dmDocumentTitle}",
				dmDocumentTitle = "${dmDocumentTitle}",
				validationError = "Document names must end with one of the following extensions: .doc");
		}
	}

	@priority = "4"
	@refactordone
	test CanRevertToOriginal {
		property custom.properties = "company.default.time.zone=America/Los_Angeles";
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.editPG(
			dmDocumentFileEdit = "Document_2.doc",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Version 2");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewAllPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title Version 2",
			dmDocumentVersionNumber = "2.0");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "DM Document Title Version 2",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.revertPG(
			dmDocumentTitle = "DM Document Title",
			dmDocumentVersionNumber = "1.0");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewAllPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			dmDocumentVersionNumber = "3.0");
	}

	@description = "This test ensures that the user can review a document when the date is changed."
	@priority = "4"
	test CanReviewDocumentWhenDateIsChanged {
		property custom.properties = "company.default.time.zone=America/Los_Angeles";
		property test.name.skip.portal.instance = "DMFileEntry#CanReviewDocumentWhenDateIsChanged";

		DMDocument.updateCheckInterval(fieldValue = "1");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_5.txt",
			groupName = "Guest",
			increaseMinutes = "10",
			mimeType = "text/plain",
			reviewDate = "true",
			sourceFileName = "Document_5.txt");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_5.txt",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.setReviewDate(increaseMinutes = "2");

		Navigator.openURL();

		Notifications.viewBadgeCount(notificationCount = "0");

		Navigator.openURL();

		Notifications.waitForNotificationFlexibly(
			flexibleRefreshingTime = "3000",
			waitingTime = "120000");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewReviewContent(
			contentBody = "Document_5.txt",
			user = "Test Test");

		Notifications.navigateToContent(contentBody = "Document_5.txt");

		DMDocument.reviewDocument(dmDocumentTitle = "Document_5.txt");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_5.txt",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewCP(
			dmDocumentTitle = "Document_5.txt",
			reviewDate = "true",
			user = "Test Test");
	}

	@description = "This test ensures that the user can review a document when the date is disabled."
	@priority = "4"
	test CanReviewDocumentWhenDateIsDisabled {
		property custom.properties = "company.default.time.zone=America/Los_Angeles";
		property test.name.skip.portal.instance = "DMFileEntry#CanReviewDocumentWhenDateIsDisabled";

		DMDocument.updateCheckInterval(fieldValue = "1");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_5.txt",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_5.txt");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_5.txt",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.setReviewDate(
			enableReviewDate = "true",
			increaseMinutes = "2");

		Navigator.openURL();

		Notifications.waitForNotificationFlexibly(
			flexibleRefreshingTime = "3000",
			waitingTime = "120000");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewReviewContent(
			contentBody = "Document_5.txt",
			user = "Test Test");

		Notifications.navigateToContent(contentBody = "Document_5.txt");

		DMDocument.reviewDocument(
			disableReviewDate = "true",
			dmDocumentTitle = "Document_5.txt");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_5.txt",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewCP(
			disabledReviewDate = "true",
			dmDocumentTitle = "Document_5.txt",
			reviewDate = "true");
	}

	@description = "This test ensures that the user can review a document when the date is set."
	@priority = "5"
	test CanReviewDocumentWhenDateIsSet {
		property custom.properties = "company.default.time.zone=America/Los_Angeles";
		property test.name.skip.portal.instance = "DMFileEntry#CanReviewDocumentWhenDateIsSet";

		DMDocument.updateCheckInterval(fieldValue = "1");

		DMNavigator.openToAddEntry(
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.editDocument(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_2.txt",
			dmDocumentTitle = "Document_2.txt");

		DMDocument.setReviewDate(
			enableReviewDate = "true",
			increaseMinutes = "2");

		Navigator.openURL();

		Notifications.waitForNotificationFlexibly(
			flexibleRefreshingTime = "3000",
			waitingTime = "120000");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewReviewContent(
			contentBody = "Document_2.txt",
			user = "Test Test");

		Notifications.navigateToContent(contentBody = "Document_2.txt");

		DMDocument.reviewDocument(dmDocumentTitle = "Document_2.txt");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_2.txt",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewCP(
			dmDocumentTitle = "Document_2.txt",
			reviewDate = "true",
			user = "Test Test");
	}

	@description = "This test covers LPS-130154. It ensures that the user can search for a document based on the content."
	@priority = "4"
	@refactordone
	test CanSearchForDocumentBasedOnContent {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_5.txt",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_5.txt");

		AssertConsoleTextNotPresent(value1 = "WriteLimitReachedException");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		Search.searchCP(searchTerm = "gJybWNXR76fTX0TlIu8mFP2dNVtTGdq");

		DMDocument.viewSearchResultsCP(dmDocumentTitle = "Document_5.txt");
	}

	@description = "This ensures that the user can search for document file name using partial text."
	@priority = "5"
	@refactordone
	test CanSearchForDocumentWithPartialText {
		property portal.acceptance = "true";

		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		Search.searchCP(searchTerm = "DM");

		DMDocument.viewSearchResultsCP(dmDocumentTitle = "DM Document Title");
	}

	@description = "This is a test for LPS-80857. It checks that the user will stay in the same folder context after filtering."
	@priority = "3"
	test CanStayInFolderAfterFiltering {
		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Guest");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			folderName = "DM Folder Name",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DMNavigator.openToFolderInAdmin(
			dmFolderName = "DM Folder Name",
			groupName = "Guest",
			siteURLKey = "guest");

		ManagementBar.setFilterAndOrder(menuItem = "Recent");

		DMDocument.viewStatus(
			dmDocumentStatus = "Approved",
			dmDocumentTitle = "DM Document Title");
	}

	@description = "This ensures that the user can create a document with edited display page template."
	@priority = "4"
	@refactordone
	test CanViewDocumentWithEditedDisplayPageTemplate {
		property portal.acceptance = "true";

		JSONGroup.addGroup(groupName = "Test Site Name");

		DMNavigator.openDocumentTypesAdmin(siteURLKey = "test-site-name");

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Text",
			dmDocumentTypeName = "DM Document Type Name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.addDisplayPage(
			contentType = "Document",
			displayPageName = "Display Page Template Name",
			subType = "DM Document Type Name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Template Name");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Container");

		Button.clickPublish();

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
			displayPageName = "Display Page Template Name",
			item = "Edit");

		PageEditor.removeFragment(fragmentName = "Container");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Display Page Content");

		Button.clickPublish();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "Document_1.jpg",
			dmDocumentTypeName = "DM Document Type Name",
			textField = "DM Document Text");

		DisplayPageTemplate.selectDisplayPageTemplateForAsset(
			assetType = "Document",
			entryTitle = "Document_1.jpg",
			groupName = "Test Site Name",
			pageName = "Display Page Template Name",
			siteURLKey = "test-site-name");

		var dmFileEntryId = JSONDocument.getFileEntryId(
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Test Site Name");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/d/${dmFileEntryId}");

		AssertVisible(
			key_imageFileName = "Document_1.jpg",
			locator1 = "PageEditor#ENTRY_COVER_IMAGE");
	}

	@description = "This ensures that the user can create a document with the topic from the Global site."
	@priority = "4"
	@refactordone
	test CanViewDocumentWithTopics {
		property portal.acceptance = "true";

		JSONCategory.addCategory(
			groupName = "Global",
			title = "Apple",
			vocabularyName = "Topic");

		JSONCategory.addCategory(
			groupName = "Global",
			title = "Dragon Fruit",
			vocabularyName = "Topic");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.addPG(
			categoryName = "Apple",
			dmDocumentDescription = "Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "Document_1.doc",
			vocabularyName = "Topic");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_1.doc",
			groupName = "Guest",
			siteURLKey = "guest");

		Panel.expandPanel(panel = "Categorization");

		AssetCategorization.addCategory(
			categoryName = "Dragon Fruit",
			vocabularyName = "Topic");

		Button.clickPublish();

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_1.doc",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewCategories(categoryNameList = "Apple,Dragon Fruit");
	}

	@description = "This test ensures that the user can view an expired document."
	@priority = "5"
	test CanViewExpiredDocument {
		property custom.properties = "company.default.time.zone=America/Los_Angeles";
		property test.name.skip.portal.instance = "DMFileEntry#CanViewExpiredDocument";

		DMDocument.updateCheckInterval(fieldValue = "1");

		DMNavigator.openToAddEntry(
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.editDocument(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "Document_1.txt");

		DMDocument.setExpirationDate(
			enableExpirationDate = "true",
			increaseMinutes = "2");

		Navigator.openURL();

		Notifications.waitForNotificationFlexibly(
			flexibleRefreshingTime = "3000",
			waitingTime = "120000");

		Notifications.viewBadgeCount(notificationCount = "1");

		Notifications.gotoNotifications();

		Notifications.viewExpiredContent(
			contentBody = "Document_1.txt",
			user = "Test Test");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.viewStatus(
			dmDocumentStatus = "Expired",
			dmDocumentTitle = "Document_1.txt");
	}

	@description = "This test ensures that a user who has content review permissions can see an expired document."
	@priority = "4"
	test CanViewExpiredDocumentAsContentReviewer {
		property custom.properties = "company.default.time.zone=America/Los_Angeles${line.separator}jsonws.web.service.paths.excludes=";
		property test.name.skip.portal.instance = "DMFileEntry#CanViewExpiredDocumentAsContentReviewer";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Portal Content Reviewer",
			userEmailAddress = "userea@liferay.com");

		DMDocument.updateCheckInterval(fieldValue = "1");

		DMNavigator.openToAddEntry(
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.editDocument(
			dmDocumentFile = "Document_5.txt",
			dmDocumentTitle = "Document_5.txt");

		DMDocument.setExpirationDate(
			enableExpirationDate = "true",
			increaseMinutes = "1");

		Pause(locator1 = "120000");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewStatus(
			dmDocumentStatus = "Expired",
			dmDocumentTitle = "Document_5.txt");
	}

	@description = "This ensures that a user can view the information about an image when navigating to info panel."
	@priority = "4"
	@refactordone
	test CanViewImageFromInfoPanel {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentExtension = "jpg",
			dmDocumentFileTypeInfo = "Image",
			dmDocumentTitle = "DM Document Title",
			dmDocumentType = "Basic Document");
	}

	@description = "This ensures that the document title can be displayed correctly in the different views."
	@priority = "5"
	@refactordone
	test CanViewInDifferentDisplayStyles {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_2",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_2.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "cards");

		LexiconCard.viewCardTitle(card = "Document_2");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		LexiconTable.viewTableEntryTitle(tableEntry = "Document_2");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		LexiconList.viewListEntryTitleLink(listEntry = "Document_2");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_2");

		DMDocument.viewCP(
			dmDocumentFileName = "Document_2.doc",
			dmDocumentTitle = "Document_2");
	}

	@priority = "4"
	@refactordone
	test CanViewOlderVersion {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.editPG(
			dmDocumentDescriptionEdit = "DM Document Description Edited",
			dmDocumentTitle = "DM Document Title");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewPG(
			dmDocumentDescription = "DM Document Description Edited",
			dmDocumentTitle = "DM Document Title");

		DMDocument.viewOlderVersionPG(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			dmDocumentVersionNumber = "1.0");
	}

	@description = "This ensures that the user can view the document through related assets."
	@priority = "3"
	@refactordone
	test CanViewRelatedDocument {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Guest",
			siteURLKey = "guest");

		RelatedAssets.selectAsset(
			assetTitle = "Document_1.doc",
			assetType = "Basic Document");

		Button.clickPublish();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMNavigator.gotoRelatedAssetPG(
			assetTitle = "Document_2.jpg",
			dmDocumentTitle = "Document_1.doc");

		AssertVisible(
			key_dmDocumentFileName = "Document_2.jpg",
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_DETAILS_IMAGE_PREVIEW");
	}

	@description = "This is a test for LPS-145630. It checks that the DOCs linked in web articles content can be updated."
	@priority = "4"
	test DocumentLinkedInWCCanBeUpdated {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "Document_1.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		WebContentNavigator.openToAddBasicArticle(
			groupName = "Guest",
			siteURLKey = "guest");

		PortletEntry.inputTitle(title = "Web Content Title");

		CKEditor.addTextWithLink(
			displayText = "Web Content Content",
			dmDocumentTitle = "Document_1.doc",
			fieldLabel = "content");

		PortletEntry.publish();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Test Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "Test Page",
			widgetName = "Web Content Display");

		Navigator.gotoPage(pageName = "Test Page");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

		IFrame.closeFrame();

		Click(
			key_portletName = "Web Content Display",
			locator1 = "Portlet#BODY",
			value1 = "Web Content Content");

		DMDocument.assertDownloadedFileContent(
			downloadedContent = "This is a *.doc file.",
			fileName = "Document_1.doc");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentFileEdit = "Document_2.doc",
			dmDocumentFileNameEdit = "Document_2.doc",
			dmDocumentTitle = "Document_1.doc",
			dmDocumentTitleEdit = "Document_2.doc");

		Navigator.gotoPage(pageName = "Test Page");

		Click(
			key_portletName = "Web Content Display",
			locator1 = "Portlet#BODY",
			value1 = "Web Content Content");

		DMDocument.assertDownloadedFileContent(
			downloadedContent = "This is a test document 2.",
			fileName = "Document_2.doc");
	}

	@description = "This test covers LPS-112571. It ensures that a gif file can be added to editor normally after disabling the gif mime type from the adaptive media of the system settings."
	@priority = "3"
	@refactorneeded
	test GifFileCanBeAddedToEditorAfterDisablingGifMimeTypeInAM {
		property test.name.skip.portal.instance = "DMFileEntry#GifFileCanBeAddedToEditorAfterDisablingGifMimeTypeInAM";

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Adaptive Media",
			configurationName = "Images",
			configurationScope = "System Scope");

		Click(
			key_fieldValue = "image/gif",
			locator1 = "DDMField#REMOVE_SPECIFIC_REPEATED_FIELD");

		SystemSettings.saveConfiguration();

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoAddEntry();

		BlogsEntry.addTitle(entryTitle = "Blogs Entry Title");

		BlogsEntry.addContentWithInlineImage(
			entryContent = "Blogs Entry Content",
			navTab = "Documents and Media",
			uploadFileName = "static.gif");

		PortletEntry.publish();

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

		BlogsEntry.viewInlineImage(uploadFileName = "static.gif");
	}

	@description = "This test covers LPS-144687. It validates that a temp zip is not created if NoSuchFileException occurs during a download."
	@ignore = "Test Stub"
	@priority = "4"
	test NoZipFileIsCreatedIfDownloadResultsInError {

		// TODO LPS-149394

	}

	@description = "This test covers LPS-101667. It makes sure that the file size can be displayed correctly in the different versions after editing the document file."
	@priority = "3"
	@refactordone
	test SizeIsDisplayedCorrectlyInDifferentVersions {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentFileEdit = "Document_1.txt",
			dmDocumentFileNameEdit = "Document_1.txt",
			dmDocumentTitle = "Document_2",
			dmDocumentTitleEdit = "Document_1");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1");

		DMDocument.viewFileSizeByVersion(
			dmDocumentSize = "30 KB",
			dmDocumentVersionNumber = "1.0");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Document_1",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewFileSizeByVersion(
			dmDocumentSize = "259 B",
			dmDocumentVersionNumber = "2.0");
	}

	@description = "This test ensures that a document with forbidden characters in the filename can not be published successfully."
	@priority = "5"
	@refactorneeded
	test ValidateFileNameRestrictions {
		property portal.acceptance = "true";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentFileName = '''Document_1''',
			dmDocumentTitle = "DM Document Title",
			emptyFileNameRestriction = "true");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentFileName = "",
			dmDocumentTitle = "DM Document Title",
			emptyFileNameRestriction = "true");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentFileName = '''\\\///.jpg''',
			dmDocumentTitle = "DM Document Title",
			validateFileNameRestriction = "true");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentFileName = '''<>.txt''',
			dmDocumentTitle = "DM Document Title",
			validateFileNameRestriction = "true");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentFileName = ''':"?.doc''',
			dmDocumentTitle = "DM Document Title",
			validateFileNameRestriction = "true");
	}

	@priority = "5"
	@refactorneeded
	test ViewFileCategoryAndTags {
		JSONCategory.addVocabulary(
			groupName = "Guest",
			title = "Vocabulary Name");

		ProductMenu.gotoPortlet(
			category = "Categorization",
			portlet = "Categories");

		Category.addCP(
			categoryDescription = "Category Description",
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name");

		Navigator.openSiteURL(siteName = "Guest");

		ProductMenu.gotoPortlet(
			category = "Categorization",
			portlet = "Tags");

		var tagNameList = "tag1,tag2";

		for (var tagName : list "${tagNameList}") {
			Tag.addCP(tagName = "${tagName}");
		}

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addPG(
			categoryName = "Category Name",
			dmDocumentDescription = "Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "Document Title",
			tagNameList = "tag1,tag2",
			vocabularyName = "Vocabulary Name");

		Click(
			key_dmDocumentTitle = "Document Title",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Edit");

		Panel.expandPanel(panel = "Categorization");

		AssertTextEquals(
			key_categoryName = "Category Name",
			locator1 = "AssetCategorization#CATEGORY",
			value1 = "Category Name");

		for (var tagName : list "${tagNameList}") {
			var key_tagName = "${tagName}";

			AssertTextEquals(
				locator1 = "AssetCategorization#TAG",
				value1 = "${tagName}");
		}

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewPG(
			categoryName = "Category Name",
			dmDocumentDescription = "Document Description",
			dmDocumentTitle = "Document Title",
			tagNameList = "tag1,tag2");
	}

	@description = "This is a test for LPS-94829. It ensures that the wildcard can be defined with other file extensions."
	@priority = "4"
	test WildcardCanBeDefinedWithOtherFileExtensions {
		property test.name.skip.portal.instance = "DMFileEntry#WildcardCanBeDefinedWithOtherFileExtensions";

		DMDocument.updateFileExtensions(
			fieldValue = ".doc",
			indexNumber = "2");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.doc",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		for (var dmDocumentTitleList : list "Document_2.jpg,Document_1.doc") {
			DMDocument.viewStatus(
				dmDocumentStatus = "Approved",
				dmDocumentTitle = "${dmDocumentTitleList}");
		}
	}

}