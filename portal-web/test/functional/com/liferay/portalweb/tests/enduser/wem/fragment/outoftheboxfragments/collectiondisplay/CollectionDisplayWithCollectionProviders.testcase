@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page Name",
				type = "content");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a use case for LPS-127024. The user can add a Collection Display with a manual collection into another Collection Display with Recent Content."
	@priority = "5"
	@uitest
	test AddCollectionDisplayWithManualCollectionToAnotherCollectionDisplayWithRecentContent {
		property portal.acceptance = "true";

		task ("Add a web content,a blogs entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a manual collection for All Types") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemType = "All Types",
				title = "Manual Collection");
		}

		task ("Select the web content as collection item") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Manual Collection");

			AssetListsAdmin.selectAsset(
				assetName = "Web Content Title",
				assetType = "Basic Web Content");
		}

		task ("Add a Grid to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Change the Number of Modules to 2") {
			PageEditor.editLayoutGrid(
				columnCount = "2",
				panel = "General");
		}

		task ("Add a Collection Display to the first module") {
			PageEditor.addElementToColumn(
				collectionName = "Content Display",
				columnNumber = "1",
				fragmentName = "Collection Display",
				navTab = "Fragments");
		}

		task ("Select the Recent Content and Bordered List in Collection Display") {
			PageEditor.editCollectionDisplay(
				columnNumber = "1",
				fragmentName = "Collection Display",
				infoListProviderName = "Recent Content",
				styleDisplay = "Bordered List");
		}

		task ("Add a Collection Display to the second module") {
			PageEditor.addElementToColumn(
				collectionName = "Content Display",
				columnNumber = "2",
				fragmentName = "Collection Display",
				navTab = "Fragments");
		}

		task ("Select the Recent Content in Collection Display") {
			PageEditor.editCollectionDisplay(
				columnNumber = "2",
				fragmentName = "Collection Display",
				infoListProviderName = "Recent Content");
		}

		task ("Add a Collection Display fragment into the second module Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "Document Title",
				fragmentName = "Collection Display");
		}

		task ("Select the manual collection and Bulleted List in inner Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Manual Collection",
				fragmentName = "Collection Display",
				index = "3",
				styleDisplay = "Bulleted List");
		}

		task ("View the title of assets are shown in the first module") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST");

				var n = ${n} + 1;
			}
		}

		task ("View the title of web content shown in the second module") {
			for (var n : list "1,2,3") {
				AssertVisible(locator1 = "xpath=(//div[@aria-label='Collection Display']//div[contains(@class,'page-editor__collection')]//ul[not(contains(@class,'list-group'))]/li[1][normalize-space(text())='Web Content Title'])[${n}]");
			}

			PageEditor.clickPublish();
		}

		task ("Navigate to page at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");
		}

		task ("View the title of assets are shown in the first module") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}

		task ("View the title of web content shown in the second module") {
			for (var n : list "1,2,3") {
				AssertVisible(locator1 = "xpath=(//div[contains(@class,'layout-content')]//ul[not(contains(@class,'list-group'))]/li[1][normalize-space(text())='Web Content Title'])[${n}]");
			}
		}
	}

	@description = "This is a use case for LPS-127024. The user can add a Collection Display with a Most Viewed Assets into another Collection Display with a manual collection."
	@priority = "4"
	test AddCollectionDisplayWithMostViewedAssetsToAnotherCollectionDisplayWithManualCollection {
		task ("Add a web content,a blogs entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a manual collection for Web Content Article and All Subtypes") {
			JSONAssetlist.addManualAssetListEntryWithItemType(
				groupName = "Test Site Name",
				itemSubtype = "All Subtypes",
				itemType = "Web Content Article",
				title = "Manual Collection");
		}

		task ("Select the web content as collection item") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			AssetListsAdmin.editAssetList(assetListTitle = "Manual Collection");

			AssetListsAdmin.selectAsset(
				assetName = "Web Content Title",
				assetType = "Basic Web Content");
		}

		task ("Add a Grid to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");
		}

		task ("Change the Number of Modules to 2") {
			PageEditor.editLayoutGrid(
				columnCount = "2",
				panel = "General");
		}

		task ("Add a Collection Display to the first module") {
			PageEditor.addElementToColumn(
				collectionName = "Content Display",
				columnNumber = "1",
				fragmentName = "Collection Display",
				navTab = "Fragments");
		}

		task ("Select the manual collection and Bordered List in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Manual Collection",
				columnNumber = "1",
				fragmentName = "Collection Display",
				styleDisplay = "Bordered List");
		}

		task ("Add a Collection Display to the second module") {
			PageEditor.addElementToColumn(
				collectionName = "Content Display",
				columnNumber = "2",
				fragmentName = "Collection Display",
				navTab = "Fragments");
		}

		task ("Select the manual collection in Collection Display") {
			PageEditor.editCollectionDisplay(
				assetListName = "Manual Collection",
				columnNumber = "2",
				fragmentName = "Collection Display");
		}

		task ("Add a Collection Display fragment into the second module Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "Web Content Title",
				fragmentName = "Collection Display");
		}

		task ("Select the Most Viewed Assets and Bulleted List in inner Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				index = "3",
				infoListProviderName = "Most Viewed Assets",
				styleDisplay = "Bulleted List");
		}

		task ("View the title of web content shown in the first module") {
			AssertVisible(
				key_entryContent = "[normalize-space()='Web Content Title']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST");
		}

		task ("View the title of assets shown in the second module") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST");

				var n = ${n} + 1;
			}

			PageEditor.clickPublish();
		}

		task ("Navigate to page at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");
		}

		task ("View the title of web content shown in the first module") {
			AssertVisible(
				key_entryContent = "[normalize-space()='Web Content Title']",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");
		}

		task ("View the title of assets shown in the second module") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertVisible(
					key_entryContent = "[normalize-space(text())='${title}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-126009 and LPS-147390. The user is able to filter web contents in Collection Display using Tag."
	@priority = "5"
	test FilterWebContentByTag {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CollectionDisplayWithCollectionProviders#FilterWebContentByTag";

		task ("Enable Basic Web Content flag in Gogo Shell") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:enable com.liferay.journal.web.internal.info.collection.provider.BasicWebContentSingleFormVariationInfoCollectionProvider");

			GogoShell.viewOutput(outputContent = "true");
		}

		task ("Add three web contents with different tags") {
			for (var n : list "1,2,3") {
				JSONWebcontent.addWebContent(
					assetTagNames = "tag${n}",
					content = "Web Content Content ${n}",
					groupName = "Test Site Name",
					title = "Web Content Title ${n}");
			}
		}

		task ("Add the fourth web content with three tags") {
			JSONWebcontent.addWebContent(
				assetTagNames = "tag1,tag2,tag3",
				content = "Web Content Content 4",
				groupName = "Test Site Name",
				title = "Web Content Title 4");
		}

		task ("Add the fifth web content without tag") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content 5",
				groupName = "Test Site Name",
				title = "Web Content Title 5");
		}

		task ("Add a Collection Display fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the Basic Web Content collection provider in Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Basic Web Content");
		}

		task ("View all web contents are shown in Collection Display") {
			var n = "1";

			for (var namespace : list "5,4,3,2,1") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "Web Content Title ${namespace}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}
		}

		task ("Filter web contents by the tag1") {
			PageEditor.editCollectionDisplay(
				filterCollection = "true",
				filterResults = "There are 2 results for tag1.",
				fragmentName = "Collection Display",
				selectedName = "Basic Web Content",
				tagNameList = "tag1");
		}

		task ("View the text info shown below the Collection field") {
			AssertTextEquals(
				key_text = "info-panel-open",
				locator1 = "Icon#ANY",
				value1 = "Collection Prefiltered");
		}

		task ("View only web contents with tag1 are shown in Collection Display") {
			var n = "1";

			for (var namespace : list "4,1") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "Web Content Title ${namespace}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_rowPosition = "3",
				locator1 = "PageEditor#COLLECTION_ITEM");
		}

		task ("Clear the filter then filter by the tag2") {
			PageEditor.editCollectionDisplay(
				clearFilter = "true",
				filterCollection = "true",
				filterResults = "There are 2 results for tag2.",
				fragmentName = "Collection Display",
				selectedName = "Basic Web Content",
				tagNameList = "tag2");
		}

		task ("View the text info shown below the Collection field") {
			AssertTextEquals(
				key_text = "info-panel-open",
				locator1 = "Icon#ANY",
				value1 = "Collection Prefiltered");
		}

		task ("View only web contents with tag2 are shown in Collection Display") {
			var n = "1";

			for (var namespace : list "4,2") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "Web Content Title ${namespace}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_rowPosition = "3",
				locator1 = "PageEditor#COLLECTION_ITEM");
		}

		task ("Clear the filter then filter by the tag3") {
			PageEditor.editCollectionDisplay(
				clearFilter = "true",
				filterCollection = "true",
				filterResults = "There are 2 results for tag3.",
				fragmentName = "Collection Display",
				selectedName = "Basic Web Content",
				tagNameList = "tag3");
		}

		task ("View the text info shown below the Collection field") {
			AssertTextEquals(
				key_text = "info-panel-open",
				locator1 = "Icon#ANY",
				value1 = "Collection Prefiltered");
		}

		task ("View only web contents with tag3 are shown in Collection Display") {
			var n = "1";

			for (var namespace : list "4,3") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "Web Content Title ${namespace}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_rowPosition = "3",
				locator1 = "PageEditor#COLLECTION_ITEM");
		}

		task ("Clear the filter then filter by all tags") {
			PageEditor.editCollectionDisplay(
				clearFilter = "true",
				filterCollection = "true",
				filterResults = "There are 4 results for tag1, tag2, tag3.",
				fragmentName = "Collection Display",
				selectedName = "Basic Web Content",
				tagNameList = "tag1,tag2,tag3");
		}

		task ("View the text info shown below the Collection field") {
			AssertTextEquals(
				key_text = "info-panel-open",
				locator1 = "Icon#ANY",
				value1 = "Collection Prefiltered");
		}

		task ("View only web contents with tag are shown in Collection Display") {
			var n = "1";

			for (var namespace : list "4,3,2,1") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "Web Content Title ${namespace}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_rowPosition = "5",
				locator1 = "PageEditor#COLLECTION_ITEM");
		}

		task ("Disable Basic Web Content flag in Gogo Shell") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:disable com.liferay.journal.web.internal.info.collection.provider.BasicWebContentSingleFormVariationInfoCollectionProvider");

			GogoShell.viewOutput(outputContent = "true");
		}
	}

	@description = "This is a test for LPS-126009. The user is able to filter web contents in Collection Display using Tag and Title."
	@priority = "4"
	test FilterWebContentByTagAndTitle {
		property test.name.skip.portal.instance = "CollectionDisplayWithCollectionProviders#FilterWebContentByTagAndTitle";

		task ("Enable Basic Web Content flag in Gogo Shell") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:enable com.liferay.journal.web.internal.info.collection.provider.BasicWebContentSingleFormVariationInfoCollectionProvider");

			GogoShell.viewOutput(outputContent = "true");
		}

		task ("Add a tag named tag3") {
			JSONAssettag.addTag(
				groupName = "Test Site Name",
				tagName = "tag3");
		}

		task ("Add the first web content with tag1") {
			JSONWebcontent.addWebContent(
				assetTagNames = "tag1",
				content = "Web Content Content 1",
				groupName = "Test Site Name",
				title = "Web Content Title 1");
		}

		task ("Add the second web Content with tag1 and tag2") {
			JSONWebcontent.addWebContent(
				assetTagNames = "tag1,tag2",
				content = "Web Content Content 2",
				groupName = "Test Site Name",
				title = "Web Content Title 2");
		}

		task ("Add the third web content without tag") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content 3",
				groupName = "Test Site Name",
				title = "Web Content Title 3");
		}

		task ("Add a Collection Display fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the Basic Web Content collection provider in Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Basic Web Content");
		}

		task ("View all web contents are shown in Collection Display") {
			var n = "1";

			for (var namespace : list "3,2,1") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "Web Content Title ${namespace}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}
		}

		task ("Filter web contents by tag1") {
			PageEditor.editCollectionDisplay(
				filterCollection = "true",
				filterResults = "There are 2 results for tag1.",
				fragmentName = "Collection Display",
				selectedName = "Basic Web Content",
				tagNameList = "tag1");
		}

		task ("View only web contents with tag1 are shown in Collection Display") {
			var n = "1";

			for (var namespace : list "2,1") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "Web Content Title ${namespace}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_rowPosition = "3",
				locator1 = "PageEditor#COLLECTION_ITEM");
		}

		task ("Filter web contents by tag1 and title") {
			PageEditor.editCollectionDisplay(
				assetTitle = '''"Web Content Title 1"''',
				filterCollection = "true",
				filterResults = '''There is 1 result for tag1, "Web Content Title 1".''',
				fragmentName = "Collection Display",
				selectedName = "Basic Web Content");
		}

		task ("View only the Web Content Title 1 is shown in Collection Display") {
			AssertVisible(
				key_colPosition = "1",
				key_entryTitle = "Web Content Title 1",
				key_fragmentName = "Collection Display",
				key_rowPosition = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

			AssertElementNotPresent(
				key_colPosition = "1",
				key_rowPosition = "2",
				locator1 = "PageEditor#COLLECTION_ITEM");
		}

		task ("Clear the filter then filter by tag1 and tag2") {
			PageEditor.editCollectionDisplay(
				clearFilter = "true",
				filterCollection = "true",
				filterResults = "There are 2 results for tag1, tag2.",
				fragmentName = "Collection Display",
				selectedName = "Basic Web Content",
				tagNameList = "tag1,tag2");
		}

		task ("View only web contents with tag1 or tag2 are shown in Collection Display") {
			var n = "1";

			for (var namespace : list "2,1") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "Web Content Title ${namespace}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}

			AssertElementNotPresent(
				key_colPosition = "1",
				key_rowPosition = "3",
				locator1 = "PageEditor#COLLECTION_ITEM");
		}

		task ("Filter web contents by tag1,tag2 and title") {
			PageEditor.editCollectionDisplay(
				assetTitle = '''"Web Content Title 1"''',
				filterCollection = "true",
				filterResults = '''There is 1 result for tag1, tag2, "Web Content Title 1".''',
				fragmentName = "Collection Display",
				selectedName = "Basic Web Content");
		}

		task ("View only the Web Content Title 1 is shown in Collection Display") {
			AssertVisible(
				key_colPosition = "1",
				key_entryTitle = "Web Content Title 1",
				key_fragmentName = "Collection Display",
				key_rowPosition = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

			AssertElementNotPresent(
				key_colPosition = "1",
				key_rowPosition = "2",
				locator1 = "PageEditor#COLLECTION_ITEM");
		}

		task ("Filter web contents by tag1,tag2 and another title") {
			PageEditor.editCollectionDisplay(
				assetTitle = '''"Web Content Title 2"''',
				filterCollection = "true",
				filterResults = '''There is 1 result for tag1, tag2, "Web Content Title 2".''',
				fragmentName = "Collection Display",
				selectedName = "Basic Web Content");
		}

		task ("View only the Web Content Title 2 is shown in Collection Display") {
			AssertVisible(
				key_colPosition = "1",
				key_entryTitle = "Web Content Title 2",
				key_fragmentName = "Collection Display",
				key_rowPosition = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

			AssertElementNotPresent(
				key_colPosition = "1",
				key_rowPosition = "2",
				locator1 = "PageEditor#COLLECTION_ITEM");
		}

		task ("Clear the filter then filter by title") {
			PageEditor.editCollectionDisplay(
				assetTitle = '''"Web Content Title 3"''',
				clearFilter = "true",
				filterCollection = "true",
				filterResults = '''There is 1 result for "Web Content Title 3".''',
				fragmentName = "Collection Display",
				selectedName = "Basic Web Content");
		}

		task ("View only the Web Content Title 3 is shown in Collection Display") {
			AssertVisible(
				key_colPosition = "1",
				key_entryTitle = "Web Content Title 3",
				key_fragmentName = "Collection Display",
				key_rowPosition = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

			AssertElementNotPresent(
				key_colPosition = "1",
				key_rowPosition = "2",
				locator1 = "PageEditor#COLLECTION_ITEM");
		}

		task ("Filter web contents by title and tag3") {
			PageEditor.editCollectionDisplay(
				filterCollection = "true",
				filterResults = '''There are 0 results for "Web Content Title 3", tag3.''',
				fragmentName = "Collection Display",
				selectedName = "Basic Web Content",
				tagNameList = "tag3");
		}

		task ("View the empty message shown in Collection Display") {
			AssertVisible(
				key_infoMessage = "The collection is empty. To display your items, add them to the collection or choose a different collection.",
				locator1 = "Message#INFO_SPECIFIC");
		}

		task ("Disable Basic Web Content flag in Gogo Shell") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:disable com.liferay.journal.web.internal.info.collection.provider.BasicWebContentSingleFormVariationInfoCollectionProvider");

			GogoShell.viewOutput(outputContent = "true");
		}
	}

	@description = "This is a test for LPS-126009. The user is able to filter web contents in Collection Display using Title."
	@priority = "4"
	test FilterWebContentByTitle {
		property test.name.skip.portal.instance = "CollectionDisplayWithCollectionProviders#FilterWebContentByTitle";

		task ("Enable Basic Web Content flag in Gogo Shell") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:enable com.liferay.journal.web.internal.info.collection.provider.BasicWebContentSingleFormVariationInfoCollectionProvider");

			GogoShell.viewOutput(outputContent = "true");
		}

		task ("Add three web contents") {
			for (var n : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content ${n}",
					groupName = "Test Site Name",
					title = "Web Content Title ${n}");
			}
		}

		task ("Add a Collection Display fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the Basic Web Content collection provider in Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Basic Web Content");
		}

		task ("View all web contents are shown in Collection Display") {
			var n = "1";

			for (var namespace : list "3,2,1") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "Web Content Title ${namespace}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}
		}

		task ("Filter web contents by title") {
			PageEditor.editCollectionDisplay(
				assetTitle = '''"Web Content Title 1"''',
				filterCollection = "true",
				filterResults = '''There is 1 result for "Web Content Title 1".''',
				fragmentName = "Collection Display",
				selectedName = "Basic Web Content");
		}

		task ("View only the Web Content Title 1 is shown in Collection Display") {
			AssertVisible(
				key_colPosition = "1",
				key_entryTitle = "Web Content Title 1",
				key_fragmentName = "Collection Display",
				key_rowPosition = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

			AssertElementNotPresent(
				key_colPosition = "1",
				key_rowPosition = "2",
				locator1 = "PageEditor#COLLECTION_ITEM");
		}

		task ("Clear the filter then filter by another title") {
			PageEditor.editCollectionDisplay(
				assetTitle = '''"Title 2"''',
				clearFilter = "true",
				filterCollection = "true",
				filterResults = '''There is 1 result for "Title 2".''',
				fragmentName = "Collection Display",
				selectedName = "Basic Web Content");
		}

		task ("View only the Web Content Title 2 is shown in Collection Display") {
			AssertVisible(
				key_colPosition = "1",
				key_entryTitle = "Web Content Title 2",
				key_fragmentName = "Collection Display",
				key_rowPosition = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

			AssertElementNotPresent(
				key_colPosition = "1",
				key_rowPosition = "2",
				locator1 = "PageEditor#COLLECTION_ITEM");
		}

		task ("Clear the filter then filter by another title") {
			PageEditor.editCollectionDisplay(
				assetTitle = "3",
				clearFilter = "true",
				filterCollection = "true",
				filterResults = "There is 1 result for 3.",
				fragmentName = "Collection Display",
				selectedName = "Basic Web Content");
		}

		task ("View only the Web Content Title 3 is shown in Collection Display") {
			AssertVisible(
				key_colPosition = "1",
				key_entryTitle = "Web Content Title 3",
				key_fragmentName = "Collection Display",
				key_rowPosition = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

			AssertElementNotPresent(
				key_colPosition = "1",
				key_rowPosition = "2",
				locator1 = "PageEditor#COLLECTION_ITEM");
		}

		task ("Clear the filter then filter by another title") {
			PageEditor.editCollectionDisplay(
				assetTitle = "Web Content Title",
				clearFilter = "true",
				filterCollection = "true",
				filterResults = "There are 3 results for Web Content Title.",
				fragmentName = "Collection Display",
				selectedName = "Basic Web Content");
		}

		task ("View all web contents are shown in Collection Display") {
			var n = "1";

			for (var namespace : list "3,2,1") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "Web Content Title ${namespace}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}
		}

		task ("Disable Basic Web Content flag in Gogo Shell") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:disable com.liferay.journal.web.internal.info.collection.provider.BasicWebContentSingleFormVariationInfoCollectionProvider");

			GogoShell.viewOutput(outputContent = "true");
		}
	}

	@description = "This is a use case for LPS-114727. The Content Display fragment can display abstract of asset entries in Collection Display."
	@priority = "5"
	@uitest
	test ViewAbstractInContentDisplay {
		property portal.acceptance = "true";

		task ("Add a Web Content Article, a document and a Blogs Entry") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				description = "Web Content Discription",
				groupName = "Test Site Name",
				title = "Web Content Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");

			BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

			Blogs.addWithCustomAbstract(
				entryAbstractDescription = "Blogs Entry Custom Abstract",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Assert assets' title are displayed in Collection Display with Content Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Recent Content");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "Document Title",
				fragmentName = "Content Display");

			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				inCollectionDisplay = "true",
				template = "Abstract");

			var n = "1";

			for (var description : list "Blogs Entry Custom Abstract,DM Document Description,Web Content Discription") {
				ContentPages.viewFragmentText(
					fragmentName = "Content Display",
					position = "${n}",
					text = "${description}");

				var n = ${n} + 1;
			}

			PageEditor.clickPublish();
		}

		task ("View the description of assets shown in Content Display at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			var n = "1";

			for (var description : list "Blogs Entry Custom Abstract,DM Document Description,Web Content Discription") {
				ContentPages.viewFragmentText(
					fragmentName = "Content Display",
					position = "${n}",
					text = "${description}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-112094. TThe abstract of asset entries should be shown when select Abstract as List Item Style for different List styles."
	@priority = "5"
	@uitest
	test ViewAbstractListItemStyleInDifferentListStyles {
		property portal.acceptance = "true";

		task ("Add a Web Content Article,a Blogs Entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				description = "This is a description for web content article",
				groupName = "Test Site Name",
				title = "Web Content Title");

			BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

			Blogs.addEntryWithUploadedCoverImage(
				coverImageName = "Document_1",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				navTab = "Blog Images",
				uploadFileName = "Document_1.jpg");

			Pause(locator1 = "3000");

			Panel.expandPanel(panel = "Configuration");

			BlogsEntry.addCustomAbstract(entryAbstractDescription = "This is a description for blogs entry");

			Pause(locator1 = "3000");

			PortletEntry.publish();

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "This is a description for document",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_2.jpg");
		}

		task ("Add a Collection Display fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the Highest Rated Assets, Bordered List as List Style and Abstract as List Item Style") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Highest Rated Assets",
				listItemStyle = "Abstract",
				styleDisplay = "Bordered List");
		}

		task ("Assert the Abstract of collection items are shown in Bordered List") {
			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST");
		}

		task ("Assert the Abstract of collection items are shown in Bordered List at view mode") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");
		}

		task ("Select the Bulleted List as List Style and Abstract as List Item Style") {
			ContentPages.gotoPageEditor();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Abstract",
				selectedName = "Highest Rated Assets",
				styleDisplay = "Bulleted List");
		}

		task ("Assert the Abstract of collection items are shown in Bulleted List") {
			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST");
		}

		task ("Assert the Abstract of collection items are shown in Bulleted List at view mode") {
			PageEditor.clickPublish();

			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");
		}

		task ("Select the Inline List as List Style and Abstract as List Item Style") {
			ContentPages.gotoPageEditor();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Abstract",
				selectedName = "Highest Rated Assets",
				styleDisplay = "Inline List");
		}

		task ("Assert the Abstract of collection items are shown in Inline List") {
			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST");
		}

		task ("Assert the Abstract of collection items are shown in Inline List at view mode") {
			PageEditor.clickPublish();

			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");
		}

		task ("Select the Numbered List as List Style and Abstract as List Item Style") {
			ContentPages.gotoPageEditor();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Abstract",
				selectedName = "Highest Rated Assets",
				styleDisplay = "Numbered List");
		}

		task ("Assert the Abstract of collection items are shown in Numbered List") {
			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST");
		}

		task ("Assert the Abstract of collection items are shown in Numbered List at view mode") {
			PageEditor.clickPublish();

			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");
		}

		task ("Select the Unstyled List as List Style and Abstract as List Item Style") {
			ContentPages.gotoPageEditor();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Abstract",
				selectedName = "Highest Rated Assets",
				styleDisplay = "Unstyled List");
		}

		task ("Assert the Abstract of collection items are shown in Unstyled List") {
			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST");
		}

		task ("Assert the Abstract of collection items are shown in Unstyled List at view mode") {
			PageEditor.clickPublish();

			var n = "1";

			for (var description : list "This is a description for document,This is a description for blogs entry,This is a description for web content article") {
				AssertVisible(
					key_entryContent = "//div[contains(@class,'asset-summary')][normalize-space()='${description}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'asset-summary')]/div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST_AT_VIEW_MODE");
		}
	}

	@description = "This is a use case for LPS-114727. The Content Display fragment can display title of asset entries in Collection Provider."
	@priority = "5"
	@uitest
	test ViewAssetTitleInContentDisplay {
		property portal.acceptance = "true";

		task ("Add a Web Content Article,a Blogs Entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("View asset titles are displayed in Content Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Highest Rated Assets");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "Document Title",
				fragmentName = "Content Display");

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				ContentPages.viewFragmentTextInCollectionDisplay(
					row = "${n}",
					text = "${title}");

				var n = ${n} + 1;
			}

			PageEditor.clickPublish();
		}

		task ("View the title of assets shown in Content Display at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				ContentPages.viewFragmentTextInCollectionDisplay(
					row = "${n}",
					text = "${title}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a use case for LPS-114727. The Content Display fragment can display full content of asset entries in Collection Display."
	@priority = "5"
	@uitest
	test ViewFullContentInContentDisplay {
		property portal.acceptance = "true";

		task ("Add a Web Content Article,a Blogs Entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a Collection Display to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("View full content are displayed in Content Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Most Viewed Assets");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				entryTitle = "Document Title",
				fragmentName = "Content Display");

			PageEditor.editContentDisplay(
				fragmentName = "Content Display",
				inCollectionDisplay = "true",
				template = "Full Content");

			ContentPages.viewFragmentImage(
				fragmentName = "Content Display",
				image = "Document_1.jpg");

			ContentPages.viewFragmentText(
				assetType = "widget-content",
				fragmentName = "Content Display",
				text = "Blogs Entry Content");

			ContentPages.viewFragmentText(
				assetType = "journal",
				fragmentName = "Content Display",
				text = "Web Content Content");

			PageEditor.clickPublish();
		}

		task ("View full content are shown in Content Display at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			ContentPages.viewFragmentImage(
				fragmentName = "Content Display",
				image = "Document_1.jpg");

			ContentPages.viewFragmentText(
				assetType = "widget-content",
				fragmentName = "Content Display",
				text = "Blogs Entry Content");

			ContentPages.viewFragmentText(
				assetType = "journal",
				fragmentName = "Content Display",
				text = "Web Content Content");
		}
	}

	@description = "This is a test for LPS-112094. The full content of asset entries should be shown when select Full Content as List Item Style for different List styles."
	@priority = "5"
	@uitest
	test ViewFullContentListItemStyleInDifferentListStyles {
		property portal.acceptance = "true";

		task ("Add a Web Content Article,a Blogs Entry and a document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

			Blogs.addEntryWithUploadedCoverImage(
				coverImageName = "Document_1",
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				navTab = "Blog Images",
				uploadFileName = "Document_1.jpg");

			Pause(locator1 = "3000");

			PortletEntry.publish();

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_2.jpg");
		}

		task ("Add a Collection Display fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the Highest Rated Assets, Bordered List as List Style and Full Content as List Item Style") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Highest Rated Assets",
				listItemStyle = "Full Content",
				styleDisplay = "Bordered List");
		}

		task ("Assert the Full Content of collection items are shown in Bordered List") {
			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST");
		}

		task ("Assert the Full Content of collection items are shown in Bordered List at view mode") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BORDERED_LIST_AT_VIEW_MODE");
		}

		task ("Select the Bulleted List as List Style and Full Content as List Item Style") {
			ContentPages.gotoPageEditor();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Full Content",
				selectedName = "Highest Rated Assets",
				styleDisplay = "Bulleted List");
		}

		task ("Assert the Full Content of collection items are shown in Bulleted List") {
			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST");
		}

		task ("Assert the Full Content of collection items are shown in Bulleted List at view mode") {
			PageEditor.clickPublish();

			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_BULLETED_LIST_AT_VIEW_MODE");
		}

		task ("Select the Inline List as List Style and Full Content as List Item Style") {
			ContentPages.gotoPageEditor();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Full Content",
				selectedName = "Highest Rated Assets",
				styleDisplay = "Inline List");
		}

		task ("Assert the Full Content of collection items are shown in Inline List") {
			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST");
		}

		task ("Assert the Full Content of collection items are shown in Inline List at view mode") {
			PageEditor.clickPublish();

			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_INLINE_LIST_AT_VIEW_MODE");
		}

		task ("Select the Numbered List as List Style and Full Content as List Item Style") {
			ContentPages.gotoPageEditor();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Full Content",
				selectedName = "Highest Rated Assets",
				styleDisplay = "Numbered List");
		}

		task ("Assert the Full Content of collection items are shown in Numbered List") {
			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST");
		}

		task ("Assert the Full Content of collection items are shown in Numbered List at view mode") {
			PageEditor.clickPublish();

			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_NUMBERED_LIST_AT_VIEW_MODE");
		}

		task ("Select the Unstyled List as List Style and Full Content as List Item Style") {
			ContentPages.gotoPageEditor();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				listItemStyle = "Full Content",
				selectedName = "Highest Rated Assets",
				styleDisplay = "Unstyled List");
		}

		task ("Assert the Full Content of collection items are shown in Unstyled List") {
			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST");
		}

		task ("Assert the Full Content of collection items are shown in Unstyled List at view mode") {
			PageEditor.clickPublish();

			var n = "2";

			for (var content : list "Blogs Entry Content,Web Content Content") {
				AssertVisible(
					key_entryContent = "[normalize-space()='${content}']",
					key_fragmentName = "Collection Display",
					key_position = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST_AT_VIEW_MODE");

				var n = ${n} + 1;
			}

			AssertVisible(
				key_entryContent = "//img[contains(@class,'preview-file-image')][contains(@src,'Document_2.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "1",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST_AT_VIEW_MODE");

			AssertVisible(
				key_entryContent = "//div[contains(@class,'cover-image')][contains(@style,'Document_1.jpg')]",
				key_fragmentName = "Collection Display",
				key_position = "2",
				locator1 = "PageEditor#COLLECTION_ITEM_CONTENT_IN_UNSTYLED_LIST_AT_VIEW_MODE");
		}
	}

	@description = "This is a use case for LPS-112360. The asset entries should be ordered by ratings from high to low in Collection Display when select Highest Rated Assets as Collection Provider."
	@priority = "5"
	@uitest
	test ViewHighestRatedAssets {
		property portal.acceptance = "true";

		task ("Add three Web Content Articles based on Basic Web Content") {
			for (var entryTitle : list "First Web Content,Second Web Content,Third Web Content") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = "Test Site Name",
					title = "${entryTitle}");
			}
		}

		task ("Add a Collection Display to page and Select Highest Rated Assets Collection Providers") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Highest Rated Assets");
		}

		task ("Add a Heading to Collection Display and Map Title of collection items to editable field") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "First Web Content",
				fragmentName = "Heading");

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Assert the title of collection items are respectively shown in each cell") {
			var n = "1";

			for (var title : list "Third Web Content,Second Web Content,First Web Content") {
				AssertTextEquals(
					key_colPosition = "1",
					key_element = "//div[@aria-label='Heading']//*[contains(@data-lfr-editable-id,'element-text')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}

		task ("Add a Content Ratings to Collection Display") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Content Display",
				fragmentName = "Content Ratings",
				targetFragmentName = "Heading");

			for (var i : list "1,2,3") {
				AssertTextEquals(
					index = "${i}",
					locator1 = "Fragment#CONTENT_RATINGS_YOUR_RATING_STAR_RESULT",
					value1 = "-");

				AssertVisible(
					index = "${i}",
					locator1 = "Fragment#CONTENT_RATINGS_AVERAGE_STAR");
			}
		}

		task ("Rate Third Web Content as 1, Second Web Content as 3, First Web Content as 5") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			Ratings.rateStarCollectionItem(
				position = "1",
				ratingStarCount = "1");

			Ratings.rateStarCollectionItem(
				position = "2",
				ratingStarCount = "3");

			Ratings.rateStarCollectionItem(
				position = "3",
				ratingStarCount = "5");
		}

		task ("Assert the display order of collection items") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			var n = "1";

			for (var title : list "First Web Content,Second Web Content,Third Web Content") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}

		task ("Assert ratings of collection items") {
			var n = "1";

			for (var ratingStarCount : list "5,3,1") {
				AssertTextEquals(
					index = "${n}",
					locator1 = "Fragment#CONTENT_RATINGS_YOUR_RATING_STAR_RESULT",
					value1 = "${ratingStarCount}");

				var n = ${n} + 1;
			}

			var n = "1";

			for (var averageStarCount : list "5.0,3.0,1.0") {
				AssertTextEquals.assertPartialText(
					index = "${n}",
					locator1 = "Fragment#CONTENT_RATINGS_AVERAGE_STAR_RESULT",
					value1 = "${averageStarCount}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a use case for LPS-112360. The asset entries should be ordered by view count from high to low in Collection Display when select Most Viewed Assets as Collection Provider."
	@priority = "5"
	@uitest
	test ViewMostViewedAssets {
		property portal.acceptance = "true";

		task ("Add a Web Content Article, a Blogs Entry and a Document") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Test Site Name",
				title = "Web Content Title");

			HeadlessBlog.addBlogEntry(
				content = "Blogs Entry Content",
				groupName = "Test Site Name",
				title = "Blogs Entry Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = "Test Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		task ("Add a Row element to page and configure it to 2 columns") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Layout Elements",
				fragmentName = "Grid");

			PageEditor.editLayoutGrid(
				columnCount = "2",
				panel = "General");
		}

		task ("Add a Collection Display fragment to column 1") {
			PageEditor.addElementToColumn(
				collectionName = "Content Display",
				columnNumber = "1",
				fragmentName = "Collection Display",
				navTab = "Fragments");
		}

		task ("Select Most Viewed Assets Collection Providers in Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Most Viewed Assets");
		}

		task ("Add an Asset Publisher widget to column 2") {
			PageEditor.addElementToColumn(
				columnNumber = "2",
				navTab = "Widgets",
				portletName = "Asset Publisher");
		}

		task ("Enable View Count Increment in Asset Publisher") {
			AssetPublisherPortlet.configureDisplaySettings(displaySettings = "View Count Increment");

			Click(locator1 = "Icon#CLOSE");
		}

		task ("Add a Heading to Collection Display and Map Title of collection items to editable field") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Web Content Title",
				fragmentName = "Heading");

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Assert the title of collection items are respectively shown in each cell") {
			var n = "1";

			for (var title : list "Document Title,Blogs Entry Title,Web Content Title") {
				AssertTextEquals(
					key_colPosition = "1",
					key_element = "//div[@aria-label='Heading']//*[contains(@data-lfr-editable-id,'element-text')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}

		task ("Add a Paragraph below Heading in Collection Display and Map View Count of collection items to editable field") {
			PageEditor.expandFragmentCollection(collectionName = "Basic Components");

			DragAndDrop.javaScriptDragAndDropToBottom(
				key_collectionName = "Basic Components",
				key_fragmentName = "Paragraph",
				locator1 = "PageEditor#FRAGMENTS_AND_WIDGETS_TAB_FRAGMENT",
				locator2 = "//div[@aria-label='Heading']//div[contains(@class,'page-editor__topper__content')]",
				value1 = "");

			PageEditor.waitForAutoSave();

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "View Count",
				fragmentName = "Paragraph",
				id = "element-text");
		}

		task ("Assert the view count of collection items are respectively shown in each cell") {
			var n = "1";

			for (var count : list "0,0,0") {
				AssertTextEquals(
					key_colPosition = "1",
					key_element = "//*[contains(@class,'paragraph') and contains(@data-lfr-editable-id,'element-text')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
					value1 = "${count}");

				var n = ${n} + 1;
			}
		}

		task ("View Web Content Article one time via Asset Publisher") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewAssetDetailsPG(
				assetContent = "Web Content Content",
				assetTitle = "Web Content Title");

			Navigator.gotoBack();
		}

		task ("Assert the display order of collection items") {
			var n = "1";

			for (var title : list "Web Content Title,Document Title,Blogs Entry Title") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}

		task ("Assert the view count of collection items") {
			var n = "1";

			for (var count : list "1,0,0") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "paragraph",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${count}");

				var n = ${n} + 1;
			}
		}

		task ("View Blogs Entry twice via Asset Publisher") {
			var count = "0";

			while ("${count}" != "2") {
				AssetPublisherPortlet.viewAssetDetailsPG(
					assetContent = "Blogs Entry Content",
					assetTitle = "Blogs Entry Title");

				Navigator.gotoBack();

				var count = ${count} + 1;
			}
		}

		task ("Assert the display order of collection items") {
			var n = "1";

			for (var title : list "Blogs Entry Title,Web Content Title,Document Title") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}

		task ("Assert the view count of collection items") {
			var n = "1";

			for (var count : list "2,1,0") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "paragraph",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${count}");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-147390. The user could view the prefilter results in Prefilter Collection modal."
	@priority = "5"
	test ViewPrefilterResults {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "CollectionDisplayWithCollectionProviders#ViewPrefilterResults";

		task ("Enable Basic Web Content flag in Gogo Shell") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:enable com.liferay.journal.web.internal.info.collection.provider.BasicWebContentSingleFormVariationInfoCollectionProvider");

			GogoShell.viewOutput(outputContent = "true");
		}

		task ("Add the first web content with the first tag") {
			JSONWebcontent.addWebContent(
				assetTagNames = "nba teams",
				content = "Warriors",
				groupName = "Test Site Name",
				title = "Warriors");
		}

		task ("Add the second and third web contents with second tag") {
			for (var text : list "Chris Paul,Lebron James") {
				JSONWebcontent.addWebContent(
					assetTagNames = "nba players",
					content = "${text}",
					groupName = "Test Site Name",
					title = "${text}");
			}
		}

		task ("Add a Collection Display fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the Basic Web Content collection provider in Collection Display") {
			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Basic Web Content");
		}

		task ("View all web contents are shown in Collection Display") {
			var n = "1";

			for (var title : list "Lebron James,Chris Paul,Warriors") {
				AssertVisible(
					key_colPosition = "1",
					key_entryTitle = "${title}",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}
		}

		task ("Prefilter collection by the first tag") {
			PageEditor.gotoConfiguration(fragmentName = "Collection Display");

			PageEditor.gotoEllipsisMenuItemInItemSelector(
				fieldLabel = "Collection",
				menuItem = "Prefilter Collection");

			Click(
				key_text = "Select",
				locator1 = "Button#ANY");

			Check.checkNotVisible(
				checkboxName = "nba teams",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("View prefilter results in modal") {
			AssertTextEquals(
				locator1 = "Modal#SEARCH_INFO",
				value1 = "There is 1 result for nba teams.");
		}

		task ("Prefilter collection by the keywords") {
			Click(
				key_text = "Clear",
				locator1 = "Button#ANY");

			Type(
				key_text = "Title",
				locator1 = "TextInput#ANY",
				value1 = "James");

			Click(locator1 = "Modal#HEADER");
		}

		task ("View prefilter results in modal") {
			AssertTextEquals(
				locator1 = "Modal#SEARCH_INFO",
				value1 = "There is 1 result for James.");
		}

		task ("Prefilter collection by the keywords") {
			Click(
				key_text = "Clear",
				locator1 = "Button#ANY");

			Type(
				key_text = "Title",
				locator1 = "TextInput#ANY",
				value1 = "Durant");

			Click(locator1 = "Modal#HEADER");
		}

		task ("View prefilter results in modal") {
			AssertTextEquals(
				locator1 = "Modal#SEARCH_INFO",
				value1 = "There are 0 results for Durant.");
		}

		task ("Disable Basic Web Content flag in Gogo Shell") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:disable com.liferay.journal.web.internal.info.collection.provider.BasicWebContentSingleFormVariationInfoCollectionProvider");

			GogoShell.viewOutput(outputContent = "true");
		}
	}

	@description = "This is a use case for LPS-112360. The asset entries should be ordered by modified time from recent to past in Collection Display when select Recent Content as Collection Provider."
	@priority = "5"
	@uitest
	test ViewRecentContent {
		property portal.acceptance = "true";

		task ("Add three Web Content Articles based on Basic Web Content") {
			for (var entryTitle : list "First Web Content,Second Web Content,Third Web Content") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = "Test Site Name",
					title = "${entryTitle}");
			}
		}

		task ("Get modified date of Web Content Articles") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "First Web Content",
				menuItem = "View History");

			Pause(locator1 = "3000");

			var firstModifiedDate = selenium.getAttribute("//td[contains(@class,'modified-date')]/span[contains(@class,'tooltip')]@title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Second Web Content",
				menuItem = "View History");

			Pause(locator1 = "3000");

			var secondModifiedDate = selenium.getAttribute("//td[contains(@class,'modified-date')]/span[contains(@class,'tooltip')]@title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "Third Web Content",
				menuItem = "View History");

			Pause(locator1 = "3000");

			var thirdModifiedDate = selenium.getAttribute("//td[contains(@class,'modified-date')]/span[contains(@class,'tooltip')]@title");
		}

		task ("Add a Collection Display to page and Select Recent Content Collection Providers") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "Recent Content");
		}

		task ("Add a Heading to Collection Display and Map Title of collection items to editable field") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "First Web Content",
				fragmentName = "Heading");

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Title",
				fragmentName = "Heading",
				id = "element-text");
		}

		task ("Assert the title of collection items are respectively shown in each cell") {
			var n = "1";

			for (var title : list "Third Web Content,Second Web Content,First Web Content") {
				AssertTextEquals(
					key_colPosition = "1",
					key_element = "//div[@aria-label='Heading']//*[contains(@data-lfr-editable-id,'element-text')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}

		task ("Add a Paragraph to Collection Display and Map Modified Date of collection items to editable field") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Heading");

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Modified Date",
				fragmentName = "Paragraph",
				id = "element-text");
		}

		task ("Assert modified date of collection items are shown in Paragraph") {
			var n = "1";

			for (var modifiedDate : list "${thirdModifiedDate},${secondModifiedDate},${firstModifiedDate}") {
				AssertTextEquals(
					key_colPosition = "1",
					key_element = "//*[contains(@class,'paragraph') and contains(@data-lfr-editable-id,'element-text')]",
					key_fragmentName = "Collection Display",
					key_rowPosition = "${n}",
					locator1 = "PageEditor#COLLECTION_CELL_NESTED_ELEMENT",
					value1 = "${modifiedDate}");

				var n = ${n} + 1;
			}
		}

		task ("Assert the display order of collection items") {
			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			var n = "1";

			for (var title : list "Third Web Content,Second Web Content,First Web Content") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}

		task ("Assert modified date of collection items are shown in Paragraph") {
			var n = "1";

			for (var modifiedDate : list "${thirdModifiedDate},${secondModifiedDate},${firstModifiedDate}") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "paragraph",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${modifiedDate}");

				var n = ${n} + 1;
			}
		}

		task ("Modify the First Web Content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEditCP(webContentTitle = "First Web Content");

			WebContent.editCP(
				webContentContentEdit = "New Web Content Content",
				webContentTitle = "First Web Content",
				webContentTitleEdit = "First Web Content");
		}

		task ("Get modified date of the First Web Content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "test-site-name");

			WebContentNavigator.gotoEntryMenuItem(
				entry = "First Web Content",
				menuItem = "View History");

			Pause(locator1 = "3000");

			var firstModifiedDate = selenium.getAttribute("//tr[2]//td[contains(@class,'modified-date')]/span[contains(@class,'tooltip')]@title");
		}

		task ("Assert the display order of collection items") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			var n = "1";

			for (var title : list "First Web Content,Third Web Content,Second Web Content") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "heading",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${title}");

				var n = ${n} + 1;
			}
		}

		task ("Assert modified date of collection items are shown in Paragraph") {
			var n = "1";

			for (var modifiedDate : list "${firstModifiedDate},${thirdModifiedDate},${secondModifiedDate}") {
				AssertTextEquals(
					key_colPosition = "1",
					key_fragmentName = "paragraph",
					key_rowPosition = "${n}",
					locator1 = "Fragment#CONTRIBUTED_FRAGMENT_INLINE_CONTENT_IN_COLLECTION_DISPLAY",
					value1 = "${modifiedDate}");

				var n = ${n} + 1;
			}
		}
	}

}