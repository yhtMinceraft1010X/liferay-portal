@component-name = "portal-web-forms-and-data-lists"
definition {

	property custom.properties = "minifier.enabled=true";
	property osgi.module.configuration.file.names = "com.liferay.frontend.js.loader.modules.extender.internal.configuration.Details.config";
	property osgi.module.configurations = "waitTimeout=&quot;15&quot;";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Forms";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Forms");

			FormsAdmin.teardownForms();

			Navigator.gotoNavItem(navItem = "Element Sets");

			FormsAdmin.teardownElementSets();

			PagesAdmin.tearDownCP();
		}
	}

	@priority = "5"
	test AddFormInGlobal {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
		property test.name.skip.portal.instance = "Forms#AddFormInGlobal";
		property testray.component.names = "Training";

		Navigator.openURL();

		PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "global");

		FormsAdmin.addForm(groupName = "Global");

		Form.editName();

		Form.editDescription();

		Form.editPageTitle(
			formPageName = "Created Form Page Name",
			formTitleNumber = "1");

		Form.addTextField(fieldPositionNumber = "0");

		Form.editFieldLabelMetal(fieldValue = "Label");

		FormFields.editHelpText(
			fieldHelpText = "Help Text",
			fieldName = "tip");

		FormFields.enableSwitch(fieldName = "required");

		Form.closeSidebar();

		Form.publishForm();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdmin.viewForm(
			formDescription = "Created Form Description",
			formName = "Created Form Name");

		FormsAdminNavigator.gotoPermissions(
			entryTitle = "Created Form Name",
			menuItem = "Permissions");

		Role.definePermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_ADD_FORM_INSTANCE_RECORD_CHECKBOX",
			roleTitle = "Power User");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPrivatePage(pageName = "Private Form Page");

		Navigator.gotoPrivateSitePage(
			pageName = "Private Form Page",
			siteName = "Guest");

		Portlet.addPG(
			pageName = "Private Form Page",
			portletName = "Form");

		FormPortletConfiguration.configureScopePG(
			portletName = "Form",
			scopeSelection = "Global");

		FormPortletConfiguration.selectForm(formName = "Created Form Name");

		PortletEntry.save();

		Navigator.gotoPrivateSitePage(
			pageName = "Private Form Page",
			siteName = "Guest");

		FormFields.viewTextLabel(
			fieldLabel = "Label",
			fieldName = "Label");
	}

	@description = "This is a use case for LPS-68377."
	@priority = "3"
	test AddFormToUserSiteAndViewNoDuplicates {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "Forms#AddFormToUserSiteAndViewNoDuplicates";

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = "Form Site");

		JSONLayout.addPublicLayout(
			groupName = "Form Site",
			layoutName = "Form Page");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Form Page");

		ProductMenu.gotoPortlet(
			category = "People",
			portlet = "Memberships");

		Site.assignUserAsMemberCP(
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONRole.addSiteRole(
			roleKey = "Forms Site Role Name",
			roleTitle = "Forms Site Role Name");

		for (var resourceActionIndex : list "ADD_DATA_PROVIDER_INSTANCE,ADD_FORM_INSTANCE,ADD_STRUCTURE,PERMISSIONS") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.dynamic.data.mapping",
				roleTitle = "Forms Site Role Name",
				roleType = "site");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Forms Site Role Name",
			roleType = "site");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_dynamic_data_mapping_form_web_portlet_DDMFormAdminPortlet",
			roleTitle = "Forms Site Role Name",
			roleType = "site");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.assignSiteRoleCP(
			siteRoleName = "Forms Site Role Name",
			userScreenName = "usersn");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		Navigator.openSiteURL(siteName = "Form Site");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName();

		Form.editDescription();

		Form.addTextField(fieldPositionNumber = "0");

		Form.editFieldLabelMetal(fieldValue = "Text Field");

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdmin.viewForm();

		FormsAdmin.viewNoDuplicateForms();
	}

	@description = "LPS-68390 - Verify that a notification appears when a Form is autosaved."
	@priority = "3"
	test AutosaveDisplaysANotification {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "Forms#AutosaveDisplaysANotification";

		FormsAdmin.addForm();

		Form.editName();

		Form.addTextField(fieldPositionNumber = "0");

		Pause(locator1 = "60000");

		Form.viewSaveNotification();

		FormsAdminNavigator.gotoBack();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Created Form Name");
	}

	@description = "LPS-68418 - Verify that a Form's autosave interval can be configured"
	@priority = "3"
	test AutosaveIntervalCanBeConfigured {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "Forms#AutosaveIntervalCanBeConfigured";

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Forms",
			configurationName = "Forms",
			configurationScope = "Site Scope");

		FormFields.viewTextLabel(
			fieldLabel = "Autosave Interval",
			fieldName = "autosaveInterval");

		FormFields.editText(
			fieldName = "autosaveInterval",
			fieldValue = "2");

		SystemSettings.saveConfiguration();

		FormsAdmin.addForm();

		Form.editName();

		Form.addTextField(fieldPositionNumber = "0");

		Form.editFieldLabelMetal(fieldValue = "Text Field Should Not Be Saved");

		Form.closeSidebar();

		Pause(locator1 = "60000");

		FormsAdminNavigator.gotoBack();

		FormsAdmin.viewNoForms();

		FormsAdminNavigator.gotoAddForm();

		Form.editName();

		Form.addTextField(fieldPositionNumber = "0");

		Form.editFieldLabelMetal(fieldValue = "Text Field Will Be Saved");

		Form.closeSidebar();

		Pause(locator1 = "120000");

		FormsAdminNavigator.gotoBack();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Created Form Name");
	}

	@description = "LPS-72048 - Verify that Belongs To rule can be paired with Guest role"
	@priority = "4"
	test BelongsToRuleCanPairWithGuestUser {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "Forms#BelongsToRuleCanPairWithGuestUser";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.addTextField(fieldPositionNumber = "0");

		Form.save();

		FormsAdminNavigator.gotoRules();

		FormRules.addRule();

		FormRules.configureConditionOptions(
			conditionField = "User",
			conditionOperator = "Belongs To",
			conditionRowNumber = "1",
			conditionValueType = "Guest");

		FormRules.configureActionOptions(
			action = "Show",
			actionRowNumber = "1",
			actionTarget = "Text");

		FormRules.save();

		FormsAdminNavigator.gotoFormBuilder();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishCopyURLLink();

		var publishedFormPublicURL = Form.getPublishedFormPublicURL(publishedFormPublicURL = "${publishedFormPublicURL}");

		Navigator.openSpecificURL(url = "${publishedFormPublicURL}");

		FormFields.viewTextFieldNotVisible(
			fieldLabel = "Text",
			fieldName = "Text");

		User.logoutPG();

		Navigator.openSpecificURL(url = "${publishedFormPublicURL}");

		FormFields.viewTextLabel(
			fieldLabel = "Text",
			fieldName = "Text");
	}

	@description = "Verify that a Form can be created"
	@priority = "5"
	test CanBeCreated {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.editDescription(formDescription = "Form 1 Description");

		Form.editPageTitle(
			formPageName = "Page 1",
			formTitleNumber = "1");

		Form.editPageDescription(formPageDescriptionName = "Page 1 Descripton");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Text");

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		Form.viewFormName(formName = "Form 1");

		Form.viewFormDescription(formDescription = "Form 1 Description");

		AssertTextEquals(
			key_titleNumber = "1",
			locator1 = "Form#PAGE_TITLE_FIELD",
			value1 = "Page 1");

		AssertTextEquals(
			locator1 = "Form#PAGE_DESCRIPTION_FIELD",
			value1 = "Page 1 Descripton");

		FormFields.viewTextLabel(fieldLabel = "Text");
	}

	@description = "Verify that a Form can be published from an autosaved draft"
	@priority = "5"
	test CanBeCreatedFromAutosavedDraft {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Test");

		Form.editDescription(formDescription = "Test");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Text");

		Pause(locator1 = "60000");

		Form.viewSaveNotification();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		AppBuilderAdmin.openItem(itemName = "Test");

		Click(locator1 = "Form#PUBLISH_FORM_BUTTON");

		FormsAdminNavigator.openPublishURL();

		AssertElementPresent(
			key_formName = "Test",
			locator1 = "Form#PUBLISH_FORM_NAME_FIELD");

		AssertElementPresent(
			key_formDescription = "Test",
			locator1 = "Form#PUBLISH_FORM_DESCRIPTION_FIELD");

		FormFields.viewTextLabel(
			fieldLabel = "Text",
			fieldName = "Text");
	}

	@description = "Verify that a Form can be created with more than one page"
	@priority = "5"
	test CanBeCreatedWithMultiplePages {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.addPage(formAddNewPageNumber = "1");

		FormFields.viewPaginationField(
			key_currentPage = "1",
			key_lastPage = "2");

		FormFields.viewPaginationField(
			key_currentPage = "2",
			key_lastPage = "2");

		AssertElementPresent(
			key_pageNumber = "1",
			locator1 = "Form#PAGE_DEFAULT_TITLE_BY_NUMBER");

		AssertElementPresent(
			key_pageNumber = "1",
			locator1 = "Form#PAGE_DEFAULT_DESCRIPTION_BY_NUMBER");

		AssertElementPresent(
			key_pageNumber = "1",
			locator1 = "FormViewBuilder#EMPTY_FORM_FIELD_BY_NUMBER");

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Text",
			formPageNumber = "1");

		Type(
			key_pageNumber = "1",
			locator1 = "Form#PAGE_DEFAULT_TITLE_BY_NUMBER",
			value1 = "Page Title Test");

		Type(
			key_pageNumber = "1",
			locator1 = "Form#PAGE_DEFAULT_DESCRIPTION_BY_NUMBER",
			value1 = "Page Description");

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		AssertElementPresent(
			key_pageNumber = "1",
			key_value = "Page Title Test",
			locator1 = "Form#PAGE_TITLE_BY_NUMBER");

		AssertElementPresent(
			key_pageNumber = "1",
			key_value = "Page Description",
			locator1 = "Form#PAGE_DESCRIPTION_BY_NUMBER");

		AssertElementNotPresent(
			key_pageNumber = "1",
			locator1 = "FormViewBuilder#EMPTY_FORM_FIELD_BY_NUMBER");
	}

	@description = "LPS-64379 - Verify that a Form can be created without a Form Title"
	@priority = "5"
	test CanBeCreatedWithoutTitle {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "Forms#CanBeCreatedWithoutTitle";

		FormsAdmin.addForm();

		Form.addTextField(fieldPositionNumber = "0");

		Form.editFieldLabelMetal(fieldValue = "Text Field");

		Form.closeSidebar();

		Form.save();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdmin.viewForm(
			formDescription = "",
			formName = "Untitled Form");
	}

	@description = "Verify that a Form can be deleted"
	@priority = "5"
	test CanBeDeleted {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.addTextField(fieldPositionNumber = "0");

		Form.save();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		AssertElementPresent(
			key_formName = "Form 1",
			locator1 = "FormsAdmin#FORMS_TABLE_NAME");

		FormsAdmin.deleteForm(formName = "Form 1");
	}

	@description = "Verify that a Form can be duplicated"
	@priority = "5"
	test CanBeDuplicated {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.editDescription(formDescription = "Form Description");

		Form.addTextField(fieldPositionNumber = "0");

		Form.save();

		FormsAdminNavigator.gotoBack();

		Form.duplicate(formName = "Form 1");

		LexiconEntry.viewEntryName(rowEntry = "Copy of Form 1");

		LexiconEntry.viewEntryName(rowEntry = "Form 1");

		FormsAdminNavigator.gotoEditFormByName(formName = "Copy of Form 1");

		Form.viewFormName(formName = "Copy of Form 1");

		Form.viewFormDescription(formDescription = "Form Description");

		AssertElementPresent(
			key_name = "Text",
			locator1 = "FormFields#FIELD_TARGET_LABEL");
	}

	@description = "Verify that a Form can be edited"
	@priority = "5"
	test CanBeEdited {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.editDescription(formDescription = "Form Description");

		Form.addTextField(fieldPositionNumber = "0");

		Form.save();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		Form.viewFormName(formName = "Form 1");

		Form.viewFormDescription(formDescription = "Form Description");

		AssertElementPresent(
			key_name = "Text",
			locator1 = "FormFields#FIELD_TARGET_LABEL");

		Form.editName(formName = "Form 2");

		Form.editDescription(formDescription = "Form Description 2");

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Numeric");

		Form.save();

		FormsAdminNavigator.gotoBack();

		LexiconEntry.viewEntryName(rowEntry = "Form 2");

		LexiconEntry.viewEntryContent(
			rowAny = "Form 2",
			rowEntry = "Description 2");

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 2");

		Form.viewFormName(formName = "Form 2");

		Form.viewFormDescription(formDescription = "Form Description 2");

		AssertElementPresent(
			key_name = "Text",
			locator1 = "FormFields#FIELD_TARGET_LABEL");

		AssertElementPresent(
			key_name = "Numeric",
			locator1 = "FormFields#FIELD_TARGET_LABEL");
	}

	@description = "LPS-69334 - Verify that a Form can be edited after the default language is changed"
	@priority = "3"
	test CanBeEditedAfterChangingLanguage {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "Forms#CanBeEditedAfterChangingLanguage";

		FormsAdmin.addForm();

		Form.editName();

		Form.editDescription();

		Form.addTextField(fieldPositionNumber = "0");

		Form.editFieldLabelMetal(fieldValue = "Text Field");

		Form.closeSidebar();

		Form.save();

		Navigator.gotoAccountSettings();

		MyAccount.changeUserLanguage(
			languageName = "español (España)",
			saveButton = "Save");

		ProductMenu.gotoPortlet(
			category = "Contenido",
			portlet = "Formularios");

		FormsAdminNavigator.gotoEditFormByName(formName = "Created Form Name");

		Form.editNameLocalized(
			formName = "User Locale Edit Form Name",
			localizedText = "Editor de texto enriquecido");

		Form.editDescription(formDescription = "User Locale Edit Form Description");

		Form.saveLocalized(saveButton = "Guardar");
	}

	@description = "LPS-69100 - Verify that a Form can be edited after the Site's default locale is changed"
	@priority = "3"
	test CanBeEditedAfterChangingLocale {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "Forms#CanBeEditedAfterChangingLocale";

		FormsAdmin.addForm();

		Form.editName(formName = "Site Locale Form Name");

		Form.addTextField(fieldPositionNumber = "0");

		Form.editFieldLabelMetal(fieldValue = "Text Field");

		Form.save();

		Navigator.openURL();

		Site.openSiteSettingsAdmin(siteURLKey = "guest");

		Site.configureCurrentLanguagesCP(
			defaultSiteLanguage = "Spanish (Spain)",
			displaySettings = "Display Settings");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoEditFormByName(formName = "Site Locale Form Name");

		Form.editName(formName = "Site Locale Edit Form Name");

		Form.editDescription(formDescription = "Site Locale Edit Form Description");

		Form.save();
	}

	@description = "LPS-61740 - Verify that a Form can be previewed"
	@priority = "5"
	test CanBePreviewed {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.addTextField(fieldPositionNumber = "0");

		Form.save();

		FormsAdminNavigator.gotoPreviewForm();

		Form.previewForm(
			fieldLabel = "Text",
			fieldName = "Text",
			fieldValue = "Preview Paragraph entry",
			formName = "Form 1");
	}

	@description = "LPS-61740 - Verify that a Form can be published"
	@priority = "5"
	test CanBePublished {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.addTextField(fieldPositionNumber = "0");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormPortlet.waitFormRenderer(text = "Submit");

		FormFields.viewTextField(
			fieldLabel = "Text",
			fieldName = "Text");

		FormFields.editText(
			fieldName = "Text",
			fieldValue = "Published Paragraph entry");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Text",
			fieldValue = "Published Paragraph entry");
	}

	@description = "Verify that a Form can be unpublished"
	@priority = "5"
	test CanBeUnpublished {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.addTextField(fieldPositionNumber = "0");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishCopyURLLink();

		var publishedFormPublicURL = Form.getPublishedFormPublicURL(publishedFormPublicURL = "${publishedFormPublicURL}");

		Form.unpublishForm();

		AssertElementPresent(locator1 = "Form#PUBLISH_FORM_BUTTON");

		AssertElementPresent(
			key_value = "Share",
			locator1 = "Form#ANY_DISABLED_BUTTON");

		Navigator.openSpecificURL(url = "${publishedFormPublicURL}");

		AssertElementNotPresent(
			key_fieldLabe = "Text",
			locator1 = "FormFields#LABEL");

		AssertElementNotPresent(
			key_text = "Submit",
			locator1 = "Button#ANY");

		AssertElementNotPresent(
			key_fieldName = "Text",
			locator1 = "FormFields#TEXT_FIELD");

		AssertTextEquals(
			locator1 = "Message#ERROR_3_ALT",
			value1 = "This form is not available or it was not published.");
	}

	@description = "LPS-60520 - Verify that a Form can still be viewed after one of the Fields is deleted"
	@priority = "4"
	test CanBeViewedAfterDeletingAField {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "Forms#CanBeViewedAfterDeletingAField";

		FormsAdmin.addForm();

		Form.editName();

		Form.editDescription();

		Form.addTextField(fieldPositionNumber = "0");

		var fieldTextField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Text Field");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Date");

		var fieldDateField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Date Field");

		Form.closeSidebar();

		Form.publishForm();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Form Page");

		Navigator.gotoPage(pageName = "Form Page");

		Portlet.addPG(
			pageName = "Form Page",
			portletName = "Form");

		FormPortletNavigator.gotoSelectForm();

		FormPortletConfiguration.selectForm();

		PortletEntry.save();

		Navigator.gotoPage(pageName = "Form Page");

		FormPortlet.waitFormRenderer(text = "Submit");

		FormFields.viewTextField(
			fieldLabel = "Text Field",
			fieldName = "${fieldTextField}");

		FormFields.editText(
			fieldName = "${fieldTextField}",
			fieldValue = "Text Field Value");

		FormFields.viewDateField(
			fieldLabel = "Date Field",
			fieldName = "${fieldDateField}");

		FormFields.editDate(
			fieldName = "${fieldDateField}",
			fieldValue = "01/01/2016");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Created Form Name");

		FormsAdminNavigator.gotoDeleteField(
			fieldLabel = "Date Field",
			fieldName = "Date Field");

		FormFields.viewDateFieldNotPresent(
			fieldLabel = "Date Field",
			fieldName = "Date Field");

		Form.save();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntryNotPresent(
			fieldLabel = "Date Field",
			fieldValue = "1/1/16");
	}

	@description = "LPS-69214 - Verify that a confirmation appears when attempting to leave a Form without saving."
	@priority = "3"
	test ConfirmationAppearsWhenLeavingFormWithoutSaving {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "Forms#ConfirmationAppearsWhenLeavingFormWithoutSaving";

		FormsAdmin.addForm();

		Form.addTextField(fieldPositionNumber = "0");

		Form.editFieldLabelMetal(fieldValue = "Text Field");

		Form.closeSidebar();

		Navigator.gotoBack();

		AssertElementPresent(locator1 = "Button#LEAVE");

		Click(locator1 = "Button#STAY");

		Form.save();

		Navigator.gotoBack();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Untitled Form");
	}

	@description = "Verify that Data Provider can retreive data for guest users"
	@priority = "5"
	test DataProviderCanRetrieveDataForGuestUser {
		property portal.acceptance = "false";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "FormsDataProvider#DataProviderCanRetrieveDataForGuestUser";

		var portalURL = PropsUtil.get("portal.url");

		FormsAdminNavigator.enableLocalNetworkDataProvider();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		Navigator.gotoNavItem(navItem = "Data Providers");

		FormsAdminNavigator.gotoAddDataProvider();

		FormsAdmin.editDataProvider(
			name = "Liferay Countries",
			outputParameterLabel = "Country Names",
			outputParameterName = "Country Names",
			outputParameterPath = "nameCurrentValue",
			outputParameterType = "List",
			password = "test",
			url = "${portalURL}/api/jsonws/country/get-countries",
			username = "test@liferay.com");

		FormsAdmin.saveDataProvider();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Permissions",
			rowEntry = "Liferay Countries");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		Check(locator1 = "AssetPermissions#GUEST_VIEW_CHECKBOX");

		Button.clickSave();

		FormsAdmin.addForm();

		Form.editName();

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Select from List");

		var fieldNameCountries = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Countries");

		Form.editFieldDataProvider(
			dataProvider = "Liferay Countries",
			dataProviderOutput = "Country Names");

		Form.save();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishCopyURLLink();

		var publishedFormPublicURL = Form.getPublishedFormPublicURL(publishedFormPublicURL = "${publishedFormPublicURL}");

		Navigator.openSpecificURL(url = "${publishedFormPublicURL}");

		FormFields.viewSelectOptionsList(
			fieldName = "${fieldNameCountries}",
			selectOption = "Afghanistan");

		User.logoutPG();

		Navigator.openSpecificURL(url = "${publishedFormPublicURL}");

		FormFields.viewSelectOptionsList(
			fieldName = "${fieldNameCountries}",
			selectOption = "Afghanistan");

		User.loginUserPG();
	}

	@priority = "4"
	test EditAllFormFieldNames {
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "Forms#EditAllFormFieldNames";

		FormsAdmin.addForm();

		Form.editName();

		Form.editDescription();

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Paragraph");

		var fieldParagraphField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Paragraph");

		FormFields.viewFieldName(fieldName = "${fieldParagraphField}");

		FormFields.editParagraphBody(content = "Paragraph body text.");

		Form.closeSidebar();

		Form.addTextField(fieldPositionNumber = "0");

		var fieldTextField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Text");

		FormFields.viewFieldName(fieldName = "${fieldTextField}");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Select from List");

		var fieldSelectFromListField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Select");

		FormFields.viewFieldName(fieldName = "${fieldSelectFromListField}");

		FormFields.editOptionsRow(
			optionName = "Select1",
			optionValue = "Select 1");

		FormFields.editOptionsRow(
			optionName = "Select2",
			optionValue = "Select 2",
			rowNumber = "2");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "2",
			fieldType = "Single Selection");

		var fieldSingleSelectionField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Radio");

		FormFields.viewFieldName(fieldName = "${fieldSingleSelectionField}");

		FormFields.editOptionsRow(
			optionName = "Option1",
			optionValue = "Option 1");

		FormFields.editOptionsRow(
			optionName = "Option2",
			optionValue = "Option 2",
			rowNumber = "2");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "3",
			fieldType = "Date");

		var fieldDateField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Date");

		FormFields.viewFieldName(fieldName = "${fieldDateField}");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "4",
			fieldType = "Multiple Selection");

		var fieldMultipleSelectionField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Checkbox");

		FormFields.viewFieldName(fieldName = "${fieldMultipleSelectionField}");

		FormFields.editOptionsRow(
			optionName = "Checkbox1",
			optionValue = "Checkbox 1",
			rowNumber = "1");

		Form.closeSidebar();

		Form.save();
	}

	@description = "This is a use case for LPS-50757."
	@priority = "4"
	test EditAllFormFieldsTypesUsedBySystemSettings {
		property portal.acceptance = "quarantine";
		property portal.release = "quarantine";
		property portal.upstream = "quarantine";
		property test.name.skip.portal.instance = "Forms#EditAllFormFieldsTypesUsedBySystemSettings";

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Dynamic Data Lists",
			configurationName = "Dynamic Data Lists",
			configurationScope = "System Scope");

		FormFields.viewCheckboxLabel(
			fieldLabel = "Changeable Default Language",
			fieldName = "changeableDefaultLanguage");

		FormFields.viewCheckboxNotChecked(fieldName = "changeableDefaultLanguage");

		FormFields.viewFieldHelpText(
			fieldHelpText = "If checked, the default language of data definitions will be changeable. The default language of data definitions is inherited from the site settings.",
			fieldName = "changeableDefaultLanguage");

		FormFields.viewSelectLabel(
			fieldLabel = "Default Display View",
			fieldName = "defaultDisplayView");

		FormFields.viewSelectValue(fieldName = "defaultDisplayView");

		FormFields.enableCheckbox(fieldName = "changeableDefaultLanguage");

		FormFields.selectSelectOption(
			fieldName = "defaultDisplayView",
			selectOption = "List");

		SystemSettings.saveConfiguration();

		SystemSettings.exitEditConfiguration();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Dynamic Data Lists",
			configurationName = "Dynamic Data Lists",
			configurationScope = "System Scope");

		FormFields.viewCheckboxChecked(fieldName = "changeableDefaultLanguage");

		FormFields.viewSelectOption(
			fieldName = "defaultDisplayView",
			selectOption = "List");

		SystemSettings.resetConfiguration(configurationName = "Dynamic Data Lists");

		SystemSettings.exitEditConfiguration();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Dynamic Data Mapping",
			configurationName = "Dynamic Data Mapping Service",
			configurationScope = "Site Scope");

		FormFields.viewRepeatableTextMultilineField(
			fieldHelpText = "Set the allowed file extensions for template images. A file extension of * will permit all file extensions.",
			fieldLabel = "Small Image Extensions",
			fieldName = "smallImageExtensions",
			repeatableFieldNumber = "4");

		FormFields.addRepeatableField(
			fieldName = "smallImageExtensions",
			repeatableFieldNumber = "4");

		FormFields.viewRepeatableTextMultilineField(
			fieldHelpText = "Set the allowed file extensions for template images. A file extension of * will permit all file extensions.",
			fieldLabel = "Small Image Extensions",
			fieldName = "smallImageExtensions",
			repeatableFieldNumber = "5");

		FormFields.viewTextField(
			fieldHelpText = "Set the maximum file size for template images in bytes. A value of 0 can be used to indicate unlimited file size.",
			fieldLabel = "Small Image Maximum Size",
			fieldName = "smallImageMaxSize");

		FormFields.editRepeatableTextMultiline(
			fieldName = "smallImageExtensions",
			fieldValue = ".svg",
			repeatableFieldNumber = "4");

		FormFields.editRepeatableTextMultiline(
			fieldName = "smallImageExtensions",
			fieldValue = "*",
			repeatableFieldNumber = "5");

		FormFields.editText(
			fieldName = "smallImageMaxSize",
			fieldValue = "5120");

		SystemSettings.saveConfiguration();

		SystemSettings.exitEditConfiguration();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Dynamic Data Mapping",
			configurationName = "Dynamic Data Mapping Service",
			configurationScope = "Site Scope");

		FormFields.viewRepeatableTextMultilineValue(
			fieldName = "smallImageExtensions",
			fieldValue = ".svg",
			repeatableFieldNumber = "4");

		FormFields.viewRepeatableTextMultilineValue(
			fieldName = "smallImageExtensions",
			fieldValue = "*",
			repeatableFieldNumber = "5");

		FormFields.viewTextValue(
			fieldName = "smallImageMaxSize",
			fieldValue = "5120");

		SystemSettings.resetConfiguration(configurationName = "Dynamic Data Mapping Service");

		SystemSettings.exitEditConfiguration();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Third Party",
			configurationName = "Apache Felix Declarative Service Implementation",
			configurationScope = "System Scope");

		FormFields.viewTextField(
			fieldHelpText = "Configure how long a lock is held before releasing due to suspected deadlock.",
			fieldLabel = "Lock Timeout Milliseconds",
			fieldName = "ds.lock.timeout.milliseconds");

		Refresh();

		FormFields.editTextWithBackspace(fieldName = "ds.lock.timeout.milliseconds");

		Button.clickSave();

		FormFields.viewFieldValidationErrorMessage(
			fieldName = "ds.lock.timeout.milliseconds",
			fieldValidationErrorMessage = "This field is required.");

		SystemSettings.exitEditConfiguration();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Infrastructure",
			configurationName = "JavaScript Loader",
			configurationScope = "System Scope");

		FormFields.viewCheckboxLabel(
			fieldLabel = "Apply Versioning",
			fieldName = "applyVersioning");

		FormFields.viewCheckboxLabel(
			fieldLabel = "Explain Module Resolutions",
			fieldName = "explainResolutions");

		FormFields.viewCheckboxLabel(
			fieldLabel = "Expose Global",
			fieldName = "exposeGlobal");

		for (var fieldName : list "applyVersioning,explainResolutions,exposeGlobal") {
			FormFields.enableCheckbox(fieldName = "${fieldName}");

			FormFields.viewCheckboxChecked(fieldName = "${fieldName}");

			FormFields.disableCheckbox(fieldName = "${fieldName}");
		}

		SystemSettings.saveConfiguration();

		SystemSettings.exitEditConfiguration();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Infrastructure",
			configurationName = "JavaScript Loader",
			configurationScope = "System Scope");

		Refresh();

		for (var fieldName : list "applyVersioning,exposeGlobal") {
			FormFields.viewCheckboxNotChecked(fieldName = "${fieldName}");
		}

		SystemSettings.resetConfiguration(configurationName = "JavaScript Loader");
	}

	@description = "This is a use case for LPS-59749"
	@priority = "3"
	test EditFormsConfigurationViaSystemSettings {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "Forms#EditFormsConfigurationViaSystemSettings";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		LexiconEntry.viewActiveDisplayStyle(displayStyle = "table");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Forms",
			configurationName = "Forms",
			configurationScope = "Site Scope");

		FormFields.viewSelectOption(
			fieldName = "Default Display View",
			selectOption = "Table");

		FormFields.selectSelectOption(
			fieldName = "Default Display View",
			selectOption = "List");

		SystemSettings.saveConfiguration();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		LexiconEntry.viewActiveDisplayStyle(displayStyle = "list");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Forms",
			configurationName = "Forms",
			configurationScope = "Site Scope");

		SystemSettings.resetConfiguration(configurationName = "Forms");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		LexiconEntry.viewActiveDisplayStyle(displayStyle = "table");
	}

	@description = "This is a use case for LPS-81578."
	@priority = "4"
	test GuestUserCanNotSeeFormAfterPermissionRemoved {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName();

		Form.editDescription();

		Form.addTextField(fieldPositionNumber = "0");

		Form.save();

		Form.publishForm();

		Navigator.gotoBack();

		FormsAdminNavigator.gotoPermissions(
			entryTitle = "Created Form Name",
			menuItem = "Permissions");

		Role.removePermissionPG(
			permissionDefinitionKey = "CONTENT_PERMISSIONS_ADD_FORM_INSTANCE_RECORD_CHECKBOX",
			roleTitle = "Guest");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoEditFormByName();

		FormsAdminNavigator.gotoPublishCopyURLLink();

		var publishedFormPublicURL = Form.getPublishedFormPublicURL(publishedFormPublicURL = "${publishedFormPublicURL}");

		Navigator.openSpecificURL(url = "${publishedFormPublicURL}");

		User.logoutPG();

		Navigator.openSpecificURL(url = "${publishedFormPublicURL}");

		Alert.viewWarningSpecific(warningMessage = "This form is not available or it was not published.");
	}

	@description = "Verify that multiple Forms can be deleted"
	@priority = "5"
	test MultipleFormsCanBeDeleted {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.addTextField(fieldPositionNumber = "0");

		Form.save();

		FormsAdmin.addForm();

		Form.editName(formName = "Form 2");

		Form.addTextField(fieldPositionNumber = "0");

		Form.save();

		FormsAdminNavigator.gotoBack();

		while (IsElementPresent(locator1 = "Icon#VERTICAL_ELLIPSIS_BUTTON")) {
			LexiconEntry.gotoVerticalEllipsisMenuItemNoError(menuItem = "Delete");

			AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

			Alert.viewSuccessMessage();
		}

		AssertElementNotPresent(
			key_formName = "Form 1",
			locator1 = "FormsAdmin#FORM_ENTRY_LINK");

		AssertElementNotPresent(
			key_formName = "Form 2",
			locator1 = "FormsAdmin#FORM_ENTRY_LINK");
	}

	@description = "LPS-84276 - Verify that Form Pages can be removed"
	@priority = "5"
	test PagesCanBeDeleted {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "Forms#PagesCanBeDeleted";

		FormsAdmin.addForm();

		Form.editName();

		Form.editPageTitle(
			formPageName = "Page A",
			formTitleNumber = "1");

		Form.addTextField(formPageNumber = "0");

		Form.editFieldLabelMetal(fieldValue = "Text Field Page A");

		Form.closeSidebar();

		Form.addPage(formAddNewPageNumber = "1");

		Form.editPageTitle(
			formPageName = "Page B",
			formTitleNumber = "2");

		Form.addTextField(formPageNumber = "1");

		Form.editFieldLabelMetal(fieldValue = "Text Field Page B");

		Form.deleteCurrentPage(
			formDropDownNumber = "1",
			formPageNumber = "2");

		FormFields.viewDeletedFieldLabel(fieldName = "Text Field Page B");

		FormFields.viewTextLabel(
			fieldLabel = "Text Field Page A",
			fieldName = "Text Field Page A");
	}

	@description = "Verify that Form Pages can be reordered"
	@priority = "5"
	test PagesCanBeReordered {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.editPageTitle(
			formPageName = "Page A",
			formTitleNumber = "1");

		Form.addPage(formAddNewPageNumber = "1");

		Form.editPageTitle(
			formPageName = "Page B",
			formTitleNumber = "2");

		Form.addPage(formAddNewPageNumber = "2");

		Form.editPageTitle(
			formPageName = "Page C",
			formTitleNumber = "3");

		Form.viewButtonPageDisabled(
			formPageName = "Page A",
			pageMove = "Up");

		Form.viewButtonPageDownEnabled(formPageName = "Page A");

		Form.viewButtonPageUpEnabled(formPageName = "Page B");

		Form.viewButtonPageDownEnabled(formPageName = "Page B");

		Form.viewButtonPageDisabled(
			formPageName = "Page C",
			pageMove = "Down");

		Form.viewButtonPageUpEnabled(formPageName = "Page C");

		Form.movePageUp(formPageName = "Page C");

		Form.movePageUp(formPageName = "Page C");

		Form.viewButtonPageDownEnabled(formPageName = "Page C");

		Form.viewButtonPageDisabled(
			formPageName = "Page C",
			pageMove = "Up");

		Form.movePageDown(formPageName = "Page A");

		Form.viewButtonPageUpEnabled(formPageName = "Page A");

		Form.viewButtonPageDisabled(
			formPageName = "Page A",
			pageMove = "Down");
	}

	@description = "Verify that Form Pages can be reset"
	@priority = "5"
	test PagesCanBeReset {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.editPageTitle(
			formPageName = "Test title",
			formTitleNumber = "1");

		Form.editPageDescription(formPageDescriptionName = "Text");

		Form.addTextField(fieldPositionNumber = "0");

		Form.save();

		Form.pageReset(pageIndex = "1");

		Form.viewFormPlaceholderPage(pageIndex = "0");

		Form.viewPageTitleDefault(pageIndex = "0");

		Form.viewPageEmptyField(pageIndex = "0");
	}

	@description = "LPS-111551 - As a Forms admin, I want to reorder my form pages"
	@priority = "4"
	test ReorderPagesAndVerifyFields {
		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.editPageTitle(
			formPageName = "Page A",
			formTitleNumber = "1");

		Form.addTextField(fieldPositionNumber = "0");

		var fieldTextField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Text Field 1");

		Form.closeSidebar();

		Form.addPage(formAddNewPageNumber = "1");

		Form.editPageTitle(
			formPageName = "Page B",
			formTitleNumber = "2");

		Form.addTextField(
			fieldPositionNumber = "0",
			formPageNumber = "1");

		Form.editFieldLabelMetal(fieldValue = "Text Field 2");

		Form.closeSidebar();

		Form.movePageDown(formPageName = "Page A");

		Form.viewButtonPageDisabled(
			formPageName = "Page A",
			pageMove = "Down");

		Form.viewButtonPageDownEnabled(formPageName = "Page B");

		Form.viewButtonPageUpEnabled(formPageName = "Page A");

		Form.viewReorderPageAndVerifyField(
			fieldName = "Text Field 2",
			fieldPositionNumber = "0",
			formPageNumber = "0");

		Form.viewReorderPageAndVerifyField(
			fieldName = "Text Field 1",
			fieldPositionNumber = "0",
			formPageNumber = "1");

		Form.movePageUp(formPageName = "Page A");

		Form.viewReorderPageAndVerifyField(
			fieldName = "Text Field 1",
			fieldPositionNumber = "0",
			formPageNumber = "0");

		Form.viewReorderPageAndVerifyField(
			fieldName = "Text Field 2",
			fieldPositionNumber = "0",
			formPageNumber = "1");
	}

	@description = "This is a use case for LPS-59336."
	@priority = "4"
	test SearchFormRecordMultipleEntries {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "Forms#SearchFormRecordMultipleEntries";

		var fieldValueList = "testEntry1,exampleText,sampleAnswer";

		FormsAdmin.addForm();

		Form.editName(formName = "Test Form");

		Form.editDescription(formDescription = "Test Form Description");

		Form.addTextField(fieldPositionNumber = "0");

		var fieldTextField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Text Field");

		Form.closeSidebar();

		Form.publishForm();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Form Page");

		Navigator.gotoPage(pageName = "Form Page");

		Portlet.addPG(
			pageName = "Form Page",
			portletName = "Form");

		FormPortletNavigator.gotoSelectForm();

		FormPortletConfiguration.selectForm(formName = "Test Form");

		PortletEntry.save();

		Navigator.gotoPage(pageName = "Form Page");

		FormPortlet.waitFormRenderer(text = "Submit");

		for (var fieldValue : list "${fieldValueList}") {
			FormFields.editText(
				fieldName = "${fieldTextField}",
				fieldValue = "${fieldValue}");

			FormPortlet.clickSubmit();

			Alert.viewSuccessMessage();

			Refresh();
		}

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdmin.viewForm(
			formDescription = "Test Form Description",
			formName = "Test Form");

		FormsAdminNavigator.gotoViewEntries(formName = "Test Form");

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Text Field",
			fieldValue = "testEntry1");

		for (var fieldValue : list "${fieldValueList}") {
			Search.searchCP(searchTerm = "${fieldValue}");

			FormsAdmin.viewFormTableEntry(
				fieldLabel = "Text Field",
				fieldValue = "${fieldValue}");

			for (var fieldValueNotVisible : list "${fieldValueList}") {
				if ("${fieldValueNotVisible}" != "${fieldValue}") {
					FormsAdmin.viewTableEntryNotPresent(
						fieldLabel = "Text Field",
						fieldValue = "${fieldValueNotVisible}");
				}
			}
		}

		Search.searchCP(searchTerm = "otherEntry");

		FormsAdmin.viewNoFormEntriesFound();
	}

	@description = "Verify that a Form cannot be created without at least 1 field"
	@priority = "5"
	test ShouldHaveAtLeastOneField {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Click(locator1 = "Button#SAVE");

		Alert.viewErrorMessage(errorMessage = "Error:Please add at least one field.");

		Click(locator1 = "Form#PUBLISH_FORM_BUTTON");

		Alert.viewErrorMessage(errorMessage = "Error:Please add at least one field.");
	}

	@priority = "4"
	test SubmitFormWithMultipleFieldsAndViewEntriesViaDescriptiveDisplay {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "Forms#SubmitFormWithMultipleFieldsAndViewEntriesViaDescriptiveDisplay";

		FormsAdmin.addForm();

		Form.editName();

		Form.editDescription();

		Form.addTextField(fieldPositionNumber = "0");

		var fieldTextField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Text Field");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Multiple Selection");

		var fieldMultipleSelectionField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Checkbox Field");

		FormFields.editOptionsRow(
			optionName = "Checkbox1",
			optionValue = "Checkbox 1",
			rowNumber = "1");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "1",
			fieldType = "Single Selection");

		var fieldSingleSelectionField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Radio Field");

		FormFields.editOptionsRow(
			optionName = "Option1",
			optionValue = "Option 1");

		FormFields.editOptionsRow(
			optionName = "Option2",
			optionValue = "Option 2",
			rowNumber = "2");

		Form.closeSidebar();

		Form.gotoAddField(
			fieldPositionNumber = "2",
			fieldType = "Select from List");

		var fieldSelectFromListField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Select Field");

		FormFields.editOptionsRow(
			optionName = "Select1",
			optionValue = "Select 1");

		FormFields.editOptionsRow(
			optionName = "Select2",
			optionValue = "Select 2",
			rowNumber = "2");

		Form.closeSidebar();

		Form.publishForm();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Form Page");

		Navigator.gotoPage(pageName = "Form Page");

		Portlet.addPG(
			pageName = "Form Page",
			portletName = "Form");

		FormPortletNavigator.gotoSelectForm();

		FormPortletConfiguration.selectForm();

		PortletEntry.save();

		Navigator.gotoPage(pageName = "Form Page");

		FormPortlet.waitFormRenderer(text = "Submit");

		FormFields.viewTextLabel(
			fieldLabel = "Text Field",
			fieldName = "${fieldTextField}");

		FormFields.editText(
			fieldName = "${fieldTextField}",
			fieldValue = "Text Field Value");

		FormFields.viewCheckboxLabel(
			fieldLabel = "Checkbox Field",
			fieldName = "${fieldMultipleSelectionField}");

		FormFields.selectCheckboxOption(
			checkboxOption = "Checkbox 1",
			fieldName = "${fieldMultipleSelectionField}");

		FormFields.viewRadioLabel(
			fieldLabel = "Radio Field",
			fieldName = "${fieldSingleSelectionField}");

		FormFields.selectRadioOption(
			fieldName = "${fieldSingleSelectionField}",
			radioOption = "Option 1");

		FormFields.viewSelectLabel(
			fieldLabel = "Select Field",
			fieldName = "${fieldSelectFromListField}");

		FormFields.selectSelectOption(
			fieldName = "${fieldSelectFromListField}",
			selectOption = "Select 2");

		FormPortlet.submitSuccessfully();

		FormsAdmin.openFormsAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		FormsAdminNavigator.gotoViewEntries();

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Text Field",
			fieldValue = "Text Field Value");

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Checkbox Field",
			fieldValue = "Checkbox 1");

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Radio Field",
			fieldValue = "Option 1");

		FormsAdmin.viewFormTableEntry(
			fieldLabel = "Select Field",
			fieldValue = "Select 2");

		FormsAdminNavigator.gotoView();

		FormsAdmin.viewTextEntry(
			fieldLabel = "Text Field",
			fieldName = "${fieldTextField}",
			fieldValue = "Text Field Value");

		FormsAdmin.viewCheckboxEntry(
			fieldName = "${fieldMultipleSelectionField}",
			fieldValue = "Checkbox 1");

		FormsAdmin.viewRadioEntry(
			fieldLabel = "Radio Field",
			fieldName = "${fieldSingleSelectionField}",
			fieldValue = "Option 1");

		FormsAdmin.viewSelectEntry(
			fieldLabel = "Select Field",
			fieldName = "${fieldSelectFromListField}",
			fieldValue = "Select 2");
	}

	@description = "LPS-84637 - Form title and description get unescaped after unpublish it."
	@priority = "5"
	test TitleAndDescriptionXSSUnescapedAfterUnpublish {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "Forms#TitleAndDescriptionXSSUnescapedAfterUnpublish";

		FormsAdmin.addForm();

		Form.editName(formName = "<script>alert(123)</script>");

		Form.editDescription(formDescription = "<script>alert(456)</script>");

		Form.addTextField(fieldPositionNumber = "0");

		Form.publishForm();

		FormsAdminNavigator.gotoBack();

		FormsAdmin.viewForm(
			formDescription = "<script>alert(456)</script>",
			formName = "<script>alert(123)</script>");

		FormsAdminNavigator.gotoEditFormByName(formName = "<script>alert(123)</script>");

		Form.viewFormName(formName = "<script>alert(123)</script>");

		Form.viewFormDescription(formDescription = "<script>alert(456)</script>");

		Form.unpublishForm();

		FormsAdminNavigator.gotoBack();

		FormsAdmin.viewForm(
			formDescription = "<script>alert(456)</script>",
			formName = "<script>alert(123)</script>");

		AssertAlertNotPresent();

		var actualScript = '''<script>alert(123)</script>''';

		var escapedScript = '''&lt;script&gt;alert(123)&lt;/script&gt;''';

		AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

		AssertHTMLSourceTextPresent(value1 = "${escapedScript}");
	}

	@description = "This is a use case for LPS-64305 and LPS-96253."
	@priority = "4"
	test ViewDefaultFieldNamesWithPunctuationCharacters {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property test.assert.javascript.errors = "true";
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "Forms#ViewDefaultFieldNamesWithPunctuationCharacters";

		FormsAdmin.addForm();

		Form.editName();

		Form.editDescription();

		Form.addTextField(fieldPositionNumber = "0");

		Form.editFieldLabelMetal(fieldValue = ",-+!@#$%^*()=.?/;:{}[]\|");

		Form.gotoAdvancedTab();

		var textFieldName1 = FormFields.getFieldName();

		Form.closeSidebar();

		Form.addTextField(fieldPositionNumber = "1");

		Form.editFieldLabelMetal(fieldValue = "Jump, She exclaimed!");

		Form.gotoAdvancedTab();

		var textFieldName2 = FormFields.getFieldName();

		Form.closeSidebar();

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormPortlet.waitFormRenderer(text = "Submit");

		FormFields.viewTextField(
			fieldLabel = ",-+!@#$%^*()=.?/;:{}[]\|",
			fieldName = "${textFieldName1}");

		FormFields.viewTextField(
			fieldLabel = "Jump, She exclaimed!",
			fieldName = "${textFieldName2}");

		FormFields.editText(
			fieldName = "${textFieldName1}",
			fieldValue = "1,2,3.");

		FormFields.editText(
			fieldName = "${textFieldName2}",
			fieldValue = ",-+!@#$%^*()=.?/;:{}[]\|");

		FormPortlet.submitSuccessfully();
	}

	@description = "This is a use case for LPS-126817."
	@priority = "5"
	test ViewSelectFromListOptionValueWithCharacter {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "Forms#ViewSelectFromListOptionValueWithCharacter";

		FormsAdmin.addForm();

		Form.editName();

		Form.editDescription();

		Form.gotoAddField(
			fieldPositionNumber = "0",
			fieldType = "Select from List");

		Form.editFieldLabelMetal(fieldValue = "Select");

		for (var number : list "1,2") {
			FormFields.editOptionsRow(
				optionName = "<test${number}",
				optionValue = "<test ${number}",
				rowNumber = "${number}");
		}

		Form.gotoAdvancedTab();

		FormFields.enableSwitch(fieldName = "Multiple");

		Form.publishForm();

		FormsAdminNavigator.gotoEditField(fieldName = "Select");

		FormFields.viewOptionsRowFieldValue(
			fieldValue = "<test 1",
			rowNumber = "1");

		FormFields.viewOptionsRowFieldValue(
			fieldValue = "<test 2",
			rowNumber = "2");
	}

	@description = "Verify that a Form autosaves after 1 minute by default"
	@priority = "5"
	test WillAutosaveAfterOneMinute {
		property portal.acceptance = "true";

		FormsAdmin.addForm();

		Form.editName(formName = "Form 1");

		Form.editDescription(formDescription = "Form Description");

		Form.addTextField(fieldPositionNumber = "0");

		Pause(locator1 = "60000");

		Form.viewSaveNotification();

		FormsAdminNavigator.gotoBack();

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		Form.viewFormName(formName = "Form 1");

		Form.viewFormDescription(formDescription = "Form Description");

		FormFields.viewTextLabel(fieldLabel = "Text");
	}

}