@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Site Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONUser.tearDownNonAdminUsers();

			Site.tearDownCP();

			Organization.tearDownCP();

			Team.tearDownCP();

			PagesAdmin.tearDownCP();

			UserGroup.tearDownCP();
		}
	}

	@description = "Export and import work in organization and add child site from imported site template."
	@priority = "5"
	test AddChildSiteFromImportedSiteTemplate {
		property portal.acceptance = "true";
		property portal.upstream = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
		property test.name.skip.portal.instance = "SitesUseCase#AddChildSiteFromImportedSiteTemplate";
		property testray.component.names = "Training";

		task ("Add an organization") {
			JSONOrganization.addOrganization(organizationName = "Space Program Academy of Continuing Education");
		}

		task ("Add a child organization to the organization") {
			JSONOrganization.addOrganization(
				larFileName = "organizations.lar",
				organizationName = "College of Agricultural Science",
				parentOrganizationName = "Space Program Academy of Continuing Education");
		}

		task ("Export organizations") {
			User.openUsersAdmin();

			UsersAndOrganizationsNavigator.gotoOrganizations();

			LAR.exportPortlet(larFileName = "organizations.lar");
		}

		task ("Delete all the organizations") {
			JSONOrganization.deleteOrganizationByName(
				organizationName = "College of Agricultural Science",
				parentOrganizationName = "Space Program Academy of Continuing Education");

			JSONOrganization.deleteOrganizationByName(organizationName = "Space Program Academy of Continuing Education");
		}

		task ("Import organizations") {
			User.openUsersAdmin();

			UsersAndOrganizationsNavigator.gotoOrganizations();

			LAR.importPortlet(
				larFileName = "organizations.lar",
				portletName = "Users and Organizations");
		}

		task ("View organization imported") {
			UsersAndOrganizationsNavigator.gotoOrganizations();

			Organization.viewCP(
				orgName = "Space Program Academy of Continuing Education",
				orgType = "Organization");
		}

		task ("Add an organization site") {
			User.openUsersAdmin();

			Organization.addSiteCP(orgName = "College of Agricultural Science");
		}

		task ("Add a site template with 3 pages") {
			SiteTemplatesNavigator.openSiteTemplatesAdmin();

			SiteTemplates.addCP(siteTemplateName = "Digital Class Room");

			for (var pageName : list "Courses,Student Boards,Materials") {
				SiteTemplates.addSitePageViaSiteTemplateCP(
					pageName = "${pageName}",
					siteTemplateName = "Digital Class Room");
			}
		}

		task ("Export site template") {
			SiteTemplatesNavigator.openSiteTemplatesAdmin();

			LAR.exportPortlet(larFileName = "class-site-template.lar");
		}

		task ("Delete site template") {
			SiteTemplates.deleteCP(siteTemplateName = "Digital Class Room");
		}

		task ("Import site template") {
			SiteTemplatesNavigator.openSiteTemplatesAdmin();

			LAR.importPortlet(
				larFileName = "class-site-template.lar",
				portletName = "Site Templates",
				siteTemplateName = "Digital Class Room");
		}

		task ("Add a site with private membership type") {
			Site.openSitesAdmin();

			Site.addBlankCP(
				membershipType = "Private",
				parentSiteName = "College of Agricultural Science",
				siteName = "Moon Rocks 101",
				siteType = "Blank");
		}

		task ("Select Digital Class Room site template as private page page type") {
			Navigator.gotoBack();

			Site.selectPageType(
				selectPrivatePages = "true",
				siteTemplate = "Digital Class Room");
		}

		Site.openSitesAdmin();

		task ("Add another site with private membership type") {
			Site.addBlankCP(
				membershipType = "Private",
				parentSiteName = "College of Agricultural Science",
				siteName = "Moon Rocks 202",
				siteType = "Blank");
		}

		task ("Select Digital Class Room site template as private page page type and also enable Private Pages Propagation") {
			Navigator.gotoBack();

			Site.selectPageType(
				checkPrivatePagesPropagation = "true",
				selectPrivatePages = "true",
				siteTemplate = "Digital Class Room");
		}

		task ("View the first site private pages") {
			Navigator.openPrivateSiteURL(siteName = "Moon Rocks 101");

			for (var pageName : list "Courses,Student Boards,Materials") {
				Navigator.gotoPrivateSitePage(
					pageName = "${pageName}",
					siteName = "Moon Rocks 101");
			}
		}

		task ("View the second site private pages") {
			Navigator.openPrivateSiteURL(siteName = "Moon Rocks 202");

			for (var pageName : list "Courses,Student Boards,Materials") {
				Navigator.gotoPrivateSitePage(
					pageName = "${pageName}",
					siteName = "Moon Rocks 202");
			}
		}
	}

	@description = "Add 2 organization sites and deactivate organization site using new created user."
	@priority = "5"
	test AddOrganizationSitesAndDeactivate {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SitesUseCase#AddOrganizationSitesAndDeactivate";
		property testray.component.names = "Site Administration,Training,Users and Organizations";

		task ("Enable Show Inactive Request Message in system settings") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Infrastructure",
				configurationName = "Inactive Request Handler",
				configurationScope = "System Scope");

			FormFields.enableCheckbox(fieldName = "Show Inactive Request Message");

			SystemSettings.saveConfiguration();
		}

		task ("Add 2 site templates") {
			SiteTemplates.addCP(siteTemplateName = "Site Template Name 1");

			SiteTemplates.addCP(siteTemplateName = "Site Template Name 2");
		}

		task ("Add an organization site") {
			JSONOrganization.addOrganization(organizationName = "Organization Name 1");

			User.openUsersAdmin();

			UsersAndOrganizationsNavigator.gotoOrganizations();

			Organization.addSiteCP(
				orgName = "Organization Name 1",
				siteTemplateName = "Site Template Name 1");
		}

		task ("Set Allow manual membership management for the site") {
			Site.openSiteSettingsAdmin(siteURLKey = "organization-name-1");

			Site.manageMembershipOptions(
				allowManualMembershipManagement = "true",
				membershipType = "Open",
				selectMembershipType = "true");
		}

		task ("View the organization site") {
			Site.openSitesAdmin();

			Site.viewCP(
				siteMember = "Organization",
				siteName = "Organization Name 1");
		}

		task ("Add another organization site") {
			JSONOrganization.addOrganization(organizationName = "Organization Name 2");

			User.openUsersAdmin();

			UsersAndOrganizationsNavigator.gotoOrganizations();

			Organization.addSiteCP(
				orgName = "Organization Name 2",
				siteTemplateName = "Site Template Name 2");
		}

		task ("Set Allow manual membership management for the site") {
			Site.openSiteSettingsAdmin(siteURLKey = "organization-name-2");

			Site.manageMembershipOptions(
				allowManualMembershipManagement = "true",
				membershipType = "Open",
				selectMembershipType = "true");
		}

		task ("View the organization site") {
			Site.openSitesAdmin();

			Site.viewCP(
				siteMember = "Organization",
				siteName = "Organization Name 2");
		}

		task ("Add a user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign the first organization site to user") {
			User.openUsersAdmin();

			Site.assignUserSitesCP(
				siteName = "Organization Name 1",
				userScreenName = "usersn");
		}

		task ("Assign the second organization site to user") {
			User.openUsersAdmin();

			Site.assignUserSitesCP(
				siteName = "Organization Name 2",
				userScreenName = "usersn");
		}

		task ("Assign administrator role to user") {
			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Log in as the user") {
			User.firstLoginPG(userEmailAddress = "userea@liferay.com");
		}

		task ("View the first organization site page") {
			Navigator.openSiteURL(siteName = "Organization Name 1");

			Page.viewDefaultSiteTemplatePagesPG(
				pageName = "Home",
				siteName = "Organization Name 1");

			Navigator.openSiteURL(siteName = "Organization Name 2");

			Page.viewDefaultSiteTemplatePagesPG(
				pageName = "Home",
				siteName = "Organization Name 2");
		}

		task ("Deactivate the second organization site") {
			Navigator.openSiteURL(siteName = "Organization Name 2");

			Site.openSitesAdmin();

			Site.deactivateCP(
				siteName = "Organization Name 2",
				successMessage = "true");
		}

		task ("View inactive request message in the second organization site") {
			var baseURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "${baseURL}/web/organization-name-2");

			Page.viewInactiveRequestMessage(resource = "site");
		}
	}

	@description = "Assert user can't assign user group with regular role with assign members."
	@priority = "3"
	test OnlySiteOwnersCanAssignSiteRolesToUserGroups {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property testray.component.names = "Site Administration,User Groups";

		task ("Get site name") {
			var siteName = TestCase.getSiteName(siteName = "${siteName}");
		}

		task ("Add a site role") {
			JSONRole.addSiteRole(
				roleKey = "Roles Siterole Name",
				roleTitle = "Roles Siterole Name");
		}

		task ("Add a user group") {
			UserGroup.openUserGroupsAdmin();

			UserGroup.addCP(userGroupName = "UG UserGroup Name");
		}

		task ("Assign the user group to default site") {
			Site.openSiteMembershipsAdmin(siteURLKey = "guest");

			Site.assignUserGroupAsMemberCP(userGroupName = "UG UserGroup Name");
		}

		task ("Add a regular role") {
			JSONRole.addRegularRole(
				roleKey = "Roles Regrole Name",
				roleTitle = "Roles Regrole Name");
		}

		task ("Add assign member permission to the regular role") {
			for (var resourceActionIndex : list "ASSIGN_MEMBERS,ASSIGN_USER_ROLES,VIEW_MEMBERS,VIEW_SITE_ADMINISTRATION") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.portal.kernel.model.Group",
					roleTitle = "Roles Regrole Name");
			}

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_CONTROL_PANEL",
				resourceName = "90",
				roleTitle = "Roles Regrole Name");

			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ASSIGN_MEMBERS",
				resourceName = "com.liferay.portal.kernel.model.Role",
				roleTitle = "Roles Regrole Name");
		}

		task ("Add a user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign current site to the user") {
			User.openUsersAdmin();

			User.editUserSiteCP(
				siteName = "${siteName}",
				userScreenName = "usersn");
		}

		task ("Assign regular role to the user") {
			JSONRole.assignRoleToUser(
				roleTitle = "Roles Regrole Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Log in as the user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assign site role to created user in default site's memberships") {
			Site.openSiteMembershipsAdmin(siteURLKey = "guest");

			Site.assignSiteRoleCP(
				resourceName = "userfn userln",
				roleTitle = "Roles Siterole Name");
		}

		task ("View can not assign user group") {
			Site.openSiteMembershipsAdmin(siteURLKey = "guest");

			NavItem.gotoUserGroups();

			AssertElementPresent(locator1 = "Message#EMPTY_INFO");
		}

		task ("Log out and log in as default user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");
		}
	}

	@description = "Private virtual hosts redirects to private page."
	@priority = "4"
	test PrivateVirtualHostUrlDoesNotRedirectUserToLoginPage {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property osgi.module.configuration.file.names = "com.liferay.login.web.internal.configuration.AuthLoginConfiguration.config";
		property osgi.module.configurations = "promptEnabled=&quot;true&quot;";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
		property testray.component.names = "Site Administration";

		task ("Get site name") {
			var siteName = TestCase.getSiteName(siteName = "${siteName}");
		}

		task ("Add virtual host to private page in default site") {
			Site.openSiteSettingsAdmin(siteURLKey = "guest");

			Site.addVirtualHostsURLCP(
				privatePageVirtualHostURL = "www.able.com",
				privateVirtualHosts = "true");
		}

		task ("Add a private page") {
			JSONLayout.addPrivateLayout(
				groupName = "Guest",
				layoutName = "Test Private Page");
		}

		task ("Log out as guest and visit the private page") {
			User.logoutPG();

			Navigator.openSpecificURL(url = "http://www.able.com:8080/test-private-page");
		}

		task ("View private page log in field") {
			Site.viewPrivateVirtualHostURLUserLoginRedirect(userEmailAddress = "@liferay.com");
		}

		task ("Log in as default user") {
			User.loginUserPG(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Add a user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign the created user to default site") {
			User.openUsersAdmin();

			User.editUserSiteCP(
				siteName = "${siteName}",
				userScreenName = "usersn");
		}

		task ("Log in from private page virtual URL as the created user") {
			User.firstLoginUI(
				specificURL = "http://www.able.com:8080/test-private-page",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");
		}

		task ("View private page in virtual host") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080/test-private-page");

			AssertLocation(value1 = "http://www.able.com:8080/test-private-page");
		}
	}

	@description = "Assert user can't assign user group with regular role with assign members."
	@priority = "3"
	test ReturnWrongLayoutForSignedInUserWithVirtualHostsConfigured {
		property custom.properties = "layout.default.template.id=2_columns_iii${line.separator}layout.user.private.layouts.enabled=false${line.separator}layout.user.private.layouts.auto.create=false${line.separator}layout.user.private.layouts.power.user.required=true${line.separator}layout.user.public.layouts.enabled=false${line.separator}layout.user.public.layouts.auto.create=false${line.separator}layout.user.public.layouts.power.user.required=true";
		property test.smtp.server.enabled = "true";

		task ("Add a site and a public page in it") {
			JSONGroup.addGroup(groupName = "Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Site Page Name");
		}

		task ("Edit virtual instance in instance settings") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Instance Configuration",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.editVirtualHostCP(virtualHostName = "www.able.com");
		}

		task ("Enable require strangers in instance settings") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.editConfigurationAuthenticationGeneral(enableRequireStrangers = "true");
		}

		task ("Edit Email Verification Notification in instance settings") {
			PortalSettings.editConfigurationUsersEmailNotificationsCP(
				configurationName = "Email Verification Notification",
				notificationsBody = "[$EMAIL_VERIFICATION_CODE$]");
		}

		task ("Add a virtual instance for public page") {
			Site.openSiteSettingsAdmin(siteURLKey = "site-name");

			Site.addVirtualHostsURLCP(
				pageVirtualHosts = "true",
				pageVirtualHostURL = "www.baker.com");
		}

		task ("Log in public page in virtual host") {
			User.firstLoginUI(specificURL = "http://www.baker.com:8080");
		}

		task ("Add a user and set require password reset") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.addCP(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			User.editPassword(requirePasswordReset = "true");
		}

		task ("Log out and log in as created user") {
			UserBar.signOut();

			User.firstLoginUI(
				password = "password",
				specificURL = "http://www.baker.com:8080",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Click Send New Verification Code") {
			Button.click(button = "Send New Verification Code");
		}

		task ("Get New Verification Code from email") {
			var emailVerification = MockMock.getHTMLBodyFormattedText(
				newTab = "true",
				recipient = "user1@",
				sender = "Joe Bloggs",
				subject = "http://www.baker.com:8080: Email Address Verification");

			Close.closeWindow();
		}

		task ("Fill New Verification Code and reset password") {
			Type(
				locator1 = "SignInCreateAccount#EMAIL_VERIFICATION_CODE_FIELD",
				value1 = "${emailVerification}");

			Button.clickVerifyButton();

			User.resetPassword();
		}

		task ("Fill password reminder and assert sign in") {
			User.answerPasswordReminder();

			AssertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");
		}

		task ("Log out") {
			UserBar.signOut();
		}

		task ("Delete New Verification Code email") {
			MockMock.deleteMail(
				asset = "http://www.baker.com:8080: Email Address Verification",
				newTab = "true");

			Close.closeWindow();
		}

		task ("Log in instance in virtual host") {
			User.firstLoginUI(specificURL = "http://www.able.com:8080");
		}

		task ("Edit Email Verification Notification in instance settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Email",
				configurationName = "Email Verification Notification",
				configurationScope = "Virtual Instance Scope");

			Type.typeCKEditor(
				locator1 = "CKEditor#BODY_FIELD",
				value1 = "[$EMAIL_VERIFICATION_URL$]");

			PortletEntry.save();
		}

		task ("Log out and log in as created user") {
			UserBar.signOut();

			User.firstLoginUI(
				specificURL = "http://www.baker.com:8080",
				userEmailAddress = "user1@liferay.com");
		}

		task ("Edit user email address for email notification") {
			Navigator.gotoAccountSettings();

			User.editUserInformation(userEmailAddressEdit = "user2@liferay.com");
		}

		task ("Get Email Address Verification URL from email") {
			var emailAddressVerificationURL = MockMock.getHTMLBodyFormattedText(
				newTab = "true",
				recipient = "user2@",
				sender = "Joe Bloggs",
				subject = "http://www.baker.com:8080: Email Address Verification");

			Close.closeWindow();
		}

		task ("Open Email Address Verification URL and verify it") {
			Navigator.openSpecificURL(url = "${emailAddressVerificationURL}");

			Button.clickVerifyButton();
		}

		task ("Fill password reminder and assert sign in") {
			AssertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");
		}

		task ("Delete Email Address Verification URL email") {
			MockMock.deleteMail(asset = "http://www.baker.com:8080: Email Address Verification");
		}
	}

	@description = "This test is based on LPS-14245 and it is designed to have the User test if the LayoutImporter checks when the Page Names are different but the Friendly URL is the same. The User will assert no errors display when a User is assigned to a User Group with the same Friendly URL. The User will also assert that they can enter a Friendly URL through the Site Manager with adding a slash."
	@priority = "3"
	test SiteFriendlyURLLayoutImporter {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property testray.component.names = "Site Administration";

		var portalURL = PropsUtil.get("portal.url");

		task ("Add a user group") {
			UserGroup.openUserGroupsAdmin();

			UserGroup.addCP(userGroupName = "User Group Name");
		}

		UserGroup.openUserGroupsAdmin();

		task ("Add a public page in user group") {
			UserGroup.gotoAddPageCP(userGroupName = "User Group Name");

			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");

			PagesAdmin.addPage(pageName = "site Page Name");
		}

		task ("Add a user ") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign user to user group") {
			UserGroup.openUserGroupsAdmin();

			UserGroup.assignMemberCP(
				userGroupName = "User Group Name",
				userScreenName = "usersn");
		}

		task ("Log in as created user") {
			User.firstLoginPG(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("View my dashboard URL") {
			UserBar.gotoDropdownItem(dropdownItem = "My Dashboard");

			AssertLocation(value1 = "${portalURL}/user/usersn");
		}

		task ("Log in as default user") {
			User.firstLoginPG(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Add a page to default site with the same name in user group site page") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Site Page Name");
		}

		task ("Edit default site friendly URL") {
			Site.openSiteSettingsAdmin(siteURLKey = "guest");

			Site.editFriendlyURLCP(siteFriendlyURLEdit = "/liferay");
		}

		task ("Go to view the page via friendly URL") {
			Navigator.openSpecificURL(url = "${portalURL}/web/liferay/site-page-name");

			AssertLocation(value1 = "${portalURL}/web/liferay/site-page-name");
		}

		task ("Edit default site friendly URL back to original one") {
			Site.openSiteSettingsAdmin(siteURLKey = "liferay");

			Site.editFriendlyURLCP(siteFriendlyURLEdit = "/guest");
		}
	}

	@description = "In one community site and one edited site with page template, can deactivate Community site."
	@priority = "3"
	test SitesDeactivated {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property test.name.skip.portal.instance = "SitesUsecase#SitesDeactivated";
		property testray.component.names = "Site Administration";

		task ("Enable Show Inactive Request Message in system settings") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Infrastructure",
				configurationName = "Inactive Request Handler",
				configurationScope = "System Scope");

			FormFields.enableCheckbox(fieldName = "Show Inactive Request Message");

			SystemSettings.saveConfiguration();
		}

		task ("Add a site template and a site basing on it") {
			SiteTemplates.addCP(siteTemplateName = "Site Template Name");

			JSONGroup.addGroup(groupName = "Site1 Name");

			Site.openSiteSettingsAdmin(siteURLKey = "site1-name");

			Site.selectPageType(
				selectPublicPages = "true",
				siteTemplate = "Site Template Name");
		}

		task ("Add another site and edit site name") {
			JSONGroup.addGroup(groupName = "Site2 Name");

			Site.openSiteSettingsAdmin(siteURLKey = "site2-name");

			Site.editCP(
				siteName = "Site2 Name",
				siteNameEdit = "Site2 Name Edit");
		}

		task ("Add a user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign site to the user") {
			User.openUsersAdmin();

			User.editUserSiteCP(
				siteName = "Site1 Name",
				userScreenName = "usersn");
		}

		task ("Log out and log in as the created user") {
			User.firstLoginPG(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("View the first created site page") {
			Navigator.openSiteURL(siteName = "Site1 Name");

			Page.viewDefaultSiteTemplatePagesPG(
				pageName = "Home",
				siteName = "Site1 Name",
				siteTemplate = "Community");
		}

		task ("Log out and log in as the default user") {
			User.firstLoginPG(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Inactive the first created site") {
			Site.openSiteSettingsAdmin(siteURLKey = "site1-name");

			Site.inactivateCP(siteName = "Site1 Name");
		}

		task ("Log out and log in as the created user") {
			User.firstLoginPG(
				password = "test",
				userEmailAddress = "userea@liferay.com");
		}

		task ("View the inactive request message in the first created site") {
			var baseURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "${baseURL}/web/site1-name");

			Page.viewInactiveRequestMessage(resource = "site");
		}
	}

	@description = "Manage demo site virtual URL, friendly URL and logo, add JS to page, export and import page with child pages."
	@priority = "4"
	test SitesDemoSiteManagement {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property osgi.module.configuration.file.names = "com.liferay.login.web.internal.configuration.AuthLoginConfiguration.config";
		property osgi.module.configurations = "promptEnabled=&quot;true&quot;";
		property portal.release = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
		property test.name.skip.portal.instance = "SitesUsecase#SitesDemoSiteManagement";
		property testray.component.names = "Site Administration,Site Pages Administration";

		var portalURL = PropsUtil.get("portal.url");

		task ("Add a new site") {
			JSONGroup.addGroup(
				groupDescription = "This is the site description test",
				groupName = "World Cup - Russia 2018");
		}

		task ("Add tags to the new site") {
			Site.openSiteSettingsAdmin(siteURLKey = "world-cup-russia-2018");

			ProductMenu.gotoPortlet(
				category = "Configuration",
				portlet = "Site Settings");

			Tag.addViaSiteCP(tagNameList = "World Cup,Russia,2018");
		}

		task ("Add virtual host for public page and private page") {
			Site.addVirtualHostsURLCP(
				privatePageVirtualHostURL = "www.baker.com",
				privateVirtualHosts = "true",
				publicPageVirtualHostURL = "www.able.com",
				publicVirtualHosts = "true");
		}

		task ("Edit friendly URL") {
			Navigator.gotoBack();

			Site.editFriendlyURLCP(siteFriendlyURLEdit = "/russia2018");
		}

		task ("Add 2 public pages to the new site") {
			for (var publicPageName : list "Home,Arenas") {
				JSONLayout.addPublicLayout(
					groupName = "World Cup - Russia 2018",
					layoutName = "${publicPageName}");
			}
		}

		task ("Add 4 pages to the child page Arenas") {
			for (var childPageName : list "Arena Baltika,Zenit Arena,Kazan Arena") {
				JSONLayout.addPublicLayout(
					groupName = "World Cup - Russia 2018",
					layoutName = "${childPageName}",
					parentLayoutName = "Arenas");
			}
		}

		task ("Add 2 private pages to the new site") {
			for (var privatePageName : list "Accomodations,Maps") {
				JSONLayout.addPrivateLayout(
					groupName = "World Cup - Russia 2018",
					layoutName = "${privatePageName}");
			}
		}

		task ("Change site logo for the new site") {
			PagesAdmin.openPagesAdmin(siteURLKey = "russia2018");

			Site.changeSiteLogo(
				logoFile = "Document_3.png",
				pageName = "Public Pages");
		}

		task ("Add alert js to Arenas page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "russia2018");

			PagesAdmin.addJavaScript(
				javaScript = "alert('Welcome to Russia.');",
				pageName = "Arenas");
		}

		task ("View alert in Arenas page") {
			Open.openNoError(locator1 = "${portalURL}/web/russia2018/Arenas");

			AssertConfirm(value1 = "Welcome to Russia.");
		}

		task ("Log out as guest") {
			User.logoutPG();
		}

		task ("View alert in Arenas page") {
			Open.openNoError(locator1 = "${portalURL}/web/russia2018/Arenas");

			AssertConfirm(value1 = "Welcome to Russia.");
		}

		task ("Log in as default user") {
			User.loginUserPG(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("View logo is changed") {
			Open.openNoError(locator1 = "${portalURL}/web/russia2018");

			Page.viewCustomLogoPG();
		}

		task ("View 4 pages under the child page Arenas") {
			for (var childPageName : list "Arena Baltika,Zenit Arena,Kazan Arena") {
				Page.viewChildPageDropdown(
					childPageName = "${childPageName}",
					javaScriptPage = "Welcome to Russia.",
					pageName = "Arenas",
					viewChildPageDropdown = "PAGE_2");
			}
		}

		task ("Add blank js to Arenaspage") {
			Open.openNoError(locator1 = "${portalURL}/web/russia2018");

			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");

			PagesAdmin.addJavaScript(
				javaScript = " ",
				pageName = "Arenas");
		}

		task ("Add a user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign created site to the user") {
			User.openUsersAdmin();

			Site.assignUserSitesCP(
				siteName = "World Cup - Russia 2018",
				userScreenName = "usersn");
		}

		task ("Assign site administrator to the user") {
			User.openUsersAdmin();

			User.assignSiteRoleCP(
				siteRoleName = "Site Administrator",
				userScreenName = "usersn");
		}

		task ("Log out and assert log out") {
			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Log in as created user via private page virtual host") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.baker.com:8080/group/russia2018",
				userEmailAddress = "userea@liferay.com");
		}

		task ("View private pages") {
			Page.viewSpecificPG(pageNameList = "Accomodations,Maps");
		}

		task ("Log in as created user via site URL") {
			User.firstLoginUI(
				password = "test",
				specificURL = "${portalURL}/web/russia2018",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Export site") {
			ProductMenu.gotoPortlet(
				category = "Publishing",
				portlet = "Export");

			LexiconEntry.gotoAdd();

			LAR.exportWithAssertionOnSuccess();
		}

		task ("Download the lar") {
			var larFileName = LAR.getLarFileName();

			LexiconEntry.changeDisplayStyle(displayStyle = "list");

			Click(locator1 = "Icon#EXPORT");

			DownloadTempFile();
		}

		task ("Log in as default user") {
			User.firstLoginPG(
				password = "test",
				userEmailAddress = "test@liferay.com");
		}

		task ("Add a site and import the site lar file") {
			JSONGroup.addGroup(groupName = "Site Name");

			LAR.importSiteCP(
				larFileName = "${larFileName}",
				siteName = "Site Name");
		}

		task ("View all the pages are imported") {
			for (var childPageName : list "Arena Baltika,Zenit Arena,Kazan Arena") {
				Navigator.gotoSitePage(
					pageName = "Home",
					siteName = "Site Name");

				Page.viewChildPageDropdown(
					childPageName = "${childPageName}",
					pageName = "Arenas",
					viewChildPageDropdown = "PAGE_2");
			}
		}
	}

	@description = "This is a test for LPS-102711. The changes of site scope configuration in Instance Settings should be applied to the site."
	@priority = "4"
	test ViewChangesOfSiteScopeConfigurationDefinedInInstanceSettings {
		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Navigate to Site Settings admin in new site") {
			Site.openSiteSettingsAdmin(siteURLKey = "Test Site Name");
		}

		task ("Navigate to Message Boards configuration") {
			Click(
				key_itemName = "Message Boards",
				locator1 = "ListGroupItem#ITEM_TEXT");
		}

		task ("View the checkbox of Message Boards is unchecked") {
			AssertNotChecked.assertNotCheckedNotVisible(
				checkboxName = "Enable Message Boards Moderation",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("Navigate to Message Boards configuration in Instance Settings") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Message Boards",
				configurationName = "Message Boards Moderation Workflow",
				configurationScope = "Site Scope");
		}

		task ("Check the Enable Message Boards Moderation") {
			Check.checkNotVisible(
				checkboxName = "Enable Message Boards Moderation",
				locator1 = "Checkbox#ANY_CHECKBOX");

			SystemSettings.saveConfiguration();
		}

		task ("Navigate to Site Settings admin in new site") {
			Site.openSiteSettingsAdmin(siteURLKey = "Test Site Name");
		}

		task ("Navigate to Message Boards configuration") {
			Click(
				key_itemName = "Message Boards",
				locator1 = "ListGroupItem#ITEM_TEXT");
		}

		task ("View the checkbox of Message Boards is checked") {
			AssertChecked.assertCheckedNotVisible(
				checkboxName = "Enable Message Boards Moderation",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
	}

	@description = "This ensures that the custom site logo can be viewed in cards and list views."
	@priority = "4"
	test ViewSiteLogo {
		property portal.upstream = "true";

		task ("Add a new site and a public page in it") {
			JSONGroup.addGroup(groupName = "Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Site Page");
		}

		task ("Add a child site to the new site and a public page in it ") {
			JSONGroup.addChildGroup(
				groupName = "Child SiteName",
				parentGroupName = "Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Child SiteName",
				layoutName = "Site Page",
				parentGroupName = "Site Name");
		}

		task ("Change new site's logo") {
			Navigator.openSiteURL(siteName = "Site Name");

			Site.changeSiteLogo(
				logoFile = "Document_2.png",
				pageName = "Public Pages");
		}

		task ("Change new site child site's logo") {
			Navigator.openSiteURL(siteName = "Child SiteName");

			Site.changeSiteLogo(
				logoFile = "Document_3.png",
				pageName = "Public Pages");
		}

		task ("View new site's logo") {
			Site.viewCustomSiteLogoInDifferentViews(site = "Site Name");

			IFrame.closeFrame();
		}

		task ("Change new site child site's logo") {
			Site.viewCustomSiteLogoInDifferentViews(site = "Child SiteName");
		}
	}

}