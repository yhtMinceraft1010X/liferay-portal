@component-name = "portal-publications"
definition {

	property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Publications";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONPublications.enablePublications();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Publications.disablePublications();
		}
	}

	@description = "Assert modification conflict displays when modify the same document in two Publications"
	@priority = "5"
	test AssertModificationConflictDisplays {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		JSONPublications.addPublication(publicationName = "Publication 1 Name");

		JSONPublications.selectPublication(publicationName = "Publication 1 Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentDescriptionEdit = "DM Document Description Edit 1",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit 1");

		JSONPublications.addPublication(publicationName = "Publication 2 Name");

		JSONPublications.selectPublication(publicationName = "Publication 2 Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentDescriptionEdit = "DM Document Description Edit 2",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit 2");

		JSONPublications.selectPublication(publicationName = "Publication 1 Name");

		JSONPublications.publishPublication(publicationName = "Publication 1 Name");

		Publications.viewPublicationPublished(publicationName = "Publication 1 Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title Edit 1");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Title Edit 1");

		JSONPublications.selectPublication(publicationName = "Publication 2 Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title Edit 2");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Title Edit 2");

		PublicationsNavigator.gotoReviewChanges(publicationName = "Publication 2 Name");

		PublicationsNavigator.gotoPublish(publicationName = "Publication 2 Name");

		Publications.viewNeedsManualResolution(
			entryTitle = "DM Document Title Edit 2",
			warningMessage = "Modification Conflict: The conflict cannot be automatically resolved.");

		Publications.viewNeedsManualResolution(
			entryTitle = "DM Document Title Edit 2",
			warningMessage = "Duplicate Document Version: The document version was updated to latest.");
	}

	@description = "Assert the conflict changes disply when modifying and deleting the same document in two Publications"
	@priority = "4"
	test AssertModificationDeletionConflictDisplays {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		JSONPublications.addPublication(publicationName = "Publication Name 1");

		JSONPublications.selectPublication(publicationName = "Publication Name 1");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit");

		JSONPublications.addPublication(publicationName = "Publication Name 2");

		JSONPublications.selectPublication(publicationName = "Publication Name 2");

		JSONDocument.deleteFile(
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest");

		JSONPublications.selectPublication(publicationName = "Publication Name 1");

		JSONPublications.publishPublication(publicationName = "Publication Name 1");

		Publications.viewPublicationPublished(publicationName = "Publication Name 1");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title Edit");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Title Edit");

		JSONPublications.selectPublication(publicationName = "Publication Name 2");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.viewDefault();

		PublicationsNavigator.gotoPublish(publicationName = "Publication Name 2");

		Publications.viewNeedsManualResolution(
			entryTitle = "Asset",
			warningMessage = "Modification Deletion Conflict: Deletion conflicts with a modification.");

		Publications.viewNeedsManualResolution(
			entryTitle = "Document Version",
			warningMessage = "Modification Deletion Conflict: Deletion conflicts with a modification.");

		Publications.viewNeedsManualResolution(
			entryTitle = "Document",
			warningMessage = "Modification Deletion Conflict: Deletion conflicts with a modification.");
	}

	@description = "Assert there are no conflict changes when deleting the same document in two Publications"
	@priority = "4"
	test AssertNoConflictForDeletionsCombinationPublications {
		property portal.acceptance = "true";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		JSONPublications.addPublication(publicationName = "Publication Name 1");

		JSONPublications.selectPublication(publicationName = "Publication Name 1");

		JSONDocument.deleteFile(
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest");

		JSONPublications.addPublication(publicationName = "Publication Name 2");

		JSONPublications.selectPublication(publicationName = "Publication Name 2");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		JSONDocument.deleteFile(
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest");

		JSONPublications.selectPublication(publicationName = "Publication Name 1");

		JSONPublications.publishPublication(publicationName = "Publication Name 1");

		Publications.viewPublicationPublished(publicationName = "Publication Name 1");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.viewDefault();

		JSONPublications.selectPublication(publicationName = "Publication Name 2");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.viewDefault();

		PublicationsNavigator.gotoPublish(publicationName = "Publication Name 2");

		AssertElementNotPresent(locator1 = "Publications#NEEDS_MANUAL_RESOLUTION_TABLE");

		JSONPublications.publishPublication(publicationName = "Publication Name 2");

		Publications.viewPublicationPublished(publicationName = "Publication Name 2");
	}

	@priority = "5"
	test ConflictingPublicationsAutomaticallyResolved {

		// Workaround LPS-140997 and LPS-129369

		property database.types = "hypersonic,mariadb,mysql,postgresql";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "WC WebContent Title");

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent Content 1 Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title");

		JSONPublications.addPublication(publicationName = "Publication 2 Name");

		JSONPublications.selectPublication(publicationName = "Publication 2 Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent Content 2 Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title");

		PublicationsNavigator.openPublicationsAdmin();

		Publications.assertDiscardIsUnavailableForInactivePublication(
			changeCategory = "Web Content Article",
			changeTitle = "WC WebContent Title",
			publicationName = "Publication Name");

		JSONPublications.publishPublication(publicationName = "Publication 2 Name");

		Publications.viewPublicationPublished(publicationName = "Publication 2 Name");

		PublicationsNavigator.gotoPublish(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		Publications.viewAutomaticallyResolved(
			entryTitle = "Test Test added a Web Content Article",
			successMessage = "The article version was updated to latest.");

		Publications.viewAutomaticallyResolved(
			entryTitle = "Test Test modified a Asset",
			successMessage = "The conflict was automatically resolved.");

		AssertElementNotPresent(locator1 = "Publications#NEEDS_MANUAL_RESOLUTION_TABLE");

		AssertElementNotPresent(
			key_warningMessage = "The conflict cannot be automatically resolved.",
			locator1 = "Message#WARNING_SPECIFIC");

		JSONPublications.publishPublication(publicationName = "Publication Name");

		Publications.viewPublicationPublished(publicationName = "Publication Name");
	}

	@description = "Assert explanation of addition conflict displays"
	@priority = "4"
	test ExplainAdditionConflict {
		JSONWebcontent.addFolder(
			folderName = "WC Folder Name",
			groupName = "Guest");

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContentFolder.moveToRecycleBinCP(
			assetType = "Web Content Folder",
			folderName = "WC Folder Name");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "guest");

		RecycleBin.deleteCP(
			assetName = "WC Folder Name",
			assetType = "Web Content Folder");

		JSONPublications.publishPublication(publicationName = "Publication Name");

		Publications.viewPublicationPublished(publicationName = "Publication Name");

		PublicationsNavigator.openPublicationsHistory();

		Publications.revertPublication(
			publicationName = "Publication Name",
			publishNow = "true");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#SUCCESS",
			value1 = "No unresolved conflicts, ready to publish.");

		Publications.publishPublication(publicationName = "Revert &quot;Publication Name&quot;");

		PublicationsNavigator.openPublicationsHistory();

		ManagementBar.toggleViewOrder(order = "list-down");

		Publications.revertPublication(
			publicationName = "Publication Name",
			publishNow = "true");

		Publications.viewConflictingChangesWarning(warningMessage = "This publication contains conflicting changes that must be manually resolved before publishing.");

		Publications.viewNeedsManualResolution(
			entryTitle = "WC Folder Name",
			warningMessage = "Addition Conflict: New item already exists.");
	}

	@description = "Assert explanation of duplicate conflict displays"
	@priority = "4"
	test ExplainDuplicationConflict {
		JSONPublications.addPublication(publicationName = "Publication 1 Name");

		JSONPublications.selectPublication(publicationName = "Publication 1 Name");

		JSONWebcontent.addFolder(
			folderName = "WC Folder Name",
			groupName = "Guest");

		JSONPublications.addPublication(publicationName = "Publication 2 Name");

		JSONPublications.selectPublication(publicationName = "Publication 2 Name");

		JSONWebcontent.addFolder(
			folderName = "WC Folder Name",
			groupName = "Guest");

		PublicationsNavigator.gotoReviewChanges(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication 1 Name");

		PublicationsChanges.viewChanges(
			changeCategory = "Web Content Folder",
			changeSite = "Guest",
			changeTitle = "WC Folder Name",
			changeType = "Added",
			changeUser = "Test Test");

		JSONPublications.publishPublication(publicationName = "Publication 1 Name");

		PublicationsNavigator.gotoReviewChanges(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication 2 Name");

		PublicationsChanges.viewChanges(
			changeCategory = "Web Content Folder",
			changeSite = "Guest",
			changeTitle = "WC Folder Name",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsNavigator.gotoPublish(publicationName = "Publication 2 Name");

		Publications.viewConflictingChangesWarning(warningMessage = "This publication contains conflicting changes that must be manually resolved before publishing.");

		Publications.viewNeedsManualResolution(
			entryTitle = "WC Folder Name",
			warningMessage = "Duplicate Folder Name: Rename the folder in the publication.");
	}

	@description = "Assert explanation of missing requirements conflict displays"
	@priority = "4"
	test ExplainMissingRequirementConflict {
		JSONWebcontent.addFolder(
			folderName = "WC Folder Name",
			groupName = "Guest");

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONWebcontent.addFolder(
			folderDescription = "WC SubFolder Description",
			folderName = "WC SubFolder Name",
			groupName = "Guest",
			parentFolderName = "WC Folder Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		Publications.workOnProduction();

		WebContentFolder.moveToRecycleBinCP(
			assetType = "Web Content Folder",
			folderName = "WC Folder Name");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "guest");

		RecycleBin.emptyCP();

		JSONPublications.selectPublication(publicationName = "Publication Name");

		PublicationsNavigator.gotoReviewChanges(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		PublicationsChanges.viewChanges(
			changeCategory = "Web Content Folder",
			changeSite = "Guest",
			changeTitle = "WC SubFolder Name",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsNavigator.gotoPublish(publicationName = "Publication Name");

		Publications.viewConflictingChangesWarning(warningMessage = "This publication contains conflicting changes that must be manually resolved before publishing.");

		Publications.viewNeedsManualResolution(
			entryTitle = "WC SubFolder Name",
			warningMessage = "Missing Requirement Conflict: Cannot be added because a required Web Content Folder has been deleted.");
	}

	@description = "Assert the conflict changes disply when modifying and deleting the same document in two Publications and discard the changes"
	@priority = "5"
	test ResolveDeletionModificationConflictPublicationsByDiscarding {

		// Workaround LPS-140997

		property database.types = "hypersonic,mariadb,mysql,oracle,postgresql,sqlserver";
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "WC WebContent Title");

		JSONPublications.addPublication(publicationName = "Publication 1 Name");

		JSONPublications.selectPublication(publicationName = "Publication 1 Name");

		JSONWebcontent.deleteWebContent(
			groupName = "Guest",
			title = "WC WebContent Title");

		JSONPublications.addPublication(publicationName = "Publication 2 Name");

		JSONPublications.selectPublication(publicationName = "Publication 2 Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent Content 2 Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title 2 Edit");

		PublicationsNavigator.gotoReviewChanges(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication 1 Name");

		PublicationsChanges.viewChanges(
			changeCategory = "Web Content Article",
			changeSite = "Guest",
			changeTitle = "WC WebContent Title",
			changeType = "Deleted",
			changeUser = "Test Test");

		JSONPublications.publishPublication(publicationName = "Publication 1 Name");

		Publications.viewPublicationPublished(publicationName = "Publication 1 Name");

		Navigator.gotoNavTab(navTab = "History");

		PublicationsChanges.viewChanges(
			changeCategory = "Web Content Article",
			changeSite = "Guest",
			changeTitle = "WC WebContent Title",
			changeType = "Deleted",
			changeUser = "Test Test",
			publicationName = "Publication 1 Name",
			publishedPublication = "true");

		// Workaround LPS-134018

		/*WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContent.viewNotPresentCP(webContentTitle = "WC WebContent Title");*/

		JSONPublications.selectPublication(publicationName = "Publication 2 Name");

		/*WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title 2 Edit");*/

		PublicationsNavigator.gotoReviewChanges(publicationName = "Publication 2 Name");

		PublicationsChanges.viewChanges(
			changeCategory = "Web Content Article",
			changeSite = "Guest",
			changeTitle = "WC WebContent Title 2 Edit",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsNavigator.gotoPublish(publicationName = "Publication 2 Name");

		Publications.viewNeedsManualResolution(
			entryTitle = "WC WebContent Title 2 Edit",
			warningMessage = "Deletion Modification Conflict: Modification conflicts with a deletion.");

		PublicationsNavigator.gotoViewConflictingChangeDetails(entryTitle = "WC WebContent Title 2 Edit");

		PublicationsChangeDetails.viewConflictingChangeDetails(
			columnName = "Title",
			columnValueInPublication = "WC WebContent Title 2 Edit",
			deletionModificationConflict = "true",
			publicationName = "Publication 2 Name");

		IFrame.closeFrame();

		PublicationsChanges.discardChanges(
			changeCategory = "Asset",
			changeTitle = "WC WebContent Title 2 Edit",
			conflictingChanges = "true",
			entryTitle = "WC WebContent Title 2 Edit");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContent.viewNotPresentCP(webContentTitle = "WC WebContent Title 2 Edit");

		WebContent.viewNotPresentCP(webContentTitle = "WC WebContent Title");

		JSONPublications.publishPublication(publicationName = "Publication 2 Name");

		Publications.viewPublicationPublished(publicationName = "Publication 2 Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No web content was found.");
	}

	@description = "Assert the conflict changes disply when adding the same folder Name in two Publications and resolve by editing"
	@priority = "5"
	test ResolveDuplicateNameConflictPublicationsByEditing {
		property portal.acceptance = "true";

		JSONPublications.addPublication(publicationName = "Publication Name 1");

		JSONPublications.selectPublication(publicationName = "Publication Name 1");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name ",
			groupName = "Guest");

		JSONPublications.addPublication(publicationName = "Publication Name 2");

		JSONPublications.selectPublication(publicationName = "Publication Name 2");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Guest");

		JSONPublications.selectPublication(publicationName = "Publication Name 1");

		JSONPublications.publishPublication(publicationName = "Publication Name 1");

		Publications.viewPublicationPublished(publicationName = "Publication Name 1");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMFolder.viewCP(dmFolderName = "DM Folder Name");

		JSONPublications.selectPublication(publicationName = "Publication Name 2");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMFolder.viewCP(dmFolderName = "DM Folder Name");

		PublicationsNavigator.gotoPublish(publicationName = "Publication Name 2");

		Publications.viewNeedsManualResolution(
			entryTitle = "DM Folder Name",
			warningMessage = "Duplicate Folder Name: Rename the folder in the publication.");

		PublicationsChanges.gotoEditChanges(
			changeCategory = "Documents Folder",
			changeTitle = "DM Folder Name",
			editInLocation = "Publication Name 2");

		PortletEntry.inputName(name = "DM Folder Name Edit");

		PortletEntry.inputDescription(description = "DM Folder Description Edit");

		Button.clickSave();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#SUCCESS",
			value1 = "No unresolved conflicts, ready to publish.");

		Publications.publishPublication(publicationName = "Publication Name 2");
	}

}