@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Automation ID: LRAC-8890 | Test Summary: Able to change retention period"
	@priority = "4"
	test CanChangeRetentionPeriod {
		property test.name.skip.portal.instance = "DataControlAndPrivacy#CanChangeRetentionPeriod";

		task ("Launch AC and go to Settings") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();
		}

		task ("Go to Data Control And Privacy") {
			ACSettings.goToDataControlAndPrivacy();
		}

		task ("Assert Retetion Period Presence") {
			AssertElementPresent(
				key_nameTableChannels = "Retention Period",
				locator1 = "CommerceEntry#SEARCH_TABLES_CHANNELS");
		}

		task ("Change Retention Period to 7 Months") {
			ACSettings.changeRetentionPeriodTo7Months();
		}

		task ("Assert that Retention Period changed") {
			AssertElementPresent(
				locator1 = "OpenIDConnectLogin#OPENID_CONNECT_DROPDOWN_MENU",
				value1 = "7 Months");
		}
	}

	@description = "Automation ID: LRAC-8119 | Test Summary: Create Access Request"
	@priority = "5"
	test CanCreateAccessRequest {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "DataControlAndPrivacy#CanCreateAccessRequest";

		var userEmail = "dcp1@liferay.com";
		var userName = "dcp1";

		JSONUser.addUser(
			userEmailAddress = "${userEmail}",
			userFirstName = "${userName}",
			userLastName = "${userName}",
			userScreenName = "${userName}");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "${userEmail}");

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();

		ACUtils.launchAC();

		task ("Create Access Request") {
			ACNavigation.goToSettings();

			ACSettings.createRequestLogByEmail(
				email = "${userEmail}",
				jobType = "Access");
		}

		task ("Assert that Access Request was created and is on the list") {
			ACSettings.goToProperties();

			ACSettings.goToDataControlAndPrivacy();

			ACSettings.navigateToRequestOrSuppressedOptions(
				optionName = "Request Log",
				optionValue = "Manage");

			ACSettings.assertRequestLog(
				jobType = "Access",
				key_emailAdress = "${userEmail}",
				searchUser = "${userName}");
		}
	}

	@description = "Automation ID: LRAC-8117 | Test Summary: Create Delete Request"
	@priority = "5"
	test CanCreateDeleteRequest {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "DataControlAndPrivacy#CanCreateDeleteRequest";

		var userEmail = "dcp2@liferay.com";
		var userName = "dcp2";

		JSONUser.addUser(
			userEmailAddress = "${userEmail}",
			userFirstName = "${userName}",
			userLastName = "${userName}",
			userScreenName = "${userName}");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "${userEmail}");

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();

		ACUtils.launchAC();

		task ("Create Delete Request") {
			ACNavigation.goToSettings();

			ACSettings.createRequestLogByEmail(
				email = "${userEmail}",
				jobType = "Delete");
		}

		task ("Assert that Delete Request was created and is on the list") {
			ACSettings.goToProperties();

			ACSettings.goToDataControlAndPrivacy();

			ACSettings.navigateToRequestOrSuppressedOptions(
				optionName = "Request Log",
				optionValue = "Manage");

			ACSettings.assertRequestLog(
				jobType = "Delete",
				key_emailAdress = "${userEmail}",
				searchUser = "${userName}");
		}
	}

	@description = "Automation ID: LRAC-8109 | Test Summary: Create Suppress Request"
	@priority = "5"
	test CanCreateSuppressRequest {
		property analytics.cloud.upstream = "false";
		property test.name.skip.portal.instance = "DataControlAndPrivacy#CanCreateSuppressRequest";

		var userEmail = "dcp3@liferay.com";
		var userName = "dcp3";

		JSONUser.addUser(
			userEmailAddress = "${userEmail}",
			userFirstName = "${userName}",
			userLastName = "${userName}",
			userScreenName = "${userName}");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "${userEmail}");

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();

		ACUtils.launchAC();

		task ("Go to settings and create a suppress request") {
			ACNavigation.goToSettings();

			ACSettings.createRequestLogByEmail(
				email = "${userEmail}",
				jobType = "Suppress");
		}

		task ("Assert that the suppress request was created") {
			ACSettings.goToProperties();

			ACSettings.goToDataControlAndPrivacy();

			ACSettings.navigateToRequestOrSuppressedOptions(
				optionName = "Request Log",
				optionValue = "Manage");

			ACSettings.assertRequestLog(
				jobType = "Suppress",
				key_emailAdress = "${userEmail}",
				searchUser = "${userName}");
		}
	}

	@description = "Automation ID: LRAC-8893 | Test Summary: Able to unsuppress user"
	@ignore = "true"
	@priority = "3"
	test CanUnsuppressUser {

		// AC Refactor: Timing issues may happen on this test case
		// AC Refactor ticket: LRAC-9439

		var userEmail = "dcp4@liferay.com";
		var userName = "dcp4";

		JSONUser.addUser(
			userEmailAddress = "${userEmail}",
			userFirstName = "${userName}",
			userLastName = "${userName}",
			userScreenName = "${userName}");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "${userEmail}");

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();

		ACUtils.launchAC();

		task ("Go to settings and create a suppress request") {
			ACNavigation.goToSettings();

			ACSettings.createRequestLogByEmail(
				email = "${userEmail}",
				jobType = "Suppress");
		}

		task ("Wait for the suppress request be completed") {
			ACSettings.goToDataControlAndPrivacy();

			ACSettings.navigateToRequestOrSuppressedOptions(
				optionName = "Suppressed Users",
				optionValue = "Manage");

			while (IsElementNotPresent(itemName = "${userEmail}", locator1 = "ACSettings#ITEM_ON_LIST") && (maxIterations = "50")) {
				ACUtils.searchBar(searchItem = "${userName}");

				ACUtils.clearSearchBar();
			}
		}

		// Couldn't assert the list due to missing data.

		task ("Unsuppress the user") {
			Button.click(button = "Unsuppress");
		}

		task ("Assert that the user was unsuppressed") {
			ACSettings.createRequestLogByEmail(
				emailAdresses = "${userEmail}",
				jobType = "Access");

			ACSettings.goToDataControlAndPrivacy();

			ACSettings.navigateToRequestOrSuppressedOptions(
				optionName = "Request Log",
				optionValue = "Manage");

			ACSettings.assertRequestLog(
				jobType = "Unsuppress",
				key_emailAdress = "${userEmail}",
				searchUser = "${userName}");

			ACSettings.assertRequestLog(
				jobType = "Access",
				key_emailAdress = "${userEmail}",
				searchUser = "${userName}");
		}
	}

	@description = "Automation ID: LRAC-8892 | Test Summary: Suppressed user appears in Suppressed User List"
	@ignore = "true"
	@priority = "5"
	test SuppressedUserAppearsInSuppressedUserList {

		// AC Refactor: Timing issues may happen on this test case
		// AC Refactor ticket: LRAC-9438

		var userEmail = "dcp5@liferay.com";
		var userName = "dcp5";

		JSONUser.addUser(
			userEmailAddress = "${userEmail}",
			userFirstName = "${userName}",
			userLastName = "${userName}",
			userScreenName = "${userName}");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "${userEmail}");

		var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();

		ACUtils.launchAC();

		task ("Go to settings and create a suppress request") {
			ACNavigation.goToSettings();

			ACSettings.createRequestLogByEmail(
				emailAdresses = "${userEmail}",
				jobType = "Suppress");
		}

		task ("Assert that the user is in the suppressed user list") {
			ACSettings.goToDataControlAndPrivacy();

			ACSettings.navigateToRequestOrSuppressedOptions(
				optionName = "Suppressed Users",
				optionValue = "Manage");

			while (IsElementNotPresent(itemName = "${userEmail}", locator1 = "ACSettings#ITEM_ON_LIST") && (maxIterations = "50")) {
				Refresh();
			}

			// Couldn't assert the list due to missing data.

			ACUtils.assertItemsName(itemList = "${userEmail}");
		}
	}

}