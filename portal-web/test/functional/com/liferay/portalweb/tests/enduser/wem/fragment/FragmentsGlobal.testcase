@component-name = "portal-wcm"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Fragments";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a fragment collection in Global site") {
			JSONFragment.addFragmentCollection(
				groupName = "Global",
				name = "Global Collection Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			JSONFragment.deleteFragmentCollection(
				groupName = "Global",
				name = "Global Collection Name");
		}
	}

	@description = "This is a test for LPS-98501. Copy a global fragment to collection in current site."
	@priority = "4"
	test CopyGlobalFragmentToCollectionInNormalSite {
		task ("Add a fragment in global fragment collection") {
			var newLine = '''
''';

			var htmlSnippet = '''
<${configuration.headingLevel} class="component-heading mb-0 text-break" data-lfr-editable-id="element-text" data-lfr-editable-type="text">
	Heading Example
</${configuration.headingLevel}>
			''';
			var htmlSnippet = StringUtil.regexReplaceAll("${htmlSnippet}", "${newLine}", "");

			var jsonSnippet = '''
{
	"fieldSets": [
		{
			"fields": [
				{
					"dataType": "string",
					"defaultValue": "h1",
					"label": "heading-level",
					"name": "headingLevel",
					"type": "select",
					"typeOptions": {
						"validValues": [
							{
								"value": "h1"
							},
							{
								"value": "h2"
							},
							{
								"value": "h3"
							},
							{
								"value": "h4"
							},
							{
								"value": "h5"
							},
							{
								"value": "h6"
							}
						]
					}
				}
			]
		}
	]
}
			''';
			var jsonSnippet = StringUtil.regexReplaceAll("${jsonSnippet}", "${newLine}", "");

			JSONFragment.addSection(
				collectionName = "Global Collection Name",
				configuration = "${jsonSnippet}",
				fragmentStatus = "Approved",
				groupName = "Global",
				html = "${htmlSnippet}",
				name = "Global Fragment Name");
		}

		task ("Add a fragment collection in normal site") {
			JSONFragment.addFragmentCollection(
				groupName = "Test Site Name",
				name = "Collection Name");
		}

		task ("Navigate to Fragments admin in normal site") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Copy the global fragment to collection in normal site") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Global Collection Name");

			FragmentsAdminNavigator.gotoEntryEllipsisItem(
				entry = "Global Fragment Name",
				item = "Copy To");

			FragmentsAdmin.selectCollection(collectionName = "Collection Name");
		}

		task ("View the copy of global fragment") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			FragmentsAdmin.viewEntryPresent(entry = "Fragment Name (Copy)");
		}
	}

	@description = "This is a test for LPS-100540. The changes of global fragments can be propagated to all pages of a site or sites that use the fragments"
	@priority = "5"
	@uitest
	test PropagateGlobalFragmentChanges {
		property portal.acceptance = "true";

		task ("Add a fragment in global fragment collection") {
			var newLine = '''
''';

			var htmlSnippet = '''
<${configuration.headingLevel} class="component-global-fragment-name mb-0 text-break" data-lfr-editable-id="element-text" data-lfr-editable-type="text">
	Heading Example
</${configuration.headingLevel}>
			''';
			var htmlSnippet = StringUtil.regexReplaceAll("${htmlSnippet}", "${newLine}", "");

			var jsonSnippet = '''
{
	"fieldSets": [
		{
			"fields": [
				{
					"dataType": "string",
					"defaultValue": "h1",
					"label": "heading-level",
					"name": "headingLevel",
					"type": "select",
					"typeOptions": {
						"validValues": [
							{
								"value": "h1"
							},
							{
								"value": "h2"
							},
							{
								"value": "h3"
							},
							{
								"value": "h4"
							},
							{
								"value": "h5"
							},
							{
								"value": "h6"
							}
						]
					}
				}
			]
		}
	]
}
			''';
			var jsonSnippet = StringUtil.regexReplaceAll("${jsonSnippet}", "${newLine}", "");

			JSONFragment.addSection(
				collectionName = "Global Collection Name",
				configuration = "${jsonSnippet}",
				fragmentStatus = "Approved",
				groupName = "Global",
				html = "${htmlSnippet}",
				name = "Global Fragment Name");
		}

		task ("Add a new site") {
			JSONGroup.addGroup(groupName = "Site Name");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Add a global fragment to page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Site Name");

			PageEditor.addFragment(
				collectionName = "Global Collection Name",
				fragmentName = "Global Fragment Name");

			PageEditor.viewFragmentEditableText(
				editableText = "Heading Example",
				fragmentName = "Global Fragment Name",
				id = "element-text");

			PageEditor.clickPublish();
		}

		task ("Edit the global fragment") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "global");

			FragmentsAdminNavigator.gotoEntryEllipsisItem(
				entry = "Global Fragment Name",
				item = "Edit");

			FragmentsEditor.typeFileContent(fileName = "fragment_button.html");

			FragmentsEditor.waitForAutoSave();

			PortletEntry.publish();
		}

		task ("Propagate the changes") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "global");

			FragmentsAdminNavigator.gotoEntryEllipsisItem(
				entry = "Global Fragment Name",
				item = "View Site Usages");

			FragmentsAdmin.propagateChanges(itemNameList = "Site Name");
		}

		task ("View the changes propagated to normal site") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = "Site Name");

			for (var button : list "Submit,Cancel") {
				Button.viewPresent(button = "${button}");
			}
		}

		task ("Delete the new site") {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "This is a test for LPS-98501. View global fragment resource is copied to collection in current site."
	@priority = "4"
	test ViewGlobalFragmentResourceCopiedToCollectionInNormalSite {
		task ("Upload an image as fragment resource") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "global");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Global Collection Name");

			Navigator.gotoNavItem(navItem = "Resources");

			FragmentsAdmin.addResource(resourceFile = "Document_1.jpg");
		}

		task ("Add a fragment in global fragment collection") {
			var newLine = '''
''';

			var htmlSnippet = '''
<div class="component-image overflow-hidden">
	<img
		alt="Responsive Image"
		class="${configuration.imageSize}"
		data-lfr-editable-id="image-square"
		data-lfr-editable-type="image"
		src="[resources:Document_1.jpg]"
	/>
</div>
			''';
			var htmlSnippet = StringUtil.regexReplaceAll("${htmlSnippet}", "${newLine}", "");

			var jsonSnippet = '''
{
	"fieldSets": [
		{
			"configurationRole": "style",
			"fields": [
				{
					"dataType": "string",
					"defaultValue": "w-100",
					"label": "image-size",
					"name": "imageSize",
					"type": "select",
					"typeOptions": {
						"validValues": [
							{
								"label": "fit",
								"value": "w-100"
							},
							{
								"label": "original-size",
								"value": "w-0"
							}
						]
					}
				}
			]
		}
	]
}
			''';
			var jsonSnippet = StringUtil.regexReplaceAll("${jsonSnippet}", "${newLine}", "");

			JSONFragment.addSection(
				collectionName = "Global Collection Name",
				configuration = "${jsonSnippet}",
				fragmentStatus = "Approved",
				groupName = "Global",
				html = "${htmlSnippet}",
				name = "Global Fragment Name");
		}

		task ("Add a fragment collection in normal site") {
			JSONFragment.addFragmentCollection(
				groupName = "Test Site Name",
				name = "Collection Name");
		}

		task ("Navigate to Fragments admin in normal site") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");
		}

		task ("Copy the global fragment to collection in normal site") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Global Collection Name");

			FragmentsAdminNavigator.gotoEntryEllipsisItem(
				entry = "Global Fragment Name",
				item = "Copy To");

			FragmentsAdmin.selectCollection(collectionName = "Collection Name");
		}

		task ("View the copy of global fragment resource") {
			FragmentsAdminNavigator.gotoCollection(collectionName = "Collection Name");

			Navigator.gotoNavItem(navItem = "Resources");

			FragmentsAdmin.viewEntryPresent(entry = "Document_1.jpg");
		}
	}

	@description = "This is a test for LPS-101230 and LPS-100540. Global fragments are visible in Fragments admin. The View Site Usages action is unavailable if fragment is unused."
	@priority = "5"
	@uitest
	test ViewGlobalFragments {
		property portal.acceptance = "true";

		task ("Add the first global fragment") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "global");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Global Collection Name");

			FragmentsAdmin.addFragment(fragmentName = "Global Fragment Name 1");

			FragmentsEditor.typeFileContent(fileName = "fragment_button.html");

			FragmentsEditor.waitForAutoSave();

			FragmentsEditor.typeFileContent(fileName = "fragment_button.css");

			FragmentsEditor.waitForAutoSave();

			FragmentsEditor.typeFileContent(fileName = "fragment_button.js");

			FragmentsEditor.waitForAutoSave();

			PortletEntry.publish();
		}

		task ("View the fragment shown in collection") {
			FragmentsAdmin.viewEntryPresent(entry = "Global Fragment Name 1");
		}

		task ("Assert the View Site Usages action not shown") {
			LexiconCard.viewMenuItemNotPresent(
				card = "Global Fragment Name 1",
				item = "View Site Usages");
		}

		task ("Add the second global fragment via JSON") {
			JSONFragment.addSection(
				collectionName = "Global Collection Name",
				fragmentStatus = "Approved",
				groupName = "Global",
				name = "Global Fragment Name 2");
		}

		task ("View both fragments shown in normal site") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "test-site-name");

			FragmentsAdminNavigator.gotoCollection(collectionName = "Global Collection Name");

			for (var n : list "1,2") {
				FragmentsAdmin.viewEntryPresent(entry = "Global Fragment Name ${n}");
			}
		}
	}

	@description = "This is a test for LPS-100540. The View Site Usages action of global fragments shows all the usage"
	@priority = "5"
	@uitest
	test ViewGlobalFragmentsSiteUsages {
		property portal.acceptance = "true";

		task ("Add two global fragments") {
			for (var n : list "1,2") {
				JSONFragment.addSection(
					collectionName = "Global Collection Name",
					fragmentStatus = "Approved",
					groupName = "Global",
					name = "Global Fragment Name ${n}");
			}
		}

		task ("Add two global fragments to the first content page in the first normal site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Global Collection Name",
				fragmentName = "Global Fragment Name 1");

			PageEditor.addFragment(
				collectionName = "Global Collection Name",
				fragmentName = "Global Fragment Name 2",
				targetFragmentName = "Global Fragment Name 1");

			PageEditor.clickPublish();
		}

		task ("Add two global fragments to the second content page in the first normal site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Content Page Name 2",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name 2",
				siteName = "Test Site Name");

			PageEditor.addFragment(
				collectionName = "Global Collection Name",
				fragmentName = "Global Fragment Name 1");

			PageEditor.addFragment(
				collectionName = "Global Collection Name",
				fragmentName = "Global Fragment Name 2",
				targetFragmentName = "Global Fragment Name 1");

			PageEditor.clickPublish();
		}

		task ("Add two global fragments to a content page in the second normal site") {
			JSONGroup.addGroup(groupName = "Test Site Name 2");

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name 2",
				layoutName = "Content Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Content Page Name",
				siteName = "Test Site Name 2");

			PageEditor.addFragment(
				collectionName = "Global Collection Name",
				fragmentName = "Global Fragment Name 1");

			PageEditor.clickPublish();
		}

		task ("View site usages of the first global fragment") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "global");

			FragmentsAdminNavigator.gotoEntryEllipsisItem(
				entry = "Global Fragment Name 1",
				item = "View Site Usages");

			FragmentsAdmin.viewSiteUsages(
				siteName = "Test Site Name",
				usages = "4");

			FragmentsAdmin.viewSiteUsages(
				siteName = "Test Site Name 2",
				usages = "2");
		}

		task ("View site usages of the second global fragment") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "global");

			FragmentsAdminNavigator.gotoEntryEllipsisItem(
				entry = "Global Fragment Name 2",
				item = "View Site Usages");

			FragmentsAdmin.viewSiteUsages(
				siteName = "Test Site Name",
				usages = "4");

			LexiconTable.viewTableEntryNotPresent(tableEntry = "Test Site Name 2");
		}
	}

}