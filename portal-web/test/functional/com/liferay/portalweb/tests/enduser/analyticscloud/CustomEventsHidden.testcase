@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Set up instance and sign in DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();
		}

		task ("Add a new site with a public widget page") {
			ACUtils.addSiteAndPage();
		}

		task ("Add a Web Content Display to page and display the custom event") {
			ACCustomEvents.createWCWithCustomEventAndAddToPage();
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = "ac@liferay.com",
				userFirstName = "ac",
				userLastName = "ac",
				userScreenName = "ac");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "ac@liferay.com");
		}

		task ("Connect the DXP to AC") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Sign in as new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "ac@liferay.com",
				userLoginFullName = "ac ac");
		}

		task ("View the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		JSONUser.tearDownNonAdminUsers();

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: LRAC-7943 | Automation ID: LRAC-10223 | Test Summary: Able to access hidden event"
	@priority = "4"
	test CanAccessHiddenEvent {
		property test.name.skip.portal.instance = "CustomEventsHiden#CanAccessHiddenEvent";

		var defaultEventName = "assetDepthReached";
		var attributeList = "assetId,canonicalUrl,category,depth,pageDescription,pageKeywords,pageTitle,referrer,sessionId,title,url";

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to default events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Default Events");
		}

		task ("Check that the default event was hidden") {
			ACDefinitions.viewHiddenEvents(customEventNameList = "${defaultEventName}");
		}

		task ("Navigation to assetDepthReached") {
			ACNavigation.openItem(itemName = "${defaultEventName}");
		}

		task ("Check the attribute appears") {
			ACCustomEvents.viewDataAttribute(attributeValueList = "${defaultEventName}");
		}
	}

	@description = "Feature ID: LRAC-7865 | Automation ID: LRAC-10232 | Test Summary: Hide a default event and hide a custom event"
	@priority = "5"
	test CanHideDefaultAndCustomEvent {
		property test.name.skip.portal.instance = "CustomEventsHiden#CanHideDefaultAndCustomEvent";

		var defaultEventName = "assetDownloaded";
		var defaultEventNameList = "${defaultEventName},assetClicked,assetSubmitted";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to default events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Default Events");
		}

		task ("Hide default event") {
			ACCustomEvents.hideCustomEvent(customEventName = "${defaultEventName}");
		}

		task ("Check that the default event was hidden") {
			ACDefinitions.viewHiddenEvents(customEventNameList = "${defaultEventName}");
		}

		task ("Hide all default events") {
			ACDefinitions.hideAllEvents();
		}

		task ("Check that the all default events were hidden") {
			ACDefinitions.viewHiddenEvents(customEventNameList = "${defaultEventNameList}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Hide custom event") {
			ACUtils.searchBar(searchItem = "${customEventName}");

			ACCustomEvents.hideCustomEvent(customEventName = "${customEventName}");
		}

		task ("Check that the custom event was hidden") {
			ACDefinitions.viewHiddenEvents(customEventNameList = "${customEventName}");
		}
	}

	@description = "Feature ID: LRAC-7865 | Automation ID: LRAC-10235 | Test Summary: Search for a hidden event "
	@priority = "3"
	test CanSearchForAHiddenEvent {
		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Hide custom event") {
			ACUtils.searchBar(searchItem = "${customEventName}");

			ACCustomEvents.hideCustomEvent(customEventName = "${customEventName}");
		}

		task ("Check that the custom event was hidden") {
			ACUtils.searchBar(searchItem = "${customEventName}");

			ACDefinitions.viewHiddenEvents(customEventNameList = "${customEventName}");
		}
	}

	@description = "Feature ID: LRAC-7865 | Automation ID: LRAC-10233 | Test Summary: Unhide a default event and unhide a custom event"
	@priority = "5"
	test CanUnhideDefaultAndCustomEvent {
		var defaultEventName = "assetDepthReached";
		var defaultEventNameList = "${defaultEventName},assetClicked,assetSubmitted";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to default events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Default Events");
		}

		task ("Unhide default event") {
			ACDefinitions.unhideEvent(customEventName = "${defaultEventName}");
		}

		task ("Check that the default event was hidden") {
			ACDefinitions.viewUnhideEvent(customEventNameList = "${defaultEventName}");
		}

		task ("Unhide all default events") {
			ACDefinitions.hideAllEvents();
		}

		task ("Unhide all default events") {
			ACDefinitions.unhideAllEvents();
		}

		task ("Check that the all default events were hidden") {
			ACDefinitions.viewUnhideEvent(customEventNameList = "${defaultEventNameList}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Hide custom event") {
			ACCustomEvents.hideCustomEvent(customEventName = "${customEventName}");
		}

		task ("Unhide custom event") {
			ACUtils.searchBar(searchItem = "${customEventName}");

			ACDefinitions.unhideEvent(customEventName = "${customEventName}");
		}

		task ("Check that the custom event was unhide") {
			ACDefinitions.viewUnhideEvent(customEventNameList = "${customEventName}");
		}
	}

	@description = "Feature ID: LRAC-7865 | Automation ID: LRAC-10228 | Test Summary: Hidden default event and custom event should not be visible on the Event Analysis list"
	@priority = "5"
	test CheckDefaultAndCustomEventIsNotVisibleOnEventAnalysisList {
		var defaultEventName = "blogViewed";

		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC and go to event analysis") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");

			ACNavigation.goToEventAnalysis();
		}

		task ("Click to add the default and custom event and check if it is present") {
			ACEventAnalysis.clickToAddEventButton();

			ACNavigation.switchTabInCard(tabName = "Default");

			ACEventAnalysis.searchEventAnalysis(searchItem = "${defaultEventName}");

			ACEventAnalysis.viewEventAnalysisList(eventList = "${defaultEventName}");

			ACNavigation.switchTabInCard(tabName = "Custom");

			ACEventAnalysis.searchEventAnalysis(searchItem = "${customEventName}");

			ACEventAnalysis.viewEventAnalysisList(eventList = "${customEventName}");
		}

		task ("Navigation to default events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Default Events");
		}

		task ("Hide default event") {
			ACCustomEvents.hideCustomEvent(customEventName = "${defaultEventName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Hide custom event") {
			ACCustomEvents.hideCustomEvent(customEventName = "${customEventName}");
		}

		task ("Navigation to event analysis") {
			ACNavigation.exitSettings();

			ACNavigation.goToEventAnalysis();
		}

		task ("Click to add the default and custom event and check if it is not present") {
			ACEventAnalysis.clickToAddEventButton();

			ACNavigation.switchTabInCard(tabName = "Default");

			ACEventAnalysis.searchEventAnalysis(searchItem = "${defaultEventName}");

			ACEventAnalysis.viewEventAnalysisListNotPresent(eventList = "${defaultEventName}");

			ACNavigation.switchTabInCard(tabName = "Custom");

			ACEventAnalysis.searchEventAnalysis(searchItem = "${customEventName}");

			ACEventAnalysis.viewEventAnalysisListNotPresent(eventList = "${customEventName}");
		}
	}

	@description = "Feature ID: LRAC-7865 | Automation ID: LRAC-10234 | Test Summary: Non-admin cannot hide events"
	@priority = "5"
	test NonAdminUserCannotHideEvents {
		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Login as a non-admin user and switch the property in AC") {
			var analyticsCloudURL = PropsUtil.get("analytics.cloud.url");

			Open(locator1 = "${analyticsCloudURL}");

			if (IsElementNotPresent(locator1 = "ACLogin#EMAIL_LOGIN_FIELD")) {
				ACWorkspace.signOut();
			}

			ACUtils.launchAC(emailAddress = "corbin.murakami@faro.io");

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Assert hidden event icon is not present") {
			var key_nameList = "${customEventName}";

			if (IsElementNotPresent(locator1 = "ACUtils#NAME_LIST")) {
				ACUtils.searchBar(searchItem = "${customEventName}");
			}

			MouseOver(locator1 = "ACUtils#NAME_LIST");

			AssertElementNotPresent(
				key_actionButton = "Hide",
				locator1 = "ACDefinitions#HIDE_UNHIDE_EVENT_BUTTON");

			AssertElementNotPresent(locator1 = "ACSettings#SELECT_ALL_CHECKBOX");
		}
	}

	@description = "Feature ID: LRAC-7865 | Automation ID: LRAC-10227 | Test Summary: Hidden custom event should not be visible on the Segment > Event criteria list"
	@priority = "5"
	test ViewIfCustomEventIsNotVisibleOnSegmentEventCriteriaList {
		task ("Fill fields and create custom event") {
			var customEventName = ACCustomEvents.generateCustomEventName();

			ACCustomEvents.createCustomEvent(
				customEventName = "${customEventName}",
				timeToSendCustomEvent = "1");
		}

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to custom events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Custom Events");
		}

		task ("Hide custom event") {
			ACUtils.searchBar(searchItem = "${customEventName}");

			ACCustomEvents.hideCustomEvent(customEventName = "${customEventName}");
		}

		task ("Navigation to segments") {
			ACNavigation.exitSettings();

			ACNavigation.goToSegments();
		}

		task ("Create a new dynamic segment and check that the custom event that has been hidden does not appear") {
			ACSegments.createDynamicSegment();

			ACUtils.searchBar(searchItem = "${customEventName}");

			AssertElementPresent(
				key_segmentField = "No results were found.",
				locator1 = "ACSegments#SEGMENT_CRITERION_ITEM");
		}
	}

	@description = "Feature ID: LRAC-7943 | Automation ID: LRAC-10222 | Test Summary: Check if some default events are set as hidden"
	@priority = "5"
	test ViewIfDefaultEventsAreHidden {
		property test.name.skip.portal.instance = "CustomEventsHiden#ViewIfDefaultEventsAreHidden";

		var defaultEventNameList = "assetDepthReached,blogDepthReached,fieldBlurred,fieldFocused,pageDepthReached,pageLoaded,pageUnloaded,posted,shared,tabBlurred,tabFocused,VOTE";

		task ("Close sessions") {
			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch the property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = "${assignedPropertyName}");
		}

		task ("Navigation to default events tab") {
			ACNavigation.goToSettings();

			ACSettings.goToDefinitions();

			ACSettings.goToEvents();

			ACNavigation.openItem(itemName = "Default Events");
		}

		task ("Change the pagination to "75"") {
			ACUtils.changePagination(itemsPerPage = "75");
		}

		task ("Assert certain events hidden by default") {
			ACDefinitions.viewHiddenEvents(customEventNameList = "${defaultEventNameList}");
		}
	}

}