@component-name = "portal-search"
definition {

	property portal.release = "true";
	property portal.suite.search.engine = "elasticsearch7";
	property portal.upstream = "true";
	property testray.main.component.name = "Web Search";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			BlogsEntry.tearDownCP();

			MessageboardsThread.tearDownCP();

			JSONUser.tearDownNonAdminUsers();

			WebContent.tearDownCP();

			DMDocument.tearDownCP();

			WikiPage.tearDownCP();

			Vocabulary.tearDownCP();

			Tag.tearDownCP(site = "Guest");

			PagesAdmin.tearDownCP();
		}
	}

	@priority = "4"
	test AssertBasicFacetSelection {
		var webContentserviceContext1 = '''{"assetTagNames": ["fruit"]}''';

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content 1",
			groupName = "Guest",
			serviceContext = "${webContentserviceContext1}",
			title = "apple");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		Blogs.addEntry(
			entryContent = "Blog Entry Content",
			entryTitle = "apple");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		Portlet.gotoPortletOptions(
			portletName = "Search Options",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		AssertNotChecked(
			checkboxName = "Basic Facet Selection",
			locator1 = "Checkbox#ANY_CHECKBOX");

		IFrame.closeFrame();

		AssertElementPresent(
			checkboxName = "fruit",
			locator1 = "Checkbox#ANY_CHECKBOX");

		SearchFacetPortlet.checkFacet(facetValueName = "Blogs Entry");

		AssertElementNotPresent(
			checkboxName = "fruit",
			locator1 = "Checkbox#ANY_CHECKBOX");

		Refresh();

		FormFields.viewCheckboxChecked(fieldName = "Blogs Entry");

		AssertElementNotPresent(
			checkboxName = "fruit",
			locator1 = "Checkbox#ANY_CHECKBOX");

		SearchFacetPortlet.uncheckFacet(facetValueName = "Blogs Entry");

		AssertElementPresent(
			checkboxName = "fruit",
			locator1 = "Checkbox#ANY_CHECKBOX");

		SearchPortlets.configureSearchOptions(basicFacetSelection = "true");

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		AssertElementPresent(
			checkboxName = "fruit",
			locator1 = "Checkbox#ANY_CHECKBOX");

		SearchFacetPortlet.checkFacet(facetValueName = "Blogs Entry");

		AssertElementPresent(
			checkboxName = "fruit",
			locator1 = "Checkbox#ANY_CHECKBOX");

		SearchFacetPortlet.checkFacet(facetValueName = "fruit");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "apple");

		Refresh();

		FormFields.viewCheckboxChecked(fieldName = "Blogs Entry");

		FormFields.viewCheckboxChecked(fieldName = "fruit");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "apple");
	}

	@description = "This is a use case for LPS-138720."
	@priority = "4"
	test AssertCustomFacetNoXSS {
		Search.openSearchPage();

		SearchPortlets.addWidgets(searchPortletList = "Custom Facet");

		SearchFacetPortlet.configureCustomFacet(
			aggregationField = "title_sortable",
			customParameterName = "title");

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/search?title=test1%22()%26%25%3Cacx%3E%3CScRiPt%20%3Ealert(%27XSS%27)%3C%2FScRiPt%3E");

		AssertAlertNotPresent();
	}

	@description = "This is a use case for LPS-92008."
	@priority = "3"
	test AssertGuestCannotSeeEmptySearchWidgets {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Search Page");

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/search-page");

		SearchPortlets.addWidgets(searchPortletList = "Category Facet,Custom Facet,Custom Filter,Folder Facet,Low Level Search Options,Modified Facet,Search Insights,Search Options,Search Results,Site Facet,Sort,Suggestions,Tag Facet,Type Facet,User Facet,Search Bar");

		var testRunEnvironment = PropsUtil.get("test.run.environment");

		if ("${testRunEnvironment}" == "EE") {
			Portlet._clickAddPortlet(portletName = "Similar Results");

			AssertElementPresent(
				key_portletName = "Similar Results",
				locator1 = "Portlet#LOADED");

			AssertElementPresent(
				key_portletName = "Similar Results",
				locator1 = "Home#PORTLET");
		}

		User.logoutPG();

		Search.openSearchPage();

		for (var portletName : list "Category Facet,Custom Facet,Custom Filter,Folder Facet,Low Level Search Options,Modified Facet,Search Insights,Search Options,Search Results,Similar Results,Site Facet,Sort,Suggestions,Tag Facet,Type Facet,User Facet") {
			Portlet.viewNoSpecificPG(portletName = "${portletName}");
		}

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/search-page");

		for (var portletName : list "Category Facet,Custom Facet,Custom Filter,Folder Facet,Low Level Search Options,Modified Facet,Search Insights,Search Options,Search Results,Similar Results,Site Facet,Sort,Suggestions,Tag Facet,Type Facet,User Facet") {
			Portlet.viewNoSpecificPG(portletName = "${portletName}");
		}
	}

	@description = "This is a use case for LPS-147397."
	@priority = "4"
	test AssertModifiedFacetNoXSS {
		Search.openSearchPage();

		Portlet.gotoPortletOptions(
			portletName = "Modified Facet",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		var script = '''test"><script>alert(123);</script>''';

		Type(
			fieldValue = "past-hour",
			locator1 = "Search#MODIFIED_FACET_CONFIG_SPECIFIC_FIELD",
			value1 = "${script}");

		PortletEntry.save();

		IFrame.closeFrame();

		SearchPortlets.searchEmbedded(searchTerm = "test");

		AssertAlertNotPresent();
	}

	@priority = "4"
	test AssertNonAdminsCannotAddCertainWidgets {
		JSONRole.addRegularRole(
			roleKey = "Can Add Widgets",
			roleTitle = "Can Add Widgets");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "MANAGE_LAYOUTS",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Can Add Widgets");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONRole.assignRoleToUser(
			roleTitle = "Can Add Widgets",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		UserBar.gotoDropdownItem(dropdownItem = "My Profile");

		Portlet.viewCannotAddPG(portletName = "Low Level Search Options");

		Refresh();

		Portlet.viewCannotAddPG(portletName = "Search Insights");
	}

	@description = "This is a use case for LPS-130227."
	@priority = "4"
	test AssertPaginationURLforHTTPS {
		property custom.properties = "web.server.host=localhost${line.separator}redirect.url.security.mode=domain${line.separator}redirect.url.domains.allowed=${line.separator}web.server.https.port=8443${line.separator}web.server.protocol=https";
		property portal.ssl.enabled = "true";
		property search.environment.suite.exclude = "true";
		property test.name.skip.portal.instance = "Search#AssertPaginationURLforHTTPS";

		var portalURL = PropsUtil.get("portal.url");

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			type = "content");

		Navigator.openSpecificURL(url = "https://localhost:8443/web/test-site-name/test-page-name?p_l_mode=edit");

		PageEditor.addWidget(portletName = "Search Options");

		SearchPortlets.configureSearchOptions(allowEmptySearches = "true");

		PageEditor.addWidget(
			collectionName = "Search",
			portletName = "Search Results",
			targetFragmentName = "Search Options");

		PageEditor.clickPublish();

		for (var count : list "1,2,3,4,5") {
			JSONWebcontent.addWebContent(
				content = "WC Content ${count}",
				groupName = "Test Site Name",
				title = "WC Title ${count}");
		}

		Navigator.openSpecificURL(url = "https://localhost:8443/web/test-site-name/test-page-name");

		Pagination.changePagination(itemsPerPage = "4");

		Click(locator1 = "Pagination#NEXT_LINK");

		AssertElementPresent(locator1 = "Pagination#CURRENT_PAGE_SELECT");

		var currentURL = selenium.getCurrentUrl();

		echo("Current URL: ${currentURL} ");

		if (!(contains("${currentURL}", "https://")) || !(contains("${currentURL}", "start=2"))) {
			fail("URL of second search results page should contain HTTPS.");
		}
	}

	@description = "This is a use case for LPS-135288."
	@priority = "4"
	test AssertSearchTagURLNoXSS {
		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/search?tag=test%22%3E%3Csvg/onload=alert(document.domain)%3E");

		AssertAlertNotPresent();
	}

	@description = "This is a use case for LPS-89561."
	@priority = "4"
	test AssertSearchURLWhenModifyingPagination {
		property custom.properties = "search.container.page.default.delta=10";

		for (var count : list "1,2,3,4,5,6,7,8,9,10,11") {
			JSONWebcontent.addWebContent(
				content = "WC Content ${count}",
				groupName = "Guest",
				title = "WC Title ${count}");
		}

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		SearchResultPortlet.paginateAndViewSearchResults(
			searchAssetTitle = "WC Title 11",
			searchAssetType = "Web Content Article",
			searchTerm = "WC Title");

		Pagination.changePagination(itemsPerPage = "4");

		var currentURL = selenium.getCurrentUrl();

		echo("Current URL: ${currentURL} ");

		if (!(contains("${currentURL}", "delta=4")) || contains("${currentURL}", "start")) {
			fail("URL should preserve delta, but not contain start.");
		}

		Click(locator1 = "Pagination#NEXT_LINK");

		AssertElementPresent(locator1 = "Pagination#CURRENT_PAGE_SELECT");

		var currentURL = selenium.getCurrentUrl();

		echo("Current URL: ${currentURL} ");

		if (!(contains("${currentURL}", "delta=4")) || !(contains("${currentURL}", "start=2"))) {
			fail("URL should preserve delta and add start.");
		}

		Click(locator1 = "Pagination#NEXT_LINK");

		AssertElementPresent(locator1 = "Pagination#CURRENT_PAGE_SELECT");

		var currentURL = selenium.getCurrentUrl();

		echo("Current URL: ${currentURL} ");

		if (!(contains("${currentURL}", "delta=4")) && !(contains("${currentURL}", "start=3"))) {
			fail("URL should preserve delta and modify start.");
		}

		Pagination.changePagination(itemsPerPage = "8");

		var currentURL = selenium.getCurrentUrl();

		echo("Current URL: ${currentURL} ");

		if (!(contains("${currentURL}", "delta")) && !(contains("${currentURL}", "start"))) {
			fail("Delta and start should be removed from URL.");
		}

		Click(locator1 = "Pagination#NEXT_LINK");

		AssertElementPresent(locator1 = "Pagination#CURRENT_PAGE_SELECT");

		var currentURL = selenium.getCurrentUrl();

		echo("Current URL: ${currentURL} ");

		if (!(contains("${currentURL}", "delta")) && contains("${currentURL}", "start=2")) {
			fail("URL should preserve abscence of delta and start should be added.");
		}

		Click(locator1 = "Pagination#PREVIOUS_LINK");

		AssertElementPresent(locator1 = "Pagination#CURRENT_PAGE_SELECT");

		var currentURL = selenium.getCurrentUrl();

		echo("Current URL: ${currentURL} ");

		if (!(contains("${currentURL}", "delta")) && contains("${currentURL}", "start=1")) {
			fail("URL should preserve abscence of delta and modify start.");
		}
	}

	@description = "This is a use case for LPS-152993."
	@priority = "4"
	test AssertSortWidgetNoXSS {
		Search.openSearchPage();

		SearchPortlets.addWidgets(searchPortletList = "Sort");

		Portlet.gotoPortletOptions(
			portletName = "Sort",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		var script = '''test"><script>alert(123);</script>''';

		Type(
			key_fieldLabel = "Label",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${script}");

		PortletEntry.save();

		IFrame.closeFrame();

		Refresh();

		AssertAlertNotPresent();
	}

	@description = "This is a use case for LPS-95670."
	@priority = "4"
	test AssertSuggestionsCannotOfferInvalidWordsAsSuggestion {
		property custom.properties = "locales.enabled=de_DE,en_US${line.separator}locales=de_DE,en_US${line.separator}index.search.spell.checker.dictionary[de_DE]=spellchecker/dictionary_de_DE.txt${line.separator}index.search.spell.checker.supported.locales=en_US,es_ES,de_DE";
		property index.search.spell.checker.enabled = "true";
		property search.environment.suite.exclude = "true";
		property test.name.skip.portal.instance = "Search#AssertSuggestionsCannotOfferInvalidWordsAsSuggestion";

		JSONWebcontent.addBasicWebContentLocalized(
			contentMap = "en_US:WC Content,de_DE:ächten angreifen anmarschieren",
			groupName = "Guest",
			titleMap = "en_US:WC Title,de_DE:WC Titel");

		Search.openSearchPage();

		SearchPortlets.addWidgets(searchPortletList = "Suggestions");

		SearchPortlets.gotoConfigureSuggestionsOptions();

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		FormFields.enableCheckbox(fieldName = "spellCheckSuggestionEnabled");

		PortletEntry.save();

		IFrame.closeFrame();

		SearchAdministration.executeReindex(action = "Reindex spell-check dictionaries.");

		AssertConsoleTextPresent(value1 = "Finished indexing dictionary for spellchecker/dictionary_de_DE.txt");

		Navigator.openURL();

		ContentPages.gotoPageEditor();

		PageEditor.addWidget(
			portletName = "Language Selector",
			targetFragmentName = "Container");

		PageEditor.clickPublish();

		LanguagePortlet.selectLanguagePG(
			locale = "de-DE",
			textIcon = "deutsch-Deutschland");

		for (var searchTerm : list "ächten,angreifen,anmarschieren") {
			SearchPortlets.searchEmbedded(searchTerm = "${searchTerm}");

			SearchResultPortlet.viewSearchResults(
				searchAssetTitle = "WC Titel",
				searchAssetType = "Webcontent, Artikel",
				searchTerm = "${searchTerm}");

			AssertElementNotPresent(locator1 = "Search#SEARCH_SUGGESTED_SPELLING");
		}
	}

	@description = "This is a use case for LPS-151026."
	@priority = "3"
	test CanHighlightResultsAndDisableHighlighting {
		JSONWebcontent.addWebContent(
			content = "",
			groupName = "Guest",
			title = "WC Title");

		Search.openSearchPage();

		Portlet.gotoPortletOptions(
			portletName = "Search Results",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		AssertChecked(
			checkboxName = "Enable Highlighting",
			locator1 = "Checkbox#ANY_CHECKBOX");

		IFrame.closeFrame();

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		AssertCssValue(
			key_searchAssetTitle = "WC",
			locator1 = "SearchResults#ASSET_ENTRY_TABLE_TITLE_SPECIFIC_HIGHLIGHT",
			locator2 = "background-color",
			value1 = "rgba(255, 255, 204, 1)");

		AssertCssValue(
			key_searchAssetTitle = "Title",
			locator1 = "SearchResults#ASSET_ENTRY_TABLE_TITLE_SPECIFIC_HIGHLIGHT",
			locator2 = "background-color",
			value1 = "rgba(255, 255, 204, 1)");

		SearchResultPortlet.configureSearchResults(disableHighlighting = "true");

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		AssertElementNotPresent(
			key_searchAssetTitle = "WC",
			locator1 = "SearchResults#ASSET_ENTRY_TABLE_TITLE_SPECIFIC_HIGHLIGHT");

		AssertElementNotPresent(
			key_searchAssetTitle = "Title",
			locator1 = "SearchResults#ASSET_ENTRY_TABLE_TITLE_SPECIFIC_HIGHLIGHT");
	}

	@priority = "4"
	test CannotViewTermsOfUseWhenEnterpriseSearchIsDisabled {
		property custom.properties = "enterprise.product.enterprise.search.enabled=false${line.separator}enterprise.product.notification.enabled=true";
		property test.run.environment = "EE";

		SelectFrame(value1 = "relative=top");

		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "Terms of Use");

		AssertTextNotEquals.assertNotPartialText(
			locator1 = "Modal#BODY",
			value1 = "Use of Liferay Enterprise Search (LES) apps and features is not covered by Liferay Support and other subscription benefits without an active LES add-on subscription. If you do not want to use or have access to LES, access can be disabled completely by following these steps");

		Click(locator1 = "Button#DONE");

		AssertElementNotPresent(locator1 = "Modal#MODAL");
	}

	@priority = "4"
	test CanViewTermsOfUseWhenEnterpriseSearchIsEnabled {
		property custom.properties = "enterprise.product.notification.enabled=true";
		property test.run.environment = "EE";

		SelectFrame(value1 = "relative=top");

		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "Terms of Use");

		AssertTextEquals.assertPartialText(
			locator1 = "Modal#BODY",
			value1 = "Use of Liferay Enterprise Search (LES) apps and features is not covered by Liferay Support and other subscription benefits without an active LES add-on subscription. If you do not want to use or have access to LES, access can be disabled completely by following these steps");

		Click(locator1 = "Button#DONE");

		AssertElementNotPresent(locator1 = "Modal#MODAL");
	}

	@priority = "4"
	test DisableEnterpriseSearch {
		property license.required = "true";
		property portal.suite.search.engine = "disable";
		property portal.upstream = "false";
		property test.name.skip.portal.instance = "Search#DisableEnterpriseSearch";
		property test.run.environment = "EE";

		SystemSettings.openToConfigInSystemSettings(portletId = "com.liferay.portal.search.configuration.DefaultKeywordQueryConfiguration");

		for (var configurationName : list "Cross-Cluster Replication,Elasticsearch Monitoring,Learning to Rank") {
			AssertElementPresent(
				key_configurationName = "${configurationName}",
				key_configurationScope = "System Scope",
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
		}

		Portlet.shutdownServer();

		AntCommand(
			locator1 = "build-test.xml",
			value1 = "portal-ext-properties-update -Dadd.new.properties=true -Dupdate.properties=enterprise.product.enterprise.search.enabled=false");

		Portlet.startServer(deleteLiferayHome = "false");

		SystemSettings.openToConfigInSystemSettings(portletId = "com.liferay.portal.search.configuration.DefaultKeywordQueryConfiguration");

		for (var configurationName : list "Cross-Cluster Replication,Elasticsearch Monitoring,Learning to Rank") {
			AssertElementNotPresent(
				key_configurationName = "${configurationName}",
				key_configurationScope = "System Scope",
				locator1 = "SystemSettings#SCOPED_CONFIGURATION_NAME");
		}
	}

	@description = "This is a use case for LPS-140643."
	@priority = "4"
	test FederatedSearchPopulatesWidgetsWithRespectiveKey {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Federated Search Page");

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/federated-search-page");

		for (var column : list "1,2") {
			JSONLayout.addWidgetToPublicLayout(
				column = "${column}",
				groupName = "Guest",
				layoutName = "Federated Search Page",
				widgetName = "Search Bar");

			JSONLayout.addWidgetToPublicLayout(
				column = "${column}",
				groupName = "Guest",
				layoutName = "Federated Search Page",
				widgetName = "Search Results");

			Refresh();

			SearchPortlets.configureSearchBarWidget(
				federatedSearchKey = "federatedSearchKey${column}",
				index = "${column}",
				keywordsParameterName = "keywordParameter${column}");

			SearchResultPortlet.configureSearchResults(
				federatedSearchKey = "federatedSearchKey${column}",
				index = "${column}");
		}

		for (var count : list "1,2,3,4,5") {
			SearchPortlets.searchWidget(searchTerm = "test");

			SearchResultPortlet.viewSearchResults(
				searchAssetTitle = "Test Test",
				searchAssetType = "User");

			AssertElementNotPresent(locator1 = "xpath=(//li[contains(@class,'list-group-item') and contains(.,'Test Test')][.//span[@class='subtext-item' and contains(.,'User')]])[2]");
		}
	}

	@priority = "3"
	test IsLocalizedInSearchAdmin {
		property test.name.skip.portal.instance = "Search#IsLocalizedInSearchAdmin";

		User.openUsersAdmin();

		User.editDisplaySettingsCP(
			languageName = "español (España)",
			userScreenName = "test");

		SearchAdministration.openSearchAdmin();

		AssertTextEquals.assertPartialText(
			locator1 = "Portlet#HEADER",
			value1 = "Búsquedas");

		AssertTextEquals.assertPartialText(
			key_navItem = "Conexiones",
			locator1 = "NavBar#ACTIVE_NAV_ITEM_LINK",
			value1 = "Conexiones");

		AssertTextEquals.assertPartialText(
			key_localizedKey = "Proveedor de motor de búsqueda",
			locator1 = "SearchAdmin#SEARCH_ENGINE_VENDOR_KEY",
			value1 = "Proveedor de motor de búsqueda");

		AssertTextEquals.assertPartialText(
			key_title = "Conexiones activas",
			locator1 = "Header#H3_TITLE",
			value1 = "Conexiones activas");

		AssertTextEquals.assertPartialText(
			key_tableHeader = "Nombre",
			locator1 = "LexiconTable#TABLE_HEADER",
			value1 = "Nombre");
	}

	@description = "This is a use case for LPS-115435."
	@priority = "3"
	test ModifyPaginationConfigurationProperties {
		for (var count : list "1,2,3,4,5") {
			JSONWebcontent.addWebContent(
				content = "WC Content ${count}",
				groupName = "Guest",
				title = "Apple ${count}");
		}

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchPortlets.addWidgets(searchPortletList = "Sort");

		Refresh();

		SearchPortlets.chooseSortOption(sortOption = "Title");

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "Apple 1/Web Content Article,Apple 2/Web Content Article,Apple 3/Web Content Article,Apple 4/Web Content Article,Apple 5/Web Content Article,",
			searchTerm = "Apple");

		SearchResultPortlet.configureSearchResults(paginationDelta = "3");

		Refresh();

		SearchResultPortlet.viewSearchResultNotPresent(
			searchAssetTitle = "Apple 4",
			searchAssetType = "Web Content Article");

		Pagination.changePagination(itemsPerPage = "20");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "Apple 1/Web Content Article,Apple 2/Web Content Article,Apple 3/Web Content Article,Apple 4/Web Content Article,Apple 5/Web Content Article,",
			searchTerm = "Apple");

		Pagination.changePagination(itemsPerPage = "4");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "Apple 1/Web Content Article,Apple 2/Web Content Article,Apple 3/Web Content Article,Apple 4/Web Content Article",
			searchTerm = "Apple");

		SearchResultPortlet.viewSearchResultNotPresent(
			searchAssetTitle = "Apple 5",
			searchAssetType = "Web Content Article");

		Pagination.changePagination(itemsPerPage = "20");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "Apple 1/Web Content Article,Apple 2/Web Content Article,Apple 3/Web Content Article,Apple 4/Web Content Article,Apple 5/Web Content Article",
			searchTerm = "Apple");
	}

	@description = "This is a use case for LPS-90078."
	@priority = "4"
	test ModifyPaginationPortalProperties {
		property app.server.types = "jboss,tcserver,tomcat,weblogic,websphere,wildfly";
		property custom.properties = "search.container.page.default.delta=2";
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property environment.acceptance = "true";
		property portal.acceptance = "true";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Search Result Widget Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Search Result Widget Page",
			widgetName = "Search Results");

		for (var count : list "1,2,3") {
			JSONWebcontent.addWebContent(
				content = "WC Content ${count}",
				groupName = "Guest",
				title = "WC Title ${count}");
		}

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/search-result-widget-page");

		Portlet.gotoPortletOptions(
			portletName = "Search Results",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		AssertTextEquals(
			locator1 = "SearchResults#RESULTS_PORTLET_PAGINATION_CONFIG",
			value1 = "2");

		IFrame.closeFrame();

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		Portlet.gotoPortletOptions(
			portletName = "Search Results",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		AssertTextEquals(
			locator1 = "SearchResults#RESULTS_PORTLET_PAGINATION_CONFIG",
			value1 = "2");

		IFrame.closeFrame();

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC Title 1",
			searchAssetType = "Web Content Article");

		SearchResultPortlet.viewSearchResultNotPresent(
			searchAssetTitle = "WC Title 3",
			searchAssetType = "Web Content Article");

		SearchResultPortlet.paginateAndViewSearchResults(
			searchAssetTitle = "WC Title 3",
			searchAssetType = "Web Content Article",
			searchTerm = "WC Title");
	}

	@description = "This is a use case for LPS-112599."
	@priority = "3"
	test NavigateToAssetEditPageViaSearchResults {
		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "WC Title");

		SearchPortlets.searchEmbedded(searchTerm = "WC");

		SearchPortlets.gotoResultDetails(searchAssetTitle = "WC Title");

		SearchPortlets.viewResultDetails(searchAssetTitle = "WC Title");

		Click(locator1 = "SearchResults#ASSET_DETAILS_EDIT_BUTTON");

		AssertVisible(locator1 = "WCEditWebContent#SIDEBAR");

		AssertTextEquals.assertPartialText(
			locator1 = "Portlet#HEADER",
			value1 = "WC Title");
	}

	@priority = "4"
	test NavigateToSearchResultsViaURL {
		property portal.acceptance = "true";

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		Blogs.addEntry(
			entryContent = "This is a blog about Potatoes",
			entryTitle = "Potato Blog");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Search Page");

		Navigator.gotoPage(pageName = "Search Page");

		SearchPortlets.addWidgets(searchPortletList = "Type Facet,Search Results,Search Bar");

		SearchPortlets.configureSearchBarWidget(
			keywordsParameterName = "keywordparameter",
			scopeParameterName = "scopeparameter");

		SearchPortlets.configureSearchBarWidget(searchScope = "Let the User Choose");

		SearchPortlets.chooseWidgetScope(searchScope = "Everything");

		SearchPortlets.searchWidget(searchTerm = "Potato");

		SearchFacetPortlet.checkFacet(facetValueName = "Blogs Entry");

		var portalURL = PropsUtil.get("portal.url");

		AssertLocation(value1 = "${portalURL}/web/guest/search-page?keywordparameter=Potato&scopeparameter=everything&type=com.liferay.blogs.model.BlogsEntry");

		var searchURL = selenium.getCurrentUrl();

		Navigator.openURL();

		Navigator.openSpecificURL(url = "${searchURL}");

		AssertTextEquals(
			locator1 = "Search#SEARCH_BAR_WIDGET",
			value1 = "Potato");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Potato Blog",
			searchAssetType = "Blogs Entry");

		FormFields.viewCheckboxChecked(fieldName = "Blogs Entry");
	}

	@description = "This is a use case for LPS-95798."
	@priority = "3"
	test SearchAfterViewingResultDetails {
		JSONWebcontent.addWebContent(
			content = "Web Content",
			groupName = "Guest",
			title = "First WC");

		JSONWebcontent.addWebContent(
			content = "Web Content",
			groupName = "Guest",
			title = "Second WC");

		SearchPortlets.searchEmbedded(searchTerm = "First");

		SearchPortlets.gotoResultDetails(searchAssetTitle = "First WC");

		SearchPortlets.viewResultDetails(searchAssetTitle = "First WC");

		SearchPortlets.searchEmbedded(searchTerm = "Second");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Second WC",
			searchAssetType = "Web Content Article",
			searchTerm = "Second");
	}

	@priority = "4"
	test SearchBlogsEntry {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Blogs Entry Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "Blogs Entry Content");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "Blogs Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "Blogs Content");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "Blogs");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "Entry");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "Content");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");
	}

	@priority = "4"
	test SearchBlogsEntryCategory {
		property test.name.skip.portal.instance = "Search#SearchBlogsEntryCategory";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Categorization",
			portlet = "Categories");

		Vocabulary.addCP(vocabularyName = "Vocabulary Name");

		Category.addCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		Blogs.addEntryWithCategory(
			categoryName = "Category Name",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			vocabularyName = "Vocabulary Name");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Category Name");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchFacetPortlet.updateFacetConfiguration(
			displayTemplate = "Cloud Layout",
			portletName = "Category Facet");

		Refresh();

		AssertElementPresent(
			categoryName = "Category Name",
			locator1 = "Search#CATEGORY_FACET_CLOUD_LAYOUT");

		SearchPortlets.searchEmbedded(searchTerm = "Category");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "Name");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "Category1");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "Category1");

		SearchPortlets.searchEmbedded(searchTerm = "Name1");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "Name1");
	}

	@priority = "4"
	test SearchBlogsEntryCategoryQuotes {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Categorization",
			portlet = "Categories");

		Vocabulary.addCP(vocabularyName = "Vocabulary Name");

		Category.addCP(
			categoryName = "Category Name",
			vocabularyName = "Vocabulary Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		Blogs.addEntryWithCategory(
			categoryName = "Category Name",
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			vocabularyName = "Vocabulary Name");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Category Name&quot;");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Category&quot;");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Name&quot;");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Category Name1&quot;");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "&quot;Category Name1&quot;");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Category1&quot;");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "&quot;Category1&quot;");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Name1&quot;");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "&quot;Name1&quot;");
	}

	@priority = "4"
	test SearchBlogsEntryQuotes {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Blogs Entry Title&quot;");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Entry Title&quot;");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Title&quot;");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Blogs Entry Content&quot;");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Blogs Entry&quot;");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Blogs&quot;");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Entry Content&quot;");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Entry&quot;");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Content&quot;");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Blogs Content&quot;");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "&quot;Blogs Content&quot;");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Blogs1&quot;");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "&quot;Blogs1&quot;");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Entry1&quot;");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "&quot;Entry1&quot;");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Title1&quot;");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "&quot;Title1&quot;");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Content1&quot;");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "&quot;Content1&quot;");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Blogs Entry Title1&quot;");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "&quot;Blogs Entry Title1&quot;");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;Blogs Entry Content1&quot;");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "&quot;Blogs Entry Content1&quot;");
	}

	@priority = "4"
	test SearchBlogsEntryTag {
		property test.name.skip.portal.instance = "Search#SearchBlogsEntryTag";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		Blogs.addEntryWithTag(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			tagName = "tag name");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "tag name");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchFacetPortlet.updateFacetConfiguration(
			displayTemplate = "Cloud Layout",
			portletName = "Tag Facet");

		Refresh();

		AssertElementPresent(
			locator1 = "Search#TAG_FACET_CLOUD_LAYOUT",
			tagName = "tag name");

		SearchPortlets.searchEmbedded(searchTerm = "tag");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "name");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "tag1");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "tag1");

		SearchPortlets.searchEmbedded(searchTerm = "name1");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "name1");
	}

	@priority = "4"
	test SearchBlogsEntryTagQuotes {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		Blogs.addEntryWithTag(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			tagName = "tag name");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "&quot;tag name&quot;");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;tag&quot;");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;name&quot;");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Blogs Entry Content",
			searchAssetTitle = "Blogs Entry Title",
			searchAssetType = "Blogs Entry");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;tag name1&quot;");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "&quot;tag name1&quot;");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;tag1&quot;");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "&quot;tag1&quot;");

		SearchPortlets.searchEmbedded(searchTerm = "&quot;name1&quot;");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "&quot;name1&quot;");
	}

	@priority = "4"
	test SearchBlogsScopedToPage {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Blogs Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Guest",
			layoutName = "Blogs Page",
			widgetName = "Blogs");

		Navigator.gotoPage(pageName = "Blogs Page");

		Portlet.selectScopePG(
			portletName = "Blogs",
			scope = "Blogs Page");

		Blogs.addEntry(
			entryContent = "Entry Content",
			entryTitle = "Entry Title");

		SearchPortlets.searchEmbedded(searchTerm = "Entry Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Entry Title",
			searchAssetType = "Blogs Entry",
			searchTerm = "Entry Title");
	}

	@priority = "4"
	test SearchCompanyScopedObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 500",
			objectName = "CustomObject500",
			pluralLabelName = "Custom Objects 500",
			scope = "company");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "title",
			fieldName = "title",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject500");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject500");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "title",
			objectName = "CustomObject500",
			value = "apple");

		Search.openSearchPage();

		SearchPortlets.configureEmbeddedSearchBar(searchScope = "Everything");

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		var objectEntryId = JSONObject.getObjectEntryId(
			entryValue = "apple",
			fieldName = "title",
			objectName = "CustomObject500");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "${objectEntryId}",
			searchAssetType = "Custom Object 500");

		Portlet.gotoPortletOptions(
			portletName = "Type Facet",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		AssertElementPresent(
			assetType = "Custom Object 500",
			locator1 = "Search#TYPE_FACET_CURRENT_ASSET_TYPE");

		IFrame.closeFrame();

		SearchFacetPortlet.checkFacet(facetValueName = "Custom Object 500");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "${objectEntryId}",
			searchAssetType = "Custom Object 500");
	}

	@priority = "4"
	test SearchContentPagesSmoke {
		JSONGroup.addGroup(groupName = "Site Name");

		PagesAdmin.openPagesAdmin(siteURLKey = "site-name");

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addWidget(portletName = "Search Bar");

		Refresh();

		PageEditor.addWidget(
			collectionName = "Search",
			portletName = "Search Results",
			targetFragmentName = "Search Bar");

		PageEditor.clickPublish();

		JSONWebcontent.addWebContent(
			content = "Web Content",
			groupName = "Site Name",
			title = "WC Title");

		Navigator.gotoSitePage(
			pageName = "Test Content Page Name",
			siteName = "Site Name");

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article",
			searchTerm = "WC Title");
	}

	@priority = "4"
	test SearchDeletedWebContent {
		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "WC Title");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContent.moveToRecycleBinCP(
			assetType = "Web Content Article",
			webContentTitle = "WC Title");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No results were found that matched the keywords");
	}

	@description = "This test will set up a search page and search on a newly added site. It will also use different scopes to assert search results for assets from multiple sites"
	@priority = "4"
	test SearchDifferentScopesViaNewSite {
		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = "Site Name 1");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "Apple");

		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = "Site Name 2");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "Apple");

		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = "Site Name 3");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Apple");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Site 3 Home Page");

		PagesAdmin.addPage(
			inheritChanges = "disable",
			pageName = "Search Page",
			pageTemplateName = "Search");

		// Workaround for LPS-80521

		Navigator.gotoSitePage(
			pageName = "Search Page",
			siteName = "Site Name 3");

		Navigator.gotoSitePage(
			pageName = "Site 3 Home Page",
			siteName = "Site Name 3");

		SearchPortlets.configureEmbeddedSearchBar(destinationPage = "Search Page");

		SearchPortlets.configureEmbeddedSearchBar(searchScope = "Let the User Choose");

		SearchPortlets.chooseEmbeddedScope(searchScope = "Everything");

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "Apple/Web Content Article,Apple/Document,Apple/Blogs Entry",
			searchTerm = "Apple");

		SearchFacetPortlet.updateFacetConfiguration(
			maxTerms = "2",
			portletName = "Site Facet");

		Refresh();

		AssertElementPresent(
			key_fieldName = "liferay",
			locator1 = "FormFields#CHECKBOX_LABEL");

		AssertElementPresent(
			key_fieldName = "Site Name 2",
			locator1 = "FormFields#CHECKBOX_LABEL");

		AssertElementNotPresent(
			key_fieldName = "Site Name 3",
			locator1 = "FormFields#CHECKBOX_LABEL");

		SearchPortlets.chooseEmbeddedScope(searchScope = "This Site");

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Blogs Entry",
			searchTerm = "Apple");

		SearchResultPortlet.viewMultipleSearchResultsNotPresent(noResultsList = "Apple/Web Content Article,Apple/Document");
	}

	@description = "This test will assert that configurations set within the Embedded search bar will be used when searching via the Widget search bar"
	@priority = "4"
	test SearchDifferentScopesViaSearchWidget {
		property custom.properties = "company.default.time.zone=America/Los_Angeles";
		property portal.acceptance = "true";

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "Potato Document");

		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = "Test Site");

		PagesAdmin.openPagesAdmin(siteURLKey = "Test Site");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		Blogs.addEntry(
			entryContent = "This is a blog about Potatoes",
			entryTitle = "Potato Blog");

		var currentDate = DateUtil.getFormattedCurrentDate("MMM d, yyyy");

		Search.openSearchPage();

		SearchPortlets.configureEmbeddedSearchBar(searchScope = "Everything");

		SearchPortlets.searchWidget(searchTerm = "Potato");

		SearchResultPortlet.viewSearchResults(
			entryDate = "${currentDate}",
			searchAssetSummary = "This is a blog about Potatoes",
			searchAssetTitle = "Potato Blog",
			searchAssetType = "Blogs Entry",
			searchTerm = "Potato");

		SearchResultPortlet.viewSearchResults(
			entryDate = "${currentDate}",
			searchAssetTitle = "Potato Document",
			searchAssetType = "Document",
			searchTerm = "Potato");

		SearchPortlets.configureEmbeddedSearchBar(searchScope = "This Site");

		SearchPortlets.searchWidget(searchTerm = "Potato");

		SearchResultPortlet.viewSearchResults(
			entryDate = "${currentDate}",
			searchAssetTitle = "Potato Document",
			searchAssetType = "Document",
			searchTerm = "Potato");

		SearchResultPortlet.viewSearchResultNotPresent(
			searchAssetTitle = "Potato Blog",
			searchAssetType = "Blogs Entry");
	}

	@priority = "5"
	test SearchDocumentsAndMediaDocument {
		property app.server.types = "jboss,tcserver,tomcat,weblogic,websphere,wildfly";
		property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
		property testray.component.names = "Training";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentSize = "0k",
			dmDocumentTitle = "DM Document Title",
			tagNameList = "moon rocks");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "DM Document Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchPortlets.searchEmbedded(searchTerm = "DM");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchPortlets.searchEmbedded(searchTerm = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchPortlets.searchEmbedded(searchTerm = "Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchPortlets.searchEmbedded(searchTerm = "DM Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchPortlets.searchEmbedded(searchTerm = "DM Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchPortlets.searchEmbedded(searchTerm = "Document Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchPortlets.searchEmbedded(searchTerm = "moon rocks");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchFacetPortlet.checkFacet(facetValueName = "moon rocks");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "DM Document Title",
			searchAssetType = "Document");

		SearchPortlets.searchEmbedded(searchTerm = "DM1");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "DM1");

		SearchPortlets.searchEmbedded(searchTerm = "Document1");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "Document1");

		SearchPortlets.searchEmbedded(searchTerm = "Title1");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "Title1");
	}

	@description = "This is a use case for LPS-81931"
	@priority = "5"
	test SearchGlobalTemplateSmoke {
		property portal.acceptance = "true";

		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		Blogs.addEntry(
			entryContent = "Blogs Entry 1 Content",
			entryTitle = "Blogs Entry 1 Title");

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Home");

		PagesAdmin.addPage(
			inheritChanges = "disable",
			pageName = "Search Global Template Page",
			pageTemplateName = "Search");

		Navigator.gotoSitePage(
			pageName = "Search Global Template Page",
			siteName = "Site Name");

		SearchPortlets.configureEmbeddedSearchBar(destinationPage = "Search Global Template Page");

		for (var portlet : list "Category Facet,Folder Facet,Modified Facet,Search Bar,Search Options,Search Results,Tag Facet,Type Facet,User Facet") {
			AssertElementPresent(
				key_portletName = "${portlet}",
				locator1 = "Portlet#BODY");
		}

		Portlet.deletePG(portletName = "Search Options");

		for (var portlet : list "Category Facet,Folder Facet,Modified Facet,Search Bar,Search Results,Tag Facet,Type Facet,User Facet") {
			AssertElementPresent(
				key_portletName = "${portlet}",
				locator1 = "Portlet#BODY");
		}

		Navigator.gotoSitePage(
			pageName = "Home",
			siteName = "Site Name");

		SearchPortlets.searchEmbedded(searchTerm = "Blogs");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Blogs Entry 1 Title",
			searchAssetType = "Blogs Entry",
			searchTerm = "Blogs");
	}

	@priority = "4"
	test SearchUser {
		property test.name.skip.portal.instance = "Search#SearchUser";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editUserSiteCP(
			siteName = "${siteName}",
			userScreenName = "usersn");

		Navigator.gotoBack();

		Search.searchCP(searchTerm = "userfn");

		User.viewUserTableName(
			key_userScreenName = "usersn",
			userfn = "userfn",
			userln = "userln");

		Search.searchCP(searchTerm = "userln");

		User.viewUserTableName(
			key_userScreenName = "usersn",
			userfn = "userfn",
			userln = "userln");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "userfn userln");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "userfn userln",
			searchAssetType = "User");

		SearchFacetPortlet.updateFacetConfiguration(
			parameterName = "username",
			portletName = "User Facet");

		Refresh();

		SearchFacetPortlet.checkFacet(facetValueName = "userfn userln");

		var currentURL = selenium.getLocation();

		if (!(contains("${currentURL}", "username"))) {
			fail("User parameter name failed to change.");
		}

		SearchPortlets.searchEmbedded(searchTerm = "userfn");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "userfn userln",
			searchAssetType = "User");

		SearchPortlets.searchEmbedded(searchTerm = "userln");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "userfn userln",
			searchAssetType = "User");

		SearchPortlets.searchEmbedded(searchTerm = "usersn");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "userfn userln",
			searchAssetType = "User");

		SearchPortlets.searchEmbedded(searchTerm = "userfn1");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "userfn1");

		SearchPortlets.searchEmbedded(searchTerm = "userln1");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "userln1");

		SearchPortlets.searchEmbedded(searchTerm = "usersn1");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "usersn1");
	}

	@priority = "4"
	test SearchUserWildcard {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editUserSiteCP(
			siteName = "${siteName}",
			userScreenName = "usersn");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "users*");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "userfn userln",
			searchAssetType = "User");

		SearchPortlets.searchEmbedded(searchTerm = "userf*");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "userfn userln",
			searchAssetType = "User");
	}

	@priority = "4"
	test SearchUsingCustomFacet {
		property portal.acceptance = "true";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "WebContent Title 1");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContent.viewVersion(
			version = "1.0",
			webContentTitle = "WebContent Title 1");

		Search.openSearchPage();

		SearchPortlets.addWidgets(searchPortletList = "Custom Facet");

		SearchFacetPortlet.configureCustomFacet(aggregationField = "version");

		SearchPortlets.searchEmbedded(searchTerm = "WebContent");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WebContent Title 1",
			searchAssetType = "Web Content Article",
			searchTerm = "WebContent");

		AssertElementPresent(
			key_checkboxName = "1.0",
			key_facetClass = "Custom Facet",
			locator1 = "SearchResults#FACET_PORTLET_CHECKBOX_LABEL_SPECIFIC");

		Click(
			key_checkboxName = "1.0",
			key_facetClass = "Custom Facet",
			locator1 = "SearchResults#FACET_PORTLET_CHECKBOX_LABEL_SPECIFIC");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WebContent Title 1",
			searchAssetType = "Web Content Article",
			searchTerm = "WebContent");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoEditCP(webContentTitle = "WebContent Title 1");

		WebContent.addCP(webContentTitle = "WebContent Title 1.1");

		PortletEntry.publish();

		WebContent.viewVersion(
			version = "1.1",
			webContentTitle = "WebContent Title 1.1");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "WebContent");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WebContent Title 1.1",
			searchAssetType = "Web Content Article",
			searchTerm = "WebContent");

		AssertElementPresent(
			key_checkboxName = "1.1",
			key_facetClass = "Custom Facet",
			locator1 = "SearchResults#FACET_PORTLET_CHECKBOX_LABEL_SPECIFIC");

		Click(
			key_checkboxName = "1.1",
			key_facetClass = "Custom Facet",
			locator1 = "SearchResults#FACET_PORTLET_CHECKBOX_LABEL_SPECIFIC");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WebContent Title 1.1",
			searchAssetType = "Web Content Article",
			searchTerm = "WebContent");
	}

	@priority = "4"
	test SearchUsingCustomFacetWithUnlocalizedDDMField {
		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "Test Structure Description",
			structureName = "Test Structure");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DataEngine.editFieldLocalizable(fieldFieldLabel = "Text");

		WebContentStructures.saveCP(structureName = "Test Structure");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "Test Structure");

		WebContent.addWithStructureCP(
			structureName = "Test Structure",
			webContentText = "Unlocalized text field",
			webContentTitle = "WC Title");

		PortletEntry.publish();

		WebContent.viewWithStructureCP(
			webContentText = "Unlocalized text field",
			webContentTitle = "WC Title");

		var port = Elasticsearch.getServerPort();

		var portalHostname = PropsUtil.get("portal.hostname");
		var curl = "http://${portalHostname}:${port}/_search?q=entryClassName:com.liferay.journal.model.JournalArticle";
		var journalArticleDocumentType = JSONCurlUtil.get("${curl}");
		var aggregationField = RegexUtil.replace("${journalArticleDocumentType}", "ddmFieldName\":\"(.*)\",\"ddmFieldValueKeyword\"", "1");

		Search.openSearchPage();

		SearchPortlets.addWidgets(searchPortletList = "Custom Facet");

		SearchFacetPortlet.configureCustomFacet(aggregationField = "${aggregationField}");

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		AssertElementPresent(
			key_checkboxName = "Unlocalized text field",
			key_facetClass = "Custom Facet",
			locator1 = "SearchResults#FACET_PORTLET_CHECKBOX_LABEL_SPECIFIC");
	}

	@priority = "4"
	test SearchWebContent {
		property test.name.skip.portal.instance = "Search#SearchWebContent";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "WC WebContent Title");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "WC WebContent Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "WC WebContent Content",
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content Article");

		SearchPortlets.searchEmbedded(searchTerm = "WC WebContent Content");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "WC WebContent Content",
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content Article");

		SearchPortlets.searchEmbedded(searchTerm = "WC");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "WC WebContent Content",
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content Article");

		SearchPortlets.searchEmbedded(searchTerm = "WebContent");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "WC WebContent Content",
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content Article");

		SearchPortlets.searchEmbedded(searchTerm = "Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "WC WebContent Content",
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content Article");

		SearchPortlets.searchEmbedded(searchTerm = "Content");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "WC WebContent Content",
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content Article");

		SearchPortlets.searchEmbedded(searchTerm = "WC1");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "WC1");

		SearchPortlets.searchEmbedded(searchTerm = "WebContent1");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "WebContent1");

		SearchPortlets.searchEmbedded(searchTerm = "Title1");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "Title1");

		SearchPortlets.searchEmbedded(searchTerm = "Content1");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "Content1");
	}

	@priority = "4"
	test SearchWikiPage {
		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Wiki Test Page");

		Navigator.gotoPage(pageName = "Wiki Test Page");

		Portlet.addPG(portletName = "Wiki");

		Navigator.gotoPage(pageName = "Wiki Test Page");

		WikiNavigator.gotoAllPagesPG();

		WikiPage.addPG(
			pageName = "Wiki Test Page",
			wikiPageContent = "Wiki Page Content",
			wikiPageTitle = "Wiki Page Title");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Wiki Page Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Wiki Page Content",
			searchAssetTitle = "Wiki Page Title",
			searchAssetType = "Wiki Page");

		SearchPortlets.searchEmbedded(searchTerm = "Wiki Page Content");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Wiki Page Content",
			searchAssetTitle = "Wiki Page Title",
			searchAssetType = "Wiki Page");

		SearchPortlets.searchEmbedded(searchTerm = "Wiki");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Wiki Page Content",
			searchAssetTitle = "Wiki Page Title",
			searchAssetType = "Wiki Page");

		SearchPortlets.searchEmbedded(searchTerm = "Page");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Wiki Page Content",
			searchAssetTitle = "Wiki Page Title",
			searchAssetType = "Wiki Page");

		SearchPortlets.searchEmbedded(searchTerm = "Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Wiki Page Content",
			searchAssetTitle = "Wiki Page Title",
			searchAssetType = "Wiki Page");

		SearchPortlets.searchEmbedded(searchTerm = "Content");

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = "Wiki Page Content",
			searchAssetTitle = "Wiki Page Title",
			searchAssetType = "Wiki Page");
	}

	@priority = "4"
	test SearchWithFolderFacet {
		for (var count : list "1,2") {
			JSONFolder.addFolder(
				dmFolderDescription = "DM Folder Description ${count}",
				dmFolderName = "DM Folder Name ${count}",
				groupName = "Guest");
		}

		for (var count : list "1,2") {
			JSONDocument.addFile(
				dmDocumentDescription = "DM Document Description ${count}",
				dmDocumentTitle = "DM Document Title ${count}",
				folderName = "DM Folder Name ${count}",
				groupName = "Guest");
		}

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "DM");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "DM Document Title 1/Document,DM Document Title 2/Document",
			searchTerm = "DM");

		SearchFacetPortlet.checkFacet(facetValueName = "DM Folder Name 1");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "DM Document Title 1",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResultNotPresent(
			searchAssetTitle = "DM Document Title 2",
			searchAssetType = "Document");

		SearchFacetPortlet.clearFacet();

		SearchFacetPortlet.checkFacet(facetValueName = "DM Folder Name 2");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "DM Document Title 2",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResultNotPresent(
			searchAssetTitle = "DM Document Title 1",
			searchAssetType = "Document");

		SearchFacetPortlet.clearFacet();

		SearchFacetPortlet.updateFacetConfiguration(
			displayFrequencies = "disable",
			portletName = "Folder Facet");

		Refresh();

		AssertElementNotPresent(
			facetValueName = "DM Folder Name 1",
			locator1 = "Search#FACET_DISPLAY_FREQUENCIES");
	}

	@priority = "4"
	test SearchWithModifiedFacet {
		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "WC Title");

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		Portlet.gotoPortletOptions(
			portletName = "Modified Facet",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		Click(locator1 = "Button#ADD_ROW");

		Type(
			key_fieldLabel = "Label",
			locator1 = "Search#MODIFIED_FACET_CONFIG_EMPTY_FIELD",
			value1 = "Past 23 Hours");

		Type(
			key_fieldLabel = "Range",
			locator1 = "Search#MODIFIED_FACET_CONFIG_EMPTY_FIELD",
			value1 = "[past-24-hours TO past-hour]");

		PortletEntry.save();

		IFrame.closeFrame();

		// Workaround for LPS-97383

		Refresh();

		AssertTextEquals.assertPartialText(
			locator1 = "Search#MODIFIED_FACET_SELECTION",
			range = "Past 23 Hours",
			value1 = "Past 23 Hours");

		Click(
			locator1 = "Search#MODIFIED_FACET_SELECTION",
			range = "Past 23 Hours");

		SearchResultPortlet.viewNoSearchResults(searchTerm = "WC Title");

		Portlet.gotoPortletOptions(
			portletName = "Modified Facet",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		Click(
			key_rowIndexNumber = "2",
			locator1 = "Button#DELETE_ROW_N");

		PortletEntry.save();

		IFrame.closeFrame();

		// Workaround for LPS-97383

		Refresh();

		AssertElementNotPresent(
			locator1 = "Search#MODIFIED_FACET_SELECTION",
			range = "Past 23 Hours");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article",
			searchTerm = "WC Title");

		Click(
			locator1 = "Search#MODIFIED_FACET_SELECTION",
			range = "Custom Range");

		Click(locator1 = "Search#CUSTOM_RANGE_FROM");

		Click(locator1 = "YUICalendarWidget#NEXT_MONTH_ARROW");

		Click(locator1 = "YUICalendarWidget#NEXT_MONTH_ARROW");

		Click(
			key_day = "1",
			locator1 = "YUICalendarWidget#DATEPICKER_SPECIFIC_DAY");

		AssertElementPresent(locator1 = "Message#ERROR_SELECT_VALID_DATE_RANGE");

		AssertVisible(locator1 = "Button#SEARCH_DISABLED");

		Click(locator1 = "Search#CUSTOM_RANGE_FROM");

		Click(locator1 = "YUICalendarWidget#PREVIOUS_MONTH_ARROW");

		Click(locator1 = "YUICalendarWidget#PREVIOUS_MONTH_ARROW");

		Click(
			key_day = "1",
			locator1 = "YUICalendarWidget#DATEPICKER_SPECIFIC_DAY");

		Click(locator1 = "Button#SEARCH");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article",
			searchTerm = "WC Title");
	}

	@priority = "4"
	test SearchWithTypeFacet {
		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "Apple");

		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description ${count}",
			dmDocumentTitle = "Apple",
			groupName = "Guest");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Apple");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "Apple/Web Content Article,Apple/Document,Apple/Blogs Entry",
			searchTerm = "Apple");

		SearchFacetPortlet.moveAssetTypesToAvailable(assetType = "Document");

		Refresh();

		AssertElementPresent(
			key_fieldName = "Web Content Article",
			locator1 = "FormFields#CHECKBOX_LABEL");

		AssertElementPresent(
			key_fieldName = "Blogs Entry",
			locator1 = "FormFields#CHECKBOX_LABEL");

		AssertElementNotPresent(
			key_fieldName = "Document",
			locator1 = "FormFields#CHECKBOX_LABEL");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "Apple/Web Content Article,Apple/Blogs Entry",
			searchTerm = "Apple");

		SearchResultPortlet.viewSearchResultNotPresent(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");
	}

	@priority = "4"
	test SearchXSSAsset {
		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Message Boards");

		MessageboardsThread.addCP(
			threadBody = '''<script>alert(123);</script>''',
			threadSubject = "Thread Subject");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Subject");

		AssertAlertNotPresent();

		SearchResultPortlet.viewSearchResults(
			searchAssetSummary = '''<script>alert(123);</script>''',
			searchAssetTitle = "Thread Subject",
			searchAssetType = "Message Boards Message");

		var actualScript = '''<script>alert(123);</script>''';

		var escapedScript = '''&lt;script&gt;alert(123);&lt;/script&gt;''';

		AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

		AssertHTMLSourceTextPresent(value1 = "${escapedScript}");

		SearchResultPortlet.configureSearchResults(disableHighlighting = "true");

		Refresh();

		AssertAlertNotPresent();

		AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

		AssertHTMLSourceTextPresent(value1 = "${escapedScript}");
	}

	@description = "This is a use case for LPS-84035."
	@priority = "5"
	test ViewCreatedSearchPagePermissions {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.addUserToSite(
			groupName = "Guest",
			userEmailAddress = "userea@liferay.com");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Search Page");

		var webContentServiceContext = '''{"addGuestPermissions": "true", "assetTagNames": ["tag"]}''';

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			serviceContext = "${webContentServiceContext}",
			title = "WC Title");

		Navigator.gotoPage(pageName = "Search Page");

		SearchPortlets.addWidgets(searchPortletList = "Custom Filter,Sort,Suggestions,Search Results,Search Bar");

		PermissionsInline.gotoConfigurationPG(portletName = "Search Results");

		PermissionsInline.viewPermissionsChecked(
			permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Guest");

		PermissionsInline.viewPermissionsChecked(
			permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Site Member");

		IFrame.closeFrame();

		SearchPortlets.configureEmbeddedSearchBar(destinationPage = "Search Page");

		User.logoutPG();

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article",
			searchTerm = "WC Title");

		AssertElementNotPresent(locator1 = "Portlet#ERROR");

		for (var portlet : list "Custom Filter,Sort,Search Results,Search Bar") {
			AssertElementPresent(
				key_portletName = "${portlet}",
				locator1 = "Portlet#BODY");
		}

		User.loginPG(userEmailAddress = "userea@liferay.com");

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article",
			searchTerm = "WC Title");

		AssertElementNotPresent(locator1 = "Portlet#ERROR");

		for (var portlet : list "Custom Filter,Sort,Search Results,Search Bar") {
			AssertElementPresent(
				key_portletName = "${portlet}",
				locator1 = "Portlet#BODY");
		}
	}

	@description = "This is a use case for LPS-84035."
	@priority = "5"
	test ViewDefaultSearchPagePermissions {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.addUserToSite(
			groupName = "Guest",
			userEmailAddress = "userea@liferay.com");

		var webContentServiceContext = '''{"addGuestPermissions": "true", "assetTagNames": ["tag"]}''';

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			serviceContext = "${webContentServiceContext}",
			title = "WC Title");

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		PermissionsInline.gotoConfigurationPG(portletName = "Search Results");

		PermissionsInline.viewPermissionsChecked(
			permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Guest");

		PermissionsInline.viewPermissionsChecked(
			permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Site Member");

		IFrame.closeFrame();

		User.logoutPG();

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		AssertElementNotPresent(locator1 = "Portlet#ERROR");

		AssertElementPresent(locator1 = "Search#SEARCH_BAR_WIDGET");

		for (var portlet : list "Last Modified,Tag,Type,User") {
			AssertElementPresent(
				key_portletName = "${portlet}",
				locator1 = "Portlet#BODY");
		}

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article",
			searchTerm = "WC Title");

		User.loginPG(userEmailAddress = "userea@liferay.com");

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		AssertElementNotPresent(locator1 = "Portlet#ERROR");

		AssertElementPresent(locator1 = "Search#SEARCH_BAR_WIDGET");

		for (var portlet : list "Last Modified,Tag,Type,User") {
			AssertElementPresent(
				key_portletName = "${portlet}",
				locator1 = "Portlet#BODY");
		}

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article",
			searchTerm = "WC Title");
	}

	@description = "This is a use case for LPS-74299."
	@priority = "3"
	test ViewFacetPersistence {
		property test.name.skip.portal.instance = "Search#ViewFacetPersistence";

		// Workaround for LPS-89026

		SearchAdministration.executeReindex();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Search Page");

		Navigator.gotoPage(pageName = "Search Page");

		SearchPortlets.addWidgets(searchPortletList = "Site Facet,Search Results,Search Bar");

		SearchPortlets.configureSearchBarWidget(searchScope = "Everything");

		SearchPortlets.searchWidget(searchTerm = "*");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Test Test",
			searchAssetType = "User");

		var siteName = TestCase.getSiteName();

		SearchFacetPortlet.checkFacet(facetValueName = "${siteName}");

		SearchPortlets.searchWidget(searchTerm = "test");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Test Test",
			searchAssetType = "User");

		FormFields.viewCheckboxChecked(fieldName = "${siteName}");
	}

	@priority = "5"
	test ViewMultipleFacetURLs {
		property test.name.skip.portal.instance = "Search#ViewMultipleFacetURLs";

		var searchPage = "Search Page";

		JSONCategory.addVocabulary(
			groupName = "Guest",
			title = "Fruit Vocabulary");

		JSONCategory.addCategory(
			groupName = "Guest",
			title = "organic",
			vocabularyName = "Fruit Vocabulary");

		var webContentFolderName1 = "WC Folder Name 1";

		JSONWebcontent.addFolder(
			folderName = "${webContentFolderName1}",
			groupName = "Guest");

		var organicCategoryId = JSONCategory.getCategoryId(
			categoryName = "organic",
			groupName = "Guest",
			vocabularyName = "Fruit Vocabulary");

		var webContentserviceContext1 = '''{"assetTagNames": ["ripe"], "assetCategoryIds": ["${organicCategoryId}"]}''';

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content 1",
			folderName = "${webContentFolderName1}",
			groupName = "Guest",
			serviceContext = "${webContentserviceContext1}",
			title = "apple");

		var webContentFolderName2 = "WC Folder Name 2";

		JSONWebcontent.addFolder(
			folderName = "${webContentFolderName2}",
			groupName = "Guest");

		var webContentserviceContext1 = '''{"assetTagNames": ["fresh"]}''';

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content 2",
			folderName = "${webContentFolderName2}",
			groupName = "Guest",
			serviceContext = "${webContentserviceContext1}",
			title = "orange");

		JSONGroup.addGroup(groupName = "New Site");

		PagesAdmin.openPagesAdmin(siteURLKey = "New Site");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		Blogs.addEntryWithTag(
			entryContent = "Apple Blog Entry Content",
			entryTitle = "apple",
			tagName = "sweet");

		Navigator.openURL();

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		User.logoutPG();

		User.loginPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMDocument.addCP(
			categoryNameList = "organic",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "banana",
			tagNameList = "fresh,ripe,test",
			vocabularyName = "Fruit Vocabulary");

		User.logoutPG();

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		SearchAdministration.executeReindex();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "${searchPage}");

		Navigator.gotoPage(pageName = "${searchPage}");

		SearchPortlets.addWidgets(searchPortletList = "Category Facet,Folder Facet,Site Facet,Tag Facet,Type Facet,User Facet");

		JSONLayout.addWidgetToPublicLayout(
			column = "2",
			groupName = "Guest",
			layoutName = "Search Page",
			widgetName = "Search Bar");

		JSONLayout.addWidgetToPublicLayout(
			column = "2",
			groupName = "Guest",
			layoutName = "Search Page",
			widgetName = "Search Options");

		JSONLayout.addWidgetToPublicLayout(
			column = "2",
			groupName = "Guest",
			layoutName = "Search Page",
			widgetName = "Search Results");

		Refresh();

		SearchPortlets.configureSearchBarWidget(searchScope = "Everything");

		SearchPortlets.configureSearchOptions(
			allowEmptySearches = "true",
			basicFacetSelection = "true");

		SearchPortlets.searchWidget(searchTerm = "apple");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "apple/Blogs Entry,apple/Web Content Article",
			searchTerm = "apple");

		SearchResultPortlet.viewMultipleSearchResultsNotPresent(noResultsList = "banana/Document,orange/Web Content Article");

		var testSearchURL = SearchFacetPortlet.checkFacetAndViewURL(
			facetClass = "type",
			facetValueName = "Web Content Article",
			searchPage = "${searchPage}",
			searchTerm = "apple");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "apple/Web Content Article",
			searchTerm = "apple");

		SearchResultPortlet.viewMultipleSearchResultsNotPresent(noResultsList = "apple/Blogs Entry,banana/Document,orange/Web Content Article");

		var testSearchURL = SearchFacetPortlet.checkFacetAndViewURL(
			facetClass = "type",
			facetValueName = "Blogs Entry",
			searchURL = "${testSearchURL}");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "apple/Blogs Entry,apple/Web Content Article",
			searchTerm = "apple");

		SearchResultPortlet.viewMultipleSearchResultsNotPresent(noResultsList = "banana/Document,orange/Web Content Article");

		var testSearchURL = SearchFacetPortlet.uncheckFacetAndViewURL(
			facetClass = "type",
			facetValueName = "Web Content Article",
			searchURL = "${testSearchURL}");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "apple/Blogs Entry",
			searchTerm = "apple");

		SearchResultPortlet.viewMultipleSearchResultsNotPresent(noResultsList = "apple/Web Content Article,banana/Document,orange/Web Content Article");

		var testSearchURL = SearchFacetPortlet.clearAllFacetsAndViewURL(searchURL = "${testSearchURL}");

		SearchPortlets.searchWidget(searchTerm = "test");

		var testSearchURL = SearchPortlets.getSearchTermURL(
			searchPage = "${searchPage}",
			searchTerm = "test");

		AssertLocation(value1 = "${testSearchURL}");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "apple/Blogs Entry,apple/Web Content Article,banana/Document,orange/Web Content Article",
			searchTerm = "test");

		var testSearchURL = SearchFacetPortlet.checkFacetAndViewURL(
			facetClass = "category",
			facetValue = "${organicCategoryId}",
			facetValueName = "organic",
			searchURL = "${testSearchURL}");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "apple/Web Content Article,banana/Document",
			searchTerm = "test");

		SearchResultPortlet.viewMultipleSearchResultsNotPresent(noResultsList = "apple/Blogs Entry,orange/Web Content Article");

		var testSearchURL = SearchFacetPortlet.checkFacetAndViewURL(
			facetClass = "user",
			facetValueName = "userfn userln",
			searchURL = "${testSearchURL}");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "banana/Document",
			searchTerm = "test");

		SearchResultPortlet.viewMultipleSearchResultsNotPresent(noResultsList = "apple/Blogs Entry,apple/Web Content Article,orange/Web Content Article");

		var testSearchURL = SearchFacetPortlet.uncheckFacetAndViewURL(
			facetClass = "user",
			facetValueName = "userfn userln",
			searchURL = "${testSearchURL}");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "apple/Web Content Article,banana/Document",
			searchTerm = "test");

		SearchResultPortlet.viewMultipleSearchResultsNotPresent(noResultsList = "apple/Blogs Entry,orange/Web Content Article");

		var testSearchURL = SearchFacetPortlet.clearAllFacetsAndViewURL(searchURL = "${testSearchURL}");

		SearchPortlets.searchWidget(searchTerm = "test");

		var testSearchURL = SearchPortlets.getSearchTermURL(
			searchPage = "${searchPage}",
			searchTerm = "test");

		var testSearchURL = SearchFacetPortlet.checkFacetAndViewURL(
			facetClass = "tag",
			facetValueName = "sweet",
			searchURL = "${testSearchURL}");

		var testSearchURL = SearchFacetPortlet.checkFacetAndViewURL(
			facetClass = "tag",
			facetValueName = "fresh",
			searchURL = "${testSearchURL}");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "apple/Blogs Entry,banana/Document,orange/Web Content Article",
			searchTerm = "test");

		SearchResultPortlet.viewMultipleSearchResultsNotPresent(noResultsList = "apple/Web Content Article");

		var liferaySiteId = JSONGroupAPI._getGroupIdByName(
			groupName = "Guest",
			site = "true");

		var siteName = TestCase.getSiteName();

		var testSearchURL = SearchFacetPortlet.checkFacetAndViewURL(
			facetClass = "site",
			facetValue = "${liferaySiteId}",
			facetValueName = "${siteName}",
			searchURL = "${testSearchURL}");

		var newSiteId = JSONGroupAPI._getGroupIdByName(
			groupName = "New Site",
			site = "true");

		var testSearchURL = SearchFacetPortlet.checkFacetAndViewURL(
			facetClass = "site",
			facetValue = "${newSiteId}",
			facetValueName = "New Site",
			searchURL = "${testSearchURL}");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "apple/Blogs Entry,banana/Document,orange/Web Content Article",
			searchTerm = "test");

		SearchResultPortlet.viewMultipleSearchResultsNotPresent(noResultsList = "apple/Web Content Article");

		var testSearchURL = SearchFacetPortlet.uncheckFacetAndViewURL(
			facetClass = "site",
			facetValue = "${newSiteId}",
			facetValueName = "New Site",
			searchURL = "${testSearchURL}");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "banana/Document,orange/Web Content Article",
			searchTerm = "test");

		SearchResultPortlet.viewMultipleSearchResultsNotPresent(noResultsList = "apple/Blogs Entry,apple/Web Content Article");

		var webContentFolderId2 = JSONWebcontent.getFolderIdByFolderName(
			folderName = "${webContentFolderName2}",
			groupName = "Guest");

		var testSearchURL = SearchFacetPortlet.checkFacetAndViewURL(
			facetClass = "folder",
			facetValue = "${webContentFolderId2}",
			facetValueName = "${webContentFolderName2}",
			searchURL = "${testSearchURL}");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "orange/Web Content Article",
			searchTerm = "test");

		SearchResultPortlet.viewMultipleSearchResultsNotPresent(noResultsList = "apple/Blogs Entry,apple/Web Content Article,banana/Document");

		var testSearchURL = SearchFacetPortlet.checkFacetAndViewURL(
			facetClass = "tag",
			facetValueName = "ripe",
			searchURL = "${testSearchURL}");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "orange/Web Content Article",
			searchTerm = "test");

		SearchResultPortlet.viewMultipleSearchResultsNotPresent(noResultsList = "apple/Blogs Entry,apple/Web Content Article,banana/Document");

		var testSearchURL = SearchFacetPortlet.uncheckFacetAndViewURL(
			facetClass = "folder",
			facetValue = "${webContentFolderId2}",
			facetValueName = "${webContentFolderName2}",
			searchURL = "${testSearchURL}");

		var testSearchURL = SearchFacetPortlet.uncheckFacetAndViewURL(
			facetClass = "tag",
			facetValueName = "fresh",
			searchURL = "${testSearchURL}");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "apple/Web Content Article,banana/Document",
			searchTerm = "test");

		SearchResultPortlet.viewMultipleSearchResultsNotPresent(noResultsList = "apple/Blogs Entry,orange/Web Content Article");

		var testSearchURL = SearchFacetPortlet.clearAllFacetsAndViewURL(searchURL = "${testSearchURL}");

		SearchPortlets.searchWidget(searchTerm = "organic");

		var testSearchURL = SearchPortlets.getSearchTermURL(
			searchPage = "${searchPage}",
			searchTerm = "organic");

		var testSearchURL = SearchFacetPortlet.checkFacetAndViewURL(
			facetClass = "category",
			facetValue = "${organicCategoryId}",
			facetValueName = "organic",
			searchURL = "${testSearchURL}");

		var webContentFolderId1 = JSONWebcontent.getFolderIdByFolderName(
			folderName = "${webContentFolderName1}",
			groupName = "Guest");

		var testSearchURL = SearchFacetPortlet.checkFacetAndViewURL(
			facetClass = "folder",
			facetValue = "${webContentFolderId1}",
			facetValueName = "${webContentFolderName1}",
			searchURL = "${testSearchURL}");

		var testSearchURL = SearchFacetPortlet.checkFacetAndViewURL(
			facetClass = "site",
			facetValue = "${liferaySiteId}",
			facetValueName = "${siteName}",
			searchURL = "${testSearchURL}");

		var testSearchURL = SearchFacetPortlet.checkFacetAndViewURL(
			facetClass = "tag",
			facetValueName = "ripe",
			searchURL = "${testSearchURL}");

		var testSearchURL = SearchFacetPortlet.checkFacetAndViewURL(
			facetClass = "type",
			facetValueName = "Web Content Article",
			searchURL = "${testSearchURL}");

		var testSearchURL = SearchFacetPortlet.checkFacetAndViewURL(
			facetClass = "user",
			facetValueName = "test test",
			searchURL = "${testSearchURL}");

		SearchResultPortlet.viewMultipleSearchResults(
			resultsList = "apple/Web Content Article",
			searchTerm = "organic");
	}

	@priority = "5"
	test ViewSearchResultDetails {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "Search#ViewSearchResultDetails";

		SearchAdministration.executeReindex();

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Test Test");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Test Test",
			searchAssetType = "User");

		SearchPortlets.gotoResultDetails(searchAssetTitle = "Test Test");

		SearchPortlets.viewUserResultDetails(
			pageName = "My Profile",
			userName = "Test Test");
	}

	@priority = "4"
	test ViewSortedSearchResults {
		JSONWebcontent.addWebContent(
			content = "Fruit",
			groupName = "Guest",
			title = "Apple");

		Pause(locator1 = "1000");

		JSONWebcontent.addWebContent(
			content = "Fruit",
			groupName = "Guest",
			title = "Banana");

		Pause(locator1 = "1000");

		JSONWebcontent.addWebContent(
			content = "Fruit",
			groupName = "Guest",
			title = "Cantaloupe");

		SearchPortlets.searchEmbedded(searchTerm = "Fruit");

		SearchPortlets.addWidgets(searchPortletList = "Sort");

		Refresh();

		SearchPortlets.chooseSortOption(sortOption = "Title");

		SearchResultPortlet.viewSearchResultsSpecificOrder(resultsList = "Apple,Banana,Cantaloupe");

		SearchPortlets.chooseSortOption(sortOption = "Created");

		SearchResultPortlet.viewSearchResultsSpecificOrder(resultsList = "Cantaloupe,Banana,Apple");

		SearchPortlets.chooseSortOption(sortOption = "Created (oldest first)");

		SearchResultPortlet.viewSearchResultsSpecificOrder(resultsList = "Apple,Banana,Cantaloupe");
	}

	test ViewSortWidgetConfigurationNewUI {
		property custom.properties = "feature.flag.LPS-134052=true";

		for (var title : list "Banana,Apple,Cherry") {
			JSONWebcontent.addWebContent(
				content = "Content ",
				groupName = "Guest",
				title = "${title}");
		}

		SearchPortlets.searchEmbedded(searchTerm = "Content");

		SearchPortlets.addWidgets(searchPortletList = "Sort");

		Refresh();

		Portlet.gotoPortletOptions(
			portletName = "Sort",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		AssertElementPresent(locator1 = "Button#TRASH_ENABLED");

		AssertElementNotPresent(locator1 = "Button#ADD_ROW");

		IFrame.closeFrame();

		SearchPortlets.chooseSortOption(sortOption = "Title");

		SearchResultPortlet.viewSearchResultsSpecificOrder(resultsList = "Apple,Banana,Cherry");
	}

	test ViewSortWidgetConfigurationOldUI {
		for (var title : list "Banana,Apple,Cherry") {
			JSONWebcontent.addWebContent(
				content = "Content ",
				groupName = "Guest",
				title = "${title}");
		}

		SearchPortlets.searchEmbedded(searchTerm = "Content");

		SearchPortlets.addWidgets(searchPortletList = "Sort");

		Refresh();

		Portlet.gotoPortletOptions(
			portletName = "Sort",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		AssertElementPresent(locator1 = "Button#ADD_ROW");

		AssertElementNotPresent(locator1 = "Button#TRASH_ENABLED");

		IFrame.closeFrame();

		SearchPortlets.chooseSortOption(sortOption = "Title");

		SearchResultPortlet.viewSearchResultsSpecificOrder(resultsList = "Apple,Banana,Cherry");
	}

	@priority = "4"
	test ViewStagedAndLiveContentInSearchResults {
		JSONGroup.addGroup(groupName = "Site Name");

		PagesAdmin.openPagesAdmin(siteURLKey = "Site Name");

		PagesAdmin.addPage(
			inheritChanges = "disable",
			pageName = "search",
			pageTemplateName = "Search");

		Navigator.openSiteURL(siteName = "Site Name");

		SearchPortlets.configureEmbeddedSearchBar(searchScope = "Let the User Choose");

		JSONStaging.enableLocalStaging(groupName = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		WebContent.addArticleCP(
			webContentContent = "WC Content",
			webContentTitle = "Apple");

		Navigator.openStagingSiteURL(siteName = "Site Name");

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Web Content Article");

		ProductMenu.gotoLiveSite(site = "Site Name");

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewSearchResultNotPresent(
			searchAssetTitle = "Apple",
			searchAssetType = "Web Content Article");

		SearchPortlets.chooseEmbeddedScope(searchScope = "Everything");

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewSearchResultNotPresent(
			searchAssetTitle = "Apple",
			searchAssetType = "Web Content Article");

		Navigator.gotoStagedView();

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

		WebContent.deleteCP(
			siteURLKey = "site-name-staging",
			webContentTitle = "Apple");

		Navigator.openStagingSiteURL(siteName = "Site Name");

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewSearchResultNotPresent(
			searchAssetTitle = "Apple",
			searchAssetType = "Web Content Article");

		ProductMenu.gotoLiveSite(site = "Site Name");

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Web Content Article");
	}

}