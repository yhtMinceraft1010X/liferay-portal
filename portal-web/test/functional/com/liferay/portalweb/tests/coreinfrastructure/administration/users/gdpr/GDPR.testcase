@component-name = "portal-user-management-and-portal-configuration"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Personal Data";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONUser.tearDownNonAdminUsers();

			BlogsEntry.tearDownCP();

			DMDocument.tearDownCP();

			MessageboardsThread.tearDownCP();

			WikiPage.tearDownCP();

			Site.tearDownCP();
		}
	}

	@priority = "4"
	test AnonymizeAllEntries {
		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		JSONWebcontent.addFolder(
			folderName = "WC GDPR Folder",
			groupName = "Guest",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		JSONWebcontent.addWebContent(
			content = "This is a WC Content for GDPR Anonymize testing.",
			folderName = "WC GDPR Folder",
			groupName = "Guest",
			title = "GDPR Anonymize Article in Folder",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		JSONWebcontent.addWebContent(
			content = "This is a WC Content for GDPR Anonymize testing.",
			groupName = "Guest",
			title = "GDPR Anonymize Article",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		JSONMBMessage.addMessage(
			groupName = "Guest",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Wiki");

		WikiNavigator.gotoNode(wikiNodeName = "Main");

		WikiNavigator.gotoAllPagesCP();

		WikiPage.addCP(
			wikiPageContent = "Wiki Page Content",
			wikiPageTitle = "Wiki Page Title");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.anonymizeDataViaReviewData(allApplications = "true");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		BlogsEntry.viewEntryTable(entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntryAuthorCP(
			entryAuthorFullName = "Anonymous Anonymous",
			entryTitle = "Blogs Entry Title");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		for (var entryTitle : list "WC GDPR Folder,GDPR Anonymize Article") {
			WebContent.viewEntryListAuthor(
				author = "Anonymous Anonymous",
				entryTitle = "${entryTitle}");
		}

		WebContentFolder.gotoCP(
			folderName = "WC GDPR Folder",
			webContentTitle = "WC GDPR Folder");

		WebContent.viewEntryListAuthor(
			author = "Anonymous Anonymous",
			entryTitle = "GDPR Anonymize Article in Folder");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.expandInfo();

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_UPLOADER_NO_PROFILE",
			value1 = "Anonymous Anonymous");

		MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "guest");

		MessageboardsThread.gotoPG(
			lastPostUserName = "Anonymous Anonymous",
			replyCount = "0",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Wiki");

		WikiNavigator.gotoNode(wikiNodeName = "Main");

		WikiNavigator.gotoAllPagesCP();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		var key_wikiPageTitle = "Wiki Page Title";
		var key_wikiPageUsername = "Anonymous Anonymous";

		AssertTextEquals(
			locator1 = "WikiTable#ALL_PAGES_USER",
			value1 = "Anonymous Anonymous");
	}

	@priority = "5"
	test AnonymizeEntryFromApplication {
		property portal.acceptance = "true";

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.anonymizeDataViaReviewData(application = "Documents and Media");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.expandInfo();

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_UPLOADER_NO_PROFILE",
			value1 = "Anonymous Anonymous");
	}

	@description = "This test asserts that all applications that do not have items are visible but disabled, test with Blogs, WC and MB entries."
	@priority = "2"
	test AppsWithNoEntriesAreDisabledInNewDataExport {
		task ("Given sign in as New User and add entries supported by GDPR") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");

			JSONWebcontent.addWebContent(
				content = "This is a WC Content for GDPR Export testing.",
				groupName = "Guest",
				title = "GDPR Export Article",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");

			JSONMBMessage.addMessage(
				groupName = "Guest",
				threadBody = "MB Thread Message Body",
				threadSubject = "MB Thread Message Subject",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");
		}

		task ("When sign in as Super User and add a data export progress to export all added entries") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			User.openUsersAdmin();

			User.exportPersonalDataCP(
				userFirstName = "userfn",
				userLastName = "userln");

			LexiconEntry.gotoAdd();

			PortletEntry.selectAll();

			task ("And assert the application with entries are selectable and application with no entries are displayed but not selectable") {
				for (var application : list "Blogs,Web Content,Message Boards") {
					AssertChecked(
						key_application = "${application}",
						locator1 = "ExportPersonalData#APPLICATION_CHECKBOX");
				}

				for (var application : list "Announcements,Contacts Center,Documents and Media,Forms,Wiki") {
					AssertNotChecked(
						key_application = "${application}",
						locator1 = "ExportPersonalData#APPLICATION_CHECKBOX",
						value1 = "disabled");
				}
			}

			AssertClick(
				locator1 = "Button#EXPORT",
				value1 = "Export");

			Alert.viewSuccessMessage();
		}

		task ("Then assert selected entries are exported, but no entry is exported for the unselectable items") {
			for (var tableEntry : list "Blogs,Web Content,Message Boards") {
				GDPR.viewEntryRowInApplicationCP(
					tableEntry = "${tableEntry}",
					tableEntryPartialTextList = "${tableEntry},Create Date,Completion Date");
			}

			for (var rowEntry : list "Announcements,Contacts Center,Documents and Media,Forms,Wiki") {
				LexiconEntry.viewNoEntry(rowEntry = "${rowEntry}");
			}
		}
	}

	@description = "This test anonymizes all entries from an application"
	@priority = "3"
	test CanAnonymizeAllEntriesFromAnApplication {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.jpeg,Document_2.docx,Document_3.mp3");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.anonymizeAllEntriesinApplicationCP(
			applicationItemsCount = "3",
			applications = "Documents and Media",
			totalItemsCount = "3");

		GDPR.viewNoEntryInApplicationCP(applications = "Documents and Media");

		for (var entryTitle : list "Document_1,Document_2,Document_3") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			DMNavigator.gotoDocumentCP(dmDocumentTitle = "${entryTitle}");

			DMDocument.expandInfo();

			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_UPLOADER_NO_PROFILE",
				value1 = "Anonymous Anonymous");
		}
	}

	@description = "This test anonymizes all staged data from an application, test with DM entries."
	@priority = "3"
	test CanAnonymizeAllStagedDataFromDM {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging Test Page");

		JSONUser.addUserToSite(
			groupName = "Site Name",
			userEmailAddress = "userea@liferay.com");

		JSONStaging.enableLocalStaging(groupName = "Site Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.jpeg,Document_2.docx,Document_3.mp3");

		Staging.publishToLiveNowViaPortletCP();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByApplications(
			applicationItemsCount = "6",
			applications = "Documents and Media",
			totalItemsCount = "6");

		for (var rowIndexNum : list "1,2,3") {
			GDPR.anonymizeTheSpecificEntry(rowIndexNumber = "${rowIndexNum}");
		}

		for (var entryTitle : list "Document_1,Document_2,Document_3") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

			DMNavigator.gotoDocumentCP(dmDocumentTitle = "${entryTitle}");

			DMDocument.expandInfo();

			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_UPLOADER_NO_PROFILE",
				value1 = "Anonymous Anonymous");
		}

		for (var entryTitle : list "Document_1,Document_2,Document_3") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

			DMNavigator.gotoDocumentCP(dmDocumentTitle = "${entryTitle}");

			DMDocument.expandInfo();

			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_UPLOADER_NO_PROFILE",
				value1 = "userfn userln");
		}
	}

	@description = "This test asserts a related asset can be anonymized from an application."
	@priority = "3"
	test CanAnonymizeARelatedAsset {
		task ("Login as user whose data will be deleted and add a blog entry and document to be added as Related Assets") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");

			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			DMDocument.addCP(
				dmDocumentFile = "Document_1.txt",
				dmDocumentTitle = "DM Document Title");
		}

		task ("Create a message board thread") {
			MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "guest");

			MessageboardsThread.addCP(
				threadBody = "MB Thread Message Body",
				threadSubject = "MB Thread Message Subject");
		}

		task ("Add the blog entry and document created earlier as Related Assets onto the message board thread") {
			MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "guest");

			LexiconEntry.gotoEntryMenuItemNoError(
				menuItem = "Edit",
				rowEntry = "MB Thread Message Subject");

			BlogsEntry.addRelatedAsset(
				assetTitle = "Blogs Entry Title",
				assetType = "Blogs Entry");

			BlogsEntry.addRelatedAsset(
				assetTitle = "DM Document Title",
				assetType = "Basic Document");

			PortletEntry.publish();

			for (var assetTitle : list "Blogs Entry Title,DM Document Title") {
				AssertElementPresent(
					key_relatedAssetTitle = "${assetTitle}",
					locator1 = "AssetRelatedAssets#ASSET_TITLE");
			}
		}

		task ("Log back in as the Super User and begin data erasure process") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			User.openUsersAdmin();

			User.deletePersonalDataCP(
				userFirstName = "userfn",
				userLastName = "userln");
		}

		task ("Anonymize only the Blogs Related Asset") {
			Click.clickNoWaitForVisible(
				key_selectData = "Blogs",
				locator1 = "DataErasure#REVIEW_DATA_SELECT");

			GDPR.anonymizeSingleEntryCP(rowEntry = "Blogs Entry Title");
		}

		task ("Assert that both the message board and document have not been anonymized") {
			MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "guest");

			LexiconEntry.gotoEntry(rowEntry = "MB Thread Message Subject");

			AssertTextEquals.assertPartialText(
				key_threadSubject = "MB Thread Message Subject",
				key_userName = "userfn userln",
				locator1 = "MessageBoardsThread#THREAD_USERNAME",
				value1 = "userfn userln");

			Click(
				key_relatedAssetTitle = "DM Document Title",
				locator1 = "AssetRelatedAssets#ASSET_TITLE");

			Button.click(button = "Info");

			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_UPLOADED_BY",
				value1 = "userfn userln");
		}

		task ("Assert that the blog post is a related asset with an anonymous author") {
			MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "guest");

			LexiconEntry.gotoEntry(rowEntry = "MB Thread Message Subject");

			Click(
				key_relatedAssetTitle = "Blogs Entry Title",
				locator1 = "AssetRelatedAssets#ASSET_TITLE");

			AssertTextEquals(
				key_entryTitle = "Blogs Entry Title",
				locator1 = "Blogs#WIDGET_VIEW_ENTRY_AUTHOR",
				value1 = "Anonymous Anonymous");
		}
	}

	@description = "This test anonymizes a staged and a live entry from an applciation, test with WC entries."
	@priority = "3"
	test CanAnonymizeASingleStagedAndLiveWebContentEntry {
		task ("Given Publish the staged web content entries to live as a new admin user") {
			JSONGroup.addGroup(groupName = "Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Staging Test Page");

			JSONUser.addUserToSite(
				groupName = "Site Name",
				userEmailAddress = "userea@liferay.com");

			JSONStaging.enableLocalStaging(groupName = "Site Name");

			for (var count : list "1,2,3") {
				JSONWebcontent.addWebContent(
					content = "WC Content ${count}",
					groupName = "Site Name (Staging)",
					site = "false",
					title = "GDPR Anonymize Article ${count}",
					userEmailAddress = "userea@liferay.com",
					userPassword = "test");
			}

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

			Staging.publishToLiveNowViaPortletCP();
		}

		task ("When sign in as Test Test and deactivate the user usersn.") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			User.openUsersAdmin();

			User.deletePersonalDataCP(
				userFirstName = "userfn",
				userLastName = "userln");

			task ("And select anonymize staged 'GDPR Anonymize Article 1' entry and lived 'GDPR Anonymize Article 2' entry") {
				GDPR.filterByApplications(
					applicationItemsCount = "6",
					applications = "Web Content",
					totalItemsCount = "6");

				for (var rowIndexNum : list "1,3") {
					GDPR.anonymizeTheSpecificEntry(rowIndexNumber = "${rowIndexNum}");
				}
			}
		}

		task ("Then assert staged 'GDPR Anonymize Article 1' entry and lived 'GDPR Anonymize Article 2' entry have been anonymized") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-staging");

			WebContent.viewEntryListAuthor(
				author = "Anonymous Anonymous",
				entryTitle = "GDPR Anonymize Article 1");

			for (var entryTitle : list "GDPR Anonymize Article 2,GDPR Anonymize Article 3") {
				WebContent.viewEntryListAuthor(
					author = "userfn userln",
					entryTitle = "${entryTitle}");
			}

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContent.viewEntryListAuthor(
				author = "Anonymous Anonymous",
				entryTitle = "GDPR Anonymize Article 2");

			for (var entryTitle : list "GDPR Anonymize Article 1,GDPR Anonymize Article 3") {
				WebContent.viewEntryListAuthor(
					author = "userfn userln",
					entryTitle = "${entryTitle}");
			}
		}
	}

	@description = "This test anonymizes entries from an application that has hierarachy"
	@ignore = "Test Stub"
	@priority = "3"
	test CanAnonymizeEntriesFromAnApplicationWithHierarchy {

		// TODO LRQA-50731 Data Erasure - Anonymize entries from an Application that has a hierarchy

	}

	@description = "LPS-77748"
	@priority = "3"
	test CanAnonymizeMultipleEntriesFromAnApplication {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMFolder.addCP(dmFolderName = "Folder1");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.jpeg,Document_2.docx,Document_3.mp3,Document_4.txt");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByApplications(
			applicationItemsCount = "5",
			applications = "Documents and Media",
			totalItemsCount = "5");

		GDPR.anonymizeMultipleEntriesCP(rowEntry = "Folder1,Document_2.docx");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_2");

		DMDocument.expandInfo();

		AssertTextEquals(
			locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_UPLOADER_NO_PROFILE",
			value1 = "Anonymous Anonymous");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMNavigator.gotoFolder(dmFolderName = "Folder1");

		Click.clickAt(locator1 = "Icon#INFO");

		AssertTextPresent(
			locator1 = "Sidebar#SIDEBAR",
			value1 = "Anonymous Anonymous");
	}

	@description = "This test anonymizes only one entry from an application via the Info panel"
	@priority = "2"
	test CanAnonymizeViaInfoPanel {
		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry 1");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry 2");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByApplications(
			applicationItemsCount = "2",
			applications = "Blogs",
			totalItemsCount = "2");

		GDPR.anonymizeSingleEntryViaInfoPanel(rowEntry = "Blogs Entry 1");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		BlogsEntry.viewEntryAuthorCP(
			entryAuthorFullName = "Anonymous Anonymous",
			entryTitle = "Blogs Entry 1");
	}

	@description = "This test deletes multiple staged data from an application, tests with Blogs and DM entries."
	@priority = "3"
	test CanDeleteAllStagedDataFromAnApplication {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging Test Page");

		JSONUser.addUserToSite(
			groupName = "Site Name",
			userEmailAddress = "userea@liferay.com");

		JSONStaging.enableLocalStaging(groupName = "Site Name");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title 1",
			groupName = "Site Name (Staging)",
			site = "false",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title 2",
			groupName = "Site Name (Staging)",
			site = "false",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name-staging");

		Staging.publishToLiveNowViaPortletCP();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.jpeg,Document_2.docx,Document_3.mp3");

		Staging.publishToLiveNowViaPortletCP();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByApplications(
			applicationItemsCount = "4",
			applications = "Blogs",
			totalItemsCount = "10");

		for (var rowIndexNum : list "1,2") {
			GDPR.deleteTheSpecificEntry(rowIndexNumber = "${rowIndexNum}");
		}

		GDPR.filterByApplications(
			applicationItemsCount = "6",
			applications = "Documents and Media",
			totalItemsCount = "8");

		for (var rowIndexNum : list "1,2,3") {
			GDPR.deleteTheSpecificEntry(rowIndexNumber = "${rowIndexNum}");
		}

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name-staging");

		Blogs.viewNoEntryCP();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name-staging");

		DMDocument.viewDefault();

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

		LexiconEntry.viewEntryName(rowEntry = "Blogs Entry Title 1");

		LexiconEntry.viewEntryName(rowEntry = "Blogs Entry Title 2");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		for (var rowEntry : list "Document_1,Document_2,Document_3") {
			LexiconEntry.viewEntryName(rowEntry = "${rowEntry}");
		}
	}

	@description = "This test deletes and anonymizes all entries from all applications"
	@priority = "3"
	test CanDeleteAndAnonymizeAllEntries {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.deleteAndAnonymizeAllEntriesCP(
			applicationItemsCount = "2",
			totalItemsCount = "2",
			userName = "userfn userln");
	}

	@description = "This test deletes export process"
	@priority = "3"
	test CanDeleteAnExportProcess {
		task ("Log in as new user and create data across several different applications") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");

			JSONWebcontent.addFolder(
				folderName = "WC GDPR Export Folder",
				groupName = "Guest",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");

			JSONWebcontent.addWebContent(
				content = "This is a WC Content for GDPR Export testing.",
				folderName = "WC GDPR Export Folder",
				groupName = "Guest",
				title = "GDPR Export Article in Folder",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");

			JSONWebcontent.addWebContent(
				content = "This is a WC Content for GDPR Export testing.",
				groupName = "Guest",
				title = "GDPR Export Article",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");

			Navigator.openURL();

			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentFile = "Document_1.txt",
				dmDocumentTitle = "DM Document Title");

			JSONMBMessage.addMessage(
				groupName = "Guest",
				threadBody = "MB Thread Message Body",
				threadSubject = "MB Thread Message Subject",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Wiki");

			WikiNavigator.gotoNode(wikiNodeName = "Main");

			WikiNavigator.gotoAllPagesCP();

			WikiPage.addCP(
				wikiPageContent = "Wiki Page Content",
				wikiPageTitle = "Wiki Page Title");
		}

		task ("Log back in as super user to begin data export process on new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			User.openUsersAdmin();

			User.exportPersonalDataCP(
				userFirstName = "userfn",
				userLastName = "userln");

			GDPR.addExportProcessCP(
				userFirstName = "userfn",
				userLastName = "userln");
		}

		task ("Delete all export processes and assert no processes can be found or listed") {
			GDPR.deleteExportedPersonalData(applications = "Web Content,Wiki,Message Boards,Blogs,Documents and Media");

			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No personal data export processes were found. Please create a data export process.");
		}
	}

	@description = "This test asserts a related asset can be deleted from an application."
	@priority = "3"
	test CanDeleteARelatedAsset {
		task ("Login as user whose data will be deleted and add a blog entry and document to be added as Related Assets") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");

			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			DMDocument.addCP(
				dmDocumentFile = "Document_1.txt",
				dmDocumentTitle = "DM Document Title");
		}

		task ("Create a message board thread") {
			MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "guest");

			MessageboardsThread.addCP(
				threadBody = "MB Thread Message Body",
				threadSubject = "MB Thread Message Subject");
		}

		task ("Add the blog entry and document created earlier as Related Assets onto the message board thread") {
			MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "guest");

			LexiconEntry.gotoEntryMenuItemNoError(
				menuItem = "Edit",
				rowEntry = "MB Thread Message Subject");

			BlogsEntry.addRelatedAsset(
				assetTitle = "Blogs Entry Title",
				assetType = "Blogs Entry");

			BlogsEntry.addRelatedAsset(
				assetTitle = "DM Document Title",
				assetType = "Basic Document");

			PortletEntry.publish();

			for (var assetTitle : list "Blogs Entry Title,DM Document Title") {
				AssertElementPresent(
					key_relatedAssetTitle = "${assetTitle}",
					locator1 = "AssetRelatedAssets#ASSET_TITLE");
			}
		}

		task ("Log back in as the Super User and begin data erasure process") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			User.openUsersAdmin();

			User.deletePersonalDataCP(
				userFirstName = "userfn",
				userLastName = "userln");
		}

		task ("Delete only the Document Related Asset") {
			Click.clickNoWaitForVisible(
				key_selectData = "Documents and Media",
				locator1 = "DataErasure#REVIEW_DATA_SELECT");

			GDPR.deleteSingleEntryCP(rowEntry = "Document_1.txt");
		}

		task ("Assert the Related Asset deleted from previous task no longer appears on the message board and the other asset is still displayed") {
			MessageBoardsAdmin.openMessageBoardsAdmin(siteURLKey = "guest");

			LexiconEntry.gotoEntry(rowEntry = "MB Thread Message Subject");

			AssertElementNotPresent(
				key_relatedAssetTitle = "DM Document Title",
				locator1 = "AssetRelatedAssets#ASSET_TITLE");

			AssertElementPresent(
				key_relatedAssetTitle = "Blogs Entry Title",
				locator1 = "AssetRelatedAssets#ASSET_TITLE");
		}
	}

	@description = "This test deletes a staged and a live entry from an application, tests with Blogs entries."
	@priority = "3"
	test CanDeleteASingleStagedAndLiveBlogsEntry {
		task ("Given Publish the staged blogs entries to live as a new admin user") {
			JSONGroup.addGroup(groupName = "Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Staging Test Page");

			JSONUser.addUserToSite(
				groupName = "Site Name",
				userEmailAddress = "userea@liferay.com");

			JSONStaging.enableLocalStaging(groupName = "Site Name");

			for (var count : list "1,2,3") {
				JSONBlog.addEntry(
					entryContent = "Blogs Entry Content",
					entryTitle = "Blogs Entry Title ${count}",
					groupName = "Site Name (Staging)",
					site = "false",
					userEmailAddress = "userea@liferay.com",
					userPassword = "test");
			}

			BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name-staging");

			Staging.publishToLiveNowViaPortletCP();
		}

		task ("When sign in as Test Test and deactivate the user usersn") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			User.openUsersAdmin();

			User.deletePersonalDataCP(
				userFirstName = "userfn",
				userLastName = "userln");

			task ("And deleted staged 'Blogs Entry Title 1' entry and lived 'Blogs Entry Title 2' entry") {
				GDPR.filterByApplications(
					applicationItemsCount = "6",
					applications = "Blogs",
					totalItemsCount = "6");

				for (var rowIndexNum : list "1,3") {
					GDPR.deleteTheSpecificEntry(rowIndexNumber = "${rowIndexNum}");
				}
			}
		}

		task ("Then assert staged 'Blogs Entry Title 1' entry and lived 'Blogs Entry Title 2' entry have been deleted") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name-staging");

			Blogs.viewEntryNotPresent(entryTitle = "Blogs Entry Title 1");

			for (var rowEntry : list "Blogs Entry Title 2,Blogs Entry Title 3") {
				LexiconEntry.viewEntryName(rowEntry = "${rowEntry}");
			}

			BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

			Blogs.viewEntryNotPresent(entryTitle = "Blogs Entry Title 2");

			for (var rowEntry : list "Blogs Entry Title 1,Blogs Entry Title 3") {
				LexiconEntry.viewEntryName(rowEntry = "${rowEntry}");
			}
		}
	}

	@description = "This test deletes entries from an application that has hierarchy"
	@ignore = "Test Stub"
	@priority = "3"
	test CanDeleteEntriesFromAnApplicationWithHierarchy {

		// TODO LRQA-50724 Data Erasure - Delete entries from an Application that has a hierarchy

	}

	@description = "This is a use case for LPS-77748. This test deletes multiple selected entries from a single application."
	@priority = "3"
	test CanDeleteMultipleEntriesFromAnApplication {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMFolder.addCP(dmFolderName = "Folder1");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.jpeg,Document_2.docx,Document_3.mp3,Document_4.txt");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByApplications(
			applicationItemsCount = "5",
			applications = "Documents and Media",
			totalItemsCount = "5");

		AssertTextPresent(value1 = "DLFOLDER");

		AssertTextPresent(value1 = "DLFILEENTRY");

		GDPR.deleteMultipleEntriesCP(rowEntry = "Folder1,Document_2.docx");

		GDPR.filterByApplications(
			applicationItemsCount = "3",
			applications = "Documents and Media",
			totalItemsCount = "3");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		AssertTextNotPresent(value1 = "Folder1");

		AssertTextNotPresent(value1 = "Document_2");
	}

	@description = "This test filters and orders data from the export data process"
	@priority = "2"
	test CanFilterAndOrderExportProcesses {
		task ("Sign in as New User and create data from various applications") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");

			Navigator.openURL();

			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentFile = "Document_1.txt",
				dmDocumentTitle = "DM Document Title");

			JSONMBMessage.addMessage(
				groupName = "Guest",
				threadBody = "MB Thread Message Body",
				threadSubject = "MB Thread Message Subject",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");
		}

		task ("Sign in as Super User and begin data export process") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			User.openUsersAdmin();

			User.exportPersonalDataCP(
				userFirstName = "userfn",
				userLastName = "userln");

			GDPR.addExportProcessCP(
				userFirstName = "userfn",
				userLastName = "userln");
		}

		task ("Filter by Successful and assert that only succesful exports are listed") {
			ManagementBar.setFilterAndOrder(orderBy = "Successful");

			AssertElementPresent(
				key_status = "Successful",
				locator1 = "ExportPersonalData#EXPORT_PROCESS_STATUS");

			AssertElementNotPresent(
				key_status = "In Progress",
				locator1 = "ExportPersonalData#EXPORT_PROCESS_STATUS");

			AssertElementNotPresent(
				key_status = "Failed",
				locator1 = "ExportPersonalData#EXPORT_PROCESS_STATUS");
		}

		task ("Filter by name and assert that data exports are listed alphabetically") {
			ManagementBar.toggleViewOrder(order = "list-down");

			ManagementBar.setFilterAndOrder(orderBy = "Name");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "1",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "Blogs");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "2",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "Documents and Media");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "3",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "Message Boards");
		}
	}

	@description = "This test filters application to Forms, Web Content and Contacts and views all filtered data in Review Data section"
	@priority = "3"
	test CanFilterAndViewData {
		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Forms");

		FormsAdminNavigator.gotoAddForm();

		Form.editName();

		Form.editDescription();

		Form.addTextField(fieldPositionNumber = "0");

		var fieldTextField = FormFields.getFieldName();

		Form.editFieldLabelMetal(fieldValue = "Text Field");

		Form.closeSidebar();

		Form.save();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Form Page");

		Navigator.gotoPage(pageName = "Form Page");

		Portlet.addPG(
			pageName = "Form Page",
			portletName = "Form");

		FormPortletNavigator.gotoSelectForm();

		FormPortletConfiguration.selectForm();

		PortletEntry.save();

		Navigator.gotoPage(pageName = "Form Page");

		FormPortlet.waitFormRenderer(text = "Submit");

		FormFields.viewTextLabel(
			fieldLabel = "Text Field",
			fieldName = "${fieldTextField}");

		FormFields.editText(
			fieldName = "${fieldTextField}",
			fieldValue = "Text Field Value");

		FormPortlet.submitSuccessfully();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Contacts Center Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Contacts Center Page",
			layoutTemplate = "1 Column");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "Contacts Center Page",
			widgetName = "Contacts Center");

		Navigator.gotoPage(pageName = "Contacts Center Page");

		ContactsCenter.addPG(
			contactName = "testfn testln",
			emailAddress = "test1@liferay.com");

		ContactsCenter.viewContactPG(
			contactName = "testfn testln",
			emailAddress = "test1@liferay.com");

		JSONWebcontent.addWebContent(
			content = "This is a WC Content for GDPR testing.",
			groupName = "Guest",
			title = "GDPR Article",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		Click.clickNoWaitForVisible(
			key_selectData = "Contacts Center",
			locator1 = "DataErasure#REVIEW_DATA_SELECT");

		AssertElementPresent(
			key_rowEntry = "testfn testln",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

		GDPR.filterByScope(scope = "Regular Sites");

		Click.clickNoWaitForVisible(
			key_selectData = "Forms",
			locator1 = "DataErasure#REVIEW_DATA_SELECT");

		AssertElementPresent(
			key_rowEntry = "Created Form Name",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

		Click.clickNoWaitForVisible(
			key_selectData = "Web Content",
			locator1 = "DataErasure#REVIEW_DATA_SELECT");

		Click.clickNoWaitForVisible(
			key_selectData = "JournalArticle",
			locator1 = "DataErasure#REVIEW_DATA_SELECT");

		AssertElementPresent(
			key_rowEntry = "gdpr-article",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");
	}

	@description = "LPS-77749"
	@priority = "2"
	test CanOrderDataInViewData {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "A",
			dmDocumentFile = "Document_1.jpeg",
			dmDocumentTitle = "Document_1");

		DMDocument.addCP(
			dmDocumentDescription = "B",
			dmDocumentFile = "Document_2.docx",
			dmDocumentTitle = "Document_2");

		DMDocument.addCP(
			dmDocumentDescription = "C",
			dmDocumentFile = "Document_3.txt",
			dmDocumentTitle = "Document_3");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByApplications(
			applicationItemsCount = "3",
			applications = "Documents and Media",
			totalItemsCount = "3");

		for (var orderBy : list "Name,Description") {
			ManagementBar.setFilterAndOrder(orderBy = "${orderBy}");

			ManagementBar.toggleViewOrder(order = "list-up");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "1",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "Document_3.txt");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "3",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "Document_1.jpeg");

			ManagementBar.toggleViewOrder(order = "list-down");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "1",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "Document_1.jpeg");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "3",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "Document_3.txt");
		}
	}

	@description = "This test publishes a staged entry to live after deleting live entry, test with Blog entries."
	@priority = "3"
	test CanPublishToLiveADeletedLiveEntry {
		task ("Given add staged entry with related asset and publish to live this entry.") {
			JSONGroup.addGroup(groupName = "Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Staging Test Page");

			JSONUser.addUserToSite(
				groupName = "Site Name",
				userEmailAddress = "userea@liferay.com");

			JSONStaging.enableLocalStaging(groupName = "Site Name");

			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Site Name (Staging)",
				site = "false",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");

			BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name-staging");

			Staging.publishViaSAP(
				confirmMessage = "Are you sure you want to publish to live?",
				entry = "Blogs Entry Title");
		}

		task ("When delete only the live entry using Personal Data Erasure.") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			User.openUsersAdmin();

			User.deletePersonalDataCP(
				userFirstName = "userfn",
				userLastName = "userln");

			GDPR.filterByScope(scope = "Regular Sites");

			GDPR.filterByApplications(
				applicationItemsCount = "2",
				applications = "Blogs",
				totalItemsCount = "2");

			GDPR.deleteTheSpecificEntry(rowIndexNumber = "2");

			task ("And assert entry is deleted from live.") {
				BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

				Blogs.viewNoEntryCP();
			}

			task ("And publish to live entry again.") {
				BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name-staging");

				Staging.publishViaSAP(
					confirmMessage = "Are you sure you want to publish to live?",
					entry = "Blogs Entry Title");
			}
		}

		task ("Then assert entry is present on live.") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

			Blogs.viewEntryPresent(entryTitle = "Blogs Entry Title");
		}
	}

	@priority = "4"
	test DeleteAllEntriesFromInstanceScope {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Announcements Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Announcements Page",
			layoutTemplate = "1 Column");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "Announcements Page",
			widgetName = "Announcements");

		JSONAnnouncement.addAnnouncement(
			announcementContent = "This is an announcement added via json.",
			announcementTitle = "Announcement Entry Title",
			announcementURL = "http://www.liferay.com",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		Navigator.gotoPage(pageName = "Announcements Page");

		AnnouncementsEntry.viewPG(
			distributionScope = "General",
			entryContent = "This is an announcement added via json.",
			entryTitle = "Announcement Entry Title");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByScope(scope = "Instance");

		GDPR.filterByApplications(
			applicationItemsCount = "1",
			applications = "All Applications",
			totalItemsCount = "1");

		GDPR.deleteAllEntriesCP();

		Navigator.gotoPage(pageName = "Announcements Page");

		AnnouncementsEntry.viewNoPG(entryTitle = "Announcement Entry Title");
	}

	@priority = "4"
	test DeleteAllEntriesFromPersonalSiteScope {
		property test.name.skip.portal.instance = "GDPR#DeleteEntryFromPersonalSiteScope";

		UserBar.gotoDropdownItem(dropdownItem = "My Profile");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry in My Profile");

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "My Dashboard");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Blogs");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry in My Dashboard");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Message Boards");

		MessageboardsThread.addCP(
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject in My Dashboard");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByScope(scope = "Personal Site");

		GDPR.filterByApplications(
			applicationItemsCount = "4",
			applications = "All Applications",
			totalItemsCount = "4");

		GDPR.deleteAllEntriesCP();

		GDPR.viewNoEntryInApplicationCP(applications = "All Applications");
	}

	@priority = "4"
	test DeleteAllEntriesFromRegularSitesScope {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Site Page 1");

		JSONUser.addUserToSite(
			groupName = "Site Name",
			userEmailAddress = "userea@liferay.com");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			groupName = "Site Name",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByScope(scope = "Regular Sites");

		GDPR.filterByApplications(
			applicationItemsCount = "1",
			applications = "All Applications",
			totalItemsCount = "1");

		GDPR.deleteAllEntriesCP();

		BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

		LexiconEntry.viewNoEntry(rowEntry = "Blogs Entry Title");
	}

	@priority = "5"
	test DeleteEntryFromApplication {
		property portal.acceptance = "true";

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByApplications(
			applicationItemsCount = "1",
			applications = "Blogs",
			totalItemsCount = "1");

		GDPR.deleteSingleEntryCP(rowEntry = "Blogs Entry Title");

		GDPR.viewNoEntryInApplicationCP(applications = "Blogs");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		LexiconEntry.viewNoEntry(rowEntry = "Blogs Entry Title");
	}

	@priority = "4"
	test EditEntryFromApplication {
		ProductMenuHelper.openProductMenu();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByApplications(
			applicationItemsCount = "1",
			applications = "Documents and Media",
			totalItemsCount = "1");

		GDPR.editEntryCP(
			applicationsTitle = "DM Document Title",
			rowEntry = "Document_1.txt");

		DMDocument.editCmd(
			dmDocumentDescriptionEdit = "Edit DM Document Description",
			dmDocumentTitleEdit = "Edit DM Document Title");

		Button.clickPublish();

		AssertElementPresent(
			key_firstName = "userfn",
			key_lastName = "userln",
			locator1 = "DataErasure#HEADER");

		GDPR.viewEntryRowInApplicationCP(
			tableEntry = "Document_1.txt",
			tableEntryPartialTextList = "Document_1.txt,Edit DM Document Description");
	}

	@description = "Test is asserting that entries are still anonymous after activating user."
	@priority = "3"
	test EntriesAreStillAnonymousAfterActivatingUser {
		task ("Sign in as User and add DM folder1 and Document_2.docx.") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			DMFolder.addCP(dmFolderName = "Folder1");

			DMDocument.addCP(
				dmDocumentFile = "Document_2.docx",
				dmDocumentTitle = "Document_2");
		}

		task ("Sign in as Test Test and deactivate the user usersn.") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			User.openUsersAdmin();

			User.deletePersonalDataCP(
				userFirstName = "userfn",
				userLastName = "userln");
		}

		task ("Select multiple entries and anonymize Folder1 and Document_2.docx.") {
			GDPR.filterByApplications(
				applicationItemsCount = "2",
				applications = "Documents and Media",
				totalItemsCount = "2");

			GDPR.anonymizeMultipleEntriesCP(rowEntry = "Folder1,Document_2.docx");
		}

		task ("Assert Folder1 and Document_2.docx have been anonymized.") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_2");

			DMDocument.expandInfo();

			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_UPLOADER_NO_PROFILE",
				value1 = "Anonymous Anonymous");

			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			DMNavigator.gotoFolder(dmFolderName = "Folder1");

			Click.clickAt(locator1 = "Icon#INFO");

			AssertTextPresent(
				locator1 = "Sidebar#SIDEBAR",
				value1 = "Anonymous Anonymous");
		}

		task ("Activate user usersn from inactive list.") {
			User.openUsersAdmin();

			User.activateCP(
				userName = "userfn userln",
				userScreenName = "usersn");
		}

		task ("Assert Folder1 and Document_2.docx are still anonymous.") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_2");

			DMDocument.expandInfo();

			AssertTextEquals(
				locator1 = "DocumentsAndMediaDocument#DOCUMENT_INFO_UPLOADER_NO_PROFILE",
				value1 = "Anonymous Anonymous");

			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			DMNavigator.gotoFolder(dmFolderName = "Folder1");

			Click.clickAt(locator1 = "Icon#INFO");

			AssertTextPresent(
				locator1 = "Sidebar#SIDEBAR",
				value1 = "Anonymous Anonymous");
		}
	}

	@description = "LPS-77750 This test asserts that the details of the entry display when user clicks on the Info icon."
	@priority = "3"
	test EntryDetailsDisplayInInfoPanel {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMFolder.addCP(
			dmFolderDescription = "Folder_1 Description",
			dmFolderName = "Folder_1");

		DMDocument.addCP(
			dmDocumentDescription = "Document_1 Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "Document_1 Title");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByApplications(
			applicationItemsCount = "2",
			applications = "Documents and Media",
			totalItemsCount = "2");

		AssertTextPresent(value1 = "DLFOLDER");

		AssertTextPresent(value1 = "DLFILEENTRY");

		LexiconEntry.selectEntry(rowEntry = "Folder_1");

		Click.clickAt(locator1 = "Icon#INFO");

		for (var infoPanel : list "Folder_1,Folder_1 Description") {
			AssertTextEquals.assertPartialText(
				locator1 = "DocumentsAndMedia#SIDEBAR_INFO_ACTIVE",
				value1 = "${infoPanel}");
		}

		LexiconEntry.selectEntry(rowEntry = "Document_1.txt");

		Uncheck(
			key_rowEntry = "Folder_1",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_CHECKBOX");

		for (var infoPanel : list "Document_1 Title,Document_1 Description,txt") {
			AssertTextEquals.assertPartialText(
				locator1 = "DocumentsAndMedia#SIDEBAR_INFO_ACTIVE",
				value1 = "${infoPanel}");
		}
	}

	@priority = "4"
	test ExportAllEntries {
		property portal.acceptance = "true";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Announcements Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Announcements Page",
			layoutTemplate = "1 Column");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "Announcements Page",
			widgetName = "Announcements");

		JSONAnnouncement.addAnnouncement(
			announcementContent = "Announcements Entry Content",
			announcementTitle = "Announcements Entry Title",
			announcementURL = "http://www.liferay.com",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		Navigator.gotoPage(pageName = "Announcements Page");

		AnnouncementsEntry.viewPG(
			distributionScope = "General",
			entryContent = "Announcements Entry Content",
			entryTitle = "Announcements Entry Title");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Contacts Center Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Contacts Center Page",
			layoutTemplate = "1 Column");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "Contacts Center Page",
			widgetName = "Contacts Center");

		Navigator.gotoPage(pageName = "Contacts Center Page");

		ContactsCenter.addPG(
			contactName = "test1",
			emailAddress = "test1@liferay.com");

		ContactsCenter.viewContactPG(
			contactName = "test1",
			emailAddress = "test1@liferay.com");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		JSONWebcontent.addFolder(
			folderName = "WC GDPR Export Folder",
			groupName = "Guest",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		JSONWebcontent.addWebContent(
			content = "This is a WC Content for GDPR Export testing.",
			folderName = "WC GDPR Export Folder",
			groupName = "Guest",
			title = "GDPR Export Article in Folder",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		JSONWebcontent.addWebContent(
			content = "This is a WC Content for GDPR Export testing.",
			groupName = "Guest",
			title = "GDPR Export Article",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		Navigator.openURL();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		JSONMBMessage.addMessage(
			groupName = "Guest",
			threadBody = "MB Thread Message Body",
			threadSubject = "MB Thread Message Subject",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Wiki");

		WikiNavigator.gotoNode(wikiNodeName = "Main");

		WikiNavigator.gotoAllPagesCP();

		WikiPage.addCP(
			wikiPageContent = "Wiki Page Content",
			wikiPageTitle = "Wiki Page Title");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.exportPersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.addExportProcessCP(
			applications = "Web Content,Wiki,Message Boards,Contacts Center,Blogs,Announcements,Documents and Media",
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.downloadExportedPersonalData(applications = "Web Content,Wiki,Message Boards,Contacts Center,Blogs,Announcements,Documents and Media");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");

		AssertConsoleTextNotPresent(value1 = "com.liferay.portal.kernel.exception.SystemException");

		for (var tableEntry : list "Web Content,Wiki,Message Boards,Contacts Center,Blogs,Announcements,Documents and Media") {
			GDPR.viewEntryRowInApplicationCP(
				tableEntry = "${tableEntry}",
				tableEntryPartialTextList = "${tableEntry},Create Date,Completion Date");
		}
	}

	@description = "This test changes pagination and assert export processes display properly."
	@priority = "2"
	test PaginationWorksInExportPersonalData {
		task ("Log in as new user and create data across several different applications") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");

			JSONWebcontent.addFolder(
				folderName = "WC GDPR Export Folder",
				groupName = "Guest",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");

			JSONWebcontent.addWebContent(
				content = "This is a WC Content for GDPR Export testing.",
				folderName = "WC GDPR Export Folder",
				groupName = "Guest",
				title = "GDPR Export Article in Folder",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");

			JSONWebcontent.addWebContent(
				content = "This is a WC Content for GDPR Export testing.",
				groupName = "Guest",
				title = "GDPR Export Article",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");

			Navigator.openURL();

			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentFile = "Document_1.txt",
				dmDocumentTitle = "DM Document Title");

			JSONMBMessage.addMessage(
				groupName = "Guest",
				threadBody = "MB Thread Message Body",
				threadSubject = "MB Thread Message Subject",
				userEmailAddress = "userea@liferay.com",
				userPassword = "test");

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Wiki");

			WikiNavigator.gotoNode(wikiNodeName = "Main");

			WikiNavigator.gotoAllPagesCP();

			WikiPage.addCP(
				wikiPageContent = "Wiki Page Content",
				wikiPageTitle = "Wiki Page Title");
		}

		task ("Log back in as super user to begin data export process on new user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			User.openUsersAdmin();

			User.exportPersonalDataCP(
				userFirstName = "userfn",
				userLastName = "userln");

			GDPR.addExportProcessCP(
				userFirstName = "userfn",
				userLastName = "userln");
		}

		task ("Order by Name in descending order") {
			ManagementBar.setFilterAndOrder(orderBy = "Name");

			ManagementBar.toggleViewOrder(order = "list-down");
		}

		task ("Assert pagination can be changed and correct number of entries are listed") {
			for (var listEntries : list "4,8,20,40,60") {
				Pagination.changePagination(itemsPerPage = "${listEntries}");

				if ("${listEntries}" == "4") {
					Pagination.viewResults(results = "Showing 1 to 4 of 5 entries.");

					for (var exportEntries : list "Blogs,Documents and Media,Message Boards,Web Content") {
						LexiconEntry.viewEntryName(rowEntry = "${exportEntries}");
					}

					LexiconEntry.viewNoEntry(rowEntry = "Wiki");

					Click(locator1 = "Pagination#NEXT_LINK");

					Pagination.viewResults(results = "Showing 5 to 5 of 5 entries.");

					LexiconEntry.viewEntryName(rowEntry = "Wiki");

					for (var exportEntries : list "Blogs,Documents and Media,Message Boards,Web Content") {
						LexiconEntry.viewNoEntry(rowEntry = "${exportEntries}");
					}
				}
				else {
					Pagination.viewResults(results = "Showing 1 to 5 of 5 entries.");

					for (var allEntries : list "Blogs,Documents and Media,Message Boards,Web Content,Wiki") {
						LexiconEntry.viewEntryName(rowEntry = "${allEntries}");
					}
				}
			}
		}
	}

	@description = "This test changes pagination and assert entries display properly."
	@priority = "2"
	test PaginationWorksInNewDataExport {
		property portal.release = "false";

		task ("Bring up the New Data Export page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			User.openUsersAdmin();

			User.exportPersonalDataCP(
				userFirstName = "userfn",
				userLastName = "userln");

			LexiconEntry.gotoAdd();

			WaitForElementPresent(
				key_firstName = "userfn",
				key_lastName = "userln",
				locator1 = "ExportPersonalData#ADD_PROCESS_HEADER");
		}

		task ("Assert pagination can be changed and correct number of entries are listed") {
			for (var listEntries : list "4,8,20,40,60") {
				Pagination.changePagination(itemsPerPage = "${listEntries}");

				if ("${listEntries}" == "4") {
					Pagination.viewResults(results = "Showing 1 to 4 of 10 entries.");

					for (var listedEntries : list "Announcements,Blogs,Bookmarks,Contacts Center") {
						LexiconEntry.viewEntryName(rowEntry = "${listedEntries}");
					}

					for (var unlistedEntries : list "Documents and Media,Forms,Web Content,Message Boards,com.liferay.portal.tools.service.builder.test.uad,Wiki") {
						LexiconEntry.viewNoEntry(rowEntry = "${unlistedEntries}");
					}

					Click(locator1 = "Pagination#NEXT_LINK");

					Pagination.viewResults(results = "Showing 5 to 8 of 10 entries.");

					for (var listedEntries : list "Documents and Media,Forms,Web Content,Message Boards") {
						LexiconEntry.viewEntryName(rowEntry = "${listedEntries}");
					}

					for (var unlistedEntries : list "Announcements,Blogs,Bookmarks,Contacts Center,com.liferay.portal.tools.service.builder.test.uad,Wiki") {
						LexiconEntry.viewNoEntry(rowEntry = "${unlistedEntries}");
					}
				}
				else if ("${listEntries}" == "8") {
					if (IsElementPresent(locator1 = "Pagination#RESULTS", results = "Showing 8 to 10 of 10 entries.")) {
						Click(locator1 = "Pagination#PREVIOUS_LINK");
					}

					Pagination.viewResults(results = "Showing 1 to 8 of 10 entries.");

					for (var listedEntries : list "Announcements,Blogs,Bookmarks,Contacts Center,Documents and Media,Forms,Web Content,Message Boards") {
						LexiconEntry.viewEntryName(rowEntry = "${listedEntries}");
					}
				}
				else {
					Pagination.viewResults(results = "Showing 1 to 10 of 10 entries.");

					for (var allEntries : list "Announcements,Blogs,Bookmarks,Contacts Center,Documents and Media,Forms,Web Content,Message Boards,com.liferay.portal.tools.service.builder.test.uad,Wiki") {
						LexiconEntry.viewEntryName(rowEntry = "${allEntries}");
					}
				}
			}
		}
	}

	@description = "LPS-91766. This test asserts that the Remaining Items count under Status Summary is accurate"
	@priority = "3"
	test RemainingItemsCountIsAccurate {
		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.jpeg,Document_2.docx,Document_3.mp3,Document_4.txt");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title 2",
			userEmailAddress = "userea@liferay.com",
			userPassword = "test");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		User.openUsersAdmin();

		User.deletePersonalDataCP(
			userFirstName = "userfn",
			userLastName = "userln");

		GDPR.filterByApplications(
			applicationItemsCount = "6",
			applications = "All Applications",
			totalItemsCount = "6");

		for (var applicationsCount : list "Blogs (2),Documents and Media (4)") {
			AssertTextPresent(value1 = "${applicationsCount}");
		}

		GDPR.deleteAllEntriesCP();

		AssertElementPresent(
			key_tab = "Auto Anonymize Data",
			locator1 = "NavTab#ACTIVE_TAB_LINK");

		GDPR.viewNoEntryInApplicationCP(applications = "All Applications");
	}

}