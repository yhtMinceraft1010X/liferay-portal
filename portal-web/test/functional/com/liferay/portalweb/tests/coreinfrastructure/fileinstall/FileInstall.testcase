@component-name = "portal-file-install"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "File Install";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = "3"
	test CustomizeFileFilter {
		property custom.properties = "module.framework.file.install.filter=^(?!test-theme).*\\..*";
		property test.name.skip.portal.instance = "FileInstall#CustomizeFileFilter";

		GogoShell.openGogoShellAdmin();

		AssertConsoleTextNotPresent(value1 = "STARTED test-theme_");

		GogoShell.executeCommand(commandName = "lb | grep test-theme");

		GogoShell.viewOutput(outputContent = "false");

		GogoShell.viewNoOutput(outputContent = "test-theme");

		GogoShell.viewNoOutput(outputContent = "Active");
	}

	@priority = "3"
	test CustomizeNewWatchedDirectory {
		property custom.properties = "module.framework.auto.deploy.dirs=${liferay.home}/alt-deploy/osgi/portal,${liferay.home}/osgi/modules,${liferay.home}/osgi/war,${liferay.home}/osgi/configs,${liferay.home}/osgi/marketplace";
		property test.name.skip.portal.instance = "FileInstall#CustomizeNewWatchedDirectory";

		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		Clustering.deployClusteringModule(
			deployDir = "${liferayHome}/alt-deploy",
			nodePort = "8080");

		WaitForConsoleTextPresent(value1 = "STARTED com.liferay.portal.cluster.multiple.sample.web_");

		GogoShell.openGogoShellAdmin();

		GogoShell.executeCommand(commandName = "lb | grep 'Cluster Multiple Sample'");

		GogoShell.viewOutput(outputContent = "Cluster Multiple Sample");

		GogoShell.viewOutput(outputContent = "Active");
	}

	@priority = "3"
	test CustomizeRecursiveSubdirectoryMode {
		property custom.properties = "module.framework.file.install.subdir.mode=recurse";
		property test.name.skip.portal.instance = "FileInstall#CustomizeRecursiveSubdirectoryMode";

		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		Clustering.deployClusteringModule(
			deployDir = "${liferayHome}/osgi/portal",
			nodePort = "8080");

		WaitForConsoleTextPresent(value1 = "STARTED com.liferay.portal.cluster.multiple.sample.web_");

		GogoShell.openGogoShellAdmin();

		GogoShell.executeCommand(commandName = "lb | grep 'Cluster Multiple Sample'");

		GogoShell.viewOutput(outputContent = "Cluster Multiple Sample");

		GogoShell.viewOutput(outputContent = "Active");
	}

	@priority = "3"
	test CustomizeSkipSubdirectoryMode {
		property custom.properties = "module.framework.file.install.subdir.mode=skip";
		property test.name.skip.portal.instance = "FileInstall#CustomizeSkipSubdirectoryMode";

		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		Clustering.deployClusteringModule(
			deployDir = "${liferayHome}/osgi/portal",
			nodePort = "8080");

		GogoShell.openGogoShellAdmin();

		AssertConsoleTextNotPresent(value1 = "STARTED com.liferay.portal.cluster.multiple.sample.web_");

		GogoShell.executeCommand(commandName = "lb | grep 'Cluster Multiple Sample'");

		GogoShell.viewOutput(outputContent = "false");

		GogoShell.viewNoOutput(outputContent = "Cluster Multiple Sample");

		GogoShell.viewNoOutput(outputContent = "Active");
	}

	@priority = "4"
	test InstallOSGiConfigWithHiddenFile {
		property create.osgi.hidden.file = "true";
		property test.assert.warning.exceptions = "true";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Web Content",
			configurationName = "File Uploads",
			configurationScope = "System Scope");
	}

	@priority = "4"
	test UninstallJarOffline {
		property test.name.skip.portal.instance = "FileInstall#UninstallJarOffline";

		Clustering.deployClusteringModule(nodePort = "8080");

		GogoShell.openGogoShellAdmin();

		WaitForConsoleTextPresent(value1 = "STARTED com.liferay.portal.cluster.multiple.sample.web_");

		GogoShell.executeCommand(commandName = "lb | grep 'Cluster Multiple Sample'");

		GogoShell.viewOutput(outputContent = "Cluster Multiple Sample");

		GogoShell.viewOutput(outputContent = "Active");

		Portlet.shutdownServer();

		FileInstall.deletePortalJarOffline(jarFile = "com.liferay.portal.cluster.multiple.sample.web.jar");

		Portlet.startServer(keepOsGiState = "true");

		GogoShell.openGogoShellAdmin();

		// Ignore assert until LPS-146449 is resolved

		//AssertConsoleTextNotPresent(value1 = "STARTED com.liferay.portal.cluster.multiple.sample.web_");

		GogoShell.executeCommand(commandName = "lb | grep 'Cluster Multiple Sample'");

		GogoShell.viewOutput(outputContent = "false");

		GogoShell.viewNoOutput(outputContent = "Cluster Multiple Sample");

		GogoShell.viewNoOutput(outputContent = "Active");
	}

	@description = "Failing due to LPS-122119."
	@ignore = "true"
	@priority = "4"
	test UninstallWarOffline {
		property test.name.skip.portal.instance = "FileInstall#UninstallWarOffline";

		FileInstall.deployFileOnServer(jarFile = "test-theme.war");

		GogoShell.openGogoShellAdmin();

		WaitForConsoleTextPresent(value1 = "STARTED test-theme_");

		GogoShell.executeCommand(commandName = "lb | grep test-theme");

		GogoShell.viewOutput(outputContent = "test-theme");

		GogoShell.viewOutput(outputContent = "Active");

		Portlet.shutdownServer();

		FileInstall.deleteWarOffline(warFile = "test-theme.war");

		Portlet.startServer(keepOsGiState = "true");

		GogoShell.openGogoShellAdmin();

		AssertConsoleTextNotPresent(value1 = "STARTED test-theme_");

		GogoShell.executeCommand(commandName = "lb | grep test-theme");

		GogoShell.viewOutput(outputContent = "false");

		GogoShell.viewNoOutput(outputContent = "test-theme");

		GogoShell.viewNoOutput(outputContent = "Active");
	}

}