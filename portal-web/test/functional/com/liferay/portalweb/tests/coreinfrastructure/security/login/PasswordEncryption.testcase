@component-name = "portal-security"
definition {

	property app.server.types = "jboss,tcserver,tomcat,weblogic,websphere,wildfly";
	property database.types = "db2,hypersonic,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Login";

	setUp {
		task ("Setup: Setup portal instance") {
			TestCase.setUpPortalInstance();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to BCRYPT10."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToBCRYPT10 {
		property custom.properties = "passwords.encryption.algorithm=BCRYPT/10";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToBCRYPT10";

		task ("Login and go to control panel - roles") {
			User.firstLoginUI();

			Role.openRolesAdmin();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to BCRYPT10 to virtual instance."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToBCRYPT10toVirtualInstance {
		property custom.properties = "passwords.encryption.algorithm=BCRYPT/10";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToBCRYPT10toVirtualInstance";

		task ("Given: Instance admin is login") {
			User.firstLoginUI();
		}

		task ("When: Instance admin adds a virtual instance as able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Then: We can to login to the new Virtual Instance at able.com:8080 successfully") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			Role.openRolesAdmin();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to MD2."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToMD2 {
		property custom.properties = "passwords.encryption.algorithm=MD2";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToMD2";

		task ("Login and go to control panel - roles") {
			User.firstLoginUI();

			Role.openRolesAdmin();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to MD2 to virtual instance."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToMD2toVirtualInstance {
		property custom.properties = "passwords.encryption.algorithm=MD2";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToMD2toVirtualInstance";

		task ("Given: Instance admin is login") {
			User.firstLoginUI();
		}

		task ("When: Instance admin adds a virtual instance as able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Then: We can to login to the new Virtual Instance at able.com:8080 successfully") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			Role.openRolesAdmin();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to MD5."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToMD5 {
		property custom.properties = "passwords.encryption.algorithm=MD5";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToMD5";

		task ("Login and go to control panel - roles") {
			User.firstLoginUI();

			Role.openRolesAdmin();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to MD5 to virtual instance."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToMD5toVirtualInstance {
		property custom.properties = "passwords.encryption.algorithm=MD5";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToMD5toVirtualInstance";

		task ("Given: Instance admin is login") {
			User.firstLoginUI();
		}

		task ("When: Instance admin adds a virtual instance as able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Then: We can to login to the new Virtual Instance at able.com:8080 successfully") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			Role.openRolesAdmin();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to NONE."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToNONE {
		property custom.properties = "passwords.encryption.algorithm=NONE";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToNONE";

		task ("Login and go to control panel - roles") {
			User.firstLoginUI();

			Role.openRolesAdmin();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to NONE to virtual instance."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToNONEtoVirtualInstance {
		property custom.properties = "passwords.encryption.algorithm=NONE";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToNONEtoVirtualInstance";

		task ("Given: Instance admin is login") {
			User.firstLoginUI();
		}

		task ("When: Instance admin adds a virtual instance as able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Then: We can to login to the new Virtual Instance at able.com:8080 successfully") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			Role.openRolesAdmin();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to PBKDF2."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToPBKDF2 {
		property custom.properties = "passwords.encryption.algorithm=PBKDF2WithHmacSHA1/160/720000";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToPBKDF2";

		task ("Login and go to control panel - roles") {
			User.firstLoginUI();

			Role.openRolesAdmin();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to PBKDF2 to virtual instance."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToPBKDF2toVirtualInstance {
		property custom.properties = "passwords.encryption.algorithm=PBKDF2WithHmacSHA1/160/720000";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToPBKDF2toVirtualInstance";

		task ("Given: Instance admin is login") {
			User.firstLoginUI();
		}

		task ("When: Instance admin adds a virtual instance as able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Then: We can to login to the new Virtual Instance at able.com:8080 successfully") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			Role.openRolesAdmin();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to SHA."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToSHA {
		property custom.properties = "passwords.encryption.algorithm=SHA";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToSHA";

		task ("Login and go to control panel - roles") {
			User.firstLoginUI();

			Role.openRolesAdmin();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to SHA-256."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToSHA256 {
		property custom.properties = "passwords.encryption.algorithm=SHA-256";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToSHA256";

		task ("Login and go to control panel - roles") {
			User.firstLoginUI();

			Role.openRolesAdmin();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to SHA-256 to virtual instance."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToSHA256toVirtualInstance {
		property custom.properties = "passwords.encryption.algorithm=SHA-256";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToSHA256toVirtualInstance";

		task ("Given: Instance admin is login") {
			User.firstLoginUI();
		}

		task ("When: Instance admin adds a virtual instance as able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Then: We can to login to the new Virtual Instance at able.com:8080 successfully") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			Role.openRolesAdmin();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to SHA-384."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToSHA384 {
		property custom.properties = "passwords.encryption.algorithm=SHA-384";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToSHA384";

		task ("Login and go to control panel - roles") {
			User.firstLoginUI();

			Role.openRolesAdmin();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to SHA-384 to virtual instance."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToSHA384LoginWithPasswordEncryptionSetToSHA384toVirtualInstance {
		property custom.properties = "passwords.encryption.algorithm=SHA-384";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToSHA384toVirtualInstance";

		task ("Given: Instance admin is login") {
			User.firstLoginUI();
		}

		task ("When: Instance admin adds a virtual instance as able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Then: We can to login to the new Virtual Instance at able.com:8080 successfully") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			Role.openRolesAdmin();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to SHA to virtual instance."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToSHAtoVirtualInstance {
		property custom.properties = "passwords.encryption.algorithm=SHA";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToSHAtoVirtualInstance";

		task ("Given: Instance admin is login") {
			User.firstLoginUI();
		}

		task ("When: Instance admin adds a virtual instance as able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Then: We can to login to the new Virtual Instance at able.com:8080 successfully") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			Role.openRolesAdmin();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to SSHA."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToSSHA {
		property custom.properties = "passwords.encryption.algorithm=SSHA";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToSSHA";

		task ("Login and go to control panel - roles") {
			User.firstLoginUI();

			Role.openRolesAdmin();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to SSHA to virtual instance."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToSSHAtoVirtualInstance {
		property custom.properties = "passwords.encryption.algorithm=SSHA";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToSSHAtoVirtualInstance";

		task ("Given: Instance admin is login") {
			User.firstLoginUI();
		}

		task ("When: Instance admin adds a virtual instance as able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Then: We can to login to the new Virtual Instance at able.com:8080 successfully") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			Role.openRolesAdmin();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to UFC-CRYPT."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToUFCCRYPT {
		property custom.properties = "passwords.encryption.algorithm=UFC-CRYPT";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToUFCCRYPT";

		task ("Login and go to control panel - roles") {
			User.firstLoginUI();

			Role.openRolesAdmin();
		}
	}

	@description = "This is a use case for LPS-150355. Users could login through the UI with password encryption set to UFC-CRYPT to virtual instance."
	@priority = "5"
	test LoginWithPasswordEncryptionSetToUFCCRYPTtoVirtualInstance {
		property custom.properties = "passwords.encryption.algorithm=UFC-CRYPT";
		property test.name.skip.portal.instance = "Login#LoginWithPasswordEncryptionSetToUFCCRYPTtoVirtualInstance";

		task ("Given: Instance admin is login") {
			User.firstLoginUI();
		}

		task ("When: Instance admin adds a virtual instance as able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.logoutPG();

			User.viewLoggedOutPG();
		}

		task ("Then: We can to login to the new Virtual Instance at able.com:8080 successfully") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			Role.openRolesAdmin();
		}
	}

}