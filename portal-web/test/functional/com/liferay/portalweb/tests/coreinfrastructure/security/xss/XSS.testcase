@component-name = "portal-security"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property test.assert.warning.exceptions = "false";
	property testray.main.component.name = "XSS";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			PortalSettings.tearDownAuthenticationCP();

			PagesAdmin.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-45254. View URL validate."
	@priority = "4"
	test MaliciousURLScriptsAreNotValidated {
		property test.name.skip.portal.instance = "XSS#MaliciousURLScriptsAreNotValidated";

		task ("Access malicious url and assert script was not validated") {
			var maliciousUrl1 = '''
					http://localhost:8080/group/control_panel/manage?p_p_id=132&p_p_lifecycle=0&p_p_state=maximized&p_p_mode=view&_132_struts_action=%2Fplugins_admin%2Fedit_plugin&_132_pluginId=116&_132_pluginType=portlet&_132_title=Activities&_132_moduleId=%3Cscript%3Ealert(%22xss%22);%3C/script%3E
				''';

			var maliciousUrl2 = '''
					http://localhost:8080/group/control_panel/manage?p_p_id=132&p_p_lifecycle=0&p_p_state=maximized&p_p_mode=view&_132_struts_action=%2Fplugins_admin%2Fedit_plugin&_132_pluginId=116&_132_pluginType=portlet&_132_title=Activities&_132_moduleId=%3Cscript%3Ealert(%22xss%22);%3C/script%3E&_2_backURL=%22%3E%3Cscript%3Ealert%28%27xss%27%29;%3C/script%3E
				''';

			var maliciousUrl3 = '''
					http://localhost:8080/group/control_panel/manage?p_p_id=132&p_p_lifecycle=0&p_p_state=maximized&p_p_mode=view&_132_struts_action=%2Fplugins_admin%2Fedit_plugin&_132_pluginId=116&_132_pluginType=portlet&_132_title=Activities&_132_moduleId=%3Cscript%3Ealert(%22xss%22);%3C/script%3E&_2_backURL=alert%28%27xss%27%29
				''';

			var maliciousUrl4 = '''
					http://localhost:8080/html/portal/progress_poller.jsp?ProgressId=a%3D1%3Balert(document.cookie)%3B%2F%2F
				''';

			Navigator.openSpecificURL(url = "${maliciousUrl1}");

			AssertAlertNotPresent();

			Navigator.openURL();

			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			for (var maliciousURL : list "${maliciousUrl2},${maliciousUrl3},${maliciousUrl4}") {
				Navigator.openSpecificURL(url = "${maliciousURL}");

				AssertAlertNotPresent();
			}
		}
	}

	@description = "This is a use case for LRQA-7595. Validate XSS vulnerabilities."
	@priority = "4"
	test MaliciousURLScriptsDoNotExecute {
		task ("Visit malicious urls and request error message") {
			var portalURL = PropsUtil.get("portal.url");

			var maliciousUrl1 = '''
					${portalURL}/group/guest/home?p_p_id=82&p_p_lifecycle=1&p_p_state=normal&p_p_mode=view&p_p_col_id=column-1&p_p_col_pos=1&p_p_col_count=2&_82_struts_action=%2Flanguage%2Fview&languageId=&lt;/script&gt;&lt;script&gt;alert(document.domain)&lt;/script>
				''';

			var maliciousUrl2 = '''
					${portalURL}/group/guest/home?p_p_id=82&p_p_lifecycle=1&p_p_state=normal&p_p_mode=view&p_p_col_id=column-1&p_p_col_pos=1&p_p_col_count=2&_82_struts_action=%2Flanguage%2Fview&languageId=&lt;/script&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;
				''';

			var maliciousUrl3 = '''
					${portalURL}/group/guest/home?p_p_id=82&p_p_lifecycle=1&p_p_state=normal&p_p_mode=view&p_p_col_id=column-1&p_p_col_pos=1&p_p_col_count=2&_82_struts_action=%2Flanguage%2Fview&languageId=%3C/script%3E%3Cscript%3Ealert(document.domain)%3C/script%3E
				''';

			var maliciousUrl4 = '''
					${portalURL}/group/guest/home?p_p_id=82&p_p_lifecycle=1&p_p_state=normal&p_p_mode=view&p_p_col_id=column-1&p_p_col_pos=1&p_p_col_count=2&_82_struts_action=%2Flanguage%2Fview&languageId=</script><script>alert(document.domain)</script>
				''';

			var maliciousUrl5 = '''
					${portalURL}/web/guest/search?p_p_id=113&p_p_lifecycle=0&p_p_state=maximized&p_p_mode=view&_113_tabs1=background-styles
				''';
			var maliciousUrLsList = "${maliciousUrl1},${maliciousUrl2},${maliciousUrl3},${maliciousUrl4}";

			for (var maliciousURL : list "${maliciousUrLsList}") {
				Navigator.openSpecificURL(url = "${maliciousURL}");

				AssertTextEquals(
					locator1 = "Home#ERROR_MESSAGE_ALERT_ERROR",
					value1 = "Not Found");

				AssertTextEquals.assertPartialText(
					locator1 = "Home#ERROR_MESSAGE_RESOURCE_NOT_FOUND",
					value1 = "The requested resource could not be found.");

				AssertElementPresent(locator1 = "Home#URL_ERROR_MESSAGE");
			}

			Navigator.openSpecificURL(url = "${maliciousUrl5}");

			AssertTextEquals(
				locator1 = "Message#INFO",
				value1 = "This portlet could not be found. Please redeploy it or remove it from the page.");
		}
	}

	@description = "This is a use case for LPS-92264. Assert no XSS pop up in asset publisher content."
	@priority = "5"
	test NoXSSVulnerabilityInAssetPublisherContent {
		task ("Add web content") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = "Guest",
				title = '''<script>alert(123);</script>''');
		}

		task ("Add public layout") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Asset Publisher Page");
		}

		task ("Add widget to public layout") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Asset Publisher Page",
				widgetName = "Asset Publisher");
		}

		task ("Visit web content as guest") {
			User.logoutPG();

			Navigator.gotoPage(pageName = "Asset Publisher Page");

			AssetPublisherPortlet.viewAssetDetailsPG(
				assetContent = "WC Content",
				assetTitle = '''<script>alert(123);</script>''');

			AssertAlertNotPresent();
		}

		task ("Visit web content as Admin") {
			User.loginPG();

			Navigator.gotoPage(pageName = "Asset Publisher Page");

			AssetPublisherPortlet.viewAssetDetailsPG(
				assetContent = "WC Content",
				assetTitle = '''<script>alert(123);</script>''');

			AssertAlertNotPresent();
		}
	}

	@description = "This is a use case for LPS-90727. Assert no XSS vulnerability when modifying a specific URL from the control panel."
	@priority = "5"
	test NoXSSVulnerabilityInControlPanel {
		property portal.acceptance = "true";

		task ("Go to Account Settings and save p_p_auth param from the URL") {
			var portalURL = PropsUtil.get("portal.url");

			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			AssertElementPresent.assertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");

			var currentURL = Navigator.getCurrentURL();

			var p_p_authParam = StringUtil.extractLast("${currentURL}", "=");
		}

		task ("Go to url with p_p_authParam and assert no dialog box appears") {
			Navigator.openSpecificURL(url = "${portalURL}/en/group/control_panel/manage;'*prompt()*'?p_p_id=com_liferay_my_account_web_portlet_MyAccountPortlet&p_p_lifecycle=0&p_p_state=maximized&p_p_auth=${p_p_authParam}");

			AssertAlertNotPresent();
		}
	}

	@description = "This is a use case for LPS-83273. View forms entry with XSS."
	@priority = "5"
	test NoXSSVulnerabilityInForms {
		var formDescription = '''<script>alert(222)</script>''';

		var formName = '''<script>alert(111)</script>''';

		task ("Add a form") {
			FormsAdmin.addForm();

			Form.editName(formName = "${formName}");

			Form.editDescription(formDescription = "${formDescription}");

			Form.addTextField(fieldPositionNumber = "0");

			Form.publishForm();
		}

		task ("Add Form page") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Form Page");
		}

		task ("Add a Form widget to a page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Form Page",
				widgetName = "Form");
		}

		task ("Configure the Form to display the form created above") {
			Navigator.gotoPage(pageName = "Form Page");

			FormPortletNavigator.gotoSelectForm();

			FormPortletConfiguration.selectForm(formName = "${formName}");

			PortletEntry.save();
		}

		task ("Assert the popup not shown") {
			Navigator.gotoPage(pageName = "Form Page");

			AssertAlertNotPresent();
		}

		task ("Assert correct HTML source text") {
			var actualDescriptionScript = '''<script>alert(222)</script>''';

			var escapedDescriptionScript = '''&lt;script&gt;alert(222)&lt;/script&gt;''';

			AssertHTMLSourceTextNotPresent(value1 = "${actualDescriptionScript}");

			AssertHTMLSourceTextPresent(value1 = "${escapedDescriptionScript}");

			var actualNameScript = '''<script>alert(111)</script>''';

			var escapedNameScript = '''&lt;script&gt;alert(111)&lt;/script&gt;''';

			AssertHTMLSourceTextNotPresent(value1 = "${actualNameScript}");

			AssertHTMLSourceTextPresent(value1 = "${escapedNameScript}");
		}
	}

	@description = "This is a use case for LPS-72807. View google analytics ID."
	@priority = "3"
	test NoXSSVulnerabilityInGoogleAnalyticsID {
		task ("Edit google analytics Id successfully") {
			Site.openSiteSettingsAdmin(siteURLKey = "guest");

			Site.editGoogleAnalyticsIDCP(googleAnalyticsId = '''']);alert(/googleAnalyticsId/);//''');

			Navigator.openURL();

			AssertAlertNotPresent();
		}
	}

	@description = "This is a use case for LRQA-10563. View JSONWS."
	@priority = "3"
	test NoXSSVulnerabilityInJSONWS {
		task ("Access JSONWS successfully") {
			var portalURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "${portalURL}/api/jsonws?contextPath=%22%3E%3Cimg%20src=x%20onerror=alert%28/contextPath/%29%3E");

			AssertAlertNotPresent();
		}
	}

	@description = "This is a use case for LPS-59198. View LDAP."
	@priority = "3"
	test NoXSSVulnerabilityInLDAP {
		task ("Add LDAP server successfully") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "LDAP",
				configurationName = "Servers",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.addLDAPServer(ldapServerName = '''<script>alert(123);</script>''');

			AssertAlertNotPresent();
		}

		task ("Assert right script present in HTML source text") {
			var actualScript = '''<script>alert(123);</script>''';

			var escapedScript = '''&lt;script&gt;alert(123);&lt;/script&gt;''';

			AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

			AssertHTMLSourceTextPresent(value1 = "${escapedScript}");
		}
	}

	@description = "This is a use case for LRQA-10563. View liferay portlet list."
	@priority = "4"
	test NoXSSVulnerabilityInLiferayPortletList {
		task ("Add public page") {
			var portalURL = PropsUtil.get("portal.url");

			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Asset Publisher Page");
		}

		task ("Add PG") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Asset Publisher Page",
				widgetName = "Asset Publisher");
		}

		task ("Send alert inside url") {
			Navigator.openSpecificURL(url = "${portalURL}/web/guest/home?p_p_id=com_liferay_portlet_configuration_web_portlet_PortletConfigurationPortlet&p_p_state=pop_up&_com_liferay_portlet_configuration_web_portlet_PortletConfigurationPortlet_mvcPath=%2Fedit_configuration.jsp&_com_liferay_portlet_configuration_web_portlet_PortletConfigurationPortlet_portletResource=com_liferay_asset_publisher_web_portlet_AssetPublisherPortlet_INSTANCE_7awylRgVDERT;alert(1)//%22;alert(2)//%22;alert(3)//%E2%80%93%3E%3C/script%3E%22%3E%27%3E%3Cscript%3Ealert(4)%3C/script%3E&_com_liferay_portlet_configuration_web_portlet_PortletConfigurationPortlet_resourcePrimKey=asdfxxx");
		}

		task ("Assert alert not present on page") {
			AssertAlertNotPresent();

			Refresh();

			AssertAlertNotPresent();

			Navigator.openURL();

			AssertAlertNotPresent();
		}
	}

	@description = "This is a use case for LRQA-10472. View, look and feel."
	@priority = "4"
	test NoXSSVulnerabilityInLookAndFeel {
		task ("Add public page") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = '''<script>alert(123);</script>''');
		}

		task ("Add PG") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = '''<script>alert(123);</script>''',
				widgetName = "Blogs");
		}

		task ("Assert name was interpreted correctly") {
			Navigator.gotoPage(pageName = '''<script>alert(123);</script>''');

			Portlet.gotoPortletOptions(
				portletName = "Blogs",
				portletOption = "Look and Feel Configuration");

			AssertElementNotPresent(locator1 = "//body[.='123']");
		}

		task ("Assert correct HTML source text") {
			var actualScript = '''<script>alert(123);</script>''';

			var escapedScript = '''&lt;script&gt;alert(123);&lt;/script&gt;''';

			AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

			AssertHTMLSourceTextPresent(value1 = "${escapedScript}");
		}
	}

	@description = "This is a use case for LPS-123822, LPS-127611 and LPS-133261. View Piwik."
	@priority = "3"
	test NoXSSVulnerabilityInPiwik {
		property test.name.skip.portal.instance = "XSS#ViewPiwik";

		task ("Edit piwik CP") {
			var portalURL = PropsUtil.get("portal.url");

			Site.openSiteSettingsAdmin(siteURLKey = "guest");

			Site.editPiwikCP(
				confirmationText = "123",
				piwik = '''<script>alert(123);</script>''');
		}

		task ("Assert confirm 123") {
			Open.openNoError(locator1 = "${portalURL}");

			AssertConfirm(value1 = "123");
		}
	}

	@description = "This is a use case for LRQA-10472. View Recycle bin."
	@priority = "4"
	test NoXSSVulnerabilityInRecycleBin {
		var entryTitle = '''<script>alert(123);</script>''';

		task ("Add Blog entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "${entryTitle}");
		}

		task ("Move entry to recycle bin") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

			BlogsNavigator.moveToRecycleBinCP(entryTitle = "${entryTitle}");
		}

		task ("Restore blogs entry from recycle bin") {
			RecycleBin.openRecycleBinAdmin(siteURLKey = "guest");

			RecycleBin.restoreCP(
				assetName = "${entryTitle}",
				assetRestoreLocation = "Blogs",
				assetType = "Blogs Entry");
		}

		task ("Assert entry has the right name") {
			AssertElementNotPresent(locator1 = "//body[.='123']");
		}

		task ("Assert correct HTML source text") {
			var actualScript = '''<script>alert(123);</script>''';

			var escapedScript = '''&lt;script&gt;alert(123);&lt;/script&gt;''';

			AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

			AssertHTMLSourceTextPresent(value1 = "${escapedScript}");
		}
	}

	@description = "This is a use case for LPS-48990. View roles."
	@priority = "4"
	test NoXSSVulnerabilityInRoles {
		task ("Add role") {
			Role.openRolesAdmin();

			Role.add(roleTitle = '''<script>alert(123);</script>''');
		}

		task ("Assert role has the correct values") {
			Role.openRolesAdmin();

			Role.viewCP(
				roleKey = '''<script>alert(123);</script>''',
				roleTitle = '''<script>alert(123);</script>''',
				roleType = "Regular");
		}

		task ("Add Sign in widget") {
			Navigator.openURL();

			Click(locator1 = "Icon#EDIT_PENCIL");

			PageEditor.addWidget(
				portletName = "Sign In",
				targetFragmentName = "Container");
		}

		task ("Assert role has the right name") {
			PageEditor.viewNotPresentInPermissionsIframeBody(elementValue = "123");
		}

		task ("Assert correct HTML source text") {
			var actualScript = ''' <script>alert(123);</script>''';

			var escapedScript = '''&lt;script&gt;alert(123);&lt;/script&gt;''';

			AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

			AssertHTMLSourceTextPresent(value1 = "${escapedScript}");
		}
	}

	@description = "This is a use case for LRQA-30154. View search results."
	@priority = "5"
	test NoXSSVulnerabilityInSearchResults {
		property portal.acceptance = "true";

		var siteName = '''<script>alert(123);</script>''';

		task ("Add blank CP") {
			Site.openSitesAdmin();

			Site.addBlankCP(siteName = "${siteName}");
		}

		task ("Search for CP and assert name didnt corrupt") {
			Site.openSitesAdmin();

			Search.searchCP(searchTerm = "${siteName}");

			Search.viewNotPresentInContentBody(
				elementValue = "XSS",
				siteName = "${siteName}");
		}

		task ("Assert correct HTML source text") {
			var actualScript = '''<script>alert(123);</script>''';

			var escapedScript = '''&lt;script&gt;alert(123);&lt;/script&gt;''';

			AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

			AssertHTMLSourceTextPresent(value1 = "${escapedScript}");
		}
	}

	@description = "This is a use case for LPS-71236 and LPS-71307. View web content."
	@priority = "5"
	test NoXSSVulnerabilityInWebContent {
		task ("Given: A Web Content is created with a script in the title") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Guest",
				title = '''<script>alert(123);</script>''');

			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			WebContent.viewTitle(
				webContentTitle = '''<script>alert(123);</script>''',
				webContentTitleEscapeCharacter = '''&lt;script&gt;alert(123);&lt;/script&gt;''');
		}

		task ("And: The created Web Content is added to the Display Page") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Web Content Display Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Web Content Display Page",
				widgetName = "Web Content Display");

			Navigator.openURL();

			Navigator.gotoPage(pageName = "Web Content Display Page");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = '''<script>alert(123);</script>''');
		}

		task ("When: The WC name is changed") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			WebContentNavigator.gotoEditCP(
				webContentTitle = '''<script>alert(123);</script>''',
				webContentTitleEscapeCharacter = '''&lt;script&gt;alert(123);&lt;/script&gt;''');

			WebContent.editCP(
				webContentTitle = '''<script>alert(123);</script>''',
				webContentTitleEdit = "WC WebContent Title");
		}

		task ("And: The WC is published with a non-existing image URL") {
			WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

			WebContent.addFeaturedImageFromURL(imageSourceURL = '''<img src="http://url.to.file.which/not.exist" onerror=alert(123);>''');

			PortletEntry.publish();
		}

		task ("Then: It should be possible to change the display style without seeing any alert") {
			LexiconEntry.changeDisplayStyle(displayStyle = "cards");

			AssertAlertNotPresent();
		}
	}

	@description = "This is a use case for LPS-45254. View wiki."
	@priority = "5"
	test NoXSSVulnerabilityInWiki {
		task ("Edit user information") {
			Navigator.openURL();

			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			User.editUserInformation(
				userFirstNameEdit = '''<script>alert(123);</script>''',
				userLastNameEdit = '''<script>alert(123);</script>''',
				userMiddleNameEdit = '''<script>alert(123);</script>''');
		}

		task ("Add CP to main wiki node") {
			WikiNavigator.openWikiAdmin(siteURLKey = "guest");

			JSONWiki.addWikiPage(
				groupName = "Guest",
				wikiNodeName = "Main",
				wikiPageContent = "Wiki Page Content",
				wikiPageName = "Wiki Page Title");
		}

		task ("Assert correct name showed") {
			WikiNavigator.openToWikiPage(
				siteURLKey = "guest",
				wikiNodeName = "Main",
				wikiPageTitle = "Wiki Page Title");

			WikiPage.viewNotPresentInPageBody(elementValue = "XSS");
		}

		task ("Assert correct HTML source text") {
			var actualScript = '''<script>alert(123);</script>''';

			var escapedScript = '''&lt;script&gt;alert(123);&lt;/script&gt;''';

			AssertHTMLSourceTextNotPresent(value1 = "${actualScript}");

			AssertHTMLSourceTextPresent(value1 = "${escapedScript}");
		}
	}

}