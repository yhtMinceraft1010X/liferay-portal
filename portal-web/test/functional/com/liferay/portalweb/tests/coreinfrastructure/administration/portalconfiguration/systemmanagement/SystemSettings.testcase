@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "System Settings";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = "5"
	test CanOverrideValueSetInConfigFile {
		property custom.properties = "configuration.override.com.liferay.journal.configuration.JournalServiceConfiguration_articleCommentsEnabled=B&quot;false&quot;";
		property osgi.module.configuration.file.names = "com.liferay.journal.configuration.JournalServiceConfiguration.config";
		property osgi.module.configurations = "articleCommentsEnabled=B&quot;true&quot;";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "SystemSettings#CanOverrideValueSetInConfigFile";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Web Content",
			configurationName = "Web Content",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewCheckboxNotChecked(fieldName = "articleCommentsEnabled");

		FormFields.viewFieldText(
			fieldName = "articleCommentsEnabled",
			fieldText = "Set this to true to enable comments for journal articles. This field has been set by a portal property and cannot be changed here.");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "WC WebContent Title");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Web Content Page Test");

		Navigator.gotoPage(pageName = "Web Content Page Test");

		Portlet.addPG(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		Portlet.gotoPortletOptions(
			portletName = "Web Content Display",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertElementNotPresent(
			key_fieldName = "Comments",
			locator1 = "Portlet#CONFIGURATION_CHECKBOX");
	}

	@priority = "4"
	test CanOverrideValueWithoutConfigFile {
		property custom.properties = "configuration.override.com.liferay.journal.configuration.JournalServiceConfiguration_articleCommentsEnabled=B&quot;false&quot;";
		property test.name.skip.portal.instance = "SystemSettings#CanOverrideValueWithoutConfigFile";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Web Content",
			configurationName = "Web Content",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewCheckboxNotChecked(fieldName = "articleCommentsEnabled");

		FormFields.viewFieldText(
			fieldName = "articleCommentsEnabled",
			fieldText = "Set this to true to enable comments for journal articles. This field has been set by a portal property and cannot be changed here.");
	}

	@priority = "4"
	test CanUpdateConfigValueViaUI {
		property test.name.skip.portal.instance = "SystemSettings#CanUpdateConfigValueViaUI";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Web Content",
			configurationName = "Web Content",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewCheckboxChecked(fieldName = "articleCommentsEnabled");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "WC WebContent Title");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Web Content Page Test");

		Navigator.gotoPage(pageName = "Web Content Page Test");

		Portlet.addPG(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title");

		IFrame.closeFrame();

		Portlet.gotoPortletOptions(
			portletName = "Web Content Display",
			portletOption = "Configuration");

		WebContentDisplayPortlet.configureSetup(
			enableViewCountIncrement = "true",
			metadataNameList = "Comments");

		WebContentDisplayPortlet.saveConfiguration();

		IFrame.closeFrame();

		Comments.addPG(entryComment = "WC WebContent Content Comment");

		Comments.viewPG(
			commentCount = "1",
			entryComment = "WC WebContent Content Comment",
			userFullName = "Test Test (You)");

		OSGiConfig.deployOSGiConfigFile(
			osgiConfigFileName = "com.liferay.journal.configuration.JournalServiceConfiguration.config",
			osgiConfigs = "articleCommentsEnabled=B&quot;false&quot;");

		Pause(locator1 = "10000");

		Navigator.gotoPage(pageName = "Web Content Page Test");

		Comments.viewNoComments(entryComment = "WC WebContent Content Comment");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Web Content",
			configurationName = "Web Content",
			configurationScope = "Virtual Instance Scope");

		FormFields.viewCheckboxNotChecked(fieldName = "articleCommentsEnabled");

		FormFields.enableCheckbox(fieldName = "articleCommentsEnabled");

		SystemSettings.saveConfiguration();

		Navigator.gotoPage(pageName = "Web Content Page Test");

		Comments.viewPG(
			commentCount = "1",
			entryComment = "WC WebContent Content Comment",
			userFullName = "Test Test (You)");

		var fileContent = SystemSettings.getConfigFileContent(configFileName = "com.liferay.journal.configuration.JournalServiceConfiguration.config");

		var expectedText = "articleCommentsEnabled=B&quot;true&quot;";

		if (contains("${fileContent}", "${expectedText}")) {
			echo("Config file shows updated value: ${expectedText}");
		}
		else {
			echo("Config file content: ${fileContent}");

			fail("Unable to find expected config value: ${expectedText}");
		}
	}

	@description = "This is a use case for LPS-79394. This test check that system settings scope is corrected."
	@priority = "5"
	test CheckSystemSettingsScopeIsCorrected {
		property test.name.skip.portal.instance = "SystemSettings#CheckSystemSettingsScopeIsCorrected";

		task ("Naviagte to System Settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");
		}

		task ("Enable OpenSSO Configuration") {
			SystemSettings.gotoConfiguration(
				configurationCategory = "SSO",
				configurationName = "OpenSSO",
				configurationScope = "System Scope");

			FormFields.enableCheckbox(fieldName = "Enabled");

			SystemSettings.saveConfiguration();
		}

		task ("Naviagte to Instance Settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");
		}

		task ("Disable OpenSSO Configuration") {
			SystemSettings.gotoConfiguration(
				configurationCategory = "SSO",
				configurationName = "OpenSSO",
				configurationScope = "Virtual Instance Scope");

			FormFields.disableCheckbox(fieldName = "enabled");

			SystemSettings.saveConfiguration();
		}

		task ("Check System Settings scope is corrected") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "SSO",
				configurationName = "OpenSSO",
				configurationScope = "System Scope");

			FormFields.viewCheckboxChecked(fieldName = "Enabled");
		}
	}

}