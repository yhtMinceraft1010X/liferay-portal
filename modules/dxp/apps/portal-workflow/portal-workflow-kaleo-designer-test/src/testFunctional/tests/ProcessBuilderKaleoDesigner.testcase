@component-name = "portal-workflow-ee"
@ignore = "true"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Kaleo Designer";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Workflow.tearDownSpecificWorkflowDefinition(workflowDefinitionTitle = "Edited Workflow Definition");

			Workflow.tearDownWorkflowDefinitions();
		}
	}

	@description = "Verify that Action can be added"
	@priority = "4"
	test CanAddAction {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#CanAddAction";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.addNodeViaViewTab(
			nodeDescription = "Task Node Description",
			nodeName = "Task",
			nodeNodeLabel = "Task",
			nodeType = "task");

		KaleoDesigner.selectNode(nodeNodeLabel = "Task");

		KaleoDesigner.editNodeActions(
			actionDescription = "Node Actions Test Description",
			actionName = "Node Actions Test");

		AssertElementPresent(
			key_actionsValue = "Node Actions Test",
			locator1 = "KaleoDesignerEditWorkflow#SETTINGS_ACTIONS_VALUE");
	}

	@description = "Verify that multiple Assignment can be added"
	@priority = "4"
	test CanAddMultipleAssignment {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#CanAddMultipleAssignment";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition Title");

		KaleoDesigner.selectNode(nodeNodeLabel = "StartNode");

		KaleoDesigner.deleteNode(nodeNodeLabel = "StartNode");

		KaleoDesigner.selectNode(nodeNodeLabel = "EndNode");

		KaleoDesigner.deleteNode(nodeNodeLabel = "EndNode");

		KaleoDesigner.addNodeViaViewTab(
			nodeDescription = "Start Node Description",
			nodeName = "Start",
			nodeNodeLabel = "Start",
			nodeType = "start");

		KaleoDesigner.addConnectorAndNodeViaViewTab(
			connectorName = "connector",
			newNode = "Task",
			newNodeDescription = "Task Node Description",
			newNodeName = "Task",
			newNodeType = "task",
			nodeType = "start");

		KaleoDesigner.selectNode(nodeNodeLabel = "Task");

		KaleoDesigner.editNodeAssignments(
			autoCreate = "true",
			nodeAssignmentType = "Role Type",
			roleName = "Test 1",
			roleType = "Regular");

		DoubleClick(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_ASSIGNMENTS");

		KaleoDesigner.addNodeSettingsSection();

		KaleoDesigner.editNodeAssignments(
			autoCreate = "true",
			nodeAssignmentType = "Role Type",
			roleName = "Test 2",
			roleType = "Regular");

		AssertTextEquals(
			locator1 = "KaleoDesignerEditWorkflow#SETTINGS_ASSIGNMENTS",
			value1 = "Role Type");
	}

	@description = "Verify that Notification can be added"
	@priority = "4"
	test CanAddNotification {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#CanAddNotification";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.deleteNode(nodeNodeLabel = "EndNode");

		KaleoDesigner.addConnectorAndNodeViaViewTab(
			connectorName = "connector",
			newNode = "Task",
			newNodeDescription = "Task Node Description",
			newNodeName = "Task",
			newNodeType = "task",
			nodeType = "start");

		KaleoDesigner.selectNode(nodeNodeLabel = "Task");

		KaleoDesigner.editNodeNotifications(
			nodeNotificationsDescription = "Notification Description",
			nodeNotificationsName = "Notification",
			nodeNotificationsRecipientType = "Role Type",
			roleTitle = "Administrator",
			roleType = "Regular");

		AssertTextEquals(
			locator1 = "KaleoDesignerEditWorkflow#SETTINGS_NOTIFICATIONS",
			value1 = "Notification");
	}

	@description = "Verify that Timers can be added"
	@priority = "4"
	test CanAddTimers {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#CanAddTimers";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.deleteNode(nodeNodeLabel = "EndNode");

		KaleoDesigner.addConnectorAndNodeViaViewTab(
			connectorName = "connector",
			newNode = "Task",
			newNodeDescription = "Task Node Description",
			newNodeName = "Task",
			newNodeType = "task",
			nodeType = "start");

		KaleoDesigner.selectNode(nodeNodeLabel = "Task");

		KaleoDesigner.editNodeTimer(
			blockerDescription = "Blocker Description",
			blockerName = "Blocker Name",
			blockerScript = "Test Script",
			durationScale1 = "Hour",
			durationScale2 = "Hour",
			durationTime1 = "5",
			durationTime2 = "6",
			timerDescription = "Timer Description",
			timerName = "Timer Name");

		AssertTextEquals(
			locator1 = "KaleoDesignerEditWorkflow#SETTINGS_TIMERS",
			value1 = "Timer Name");
	}

	@description = "Verify that the user can add translations"
	@priority = "4"
	test CanAddTranslations {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#CanAddTranslations";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		LexiconEntry.gotoAdd();

		Click(
			key_icon = "en-us",
			locator1 = "KaleoDesigner#ICON_COUNTRY");

		Click(
			key_icon = "pt-br",
			locator1 = "KaleoDesigner#UNTRANSLATED_ICON_COUNTRY");

		PortletEntry.inputTitle(title = "Test Title");

		Click(
			key_icon = "pt-br",
			locator1 = "KaleoDesigner#ICON_COUNTRY");

		Click(
			key_icon = "fr-fr",
			locator1 = "KaleoDesigner#UNTRANSLATED_ICON_COUNTRY");

		PortletEntry.inputTitle(title = "Test Title");

		PortletEntry.save();

		Click(
			key_icon = "en-us",
			locator1 = "KaleoDesigner#ICON_COUNTRY");

		AssertElementPresent(
			key_icon = "pt-br",
			locator1 = "KaleoDesigner#TRANSLATED_ICON_COUNTRY");

		AssertElementPresent(
			key_icon = "fr-fr",
			locator1 = "KaleoDesigner#TRANSLATED_ICON_COUNTRY");
	}

	@description = "LPS-135888 - Verify that is possible to select Account role type for role assignments"
	@priority = "5"
	test CanAssignAccountRole {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#CanAssignAccountRole";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.addNodeViaViewTab(
			nodeDescription = "Task Description",
			nodeName = "Test Name",
			nodeNodeLabel = "Task",
			nodeType = "task");

		KaleoDesigner.selectNode(nodeNodeLabel = "Test Name");

		KaleoDesigner.editNodeAssignments(
			autoCreate = "true",
			nodeAssignmentType = "Role Type",
			roleName = "Account Administrator",
			roleType = "Account");

		DoubleClick(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_ASSIGNMENTS");

		KaleoDesigner.viewNodeAssignments(nodeAssignmentType = "Role Type");

		AssertElementPresent(
			locator1 = "KaleoDesignerEditWorkflow#SETTINGS_CELL_EDITOR_NOTIFICATIONS_RECIPIENT_EDITOR_ROLE_TYPE_SELECT",
			value1 = "Account");

		AssertElementPresent(
			locator1 = "KaleoDesignerEditWorkflow#SETTINGS_CELL_EDITOR_NOTIFICATIONS_RECIPIENT_EDITOR_ROLE_NAME_SEARCH",
			value1 = "Account Administrator");
	}

	@description = "Verify that user can create transition between nodes from the edge of node"
	@priority = "5"
	test CanCreateTransition {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#CanCreateTransition";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.addNodeViaViewTab(
			nodeDescription = "Task Node Description",
			nodeName = "Task",
			nodeNodeLabel = "Task",
			nodeType = "task");

		KaleoDesigner.addConnectorViaViewTab(
			connectorName = "transition",
			nodeType = "start",
			nodeTypeDestination = "task");

		KaleoDesigner.viewConnectorPresent(connectorLabel = "transition");
	}

	@description = "Verify that user can delete selected Node"
	@priority = "4"
	test CanDeleteNode {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#CanDeleteNode";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.selectNode(nodeNodeLabel = "StartNode");

		KaleoDesigner.deleteNode(nodeNodeLabel = "StartNode");

		KaleoDesigner.viewNodeNotPresent(nodeNodeLabel = "StartNode");
	}

	@description = "Verify that properties can be modified"
	@priority = "5"
	test CanModifyProperties {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#CanModifyProperties";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.selectNode(nodeNodeLabel = "StartNode");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_TABLE");

		AssertEditable(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_NOTIFICATIONS");

		AssertEditable(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_DESCRIPTION");

		AssertEditable(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_NAME");

		AssertEditable(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_TYPE");
	}

	@description = "Verify that the user can move nodes in diagram by drag&drop in the middle of node"
	@priority = "4"
	test CanMoveNode {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#AddStartNodeEditNameAndDesciptionAndDeleteViaViewTab";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition Title");

		KaleoDesigner.selectNode(nodeNodeLabel = "StartNode");

		DragAndDrop.dragAndDrop(
			key_nodeNodeLabel = "StartNode",
			locator1 = "KaleoDesignerEditWorkflow#VIEW_FORM_NODE",
			value1 = "250,100");

		AssertElementPresent(
			key_nodeNodeLabel = "StartNode",
			locator1 = "KaleoDesignerEditWorkflow#VIEW_FORM_NODE",
			value1 = "250,100");
	}

	@description = "Verify that the user can rename a Node"
	@priority = "4"
	test CanRenameNode {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#CanRenameNode";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		LexiconEntry.gotoAdd();

		KaleoDesigner.addNodeViaViewTab(
			nodeDescription = "Condition Description",
			nodeName = "Condition Update",
			nodeNodeLabel = "Condition",
			nodeType = "condition");

		PortletEntry.inputTitle(title = "Test 1");

		Workflow.saveDefinition();

		Click(
			key_nodeType = "Condition Update",
			locator1 = "KaleoDesignerEditWorkflow#VIEW_FORM_NODE_DEFAULT");

		DoubleClick(locator1 = "DDMEditStructure#SETTINGS_NAME");

		AssertTextEquals(
			locator1 = "DDMEditStructure#SETTINGS_NAME",
			value1 = "Condition Update");
	}

	@description = "Verify that user can Save workflow as Draft"
	@priority = "4"
	test CanSaveAsDraft {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#CanSaveAsDraft";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		Workflow.saveDefinition();

		Alert.viewSuccessMessageText(successMessage = "Workflow saved.");

		ProcessBuilderKaleoDesigner.viewWorkflowStatus(
			workflowDefinitionTitle = "New Workflow Title",
			workflowStatus = "Not Published");
	}

	@description = "Verify that the user can select each node in Diagram"
	@priority = "4"
	test CanSelectNodeOnDiagram {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#CanSelectNodeOnDiagram";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.addNodeViaViewTab(
			nodeDescription = "Task Node Description",
			nodeName = "Task",
			nodeNodeLabel = "Task",
			nodeType = "task");

		KaleoDesigner.selectNode(nodeNodeLabel = "StartNode");

		KaleoDesigner.selectNode(nodeNodeLabel = "EndNode");

		KaleoDesigner.selectNode(nodeNodeLabel = "Task");
	}

	@description = "Verify that the user can set transition Default"
	@priority = "4"
	test CanSetDefaultTransition {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#CanSetDefaultTransition";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.addNodeViaViewTab(
			nodeDescription = "Task Description",
			nodeName = "Task Name",
			nodeNodeLabel = "Task",
			nodeType = "task");

		KaleoDesigner.selectNode(nodeNodeLabel = "StartNode");

		KaleoDesigner.addConnectorViaViewTab(
			connectorName = "Connection",
			nodeType = "start",
			nodeTypeDestination = "task");

		KaleoDesigner.editConnectorDefault(key_radioOption = "true");

		AssertElementPresent(locator1 = "KaleoDesigner#VIEW_VALUE_TRUE_DEFAULT_CONNECTORS");
	}

	@description = "Verify that Condition Node do not have Timers property"
	@priority = "4"
	test ConditionHasNoTimersProperty {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#ConditionHasNoTimersProperty";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.addNodeViaViewTab(
			nodeDescription = "Condition Node Description",
			nodeName = "Condition",
			nodeNodeLabel = "Condition",
			nodeType = "condition");

		KaleoDesigner.selectNode(nodeNodeLabel = "Condition");

		AssertElementNotPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_TIMERS");
	}

	@description = "Verify that the user can rename connector"
	@priority = "4"
	test ConnectorCanBeRenamed {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#ConnectorCanBeRenamed";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.deleteNode(nodeNodeLabel = "EndNode");

		KaleoDesigner.addConnectorAndNodeViaViewTab(
			connectorName = "connector",
			newNode = "Task",
			newNodeDescription = "Task Node Description",
			newNodeName = "Task",
			newNodeType = "task",
			nodeType = "start");

		Click(locator1 = "KaleoDesignerEditWorkflow#VIEW_FORM_CONNECTOR_DEFAULT");

		KaleoDesigner.editConnectorName(connectorName = "test");

		AssertTextEquals(
			locator1 = "DDMEditStructure#SETTINGS_NAME",
			value1 = "test");
	}

	@description = "Verify that newly created transition has default name -connector#-"
	@priority = "3"
	test ConnectorHasDefaultName {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#ConnectorHasDefaultName";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#VIEW_FORM_CONNECTOR_DEFAULT");
	}

	@description = "Verify that default names for nodes are provided"
	@priority = "4"
	test DefaultNamesAreProvided {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#DefaultNamesAreProvided";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition Title");

		ProcessBuilderKaleoDesigner.addNodesByDragging(nodeTitleAndPositionList = "Condition;300.100,End;180.70,Fork;280.100,Join;280.270,Join XOR;360.200,Start;360.70,State;390.250,Task;400.100");

		ProcessBuilderKaleoDesigner.assertDefaultNodesOnForm(nodesList = "condition,end,fork,join,join-xor,start,state,task");
	}

	@description = "Verify that If user selects node, cross on top right appear"
	@priority = "3"
	test DisplaysCrossOnTopRight {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#DisplaysCrossOnTopRight";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow");

		KaleoDesigner.selectNode(nodeNodeLabel = "StartNode");

		AssertElementPresent.assertVisible(
			key_nodeNodeLabel = "StartNode",
			locator1 = "KaleoDesignerEditWorkflow#VIEW_FORM_NODE_DELETE_ICON");
	}

	@description = "Verify that a pop up message is displayed when deleting Node"
	@priority = "4"
	test DisplaysMessageOnDeletingNode {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#DisplaysMessageOnDeletingNode";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.selectNode(nodeNodeLabel = "StartNode");

		ClickNoError(
			key_nodeNodeLabel = "StartNode",
			locator1 = "KaleoDesignerEditWorkflow#VIEW_FORM_NODE_DELETE_ICON");

		AssertConfirm(value1 = "Are you sure you want to delete the selected node(s)?");
	}

	@description = "Verify that the Fork node must have at least two outgoing transitions."
	@priority = "4"
	test ForkNodeMustHaveMoreThanOneTransition {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#ForkNodeMustHaveMoreThanOneTransition";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow");

		KaleoDesigner.selectNode(nodeNodeLabel = "EndNode");

		KaleoDesigner.deleteNode(nodeNodeLabel = "EndNode");

		KaleoDesigner.addConnectorAndNodeViaViewTab(
			connectorName = "Connector1",
			newNode = "Fork",
			newNodeDescription = "Fork Node Description",
			newNodeName = "Fork",
			newNodeType = "fork",
			nodeType = "start");

		KaleoDesigner.addConnectorAndNodeViaViewTab(
			connectorName = "Connector2",
			newNode = "Join",
			newNodeDescription = "Join Node Description",
			newNodeName = "Join",
			newNodeType = "join",
			nodeType = "fork");

		KaleoDesigner.addConnectorAndNodeViaViewTab(
			connectorName = "Connector2",
			newNode = "End",
			newNodeDescription = "End Node Description",
			newNodeName = "End",
			newNodeType = "end",
			nodeType = "join");

		Button.clickPublish();

		AssertTextEquals.assertPartialTextAceEditor(
			locator1 = "Message#ERROR",
			value1 = "node must have at least two outgoing transitions");
	}

	@description = "Verify that each type of Node has Actions property"
	@priority = "4"
	test HasActionsProperty {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#HasActionsProperty";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.selectNode(nodeNodeLabel = "StartNode");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_ACTIONS");

		KaleoDesigner.selectNode(nodeNodeLabel = "EndNode");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_ACTIONS");

		KaleoDesigner.addAndFillNodesByDragAndDrop(
			nodeDescription = "Join Node Description",
			nodeName = "Join",
			nodeNodeLabel = "Join",
			nodeTitleAndPositionList = "Join;Task;400.100",
			nodeType = "join");

		KaleoDesigner.selectNode(nodeNodeLabel = "Join");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_ACTIONS");

		KaleoDesigner.addAndFillNodesByDragAndDrop(
			nodeDescription = "Join XOR Node Description",
			nodeName = "Join XOR",
			nodeNodeLabel = "Join XOR",
			nodeTitleAndPositionList = "Join XOR;360.200",
			nodeType = "join-xor");

		KaleoDesigner.selectNode(nodeNodeLabel = "Join XOR");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_ACTIONS");
	}

	@description = "Verify that each type of Node has Description property"
	@priority = "4"
	test HasDescriptionProperty {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#HasDescriptionProperty";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.selectNode(nodeNodeLabel = "StartNode");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_DESCRIPTION");

		KaleoDesigner.selectNode(nodeNodeLabel = "EndNode");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_DESCRIPTION");

		KaleoDesigner.addNodeViaViewTab(
			nodeDescription = "Fork Node Description",
			nodeName = "Fork",
			nodeNodeLabel = "Fork",
			nodeType = "fork");

		KaleoDesigner.selectNode(nodeNodeLabel = "Fork");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_DESCRIPTION");

		KaleoDesigner.addNodeViaViewTab(
			nodeDescription = "Condition Node Description",
			nodeName = "Condition",
			nodeNodeLabel = "Condition",
			nodeType = "condition");

		KaleoDesigner.selectNode(nodeNodeLabel = "Condition");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_DESCRIPTION");
	}

	@description = "Verify that each type of Node has Name property"
	@priority = "5"
	test HasNameProperty {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#HasNameProperty";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.selectNode(nodeNodeLabel = "StartNode");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_NAME");

		KaleoDesigner.selectNode(nodeNodeLabel = "EndNode");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_NAME");

		KaleoDesigner.addNodeViaViewTab(
			nodeDescription = "Fork Node Description",
			nodeName = "Fork",
			nodeNodeLabel = "Fork",
			nodeType = "fork");

		KaleoDesigner.selectNode(nodeNodeLabel = "Fork");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_NAME");

		KaleoDesigner.addNodeViaViewTab(
			nodeDescription = "Condition Node Description",
			nodeName = "Condition",
			nodeNodeLabel = "Condition",
			nodeType = "condition");

		KaleoDesigner.selectNode(nodeNodeLabel = "Condition");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_NAME");
	}

	@description = "Verify that each type of Node has Notifications property"
	@priority = "4"
	test HasNotificationsProperty {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#HasNotificationsProperty";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.deleteNode(nodeNodeLabel = "EndNode");

		KaleoDesigner.addConnectorAndNodeViaViewTab(
			connectorName = "connector",
			newNode = "Task",
			newNodeDescription = "Task Node Description",
			newNodeName = "Task",
			newNodeType = "task",
			nodeType = "start");

		KaleoDesigner.selectNode(nodeNodeLabel = "Task");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_NOTIFICATIONS");
	}

	@description = "Verify that the Task node has Timers property"
	@priority = "4"
	test HasTimersProperty {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#HasTimersProperty";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.deleteNode(nodeNodeLabel = "EndNode");

		KaleoDesigner.addConnectorAndNodeViaViewTab(
			connectorName = "connector",
			newNode = "Task",
			newNodeDescription = "Task Node Description",
			newNodeName = "Task",
			newNodeType = "task",
			nodeType = "start");

		KaleoDesigner.selectNode(nodeNodeLabel = "Task");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_TIMERS");
	}

	@description = "Verify that each type of Node has Type property"
	@priority = "5"
	test HasTypeProperty {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#HasTypeProperty";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.selectNode(nodeNodeLabel = "StartNode");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_TYPE");

		KaleoDesigner.selectNode(nodeNodeLabel = "EndNode");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_TYPE");

		KaleoDesigner.addNodeViaViewTab(
			nodeDescription = "Fork Node Description",
			nodeName = "Fork",
			nodeNodeLabel = "Fork",
			nodeType = "fork");

		KaleoDesigner.selectNode(nodeNodeLabel = "Fork");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_TYPE");

		KaleoDesigner.addNodeViaViewTab(
			nodeDescription = "Condition Node Description",
			nodeName = "Condition",
			nodeNodeLabel = "Condition",
			nodeType = "condition");

		KaleoDesigner.selectNode(nodeNodeLabel = "Condition");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_TYPE");
	}

	@description = "Verify that the user can rename connector"
	@priority = "4"
	test NodeCanBeRenamed {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#NodeCanBeRenamed";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.deleteNode(nodeNodeLabel = "EndNode");

		KaleoDesigner.addConnectorAndNodeViaViewTab(
			connectorName = "connector",
			newNode = "Task",
			newNodeDescription = "Task Node Description",
			newNodeName = "Task",
			newNodeType = "task",
			nodeType = "start");

		KaleoDesigner.selectNode(nodeNodeLabel = "Task");

		KaleoDesigner.editNodeName(nodeName = "Test");

		AssertTextEquals(
			locator1 = "DDMEditStructure#SETTINGS_NAME",
			value1 = "Test");
	}

	@description = "Verify that the transition can be dropped on plain field, pop up menu will appear, user can select new node, new node is created correctly"
	@priority = "5"
	test NodeIsCreatedWhenTransitionIsDroppedOnPlainField {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#NodeIsCreatedWhenTransitionIsDroppedOnPlainField";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition Title");

		KaleoDesigner.selectNode(nodeNodeLabel = "StartNode");

		KaleoDesigner.deleteNode(nodeNodeLabel = "StartNode");

		KaleoDesigner.selectNode(nodeNodeLabel = "EndNode");

		KaleoDesigner.deleteNode(nodeNodeLabel = "EndNode");

		KaleoDesigner.addNodeViaViewTab(
			nodeDescription = "Start Node Description",
			nodeName = "Start",
			nodeNodeLabel = "Start",
			nodeType = "start");

		KaleoDesigner.addConnectorAndNodeViaViewTab(
			connectorName = "Connector1",
			newNode = "Task",
			newNodeDescription = "Task Node Description",
			newNodeName = "Task",
			newNodeType = "task",
			nodeType = "start");

		KaleoDesigner.viewNodePresent(key_nodeNodeLabel = "Task");

		KaleoDesigner.viewConnectorPresent(connectorLabel = "Connector1");
	}

	@description = "LPS-135888 - Verify that the Single Approver Workflow comes with the Account Member and Account Administrator role names assigned"
	@priority = "4"
	test SingleApproverComesWithAccountMemberAndAdmRoleName {
		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.gotoEditWorkflowDefinition(workflowDefinitionTitle = "Single Approver");

		Click(
			key_nodeType = "review",
			locator1 = "KaleoDesignerEditWorkflow#VIEW_FORM_NODE_DEFAULT");

		DoubleClick(locator1 = "KaleoDesignerEditWorkflow#SETTINGS_ASSIGNMENTS");

		AssertElementPresent(
			locator1 = "KaleoDesignerEditWorkflow#SETTINGS_CELL_EDITOR_NOTIFICATIONS_RECIPIENT_EDITOR_ROLE_NAME_SEARCH",
			value1 = "Account Member");

		AssertElementPresent(
			locator1 = "KaleoDesignerEditWorkflow#SETTINGS_CELL_EDITOR_NOTIFICATIONS_RECIPIENT_EDITOR_ROLE_NAME_SEARCH",
			value1 = "Account Administrator");
	}

	@description = "LPS-135888 - Verify that the Single Approver Workflow comes with the Account role assigned"
	@priority = "5"
	test SingleApproverComesWithAccountRole {
		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.gotoEditWorkflowDefinition(workflowDefinitionTitle = "Single Approver");

		KaleoDesigner.selectNode(nodeNodeLabel = "review");

		DoubleClick(locator1 = "KaleoDesigner#ROLE_TYPE_OPTION");

		AssertElementPresent(locator1 = "KaleoDesigner#ROLE_TYPE_ACCOUNT");
	}

	@description = "Verify that the Start Node must have an outgoing transition"
	@priority = "4"
	test StartNodeMustHaveOutgoingTransition {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#StartNodeMustHaveOutgoingTransition";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		KaleoDesigner.deleteConnector(connectorLabel = "connector");

		Workflow.publishInvalidWorkflowDefinition(errorMessage = "The StartNode node must have an outgoing transition.");
	}

	@description = "Verify that transition can be connected to another edge of node, orange circle will appear"
	@priority = "5"
	test TransitionCanBeConnectedToNode {
		property test.name.skip.portal.instance = "ProcessBuilderKaleoDesigner#TransitionCanBeConnectedToNode";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		LexiconEntry.gotoAdd();

		KaleoDesigner.selectNode(nodeNodeLabel = "StartNode");

		KaleoDesigner.deleteNode(nodeNodeLabel = "StartNode");

		KaleoDesigner.selectNode(nodeNodeLabel = "EndNode");

		KaleoDesigner.deleteNode(nodeNodeLabel = "EndNode");

		KaleoDesigner.addNodeViaViewTab(
			nodeDescription = "Start Node Description",
			nodeName = "Start",
			nodeNodeLabel = "Start",
			nodeType = "start");

		KaleoDesigner.addConnectorAndNodeViaViewTab(
			connectorName = "Submit",
			newNode = "Join XOR",
			newNodeDescription = "JoinXOR Description",
			newNodeName = "JoinXOR",
			newNodeType = "join-xor",
			nodeType = "start");

		KaleoDesigner.deleteConnector(connectorLabel = "Submit");

		KaleoDesigner.selectNode(nodeNodeLabel = "Start");

		KaleoDesigner.addConnectorViaViewTab(
			connectorName = "transition",
			nodeType = "start",
			nodeTypeDestination = "join-xor");

		AssertElementPresent(locator1 = "KaleoDesignerEditWorkflow#CIRCLE_ORANGE_CONNECTOR");
	}

}