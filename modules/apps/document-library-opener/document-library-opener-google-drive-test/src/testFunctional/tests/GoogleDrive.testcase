@component-name = "portal-document-management"
definition {

	property custom.properties = "default.layout.template.id=1_column";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Online Editing";

	var pageName = "Documents and Media Page";
	var portletName = "Documents and Media";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		Google.enableGoogleDrive();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "2",
			groupName = "Guest",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.enableActionsMenuOnPortlet();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			DMDocument.tearDownCP();

			DMFolder.tearDownCP();

			DMDocumentType.tearDownCP();

			PagesAdmin.tearDownCP();
		}
	}

	@description = "This test ensures that the title and the file name will be renamed when the created Google doc title duplicates the existing document file name."
	@priority = "4"
	test AddGoogleEntryWithDuplicateFileName {
		property test.name.skip.portal.instance = "GoogleDrive#AddGoogleEntryWithDuplicateFileName";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Sheet");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.2"),
			userPassword = PropsUtil.get("email.password.2"),
			windowTitle = "Documents and Media Page - Liferay");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.editPG(
			dmDocumentFileNameEdit = "Untitled Edit.xlsx",
			dmDocumentTitle = "Untitled");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoEditDocumentPG(dmDocumentTitle = "Untitled");

		AssertTextEquals(
			key_fieldLabel = "Title",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Untitled");

		AssertTextEquals(
			key_fieldLabel = "File Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Untitled Edit.xlsx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Sheet");

		GoogleDoc.editTitleInGoogleDoc(dmDocumentTitle = "Untitled Edit");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		AssertTextEquals(
			key_dmDocumentTitle = "Untitled Edit (1)",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Untitled Edit (1)");

		DMNavigator.gotoEditDocumentPG(dmDocumentTitle = "Untitled Edit (1)");

		AssertTextEquals(
			key_fieldLabel = "Title",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Untitled Edit (1)");

		AssertTextEquals(
			key_fieldLabel = "File Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Untitled Edit (1).xlsx");
	}

	@description = "This test ensures that the title and the file name will be renamed when the created Google doc title duplicates the existing document title."
	@priority = "4"
	test AddGoogleEntryWithDuplicateTitle {
		property test.name.skip.portal.instance = "GoogleDrive#AddGoogleEntryWithDuplicateTitle";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Doc");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.editPG(
			dmDocumentTitle = "Untitled",
			dmDocumentTitleEdit = "Untitled Edit");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoEditDocumentPG(dmDocumentTitle = "Untitled Edit");

		AssertTextEquals(
			key_fieldLabel = "Title",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Untitled Edit");

		AssertTextEquals(
			key_fieldLabel = "File Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Untitled.docx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Doc");

		GoogleDoc.editTitleInGoogleDoc(dmDocumentTitle = "Untitled Edit");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		AssertTextEquals(
			key_dmDocumentTitle = "Untitled Edit (1)",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Untitled Edit (1)");

		DMNavigator.gotoEditDocumentPG(dmDocumentTitle = "Untitled Edit (1)");

		AssertTextEquals(
			key_fieldLabel = "Title",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Untitled Edit (1)");

		AssertTextEquals(
			key_fieldLabel = "File Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Untitled Edit (1).docx");
	}

	@description = "This test ensures that a Google Doc is autotagged once checked in."
	@priority = "4"
	test AutoTagGoogleDoc {
		property test.name.skip.portal.instance = "GoogleDrive#AutoTagGoogleDoc";

		AutoTagging.enableOpenNLP(
			assetType = "Document",
			confidenceThreshold = "0.001");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Doc");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay");

		GoogleDoc.addContent(
			googleDocContent = "Alice",
			insertLink = "true",
			linkAddress = "https://www.adobe.com/be_en/active-use/pdf/Alice_in_Wonderland.pdf",
			linkText = "Alice's Adventures in Wonderland.docx");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewPG(dmDocumentTitle = "Untitled");

		DMDocument.viewTagInfo(tagName = "adventures,alice");
	}

	@description = "This test ensures no document is generated if a user cancels creating a Google Doc."
	@priority = "5"
	test CancelGoogleDocCreation {
		property test.name.skip.portal.instance = "GoogleDrive#CancelGoogleDocCreation";

		DMNavigator.openToConfigInSystemSettings(portlet = "Google Drive");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Reset Default Values");

		Google.enableGoogleDrive(instanceSettings = "true");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Doc");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.2"),
			userPassword = PropsUtil.get("email.password.2"),
			windowTitle = "Documents and Media Page - Liferay");

		GoogleDoc.discardChanges();

		AssertElementPresent(locator1 = "Message#EMPTY_INFO");
	}

	@description = "This test ensures the title of a document is not changed if a user cancels editing a Google Doc."
	@priority = "5"
	test CancelGoogleDocEdit {
		property test.name.skip.portal.instance = "GoogleDrive#CancelGoogleDocEdit";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Doc");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		GoogleDoc.gotoEdit(
			dmDocumentTitle = "Untitled",
			dmDocumentTypeName = "Google Docs");

		GoogleDoc.editTitleInGoogleDoc(dmDocumentTitle = "This title should not be saved");

		GoogleDoc.discardChanges();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		AssertTextEquals(
			key_dmDocumentTitle = "Untitled",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Untitled");
	}

	@description = "This test ensures no document is generated if a user cancels creating a Google Doc."
	@priority = "5"
	test CancelGoogleSheetCreation {
		property test.name.skip.portal.instance = "GoogleDrive#CancelGoogleSheetCreation";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Sheet");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.2"),
			userPassword = PropsUtil.get("email.password.2"),
			windowTitle = "Documents and Media Page - Liferay");

		GoogleDoc.discardChanges();

		AssertElementPresent(locator1 = "Message#EMPTY_INFO");
	}

	@description = "This test ensures the title of a document is not changed if a user cancels editing a Google Sheet."
	@priority = "5"
	test CancelGoogleSheetEdit {
		property test.name.skip.portal.instance = "GoogleDrive#CancelGoogleSheetEdit";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Sheet");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.2"),
			userPassword = PropsUtil.get("email.password.2"),
			windowTitle = "Documents and Media Page - Liferay");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		GoogleDoc.gotoEdit(
			dmDocumentTitle = "Untitled",
			dmDocumentTypeName = "Google Sheets");

		GoogleDoc.editTitleInGoogleDoc(dmDocumentTitle = "This title should not be saved");

		GoogleDoc.discardChanges();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		AssertTextEquals(
			key_dmDocumentTitle = "Untitled",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Untitled");
	}

	@description = "This test ensures no document is generated if a user cancels creating a Google Doc."
	@priority = "5"
	test CancelGoogleSlideCreation {
		property test.name.skip.portal.instance = "GoogleDrive#CancelGoogleSlideCreation";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Slide");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay");

		GoogleDoc.discardChanges();

		AssertElementPresent(locator1 = "Message#EMPTY_INFO");
	}

	@description = "This test ensures the title of a document is not changed if a user cancels editing a Google Slide."
	@priority = "5"
	test CancelGoogleSlideEdit {
		property test.name.skip.portal.instance = "GoogleDrive#CancelGoogleSlideEdit";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Slide");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		GoogleDoc.gotoEdit(
			dmDocumentTitle = "Untitled",
			dmDocumentTypeName = "Google Slides");

		GoogleDoc.editTitleInGoogleDoc(dmDocumentTitle = "This title should not be saved");

		GoogleDoc.discardChanges();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		AssertTextEquals(
			key_dmDocumentTitle = "Untitled",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Untitled");
	}

	@description = "This test covers LPS-107584. It ensures that a checked out google document cannot be edited by another user."
	@priority = "4"
	test CheckOutGoogleDoc {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property test.name.skip.portal.instance = "GoogleDrive#CheckOutGoogleDoc";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addRegularRole(roleTitle = "Regular Role");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_document_library_web_portlet_DLAdminPortlet",
				roleTitle = "Regular Role");
		}

		for (var resourceAction : list "UPDATE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
				roleTitle = "Regular Role");
		}

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Doc");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.2"),
			userPassword = PropsUtil.get("email.password.2"),
			windowTitle = "Documents and Media Page - Liferay");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.checkoutPG(dmDocumentTitle = "Untitled");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.selectDocuments(dmDocumentTitle = "Untitled");

		AssertElementPresent(locator1 = "Icon#EDIT_TAGS_DISABLED");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.editCmdPG(
			checkedOut = "true",
			dmDocumentTitle = "Untitled",
			userName = "Test Test");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		for (var menuItem : list "Edit,Edit in Google Sheets,Checkin") {
			LexiconEntry.viewNoEntryMenuItem(
				menuItem = "${menuItem}",
				rowEntry = "Untitled");
		}
	}

	@description = "This test covers LPS-107161. It ensures that a checked out google sheet cannot be edited by another user."
	@priority = "4"
	test CheckOutGoogleSheet {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property test.name.skip.portal.instance = "GoogleDrive#CheckOutGoogleSheet";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Sheet");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.checkoutPG(dmDocumentTitle = "Untitled");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DMDocument.selectDocuments(dmDocumentTitle = "Untitled");

		AssertElementPresent(locator1 = "Icon#EDIT_TAGS_DISABLED");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.editCmdPG(
			checkedOut = "true",
			dmDocumentTitle = "Untitled",
			userName = "Test Test");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		for (var menuItem : list "Edit,Edit in Google Sheets,Checkin") {
			LexiconEntry.viewNoEntryMenuItem(
				menuItem = "${menuItem}",
				rowEntry = "Untitled");
		}
	}

	@description = "This test ensures a Google Doc title can be changed through the editor"
	@priority = "4"
	test EditGoogleDoc {
		property test.name.skip.portal.instance = "GoogleDrive#EditGoogleDoc";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Doc");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.2"),
			userPassword = PropsUtil.get("email.password.2"),
			windowTitle = "Documents and Media Page - Liferay");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoEditDocumentPG(dmDocumentTitle = "Untitled");

		AssertTextEquals(
			key_fieldLabel = "Title",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Untitled");

		AssertTextEquals(
			key_fieldLabel = "File Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Untitled.docx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		GoogleDoc.gotoEdit(
			dmDocumentTitle = "Untitled",
			dmDocumentTypeName = "Google Docs");

		GoogleDoc.editTitleInGoogleDoc(dmDocumentTitle = "Edited Google Document");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		AssertTextEquals(
			key_dmDocumentTitle = "Edited Google Document",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Edited Google Document");

		DMNavigator.gotoEditDocumentPG(dmDocumentTitle = "Edited Google Document");

		AssertTextEquals(
			key_fieldLabel = "Title",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Edited Google Document");

		AssertTextEquals(
			key_fieldLabel = "File Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Edited Google Document.docx");
	}

	@description = "This test ensures that special characters  can be saved through the Google Doc editor"
	@priority = "4"
	test EditGoogleDocWithSpecialCharacters {
		property test.name.skip.portal.instance = "GoogleDrive#EditGoogleDocWithSpecialCharacters";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Doc");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.2"),
			userPassword = PropsUtil.get("email.password.2"),
			windowTitle = "Documents and Media Page - Liferay");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		GoogleDoc.gotoEdit(
			dmDocumentTitle = "Untitled",
			dmDocumentTypeName = "Google Docs");

		var dmDocumentTitle = '''Special Characters Title 12345`~!@#$%^&*(){}[],.<>/?|''';

		GoogleDoc.editTitleInGoogleDoc(dmDocumentTitle = "${dmDocumentTitle}");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		var dmDocumentTitle = '''Special Characters Title 12345`~!@#$%_&_(){}[],.__/__''';

		AssertTextEquals(
			key_dmDocumentTitle = '''Special Characters Title 12345`~!@#$%_&amp;_(){}[],.__/__''',
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "${dmDocumentTitle}");
	}

	@description = "This test covers LPS-107165. It ensures that Google doc can be Edited when enabling Workflow."
	@priority = "4"
	test EditGoogleDocWithWorkflow {
		property test.name.skip.portal.instance = "GoogleDrive#EditGoogleDocWithWorkflow";

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Guest");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMFolder.configureWorkflowCP(
			dmFolderName = "DM Folder Name",
			workflowDefinition = "Single Approver",
			workflowRestriction = "Default Workflow");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder Name");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Doc");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder Name");

		DMDocument.editCmdPG(
			dmDocumentTitle = "Untitled",
			dmDocumentTitleEdit = "Edited Google Document With Workflow");

		Button.clickSubmitForPublication();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder Name");

		AssertTextEquals(
			key_dmDocumentTitle = "Edited Google Document With Workflow",
			locator1 = "DocumentsAndMedia#ICON_DOCUMENT_WORKFLOW_STATUS",
			value1 = "Pending");

		GoogleDoc.gotoEdit(
			dmDocumentTitle = "Edited Google Document With Workflow",
			dmDocumentTypeName = "Google Docs");

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#GOOGLE_DOC");

		AssertTextEquals(
			locator1 = "GoogleDoc#TITLE",
			value1 = "Edited Google Document With Workflow");

		SelectFrameTop();

		GoogleDoc.discardChanges();

		Navigator.openURL();

		UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

		Workflow.assignToMeTaskByActions(
			workflowAssetTitle = "Edited Google Document With Workflow",
			workflowAssetType = "Document",
			workflowTask = "Review");

		Workflow.approveTaskByActions(
			workflowAssetTitle = "Edited Google Document With Workflow",
			workflowAssetType = "Document",
			workflowTask = "Review");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoFolder(dmFolderName = "DM Folder Name");

		AssertTextEquals(
			key_dmDocumentTitle = "Edited Google Document With Workflow",
			locator1 = "DocumentsAndMedia#ICON_DOCUMENT_WORKFLOW_STATUS",
			value1 = "Approved");
	}

	@description = "This test ensures a Google Sheet title can be changed through the editor"
	@priority = "4"
	test EditGoogleSheet {
		property test.name.skip.portal.instance = "GoogleDrive#EditGoogleSheet";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Sheet");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoEditDocumentPG(dmDocumentTitle = "Untitled");

		AssertTextEquals(
			key_fieldLabel = "Title",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Untitled");

		AssertTextEquals(
			key_fieldLabel = "File Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Untitled.xlsx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		GoogleDoc.gotoEdit(
			dmDocumentTitle = "Untitled",
			dmDocumentTypeName = "Google Sheets");

		GoogleDoc.editTitleInGoogleDoc(dmDocumentTitle = "Edited Google Sheet");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		AssertTextEquals(
			key_dmDocumentTitle = "Edited Google Sheet",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Edited Google Sheet");

		DMNavigator.gotoEditDocumentPG(dmDocumentTitle = "Edited Google Sheet");

		AssertTextEquals(
			key_fieldLabel = "Title",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Edited Google Sheet");

		AssertTextEquals(
			key_fieldLabel = "File Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Edited Google Sheet.xlsx");
	}

	@description = "This test ensures a Google Slide title can be changed through the editor"
	@priority = "4"
	test EditGoogleSlide {
		property test.name.skip.portal.instance = "GoogleDrive#EditGoogleSlide";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Slide");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.2"),
			userPassword = PropsUtil.get("email.password.2"),
			windowTitle = "Documents and Media Page - Liferay");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoEditDocumentPG(dmDocumentTitle = "Untitled");

		AssertTextEquals(
			key_fieldLabel = "Title",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Untitled");

		AssertTextEquals(
			key_fieldLabel = "File Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Untitled.pptx");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		GoogleDoc.gotoEdit(
			dmDocumentTitle = "Untitled",
			dmDocumentTypeName = "Google Slides");

		GoogleDoc.editTitleInGoogleDoc(dmDocumentTitle = "Edited Google Slide");

		GoogleDoc.saveAndExit();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		AssertTextEquals(
			key_dmDocumentTitle = "Edited Google Slide",
			locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE",
			value1 = "Edited Google Slide");

		DMNavigator.gotoEditDocumentPG(dmDocumentTitle = "Edited Google Slide");

		AssertTextEquals(
			key_fieldLabel = "Title",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Edited Google Slide");

		AssertTextEquals(
			key_fieldLabel = "File Name",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "Edited Google Slide.pptx");
	}

	@description = "This test ensures that a document is checked out when the Google Doc editor is being used"
	@priority = "5"
	test GoogleDocSmoke {
		property test.name.skip.portal.instance = "GoogleDrive#GoogleDocSmoke";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Doc");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewCheckedoutPG(
			dmDocumentTitle = "Untitled",
			status = "Draft");
	}

	@description = "This test ensures that a document is checked out when the Google Sheet editor is being used"
	@priority = "5"
	test GoogleSheetSmoke {
		property test.name.skip.portal.instance = "GoogleDrive#GoogleSheetSmoke";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Sheet");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.2"),
			userPassword = PropsUtil.get("email.password.2"),
			windowTitle = "Documents and Media Page - Liferay");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewCheckedoutPG(
			dmDocumentTitle = "Untitled",
			status = "Draft");
	}

	@description = "This test ensures that a document is checked out when the Google Slide editor is being used"
	@priority = "5"
	test GoogleSlideSmoke {
		property test.name.skip.portal.instance = "GoogleDrive#GoogleSlideSmoke";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Slide");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.2"),
			userPassword = PropsUtil.get("email.password.2"),
			windowTitle = "Documents and Media Page - Liferay");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.viewCheckedoutPG(
			dmDocumentTitle = "Untitled",
			status = "Draft");
	}

	@description = "This test covers LPS-93897. It ensures that previously entered Google credentials can be cleared."
	@priority = "5"
	test RevokeGoogleDriveCredentials {
		property test.name.skip.portal.instance = "GoogleDrive#RevokeGoogleDriveCredential";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Doc");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay");

		GoogleDoc.saveAndExit();

		UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

		UserNavigator.gotoGeneral();

		Navigator.gotoNavNested(navNested = "Apps");

		Click(
			key_text = "Revoke",
			locator1 = "Button#ANY");

		Alert.viewSuccessMessage();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Sheet");

		task ("Assert the request for credentials to be reentered") {
			Google.signIn(
				userEmailAddress = PropsUtil.get("email.address.3"),
				userPassword = PropsUtil.get("email.password.3"),
				windowTitle = "Documents and Media Page - Liferay");

			GoogleDoc.saveAndExit();
		}
	}

	@description = "This test covers LPS-91174. It ensures that a user cannot save a Google Doc in Portal after logging out."
	@priority = "5"
	test SaveGoogleDocAfterLoggingOut {
		property test.name.skip.portal.instance = "GoogleDrive#SaveGoogleDocAfterLoggingOut";

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Doc");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay");

		Open.openInTheNewTab(locator1 = "http://localhost:8080");

		SelectWindow(locator1 = "title=Home - ${siteName}");

		UserBar.signOut();

		Close.closeWindow(locator1 = "title=Home - ${siteName}");

		GoogleDoc.saveAndExit();

		WaitForElementPresent(locator1 = "UserBar#USER_SIGN_IN");

		AssertConsoleTextNotPresent(value1 = "javax.portlet.PortletException:");
	}

	@description = "This test ensures that the Google Drive file can be added with Japanese."
	@priority = "5"
	test TitleAndFileNameCanBeDisplayedCorrectlyWithJapanese {
		property test.name.skip.portal.instance = "GoogleDrive#TitleAndFileNameCanBeDisplayedCorrectlyWithJapanese";

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMNavigator.gotoAddDocumentTypePG(dmDocumentTypeName = "Google Doc");

		Google.signIn(
			userEmailAddress = PropsUtil.get("email.address.3"),
			userPassword = PropsUtil.get("email.password.3"),
			windowTitle = "Documents and Media Page - Liferay");

		GoogleDoc.editTitleInGoogleDoc(dmDocumentTitle = "これは日本語のファイルです");

		GoogleDoc.saveAndExit();

		DMNavigator.openToEditEntryInSite(
			dmDocumentTitle = "これは日本語のファイルです",
			groupName = "Guest",
			siteURLKey = "guest");

		DMDocument.viewEntryInEdit(
			dmDocumentFileName = "これは日本語のファイルです.docx",
			dmDocumentTitle = "これは日本語のファイルです");
	}

}