@component-name = "portal-liferay-online"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Masterclass";

	var testSiteName = "Test Masterclass Name";
	var testSiteURL = "test-masterclass-name";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Masterclass Site") {
			Masterclass.addMasterclassSite(siteName = "${testSiteName}");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "${testSiteName}");
		}
	}

	@description = "This is a test for LPS-137508. Create a Site with the Masterclass Site initializer"
	@priority = "5"
	test AddMasterclassSite {
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Site") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");
		}

		task ("Assert the Masterclass Welcome Page is present") {
			AssertElementPresent(
				key_title = "Welcome to Masterclass",
				locator1 = "Masterclass#FRAGMENT_HERO_PRE");
		}
	}

	@description = "This is a test for LPS-141573. Apply the Masterclass Modern Style Book to home pages"
	@priority = "4"
	test ApplyMasterclassModernStyleBook {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Stylebook and set Masterclass Moderns as Default") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "${testSiteURL}");

			StyleBooksAdmin.markStyleBookAsDefault(
				confirmMessage = "Do you want to replace Masterclass Classic for Masterclass Modern as the default style book?",
				styleBookName = "Masterclass Modern");
		}

		task ("Assert the default Masterclass Moderns is applied to Home page") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");

			AssertCssValue(
				key_content = "Read More",
				key_element = "a",
				key_id = "hero-button",
				key_type = "link",
				locator1 = "StyleBookEditor#CONTRIBUTED_FRAGMENT_INLINE_CONTENT",
				locator2 = "color",
				value1 = "rgba(255, 255, 255, 1)");
		}
	}

	@description = "This is a test for LPS-136183. Can use a Masterclass Border fragment"
	@priority = "3"
	test CanUseMasterclassBorder {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a new Page by Json") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Drag and Drop the Masterclass Border fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.addFragment(
				collectionName = "Masterclass",
				fragmentName = "Masterclass Border");
		}

		task ("Preview the Page and Assert the fragment is present") {
			Masterclass.previewPageandAssertFragment(fragmentName = "component-border");
		}
	}

	@description = "This is a test for LPS-136183. Can use a Masterclass button fragment"
	@priority = "3"
	test CanUseMasterclassButton {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a new Page by Json") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Drag and Drop the Masterclass Button fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.addFragment(
				collectionName = "Masterclass",
				fragmentName = "Masterclass Button");
		}

		task ("Preview the Page and Assert the fragment is present") {
			Masterclass.previewPageandAssertFragment(fragmentName = "masterclass-button");
		}
	}

	@description = "This is a test for LPS-136183. Can use a Masterclass Classroom Header fragment"
	@priority = "3"
	test CanUseMasterclassClassroomHeader {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a new Page by Json") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Drag and Drop the Masterclass Classroom Header fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.addFragment(
				collectionName = "Masterclass",
				fragmentName = "Masterclass Classroom Header");
		}

		task ("Preview the Page and Assert the fragment is present") {
			Masterclass.previewPageandAssertFragment(fragmentName = "masterclass-classroom-header");
		}
	}

	@description = "This is a test for LPS-136183. Can use a Masterclass Container fragment"
	@priority = "3"
	test CanUseMasterclassContainer {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a new Page by Json") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Drag and Drop the Masterclass Container fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.addFragment(
				collectionName = "Masterclass",
				fragmentName = "Masterclass Container");
		}

		task ("Preview the Page and Assert the fragment is present") {
			Masterclass.previewPageandAssertFragment(fragmentName = "masterclass-container");
		}
	}

	@description = "This is a test for LPS-136183. Can use a Masterclass Cookie Banner fragment"
	@priority = "3"
	test CanUseMasterclassCookieBanner {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a new Page by Json") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Drag and Drop the Masterclass Cookie Banner fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.addFragment(
				collectionName = "Masterclass",
				fragmentName = "Masterclass Cookie Banner");
		}

		task ("Preview the Page and Assert the fragment is present") {
			Masterclass.previewPageandAssertFragment(fragmentName = "cookie-banner");
		}
	}

	@description = "This is a test for LPS-136183. Can use a Masterclass Footer fragment"
	@priority = "3"
	test CanUseMasterclassFooter {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a new Page by Json") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Drag and Drop the Masterclass Footer fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.addFragment(
				collectionName = "Masterclass",
				fragmentName = "Masterclass Footer");
		}

		task ("Preview the Page and Assert the fragment is present") {
			Masterclass.previewPageandAssertFragment(fragmentName = "masterclass-footer");
		}
	}

	@description = "This is a test for LPS-136183. Can use a Masterclass Heading fragment"
	@priority = "3"
	test CanUseMasterclassHeading {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a new Page by Json") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Drag and Drop the Masterclass Heading fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.addFragment(
				collectionName = "Masterclass",
				fragmentName = "Masterclass Heading");
		}

		task ("Preview the Page and Assert the fragment is present") {
			Masterclass.previewPageandAssertFragment(fragmentName = "component-heading");
		}
	}

	@description = "This is a test for LPS-136183. Can use a Masterclass Hero fragment"
	@priority = "3"
	test CanUseMasterclassHero {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a new Page by Json") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Drag and Drop the Masterclass Hero fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.addFragment(
				collectionName = "Masterclass",
				fragmentName = "Masterclass Hero");
		}

		task ("Preview the Page and Assert the fragment is present") {
			Masterclass.previewPageandAssertFragment(fragmentName = "container-fluid-max-xl hero");
		}
	}

	@description = "This is a test for LPS-136183. Can use a Masterclass Image fragment"
	@priority = "3"
	test CanUseMasterclassImage {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a new Page by Json") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Drag and Drop the Masterclass Image fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.addFragment(
				collectionName = "Masterclass",
				fragmentName = "Masterclass Image");
		}

		task ("Preview the Page and Assert the fragment is present") {
			Masterclass.previewPageandAssertFragment(fragmentName = "component-image");
		}
	}

	@description = "This is a test for LPS-136183. Can use a Masterclass link fragment"
	@priority = "3"
	test CanUseMasterclassLink {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a new Page by Json") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Drag and Drop the Masterclass Link fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.addFragment(
				collectionName = "Masterclass",
				fragmentName = "Masterclass Link");
		}

		task ("Preview the Page and Assert the fragment is present") {
			Masterclass.previewPageandAssertFragment(fragmentName = "masterclass-link");
		}
	}

	@description = "This is a test for LPS-136183. Can use a Masterclass Map Video fragment"
	@priority = "3"
	test CanUseMasterclassMapVideo {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a new Page by Json") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Drag and Drop the Masterclass Video Map fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.addFragment(
				collectionName = "Masterclass",
				fragmentName = "Masterclass Video Map");
		}

		task ("Preview the Page and Assert the fragment is present") {
			Masterclass.previewPageandAssertFragment(fragmentName = "component-video");
		}
	}

	@description = "This is a test for LPS-136183. Can use a Masterclass Navbar fragment"
	@priority = "3"
	test CanUseMasterclassNavbar {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a new Page by Json") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Drag and Drop the Masterclass Navbar fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.addFragment(
				collectionName = "Masterclass",
				fragmentName = "Masterclass Navbar");
		}

		task ("Preview the Page and Assert the fragment is present") {
			Masterclass.previewPageandAssertFragment(fragmentName = "masterclass-navbar");
		}
	}

	@description = "This is a test for LPS-136183. Can use a Masterclass Private Header fragment"
	@priority = "3"
	test CanUseMasterclassPrivateHeader {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a new Page by Json") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Drag and Drop the Masterclass Private Header fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.addFragment(
				collectionName = "Masterclass",
				fragmentName = "Masterclass Private Header");
		}

		task ("Preview the Page and Assert the fragment is present") {
			Masterclass.previewPageandAssertFragment(fragmentName = "masterclass-private-header");
		}
	}

	@description = "This is a test for LPS-136183. Can use a Masterclass Sign In fragment"
	@priority = "3"
	test CanUseMasterclassSignIn {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a new Page by Json") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Drag and Drop the Masterclass Sign In fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.addFragment(
				collectionName = "Masterclass",
				fragmentName = "Masterclass Sign In");
		}

		task ("Preview the Page and Assert the fragment is present") {
			Masterclass.previewPageandAssertFragment(fragmentName = "sign-in vh-100");
		}
	}

	@description = "This is a test for LPS-136183. Can use a Masterclass Subscribe Form fragment"
	@priority = "3"
	test CanUseMasterclassSubscribeForm {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a new Page by Json") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Drag and Drop the Masterclass Subscribe Form fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.addFragment(
				collectionName = "Masterclass",
				fragmentName = "Masterclass Subscribe Form");
		}

		task ("Preview the Page and Assert the fragment is present") {
			Masterclass.previewPageandAssertFragment(fragmentName = "newsletter-form");
		}
	}

	@description = "This is a test for LPS-136183. Can use a Masterclass Tabs fragment"
	@priority = "3"
	test CanUseMasterclassTabs {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a new Page by Json") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Drag and Drop the Masterclass Tabs fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.addFragment(
				collectionName = "Masterclass",
				fragmentName = "Masterclass Tabs");
		}

		task ("Preview the Page and Assert the fragment is present") {
			Masterclass.previewPageandAssertFragment(fragmentName = "masterclass-tabs");
		}
	}

	@description = "This is a test for LPS-136183. Can use a Masterclass Text Block fragment"
	@priority = "3"
	test CanUseMasterclassTextBlock {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a new Page by Json") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Drag and Drop the Masterclass Text Block fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.addFragment(
				collectionName = "Masterclass",
				fragmentName = "Masterclass Text Block");
		}

		task ("Preview the Page and Assert the fragment is present") {
			Masterclass.previewPageandAssertFragment(fragmentName = "component-text-block");
		}
	}

	@description = "This is a test for LPS-136183. Can use a Masterclass Video fragment"
	@priority = "3"
	test CanUseMasterclassVideo {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a new Page by Json") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Drag and Drop the Masterclass Video fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.addFragment(
				collectionName = "Masterclass",
				fragmentName = "Masterclass Video");

			PageEditor.gotoConfiguration(fragmentName = "Masterclass Video");

			PageEditor.addVideoFragmentURL(videoLink = "https://www.youtube.com/watch?v=2EPZxIC5ogU");
		}

		task ("Preview the Page and Assert the fragment is present") {
			Masterclass.previewPageandAssertFragment(fragmentName = "video");

			YoutubePortlet.assertVideoTitle(videoTitle = "Life at Liferay - A Look into Liferay Culture");
		}
	}

	@description = "This is a test for LPS-136183. Can use a Masterclass Video Player fragment"
	@priority = "3"
	test CanUseMasterclassVideoPlayer {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Create a new Page by Json") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Drag and Drop the Masterclass Video Player fragment") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.addFragment(
				collectionName = "Masterclass",
				fragmentName = "Masterclass Video Player");
		}

		task ("Preview the Page and Assert the fragment is present") {
			Masterclass.previewPageandAssertFragment(fragmentName = "courses");
		}
	}

	@description = "This is a test for LPS-141370. Can change the Number of Blogs in the List at Display Page Template of Blogs"
	@priority = "4"
	test ChangetheNumberofBlogsinBlogsListatDPT {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Display Page Templates") {
			ProductMenu.gotoPortlet(
				category = "Design",
				portlet = "Page Templates");

			NavItem.gotoPageTemplates();

			Navigator.gotoNavTab(navTab = "Display Page Templates");
		}

		task ("Go to Blog Entry and Edit the Layout and Maximum Number of Itens") {
			LexiconEntry.gotoEntry(rowEntry = "Blog Entry");

			WaitForPageLoad();

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				maxNumberOfItemsToDisplay = "5",
				selectedName = "Blog Entries");
		}

		task ("On Preview Mode Assert the Number of Blogs in the List") {
			PageEditor.openPreviewMode();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			for (var n : list "1,2,3,4,5") {
				AssertVisible(
					key_position = "${n}",
					locator1 = "Masterclass#COLUMNS_NUMBER");
			}
		}
	}

	@description = "This is a test for LPS-141750. Create Account in Masterclass"
	@priority = "4"
	test CreateAccountInMasterclass {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
		property test.name.skip.portal.instance = "Masterclass#CreateAccountInMasterclass";

		task ("Disable Captcha to Create a New User") {
			WorkflowUser.disableCaptchaToCreateNewUserAndSendPassword();
		}

		task ("Disable the Email Verification") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "User Authentication",
				configurationName = "General",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.uncheckStrangersVerifyEmailCheckbox();
		}

		task ("Go to Masterclass Site") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");
		}

		task ("Go to Sign In Page") {
			Masterclass.gotoNavItem(navItem = "Sign Out");

			Click(locator1 = "Masterclass#NAV_TAB");
		}

		task ("Create a New Account") {
			Masterclass.createAccount(
				emailAddress = "usera@liferay.com",
				firstName = "Usera",
				lastName = "Usera",
				password = "user",
				screenName = "Usera");
		}

		task ("Sign In the New Account and Assert the User Name") {
			User.firstLoginUI(
				password = "user",
				specificURL = "http://localhost:8080/web/${testSiteURL}/sign-in",
				userEmailAddress = "usera@liferay.com");

			User.resetPassword();

			User.answerPasswordReminder();

			AssertElementPresent(
				labelName = "Usera",
				locator1 = "Masterclass#LABEL_NAME");
		}
	}

	@description = "This is a test for LPS-141750. Forgot Password in Masterclass"
	@priority = "4"
	test ForgotPasswordInMasterclass {
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
		property test.name.skip.portal.instance = "Masterclass#ForgotPasswordInMasterclass";

		task ("Disable Captcha to Create a New User") {
			WorkflowUser.disableCaptchaToCreateNewUserAndSendPassword();
		}

		task ("Go to Masterclass Site") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");
		}

		task ("Go to Sign In Page") {
			Masterclass.gotoNavItem(navItem = "Sign Out");

			Click(locator1 = "Masterclass#NAV_TAB");
		}

		task ("Go to Forgot Password") {
			Click(
				labelOption = "Forgot Password",
				locator1 = "FormViewBuilder#FIELD_LABEL_OPTION");
		}

		task ("Fill the Email and Go To Next") {
			Type(
				labelTitle = "Email Address",
				locator1 = "Masterclass#SIGN_IN_FORM",
				value1 = "test@liferay.com");

			Click(locator1 = "Button#SUBMIT");
		}

		task ("Answer the Question, Submit and Assert the Success Message") {
			Type(
				locator1 = "Masterclass#FORM_GROUP",
				value1 = "test");

			Click(locator1 = "Button#SUBMIT");

			Alert.viewSuccessMessageText(successMessage = "Your request completed successfully.");
		}
	}

	@description = "This is a test for LPS-140611. Masterclass Apply Page in Desktop size"
	@priority = "3"
	test MasterclassApplyinDesktopSize {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Apply Page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Apply",
				siteName = "${testSiteName}");
		}

		task ("Preview the Page with Desktop Size") {
			MobileDevice.previewPG(deviceType = "desktop");
		}

		task ("Assert the Page Elements are Present in Frame") {
			WaitForPageLoad();

			for (var fragmentName : list "heading,navbar,footer") {
				AssertElementPresent(
					fragmentName = "${fragmentName}",
					index = "1",
					locator1 = "Fragment#FRAGMENT_BODY");
			}
		}
	}

	@description = "This is a test for LPS-140611. Masterclass Apply Page in Mobile size"
	@priority = "3"
	test MasterclassApplyinMobileSize {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Apply Page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Apply",
				siteName = "${testSiteName}");
		}

		task ("Preview the Page with Mobile Size") {
			MobileDevice.previewPG(deviceType = "smartphone");
		}

		task ("Assert the Page Elements are Present in Frame") {
			WaitForPageLoad();

			for (var fragmentName : list "heading,navbar,footer") {
				AssertElementPresent(
					fragmentName = "${fragmentName}",
					index = "1",
					locator1 = "Fragment#FRAGMENT_BODY");
			}
		}
	}

	@description = "This is a test for LPS-140611. Masterclass Apply Page in Tablet size"
	@priority = "3"
	test MasterclassApplyinTabletSize {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Apply Page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Apply",
				siteName = "${testSiteName}");
		}

		task ("Preview the Page with Tablet Size") {
			MobileDevice.previewPG(deviceType = "tablet");
		}

		task ("Assert the Page Elements are Present in Frame") {
			WaitForPageLoad();

			for (var fragmentName : list "heading,navbar,footer") {
				AssertElementPresent(
					fragmentName = "${fragmentName}",
					index = "1",
					locator1 = "Fragment#FRAGMENT_BODY");
			}
		}
	}

	@description = "This is a test for LPS-140611. Masterclass Blog Page in Desktop size"
	@priority = "4"
	test MasterclassBloginDesktopSize {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Blog Page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Blog",
				siteName = "${testSiteName}");
		}

		task ("Preview the Page with Desktop Size") {
			MobileDevice.previewPG(deviceType = "desktop");
		}

		task ("Assert the Page Elements are Present in Frame") {
			WaitForPageLoad();

			for (var fragmentName : list "heading,navbar,footer") {
				AssertElementPresent(
					fragmentName = "${fragmentName}",
					index = "1",
					locator1 = "Fragment#FRAGMENT_BODY");
			}
		}
	}

	@description = "This is a test for LPS-140611. Masterclass Blog Page in Mobile size"
	@priority = "4"
	test MasterclassBloginMobileSize {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Blog Page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Blog",
				siteName = "${testSiteName}");
		}

		task ("Preview the Page with Mobile Size") {
			MobileDevice.previewPG(deviceType = "smartphone");
		}

		task ("Assert the Page Elements are Present in Frame") {
			WaitForPageLoad();

			for (var fragmentName : list "heading,navbar,footer") {
				AssertElementPresent(
					fragmentName = "${fragmentName}",
					index = "1",
					locator1 = "Fragment#FRAGMENT_BODY");
			}
		}
	}

	@description = "This is a test for LPS-140611. Masterclass Blog Page in Tablet size"
	@priority = "4"
	test MasterclassBloginTabletSize {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Blog Page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Blog",
				siteName = "${testSiteName}");
		}

		task ("Preview the Page with Tablet Size") {
			MobileDevice.previewPG(deviceType = "tablet");
		}

		task ("Assert the Page Elements are Present in Frame") {
			WaitForPageLoad();

			for (var fragmentName : list "heading,navbar,footer") {
				AssertElementPresent(
					fragmentName = "${fragmentName}",
					index = "1",
					locator1 = "Fragment#FRAGMENT_BODY");
			}
		}
	}

	@description = "This is a test for LPS-140611. Masterclass Home Page in Desktop size"
	@priority = "4"
	test MasterclassHomeinDesktopSize {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Home Page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Home",
				siteName = "${testSiteName}");
		}

		task ("Preview the Page with Desktop Size") {
			MobileDevice.previewPG(deviceType = "desktop");
		}

		task ("Assert the Page Elements are Present in Frame") {
			WaitForPageLoad();

			for (var fragmentName : list "hero,navbar,footer") {
				AssertElementPresent(
					fragmentName = "${fragmentName}",
					index = "1",
					locator1 = "Fragment#FRAGMENT_BODY");
			}
		}
	}

	@description = "This is a test for LPS-140611. Masterclass Home Page in Mobile size"
	@priority = "4"
	test MasterclassHomeinMobileSize {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Home Page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Home",
				siteName = "${testSiteName}");
		}

		task ("Preview the Page with Mobile Size") {
			MobileDevice.previewPG(deviceType = "smartphone");
		}

		task ("Assert the Page Elements are Present in Frame") {
			WaitForPageLoad();

			for (var fragmentName : list "hero,navbar,footer") {
				AssertElementPresent(
					fragmentName = "${fragmentName}",
					index = "1",
					locator1 = "Fragment#FRAGMENT_BODY");
			}
		}
	}

	@description = "This is a test for LPS-140611. Masterclass Home Page in Tablet size"
	@priority = "4"
	test MasterclassHomeinTabletSize {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Home Page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Home",
				siteName = "${testSiteName}");
		}

		task ("Preview the Page with Tablet Size") {
			MobileDevice.previewPG(deviceType = "tablet");
		}

		task ("Assert the Page Elements are Present in Frame") {
			WaitForPageLoad();

			for (var fragmentName : list "hero,navbar,footer") {
				AssertElementPresent(
					fragmentName = "${fragmentName}",
					index = "1",
					locator1 = "Fragment#FRAGMENT_BODY");
			}
		}
	}

	@description = "This is a test for LPS-141572. 'Masterclass Modern' starts checked as the default Style Book in Masterclass Site"
	@priority = "2"
	test MasterclassModernDontStartAsDefaultStylebook {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Style Books and Assert the Masterclass Classic Card") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "${testSiteURL}");

			StyleBooksAdmin.viewStyleBooksPresent(styleBookName = "Masterclass Classic");
		}

		task ("Assert the Stylebook Masterclass Classic is Masked as Default") {
			LexiconCard.viewCardSticker(
				card = "Masterclass Classic",
				icon = "check-circle");
		}
	}

	@description = "This is a test for LPS-140611. Masterclass My Learning Page in Desktop size"
	@priority = "4"
	test MasterclassMyLearninginDesktopSize {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to My Learning Page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "My Learning",
				siteName = "${testSiteName}");
		}

		task ("Preview the Page with Desktop Size") {
			MobileDevice.previewPG(deviceType = "desktop");
		}

		task ("Assert the Page Elements are Present in Frame") {
			WaitForPageLoad();

			for (var fragmentName : list "header,navbar,footer") {
				AssertElementPresent(
					fragmentName = "${fragmentName}",
					index = "1",
					locator1 = "Fragment#FRAGMENT_BODY");
			}
		}
	}

	@description = "This is a test for LPS-140611. Masterclass My Learning Page in Mobile size"
	@priority = "4"
	test MasterclassMyLearninginMobileSize {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to My Learning Page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "My Learning",
				siteName = "${testSiteName}");
		}

		task ("Preview the Page with Mobile Size") {
			MobileDevice.previewPG(deviceType = "smartphone");
		}

		task ("Assert the Page Elements are Present in Frame") {
			WaitForPageLoad();

			for (var fragmentName : list "header,navbar,footer") {
				AssertElementPresent(
					fragmentName = "${fragmentName}",
					index = "1",
					locator1 = "Fragment#FRAGMENT_BODY");
			}
		}
	}

	@description = "This is a test for LPS-140611. Masterclass My Learning Page in Tablet size"
	@priority = "4"
	test MasterclassMyLearninginTabletSize {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to My Learning Page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "My Learning",
				siteName = "${testSiteName}");
		}

		task ("Preview the Page with Tablet Size") {
			MobileDevice.previewPG(deviceType = "tablet");
		}

		task ("Assert the Page Elements are Present in Frame") {
			WaitForPageLoad();

			for (var fragmentName : list "header,navbar,footer") {
				AssertElementPresent(
					fragmentName = "${fragmentName}",
					index = "1",
					locator1 = "Fragment#FRAGMENT_BODY");
			}
		}
	}

	@description = "This is a test for LPS-141750. Masterclass Sign In"
	@priority = "5"
	test MasterclassSignIn {
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Site") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");
		}

		task ("Sign Out and Sign In") {
			Masterclass.gotoNavItem(navItem = "Sign Out");

			Click(locator1 = "Masterclass#NAV_TAB");

			Masterclass.signIn();
		}

		task ("Assert the Masterclass Welcome Page presence and the User Name") {
			AssertElementPresent(
				key_title = "Welcome to Masterclass",
				locator1 = "Masterclass#FRAGMENT_HERO_PRE");

			AssertElementPresent(
				labelName = "Test",
				locator1 = "Masterclass#LABEL_NAME");
		}
	}

	@description = "This is a test for LPS-140611. Masterclass Sign In Page in Desktop size"
	@priority = "4"
	test MasterclassSignIninDesktopSize {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Sign In Page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Sign In",
				siteName = "${testSiteName}");
		}

		task ("Preview the Page with Desktop Size") {
			MobileDevice.previewPG(deviceType = "desktop");
		}

		task ("Assert the Page Elements are Present in Frame") {
			WaitForPageLoad();

			for (var fragmentName : list "logo,form") {
				AssertElementPresent(
					fragmentName = "${fragmentName}",
					index = "1",
					locator1 = "Fragment#FRAGMENT_BODY");
			}
		}
	}

	@description = "This is a test for LPS-140611. Masterclass Sign In Page in Mobile size"
	@priority = "4"
	test MasterclassSignIninMobileSize {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Sign In Page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Sign In",
				siteName = "${testSiteName}");
		}

		task ("Preview the Page with Mobile Size") {
			MobileDevice.previewPG(deviceType = "smartphone");
		}

		task ("Assert the Page Elements are Present in Frame") {
			WaitForPageLoad();

			for (var fragmentName : list "logo,form") {
				AssertElementPresent(
					fragmentName = "${fragmentName}",
					index = "1",
					locator1 = "Fragment#FRAGMENT_BODY");
			}
		}
	}

	@description = "This is a test for LPS-140611. Masterclass Sign In Page in Tablet size"
	@priority = "4"
	test MasterclassSignIninTabletSize {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Sign In Page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Sign In",
				siteName = "${testSiteName}");
		}

		task ("Preview the Page with Tablet Size") {
			MobileDevice.previewPG(deviceType = "tablet");
		}

		task ("Assert the Page Elements are Present in Frame") {
			WaitForPageLoad();

			for (var fragmentName : list "logo,form") {
				AssertElementPresent(
					fragmentName = "${fragmentName}",
					index = "1",
					locator1 = "Fragment#FRAGMENT_BODY");
			}
		}
	}

	@description = "This is a test for LPS-141750. Masterclass Sign Out"
	@priority = "4"
	test MasterclassSignOut {
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Site") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");
		}

		task ("Sign Out and Assert the Sign In Button is presente") {
			Masterclass.gotoNavItem(navItem = "Sign Out");

			AssertElementPresent(
				labelName = "Sign In",
				locator1 = "Masterclass#LABEL_NAME");
		}
	}

	@description = "This is a test for LPS-141768. View the READ MORE links of the three courses redirect to the course display page"
	@priority = "4"
	test ReadMoreLinksRedirectToCourseDisplayPage {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Site") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");
		}

		task ("Go to Courses Page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Courses",
				siteName = "${testSiteName}");
		}

		task ("Assert the Read More link of the first course redirects to the course display page") {
			Click(
				key_buttonName = "Read More",
				key_href = "product-design-bootcamp",
				locator1 = "Masterclass#FRAGMENT_LINK");

			AssertElementPresent(
				key_title = "Product Design Bootcamp",
				locator1 = "Masterclass#FRAGMENT_HEADING");
		}

		task ("Assert the Read More link of the second course redirects to the course display page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Courses",
				siteName = "${testSiteName}");

			Click(
				key_buttonName = "Read More",
				key_href = "project-manager-certification",
				locator1 = "Masterclass#FRAGMENT_LINK");

			AssertElementPresent(
				key_title = "Project Manager Certification",
				locator1 = "Masterclass#FRAGMENT_HEADING");
		}

		task ("Assert the Read More link of the third course redirects to the course display page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Courses",
				siteName = "${testSiteName}");

			Click(
				key_buttonName = "Read More",
				key_href = "digital-marketing-bootcamp",
				locator1 = "Masterclass#FRAGMENT_LINK");

			AssertElementPresent(
				key_title = "Digital Marketing Bootcamp",
				locator1 = "Masterclass#FRAGMENT_HEADING");
		}
	}

	@description = "This is a test for LPS-140613. View if the Student can have permissions set"
	@priority = "4"
	test SetStudentPermission {
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Add Pages permissions to Student under the Site and Asset Library Administration tab") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.definePermissionCP(
				permissionDefinitionKey = "SITE_ADMIN_PAGES_SITE_PAGES_GENERAL_PERMISSIONS_VIEW_CHECKBOX",
				permissionDefinitionValue = "View",
				roleTitle = "Student",
				roleType = "Site");

			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.definePermissionCP(
				permissionDefinitionKey = "SITE_ADMIN_PAGES_SITE_PAGES_RESOURCE_PERMISSIONS_PAGE_VIEW_CHECKBOX",
				permissionDefinitionValue = "View",
				roleTitle = "Student",
				roleType = "Site");

			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.definePermissionCP(
				permissionDefinitionKey = "SITE_ADMIN_PAGES_SITE_PAGES_RESOURCE_PERMISSIONS_SITE_VIEW_CHECKBOX",
				permissionDefinitionValue = "View",
				roleTitle = "Student",
				roleType = "Site");
		}

		task ("View table permissions to Student") {
			AssertElementPresent(
				key_permissionDefinitionValue = "Pages",
				key_permissionNavigationValue = "Pages: View",
				locator1 = "RolesPermissionsSummary#PERMISSION_TABLE_PERMISSIONS");

			AssertElementPresent(
				key_permissionDefinitionValue = "Pages",
				key_permissionNavigationValue = "Page: View",
				locator1 = "RolesPermissionsSummary#PERMISSION_TABLE_PERMISSIONS");

			AssertElementPresent(
				key_permissionDefinitionValue = "Site Settings",
				key_permissionNavigationValue = "Site: View",
				locator1 = "RolesPermissionsSummary#PERMISSION_TABLE_PERMISSIONS");
		}
	}

	@description = "This is a test for LPS-140613. View if the Teacher can have permissions set"
	@priority = "4"
	test SetTeacherPermission {
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Add Pages permissions to Teacher under the Site and Asset Library Administration tab") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.definePermissionCP(
				permissionDefinitionKey = "SITE_ADMIN_PAGES_SITE_PAGES_GENERAL_PERMISSIONS_VIEW_CHECKBOX",
				permissionDefinitionValue = "View",
				roleTitle = "Teacher",
				roleType = "Site");

			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.definePermissionCP(
				permissionDefinitionKey = "SITE_ADMIN_PAGES_SITE_PAGES_RESOURCE_PERMISSIONS_PAGE_VIEW_CHECKBOX",
				permissionDefinitionValue = "View",
				roleTitle = "Teacher",
				roleType = "Site");

			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.definePermissionCP(
				permissionDefinitionKey = "SITE_ADMIN_PAGES_SITE_PAGES_RESOURCE_PERMISSIONS_SITE_VIEW_CHECKBOX",
				permissionDefinitionValue = "View",
				roleTitle = "Teacher",
				roleType = "Site");
		}

		task ("View table permissions to Teacher") {
			AssertElementPresent(
				key_permissionDefinitionValue = "Pages",
				key_permissionNavigationValue = "Pages: View",
				locator1 = "RolesPermissionsSummary#PERMISSION_TABLE_PERMISSIONS");

			AssertElementPresent(
				key_permissionDefinitionValue = "Pages",
				key_permissionNavigationValue = "Page: View",
				locator1 = "RolesPermissionsSummary#PERMISSION_TABLE_PERMISSIONS");

			AssertElementPresent(
				key_permissionDefinitionValue = "Site Settings",
				key_permissionNavigationValue = "Site: View",
				locator1 = "RolesPermissionsSummary#PERMISSION_TABLE_PERMISSIONS");
		}
	}

	@description = "This is a test for LPS-148457. Masterclass create account and forgot password are not displayed in sign in page"
	@priority = "3"
	test SignInPageDoesNotDisplayCreateAndForgotPage {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Site") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");
		}

		task ("Go to Sign In Page") {
			Masterclass.gotoNavItem(navItem = "Sign Out");

			Click(locator1 = "Masterclass#NAV_TAB");
		}

		task ("Go to Create Account") {
			Click(
				labelOption = "Create Account",
				locator1 = "FormViewBuilder#FIELD_LABEL_OPTION");
		}

		task ("Go Back Using Browser Button") {
			Masterclass.goBackUsingBrowserButton();
		}

		task ("Assert Create Account Form is not displayed") {
			AssertElementNotPresent(
				labelTitle = "Screen Name",
				locator1 = "Masterclass#SIGN_IN_FORM");
		}

		task ("Assert Sign In form is displayed") {
			Masterclass.verifySignInForm();
		}

		task ("Go to Forgot Password") {
			Click(
				labelOption = "Forgot Password",
				locator1 = "FormViewBuilder#FIELD_LABEL_OPTION");
		}

		task ("Go Back Using Browser Button") {
			Masterclass.goBackUsingBrowserButton();
		}

		task ("Assert Create Account Form is not displayed") {
			AssertElementNotPresent(
				labelTitle = "Text Verification",
				locator1 = "Masterclass#SIGN_IN_FORM");
		}

		task ("Assert Sign In form is displayed") {
			Masterclass.verifySignInForm();
		}
	}

	@description = "This is a test for LPS-141768. View the three available courses in Home content page"
	@priority = "4"
	test ViewAvailableCoursesinHomeCP {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Site") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");
		}

		task ("Assert the first course is present in Home page") {
			Masterclass.viewCoursesInPage(
				key_buttonName = "Read More",
				key_description = "This is a short description to introduce the key aspects of the course.",
				key_href = "product-design-bootcamp",
				key_title = "Product Design Bootcamp");
		}

		task ("Assert the second course is present in Home page") {
			Masterclass.viewCoursesInPage(
				key_buttonName = "Read More",
				key_description = "This is a short description to introduce the key aspects of the course.",
				key_href = "project-manager-certification",
				key_title = "Project Manager Certification");
		}

		task ("Assert the third course is present in Home page") {
			Masterclass.viewCoursesInPage(
				key_buttonName = "Read More",
				key_description = "This is a short description to introduce the key aspects of the course.",
				key_href = "digital-marketing-bootcamp",
				key_title = "Digital Marketing Bootcamp");
		}
	}

	@description = "This is a test for LPS-141370. View a Blog Collection in Display Page Template of Blogs"
	@priority = "4"
	test ViewBlogCollectioninDPTofBlogs {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Site") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");
		}

		task ("Go to Display Page Templates") {
			ProductMenu.gotoPortlet(
				category = "Design",
				portlet = "Page Templates");

			NavItem.gotoPageTemplates();

			Navigator.gotoNavTab(navTab = "Display Page Templates");
		}

		task ("Go to Blog Entry and Assert the List of Blogs Presence") {
			LexiconEntry.gotoEntry(rowEntry = "Blog Entry");

			PageEditor.openPreviewMode();

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			for (var n : list "1,2,3") {
				AssertVisible(
					key_position = "${n}",
					locator1 = "Masterclass#COLUMNS_NUMBER");
			}
		}
	}

	@description = "This is a test for LPS-141370. View a List of Blogs in the Blog Detail View"
	@priority = "4"
	test ViewBlogListinBlogDetailView {
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Site") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");
		}

		task ("Go to Blog and Assert the List of Blogs in Blog Detail View") {
			Navigator.gotoSitePage(
				pageName = "Blog",
				siteName = "${testSiteName}");

			Click(locator1 = "Experience#FRAGMENT_HEADING");

			for (var n : list "1,2,3") {
				AssertVisible(
					key_position = "${n}",
					locator1 = "Masterclass#COLUMNS_NUMBER");
			}
		}
	}

	@description = "This is a test for LPS-141768. View list to the three available courses pages"
	@priority = "4"
	test ViewListofAvailableCoursesPage {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Site") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");
		}

		task ("Go to Courses Page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Courses",
				siteName = "${testSiteName}");
		}

		task ("Assert the first course is present in Courses Page") {
			Masterclass.viewCoursesInPage(
				key_buttonName = "Read More",
				key_description = "This is a short description to introduce the key aspects of the course.",
				key_href = "product-design-bootcamp",
				key_title = "Product Design Bootcamp");
		}

		task ("Assert the second course is present in Courses Page") {
			Masterclass.viewCoursesInPage(
				key_buttonName = "Read More",
				key_description = "This is a short description to introduce the key aspects of the course.",
				key_href = "project-manager-certification",
				key_title = "Project Manager Certification");
		}

		task ("Assert the third course is present in Courses Page") {
			Masterclass.viewCoursesInPage(
				key_buttonName = "Read More",
				key_description = "This is a short description to introduce the key aspects of the course.",
				key_href = "digital-marketing-bootcamp",
				key_title = "Digital Marketing Bootcamp");
		}
	}

	@description = "This is a test for LPS-137508. View the Masterclass Categories"
	@priority = "3"
	test ViewMasterclassCategories {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Categories") {
			Category.openCategoriesAdmin(siteURLKey = "${testSiteURL}");
		}

		task ("Assert the Categories are present") {
			for (var categoryName : list "Design,Management,Marketing") {
				Category.viewCP(
					categoryName = "${categoryName}",
					vocabularyName = "Masterclass");
			}
		}
	}

	@description = "This is a test for LPS-137508. View the Masterclass Stylebook Classic Theme"
	@priority = "5"
	test ViewMasterclassClassicStylebook {
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Stylebook") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "${testSiteURL}");
		}

		task ("Assert the Stylebook Classic Theme and Modern Theme are present") {
			for (var styleBookName : list "Masterclass Classic,Masterclass Modern") {
				StyleBooksAdmin.viewStyleBooksPresent(styleBookName = "${styleBookName}");
			}
		}
	}

	@description = "This is a test for LPS-137508. View the Masterclass Collections"
	@priority = "4"
	test ViewMasterclassCollections {
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Collections") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");

			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Collections");
		}

		task ("Assert the Collections are present") {
			for (var key_title : list "Blog Entries,Featured Blog Entries,Courses,Teachers,Classrooms") {
				AssertElementPresent(
					key_title = "${key_title}",
					locator1 = "ItemSelector#LOCATION_INFO_LIST_GENERIC");
			}
		}
	}

	@description = "This is a test for LPS-137508. View the Masterclass Documents"
	@priority = "4"
	test ViewMasterclassDocuments {
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Documents") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "${testSiteURL}");
		}

		task ("Assert the 29 Documents are present") {
			Pagination.changePagination(itemsPerPage = "40");

			for (var key_card : list "video_marketing.mp4,video_management.mp4,video_design.mp4,thumb_video_marketing.jpg,thumb_video_management.jpg,thumb_video_design.jpg,teacher_ralph_edwards.jpg,teacher_jerome_bell.jpg,teacher_jane_cooper.jpg,teacher_esther_howard.jpg,teacher_brooklyn_simmons.jpg,smile.svg,method_03.jpg,method_02.jpg,method_01.jpg,masterclass_logo.svg,logos.svg,form_3.jpg,dollar.svg,calendar.svg,blog_09.jpg,blog_08.jpg,blog_07.jpg,blog_06.jpg,blog_05.jpg,blog_04.jpg,blog_03.jpg,blog_02.jpg,blog_01.jpg") {
				AssertElementPresent(
					key_card = "${key_card}",
					locator1 = "Card#CARD_TITLE");
			}
		}
	}

	@description = "This is a test for LPS-137508. View the Masterclass Fragments Collections"
	@priority = "3"
	test ViewMasterclassFragmentsCollections {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Fragments Collections") {
			FragmentsAdminNavigator.openFragmentsAdmin(siteURLKey = "${testSiteURL}");
		}

		task ("Assert the Fragments Collections are present") {
			for (var key_card : list "Masterclass Heading,Masterclass Button,Masterclass Sign In,Masterclass Video Map,Masterclass Private Header,Masterclass Container,Masterclass Hero,Masterclass Link,Masterclass Tabs,Masterclass Text Block,Masterclass Image,Masterclass Navbar,Masterclass Border,Masterclass Subscribe Form,Masterclass Video Player,Masterclass Footer,Masterclass Cookie Banner,Masterclass Video,Masterclass Classroom Header") {
				AssertElementPresent(
					key_card = "${key_card}",
					locator1 = "Card#CARD_TITLE");
			}
		}
	}

	@description = "This is a test for LPS-141573. View the Masterclass Modern Style Book in content pages"
	@priority = "3"
	test ViewMasterclassModernStyleBookonPage {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Stylebook and set Masterclass Moderns as Default") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "${testSiteURL}");

			StyleBooksAdmin.markStyleBookAsDefault(
				confirmMessage = "Do you want to replace Masterclass Classic for Masterclass Modern as the default style book?",
				styleBookName = "Masterclass Modern");
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = "${testSiteName}",
				layoutName = "Test Page Name",
				type = "content");
		}

		task ("Assert the Masterclass Modern as an Inherited from Master") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "${testSiteName}");

			PageEditor.gotoTab(tabName = "Page Design Options");

			Navigator.gotoNavTab(navTab = "Style Book");

			AssertElementPresent(
				key_card = "Inherited from Master",
				key_styleBookName = "Masterclass Modern",
				locator1 = "StyleBookEditor#STYLE_BOOK_CARD_SELECTED");
		}
	}

	@description = "This is a test for LPS-137508. View the Masterclass Pages"
	@priority = "4"
	test ViewMasterclassPages {
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Pages") {
			PagesAdmin.openPagesAdmin(siteURLKey = "${testSiteURL}");
		}

		task ("Assert the Masterclass Pages are present") {
			for (var pageName : list "Home,404,Account Settings,Apply,Blog,Courses,My Learning,Notifications,Sign In") {
				AssertVisible(
					key_itemName = "${pageName}",
					locator1 = "PagesAdmin#LIST_GROUP_ITEM");
			}
		}
	}

	@description = "This is a test for LPS-137508. View the Masterclass Page Templates"
	@priority = "4"
	test ViewMasterclassPageTemplates {
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Master Page Templates in Masterclass Site") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = "${testSiteURL}");
		}

		task ("Assert Master Page Templates are present") {
			for (var masterLayoutName : list "Blank,Main-1,Main-2,Private Area") {
				MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "${masterLayoutName}");
			}
		}

		task ("Go to Display Page Templates in Masterclass Site") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "${testSiteURL}");
		}

		task ("Assert Display Page Templates are present") {
			for (var displayPageName : list "Blog Entry,Classroom,Course") {
				DisplayPageTemplatesAdmin.viewDisplayPagePresent(displayPageName = "${displayPageName}");
			}
		}
	}

	@description = "This is a test for LPS-137508. View the Masterclass Web Content"
	@priority = "4"
	test ViewMasterclassWebContent {
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Web Content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "${testSiteURL}");
		}

		task ("Assert the 5 Teachers in Web Content are present") {
			WebContentFolder.gotoCP(
				folderName = "Teachers",
				webContentTitle = "Teachers");

			for (var webContentTitle : list "Ralph Edwards,Jerome Bell,Jane Cooper,Esther Howard,Brooklyn Simmons") {
				WebContent.viewTitle(webContentTitle = "${webContentTitle}");
			}
		}

		task ("Assert the 3 Courses in Web Content are present") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "${testSiteURL}");

			WebContentFolder.gotoCP(
				folderName = "Courses",
				webContentTitle = "Courses");

			for (var webContentTitle : list "Digital Marketing Bootcamp,Project Manager Certification,Product Design Bootcamp") {
				WebContent.viewTitle(webContentTitle = "${webContentTitle}");
			}
		}

		task ("Assert the 3 Classrooms in Web Content are present") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "${testSiteURL}");

			WebContentFolder.gotoCP(
				folderName = "Classrooms",
				webContentTitle = "Classrooms");

			for (var webContentTitle : list "Marketing Masterclass Classroom,Project Manager Certificate Classroom,Product Design Bootcamp Classroom") {
				WebContent.viewTitle(webContentTitle = "${webContentTitle}");
			}
		}

		task ("Assert the 9 Blog Entries in Web Content are present") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "${testSiteURL}");

			WebContentFolder.gotoCP(
				folderName = "Blog Entries",
				webContentTitle = "Blog Entries");

			for (var webContentTitle : list "25 management tips from top industry experts,20 gifts you can give to your marketing boss,What the best Management pros do (and you should too),Great people doing a great job in the design industry,When professionals run into problems with design,5 tools everyone in the design industry should be using,Meet the Steve Jobs of the marketing industry") {
				WebContent.viewTitle(webContentTitle = "${webContentTitle}");
			}

			WebContent.viewTitle(
				webContentTitle = '''The worst advice we've ever heard about marketing''',
				webContentTitleEscapeCharacter = '''The worst advice we&#39;ve ever heard about marketing''');

			WebContent.viewTitle(
				webContentTitle = '''Think you're cut out for doing management?''',
				webContentTitleEscapeCharacter = '''Think you&#39;re cut out for doing management?''');
		}

		task ("Go to Structures tab and assert the 4 Structures Names are present") {
			NavItem.gotoStructures();

			for (var webContentTitle : list "Teacher,Course,Classroom,Blog") {
				WebContentStructures.viewCP(structureName = "${structureName}");
			}
		}

		task ("Go to Templates tab and assert the 4 Templates Cards are present") {
			Navigator.gotoNavItem(navItem = "Templates");

			for (var templateName : list "Teacher,Course,Classroom,Blog") {
				WebContentTemplates.viewCardsEntryCP(templateName = "${templateName}");
			}
		}
	}

	@description = "This is a test for LPS-141768. View the names of the three courses redirect to the course display page"
	@priority = "4"
	test ViewNameofCoursesRedirectToCourseDisplayPage {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Site") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");
		}

		task ("Go to Courses Tab") {
			MouseOver(
				key_tab = "Courses",
				locator1 = "NavTab#TAB_LINK");
		}

		task ("Assert the title of the first course redirects to the course display page") {
			Click(
				filterOption = "Product Design Bootcamp",
				locator1 = "ContentDashboard#FILTER_BY_OPTION");

			AssertElementPresent(
				key_title = "Product Design Bootcamp",
				locator1 = "Masterclass#FRAGMENT_HEADING");
		}

		task ("Assert the title of the second course redirects to the course display page") {
			MouseOver(
				key_tab = "Courses",
				locator1 = "NavTab#TAB_LINK");

			Click(
				filterOption = "Project Manager Certification",
				locator1 = "ContentDashboard#FILTER_BY_OPTION");

			AssertElementPresent(
				key_title = "Project Manager Certification",
				locator1 = "Masterclass#FRAGMENT_HEADING");
		}

		task ("Assert the title of the third course redirects to the course display page") {
			MouseOver(
				key_tab = "Courses",
				locator1 = "NavTab#TAB_LINK");

			Click(
				filterOption = "Digital Marketing Bootcamp",
				locator1 = "ContentDashboard#FILTER_BY_OPTION");

			AssertElementPresent(
				key_title = "Digital Marketing Bootcamp",
				locator1 = "Masterclass#FRAGMENT_HEADING");
		}
	}

	@description = "This is a use case for LPS-140253. View no private page in style book on Masterclass site."
	@priority = "4"
	test ViewNoPrivatePageInStyleBooksOnMasterclassSite {
		task ("Go to style books") {
			StyleBooksAdmin.openStyleBooksAdmin(siteURLKey = "${testSiteURL}");

			StyleBooksAdmin.gotoStyleBook(styleBookName = "Masterclass Classic");
		}

		task ("Click more to select a page for preview") {
			Click(
				index = "1",
				locator1 = "StyleBookEditor#PREVIEW_SELECTOR");
		}

		task ("Assert private pages is not shown") {
			SelectFrameTop();

			AssertVisible(
				key_menuItem = "Pages",
				locator1 = "MenuItem#DROPDOWN_MENU_ITEM");

			AssertElementNotPresent(
				key_menuItem = "Public Pages",
				locator1 = "MenuItem#DROPDOWN_MENU_ITEM");
		}
	}

	@description = "This is a test for LPS-141750. View the Sign In page elements"
	@priority = "5"
	test ViewSignInPageElements {
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Masterclass Site") {
			ApplicationsMenu.gotoSite(site = "${testSiteName}");
		}

		task ("Go to Sign In Page") {
			Masterclass.gotoNavItem(navItem = "Sign Out");

			Click(locator1 = "Masterclass#NAV_TAB");
		}

		task ("Assert the Sign In Elements are Present") {
			AssertElementPresent(
				labelTitle = "Email Address",
				locator1 = "Masterclass#SIGN_IN_FORM");

			AssertElementPresent(
				labelTitle = "Password",
				locator1 = "Masterclass#SIGN_IN_FORM");

			AssertElementPresent(
				labelOption = "Create Account",
				locator1 = "FormViewBuilder#FIELD_LABEL_OPTION");

			AssertElementPresent(
				labelOption = "Forgot Password",
				locator1 = "FormViewBuilder#FIELD_LABEL_OPTION");

			AssertElementPresent(
				inputFieldId = "rememberMe",
				locator1 = "TextInput#INPUT_ID");

			AssertElementPresent(locator1 = "Button#SIGN_IN");
		}
	}

	@description = "This is a test for LPS-140613. View the Student and Teacher are present in Site Roles"
	@priority = "4"
	test ViewStudentandTeacheronSiteRoles {
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Site Roles") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			RoleNavigator.gotoRoleType(roleType = "Site");
		}

		task ("Assert the Student and Teacher are present") {
			for (var roleTitle : list "Student,Teacher") {
				AssertElementPresent(
					key_itemName = "${roleTitle}",
					locator1 = "ListGroupItem#ITEM_NAME_LINK",
					value1 = "${roleTitle}");
			}
		}
	}

	@description = "This is a test for LPS-140613. View permissions for Student and Teacher"
	@priority = "4"
	test ViewStudentandTeacherPermissions {
		property portal.acceptance = "true";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Go to Site Roles") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			RoleNavigator.gotoRoleType(roleType = "Site");
		}

		task ("Set all permissons for Student") {
			PermissionsInline.gotoRolePermissions(roleName = "Student");

			Role.definePermissionPG(
				permissionsList = "CONTENT_PERMISSIONS_DELETE_CHECKBOX,CONTENT_PERMISSIONS_PERMISSIONS_CHECKBOX,CONTENT_PERMISSIONS_DEFINE_PERMISSIONS_CHECKBOX,CONTENT_PERMISSIONS_ASSIGN_MEMBERS_CHECKBOX,CONTENT_PERMISSIONS_MANAGE_ANNOUNCEMENTS_CHECKBOX,CONTENT_PERMISSIONS_UPDATE_CHECKBOX,CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "Student");

			IFrame.closeFrame();
		}

		task ("Set all permissons for Teacher") {
			PermissionsInline.gotoRolePermissions(roleName = "Teacher");

			Role.definePermissionPG(
				permissionsList = "CONTENT_PERMISSIONS_DELETE_CHECKBOX,CONTENT_PERMISSIONS_PERMISSIONS_CHECKBOX,CONTENT_PERMISSIONS_DEFINE_PERMISSIONS_CHECKBOX,CONTENT_PERMISSIONS_ASSIGN_MEMBERS_CHECKBOX,CONTENT_PERMISSIONS_MANAGE_ANNOUNCEMENTS_CHECKBOX,CONTENT_PERMISSIONS_UPDATE_CHECKBOX,CONTENT_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "Teacher");

			IFrame.closeFrame();
		}
	}

}