import com.liferay.gradle.util.OSDetector
import com.liferay.gradle.util.StringUtil

import java.text.DateFormat
import java.text.SimpleDateFormat

import java.util.Date
import java.util.TimeZone

import org.gradle.util.GUtil

apply plugin: "com.liferay.node"

configurations {
	extraRemoteApp
}

task buildExtraRemoteApp
task forceDeploy
task zipExtraRemoteApp(type: Zip)

String extraRemoteAppName = "com.liferay.site.initializer.testray.extra.remote.app"
String extraRemoteAppVersion = "20220509.1419"

DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd.HHmm")

dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"))

String dateString = dateFormat.format(new Date())

File extraRemoteAppDir = new File(projectDir, "extra/remote-app/")
File fragmentsSrcDir = new File(projectDir, "src/main/resources/site-initializer/fragments/")

String webContextPath = ""

if (GUtil.loadProperties(file("bnd.bnd"))["Web-ContextPath"] != null) {
	webContextPath = GUtil.loadProperties(file("bnd.bnd"))["Web-ContextPath"]

	webContextPath = webContextPath.replaceAll("\\s+", "-").toLowerCase()

	if (webContextPath.startsWith("/")) {
		webContextPath = webContextPath.substring(1)
	}
}

artifacts {
	extraRemoteApp zipExtraRemoteApp
}

dependencies {
	extraRemoteApp ext: "zip", group: "com.liferay", name: extraRemoteAppName, version: extraRemoteAppVersion
}

forceDeploy {
	finalizedBy deploy
}

node {
	global = false
	nodeVersion = "16.0.0"
	useNpm = false
	yarnVersion = "1.22.5"
}

processResources {
	doLast {
		copy {
			from new File(projectDir, "src/main/resources/site-initializer/thumbnail.png")
			into new File(projectDir, "classes/META-INF/resources")
		}
	}

	if (gradle.startParameter.taskNames.contains("forceDeploy") || gradle.startParameter.taskNames.contains("uploadExtraRemoteApp")) {
		dependsOn buildExtraRemoteApp

		into("site-initializer/documents/company/remote-app/" + webContextPath) {
			from(new File(projectDir, "extra/remote-app/build/static/css")) {
				include "*.css"
			}

			from(new File(projectDir, "extra/remote-app/build/static/js")) {
				include "*.js"
			}

			rename(/([0-9a-zA-Z-]+).*\.(css|js)$/, '$1.$2')
		}

		File packageJSONFile = new File(fragmentsSrcDir, "package.json")

		if (packageJSONFile.exists()) {
			exclude "site-initializer/fragments/**"

			doLast {
				copy {
					from new File(fragmentsSrcDir, "build/liferay-fragments/src")
					into new File(projectDir, "classes/site-initializer/fragments/src")
				}
			}
		}
	}
	else {
		into("site-initializer/documents/company") {
			from zipTree(configurations.extraRemoteApp.singleFile)
			include "remote-app/**"
		}

		File packageJSONFile = new File(fragmentsSrcDir, "package.json")

		if (packageJSONFile.exists()) {
			exclude "site-initializer/fragments/**"

			doLast {
				copy {
					from zipTree(configurations.extraRemoteApp.singleFile)
					include "fragments/**"
					into new File(projectDir, "classes/site-initializer")
				}
			}
		}
	}
}

uploadExtraRemoteApp {
	doLast {
		File buildGradleFile = file("build.gradle")

		String content = buildGradleFile.getText("UTF-8")

		content = content.replaceFirst(~/String extraRemoteAppVersion = "(\w+\.\w+)"/) {
			String all, String versionString ->

			all.replace versionString, dateString
		}

		buildGradleFile.setText content, "UTF-8"
	}

	repositories {
		mavenDeployer {
			pom {
				artifactId = GUtil.loadProperties(file("bnd.bnd"))["Bundle-SymbolicName"] + ".extra.remote.app"
				groupId = "com.liferay"
				version = dateString
			}

			if (project.path.startsWith(":dxp:")) {
				repository(url: "https://repository.liferay.com/nexus/content/repositories/liferay-private-releases") {
					authentication password: System.properties["repository.private.password"], userName: System.properties["repository.private.username"]
				}
			}
		}
	}
}

zipExtraRemoteApp {
	if (!System.getenv("JENKINS_HOME")) {
		dependsOn buildExtraRemoteApp

		archiveName "extra-remote-app.zip"
		destinationDir new File(buildDir, "dist")

		into("remote-app/" + webContextPath) {
			from(new File(projectDir, "extra/remote-app/build/static/css")) {
				include "*.css"
			}

			from(new File(projectDir, "extra/remote-app/build/static/js")) {
				include "*.js"
			}

			rename(/([0-9a-zA-Z-]+).*\.(css|js)$/, '$1.$2')
		}

		File packageJSONFile = new File(fragmentsSrcDir, "package.json")

		if (packageJSONFile.exists()) {
			into("fragments/src") {
				from(new File(fragmentsSrcDir, "build/liferay-fragments/src"))
			}
		}
	}
}

_createExtraTasks([extraRemoteAppDir, fragmentsSrcDir])

private String _camelCase(String dirName) {
	String suffix = dirName.replaceAll(/\-(\w)/) {
		String s = it[1]

		s.toUpperCase()
	}

	return StringUtil.capitalize(suffix)
}

private void _createExtraTasks(List<File> dirs) {
	dirs.each {
		File dir ->

		File packageJSONFile = new File(dir, "package.json")

		if (!packageJSONFile.exists()) {
			return
		}

		Task yarnInstallTask = tasks.create(name: "yarnInstall" + _camelCase(dir.name), type: Exec) {
			if (OSDetector.windows) {
				executable "cmd.exe"

				args "/c"
				args new File(node.nodeDir, "node.exe")
				args new File(node.nodeDir, "node_modules/yarn/yarn-" + node.yarnVersion + ".js")
			}
			else {
				executable new File(node.nodeDir, "bin/node")

				args new File(node.nodeDir, "lib/node_modules/yarn/yarn-" + node.yarnVersion + ".js")
			}

			args "install"
			dependsOn downloadNode
			workingDir dir
		}

		Task yarnBuildTask = tasks.create(name: "yarnBuild" + _camelCase(dir.name), type: Exec) {
			if (OSDetector.windows) {
				executable "cmd.exe"

				args "/c"
				args new File(node.nodeDir, "node.exe")
				args new File(node.nodeDir, "node_modules/yarn/yarn-" + node.yarnVersion + ".js")
			}
			else {
				executable new File(node.nodeDir, "bin/node")

				args new File(node.nodeDir, "lib/node_modules/yarn/yarn-" + node.yarnVersion + ".js")
			}

			args "build"
			dependsOn yarnInstallTask
			workingDir dir
		}

		if (packageJSONFile.text.contains("\"build\": \"yo ")) {
			Task yarnAddYoTask = tasks.create(name: "yarnAddYo" + _camelCase(dir.name), type: Exec) {
				if (OSDetector.windows) {
					executable "cmd.exe"

					args "/c"
					args new File(node.nodeDir, "node.exe")
					args new File(node.nodeDir, "node_modules/yarn/yarn-" + node.yarnVersion + ".js")
				}
				else {
					executable new File(node.nodeDir, "bin/node")

					args new File(node.nodeDir, "lib/node_modules/yarn/yarn-" + node.yarnVersion + ".js")
				}

				args "add"
				args "yo"
				dependsOn yarnInstallTask
				workingDir dir
			}

			yarnBuildTask.dependsOn yarnAddYoTask
		}

		buildExtraRemoteApp.dependsOn yarnBuildTask
	}
}