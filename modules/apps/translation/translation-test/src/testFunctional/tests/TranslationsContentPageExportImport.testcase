@component-name = "portal-lima"
definition {

	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Translations Management";

	// This testcase validates the import/export functionality of the Content Page translations feature for both default and custom experiences.

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutPG();
		}
	}

	@description = "This ensures that the user can export an available language for multiple experiences."
	@priority = "5"
	test CanExportAnAvailableLanguageForMultipleExperiences {
		property osgi.module.configuration.file.names = "com.liferay.layout.admin.web.internal.configuration.FFBulkTranslationConfiguration.config";
		property osgi.module.configurations = "bulkTranslationEnabled=&quot;true&quot;";
		property portal.acceptance = "false";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		for (var num : list "1,2") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "TranslationContentPage",
				siteName = "Guest");

			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience${num}",
				segmentName = "Anyone");
		}

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoBulkExportTranslation(
			exportTranslationEntry = "TranslationContentPage",
			toolbarOptions = "true");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			experienceList = "NewAnyoneExperience1,NewAnyoneExperience2",
			languageList = "Spanish (Spain)");

		Translations.assertFileNameFromTempFolder(pageName = "TranslationContentPage");

		AntCommand(
			locator1 = "build-test-translation.xml",
			value1 = "unzip-translation-file -DfileName=TranslationContentPage-en_US.zip");

		for (var fileName : list "TranslationContentPage (NewAnyoneExperience1)-en_US-es_ES.xlf,TranslationContentPage (NewAnyoneExperience2)-en_US-es_ES.xlf") {
			DMDocument.assertFileNameFromTempFolder(fileName = "${fileName}");
		}
	}

	@description = "This ensures that the user can export multiple available languages for a single experience."
	@priority = "5"
	test CanExportMultipleAvailableLanguagesForExperience {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.addExperience(
			experienceName = "NewAnyoneExperience",
			segmentName = "Anyone");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			experienceList = "NewAnyoneExperience",
			languageList = "Japanese (Japan),Spanish (Spain)");

		Translations.assertFileNameFromTempFolder(pageName = "TranslationContentPage");

		AntCommand(
			locator1 = "build-test-translation.xml",
			value1 = "unzip-translation-file -DfileName=TranslationContentPage-en_US.zip");

		for (var fileName : list "TranslationContentPage (NewAnyoneExperience)-en_US-ja_JP.xlf,TranslationContentPage (NewAnyoneExperience)-en_US-es_ES.xlf") {
			DMDocument.assertFileNameFromTempFolder(fileName = "${fileName}");
		}
	}

	@description = "This ensures that the user can export multiple available languages for multiple experiences."
	@priority = "5"
	test CanExportMultipleAvailableLanguagesForMultipleExperiences {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.addExperience(
			experienceName = "NewAnyoneExperience",
			segmentName = "Anyone");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Japanese (Japan),Spanish (Spain)");

		Translations.assertFileNameFromTempFolder(pageName = "TranslationContentPage");

		AntCommand(
			locator1 = "build-test-translation.xml",
			value1 = "unzip-translation-file -DfileName=TranslationContentPage-en_US.zip");

		for (var fileName : list "TranslationContentPage (Default)-en_US-ja_JP.xlf,TranslationContentPage (Default)-en_US-es_ES.xlf,TranslationContentPage (NewAnyoneExperience)-en_US-ja_JP.xlf,TranslationContentPage (NewAnyoneExperience)-en_US-es_ES.xlf") {
			DMDocument.assertFileNameFromTempFolder(fileName = "${fileName}");
		}
	}

	@description = "This ensures that Users can select multiple available languages when exporting multiple content pages for translation."
	@priority = "5"
	test CanExportMultiplePagesWithMultipleLanguages {
		property osgi.module.configuration.file.names = "com.liferay.layout.admin.web.internal.configuration.FFBulkTranslationConfiguration.config";
		property osgi.module.configurations = "bulkTranslationEnabled=&quot;true&quot;";
		property portal.acceptance = "false";

		for (var i : list "1,2,3") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Translation Content Page${i}",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Translation Content Page${i}",
				siteName = "Guest");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "HTML");

			PageEditor.clickPublish();
		}

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoBulkExportTranslation(exportTranslationEntry = "Translation Content Page1,Translation Content Page3");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Arabic (Saudi Arabia),Chinese (China),Japanese (Japan),Spanish (Spain)");

		Translations.assertFileNameFromTempFolder(pageName = "Page Translations-en_US");
	}

	@description = "This ensures that the user can export multiple available languages of default experience for translation."
	@priority = "5"
	test CanExportWithMultipleLanguages {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Translation Content Page",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Translation Content Page",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Paragraph");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "Translation Content Page");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Arabic (Saudi Arabia),Chinese (China),Japanese (Japan),Spanish (Spain)");

		Translations.assertFileNameFromTempFolder(pageName = "Translation Content Page");
	}

	@description = "This ensures that the user can export a single available language of default experience for translation."
	@priority = "5"
	test CanExportWithSingleLanguage {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Translation Content Page",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Translation Content Page",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "Translation Content Page");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)",
			viewNoExperiencesSelector = "true");

		Translations.assertFileNameFromTempFolder(pageName = "Translation Content Page");
	}

	@description = "This ensures that the user can import the exported content page xliff file with 1.2 version."
	@priority = "5"
	test CanImportExportedCustomizeXliffFile {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Heading");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			exportFileFormat = "XLIFF 1.2",
			languageList = "Japanese (Japan)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "utf8",
			fragmentContent = "Heading",
			fragmentContentTranslation = "タイトル",
			operation = "unzip",
			pageName = "TranslationContentPage",
			pageNameTranslation = "翻訳ページ",
			translationFileName = "TranslationContentPage-en_US-ja_JP",
			translationZipFileName = "TranslationContentPage-en_US");

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage-en_US-ja_JP.xlf",
			filePath = "/TranslationContentPage-en_US",
			pageName = "TranslationContentPage");

		Translations.openTranslationAdmin(siteURLKey = "guest");

		Translations.viewTranslationEntry(
			language = "ja-JP",
			status = "Approved",
			title = "Translation of TranslationContentPage to ja-JP");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.changeLocale(
			currentLocale = "en-US",
			locale = "ja-JP");

		PageEditor.viewFragmentEditableText(
			editableText = "タイトル",
			fragmentName = "Heading",
			id = "element-text");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "Heading");

		Navigator.ensureLocaleURL(locale = "ja");

		Page.viewCurrentPage(pageName = "翻訳ページ");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "タイトル");
	}

	@description = "This ensures that the user can import the exported content page xliff file with default version."
	@priority = "5"
	test CanImportExportedDefaultXliffFile {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Heading");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Heading",
			fragmentContentTranslation = "Titulo",
			operation = "unzip",
			pageName = "TranslationContentPage",
			pageNameTranslation = "TranslatedContentPage",
			translationFileName = "TranslationContentPage-en_US-es_ES",
			translationZipFileName = "TranslationContentPage-en_US");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage-en_US-es_ES.xlf",
			filePath = "/TranslationContentPage-en_US",
			pageName = "TranslationContentPage");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.changeLocale(
			currentLocale = "en-US",
			locale = "es-ES");

		PageEditor.viewFragmentEditableText(
			editableText = "Titulo",
			fragmentName = "Heading",
			id = "element-text");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "Heading");

		Navigator.ensureLocaleURL(locale = "es");

		Page.viewCurrentPage(pageName = "TranslatedContentPage");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "Titulo");
	}

	@description = "This ensures that imported translation for a content page experience can be merged to the correct experience of a content page."
	@priority = "5"
	test CanImportExportedTranslationForCorrespondingExperience {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.addExperience(
			experienceName = "NewAnyoneExperience",
			segmentName = "Anyone");

		PageEditor.clickManagementBar();

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Heading");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			experienceList = "NewAnyoneExperience",
			languageList = "Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Heading",
			fragmentContentTranslation = "Titulo",
			operation = "unzip",
			translationFileName = "TranslationContentPage (NewAnyoneExperience)-en_US-es_ES",
			translationZipFileName = "TranslationContentPage-en_US");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage (NewAnyoneExperience)-en_US-es_ES.xlf",
			filePath = "/TranslationContentPage-en_US",
			pageName = "TranslationContentPage");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		Navigator.ensureLocaleURL(locale = "es");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "Heading Example");

		ContentPagesNavigator.openViewContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		ContentPages.changeExperience(experienceName = "NewAnyoneExperience");

		Navigator.ensureLocaleURL(locale = "es");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "Titulo");
	}

	@description = "This ensures that the translation files contains multiple content pages can be imported from a zip."
	@priority = "5"
	test CanImportMultiplePages {
		property osgi.module.configuration.file.names = "com.liferay.layout.admin.web.internal.configuration.FFBulkTranslationConfiguration.config";
		property osgi.module.configurations = "bulkTranslationEnabled=&quot;true&quot;";
		property portal.acceptance = "false";

		for (var i : list "1,2") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "TranslationContentPage${i}",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "TranslationContentPage${i}",
				siteName = "Guest");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "HTML");

			PageEditor.editFragmentHTML(
				content = "HTMLTitle",
				fragmentName = "HTML",
				id = "element-html");

			PageEditor.clickPublish();
		}

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoBulkExportTranslation(exportTranslationEntry = "TranslationContentPage1,TranslationContentPage2");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Arabic (Saudi Arabia),Chinese (China),German (Germany),Japanese (Japan),Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "HTMLTitle",
			fragmentContentTranslation = "HTMLTitlear_SA",
			operation = "unzip",
			pageName = "TranslationContentPage1",
			pageNameTranslation = "TranslatedContentPage1_SA",
			translationFileName = "TranslationContentPage1-en_US-ar_SA",
			translationZipFileName = "Page Translations-en_US");

		for (var language : list "de_DE,es_ES,ja_JP,zh_CN") {
			Translations.translateContentPageFile(
				contentPageTranslation = "true",
				encoding = "false",
				fragmentContent = "HTMLTitle",
				fragmentContentTranslation = "HTMLTitle${language}",
				operation = "false",
				pageName = "TranslationContentPage1",
				pageNameTranslation = "TranslatedContentPage1${language}",
				translationFileName = "TranslationContentPage1-en_US-${language}",
				translationZipFileName = "Page Translations-en_US");
		}

		for (var language : list "ar_SA,de_DE,es_ES,ja_JP") {
			Translations.translateContentPageFile(
				contentPageTranslation = "true",
				encoding = "false",
				fragmentContent = "HTMLTitle",
				fragmentContentTranslation = "HTMLTitle${language}",
				operation = "false",
				pageName = "TranslationContentPage2",
				pageNameTranslation = "TranslatedContentPage2${language}",
				translationFileName = "TranslationContentPage2-en_US-${language}",
				translationZipFileName = "Page Translations-en_US");
		}

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "HTMLTitle",
			fragmentContentTranslation = "HTMLTitlezh_CN",
			operation = "zip",
			pageName = "TranslationContentPage2",
			pageNameTranslation = "TranslatedContentPage2zh_CN",
			translationFileName = "TranslationContentPage2-en_US-zh_CN",
			translationZipFileName = "Page Translations-en_US");

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoBulkImportTranslation();

		Translations.importTranslation(
			fileName = "Page Translations-en_US_translated.zip",
			filePath = "");

		for (var language : list "ar-SA,de-DE,es-ES,ja-JP,zh-CN") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "TranslationContentPage1",
				siteName = "Guest");

			PageEditor.changeLocale(
				currentLocale = "en-US",
				locale = "${language}");

			var language = StringUtil.replace("${language}", "-", "_");

			PageEditor.viewFragmentEditableText(
				editableText = "HTMLTitle${language}",
				fragmentName = "HTML",
				id = "element-html");
		}

		for (var language : list "ar-SA,de-DE,es-ES,ja-JP,zh-CN") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "TranslationContentPage2",
				siteName = "Guest");

			PageEditor.changeLocale(
				currentLocale = "en-US",
				locale = "${language}");

			var language = StringUtil.replace("${language}", "-", "_");

			PageEditor.viewFragmentEditableText(
				editableText = "HTMLTitle${language}",
				fragmentName = "HTML",
				id = "element-html");
		}
	}

	@description = "This ensures that user can select multiple Xlf files when importing translations for multiple content pages."
	@priority = "5"
	test CanImportMultipleXlfFiles {
		property osgi.module.configuration.file.names = "com.liferay.layout.admin.web.internal.configuration.FFBulkTranslationConfiguration.config:com.liferay.translation.web.internal.configuration.FFBulkTranslationConfiguration.config";
		property osgi.module.configurations = "bulkTranslationEnabled=&quot;true&quot;:enabled=B&quot;true&quot;";
		property portal.acceptance = "false";

		for (var i : list "1,2") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "TranslationContentPage${i}",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "TranslationContentPage${i}",
				siteName = "Guest");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "HTML");

			PageEditor.editFragmentHTML(
				content = "HTMLTitle",
				fragmentName = "HTML",
				id = "element-html");

			PageEditor.clickPublish();
		}

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoBulkExportTranslation(exportTranslationEntry = "TranslationContentPage1,TranslationContentPage2");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Japanese (Japan),Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "HTMLTitle",
			fragmentContentTranslation = "HTMLTitlees_ES",
			operation = "unzip",
			pageName = "TranslationContentPage1",
			pageNameTranslation = "TranslatedContentPage1es_ES",
			translationFileName = "TranslationContentPage1-en_US-es_ES",
			translationZipFileName = "Page Translations-en_US");

		for (var i : list "1,2") {
			Translations.translateContentPageFile(
				contentPageTranslation = "true",
				encoding = "false",
				fragmentContent = "HTMLTitle",
				fragmentContentTranslation = "HTMLTitleja_JP",
				operation = "false",
				pageName = "TranslationContentPage${i}",
				pageNameTranslation = "TranslatedContentPage${i}ja_JP",
				translationFileName = "TranslationContentPage${i}-en_US-ja_JP",
				translationZipFileName = "Page Translations-en_US");
		}

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "HTMLTitle",
			fragmentContentTranslation = "HTMLTitlees_ES",
			operation = "false",
			pageName = "TranslationContentPage2",
			pageNameTranslation = "TranslatedContentPage2es_ES",
			translationFileName = "TranslationContentPage2-en_US-es_ES",
			translationZipFileName = "Page Translations-en_US");

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoBulkImportTranslation();

		Translations.importTranslation(
			fileName = "TranslationContentPage1-en_US-es_ES.xlf,TranslationContentPage1-en_US-ja_JP.xlf,TranslationContentPage2-en_US-es_ES.xlf,TranslationContentPage2-en_US-ja_JP.xlf",
			filePath = "Page Translations-en_US");

		for (var language : list "es-ES,ja-JP") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "TranslationContentPage1",
				siteName = "Guest");

			PageEditor.changeLocale(
				currentLocale = "en-US",
				locale = "${language}");

			var language = StringUtil.replace("${language}", "-", "_");

			PageEditor.viewFragmentEditableText(
				editableText = "HTMLTitle${language}",
				fragmentName = "HTML",
				id = "element-html");
		}

		for (var language : list "es-ES,ja-JP") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "TranslationContentPage2",
				siteName = "Guest");

			PageEditor.changeLocale(
				currentLocale = "en-US",
				locale = "${language}");

			var language = StringUtil.replace("${language}", "-", "_");

			PageEditor.viewFragmentEditableText(
				editableText = "HTMLTitle${language}",
				fragmentName = "HTML",
				id = "element-html");
		}
	}

	@description = "This ensures that user can select multiple zip files when importing translations for multiple content pages with different experience."
	@priority = "5"
	test CanImportMultipleZipFilesWithExperiences {
		property osgi.module.configuration.file.names = "com.liferay.layout.admin.web.internal.configuration.FFBulkTranslationConfiguration.config:com.liferay.translation.web.internal.configuration.FFBulkTranslationConfiguration.config";
		property osgi.module.configurations = "bulkTranslationEnabled=&quot;true&quot;:enabled=B&quot;true&quot;";
		property portal.acceptance = "false";

		for (var i : list "1,2") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "TranslationContentPage${i}",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "TranslationContentPage${i}",
				siteName = "Guest");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Heading");

			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience",
				segmentName = "Anyone");

			PageEditor.clickManagementBar();

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "HeadingExperience");

			PageEditor.clickPublish();
		}

		for (var i : list "1,2") {
			PagesAdmin.openPagesAdmin(siteURLKey = "guest");

			Translations.gotoBulkExportTranslation(
				exportTranslationEntry = "TranslationContentPage${i}",
				toolbarOptions = "true");

			Translations.exportTranslation(
				defaultLanguage = "English (United States)",
				languageList = "Spanish (Spain)");
		}

		for (var i : list "1,2") {
			Translations.translateContentPageFile(
				contentPageTranslation = "true",
				encoding = "false",
				fragmentContent = "HeadingExperience",
				fragmentContentTranslation = "HeadingExperiencees_ES",
				operation = "unzip",
				translationFileName = "TranslationContentPage${i} (NewAnyoneExperience)-en_US-es_ES",
				translationZipFileName = "TranslationContentPage${i}-en_US");

			Translations.translateContentPageFile(
				contentPageTranslation = "true",
				encoding = "false",
				fragmentContent = "Heading",
				fragmentContentTranslation = "Headinges_ES",
				operation = "zip",
				translationFileName = "TranslationContentPage${i} (Default)-en_US-es_ES",
				translationZipFileName = "TranslationContentPage${i}-en_US");
		}

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoBulkImportTranslation();

		Translations.importTranslation(
			fileName = "TranslationContentPage1-en_US_translated.zip,TranslationContentPage2-en_US_translated.zip",
			filePath = "");

		for (var i : list "1,2") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "TranslationContentPage${i}",
				siteName = "Guest");

			PageEditor.clickPublish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "TranslationContentPage${i}",
				siteName = "Guest");

			Navigator.ensureLocaleURL(locale = "es");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Headinges_ES");

			ContentPagesNavigator.openViewContentPage(
				pageName = "TranslationContentPage${i}",
				siteName = "Guest");

			ContentPages.changeExperience(experienceName = "NewAnyoneExperience");

			Navigator.ensureLocaleURL(locale = "es");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "HeadingExperiencees_ES");

			var portalURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "${portalURL}/en/");
		}
	}

	@description = "This ensures that the user can not import an invalid translation file."
	@priority = "4"
	test CannotImportAnInvalidFile {
		for (var num : list "1,2") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "TranslationContentPage${num}",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Guest",
				layoutName = "TranslationContentPage${num}");
		}

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage1");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)");

		AntCommand(
			locator1 = "build-test-translation.xml",
			value1 = "unzip-translation-file -DfileName=TranslationContentPage1-en_US.zip");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage1-en_US-es_ES.xlf",
			filePath = "",
			pageName = "TranslationContentPage2",
			validateInvalidFile = "true");

		Translations.viewErrorMessages(
			errorMessage = "1 file could not be published.",
			errorMessageItem = "The translation file does not correspond to this page.");
	}

	@description = "This ensures that the translation for a content page experience can not be imported after deleting the experience."
	@priority = "5"
	test CannotImportTranslationForDeletedExperience {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.addExperience(
			experienceName = "NewAnyoneExperience",
			segmentName = "Anyone");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			experienceList = "NewAnyoneExperience",
			languageList = "Spanish (Spain)");

		AntCommand(
			locator1 = "build-test-translation.xml",
			value1 = "unzip-translation-file -DfileName=TranslationContentPage-en_US.zip");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.deleteExperience(experienceName = "NewAnyoneExperience");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage (NewAnyoneExperience)-en_US-es_ES.xlf",
			filePath = "",
			pageName = "TranslationContentPage",
			validateInvalidFile = "true");

		Translations.viewErrorMessages(
			errorMessage = "1 file could not be published.",
			errorMessageItem = "The translation file does not correspond to this page.");
	}

	@description = "This ensures that only the valid translation files can be imported from xlf and zip files."
	@priority = "5"
	test CanPartiallyImportMultipleFiles {
		property osgi.module.configuration.file.names = "com.liferay.layout.admin.web.internal.configuration.FFBulkTranslationConfiguration.config:com.liferay.translation.web.internal.configuration.FFBulkTranslationConfiguration.config";
		property osgi.module.configurations = "bulkTranslationEnabled=&quot;true&quot;:enabled=B&quot;true&quot;";
		property portal.acceptance = "false";

		for (var i : list "1,2,3") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "TranslationContentPage${i}",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "TranslationContentPage${i}",
				siteName = "Guest");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Heading");

			PageEditor.clickPublish();
		}

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoBulkExportTranslation(exportTranslationEntry = "TranslationContentPage1,TranslationContentPage2");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Japanese (Japan),Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Heading",
			fragmentContentTranslation = "Titulo",
			operation = "unzip",
			pageName = "TranslationContentPage1",
			pageNameTranslation = "TranslatedContentPage1",
			translationFileName = "TranslationContentPage1-en_US-es_ES",
			translationZipFileName = "Page Translations-en_US");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Heading",
			fragmentContentTranslation = "タイトル",
			operation = "false",
			pageName = "TranslatedContentPage1",
			pageNameTranslation = "翻訳ページ",
			translationFileName = "TranslationContentPage1-en_US-ja_JP",
			translationZipFileName = "Page Translations-en_US");

		Translations.updateTranslateFileID(
			translationEntryType = "Layout",
			translationFileName = "TranslationContentPage2-en_US-es_ES",
			translationZipFileName = "Page Translations-en_US");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Heading",
			fragmentContentTranslation = "タイトル",
			operation = "zip",
			pageName = "TranslatedContentPage2",
			pageNameTranslation = "翻訳ページ",
			translationFileName = "TranslationContentPage2-en_US-ja_JP",
			translationZipFileName = "Page Translations-en_US");

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage3");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Heading",
			fragmentContentTranslation = "Titulo",
			operation = "unzip",
			translationFileName = "TranslationContentPage3-en_US-es_ES",
			translationZipFileName = "TranslationContentPage3-en_US");

		Translations.updateTranslateFileID(
			translationEntryType = "Layout",
			translationFileName = "TranslationContentPage3-en_US-es_ES",
			translationZipFileName = "TranslationContentPage3-en_US");

		AntCommand(
			locator1 = "build-test-translation.xml",
			value1 = "copy-translation-file -Dtranslation.zip.file.name=TranslationContentPage3-en_US -Dtranslation.file.name=TranslationContentPage3-en_US-es_ES.xlf");

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoBulkImportTranslation();

		Translations.importTranslation(
			errorMessage = "2 files could not be published.",
			errorMessageItem = "The XLIFF file contains a translation for an invalid model.",
			failFileName = "TranslationContentPage2-en_US-es_ES.xlf",
			failFileName2 = "TranslationContentPage3-en_US-es_ES.xlf",
			fileName = "Page Translations-en_US_translated.zip,TranslationContentPage3-en_US-es_ES.xlf",
			filePath = "",
			successFileName = "TranslationContentPage1-en_US-es_ES.xlf",
			successFileName2 = "TranslationContentPage1-en_US-ja_JP.xlf",
			successFileName3 = "TranslationContentPage2-en_US-ja_JP.xlf",
			successFileNumber = "3 Files Saved",
			zipFileName = "Page Translations-en_US_translated.zip");

		for (var i : list "2,3") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "TranslationContentPage${i}",
				siteName = "Guest");

			Translations.viewUntranslatedStatus(
				locale = "es-ES",
				page = "true");
		}

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage1",
			siteName = "Guest");

		PageEditor.changeLocale(
			currentLocale = "en-US",
			locale = "es-ES");

		PageEditor.viewFragmentEditableText(
			editableText = "Titulo",
			fragmentName = "Heading",
			id = "element-text");

		for (var i : list "1,2") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "TranslationContentPage1",
				siteName = "Guest");

			PageEditor.changeLocale(
				currentLocale = "en-US",
				locale = "ja-JP");

			PageEditor.viewFragmentEditableText(
				editableText = "タイトル",
				fragmentName = "Heading",
				id = "element-text");
		}
	}

	@description = "This is a test for LPS-144152. This ensures that the updated draft translation can be published."
	@priority = "3"
	test CanPublishUpdatedDraftTranslation {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Heading");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Heading",
			fragmentContentTranslation = "Titulo",
			operation = "unzip",
			translationFileName = "TranslationContentPage-en_US-es_ES",
			translationZipFileName = "TranslationContentPage-en_US");

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage-en_US-es_ES.xlf",
			filePath = "/TranslationContentPage-en_US",
			pageName = "TranslationContentPage",
			save = "true",
			successMessage = "1 File Saved");

		Translations.openTranslationAdmin(siteURLKey = "guest");

		Translations.viewTranslationEntry(
			language = "es-ES",
			status = "Draft",
			title = "Translation of TranslationContentPage to es-ES");

		LexiconEntry.gotoEntry(rowEntry = "Translation of TranslationContentPage to es-ES");

		Translations.translateFragmentField(
			fieldName = "element-text",
			fragmentText = "NewTitulo");

		PortletEntry.publish();

		Translations.viewTranslationEntry(
			language = "es-ES",
			status = "Approved",
			title = "Translation of TranslationContentPage to es-ES");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "Heading");

		Navigator.ensureLocaleURL(locale = "es");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "NewTitulo");
	}

	@description = "This ensures that the user can import the translated content page file with Button fragment."
	@priority = "5"
	test CanTranslateAndImportButtonFragment {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Button");

		PageEditor.editFragmentText(
			fragmentName = "Button",
			id = "link",
			text = "Title");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Title",
			fragmentContentTranslation = "Titulo",
			operation = "unzip",
			pageName = "TranslationContentPage",
			pageNameTranslation = "TranslatedContentPage",
			translationFileName = "TranslationContentPage-en_US-es_ES",
			translationZipFileName = "TranslationContentPage-en_US");

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage-en_US-es_ES.xlf",
			filePath = "/TranslationContentPage-en_US",
			pageName = "TranslationContentPage");

		Translations.openTranslationAdmin(siteURLKey = "guest");

		Translations.viewTranslationEntry(
			language = "es-ES",
			status = "Approved",
			title = "Translation of TranslationContentPage to es-ES");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.changeLocale(
			currentLocale = "en-US",
			locale = "es-ES");

		PageEditor.viewFragmentEditableText(
			editableText = "Titulo",
			fragmentName = "Button",
			id = "link");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		ContentPages.viewFragmentText(
			fragmentName = "button",
			id = "link",
			text = "Title");

		Navigator.ensureLocaleURL(locale = "es");

		Page.viewCurrentPage(pageName = "TranslatedContentPage");

		ContentPages.viewFragmentText(
			fragmentName = "button",
			id = "link",
			text = "Titulo");
	}

	@description = "This ensures that the user can import the translated content page file with HTML fragment."
	@priority = "5"
	test CanTranslateAndImportHTMLFragment {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "TranslationContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "HTML");

		PageEditor.editFragmentHTML(
			content = "HTMLTitle",
			fragmentName = "HTML",
			id = "element-html");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "TranslationContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "HTMLTitle",
			fragmentContentTranslation = "HTMLTitulo",
			operation = "unzip",
			pageName = "TranslationContentPage",
			pageNameTranslation = "TranslatedContentPage",
			translationFileName = "TranslationContentPage-en_US-es_ES",
			translationZipFileName = "TranslationContentPage-en_US");

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.importTranslation(
			contentPageTranslation = "true",
			fileName = "TranslationContentPage-en_US-es_ES.xlf",
			filePath = "/TranslationContentPage-en_US",
			pageName = "TranslationContentPage");

		ContentPagesNavigator.openEditContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		PageEditor.changeLocale(
			currentLocale = "en-US",
			locale = "es-ES");

		PageEditor.viewFragmentEditableText(
			editableText = "HTMLTitulo",
			fragmentName = "HTML",
			id = "element-html");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "TranslationContentPage",
			siteName = "Guest");

		ContentPages.viewFragmentText(
			fragmentName = "html",
			id = "element-html",
			text = "HTMLTitle");

		Navigator.ensureLocaleURL(locale = "es");

		Page.viewCurrentPage(pageName = "TranslatedContentPage");

		ContentPages.viewFragmentText(
			fragmentName = "html",
			id = "element-html",
			text = "HTMLTitulo");
	}

	@description = "This ensures that users can view the info of the unsuccessfully imported content page translations in the downloaded CSV report."
	@priority = "5"
	test CanViewUnsuccessfullyImportedTranslationsInfoInDownloadedCSVReport {
		property osgi.module.configuration.file.names = "com.liferay.translation.web.internal.configuration.FFBulkTranslationConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";
		property portal.acceptance = "false";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "ContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "ContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Heading");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "ContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Japanese (Japan),Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Heading",
			fragmentContentTranslation = "Titulo",
			operation = "unzip",
			pageName = "ContentPage",
			pageNameTranslation = "TranslatedContentPage",
			translationFileName = "ContentPage-en_US-es_ES",
			translationZipFileName = "ContentPage-en_US");

		Translations.updateTranslateFileID(
			translationEntryType = "Layout",
			translationFileName = "ContentPage-en_US-es_ES",
			translationZipFileName = "ContentPage-en_US");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Heading",
			fragmentContentTranslation = "見出し",
			operation = "zip",
			pageName = "ContentPage",
			pageNameTranslation = "TranslatedContentページ",
			translationFileName = "ContentPage-en_US-ja_JP",
			translationZipFileName = "ContentPage-en_US");

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		var errorReportName = Translations.importTranslation(
			downloadCSVErrorReport = "true",
			fileName = "ContentPage-en_US_translated.zip",
			filePath = "",
			pageName = "ContentPage");

		Translations.viewCSVErrorReport(
			errorReportName = "${errorReportName}",
			reportContent = "ContentPage-en_US-es_ES.xlf,The translation file does not correspond to this page.,ContentPage-en_US_translated.zip",
			viewNoSuccessfullyImportedTranslation = "ContentPage-en_US-ja_JP");
	}

	@description = "This ensures that only the default experiences are exported when exporting multiple content pages for translation."
	@priority = "4"
	test OnlyDefaultExperiencesExportedWhenExportingMultiplePages {
		property osgi.module.configuration.file.names = "com.liferay.layout.admin.web.internal.configuration.FFBulkTranslationConfiguration.config";
		property osgi.module.configurations = "bulkTranslationEnabled=&quot;true&quot;";
		property portal.acceptance = "false";

		for (var i : list "1,2") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "TranslationContentPage${i}",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "TranslationContentPage${i}",
				siteName = "Guest");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience",
				segmentName = "Anyone");

			PageEditor.clickPublish();
		}

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoBulkExportTranslation(
			exportTranslationEntry = "TranslationContentPage1,TranslationContentPage2",
			toolbarOptions = "true");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Spanish (Spain)");

		Translations.assertFileNameFromTempFolder(pageName = "Page Translations-en_US");

		var fileName = StringUtil.replace("Page Translations-en_US.zip", " ", "*");

		AntCommand(
			locator1 = "build-test-translation.xml",
			value1 = "unzip-translation-file -DfileName=${fileName}");

		for (var fileName : list "TranslationContentPage1-en_US-es_ES.xlf,TranslationContentPage2-en_US-es_ES.xlf") {
			DMDocument.assertFileNameFromTempFolder(fileName = "${fileName}");
		}

		for (var translationFileName : list "TranslationContentPage1 (NewAnyoneExperience)-en_US-es_ES.xlf,TranslationContentPage2 (NewAnyoneExperience)-en_US-es_ES.xlf") {
			DMDocument.assertNoFileNameFromTempFolder(translationFileName = "${translationFileName}");
		}
	}

	@description = "This ensures that only the valid translation files can be uploaded from a zip file."
	@priority = "5"
	test OnlyValidEntriesAreUploadedFromZip {
		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "ContentPage",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "ContentPage",
			siteName = "Guest");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		PageEditor.editFragmentText(
			fragmentName = "Heading",
			id = "element-text",
			text = "Heading");

		PageEditor.clickPublish();

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.gotoExportTranslation(pageName = "ContentPage");

		Translations.exportTranslation(
			defaultLanguage = "English (United States)",
			languageList = "Chinese (China),Japanese (Japan),Spanish (Spain)");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Heading",
			fragmentContentTranslation = "Titulo",
			operation = "unzip",
			pageName = "ContentPage",
			pageNameTranslation = "TranslatedContentPage",
			translationFileName = "ContentPage-en_US-es_ES",
			translationZipFileName = "ContentPage-en_US");

		Translations.updateTranslateFileID(
			translationEntryType = "Layout",
			translationFileName = "ContentPage-en_US-es_ES",
			translationZipFileName = "ContentPage-en_US");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Heading",
			fragmentContentTranslation = "标题",
			operation = "false",
			pageName = "ContentPage",
			pageNameTranslation = "TranslatedContent页面",
			translationFileName = "ContentPage-en_US-zh_CN",
			translationZipFileName = "ContentPage-en_US");

		Translations.translateContentPageFile(
			contentPageTranslation = "true",
			encoding = "false",
			fragmentContent = "Heading",
			fragmentContentTranslation = "見出し",
			operation = "zip",
			pageName = "ContentPage",
			pageNameTranslation = "TranslatedContentページ",
			translationFileName = "ContentPage-en_US-ja_JP",
			translationZipFileName = "ContentPage-en_US");

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		Translations.importTranslation(
			errorMessage = "1 file could not be published.",
			errorMessageItem = "The translation file does not correspond to this page.",
			failFileName = "ContentPage-en_US-es_ES.xlf",
			fileName = "ContentPage-en_US_translated.zip",
			filePath = "",
			pageName = "ContentPage",
			successFileName = "ContentPage-en_US-ja_JP.xlf",
			successFileName2 = "ContentPage-en_US-zh_CN.xlf",
			successFileNumber = "2 Files Saved");

		Translations.openTranslationAdmin(siteURLKey = "guest");

		Translations.viewNoTranslationEntry(title = "Translation of ContentPage to es_ES");

		for (var language : list "ja-JP,zh-CN") {
			Translations.viewTranslationEntry(
				language = "${language}",
				status = "Approved",
				title = "Translation of ContentPage to ${language}");
		}

		ContentPagesNavigator.openEditContentPage(
			pageName = "ContentPage",
			siteName = "Guest");

		PageEditor.changeLocale(
			currentLocale = "en-US",
			locale = "zh-CN");

		PageEditor.viewFragmentEditableText(
			editableText = "标题",
			fragmentName = "Heading",
			id = "element-text");

		PageEditor.changeLocale(
			currentLocale = "zh-CN",
			locale = "ja-JP");

		PageEditor.viewFragmentEditableText(
			editableText = "見出し",
			fragmentName = "Heading",
			id = "element-text");

		PageEditor.clickPublish();

		ContentPagesNavigator.openViewContentPage(
			pageName = "ContentPage",
			siteName = "Guest");

		Navigator.ensureLocaleURL(locale = "zh");

		Page.viewCurrentPage(pageName = "TranslatedContent页面");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "标题");

		ContentPagesNavigator.openViewContentPage(
			locale = "ja",
			pageName = "ContentPage",
			siteName = "Guest");

		Page.viewCurrentPage(pageName = "TranslatedContentページ");

		ContentPages.viewFragmentText(
			fragmentName = "heading",
			id = "element-text",
			text = "見出し");
	}

}