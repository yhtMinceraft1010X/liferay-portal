@component-name = "portal-lima"
definition {

	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Item Selector";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			BlogsEntry.tearDownCP();

			Depot.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This makes sure that an image can be uploaded via URL."
	@priority = "5"
	@refactordone
	test CanAddBlogsImageViaURL {
		property test.name.skip.portal.instance = "ItemSelector#AddBlogsImageViaURL";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Guest",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		BlogsNavigator.openToAddEntry(siteURLKey = "guest");

		BlogsEntry.addTitle(entryTitle = "Blogs Entry Title");

		BlogsEntry.addContent(entryContent = "Blogs Entry Content");

		ItemSelector.gotoItemSelectorViaAlloyEditor();

		ItemSelector.addImageFromURL(
			imageSourceURL = "http://localhost:8080/webdav/guest/document_library/Document_2.jpg",
			navTab = "URL");

		PortletEntry.publish();

		BlogsNavigator.openToEditEntryInSite(
			entryTitle = "Blogs Entry Title",
			groupName = "Guest",
			siteURLKey = "guest");

		BlogsEntry.viewEntryCP(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewInlineImage(uploadFileName = "Document_2.jpg");
	}

	@description = "This test covers LPS-105188. It ensures that a user can change selected page for Navigation Menu item based on page after creation."
	@priority = "4"
	@refactordone
	test CanChangeSelectedPageForNavigationMenu {
		JSONGroup.addGroup(groupName = "Test Site Name");

		for (var i : list "1,2") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name ${i}");
		}

		JSONSitenavigation.addSiteNavigationMenu(
			groupName = "Test Site Name",
			siteNavigationMenuName = "Navigation Menu Name");

		JSONSitenavigation.addSiteNavigationMenuItem(
			groupName = "Test Site Name",
			privateLayout = "false",
			siteNavigationMenuItemName = "Test Page Name 1",
			siteNavigationMenuName = "Navigation Menu Name",
			type = "layout");

		NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = "test-site-name");

		LexiconEntry.gotoEntry(rowEntry = "Navigation Menu Name");

		NavigationMenusAdmin.editItem(
			item = "Page",
			itemName = "Test Page Name 1",
			pageNames = "Test Page Name 2");

		NavigationMenusAdmin.viewItem(itemName = "Test Page Name 2");
	}

	@description = "This test covers LPS-119899, It ensures that the search results can be cleared after filtering everywhere in the item selector."
	@priority = "4"
	@refactordone
	test CanClearFilterResults {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONWebcontent.addWebContent(
			content = "Web Content Content From Depot",
			groupName = "Test Depot Name",
			site = "false",
			title = "Web Content From Depot");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Site",
			groupName = "Site Name",
			title = "WC WebContent From Site");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Web Content",
			fieldName = "Web Content");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		Click(
			fieldLabel = "Web Content",
			locator1 = "Button#BUTTON_LABEL",
			text = "Select");

		ItemSelector.viewWCEverywhereFilterResults(webContentTitle = "Web Content From Depot,WC WebContent From Site");

		ItemSelector.clearFilterResults(
			currentSiteWebContentTitle = "WC WebContent From Site",
			webContentTitle = "Web Content From Depot");
	}

	@description = "This is a test for LPS-107014. It checks that the site pagination can be displayed correctly in item selector."
	@priority = "4"
	test CanDisplaySitePaginationCorrectly {
		for (var i : list "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20") {
			JSONGroup.addGroup(groupName = "Site Name ${i}");
		}

		BlogsNavigator.openToAddEntry(siteURLKey = "guest");

		BlogsNavigator.gotoSelectFile();

		ItemSelector.changeWorkspaces(
			navTab = "Documents and Media",
			workspacesType = "Site");

		Pagination.viewResults(results = "Showing 1 to 20 of 22 entries.");

		Click(locator1 = "Pagination#NEXT_LINK");

		Pagination.viewResults(results = "Showing 21 to 22 of 22 entries.");

		AssertTextNotPresent(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No sites were found.");
	}

	@description = "This test ensures that documents can filter by the current site in the item selector."
	@priority = "5"
	@refactordone
	test CanFilterByCurrentSite {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		BlogsNavigator.openToAddEntry(siteURLKey = "site-name");

		BlogsNavigator.gotoSelectFile();

		ItemSelector.viewCurrentSiteFilterResults(
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media",
			noImageFileName = "Document_1.jpg",
			viewNoLocationInfo = "Site Name");
	}

	@description = "This test ensures that web content using a structure can be filtered from the current depot."
	@priority = "5"
	@refactordone
	test CanFilterCustomWCFromCurrentDepot {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			structureName = "WC Structure Name",
			webContentText = "Text",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		JSONAssetlist.addManualAssetListEntryWithItemType(
			groupName = "Test Depot Name",
			itemSubtype = "WC Structure Name",
			itemType = "Web Content Article",
			site = "false",
			title = "Depot Manual Asset List");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		ItemSelector.viewFilteredResultsViaAssetLists(
			assetListName = "Depot Manual Asset List",
			assetTitle = "Web Content Title",
			assetType = "WC Structure Name",
			itemSubtype = "WC Structure Name",
			itemType = "Web Content Article");
	}

	@description = "This test ensures that a document folder can be filtered from the current depot."
	@priority = "5"
	@refactordone
	test CanFilterDMFolderFromCurrentDepot {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name");

		JSONAssetlist.addManualAssetListEntryWithItemType(
			groupName = "Test Depot Name",
			itemType = "Documents Folder",
			site = "false",
			title = "Depot Manual Asset List");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		ItemSelector.viewFilteredResultsViaAssetLists(
			assetListName = "Depot Manual Asset List",
			assetTitle = "DM Folder Name",
			assetType = "Documents Folder",
			itemType = "Documents Folder");
	}

	@description = "This test ensures that a document can be filtered from the current depot."
	@priority = "5"
	@refactordone
	test CanFilterImageFromCurrentDepot {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpeg",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpeg");

		JSONAssetlist.addManualAssetListEntryWithItemType(
			groupName = "Test Depot Name",
			itemSubtype = "Basic Document",
			itemType = "Document",
			site = "false",
			title = "Depot Manual Asset List");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		ItemSelector.viewFilteredResultsViaAssetLists(
			assetListName = "Depot Manual Asset List",
			assetTitle = "Document_1.jpeg",
			assetType = "Basic Document",
			itemSubtype = "Basic Document",
			itemType = "Document");
	}

	@description = "This test ensures that web contents can filter by the current site in the item selector."
	@priority = "5"
	@refactordone
	test CanFilterWCByCurrentSite {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Web Content Display Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Web Content Display Page",
			widgetName = "Web Content Display");

		JSONWebcontent.addWebContent(
			content = "Web Content Content From Depot",
			groupName = "Test Depot Name",
			site = "false",
			title = "Web Content From Depot");

		JSONWebcontent.addWebContent(
			content = "Web Content Content From Site",
			groupName = "Site Name",
			title = "Web Content From Site");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Site Name");

		WebContentDisplayPortlet.gotoSelectWebContent();

		ItemSelector.viewWCCurrentSiteFilterResults(
			noWebContentTitle = "Web Content From Depot",
			viewNoLocationInfo = "Site Name",
			webContentTitle = "Web Content From Site");
	}

	@description = "This test ensures that the web content folder can be filtered from the current depot."
	@priority = "5"
	@refactordone
	test CanFilterWCFolderFromCurrentDepot {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONWebcontent.addFolder(
			folderDescription = "WC Folder Description",
			folderName = "WC Folder Name",
			groupName = "Test Depot Name",
			site = "false");

		JSONAssetlist.addManualAssetListEntryWithItemType(
			groupName = "Test Depot Name",
			itemType = "Web Content Folder",
			site = "false",
			title = "Depot Manual Asset List");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		ItemSelector.viewFilteredResultsViaAssetLists(
			assetListName = "Depot Manual Asset List",
			assetTitle = "WC Folder Name",
			assetType = "Web Content Folder",
			itemType = "Web Content Folder");
	}

	@description = "This test ensures that web content can be filtered from the current depot."
	@priority = "5"
	@refactordone
	test CanFilterWCFromCurrentDepot {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC WebContent Title");

		JSONAssetlist.addManualAssetListEntryWithItemType(
			groupName = "Test Depot Name",
			itemSubtype = "Basic Web Content",
			itemType = "Web Content Article",
			site = "false",
			title = "Depot Manual Asset List");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		ItemSelector.viewFilteredResultsViaAssetLists(
			assetListName = "Depot Manual Asset List",
			assetTitle = "WC WebContent Title",
			assetType = "Basic Web Content",
			itemSubtype = "Basic Web Content",
			itemType = "Web Content Article");
	}

	@description = "This ensures that a message is displayed in the preview section of the item selector when pasting an invalid URL."
	@priority = "5"
	@refactordone
	test CannotPreviewVideosWithInvalidURL {
		KBArticle.openToAddKBArticle(
			groupName = "Guest",
			siteURLKey = "guest");

		ItemSelector.gotoItemSelectorViaCKEditor(video = "true");

		ItemSelector.addVideoFromURL(
			navTab = "URL",
			unpublish = "true",
			videoSourceURL = "https://youtu.be/IxNczRyywXYtest");

		ItemSelector.previewEmbeddedVideo(invalidURL = "https://www.youtube.com");

		ItemSelector.addVideoFromURL(
			navTab = "URL",
			unpublish = "true",
			videoSourceURL = "https://www.youtube.com/watch?v=test");

		ItemSelector.previewEmbeddedVideo(invalidURL = "https://www.youtube.com");

		ItemSelector.addVideoFromURL(
			navTab = "URL",
			unpublish = "true",
			videoSourceURL = "https://vimeo.com/test");

		ItemSelector.previewEmbeddedVideo(invalidURL = "https://player.vimeo.com");

		ItemSelector.addVideoFromURL(
			navTab = "URL",
			unpublish = "true",
			videoSourceURL = "https://www.facebook.com/Cristiano/videos/test");

		ItemSelector.previewEmbeddedVideo(invalidURL = "https://www.facebook.com");

		ItemSelector.addVideoFromURL(
			navTab = "URL",
			unpublish = "true",
			videoSourceURL = "https://test.com/test");

		ItemSelector.previewEmbeddedVideo(invalidURL = "https://test.com/test");
	}

	@description = "This is a test for LPS-136947. It checks that unsupported files cannot be uploaded to Blogs."
	@priority = "3"
	test CannotUploadUnsupportedFilesToBlogs {
		property portal.acceptance = "false";

		BlogsNavigator.openToAddEntry(siteURLKey = "guest");

		BlogsNavigator.gotoSelectFile();

		ItemSelector.uploadFile(
			invalidFileValidation = "Please enter a file with a valid extension (.gif,.jpeg,.jpg,.png).",
			uploadFileName = "Document_1.pdf");
	}

	@description = "This test covers LPS-119709. It ensures that the blog images can not filter by the everywhere and the current site."
	@priority = "4"
	@refactordone
	test CannotViewFilterScopeInBlogImagesTab {
		BlogsNavigator.openToAddEntry(siteURLKey = "guest");

		BlogsNavigator.gotoSelectFile();

		SelectFrame(locator1 = "ItemSelector#ITEM_SELECTOR_IFRAME");

		for (var subheaderItem : list "Everywhere,Current Site") {
			ManagementBar.viewNoSubheaderInFilterAndOrder(subheaderItem = "${subheaderItem}");
		}
	}

	@description = "It ensures that the web content draft in an Asset Library cannot be found when searching in an Item Selector in that Library."
	@priority = "4"
	@refactordone
	test CannotViewWCDraftViaFilterResults {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC WebContent Title",
			workflowAction = "DRAFT");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Web Content",
			fieldName = "Web Content");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		Click(
			fieldLabel = "Web Content",
			locator1 = "Button#BUTTON_LABEL",
			text = "Select");

		ItemSelector.viewWCEverywhereFilterResults(
			draft = "true",
			webContentTitle = "WC WebContent Title");
	}

	@description = "This ensures that users can preview the Facebook video in item selector."
	@priority = "5"
	@refactordone
	test CanPreviewFacebookVideo {
		property test.name.skip.portal.instance = "ItemSelector#PreviewFacebookVideo";

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		VideoShortcut.addCP(
			videoShortcutTitle = "Test Facebook Video",
			videoURL = "https://www.facebook.com/Cristiano/videos/1710977485745946");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		BlogsNavigator.openToAddEntry(siteURLKey = "site-name");

		ItemSelector.gotoItemSelectorViaAlloyEditor(video = "true");

		ItemSelector.previewVideoFromDM(
			depotName = "Test Depot Name",
			navTab = "Documents and Media",
			validURL = "https://www.facebook.com",
			videoShortcutTitle = "Test Facebook Video");
	}

	@description = "This ensures that users can preview the supported videos in the item selector."
	@priority = "5"
	@refactordone
	test CanPreviewSupportedVideos {
		BlogsNavigator.openToAddEntry(siteURLKey = "guest");

		ItemSelector.gotoItemSelectorViaAlloyEditor(video = "true");

		for (var videoSourceURL : list "https://www.youtube.com/watch?v=2EPZxIC5ogU,https://youtu.be/IxNczRyywXY") {
			ItemSelector.addVideoFromURL(
				navTab = "URL",
				unpublish = "true",
				videoSourceURL = "https://www.youtube.com/watch?v=2EPZxIC5ogU");

			ItemSelector.previewEmbeddedVideo(validURL = "https://www.youtube.com");
		}

		for (var videoSourceURL : list "https://www.twitch.tv/videos/806178790,https://www.twitch.tv/esl_csgo") {
			ItemSelector.addVideoFromURL(
				navTab = "URL",
				unpublish = "true",
				videoSourceURL = "${videoSourceURL}");

			ItemSelector.previewEmbeddedVideo(validURL = "https://player.twitch.tv");
		}

		ItemSelector.addVideoFromURL(
			navTab = "URL",
			unpublish = "true",
			videoSourceURL = "https://www.facebook.com/Cristiano/videos/1710977485745946");

		ItemSelector.previewEmbeddedVideo(validURL = "https://www.facebook.com");

		ItemSelector.addVideoFromURL(
			navTab = "URL",
			unpublish = "true",
			videoSourceURL = "https://vimeo.com/483035084");

		ItemSelector.previewEmbeddedVideo(validURL = "https://player.vimeo.com");
	}

	@description = "This ensures that users can preview the SVG image in item selector."
	@priority = "5"
	@refactordone
	test CanPreviewSVG {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.svg",
			groupName = "Guest",
			mimeType = "image/svg+xml",
			sourceFileName = "Document_1.svg");

		BlogsNavigator.openToAddEntry(siteURLKey = "guest");

		BlogsNavigator.gotoSelectFile();

		ItemSelector.gotoPreviewViaSelectFile(navTab = "Documents and Media");

		ItemSelector.viewPreview(
			footer = "1 of 1",
			imageFileName = "Document_1.svg");
	}

	@description = "This ensures that users can preview the Twitch video in item selector."
	@priority = "5"
	@refactordone
	test CanPreviewTwitchVideo {
		property test.name.skip.portal.instance = "ItemSelector#PreviewTwitchVideo";

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		DepotNavigator.openToAddDMEntry(
			depotName = "Test Depot Name",
			documentTypeName = "External Video Shortcut");

		VideoShortcut.addCP(
			skipNavigation = "true",
			videoShortcutTitle = "Test Twitch Video",
			videoURL = "https://www.twitch.tv/videos/806178790");

		KBArticle.openToAddKBArticle(
			groupName = "Site Name",
			siteURLKey = "site-name");

		ItemSelector.gotoItemSelectorViaCKEditor(video = "true");

		ItemSelector.previewVideoFromDM(
			depotName = "Test Depot Name",
			navTab = "Documents and Media",
			validURL = "https://player.twitch.tv",
			videoShortcutTitle = "Test Twitch Video");
	}

	@description = "This ensures that users can preview the Vimeo video in item selector."
	@priority = "5"
	@refactordone
	test CanPreviewVimeoVideo {
		DMNavigator.openToAddEntry(
			documentTypeName = "External Video Shortcut",
			groupName = "Guest",
			siteURLKey = "guest");

		VideoShortcut.addCP(
			skipNavigation = "true",
			videoShortcutTitle = "Test Vimeo Video",
			videoURL = "https://vimeo.com/483035084");

		WebContentNavigator.openToAddBasicArticle(
			groupName = "Guest",
			siteURLKey = "guest");

		ItemSelector.gotoItemSelectorViaCKEditor(video = "true");

		ItemSelector.previewVideoFromDM(
			navTab = "Documents and Media",
			validURL = "https://player.vimeo.com",
			videoShortcutTitle = "Test Vimeo Video");
	}

	@description = "This ensures that users can preview the YouTube video in item selector."
	@priority = "5"
	@refactordone
	test CanPreviewYouTubeVideo {
		DMNavigator.openToAddEntry(
			documentTypeName = "External Video Shortcut",
			groupName = "Guest",
			siteURLKey = "guest");

		VideoShortcut.addCP(
			skipNavigation = "true",
			videoShortcutTitle = "Test YouTube Video",
			videoURL = "https://www.youtube.com/watch?v=2EPZxIC5ogU");

		KBArticle.openToAddKBArticle(
			groupName = "Guest",
			siteURLKey = "guest");

		ItemSelector.gotoItemSelectorViaCKEditor(video = "true");

		ItemSelector.previewVideoFromDM(
			navTab = "Documents and Media",
			validURL = "https://www.youtube.com",
			videoShortcutTitle = "Test YouTube Video");
	}

	@description = "This ensures that a blog cover image uploaded from blogs images can be viewed in the blogs images tab of item selector."
	@priority = "3"
	@refactordone
	test CanSearchForUploadedImageFromBlogsImages {
		property portal.acceptance = "false";

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addEntryWithUploadedCoverImage(
			coverImageName = "Document_1",
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			navTab = "Blog Images",
			uploadFileName = "Document_1.jpg");

		Button.clickPublish();

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

		BlogsNavigator.gotoBrowseImage();

		ItemSelector.searchBlogImages(imageFileName = "Document_1.jpg");
	}

	@description = "This ensures that a blog cover image uploaded from DM images can be viewed in the blogs images tab of item selector."
	@priority = "3"
	@refactordone
	test CanSearchForUploadedImageFromDMImages {
		property portal.acceptance = "false";

		BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

		Blogs.addEntryWithUploadedCoverImage(
			coverImageName = "Document_1",
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			navTab = "Documents and Media",
			uploadFileName = "Document_1.jpg");

		Button.clickPublish();

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

		BlogsNavigator.gotoBrowseImage();

		ItemSelector.searchDMImages(imageFileName = "Document_1.jpg");
	}

	@description = "This is a use case for LPS-106776. This ensures that the background image of a fragment can be added."
	@priority = "5"
	@refactordone
	test CanSelectBackgroundImageForFragment {
		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpeg",
			groupName = "Test Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpeg");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Content Page Name",
			type = "content");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Test Content Page Name",
			siteName = "Test Site Name");

		PageEditor.addFragment(
			collectionName = "Layout Elements",
			fragmentName = "Container");

		PageEditor.editLayoutContainer(
			backgroundImage = "Direct",
			entryTitle = "Document_1.jpeg",
			navItem = "Documents and Media",
			paddingTop = "2",
			panel = "Styles");

		PageEditor.clickPublish();

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/test-content-page-name");

		ContentPages.viewFragmentBackgroundImage(image = "Document_1.jpeg");
	}

	@description = "This test covers LPS-119553. It ensures that the assets in the connected site can not be filtered out after navigating to the depot through the breadcrumb."
	@priority = "4"
	@refactordone
	test CanViewCorrectFilterResultsInSpecificBreadcrumb {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Web Content Display Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Web Content Display Page",
			widgetName = "Web Content Display");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Depot",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC WebContent From Depot");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Site",
			groupName = "Site Name",
			title = "WC WebContent From Site");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		Navigator.gotoSitePage(
			pageName = "Web Content Display Page",
			siteName = "Site Name");

		WebContentDisplayPortlet.gotoSelectWebContent(depotName = "Test Depot Name");

		ManagementBar.setFilterAndOrder(filterBy = "Everywhere");

		AssertElementPresent(
			key_filterScope = "Scope: Everywhere",
			locator1 = "ManagementBar#FILTER_RESULTS_SCOPE");

		LexiconEntry.viewEntryName(rowEntry = "WC WebContent From Depot");

		LexiconEntry.viewNoEntry(rowEntry = "WC WebContent From Site");

		ManagementBar.setFilterAndOrder(filterBy = "Current Asset Library");

		AssertElementNotPresent(
			key_filterScope = "Scope: Current Asset Library",
			locator1 = "ManagementBar#FILTER_RESULTS_SCOPE");

		LexiconEntry.viewEntryName(rowEntry = "WC WebContent From Depot");

		LexiconEntry.viewNoEntry(rowEntry = "WC WebContent From Site");
	}

	@description = "This ensures that the location info of depot web content can be viewed through WCD on a connected site."
	@priority = "5"
	@refactordone
	test CanViewCorrectWCLocationInfo {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Depot Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Page Name",
			widgetName = "Web Content Display");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Depot",
			groupName = "Depot Name",
			site = "false",
			title = "WC WebContent From Depot");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Site",
			groupName = "Site Name",
			title = "WC WebContent From Site");

		JSONDepot.connectSite(
			depotName = "Depot Name",
			groupName = "Site Name");

		for (var localization : list "Depot,Site") {
			Navigator.gotoSitePage(
				pageName = "Page Name",
				siteName = "Site Name");

			ItemSelector.viewLocationInfoViaWCD(
				locationName = "${localization} Name",
				titleList = "WC WebContent From ${localization}");
		}
	}

	@description = "This ensures that the location info of the documents can be viewed through Blogs on a connected site."
	@priority = "5"
	@refactordone
	test CanViewDocumentsCorrectLocationInfo {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name",
			site = "false");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			folderName = "DM Folder Name",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1.jpg",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Site Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			folderName = "DM Folder Name",
			groupName = "Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		for (var locationName : list "Test Depot Name,Site Name") {
			BlogsNavigator.openToAddEntry(siteURLKey = "site-name");

			BlogsNavigator.gotoSelectFile();

			ItemSelector.viewLocationInfoViaBlogs(
				locationName = "${locationName}",
				navTab = "Documents and Media",
				titleList = "Document_1.jpg,Document_2.jpg,DM Folder Name");
		}
	}

	@description = "This test covers LPS-118808. It ensures that an image in the depot folder can be viewed through everywhere filter on a connected site."
	@priority = "4"
	@refactordone
	test CanViewFolderImageViaFilterResults {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			folderName = "DM Folder Name",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		BlogsNavigator.openToAddEntry(siteURLKey = "site-name");

		BlogsNavigator.gotoSelectFile();

		ItemSelector.viewEverywhereFilterResults(
			dmFolderName = "DM Folder Name",
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media");
	}

	@description = "This test covers LPS-119707. It ensures that the web content in the depot folder can be viewed through everywhere filter on a connected site."
	@priority = "4"
	@refactordone
	test CanViewFolderWCViaFilterResults {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONWebcontent.addFolder(
			folderDescription = "WC Folder Description",
			folderName = "WC Folder Name",
			groupName = "Test Depot Name",
			site = "false");

		JSONWebcontent.addWebContent(
			content = "Webcontent Content",
			folderName = "WC Folder Name",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC WebContent From Depot");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Site",
			groupName = "Site Name",
			title = "WC WebContent From Site");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		NavItem.gotoStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Web Content",
			fieldName = "Web Content");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		Click(
			fieldLabel = "Web Content",
			locator1 = "Button#BUTTON_LABEL",
			text = "Select");

		ItemSelector.viewWCEverywhereFilterResults(
			folderWebContentTitle = "WC WebContent From Depot",
			siteName = "Test Depot Name",
			viewFolderWc = "true",
			wcFolderName = "WC Folder Name",
			webContentTitle = "WC WebContent From Site");
	}

	@description = "This ensures that the video thumbnails can be viewed in Item Selector."
	@priority = "5"
	@refactordone
	test CanViewVideoThumbnailsViaWC {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openToAddDMEntry(
			depotName = "Test Depot Name",
			documentTypeName = "External Video Shortcut");

		VideoShortcut.addCP(
			skipNavigation = "true",
			videoShortcutTitle = "Test YouTube Video",
			videoURL = "https://www.youtube.com/watch?v=HOdbzGCI5ME");

		DepotNavigator.openToAddDMEntry(
			depotName = "Test Depot Name",
			documentTypeName = "External Video Shortcut");

		VideoShortcut.addCP(
			skipNavigation = "true",
			videoShortcutTitle = "Test Shortened URL Video",
			videoURL = "https://youtu.be/HOdbzGCI5ME");

		DepotNavigator.openToAddDMEntry(
			depotName = "Test Depot Name",
			documentTypeName = "External Video Shortcut");

		VideoShortcut.addCP(
			skipNavigation = "true",
			videoShortcutTitle = "Test Vimeo Video",
			videoURL = "https://vimeo.com/483035084");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		WebContentNavigator.openToAddBasicArticle(
			groupName = "Site Name",
			siteURLKey = "site-name");

		ItemSelector.gotoItemSelectorViaCKEditor(video = "true");

		ItemSelector.viewCardThumbnails(
			cardList = "Test YouTube Video,Test Shortened URL Video,Test Vimeo Video",
			depotName = "Test Depot Name",
			navTab = "Documents and Media");

		WebContentNavigator.openToAddBasicArticle(
			groupName = "Site Name",
			siteURLKey = "site-name");

		ItemSelector.gotoItemSelectorViaCKEditor(video = "true");

		ItemSelector.viewListThumbnails(
			depotName = "Test Depot Name",
			listEntry = "Test YouTube Video,Test Shortened URL Video,Test Vimeo Video",
			navTab = "Documents and Media");
	}

	@description = "This makes sure that the files in item selector can display by pagination."
	@priority = "4"
	@refactordone
	test FilePaginationDisplaysCorrectCount {
		for (var documentTitle : list "Document_1,Document_2,Document_3,Document_4,Commerce_Black,Commerce_White") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "${documentTitle}",
				groupName = "Guest",
				mimeType = "image/jpeg",
				sourceFileName = "${documentTitle}.jpg");
		}

		BlogsNavigator.openToAddEntry(siteURLKey = "guest");

		BlogsNavigator.gotoSelectFile();

		SelectFrame(locator1 = "ItemSelector#ITEM_SELECTOR_IFRAME");

		ItemSelector.switchTab(navTab = "Documents and Media");

		for (var card : list "Document_1,Document_2,Document_3,Document_4,Commerce_Black,Commerce_White") {
			LexiconCard.viewCardTitle(card = "${card}");
		}

		Pagination.viewResults(results = "Showing 1 to 6 of 6 entries.");

		Pagination.changePagination(itemsPerPage = "4");

		for (var card : list "Document_1,Document_2,Commerce_Black,Commerce_White") {
			LexiconCard.viewCardTitle(card = "${card}");
		}

		Pagination.viewResults(results = "Showing 1 to 4 of 6 entries.");

		Click(locator1 = "Pagination#NEXT_LINK");

		for (var card : list "Document_3,Document_4") {
			LexiconCard.viewCardTitle(card = "${card}");
		}

		Pagination.viewResults(results = "Showing 5 to 6 of 6 entries.");
	}

	@description = "This test covers LPS-122139. It ensures that the files in the item selector can display by pagination after scoped everywhere filter."
	@priority = "4"
	@refactordone
	test FilePaginationForFilteredResultsDisplaysCorrectCount {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		for (var num : list "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document_${num}",
				fileName = "Document_${num}.jpg",
				groupName = "Test Depot Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_4.jpg");
		}

		for (var num : list "1,2,3,4,5,6,7") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document_${num}",
				fileName = "Document_${num}.jpg",
				groupName = "Site Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");
		}

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		BlogsNavigator.openToAddEntry(siteURLKey = "site-name");

		BlogsNavigator.gotoSelectFile();

		ItemSelector.configureFilterViaSelectFile(
			filterBy = "Everywhere",
			navTab = "Documents and Media");

		Pagination.changePagination(itemsPerPage = "40");

		Pagination.viewResults(results = "Showing 1 to 30 of 30 entries.");

		BlogsNavigator.openToAddEntry(siteURLKey = "site-name");

		BlogsNavigator.gotoSelectFile();

		ItemSelector.configureFilterViaSelectFile(
			filterBy = "Everywhere",
			navTab = "Documents and Media");

		Click(locator1 = "Pagination#NEXT_LINK");

		Pagination.viewResults(results = "Showing 21 to 30 of 30 entries.");
	}

	@description = "This is a test for LPS-136945. It checks that only 'File Upload,' 'Folder,' 'Google Drive Shortcut' and 'External Video Shortcut' options appear when adding a document."
	@priority = "3"
	test OnlyRelevantSelectionsAppearWhenAddingDocuments {
		property osgi.app.includes = "document-library-google-docs";
		property portal.acceptance = "false";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		NavItem.gotoStructures();

		WebContentStructures.addCP(structureName = "Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Upload",
			fieldName = "Upload");

		WebContentStructures.saveCP(structureName = "Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		LexiconEntry.gotoAddMenuItem(menuItem = "Structure Name");

		Click(
			key_text = "Select",
			locator1 = "Button#ANY_LAST");

		ItemSelector.viewRelevantSelections(addDocumentOptions = "true");
	}

	@description = "This is a test for LPS-136943. It checks that only 'File Upload' and 'Folder' options appear when adding images."
	@priority = "3"
	test OnlyRelevantSelectionsAppearWhenAddingImages {
		property portal.acceptance = "false";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		LexiconEntry.gotoAddMenuItem(menuItem = "Basic Web Content");

		ItemSelector.gotoItemSelectorViaCKEditor();

		ItemSelector.viewRelevantSelections(addImageOptions = "true");
	}

	@description = "This is a test for LPS-136944. It checks that only 'File Upload,' 'Folder,' and 'External Video Shortcut' options appear when adding a video."
	@priority = "3"
	test OnlyRelevantSelectionsAppearWhenAddingVideos {
		property portal.acceptance = "false";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		LexiconEntry.gotoAddMenuItem(menuItem = "Basic Web Content");

		ItemSelector.gotoItemSelectorViaCKEditor(video = "true");

		ItemSelector.viewRelevantSelections(addVideoOptions = "true");
	}

	@description = "This test covers LPS-96564. It ensures that a private site cannot be viewed by a non-site member in calendar widget."
	@priority = "4"
	@refactordone
	test PrivateSiteShouldNotBeViewableWithoutPermissionsInCalendar {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		var portalURL = PropsUtil.get("portal.url");

		JSONGroup.addGroup(
			groupName = "Site A",
			membershipType = "Private");

		JSONGroup.addGroup(groupName = "Site X");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		User.openUsersAdmin();

		User.gotoAddPage(userName = "userfn userln");

		PagesAdmin.addPrivatePage(pageName = "Private Test Page");

		Navigator.gotoSpecificURLPage(
			pageName = "Private Test Page",
			url = "${portalURL}/user/usersn/private-test-page");

		Portlet.addPG(portletName = "Calendar");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoSpecificURLPage(
			pageName = "Private Test Page",
			url = "${portalURL}/user/usersn/private-test-page");

		CalendarNavigator.gotoAddEvent();

		WaitForLiferayEvent.initializeLiferayEventLog();

		Click(locator1 = "CKEditor#TOOLBAR_IMAGE_BUTTON");

		ItemSelector.changeWorkspaces(workspacesType = "Site");

		LexiconCard.viewCardPresent(card = "Site X");

		LexiconCard.viewCardNotPresent(card = "Site A");
	}

}