@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");

			Site.tearDownCP();

			DMDocument.tearDownCP();

			DMFolder.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This ensures that a depot can be accessed through the Product Menu when the Applications Menu is disabled."
	@priority = "5"
	@refactordone
	test CanAccessAppsViaProductMenu {
		property test.name.skip.portal.instance = "DepotEntry#CanAccessAppsViaProductMenu";

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		SystemSettings.openToConfigInSystemSettings(portlet = "Applications Menu");

		FormFields.disableCheckbox(fieldName = "Enable Applications Menu");

		SystemSettings.saveConfiguration();

		for (var application : list "Documents and Media,Web Content") {
			DepotNavigator.openDepotAdmin();

			DepotNavigator.gotoDepot(depotName = "Test Depot Name");

			DepotNavigator.gotoPortlet(portlet = "${application}");
		}
	}

	@description = "This tests the basic flow the user will take to add a depot through the UI."
	@e2e
	@priority = "5"
	@refactordone
	test CanAddDepot {
		property environment.acceptance = "true";
		property portal.acceptance = "true";

		ApplicationsMenu.gotoPortlet(
			category = "Content",
			panel = "Applications",
			portlet = "Asset Libraries");

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Test Depot Name");
	}

	@description = "This ensures that a depot containing a folder and some files can be deleted."
	@priority = "4"
	@refactordone
	test CanDeleteDepotWithContent {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "This is a document",
			groupName = "Test Depot Name",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "This is an image",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		DepotNavigator.openDepotAdmin();

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that an empty depot can be deleted."
	@priority = "5"
	@refactordone
	test CanDeleteEmptyDepot {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot can be deleted in the list view."
	@e2e
	@priority = "5"
	@refactordone
	test CanDeleteInListView {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot can be deleted in the table view."
	@e2e
	@priority = "5"
	@refactordone
	test CanDeleteInTableView {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		Depot.deleteCP(depotName = "Test Depot Name");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a user can deselect depots and delete the reselected ones in cards view."
	@priority = "5"
	@refactordone
	test CanDeselectAndDeleteInCardsView {
		for (var depotName : list "Test Depot Name 1,Test Depot Name 2,Test Depot Name 3") {
			JSONDepot.addDepot(
				depotDescription = "This is the description of a depot",
				depotName = "${depotName}");
		}

		DepotNavigator.openDepotAdmin();

		PortletEntry.selectAll();

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "All Selected");

		Click.clickNoWaitForVisible(
			key_card = "Test Depot Name 1",
			locator1 = "Card#CARD_CHECKBOX");

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "2 of 3 Selected");

		Depot.deleteCP(deletions = "true");

		LexiconCard.checkCardCheckbox(card = "Test Depot Name 1");

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "All Selected");

		Depot.deleteCP(deletions = "true");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a user can deselect depots and delete the reselected ones in list view."
	@priority = "4"
	@refactordone
	test CanDeselectAndDeleteInListView {
		for (var depotName : list "Test Depot Name 1,Test Depot Name 2,Test Depot Name 3") {
			JSONDepot.addDepot(
				depotDescription = "This is the description of a depot",
				depotName = "${depotName}");
		}

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		PortletEntry.selectAll();

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "All Selected");

		Uncheck(
			key_listEntry = "Test Depot Name 1",
			locator1 = "LexiconList#LIST_ENTRY_CHECKBOX");

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "2 of 3 Selected");

		Depot.deleteCP(deletions = "true");

		Check(
			key_listEntry = "Test Depot Name 1",
			locator1 = "LexiconList#LIST_ENTRY_CHECKBOX");

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "All Selected");

		Depot.deleteCP(deletions = "true");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a user can deselect depots and delete the reselected ones in table view."
	@priority = "4"
	@refactordone
	test CanDeselectAndDeleteInTableView {
		for (var depotName : list "Test Depot Name 1,Test Depot Name 2,Test Depot Name 3") {
			JSONDepot.addDepot(
				depotDescription = "This is the description of a depot",
				depotName = "${depotName}");
		}

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		PortletEntry.selectAll();

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "All Selected");

		Uncheck(
			key_rowEntry = "Test Depot Name 1",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_CHECKBOX");

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "2 of 3 Selected");

		Depot.deleteCP(deletions = "true");

		Check(
			key_rowEntry = "Test Depot Name 1",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_CHECKBOX");

		AssertTextEquals(
			locator1 = "ManagementBar#NAVBAR_TEXT",
			value1 = "All Selected");

		Depot.deleteCP(deletions = "true");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that a depot can be edited in the list view."
	@e2e
	@priority = "5"
	@refactordone
	test CanEditInListView {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			listView = "true");

		DepotNavigator.openDepotAdmin();

		Depot.editDepot(
			depotDescriptionEdit = "This is an edited description of a depot",
			depotName = "Test Depot Name",
			depotNameEdit = "Edited Test Depot Name",
			listView = "true");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		DepotNavigator.gotoDepot(
			depotName = "Edited Test Depot Name",
			listView = "true");
	}

	@description = "This ensures that a depot can be edited in the table view."
	@e2e
	@priority = "5"
	@refactordone
	test CanEditInTableView {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			tableView = "true");

		DepotNavigator.openDepotAdmin();

		Depot.editDepot(
			depotDescriptionEdit = "This is an edited description of a depot",
			depotName = "Test Depot Name",
			depotNameEdit = "Edited Test Depot Name",
			tableView = "true");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		DepotNavigator.gotoDepot(
			depotName = "Edited Test Depot Name",
			tableView = "true");
	}

	@description = "This ensures that the depot name and description can be edited."
	@priority = "5"
	@refactordone
	test CanEditNameAndDescription {
		property portal.acceptance = "true";

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.editDepot(
			depotDescriptionEdit = "This is an edited description of a depot",
			depotName = "Test Depot Name",
			depotNameEdit = "Edited Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Edited Test Depot Name");
	}

	@description = "This ensures that a depot can be edited via settings. Also covers LPS-146116, it ensures that there is no kebab menu on depot admin page."
	@e2e
	@priority = "4"
	@refactordone
	test CanEditNameViaSettings {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		AssertElementNotPresent(locator1 = "Portlet#OPTIONS_ICON");

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Asset Library Settings");

		Depot.editDepot(
			depotDescriptionEdit = "This is an edited description of a depot",
			depotName = "Test Depot Name",
			depotNameEdit = "Edited Test Depot Name",
			settings = "true");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Edited Test Depot Name");
	}

	@description = "This test covers LPS-120834. It ensures that a user can not redirect to the depot via Space icon."
	@priority = "5"
	@refactordone
	test CannotAccessDepotViaSite {
		property portal.acceptance = "true";

		Navigator.openURL();

		ProductMenuHelper.openProductMenu();

		ProductMenuHelper.openWorkspace();

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		WaitForVisible(
			locator1 = "NavBar#NAV_ITEM_LINK",
			value1 = "${navItem}");

		AssertElementNotPresent(
			locator1 = "NavBar#NAV_ITEM_LINK",
			navItem = "Asset Libraries",
			value1 = "Asset Libraries");
	}

	// May need to update test after LPS-133688 is fixed

	@description = "This ensures that a user can not create a repository with the same escape characters name as another repository."
	@priority = "5"
	@refactordone
	test CannotAddDuplicateWithEscapeCharacters {
		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "&");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotName = "&",
			duplicate = "true");

		DepotNavigator.openDepotAdmin();

		AssertElementNotPresent(
			key_card = "&",
			key_index = "2",
			locator1 = "Card#CARD_PAGE_ITEM");
	}

	@description = "This ensures that users cannot create the same name as another site name."
	@priority = "5"
	@refactordone
	test CannotAddNameThatDuplicatesSite {
		JSONGroup.addGroup(groupName = "Site Name");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotName = "Site Name",
			duplicate = "true");

		DepotNavigator.openDepotAdmin();

		Depot.viewDefaultCP();
	}

	@description = "This ensures that users cannot create the same name as another translated repository name."
	@priority = "4"
	@refactordone
	test CannotAddNameThatDuplicatesTranslation {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDefineCustomLanguages(depotName = "Test Depot Name");

		Depot.configureDefaultLanguage(
			defaultDepotLanguage = "Spanish (Spain)",
			locale = "es_ES");

		DepotNavigator.openDepotAdmin();

		Depot.editDepot(
			depotName = "Test Depot Name",
			depotNameEdit = "título",
			language = "es-ES");

		DepotNavigator.openDepotAdmin();

		Depot.addDepot(
			depotName = "título",
			duplicate = "true");
	}

	@description = "This ensures that users cannot create a site with the same name as an existing depot."
	@priority = "5"
	@refactordone
	test CannotAddSiteThatDuplicatesName {
		JSONDepot.addDepot(
			depotDescription = "This depot will duplicate a site name",
			depotName = "Site Name");

		Site.openSitesAdmin();

		Site.viewCannotAdd(
			siteName = "Site Name",
			siteNameInvalid = "Duplicate");
	}

	@description = "This ensures that users cannot edit repository name same as another repository name."
	@priority = "5"
	@refactordone
	test CannotRenameWithDuplicateTitle {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name 2");

		DepotNavigator.openDepotAdmin();

		Depot.editDepot(
			depotName = "Test Depot Name 2",
			depotNameEdit = "Test Depot Name",
			duplicate = "true");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Test Depot Name 2");
	}

	@description = "This ensures that a depot's description can be searched."
	@priority = "5"
	@refactordone
	test CanSearchForDepotDescription {
		JSONDepot.addDepot(
			depotDescription = "Description 1",
			depotName = "Depot 1");

		JSONDepot.addDepot(
			depotDescription = "Description 2",
			depotName = "Depot 2");

		JSONDepot.addDepot(
			depotDescription = "Description 3",
			depotName = "Depot 3");

		JSONDepot.addDepot(
			depotDescription = "",
			depotName = "Should not be returned in search");

		DepotNavigator.openDepotAdmin();

		Search.searchCP(searchTerm = "Description");

		Depot.viewSearchResult(
			excludedResults = "Should not be returned in search",
			includedResults = "Depot 1,Depot 2,Depot 3",
			resultCount = "3",
			searchTerm = "Description");

		DepotNavigator.gotoDepot(depotName = "Depot 1");
	}

	@description = "This ensures that a depot's title can be searched."
	@priority = "5"
	@refactordone
	test CanSearchForDepotTitle {
		for (var depotName : list "Depot 1,Depot 2,Depot 3") {
			JSONDepot.addDepot(
				depotDescription = "",
				depotName = "${depotName}");
		}

		JSONDepot.addDepot(
			depotDescription = "",
			depotName = "Should not be returned in search");

		DepotNavigator.openDepotAdmin();

		AssertElementPresent(
			key_card = "Depot 1",
			locator1 = "Card#CARD_TITLE");

		Search.searchCP(searchTerm = "Depot");

		Depot.viewSearchResult(
			excludedResults = "Should not be returned in search",
			includedResults = "Depot 1,Depot 2,Depot 3",
			resultCount = "3",
			searchTerm = "Depot");

		DepotNavigator.gotoDepot(depotName = "Depot 1");
	}

	@description = "This ensures that all depots can be deleted when the user selects all."
	@priority = "4"
	@refactordone
	test CanSelectAllAndDelete {
		for (var depotName : list "Test Depot Name 1,Test Depot Name 2,Test Depot Name 3") {
			JSONDepot.addDepot(
				depotDescription = "This is the description of a depot",
				depotName = "${depotName}");
		}

		DepotNavigator.openDepotAdmin();

		PortletEntry.selectAll();

		Depot.deleteCP(deletions = "true");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that all depots can be deleted in the list view when the user selects all."
	@priority = "4"
	@refactordone
	test CanSelectAllAndDeleteInListView {
		for (var depotName : list "Test Depot Name 1,Test Depot Name 2,Test Depot Name 3") {
			JSONDepot.addDepot(
				depotDescription = "This is the description of a depot",
				depotName = "${depotName}");
		}

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		PortletEntry.selectAll();

		Depot.deleteCP(deletions = "true");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that all depots can be deleted in the table view when the user selects all."
	@priority = "4"
	@refactordone
	test CanSelectAllAndDeleteInTableView {
		for (var depotName : list "Test Depot Name 1,Test Depot Name 2,Test Depot Name 3") {
			JSONDepot.addDepot(
				depotDescription = "This is the description of a depot",
				depotName = "${depotName}");
		}

		DepotNavigator.openDepotAdmin();

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		PortletEntry.selectAll();

		Depot.deleteCP(deletions = "true");

		Depot.viewDefaultCP();
	}

	@description = "This ensures that the number of connected sites can be viewed in the card view."
	@priority = "5"
	@refactordone
	test CanViewConnectionsInCardView {
		for (var siteName : list "Site Name 1,Site Name 2,Site Name 3") {
			JSONGroup.addGroup(groupName = "${siteName}");
		}

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.viewConnectedSiteNumber(
			cardView = "true",
			connectedSiteNumber = "0",
			depotName = "Test Depot Name");

		for (var siteName : list "Site Name 1,Site Name 2,Site Name 3") {
			JSONDepot.connectSite(
				depotName = "Test Depot Name",
				groupName = "${siteName}");
		}

		DepotNavigator.openDepotAdmin();

		Depot.viewConnectedSiteNumber(
			cardView = "true",
			connectedSiteNumber = "3",
			depotName = "Test Depot Name");

		for (var siteName : list "Site Name 2,Site Name 3") {
			JSONDepot.disconnectSite(groupName = "${siteName}");
		}

		DepotNavigator.openDepotAdmin();

		Depot.viewConnectedSiteNumber(
			cardView = "true",
			connectedSiteNumber = "1",
			depotName = "Test Depot Name");

		JSONDepot.disconnectSite(groupName = "Site Name 1");

		DepotNavigator.openDepotAdmin();

		Depot.viewConnectedSiteNumber(
			cardView = "true",
			connectedSiteNumber = "0",
			depotName = "Test Depot Name");
	}

	@description = "This ensures that the number of connected sites can be viewed in the table view."
	@priority = "5"
	@refactordone
	test CanViewConnectionsInTableView {
		for (var siteName : list "Site Name 1,Site Name 2,Site Name 3") {
			JSONGroup.addGroup(groupName = "${siteName}");
		}

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.viewConnectedSiteNumber(
			connectedSiteNumber = "0",
			depotName = "Test Depot Name",
			tableView = "true");

		for (var siteName : list "Site Name 1,Site Name 2,Site Name 3") {
			JSONDepot.connectSite(
				depotName = "Test Depot Name",
				groupName = "${siteName}");
		}

		DepotNavigator.openDepotAdmin();

		Depot.viewConnectedSiteNumber(
			connectedSiteNumber = "3",
			depotName = "Test Depot Name",
			tableView = "true");

		for (var siteName : list "Site Name 2,Site Name 3") {
			JSONDepot.disconnectSite(groupName = "${siteName}");
		}

		DepotNavigator.openDepotAdmin();

		Depot.viewConnectedSiteNumber(
			connectedSiteNumber = "1",
			depotName = "Test Depot Name",
			tableView = "true");

		JSONDepot.disconnectSite(groupName = "Site Name 1");

		DepotNavigator.openDepotAdmin();

		Depot.viewConnectedSiteNumber(
			connectedSiteNumber = "0",
			depotName = "Test Depot Name",
			tableView = "true");
	}

}