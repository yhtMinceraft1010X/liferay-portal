@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");

			Site.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This ensures that the user can perform operations to memberships with all permissions."
	@priority = "5"
	@refactorneeded
	test AccessMembershipWithAllPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea1@liferay.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1");

		JSONUser.addUser(
			userEmailAddress = "userea2@liferay.com",
			userFirstName = "userfn2",
			userLastName = "userln2",
			userScreenName = "usersn2");

		for (var i : list "1,2") {
			DepotNavigator.openDepotAdmin();

			DepotNavigator.gotoDepotPortlet(
				depotName = "Test Depot Name",
				portlet = "Memberships");

			Depot.assignUserAsMember(
				depotName = "Test Depot Name",
				userFirstName = "userfn${i}",
				userLastName = "userln${i}",
				userScreenName = "usersn${i}");
		}

		Permissions.setUpRegRoleLoginUserCP(
			roleTitle = "Depot Regrole Name",
			userEmailAddress = "userea1@liferay.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Depot Regrole Name");

		for (var resourceActionIndex : list "ACCESS_IN_CONTROL_PANEL,CONFIGURATION,PERMISSIONS,PREFERENCES,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com_liferay_depot_web_portlet_DepotAdminPortlet",
				roleTitle = "Depot Regrole Name");
		}

		for (var resourceActionIndex : list "ASSIGN_MEMBERS,ASSIGN_USER_ROLES,DELETE,PERMISSIONS,UPDATE,VIEW,VIEW_MEMBERS,VIEW_SITE_ADMINISTRATION") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.depot.model.DepotEntry",
				roleTitle = "Depot Regrole Name");
		}

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea1@liferay.com",
			userLoginFullName = "userfn1 userln1");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Memberships");

		for (var i : list "1,2") {
			Depot.viewMember(
				userFirstName = "userfn${i}",
				userLastName = "userln${i}",
				userScreenName = "usersn${i}");
		}

		Click.waitForMenuToggleJSClick(
			key_card = "usersn1",
			locator1 = "Card#CARD_ELLIPSIS");

		for (var item : list "Remove Membership,Assign Roles") {
			AssertVisible(
				key_menuItem = "${item}",
				locator1 = "MenuItem#ANY_MENU_ITEM");
		}
	}

	@description = "This ensures that the user can only view memberships with view permissions."
	@priority = "5"
	@refactorneeded
	test AccessMembershipWithViewOnlyPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		Permissions.setUpRegRoleLoginUserCP(
			roleTitle = "Depot Regrole Name",
			userEmailAddress = "userea1@liferay.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Depot Regrole Name");

		for (var resourceActionIndex : list "ACCESS_IN_CONTROL_PANEL,CONFIGURATION,PERMISSIONS,PREFERENCES,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com_liferay_depot_web_portlet_DepotAdminPortlet",
				roleTitle = "Depot Regrole Name");
		}

		for (var resourceActionIndex : list "DELETE,PERMISSIONS,UPDATE,VIEW,VIEW_MEMBERS,VIEW_SITE_ADMINISTRATION") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.depot.model.DepotEntry",
				roleTitle = "Depot Regrole Name");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_site_memberships_web_portlet_SiteMembershipsPortlet",
			roleTitle = "Depot Regrole Name");

		JSONUser.addUserToDepot(
			depotName = "Test Depot Name",
			userEmailAddress = "userea1@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea1@liferay.com",
			userLoginFullName = "userfn1 userln1");

		DepotNavigator.openDepotMembershipsAdmin(depotName = "Test Depot Name");

		Depot.viewMember(
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1",
			viewOnly = "true");
	}

	@description = "This ensures that the user can only add web content to the depot that has permissions set."
	@priority = "5"
	@refactorneeded
	test AddWebContentPermissionWithinDepot {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name 2");

		JSONGroup.addGroup(groupName = "Site Name");

		Permissions.setUpRegRoleLoginUserCP(
			roleTitle = "Depot Regrole Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		Site.assignUserSitesCP(
			siteName = "Site Name",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_depot_web_portlet_DepotAdminPortlet",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.depot.model.DepotEntry",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_journal_web_portlet_JournalPortlet",
			roleTitle = "Depot Regrole Name");

		Role.definePermissionCP(
			assetLibrariesScope = "true",
			permissionDefinitionKey = "SITE_ADMIN_CONTENT_WEB_CONTENT_RESOURCE_PERMISSIONS_WEB_CONTENT_ADD_WEB_CONTENT_CHECKBOX",
			permissionDefinitionValue = "Add Web Content",
			roleTitle = "Depot Regrole Name",
			siteNameScope = "Test Depot Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		Pause(locator1 = "3000");

		LexiconEntry.gotoAdd();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name 2");

		AssertElementNotPresent(locator1 = "Button#PLUS");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		AssertElementNotPresent(locator1 = "Button#PLUS");
	}

	@description = "This ensures that assets can be added to the asset library folder Via DM widget on a connected site."
	@priority = "5"
	test CanAddFileInDMWidget {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property osgi.module.configuration.file.names = "com.liferay.document.library.item.selector.web.internal.configuration.FFFolderItemSelectorGroupSelectorConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "Depot Folder Name",
			groupName = "Test Depot Name");

		Navigator.openSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.enableActionsMenuOnPortlet();

		Navigator.openSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.setRootFolder(
			depotName = "Test Depot Name",
			dmRootFolderName = "Depot Folder Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.openSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.addPG(
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Title");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		DepotNavigator.openToDMFolder(
			depotName = "Test Depot Name",
			folderName = "Depot Folder Name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Title");
	}

	@description = "This ensures that an image can be added to asset library folder by a user with permissions via MG on a connected site."
	@priority = "5"
	test CanAddImageToFolderViaMG {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property osgi.module.configuration.file.names = "com.liferay.document.library.item.selector.web.internal.configuration.FFFolderItemSelectorGroupSelectorConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";

		var portalURL = PropsUtil.get("portal.url");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Media Gallery Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Media Gallery Page",
			widgetName = "Media Gallery");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Image Description",
			dmDocumentTitle = "Document_2.jpg",
			folderName = "DM Folder Name",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS",
			resourceName = "com.liferay.document.library.kernel.model.DLFolder",
			roleTitle = "User");

		DepotNavigator.openToDMFolder(
			depotName = "Test Depot Name",
			folderName = "DM Folder Name");

		DMNavigator.gotoDocumentPermissionsCP(dmDocumentTitle = "Document_2.jpg");

		PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
			addOrRemoveViewPermission = "Remove",
			roleList = "Guest");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		Navigator.openSitePage(
			pageName = "Media Gallery Page",
			siteName = "Site Name");

		MGPortlet.configureShowAllPG();

		Navigator.openSitePage(
			pageName = "Media Gallery Page",
			siteName = "Site Name");

		MGPortlet.setRootFolder(
			depotName = "Test Depot Name",
			dmRootFolderName = "DM Folder Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.openSpecificURL(url = "${portalURL}/web/site-name/media-gallery-page");

		DMDocument.viewPGViaMG(mgDocumentTitle = "Document_2.jpg");

		DMDocument.addPGViaMG(
			mgDocumentDescription = "Add an image to the folder of asset library",
			mgDocumentFile = "Document_1.jpg",
			mgDocumentTitle = "Document_1.jpg");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		DepotNavigator.openToDMFolder(
			depotName = "Test Depot Name",
			folderName = "DM Folder Name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "Document_1.jpg");

		DMDocument.viewCP(dmDocumentTitle = "Document_1.jpg");
	}

	@description = "This ensures that assets stored in the asset library folder can be deleted by a user with permissions Via DM widget on a connected site."
	@priority = "5"
	test CanDeleteFileInDMWidget {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property osgi.module.configuration.file.names = "com.liferay.document.library.item.selector.web.internal.configuration.FFFolderItemSelectorGroupSelectorConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "DELETE",
			resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS",
			resourceName = "com.liferay.document.library.kernel.model.DLFolder",
			roleTitle = "Regular Role");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "Depot Folder Name",
			groupName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			folderName = "Depot Folder Name",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		Navigator.openSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.enableActionsMenuOnPortlet();

		Navigator.openSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.setRootFolder(
			depotName = "Test Depot Name",
			dmRootFolderName = "Depot Folder Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.openSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.deletePG(dmDocumentTitle = "DM Document Title");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		DepotNavigator.openToDMFolder(
			depotName = "Test Depot Name",
			folderName = "Depot Folder Name");

		DMDocument.viewDefault();
	}

	@description = "This ensures that an image stored in asset library folder can be deleted by a user with permissions via MG on a connected site."
	@priority = "5"
	test CanDeleteImageInMG {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property osgi.module.configuration.file.names = "com.liferay.document.library.item.selector.web.internal.configuration.FFFolderItemSelectorGroupSelectorConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";

		var portalURL = PropsUtil.get("portal.url");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addRegularRole(
			roleKey = "Remove MG Role",
			roleTitle = "Remove MG Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
			roleTitle = "Remove MG Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "DELETE",
			resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
			roleTitle = "Remove MG Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS",
			resourceName = "com.liferay.document.library.kernel.model.DLFolder",
			roleTitle = "Remove MG Role");

		JSONRole.assignRoleToUser(
			roleTitle = "Remove MG Role",
			userEmailAddress = "userea@liferay.com");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Media Gallery Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Media Gallery Page",
			widgetName = "Media Gallery");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Image Description",
			dmDocumentTitle = "Document_2.jpg",
			folderName = "DM Folder Name",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		DepotNavigator.openToDMFolder(
			depotName = "Test Depot Name",
			folderName = "DM Folder Name");

		DMNavigator.gotoDocumentPermissionsCP(dmDocumentTitle = "Document_2.jpg");

		PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
			addOrRemoveViewPermission = "Remove",
			roleList = "Guest,User");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		Navigator.openSitePage(
			pageName = "Media Gallery Page",
			siteName = "Site Name");

		MGPortlet.configureShowAllPG();

		Navigator.openSitePage(
			pageName = "Media Gallery Page",
			siteName = "Site Name");

		MGPortlet.setRootFolder(
			depotName = "Test Depot Name",
			dmRootFolderName = "DM Folder Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.openSpecificURL(url = "${portalURL}/web/site-name/media-gallery-page");

		DMDocument.deletePGViaMG(mgDocumentTitle = "Document_2.jpg");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		DepotNavigator.openToDMFolder(
			depotName = "Test Depot Name",
			folderName = "DM Folder Name");

		DMDocument.viewDefault();
	}

	@description = "This ensures that assets stored in the asset library folder can be edited by a user with permissions Via DM widget on a connected site."
	@priority = "5"
	test CanEditFileInDMWidget {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property osgi.module.configuration.file.names = "com.liferay.document.library.item.selector.web.internal.configuration.FFFolderItemSelectorGroupSelectorConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "UPDATE",
			resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS",
			resourceName = "com.liferay.document.library.kernel.model.DLFolder",
			roleTitle = "Regular Role");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "Depot Folder Name",
			groupName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			folderName = "Depot Folder Name",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		Navigator.openSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.enableActionsMenuOnPortlet();

		Navigator.openSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.setRootFolder(
			depotName = "Test Depot Name",
			dmRootFolderName = "Depot Folder Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.openSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.editPG(
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		DepotNavigator.openToDMFolder(
			depotName = "Test Depot Name",
			folderName = "Depot Folder Name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title Edit");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Title Edit");
	}

	@description = "This ensures that an image stored in asset library folder can be edited by a user with permissions via MG on a connected site."
	@priority = "5"
	test CanEditImageInMG {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property osgi.module.configuration.file.names = "com.liferay.document.library.item.selector.web.internal.configuration.FFFolderItemSelectorGroupSelectorConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";

		var portalURL = PropsUtil.get("portal.url");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addRegularRole(
			roleKey = "Update MG Role",
			roleTitle = "Update MG Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
			roleTitle = "Update MG Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "UPDATE",
			resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
			roleTitle = "Update MG Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS",
			resourceName = "com.liferay.document.library.kernel.model.DLFolder",
			roleTitle = "Update MG Role");

		JSONRole.assignRoleToUser(
			roleTitle = "Update MG Role",
			userEmailAddress = "userea@liferay.com");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Media Gallery Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Media Gallery Page",
			widgetName = "Media Gallery");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Image Description",
			dmDocumentTitle = "Document_2.jpg",
			folderName = "DM Folder Name",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		DepotNavigator.openToDMFolder(
			depotName = "Test Depot Name",
			folderName = "DM Folder Name");

		DMNavigator.gotoDocumentPermissionsCP(dmDocumentTitle = "Document_2.jpg");

		PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
			addOrRemoveViewPermission = "Remove",
			roleList = "Guest,User");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		Navigator.openSitePage(
			pageName = "Media Gallery Page",
			siteName = "Site Name");

		MGPortlet.configureShowAllPG();

		Navigator.openSitePage(
			pageName = "Media Gallery Page",
			siteName = "Site Name");

		MGPortlet.setRootFolder(
			depotName = "Test Depot Name",
			dmRootFolderName = "DM Folder Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.openSpecificURL(url = "${portalURL}/web/site-name/media-gallery-page");

		DMDocument.editPGViaMG(
			mgDocumentDescription = "DM Image Description",
			mgDocumentDescriptionEdit = "DM Image Description Edit",
			mgDocumentTitle = "Document_2.jpg",
			mgDocumentTitleEdit = "DM Image Title Edit");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		DepotNavigator.openToDMFolder(
			depotName = "Test Depot Name",
			folderName = "DM Folder Name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Image Title Edit");

		DMDocument.viewCP(dmDocumentTitle = "DM Image Title Edit");
	}

	@description = "This ensures that assets stored in the asset library folder cannot be viewed without permissions Via DM on a connected site."
	@priority = "4"
	test CannotViewFileInDMWidgetWithoutPermission {
		property osgi.module.configuration.file.names = "com.liferay.document.library.item.selector.web.internal.configuration.FFFolderItemSelectorGroupSelectorConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";

		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "Depot Folder Name",
			groupName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			folderName = "Depot Folder Name",
			groupName = "Test Depot Name",
			guestPermissions = "false",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS",
			resourceName = "com.liferay.document.library.kernel.model.DLFolder",
			roleTitle = "Guest");

		Navigator.openSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.setRootFolder(
			depotName = "Test Depot Name",
			dmRootFolderName = "Depot Folder Name");

		User.logoutPG();

		Navigator.openSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.viewDefault();
	}

	@description = "This ensures that an image stored in asset library folder cannot be viewed by a guest without permissions via MG on a connected site."
	@priority = "4"
	test CannotViewImageInMGAsGuest {
		property osgi.module.configuration.file.names = "com.liferay.document.library.item.selector.web.internal.configuration.FFFolderItemSelectorGroupSelectorConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";

		var portalURL = PropsUtil.get("portal.url");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Media Gallery Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Media Gallery Page",
			widgetName = "Media Gallery");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Image Description",
			dmDocumentTitle = "Document_2.jpg",
			folderName = "DM Folder Name",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		DepotNavigator.openToDMFolder(
			depotName = "Test Depot Name",
			folderName = "DM Folder Name");

		DMNavigator.gotoDocumentPermissionsCP(dmDocumentTitle = "Document_2.jpg");

		PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
			addOrRemoveViewPermission = "Remove",
			roleList = "Guest");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		Navigator.openSitePage(
			pageName = "Media Gallery Page",
			siteName = "Site Name");

		MGPortlet.setRootFolder(
			depotName = "Test Depot Name",
			dmRootFolderName = "DM Folder Name");

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openSpecificURL(url = "${portalURL}/web/site-name/media-gallery-page");

		DMDocument.viewNoFilesViaMG(mgImagePreview = "Document_2.jpg");
	}

	@description = "This ensures that user can perform CRUD operations to depots with all permissions."
	@priority = "5"
	@refactorneeded
	test ConfigureRoleWithAllPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		Permissions.setUpRegRoleLoginUserCP(
			roleTitle = "Depot Regrole Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Depot Regrole Name");

		for (var resourceActionIndex : list "ACCESS_IN_CONTROL_PANEL,CONFIGURATION,PERMISSIONS,PREFERENCES,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com_liferay_depot_web_portlet_DepotAdminPortlet",
				roleTitle = "Depot Regrole Name");
		}

		for (var resourceActionIndex : list "ADD_DEPOT_ENTRY,PERMISSIONS") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.depot",
				roleTitle = "Depot Regrole Name");
		}

		for (var resourceActionIndex : list "ASSIGN_MEMBERS,ASSIGN_USER_ROLES,DELETE,PERMISSIONS,UPDATE,VIEW,VIEW_MEMBERS,VIEW_SITE_ADMINISTRATION") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.depot.model.DepotEntry",
				roleTitle = "Depot Regrole Name");
		}

		DepotNavigator.openDepotAdmin();

		AssertTextEquals(
			key_card = "Test Depot Name",
			locator1 = "Card#CARD_TITLE",
			value1 = "Test Depot Name");

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.openDepotLanguages(depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoEdit(depotName = "Test Depot Name");

		DepotNavigator.gotoSites(depotName = "Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.editDepot(
			depotDescriptionEdit = "This is an edited description of a depot",
			depotName = "Test Depot Name",
			depotNameEdit = "Edited Test Depot Name");

		DepotNavigator.openDepotAdmin();

		Depot.deleteCP(depotName = "Edited Test Depot Name");

		Depot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name 2");
	}

	@description = "This ensures that the user can only view depots with view permissions."
	@priority = "5"
	@refactorneeded
	test ConfigureRoleWithViewOnly {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		Permissions.setUpRegRoleLoginUserCP(
			roleTitle = "Depot Regrole Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_depot_web_portlet_DepotAdminPortlet",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.depot.model.DepotEntry",
			roleTitle = "Depot Regrole Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		DepotNavigator.openDepotAdmin();

		AssertTextEquals(
			key_card = "Test Depot Name",
			locator1 = "Card#CARD_TITLE",
			value1 = "Test Depot Name");

		AssertElementNotPresent(
			key_rowEntry = "Test Depot Name",
			locator1 = "Icon#ROW_VERTICAL_ELLIPSIS");

		AssertElementNotPresent(locator1 = "Button#PLUS");
	}

	@description = "This test covers LPS-120011. This ensures that no asset libraries be returned when a user without view permission searches the asset library."
	@priority = "4"
	@refactorneeded
	test SearchDepotWithoutViewPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "No View Permissions Depot Name");

		Permissions.setUpRegRoleLoginUserCP(
			roleTitle = "Depot Regrole Name",
			userEmailAddress = "userea1@liferay.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_depot_web_portlet_DepotAdminPortlet",
			roleTitle = "Depot Regrole Name");

		DepotNavigator.openDepotAdmin();

		PermissionsInline.gotoDepotEntry(depotName = "Test Depot Name");

		PermissionsInline.addOrRemoveAnyPermissionsFromSpecificRole(
			addOrRemoveViewPermission = "Add",
			permissionsKeyList = "INLINE_PERMISSIONS_VIEW_CHECKBOX",
			roleTitle = "Depot Regrole Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea1@liferay.com",
			userLoginFullName = "userfn1 userln1");

		DepotNavigator.openDepotAdmin();

		LexiconEntry.viewEntryName(rowEntry = "Test Depot Name");

		LexiconEntry.viewNoEntry(rowEntry = "No View Permissions Depot Name");

		Search.searchCP(searchTerm = "Depot");

		AssertTextEquals.assertPartialText(
			locator1 = "ManagementBar#SEARCH_RESULT_SUMMARY",
			value1 = "1 Result for &quot;Depot&quot;");

		Search.searchCP(searchTerm = "No View Permissions");

		AssertTextEquals.assertPartialText(
			locator1 = "ManagementBar#SEARCH_RESULT_SUMMARY",
			value1 = "0 Results for &quot;No View Permissions&quot;");
	}

	@description = "This ensures that able to select and deselect specific asset libraries scope from Collections permissions."
	@priority = "5"
	@refactorneeded
	test SelectAndDeselectScopeFromCollectionsPermissions {
		JSONRole.addRegularRole(roleTitle = "Depot Regrole Name");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCmdCP(
			assetLibrariesScope = "true",
			permissionDefinitionKey = "SITE_ADMIN_BUILDER_COLLECTIONS_ASSET_LIST_ENTRY_DELETE_CHECKBOX",
			permissionDefinitionValue = "Delete",
			roleTitle = "Depot Regrole Name",
			siteNameScope = "Test Depot Name");

		Role.viewPermissionCP(
			permissionDefinitionValue = "Delete",
			permissionNavigationValue = "Collections > Asset List Entry",
			siteNameScope = "Test Depot Name");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCmdCP(
			permissionDefinitionKey = "SITE_ADMIN_BUILDER_COLLECTIONS_ASSET_LIST_ENTRY_DELETE_CHECKBOX",
			removeSiteScope = "Test Depot Name",
			roleTitle = "Depot Regrole Name");

		Role.viewPermissionCP(
			permissionDefinitionValue = "Delete",
			permissionNavigationValue = "Collections > Asset List Entry",
			siteNameScope = "All Sites and Asset Libraries");
	}

	@description = "This ensures that able to select and deselect specific asset libraries scope from DM permissions."
	@priority = "5"
	@refactorneeded
	test SelectAndDeselectScopeFromDMPermissions {
		JSONRole.addRegularRole(roleTitle = "Depot Regrole Name");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCmdCP(
			assetLibrariesScope = "true",
			permissionDefinitionKey = "SITE_ADMIN_CONTENT_DOCUMENTS_AND_MEDIA_RESOURCE_PERMISSIONS_DOCUMENTS_ADD_DOCUMENT_CHECKBOX",
			permissionDefinitionValue = "Add Document",
			roleTitle = "Depot Regrole Name",
			siteNameScope = "Test Depot Name");

		Role.viewPermissionCP(
			permissionDefinitionValue = "Add Document",
			permissionNavigationValue = "Documents and Media > Documents",
			siteNameScope = "Test Depot Name");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCmdCP(
			permissionDefinitionKey = "SITE_ADMIN_CONTENT_DOCUMENTS_AND_MEDIA_RESOURCE_PERMISSIONS_DOCUMENTS_ADD_DOCUMENT_CHECKBOX",
			removeSiteScope = "Test Depot Name",
			roleTitle = "Depot Regrole Name");

		Role.viewPermissionCP(
			permissionDefinitionValue = "Add Document",
			permissionNavigationValue = "Documents and Media > Documents",
			siteNameScope = "All Sites and Asset Libraries");
	}

	@description = "This ensures that able to select and deselect specific asset libraries scope from WC permissions."
	@priority = "5"
	@refactorneeded
	test SelectAndDeselectScopeFromWCPermissions {
		JSONRole.addRegularRole(roleTitle = "Depot Regrole Name");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCmdCP(
			assetLibrariesScope = "true",
			permissionDefinitionKey = "SITE_ADMIN_CONTENT_WEB_CONTENT_GENERAL_PERMISSIONS_VIEW_CHECKBOX",
			permissionDefinitionValue = "View",
			roleTitle = "Depot Regrole Name",
			siteNameScope = "Test Depot Name");

		Role.viewPermissionCP(
			permissionDefinitionValue = "View",
			permissionNavigationValue = "Web Content",
			siteNameScope = "Test Depot Name");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCmdCP(
			permissionDefinitionKey = "SITE_ADMIN_CONTENT_WEB_CONTENT_GENERAL_PERMISSIONS_VIEW_CHECKBOX",
			removeSiteScope = "Test Depot Name",
			roleTitle = "Depot Regrole Name");

		Role.viewPermissionCP(
			permissionDefinitionValue = "View",
			permissionNavigationValue = "Web Content",
			siteNameScope = "All Sites and Asset Libraries");
	}

	@description = "This ensures that a site member without permissions cannot access a depot folder via DM widget on a connected site."
	@priority = "4"
	test SiteMemberCannotAccessFolderWithoutPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property osgi.module.configuration.file.names = "com.liferay.document.library.item.selector.web.internal.configuration.FFFolderItemSelectorGroupSelectorConfiguration.config";
		property osgi.module.configurations = "enabled=B&quot;true&quot;";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONUser.addUserToSite(
			groupName = "Site Name",
			userEmailAddress = "userea@liferay.com");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Documents and Media Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Documents and Media Page",
			widgetName = "Documents and Media");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "Depot Folder Name",
			groupName = "Test Depot Name");

		Navigator.openSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		DMDocument.setRootFolder(
			depotName = "Test Depot Name",
			dmRootFolderName = "Depot Folder Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.openSitePage(
			pageName = "Documents and Media Page",
			siteName = "Site Name");

		Alert.viewErrorMessage(errorMessage = "You do not have the required permissions");
	}

	@description = "This ensures that a document from depot cannot be accessed through Blogs on a connected site when a user doesn't have permissions."
	@priority = "5"
	@refactorneeded
	test ValidateDocumentCannotBeSelectedWithoutPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addRegularRole(roleTitle = "Depot Regrole Name");

		JSONRole.assignRoleToUser(
			roleTitle = "Depot Regrole Name",
			userEmailAddress = "userea@liferay.com");

		JSONGroup.addGroup(groupName = "Site Name");

		Site.openSiteMembershipsAdmin(siteURLKey = "site-name");

		Site.assignUserAsMemberCP(
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Depot Regrole Name");

		for (var resourceActionIndex : list "ACCESS_IN_CONTROL_PANEL,CONFIGURATION,PERMISSIONS,PREFERENCES,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com_liferay_depot_web_portlet_DepotAdminPortlet",
				roleTitle = "Depot Regrole Name");
		}

		for (var resourceActionIndex : list "ADD_DEPOT_ENTRY,PERMISSIONS") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.depot",
				roleTitle = "Depot Regrole Name");
		}

		for (var resourceActionIndex : list "ASSIGN_MEMBERS,ASSIGN_USER_ROLES,DELETE,PERMISSIONS,UPDATE,VIEW,VIEW_MEMBERS,VIEW_SITE_ADMINISTRATION") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.depot.model.DepotEntry",
				roleTitle = "Depot Regrole Name");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Depot Regrole Name");

		for (var resourceActionIndex : list "ACCESS_IN_CONTROL_PANEL,CONFIGURATION,PERMISSIONS,PREFERENCES,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com_liferay_blogs_web_portlet_BlogsAdminPortlet",
				roleTitle = "Depot Regrole Name");
		}

		for (var resourceActionIndex : list "ADD_ENTRY,PERMISSIONS,SUBSCRIBE") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.blogs",
				roleTitle = "Depot Regrole Name");
		}

		for (var resourceActionIndex : list "ADD_DISCUSSION,DELETE,DELETE_DISCUSSION,PERMISSIONS,UPDATE,UPDATE_DISCUSSION,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceActionIndex}",
				resourceName = "com.liferay.blogs.model.BlogsEntry",
				roleTitle = "Depot Regrole Name");
		}

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_2.jpg",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMNavigator.gotoDocumentPermissionsCP(dmDocumentTitle = "Document_2.jpg");

		PermissionsInline.addOrRemoveViewPermissionFromAllRoles(
			addOrRemoveViewPermission = "Remove",
			roleList = "Guest,User");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		BlogsNavigator.openToAddEntry(siteURLKey = "site-name");

		BlogsNavigator.gotoSelectFile();

		ItemSelector.selectRepositoryImage(
			depotName = "Test Depot Name",
			imageFileName = "Document_2.jpg",
			navTab = "Documents and Media",
			noViewPermission = "true");
	}

	@description = "This ensures that the permissions scope can be applied correctly for the depot."
	@priority = "5"
	@refactorneeded
	test ValidatePermissionsScope {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name2");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addRegularRole(roleTitle = "Depot Regrole Name");

		JSONRole.assignRoleToUser(
			roleTitle = "Depot Regrole Name",
			userEmailAddress = "userea@liferay.com");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_depot_web_portlet_DepotAdminPortlet",
			roleTitle = "Depot Regrole Name");

		for (var resourceAction : list "VIEW,VIEW_SITE_ADMINISTRATION") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.depot.model.DepotEntry",
				roleTitle = "Depot Regrole Name");
		}

		Role.openRolesAdmin();

		Role.definePermissionCmdCP(
			assetLibrariesScope = "true",
			permissionDefinitionKey = "SITE_ADMIN_CONTENT_DOCUMENTS_AND_MEDIA_GENERAL_PERMISSIONS_ACCESS_IN_SITE_ADMINISTRATION_CHECKBOX",
			permissionDefinitionValue = "Access in Site and Asset Library Administration",
			roleTitle = "Depot Regrole Name",
			siteNameScope = "Test Depot Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		DepotNavigator.openDepotDashboard(depotName = "Test Depot Name");

		AssertTextEquals(
			key_card = "Documents and Media",
			locator1 = "Card#CARD_TITLE",
			value1 = "Documents and Media");

		DepotNavigator.openDepotDashboard(depotName = "Test Depot Name2");

		AssertTextEquals(
			locator1 = "Message#INFO",
			value1 = "Info:You do not have access to any applications in this asset library.");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Role.openRolesAdmin();

		Role.definePermissionCmdCP(
			permissionDefinitionKey = "SITE_ADMIN_CONTENT_DOCUMENTS_AND_MEDIA_GENERAL_PERMISSIONS_ACCESS_IN_SITE_ADMINISTRATION_CHECKBOX",
			removeSiteScope = "Test Depot Name",
			roleTitle = "Depot Regrole Name");

		Role.openRolesAdmin();

		Role.definePermissionCmdCP(
			assetLibrariesScope = "true",
			permissionDefinitionKey = "SITE_ADMIN_CONTENT_DOCUMENTS_AND_MEDIA_GENERAL_PERMISSIONS_ACCESS_IN_SITE_ADMINISTRATION_CHECKBOX",
			permissionDefinitionValue = "Access in Site and Asset Library Administration",
			roleTitle = "Depot Regrole Name",
			siteNameScope = "Test Depot Name2");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		DepotNavigator.openDepotDashboard(depotName = "Test Depot Name");

		AssertTextEquals(
			locator1 = "Message#INFO",
			value1 = "Info:You do not have access to any applications in this asset library.");

		DepotNavigator.openDepotDashboard(depotName = "Test Depot Name2");

		AssertTextEquals(
			key_card = "Documents and Media",
			locator1 = "Card#CARD_TITLE",
			value1 = "Documents and Media");
	}

	@description = "This test covers LPS-119994. It ensures that the user with access application permission can view the depot dashboard."
	@priority = "4"
	@refactorneeded
	test ViewDashBoardWithAccessApplicationPermissions {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addRegularRole(roleTitle = "Depot Regrole Name");

		JSONRole.assignRoleToUser(
			roleTitle = "Depot Regrole Name",
			userEmailAddress = "userea@liferay.com");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_depot_web_portlet_DepotAdminPortlet",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.depot.model.DepotEntry",
			roleTitle = "Depot Regrole Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(
			depotName = "Test Depot Name",
			noViewApplicationPermission = "true");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		for (var resourceName : list "com_liferay_journal_web_portlet_JournalPortlet,com_liferay_document_library_web_portlet_DLAdminPortlet,com_liferay_asset_list_web_portlet_AssetListPortlet,com_liferay_asset_categories_admin_web_portlet_AssetCategoriesAdminPortlet,com_liferay_asset_tags_admin_web_portlet_AssetTagsAdminPortlet,com_liferay_trash_web_portlet_TrashPortlet,com_liferay_site_memberships_web_portlet_SiteMembershipsPortlet,com_liferay_depot_web_portlet_DepotSettingsPortlet,com_liferay_portal_workflow_web_internal_portlet_SiteAdministrationWorkflowPortlet,com_liferay_exportimport_web_portlet_ExportPortlet,com_liferay_exportimport_web_portlet_ImportPortlet") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "${resourceName}",
				roleTitle = "Depot Regrole Name");
		}

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Test Depot Name");
	}

	@description = "This ensures that the user can view documents on site and library with all sites and libraries scope view permissions."
	@priority = "5"
	@refactorneeded
	test ViewDocumentOnSiteAndLibrary {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Depot DM Document Title",
			groupName = "Test Depot Name");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Site DM Document Title",
			groupName = "Site Name");

		Permissions.setUpRegRoleLoginUserCP(
			roleTitle = "Depot Regrole Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		Site.assignUserSitesCP(
			siteName = "Site Name",
			userScreenName = "usersn");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_depot_web_portlet_DepotAdminPortlet",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.depot.model.DepotEntry",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.depot.model.DepotEntry",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_SITE_ADMINISTRATION",
			resourceName = "com.liferay.portal.kernel.model.Group",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.document.library.kernel.model.DLFileEntry",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.document.library",
			roleTitle = "Depot Regrole Name");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_document_library_web_portlet_DLAdminPortlet",
			roleTitle = "Depot Regrole Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		DMNavigator.openToEntryInAdmin(
			dmDocumentTitle = "Site DM Document Title",
			groupName = "Site Name",
			siteURLKey = "site-name");

		DMDocument.viewCP(dmDocumentTitle = "Site DM Document Title");

		DepotNavigator.openToDMEntryInDepot(
			depotName = "Test Depot Name",
			dmDocumentTitle = "Depot DM Document Title");

		DMDocument.viewCP(dmDocumentTitle = "Depot DM Document Title");
	}

	@description = "This ensures that the unsupported application can not select a depot as the scope of the permission."
	@priority = "5"
	@refactorneeded
	test ViewScopeFromUnsupportedApplicationPermissions {
		JSONRole.addRegularRole(roleTitle = "Depot Regrole Name");

		Role.openRolesAdmin();

		RoleNavigator.gotoDefineRolePermissions(
			permissionNavigationKey = "SITE_ADMIN_CONTENT_BLOGS",
			portlet = "Blogs",
			roleTitle = "Depot Regrole Name");

		AssertClick(
			locator1 = "RolesPermissions#SITE_ADMIN_CONTENT_BLOGS_RESOURCE_PERMISSIONS_BLOGS_ENTRY_VIEW_CHANGE_LINK",
			value1 = "Change");

		SelectFrame(locator1 = "RolesPermissionsSelectSite#SELECT_SITE_IFRAME");

		AssertVisible(
			locator1 = "NavBar#RECENT",
			value1 = "Recent");

		AssertVisible(
			locator1 = "NavBar#MY_SITES",
			value1 = "My Sites");

		AssertElementNotPresent(
			locator1 = "NavBar#ASSET_LIBRARIES",
			value1 = "Asset Libraries");
	}

}