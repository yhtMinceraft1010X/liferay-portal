@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");

			Site.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This ensures that a manual collection in a depot can be published in the site through the Asset Publisher for local staging."
	@e2e
	@priority = "5"
	@refactordone
	test CanBePublishedViaLocalStaging {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepot(depotName = "Test Depot Name");

		DepotNavigator.gotoPortlet(portlet = "Staging");

		Depot.activateStaging(depotName = "Test Depot Name");

		JSONStaging.enableLocalStaging(groupName = "Site Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document Title",
			groupName = "Test Depot Name-staging",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DepotNavigator.openDepotAssetListsAdminStaging(depotName = "Test Depot Name");

		AssetListsAdmin.addManualSelection(assetListTitle = "Depot Manual Asset List");

		DepotNavigator.openDepotAssetListsAdminStaging(depotName = "Test Depot Name");

		AssetListsAdmin.selectAsset(
			assetListName = "Depot Manual Asset List",
			assetName = "Document Title",
			assetType = "Basic Document",
			itemSubtype = "Basic Document",
			itemType = "Document");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive();

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name (Staging)",
			layoutName = "Test Page",
			site = "false",
			widgetName = "Asset Publisher");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssetPublisherPortlet.selectAssetList(
			assetListName = "Depot Manual Asset List",
			depotName = "Test Depot Name");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(assetTitle = "Document Title");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(assetTitle = "Document Title");
	}

	@description = "This ensures that a manual collection in a depot can be published in the site through the Asset Publisher for remote staging."
	@e2e
	@priority = "5"
	@refactordone
	test CanBePublishedViaRemoteStaging {
		property app.server.bundles.size = "1";
		property custom.properties = "tunneling.servlet.shared.secret=1234567890123456${line.separator}auth.verifier.TunnelAuthVerifier.hosts.allowed=";
		property databases.size = "1";
		property minimum.slave.ram = "24";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "DepotCollections#CanBePublishedViaRemoteStaging";

		Depot.remoteStagingSetUp(
			depotName = "Test Depot Name",
			remotePort = "9080",
			remoteStaging = "true");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page");

		Staging.remoteStagingSetUpViaJson(
			groupName = "Site Name",
			remotePort = "9080");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document Title",
			groupName = "Test Depot Name",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.addManualSelection(assetListTitle = "Depot Manual Asset List");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.selectAsset(
			assetListName = "Depot Manual Asset List",
			assetName = "Document Title",
			assetType = "Basic Document",
			itemSubtype = "Basic Document",
			itemType = "Document");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		DepotNavigator.switchStagingStatus(stagingItem = "Publish to Live");

		Staging.publishToLive(remoteStaging = "true");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page",
			widgetName = "Asset Publisher");

		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Asset Publisher");

		AssetPublisherPortlet.selectAssetList(
			assetListName = "Depot Manual Asset List",
			depotName = "Test Depot Name");

		Navigator.openSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(assetTitle = "Document Title");

		Staging.gotoPublishToLive();

		Staging.publishToLive(remoteStaging = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Navigator.openSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Test Page",
			siteName = "Remote Site");

		AssetPublisherPortlet.viewAssetPG(assetTitle = "Document Title");

		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.deleteAllCP();
	}

	@description = "This ensures that the scope can be changed through dynamic selection in a depot."
	@e2e
	@priority = "5"
	@refactordone
	test CanChangeScope {
		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC Depot Title");

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name",
			title = "WC Site Title");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.addDynamicSelection(assetListTitle = "Depot Dynamic Asset List");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.configureScope(
			assetListTitle = "Depot Dynamic Asset List",
			otherSite = "Test Site Name",
			selectedAsset = "All Types");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.removeScope(
			assetListTitle = "Depot Dynamic Asset List",
			scopeName = "Current Asset Library");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.viewContent(
			assetListTitle = "Depot Dynamic Asset List",
			assetTitle = "WC Site Title",
			assetType = "Web Content Article");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.viewNoContent(
			assetListTitle = "Depot Dynamic Asset List",
			assetTitle = "WC Depot Title",
			assetType = "Web Content Article");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.configureScope(
			assetListTitle = "Depot Dynamic Asset List",
			defaultSite = "Current Asset Library (Test Depot Name)");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.removeScope(
			assetListTitle = "Depot Dynamic Asset List",
			scopeName = "Test Site Name");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.viewContent(
			assetListTitle = "Depot Dynamic Asset List",
			assetTitle = "WC Depot Title",
			assetType = "Web Content Article");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.viewNoContent(
			assetListTitle = "Depot Dynamic Asset List",
			assetTitle = "WC Site Title",
			assetType = "Web Content Article");
	}

	@description = "This ensures that collections from a site can select the basic web content stored in a depot."
	@priority = "5"
	@refactordone
	test CanCreateCollectionOnSiteUsingDepotWC {
		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC WebContent Title");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Asset Publisher Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Asset Publisher Page",
			widgetName = "Asset Publisher");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		JSONAssetlist.addManualAssetListEntryWithItemType(
			groupName = "Site Name",
			itemSubtype = "Basic Web Content",
			itemType = "Web Content Article",
			title = "Site Manual Asset List");

		AssetListsAdmin.openAssetListsAdmin(siteURLKey = "site-name");

		AssetListsAdmin.selectAsset(
			assetListName = "Site Manual Asset List",
			assetName = "WC WebContent Title",
			assetType = "Basic Web Content",
			depotName = "Test Depot Name");

		Navigator.openSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name");

		AssetPublisherPortlet.selectAssetList(assetListName = "Site Manual Asset List");

		Navigator.openSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(assetTitle = "WC WebContent Title");
	}

	@description = "This ensures that the image is displayed by AP through Collections in a depot."
	@e2e
	@priority = "5"
	@refactordone
	test CanDisplayImageInAP {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document Title",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpeg");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.addManualSelection(
			assetListTitle = "Depot Manual Asset List",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.viewAssetList(
			assetListTitle = "Depot Manual Asset List",
			type = "Manual");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.selectAsset(
			assetListName = "Depot Manual Asset List",
			assetName = "Document Title",
			assetType = "Basic Document",
			itemSubtype = "Basic Document",
			itemType = "Document");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Asset Publisher Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Asset Publisher Page",
			widgetName = "Asset Publisher");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		Navigator.openSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name");

		AssetPublisherPortlet.selectAssetList(
			assetListName = "Depot Manual Asset List",
			depotName = "Test Depot Name");

		Navigator.openSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(assetTitle = "Document Title");
	}

	@description = "This ensures that tagged the web content is displayed by AP through dynamic selection in a depot."
	@e2e
	@priority = "5"
	@refactordone
	test CanDisplayWCWithTagInAP {
		for (var i : list "1,2") {
			JSONWebcontent.addWebContent(
				assetTagNames = "tag${i}",
				content = "Web Content Content",
				groupName = "Test Depot Name",
				site = "false",
				title = "Web Content Title${i}");
		}

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.addDynamicSelection(
			assetListTitle = "Depot Dynamic Asset List",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.viewAssetList(
			assetListTitle = "Depot Dynamic Asset List",
			type = "Dynamic");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.editAssetList(assetListTitle = "Depot Dynamic Asset List");

		AssetListsAdmin.configureItemTypeInDynamicCollection(
			itemSubtype = "All Subtypes",
			itemType = "Web Content Article");

		AssetListsAdmin.addTagsFilter(tagNameList = "tag1");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Asset Publisher Page");

		JSONLayout.addWidgetToPublicLayout(
			column = "1",
			groupName = "Site Name",
			layoutName = "Asset Publisher Page",
			widgetName = "Asset Publisher");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		Navigator.openSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name");

		AssetPublisherPortlet.selectAssetList(
			assetListName = "Depot Dynamic Asset List",
			depotName = "Test Depot Name");

		Navigator.openSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name");

		AssetPublisherPortlet.viewAssetPG(assetTitle = "Web Content Title1");

		AssetPublisherPortlet.viewAssetNotPresentPG(assetTitle = "Web Content Title2");
	}

	@description = "This ensures that images are excluded with the dynamic selection that does not contain the keyword "Image" in a depot."
	@priority = "5"
	@refactordone
	test CanExcludeImagesDynamically {
		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		for (var i : list "1,2") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Text Title ${i}",
				groupName = "Test Depot Name",
				mimeType = "application/msword",
				sourceFileName = "Document_${i}.doc");
		}

		for (var i : list "1,2") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "Document Image Title ${i}",
				groupName = "Test Depot Name",
				mimeType = "image/png",
				sourceFileName = "Document_${i}.png");
		}

		JSONAssetlist.addDynamicAssetListEntry(
			groupName = "Test Depot Name",
			site = "false",
			title = "Depot Dynamic Asset List");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.gotoEntry(assetListName = "Depot Dynamic Asset List");

		AssetListsAdmin.addKeywordsFilter(
			keyWords = "Image",
			queryAndOperator = "Any",
			queryContains = "Does Not Contain");

		for (var i : list "1,2") {
			DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

			AssetListsAdmin.viewContent(
				assetListTitle = "Depot Dynamic Asset List",
				assetTitle = "Document Text Title ${i}",
				assetType = "Document");
		}

		for (var i : list "1,2") {
			DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

			AssetListsAdmin.viewNoContent(
				assetListTitle = "Depot Dynamic Asset List",
				assetTitle = "Document Image Title ${i}",
				assetType = "Document");
		}
	}

	@description = "This ensures that the asset types will not be displayed when disabling the applications."
	@priority = "5"
	@refactordone
	test CanNotDisplayDisabledApplications {
		JSONAssetlist.addDynamicAssetListEntry(
			groupName = "Test Depot Name",
			site = "false",
			title = "Depot Dynamic Asset List");

		JSONAssetlist.addManualAssetListEntry(
			groupName = "Test Depot Name",
			site = "false",
			title = "Depot Manual Asset List");

		DepotNavigator.openDepotSettingsGeneral(depotName = "Test Depot Name");

		Depot.configureApplication(
			applicationList = "Documents and Media",
			status = "Disabled");

		DepotNavigator.openDepotWebContentStructuresAdmin(depotName = "Test Depot Name");

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.viewAssetTypeList(
			assetListName = "Depot Manual Asset List",
			assetType = "Web Content Folder,Basic Web Content,WC Structure Name",
			itemType = "All Types",
			manualSelection = "true");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.viewNoAssetType(
			assetListName = "Depot Manual Asset List",
			assetType = "Document,Documents Folder",
			manualSelection = "true");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.viewAssetTypeList(
			assetListName = "Depot Dynamic Asset List",
			assetType = "Web Content Folder,Web Content Article",
			dynamicSelection = "true");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.viewNoAssetType(
			assetListName = "Depot Dynamic Asset List",
			assetType = "Document,Documents Folder",
			dynamicSelection = "true");

		DepotNavigator.openDepotSettingsGeneral(depotName = "Test Depot Name");

		Depot.configureApplication(
			applicationList = "Web Content",
			status = "Disabled");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.viewNoAssetType(
			allAssetsDisabled = "true",
			assetListName = "Depot Manual Asset List",
			manualSelection = "true");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.viewNoAssetType(
			assetListName = "Depot Dynamic Asset List",
			assetType = "Document,Documents Folder,Web Content Article,Web Content Folder",
			dynamicSelection = "true");
	}

	@description = "This ensures that user can not select the collection in depot after disabling Collections."
	@priority = "5"
	@refactordone
	test CanNotSelectAfterDisablingCollections {
		JSONAssetlist.addManualAssetListEntry(
			groupName = "Test Depot Name",
			site = "false",
			title = "Depot Manual Asset List");

		JSONGroup.addGroup(groupName = "Site Name");

		JSONDepot.connectSite(
			depotName = "Test Depot Name",
			groupName = "Site Name");

		DepotNavigator.openDepotSettingsGeneral(depotName = "Test Depot Name");

		Depot.configureApplication(
			applicationList = "Collections",
			status = "Disabled");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Asset Publisher Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Asset Publisher Page",
			widgetName = "Asset Publisher");

		Navigator.openSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name");

		AssetPublisherPortlet.selectAssetList(
			collectionsDisable = "true",
			depotName = "Test Depot Name");
	}

	@description = "This ensures that the asset can be removed in Collections."
	@priority = "4"
	@refactordone
	test CanRemoveSelectedAsset {
		for (var i : list "1,2,3") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Depot Name",
				site = "false",
				title = "WC WebContent Title ${i}");
		}

		JSONAssetlist.addManualAssetListEntryWithItemType(
			groupName = "Test Depot Name",
			itemSubtype = "Basic Web Content",
			itemType = "Web Content Article",
			site = "false",
			title = "Depot Manual Asset List");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.viewAssetList(
			assetListTitle = "Depot Manual Asset List",
			type = "Manual");

		for (var i : list "1,2,3") {
			DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

			AssetListsAdmin.selectAsset(
				assetListName = "Depot Manual Asset List",
				assetName = "WC WebContent Title ${i}",
				assetType = "Basic Web Content");
		}

		AssetListsAdmin.deleteManualSelectionAssets(assetsList = "WC WebContent Title 2");

		for (var i : list "1,3") {
			DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

			AssetListsAdmin.viewContent(
				assetListTitle = "Depot Manual Asset List",
				assetTitle = "WC WebContent Title ${i}",
				assetType = "Web Content Article");
		}

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.viewNoContent(
			assetListTitle = "Depot Manual Asset List",
			assetTitle = "WC WebContent Title 2",
			assetType = "Web Content Article");
	}

	@description = "This ensures that an image can be selected from other site scope through dynamic selection that does not contain the keyword."
	@priority = "5"
	@refactordone
	test CanSelectDMFromOtherScopeDynamically {
		JSONGroup.addGroup(groupName = "Test Site Name");

		for (var scope : list "Depot,Site") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Doc ${scope} Title",
				groupName = "Test ${scope} Name",
				mimeType = "application/msword",
				sourceFileName = "Document_1.doc");
		}

		for (var scope : list "Depot,Site") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Image Description",
				dmDocumentTitle = "DM Image ${scope} Title",
				groupName = "Test ${scope} Name",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpeg");
		}

		JSONAssetlist.addDynamicAssetListEntry(
			groupName = "Test Depot Name",
			site = "false",
			title = "Depot Dynamic Asset List");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.configureScope(
			assetListTitle = "Depot Dynamic Asset List",
			otherSite = "Test Site Name",
			selectedAsset = "All Types");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.editAssetList(assetListTitle = "Depot Dynamic Asset List");

		AssetListsAdmin.addKeywordsFilter(
			keyWords = "Doc",
			queryAndOperator = "Any",
			queryContains = "Does Not Contain");

		for (var assetTitle : list "DM Image Depot Title,DM Image Site Title") {
			DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

			AssetListsAdmin.viewContent(
				assetListTitle = "Depot Dynamic Asset List",
				assetTitle = "${assetTitle}",
				assetType = "Document");
		}

		for (var assetTitle : list "DM Doc Depot Title,DM Doc Site Title") {
			DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

			AssetListsAdmin.viewNoContent(
				assetListTitle = "Depot Dynamic Asset List",
				assetTitle = "${assetTitle}",
				assetType = "Document");
		}
	}

	@description = "This ensures that the documents with document type can be selected through Collections in a depot."
	@priority = "5"
	@refactordone
	test CanSelectDocumentsWithTypeManually {
		for (var i : list "1,2") {
			DepotNavigator.openDepotDocumentTypeAdmin(depotName = "Test Depot Name");

			DMDocumentType.add(
				dmDocumentTypeDescription = "DM Document Type Description",
				dmDocumentTypeFieldNames = "Text",
				dmDocumentTypeName = "DM Document Type Name ${i}");
		}

		for (var i : list "1,2") {
			DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title ${i}",
				dmDocumentTypeName = "DM Document Type Name 2");
		}

		JSONAssetlist.addManualAssetListEntryWithItemType(
			groupName = "Test Depot Name",
			itemType = "All Types",
			site = "false",
			title = "Depot Manual Asset List");

		for (var i : list "1,2") {
			DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

			AssetListsAdmin.selectAsset(
				assetListName = "Depot Manual Asset List",
				assetName = "DM Document Title ${i}",
				assetType = "DM Document Type Name 2",
				itemSubtype = "DM Document Type Name 2",
				itemType = "Document");
		}

		for (var documentName : list "DM Document Title 1,DM Document Title 2") {
			DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

			AssetListsAdmin.viewContent(
				assetListTitle = "Depot Manual Asset List",
				assetTitle = "${documentName}",
				assetType = "Document");
		}
	}

	@description = "This ensures that multiple documents can be selected through Collections in a depot."
	@priority = "5"
	@refactordone
	test CanSelectMultipleDMManually {
		for (var documentName : list "Document_1.doc,Document_2.jpg,Document_3.txt") {
			var extension = StringUtil.extractLast("${documentName}", ".");

			if ("${extension}" == "doc") {
				var mimeType = "application/msword";
			}
			else if ("${extension}" == "jpg") {
				var mimeType = "image/jpg";
			}
			else if ("${extension}" == "txt") {
				var mimeType = "text/plain";
			}

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "${documentName}",
				groupName = "Test Depot Name",
				mimeType = "${mimeType}",
				sourceFileName = "${documentName}");
		}

		JSONAssetlist.addManualAssetListEntryWithItemType(
			groupName = "Test Depot Name",
			itemSubtype = "Basic Document",
			itemType = "Document",
			site = "false",
			title = "Depot Manual Asset List");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.viewAssetList(
			assetListTitle = "Depot Manual Asset List",
			type = "Manual");

		for (var documentName : list "Document_1.doc,Document_2.jpg,Document_3.txt") {
			DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

			AssetListsAdmin.selectAsset(
				assetListName = "Depot Manual Asset List",
				assetName = "${documentName}",
				assetType = "Basic Document");
		}

		for (var documentName : list "Document_1.doc,Document_2.jpg,Document_3.txt") {
			DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

			AssetListsAdmin.viewContent(
				assetListTitle = "Depot Manual Asset List",
				assetTitle = "${documentName}",
				assetType = "Document");
		}
	}

	@description = "This ensures that multiple web content can be selected through Collections in a depot."
	@priority = "5"
	@refactordone
	test CanSelectMultipleWCManually {
		for (var i : list "1,2,3") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Depot Name",
				site = "false",
				title = "WC WebContent Title ${i}");
		}

		JSONAssetlist.addManualAssetListEntryWithItemType(
			groupName = "Test Depot Name",
			itemSubtype = "Basic Web Content",
			itemType = "Web Content Article",
			site = "false",
			title = "Depot Manual Asset List");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.viewAssetList(
			assetListTitle = "Depot Manual Asset List",
			type = "Manual");

		for (var i : list "1,3") {
			DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

			AssetListsAdmin.selectAsset(
				assetListName = "Depot Manual Asset List",
				assetName = "WC WebContent Title ${i}",
				assetType = "Basic Web Content");
		}

		for (var i : list "1,3") {
			DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

			AssetListsAdmin.viewContent(
				assetListTitle = "Depot Manual Asset List",
				assetTitle = "WC WebContent Title ${i}",
				assetType = "Web Content Article");
		}
	}

	@description = "This ensures that only web contents configured to show with dynamic selection are displayed in a depot."
	@priority = "4"
	@refactordone
	test CanSelectOnlyWCDynamically {
		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document Title",
			groupName = "Test Depot Name",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		for (var i : list "1,2,3") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Depot Name",
				site = "false",
				title = "WC WebContent Title ${i}");
		}

		JSONAssetlist.addDynamicAssetListEntryWithItemType(
			groupName = "Test Depot Name",
			itemType = "All Types",
			site = "false",
			title = "Depot Dynamic Asset List");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.editAssetList(assetListTitle = "Depot Dynamic Asset List");

		AssetListsAdmin.configureItemTypeInDynamicCollection(
			itemSubtype = "All Subtypes",
			itemType = "Web Content Article");

		for (var i : list "1,2,3") {
			DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

			AssetListsAdmin.viewContent(
				assetListTitle = "Depot Dynamic Asset List",
				assetTitle = "WC WebContent Title ${i}",
				assetType = "Web Content Article");
		}

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.viewNoContent(
			assetListTitle = "Depot Dynamic Asset List",
			assetTitle = "Document Title",
			assetType = "Document");
	}

	@description = "This ensures that web contents from all the scopes can be selected through dynamic selection in a depot."
	@priority = "4"
	@refactordone
	test CanSelectWCFromAllScopesDynamically {
		for (var i : list "1,2") {
			JSONGroup.addGroup(groupName = "Test Site Name ${i}");
		}

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC WebContent Title 1");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name 1",
			title = "WC WebContent Title 2");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Site Name 2",
			title = "WC WebContent Title 3");

		JSONAssetlist.addDynamicAssetListEntry(
			groupName = "Test Depot Name",
			site = "false",
			title = "Depot Dynamic Asset List");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.configureScope(
			assetListTitle = "Depot Dynamic Asset List",
			otherSite = "Test Site Name 1",
			selectedAsset = "All Types");

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.configureScope(
			assetListTitle = "Depot Dynamic Asset List",
			otherSite = "Test Site Name 2");

		for (var i : list "1,2,3") {
			DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

			AssetListsAdmin.viewContent(
				assetListTitle = "Depot Dynamic Asset List",
				assetTitle = "WC WebContent Title ${i}",
				assetType = "Web Content Article");
		}
	}

	@description = "This ensures that the web content created by the structure can be selected via searching for the corresponding structure name."
	@e2e
	@priority = "5"
	@refactordone
	test CanSelectWCWithStructure {
		DepotNavigator.openDepotWebContentStructuresAdmin(depotName = "Test Depot Name");

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		for (var i : list "1,2") {
			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				webContentText = "WC WebContent Text ${i}",
				webContentTitle = "WC WebContent Title ${i}");

			PortletEntry.publish();
		}

		DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

		AssetListsAdmin.addManualSelection(assetListTitle = "Depot Manual Asset List");

		for (var i : list "1,2") {
			DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

			AssetListsAdmin.selectAsset(
				assetListName = "Depot Manual Asset List",
				assetName = "WC WebContent Title ${i}",
				assetType = "WC Structure Name",
				itemSubtype = "WC Structure Name",
				itemType = "Web Content Article");
		}

		for (var i : list "1,2") {
			DepotNavigator.openDepotAssetListsAdmin(depotName = "Test Depot Name");

			AssetListsAdmin.viewContent(
				assetListTitle = "Depot Manual Asset List",
				assetTitle = "WC WebContent Title ${i}",
				assetType = "Web Content Article");
		}
	}

}