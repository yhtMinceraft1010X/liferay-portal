@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");

			Site.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This ensures that a web content folder can be deleted in a depot."
	@priority = "4"
	@refactordone
	test CanDeleteFolder {
		JSONWebcontent.addFolder(
			folderName = "WC Folder Name",
			groupName = "Test Depot Name",
			site = "false");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		WebContentFolder.moveToRecycleBinCP(
			assetType = "Web Content Folder",
			folderName = "WC Folder Name");
	}

	@description = "This test deletes multiple web content in a depot."
	@priority = "5"
	@refactordone
	test CanDeleteMultipleWebContent {
		for (var i : list "1,2,3") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Test Depot Name",
				site = "false",
				title = "WC WebContent Title ${i}");
		}

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		PortletEntry.selectAll();

		ClickNoError(locator1 = "Icon#DELETE");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No web content was found.");
	}

	@description = "This test deletes template and structure in a depot."
	@priority = "5"
	@refactordone
	test CanDeleteTemplateAndStructure {
		DepotNavigator.openDepotWebContentStructuresAdmin(depotName = "Test Depot Name");

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		DepotNavigator.openDepotWebContentTemplatesAdmin(depotName = "Test Depot Name");

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		DepotNavigator.openDepotWebContentTemplatesAdmin(depotName = "Test Depot Name");

		WebContentTemplates.deleteCP(templateName = "WC Template Name");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no templates.");

		DepotNavigator.openDepotWebContentStructuresAdmin(depotName = "Test Depot Name");

		WebContentStructures.deleteCP(structureName = "WC Structure Name");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no structures.");
	}

	@description = "This ensures that a web content folder can be edited in a depot."
	@e2e
	@priority = "3"
	@refactordone
	test CanEditFolder {
		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		WebContentFolder.addCP(
			folderDescription = "WC Folder Description",
			folderName = "WC Folder Name");

		WebContentNavigator.gotoEntryMenuItem(
			entry = "WC Folder Name",
			menuItem = "Edit");

		PortletEntry.inputName(name = "WC Folder Name Edit");

		PortletEntry.save();

		AssertTextEquals.assertPartialText(
			key_webContentTitle = "WC Folder Name Edit",
			locator1 = "WC#ENTRY_LIST_TITLE",
			value1 = "WC Folder Name Edit");
	}

	@description = "This test edits template and structure in a depot."
	@priority = "5"
	@refactordone
	test CanEditTemplateAndStructure {
		DepotNavigator.openDepotWebContentStructuresAdmin(depotName = "Test Depot Name");

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		DepotNavigator.openDepotWebContentTemplatesAdmin(depotName = "Test Depot Name");

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		DepotNavigator.openDepotWebContentTemplatesAdmin(depotName = "Test Depot Name");

		WebContentTemplates.modifyTemplate(
			templateDescription = "WC Template Description Edited",
			templateName = "WC Template Name Edited",
			templatePreviousName = "WC Template Name");

		LexiconCard.viewCardTitle(card = "WC Template Name Edited");

		NavItem.gotoStructures();

		WebContentStructures.editStructureDefaultValuesCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(webContentText = "Edited Text Field");

		PortletEntry.save();

		DepotNavigator.openDepotWebContentStructuresAdmin(depotName = "Test Depot Name");

		WebContentStructures.editStructureDefaultValuesCP(structureName = "WC Structure Name");

		AssertTextEquals.assertValue(
			key_fieldFieldLabel = "Text",
			locator1 = "WCEditWebContent#TEXT_INPUT",
			value1 = "Edited Text Field");
	}

	@description = "This ensures that a web content can be edited in a depot."
	@e2e
	@priority = "5"
	@refactordone
	test CanEditWebContent {
		property portal.acceptance = "true";

		DepotNavigator.openDepotAdmin();

		DepotNavigator.gotoDepotPortlet(
			depotName = "Test Depot Name",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		Depot.viewNoPanel(panelName = "Display Page");

		PortletEntry.publish();

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edit");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title Edit");

		WebContent.viewCP(
			displayPageTemplateDisabled = "true",
			webContentContent = "WC WebContent Content Edit",
			webContentTitle = "WC WebContent Title Edit");
	}

	@description = "This ensures that a web content can be expired in a depot."
	@priority = "3"
	@refactordone
	test CanExpireWebContent {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Expire WC Depot");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Expire WC Depot",
			site = "false",
			title = "WC WebContent Title");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Expire WC Depot");

		WebContent.expireCP(webContentTitleList = "WC WebContent Title");

		DepotNavigator.openToEditWCEntry(
			depotName = "Test Expire WC Depot",
			webContentTitle = "WC WebContent Title");

		WebContent.viewStatus(
			webContentContent = "WC WebContent Content",
			webContentStatus = "Expired",
			webContentTitle = "WC WebContent Title");
	}

	@description = "This ensures that web content can be moved to a folder in a depot."
	@priority = "3"
	@refactordone
	test CanMoveWebContentToFolder {
		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Test Depot Name",
			site = "false",
			title = "WC WebContent Title");

		JSONWebcontent.addFolder(
			folderName = "WC Folder Name",
			groupName = "Test Depot Name",
			site = "false");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Depot Name");

		WebContent.moveToFolderCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC WebContent Title");

		WebContentFolder.gotoCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC Folder Name");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");
	}

	@description = "This ensures that web content with structure can be restored to a depot."
	@priority = "5"
	@refactordone
	test CanRestoreWebContentWithStructure {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Restore WC In Depot");

		DepotNavigator.openDepotWebContentStructuresAdmin(depotName = "Test Restore WC In Depot");

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		DepotNavigator.openDepotWebContentTemplatesAdmin(depotName = "Test Restore WC In Depot");

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Restore WC In Depot");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			webContentText = "WC WebContent Text",
			webContentTitle = "Remove and Restore WC WebContent Title");

		PortletEntry.publish();

		WebContent.moveToRecycleBinCP(
			assetType = "Web Content Article",
			webContentTitle = "Remove and Restore WC WebContent Title");

		DepotNavigator.openDepotRecycleBinAdmin(depotName = "Test Restore WC In Depot");

		RecycleBin.viewCP(
			assetName = "Remove and Restore WC WebContent Title",
			assetType = "Web Content Article",
			deleteUser = "Test Test");

		RecycleBin.restoreCP(
			assetName = "Remove and Restore WC WebContent Title",
			assetRestoreLocation = "Home",
			assetType = "Web Content Article");

		DepotNavigator.openDepotWebContentAdmin(depotName = "Test Restore WC In Depot");

		WebContent.viewWithStructureCP(
			webContentText = "WC WebContent Text",
			webContentTitle = "Remove and Restore WC WebContent Title");
	}

}