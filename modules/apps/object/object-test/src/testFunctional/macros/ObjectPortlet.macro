definition {

	macro addSingleFieldEntryViaUI {
		LexiconEntry.gotoAdd();

		Type.type(
			locator1 = "ObjectPortlet#ADD_OBJECT_ENTRY",
			value1 = "${entry}");

		Button.clickSave();

		WaitForSPARefresh();

		WaitForPageLoad();
	}

	macro assertAuthorColumnDisplaysUserName {
		AssertElementPresent(
			key_column = "${column}",
			locator1 = "ObjectPortlet#ENTRY_COLUMN");

		AssertElementPresent(
			key_entry = "${authorName}",
			locator1 = "ObjectPortlet#ENTRY_VALUE");
	}

	macro assertColumnLabelEntries {
		AssertElementPresent(
			key_sortFieldName = "${columnLabelName}",
			locator1 = "ObjectPortlet#SORT_FIELD",
			value1 = "${columnLabelName}");
	}

	macro assertDeleteEntryButtonNotPresent {
		AssertElementNotPresent(
			key_entry = "${entry}",
			locator1 = "ObjectPortlet#ENTRY_KEBAB_MENU");

		AssertElementNotPresent(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");
	}

	macro assertDuplicatedEntryNotPresent {
		AssertElementNotPresent(
			key_entry = "${entry}",
			locator1 = "ObjectPortlet#DUPLICATED_ENTRY_VALUE");
	}

	macro assertEntryColumnNotPresent {
		AssertElementNotPresent(
			key_column = "${column}",
			locator1 = "ObjectPortlet#ENTRY_COLUMN");
	}

	macro assertEntryColumnPresent {
		AssertElementPresent(
			key_column = "${column}",
			locator1 = "ObjectPortlet#ENTRY_COLUMN");
	}

	macro assertEntryDetailsCheckedPresent {
		AssertChecked.assertCheckedNotVisible(locator1 = "//input[@type='checkbox']");
	}

	macro assertEntryDetailsLabelNotPresent {
		AssertNotVisible(
			key_entryLabel = "${entryLabel}",
			locator1 = "ObjectPortlet#VIEW_ENTRY_DETAILS_LABEL");
	}

	macro assertEntryDetailsLabelPresent {
		AssertElementPresent(
			key_entryLabel = "${entryLabel}",
			locator1 = "ObjectPortlet#VIEW_ENTRY_DETAILS_LABEL");
	}

	macro assertEntryDetailsNotPresent {
		SelectFrameTop();

		AssertElementNotPresent(
			key_entrySelected = "${entryNotSelected}",
			locator1 = "ObjectPortlet#OBJECT_FIELD_SELECTED");
	}

	macro assertEntryDetailsValuePresent {
		AssertElementPresent(
			key_entryValue = "${entryValue}",
			locator1 = "ObjectPortlet#VIEW_ENTRY_DETAILS_VALUE");
	}

	macro assertEntryDetailsValueSelected {
		SelectFrameTop();

		AssertElementPresent(
			key_entrySelected = "${entrySelected}",
			locator1 = "ObjectPortlet#OBJECT_FIELD_SELECTED");
	}

	macro assertEntryNotPresent {
		AssertElementNotPresent(
			key_entry = "${entry}",
			locator1 = "ObjectPortlet#ENTRY_VALUE");
	}

	macro assertEntryOnRelationshipFieldNotPresent {
		AssertTextNotEquals(
			locator1 = "ObjectPortlet#SEARCH_RELATIONSHIP_ENTRY",
			value1 = "${entryValue}");
	}

	macro assertEntryStauts {
		AssertElementPresent(
			key_entry = "${entry}",
			key_status = "${status}",
			locator1 = "ObjectPortlet#ENTRY_STATUS");
	}

	macro assertFieldAtSpecificColumn {
		AssertElementPresent(
			key_fieldColumnNumber = "${fieldColumnNumber}",
			key_fieldLabel = "${fieldLabel}",
			locator1 = "ObjectAdmin#FIELD_COLUMN_POSITION_ON_ENTRY_PAGE");
	}

	macro assertFieldEntryColumnIsDisplayed {
		AssertElementPresent(
			key_fieldLabelName = "${fieldLabelName}",
			locator1 = "ObjectPortlet#FIELD_ENTRY_COLUMN");
	}

	macro assertFieldLabelName {
		AssertTextEquals(
			key_fieldLabelName = "${fieldLabelName}",
			locator1 = "ObjectPortlet#FIELD_LABEL_NAME",
			value1 = "${key_fieldLabelName}");
	}

	macro assertFieldLabelNameNotPresent {
		AssertTextNotEquals(
			key_fieldLabelName = "${fieldLabelName}",
			locator1 = "ObjectPortlet#FIELD_LABEL_NAME",
			value1 = "${key_fieldLabelName}");
	}

	macro assertFilterResultsSpecificOrder {
		var resultOrder = "0";

		for (var entry : list "${entry}") {
			var resultOrder = ${resultOrder} + 1;

			AssertVisible(
				key_entry = "${entry}",
				locator1 = "ObjectPortlet#ENTRY_VALUE_SPECIFIC_ORDER",
				resultOrder = "${resultOrder}");
		}
	}

	macro assertGenericEntryColumnIsDisplayed {
		AssertElementPresent(
			key_fieldLabelName = "${fieldLabelName}",
			locator1 = "ObjectPortlet#GENERIC_ENTRY_COLUMN");
	}

	macro assertHeader {
		AssertElementPresent(
			key_objectLabel = "${objectLabel}",
			locator1 = "ObjectPortlet#OBJECT_PORTLET_HEADER");
	}

	macro assertIsDisplayedOnControlPanel {
		ApplicationsMenuHelper.openApplicationsMenu();

		ApplicationsMenu.gotoPanel(panel = "Control Panel");

		AssertElementPresent(
			key_itemMenu = "${itemMenu}",
			locator1 = "ObjectPortlet#VIEW_FIELD_ON_MENU");
	}

	macro assertMenuItemColumn {
		AssertElementPresent(
			key_dropdowntItem = "${dropdowntItem}",
			locator1 = "ObjectPortlet#CHECK_UNCHECK_DROPDOWN_ITEM");
	}

	macro assertNoFieldsWereFound {
		AssertTextEquals(
			locator1 = "ObjectPortlet#NO_FIELDS_WERE_FOUND_MESSAGE",
			value1 = "No fields were found.");
	}

	macro assertObjectIsDisplayedOnControlPanel {
		ApplicationsMenuHelper.openApplicationsMenu();

		ApplicationsMenu.gotoPanel(panel = "Control Panel");

		AssertElementPresent(locator1 = "ObjectPortlet#CUSTOM_OBJECT_ON_CONTROL_PANEL");
	}

	macro assertPlusButtonIsNotPresent {
		AssertElementNotPresent(locator1 = "Button#PLUS");
	}

	macro assertRelationshipEntrySearchResultsNotPresent {
		AssertElementNotPresent(
			key_picklistOption = "${entry}",
			locator1 = "ObjectAdmin#ENTRY_PICKLIST_OPTION");
	}

	macro assertRelationshipEntrySearchResultsPresent {
		AssertElementPresent(
			locator1 = "ObjectPortlet#SEARCH_RELATIONSHIP_ENTRY",
			value1 = "${entry}");
	}

	macro assertUserCanNotUpdateEntryWithoutPermission {
		Click(locator1 = "ObjectPortlet#VIEW_ENTRY_EYE_BUTTON");

		AssertNotEditable(locator1 = "ObjectPortlet#ADD_OBJECT_ENTRY");

		Button.clickSave();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_1",
			value1 = "must have UPDATE permission for com.liferay.object.model.ObjectDefinition#");
	}

	macro changePagination {
		Click(locator1 = "ObjectPortlet#PAGINATION_ITEMS_PER_PAGE_SELECT");

		MenuItem.click(menuItem = "${itemsPerPage}");
	}

	macro checkAnyPage {
		var key_pageNumber = "${pageNumber}";

		Click(locator1 = "ObjectPortlet#ANY_PAGE");
	}

	macro checkUncheckColumnsDisplayed {
		Click(locator1 = "ObjectPortlet#ARROW_DOWN_ICON");

		Click(
			key_dropdowntItem = "${dropdowntItem}",
			locator1 = "ObjectPortlet#CHECK_UNCHECK_DROPDOWN_ITEM");
	}

	macro chooseEntryOnRelationshipField {
		Click(locator1 = "ObjectPortlet#SEARCH_RELATIONSHIP_ENTRY");

		KeyPress(
			locator1 = "ObjectPortlet#SEARCH_RELATIONSHIP_ENTRY",
			value1 = "\BACK_SPACE");

		Click(
			key_picklistOption = "${entryOption}",
			locator1 = "ObjectAdmin#ENTRY_PICKLIST_OPTION");
	}

	macro chooseEntryOnRelationshipFieldSpecific {
		Click(
			key_relationshipFieldLabel = "${relationshipFieldLabel}",
			locator1 = "ObjectPortlet#SEARCH_ENTRY_ON_RELATIONSHIP_FIELD_LABEL_SPECIFIC");

		KeyPress(
			key_relationshipFieldLabel = "${relationshipFieldLabel}",
			locator1 = "ObjectPortlet#SEARCH_ENTRY_ON_RELATIONSHIP_FIELD_LABEL_SPECIFIC",
			value1 = "\BACK_SPACE");

		Click(
			key_picklistOption = "${entryOption}",
			locator1 = "ObjectAdmin#ENTRY_PICKLIST_OPTION");

		Button.clickSave();

		WaitForSPARefresh();
	}

	macro deleteEntry {
		Click(
			key_entry = "${entry}",
			locator1 = "ObjectPortlet#ENTRY_KEBAB_MENU");

		ClickNoError(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");

		AssertConfirm(value1 = "Are you sure you want to delete this entry?");
	}

	macro goToCustomObjectPortletOnControlPanel {
		Click(locator1 = "ObjectPortlet#CUSTOM_OBJECT_ON_CONTROL_PANEL");
	}

	macro gotoRelationshipTab {
		Click(
			key_tabName = "Relationship Tab",
			locator1 = "ObjectAdmin#ENTRY_RELATIONSHIP_TAB");
	}

	macro searchColumn {
		Click(locator1 = "ObjectPortlet#ARROW_DOWN_ICON");

		AssertElementPresent(locator1 = "ObjectPortlet#COLUMN_SEARCH_FIELD");

		Type(
			locator1 = "ObjectPortlet#COLUMN_SEARCH_FIELD",
			value1 = "${columnName}");

		Click(locator1 = "ObjectPortlet#COLUMN_ICON_SEARCH");
	}

	macro searchEntry {
		AssertElementPresent(locator1 = "ObjectPortlet#SEARCH_FIELD");

		Type(
			locator1 = "ObjectPortlet#SEARCH_FIELD",
			value1 = "${entryName}");

		KeyPress(
			locator1 = "ObjectPortlet#SEARCH_FIELD",
			value1 = "\RETURN");
	}

	macro searchEntryRelationshipField {
		Type.type(
			locator1 = "ObjectPortlet#SEARCH_RELATIONSHIP_ENTRY",
			value1 = "${entryValue}");
	}

	macro selectCustomObject {
		Click(
			key_label = "${label}",
			locator1 = "ObjectPortlet#SELECT_CUSTOM_OBJECT");
	}

	macro selectRelationshipFieldEntry {
		Click(
			key_entry = "${entry}",
			locator1 = "ObjectPortlet#SEARCH_RELATIONSHIP_ENTRY");

		Click(
			key_entry = "${newEntry}",
			locator1 = "CreateObject#ENTRY_RELATIONSHIP_FIELD_OPTION");

		Button.clickSave();

		WaitForSPARefresh();

		WaitForPageLoad();
	}

	macro sortField {
		Click(
			key_sortFieldName = "${sortFieldName}",
			locator1 = "ObjectPortlet#SORT_FIELD",
			value1 = "${sortFieldName}");
	}

	macro updateBooleanEntry {
		ObjectPortlet.viewEntryDetails(entry = "${entry}");

		Check.checkNotVisible(locator1 = "//input[@type='checkbox']");

		Button.clickSave();

		WaitForSPARefresh();
	}

	macro updateEntry {
		ObjectPortlet.viewEntryDetails(entry = "${entry}");

		Type.type(
			locator1 = "ObjectPortlet#ADD_OBJECT_ENTRY",
			value1 = "${updateEntry}");

		Button.clickSave();

		WaitForSPARefresh();
	}

	macro viewClobEntryDetails {
		var key_entry = "${clobEntry}";

		if (IsElementPresent(locator1 = "ObjectPortlet#ENTRY_CLOB_KEBAB_MENU")) {
			Click(locator1 = "ObjectPortlet#ENTRY_CLOB_KEBAB_MENU");

			Click(locator1 = "ObjectPortlet#VIEW_ENTRY_BUTTON");
		}
		else {
			Click(locator1 = "ObjectPortlet#VIEW_ENTRY_EYE_BUTTON");
		}

		WaitForPageLoad();
	}

	macro viewEmptyLabelInDateEntry {
		AssertElementPresent(locator1 = "ObjectPortlet#VIEW_EMPTY_LABEL_IN_DATE_ENTRY");
	}

	macro viewEntry {
		WaitForSPARefresh();

		AssertElementPresent(
			key_entry = "${entry}",
			locator1 = "ObjectPortlet#ENTRY_VALUE");
	}

	macro viewEntryDetails {
		var key_entry = "${entry}";

		if (IsElementPresent(locator1 = "ObjectPortlet#ENTRY_KEBAB_MENU")) {
			Click(locator1 = "ObjectPortlet#ENTRY_KEBAB_MENU");

			Click(locator1 = "ObjectPortlet#VIEW_ENTRY_BUTTON");
		}
		else {
			Click(locator1 = "ObjectPortlet#VIEW_ENTRY_EYE_BUTTON");
		}

		WaitForPageLoad();
	}

	macro viewWarningMessage {
		AssertElementPresent(
			locator1 = "Message#ERROR_3_ALT",
			value1 = "${warningMessage}");
	}

	macro viewWidgetButton {
		AssertElementPresent(locator1 = "ObjectPortlet#VIEW_WIDGET_BUTTON");
	}

}