@component-name = "portal-object"
definition {

	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectAdmin.deleteAllCustomObjectsViaAPI();
		}
	}

	@description = "LPS-135393 - Verify that a Big Decimal entry is correctly displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "4"
	test BigDecimalDisplayedOnAutoGeneratedTable {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 228",
			objectName = "CustomObject228",
			pluralLabelName = "Custom Objects 228");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "PrecisionDecimal",
			fieldLabelName = "BigDecimal",
			fieldName = "customObjectField",
			fieldType = "BigDecimal",
			isRequired = "false",
			objectName = "CustomObject228");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject228");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject228",
			value = "123.123456");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject228");

		ObjectPortlet.viewEntry(entry = "123.123456");
	}

	@description = "LPS-135393 - Verify that a Boolean entry is correctly displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "4"
	test BooleanDisplayedOnAutoGeneratedTable {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 229",
			objectName = "CustomObject229",
			pluralLabelName = "Custom Objects 229");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Boolean",
			fieldLabelName = "Boolean",
			fieldName = "customObjectField",
			fieldType = "Boolean",
			isRequired = "false",
			objectName = "CustomObject229");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject229");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject229",
			value = "true");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject229");

		ObjectPortlet.viewEntry(entry = "Yes");
	}

	@description = "LPS-135390 - Verify it is possible to view and access the Custom Object portlet with the Access in Control Panel permission"
	@priority = "4"
	test CanAccessCustomObjectWithAccessPermission {
		property test.name.skip.portal.instance = "ObjectPortlet#CanAccessCustomObjectWithAccessPermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_APPLICATION_PERMISSION_ACTION_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		Navigator.openURL();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectPortlet.assertObjectIsDisplayedOnControlPanel();

		ObjectPortlet.goToCustomObjectPortletOnControlPanel();

		ObjectPortlet.assertHeader(objectLabel = "Custom Object");
	}

	@description = "LPS-135396 - Verify it is possible to add a BigDecimal field on layout"
	@priority = "4"
	test CanAddBigDecimalEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 230",
			objectName = "CustomObject230",
			pluralLabelName = "Custom Objects 230");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "PrecisionDecimal",
			fieldLabelName = "BigDecimal",
			fieldName = "customObjectField",
			fieldType = "BigDecimal",
			isRequired = "false",
			objectName = "CustomObject230");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject230");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject230");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "123.123456");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject230");

		ObjectPortlet.viewEntry(entry = "123.123456");
	}

	@description = "LPS-135396 - Verify it is possible to add a Boolean field on layout"
	@priority = "4"
	test CanAddBooleanEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 231",
			objectName = "CustomObject231",
			pluralLabelName = "Custom Objects 231");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Boolean",
			fieldLabelName = "Boolean",
			fieldName = "customObjectField",
			fieldType = "Boolean",
			isRequired = "false",
			objectName = "CustomObject231");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject231");

		ObjectAdmin.addObjectBoleanFieldEntryViaUI(
			objectName = "CustomObject231",
			value = "true");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject231");

		ObjectPortlet.viewEntry(entry = "Yes");
	}

	@description = "LPS-135396 - Verify it is possible to add a Date field on layout"
	@priority = "4"
	test CanAddDateEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 232",
			objectName = "CustomObject232",
			pluralLabelName = "Custom Objects 232");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Date",
			fieldLabelName = "Date",
			fieldName = "customObjectField",
			fieldType = "Date",
			isRequired = "false",
			objectName = "CustomObject232");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject232");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject232");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "01/01/2001");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject232");

		ObjectPortlet.viewEntry(entry = "Jan 1, 2001");
	}

	@description = "LPS-135396 - Verify it is possible to add a Double field on layout"
	@priority = "4"
	test CanAddDoubleEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 233",
			objectName = "CustomObject233",
			pluralLabelName = "Custom Objects 233");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Decimal",
			fieldLabelName = "Double",
			fieldName = "customObjectField",
			fieldType = "Double",
			isRequired = "false",
			objectName = "CustomObject233");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject233");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject233");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "1.23");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject233");

		ObjectPortlet.viewEntry(entry = "1.23");
	}

	@description = "LPS-135396 - Verify it is possible to add an entry on an object scoped by Site"
	@priority = "5"
	test CanAddEntryObjectScopedBySite {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 234",
			objectName = "CustomObject234",
			panelCategoryKey = "site_administration.design",
			pluralLabelName = "Custom Objects 234",
			scope = "site");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject234");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject234");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject234");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "Test Entry");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject234");

		ObjectPortlet.viewEntry(entry = "Test Entry");
	}

	@description = "LPS-140081 - Verify it is possible to add an entry without selecting a value for a Picklist field that is not required"
	@priority = "5"
	test CanAddEntryWithoutSelectingPicklist {
		property portal.acceptance = "true";

		Picklist.gotoPicklists();

		Picklist.addPicklistViaUI(picklistName = "Custom Picklist");

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Custom Picklist");

		Picklist.addPicklistItemViaUI(picklistItemName = "Item Test 1");

		Picklist.clickSaveButton();

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Custom Picklist");

		Picklist.addPicklistItemViaUI(picklistItemName = "Item Test 2");

		Picklist.clickSaveButton();

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object 235",
			pluralLabelName = "Custom Objects 235");

		ObjectAdmin.saveCustomObject();

		ObjectPortlet.selectCustomObject(label = "Custom Object 235");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field Picklist",
			fieldPicklist = "Custom Picklist",
			fieldType = "Picklist");

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field String",
			fieldType = "Text");

		ObjectAdmin.goToDetailsTab();

		CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Object");

		CreateObject.saveObject();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject235");

		ApplicationsMenu.gotoPortlet(
			category = "Object",
			panel = "Control Panel",
			portlet = "Custom Objects 235");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "String Entry");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject235");

		ObjectPortlet.viewEntry(entry = "String Entry");
	}

	@description = "LPS-135396 - Verify it is possible to add an Integer field on layout"
	@priority = "4"
	test CanAddIntegerEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 236",
			objectName = "CustomObject236",
			pluralLabelName = "Custom Objects 236");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Integer",
			fieldLabelName = "Integer",
			fieldName = "customObjectField",
			fieldType = "Integer",
			isRequired = "false",
			objectName = "CustomObject236");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject236");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject236");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "123456789");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject236");

		ObjectPortlet.viewEntry(entry = "123456789");
	}

	@description = "LPS-135396 - Verify it is possible to add a Long field on layout"
	@priority = "4"
	test CanAddLongEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 237",
			objectName = "CustomObject237",
			pluralLabelName = "Custom Objects 237");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "LongInteger",
			fieldLabelName = "Long",
			fieldName = "customObjectField",
			fieldType = "Long",
			isRequired = "false",
			objectName = "CustomObject237");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject237");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject237");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "1234567891234567");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject237");

		ObjectPortlet.viewEntry(entry = "1234567891234567");
	}

	@description = "LPS-135390 - Verify it is possible to add an Object entry with the Add Object Entry permission"
	@priority = "4"
	test CanAddObjectEntryWithAddPermission {
		property test.name.skip.portal.instance = "ObjectPortlet#CanAddObjectEntryWithAddPermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_APPLICATION_PERMISSION_ACTION_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_RESOURCE_PERMISSION_ADD_ENTRY_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		Navigator.openURL();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Test Entry");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Test Entry");
	}

	@description = "LPS-135396 - Verify it is possible to add a Picklist field on layout"
	@priority = "4"
	test CanAddPicklistEntryOnLayout {
		Picklist.gotoPicklists();

		Picklist.addPicklistViaUI(picklistName = "Custom Picklist");

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Custom Picklist");

		Picklist.addPicklistItemViaUI(picklistItemName = "Item Test 1");

		Picklist.clickSaveButton();

		Picklist.gotoPicklists();

		Picklist.gotoPicklistView(picklistName = "Custom Picklist");

		Picklist.addPicklistItemViaUI(picklistItemName = "Item Test 2");

		Picklist.clickSaveButton();

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object 239",
			pluralLabelName = "Custom Objects 239");

		ObjectAdmin.saveCustomObject();

		ObjectPortlet.selectCustomObject(label = "Custom Object 239");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field Picklist",
			fieldPicklist = "Custom Picklist",
			fieldType = "Picklist");

		ObjectAdmin.goToDetailsTab();

		CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Object");

		CreateObject.saveObject();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject239");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject239");

		ObjectAdmin.addObjectPicklistFieldEntryViaUI(picklistOption = "Item Test 1");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject239");

		ObjectPortlet.viewEntry(entry = "Item Test 1");
	}

	@description = "LPS-140084 - Verify it is possible to add special characters on a field with the Field Name as 'Name'"
	@priority = "4"
	test CanAddSpecialCharactersOnFieldNamedName {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 240",
			objectName = "CustomObject240",
			pluralLabelName = "Custom Objects 240");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Name",
			fieldName = "name",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject240");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject240");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject240");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "@~!& ˆ%$&_-");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject240");

		ObjectPortlet.viewEntry(entry = "@~!& ˆ%$&_-");
	}

	@description = "LPS-135396 - Verify it is possible to add a String field on layout"
	@priority = "5"
	test CanAddStringEntryOnLayout {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 241",
			objectName = "CustomObject241",
			pluralLabelName = "Custom Objects 241");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "String",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject241");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject241");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject241");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "Test text");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject241");

		ObjectPortlet.viewEntry(entry = "Test text");
	}

	@description = "LPS-135390 - Verify it is possible to apply a permission only to a specific site when an Object is scoped by Site"
	@priority = "4"
	test CanApplyPermissionOnlyToSpecificSiteWhenScopedBySite {
		property test.name.skip.portal.instance = "ObjectPortlet#CanApplyPermissionOnlyToSpecificSiteWhenScopedBySite";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects",
			scope = "site");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var letter : list "A,B") {
			JSONGroup.addGroup(groupName = "Site ${letter}");
		}

		ObjectAdmin.gotoRolesAndSelectCustomObject(roleName = "Regular Role");

		ObjectAdmin.selectActionsOnRoles(actionsList = "Access in Site and Asset Library Administration,View");

		for (var scopePermissions : list "Access in Site and Asset Library Administration,View") {
			ObjectAdmin.changeScopeOnDefinePermissions(
				scopeActionName = "${scopePermissions}",
				siteCard = "Site A");
		}

		for (var resourceAction : list "VIEW,VIEW_SITE_ADMINISTRATION") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = "Regular Role");
		}

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.addAssignee(
			assigneeName = "Site A",
			assigneeType = "Sites",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.selectMySite(site = "Site B");

		AssertElementNotPresent(
			key_portlet = "Custom Objects",
			locator1 = "ProductMenu#PORTLET",
			value1 = "Custom Objects");

		ObjectAdmin.selectMySite(site = "Site A");

		ObjectAdmin.viewObjectPresentOnSite(
			category = "Content & Data",
			portlet = "Custom Objects");
	}

	@description = "LPS-135396 - Verify it is possible to cancel the submition of an entry"
	@priority = "4"
	test CanCancelEntrySubmition {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 243",
			objectName = "CustomObject243",
			pluralLabelName = "Custom Objects 243");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject243");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject243");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject243");

		ObjectAdmin.cancelAddingObjectStringFieldEntryViaUI(entryValue = "Test Entry");

		ObjectAdmin.assertAddEntryModalIsNotPresent();

		ObjectPortlet.assertEntryNotPresent(entry = "Test Entry");
	}

	@description = "LPS-135396 - Verify it is possible to cancel the update of an entry"
	@priority = "4"
	test CanCancelEntryUpdate {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 244",
			objectName = "CustomObject244",
			pluralLabelName = "Custom Objects 244");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject244");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject244");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject244");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Test Entry");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject244");

		ObjectPortlet.viewEntryDetails(entry = "Test Entry");

		ObjectAdmin.cancelUpdatingObjectStringFieldEntryViaUI(entryValue = "Test Entry 2");

		ObjectAdmin.assertUpdateEntryModalIsNotPresent(value = "Test Entry 2");

		ObjectPortlet.assertEntryNotPresent(entry = "Test Entry 2");

		ObjectPortlet.viewEntry(entry = "Test Entry");
	}

	@description = "LPS-135393 - Verify that is possible to change what columns to be displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "3"
	test CanChangeColumnsToBeDisplayed {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 245",
			objectName = "CustomObject245",
			pluralLabelName = "Custom Objects 245");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject245");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject245");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject245",
			value = "Test text");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject245");

		ObjectPortlet.checkUncheckColumnsDisplayed(dropdowntItem = "ID");

		ObjectPortlet.assertEntryColumnNotPresent(column = "ID");
	}

	@description = "LPS-135393 - Verify that is possible to delete an entry on the auto-generated table on the Custom Object Portlet"
	@priority = "5"
	test CanDeleteEntry {
		property portal.acceptance = "true";
		property testray.component.names = "Frontend Dataset";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 246",
			objectName = "CustomObject246",
			pluralLabelName = "Custom Objects 246");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Text",
			fieldName = "text",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject246");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject246");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject246",
			value = "Test text");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject246");

		ObjectPortlet.viewEntry(entry = "Test text");

		ObjectPortlet.deleteEntry(entry = "Test text");

		ObjectPortlet.assertEntryNotPresent(entry = "Test text");
	}

	@description = "LPS-135390 - Verify it is possible to delete an Object entry with the Delete permission"
	@priority = "4"
	test CanDeleteObjectEntryWithDeletePermission {
		property test.name.skip.portal.instance = "ObjectPortlet#CanDeleteObjectEntryWithDeletePermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Text test");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_RESOURCE_PERMISSIONS_VIEW_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_RESOURCE_PERMISSIONS_DELETE_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Navigator.openURL();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.deleteEntry(entry = "Text test");

		ObjectPortlet.assertEntryNotPresent(entry = "Text test");
	}

	@description = "LPS-135396 - Verify it is possible to edit a BigDecimal entry on layout"
	@priority = "4"
	test CanEditBigDecimalEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 248",
			objectName = "CustomObject248",
			pluralLabelName = "Custom Objects 248");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "PrecisionDecimal",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "BigDecimal",
			isRequired = "false",
			objectName = "CustomObject248");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject248");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject248",
			value = "123.654321");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject248");

		ObjectPortlet.updateEntry(
			entry = "123.654321",
			updateEntry = "1.12345678");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject248");

		ObjectPortlet.assertEntryNotPresent(entry = "123.654321");

		ObjectPortlet.viewEntry(entry = "1.12345678");
	}

	@description = "LPS-135396 - Verify it is possible to edit a Boolean entry on layout"
	@priority = "4"
	test CanEditBooleanEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 249",
			objectName = "CustomObject249",
			pluralLabelName = "Custom Objects 249");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Boolean",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "Boolean",
			isRequired = "false",
			objectName = "CustomObject249");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject249");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject249",
			value = "false");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject249");

		ObjectPortlet.updateBooleanEntry(entry = "No");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject249");

		ObjectPortlet.assertEntryNotPresent(entry = "No");

		ObjectPortlet.viewEntry(entry = "Yes");
	}

	@description = "LPS-135396 - Verify it is possible to edit a Date entry on layout"
	@priority = "4"
	test CanEditDateEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 250",
			objectName = "CustomObject250",
			pluralLabelName = "Custom Objects 250");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Date",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "Date",
			isRequired = "false",
			objectName = "CustomObject250");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject250");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject250",
			value = "2001-01-01");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject250");

		ObjectPortlet.updateEntry(
			entry = "Jan 1, 2001",
			updateEntry = "02/02/2002");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject250");

		ObjectPortlet.assertEntryNotPresent(entry = "01/01/2001");

		ObjectPortlet.viewEntry(entry = "Feb 2, 2002");
	}

	@description = "LPS-135396 - Verify it is possible to edit a Double entry on layout"
	@priority = "4"
	test CanEditDoubleEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 251",
			objectName = "CustomObject251",
			pluralLabelName = "Custom Objects 251");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Decimal",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "Double",
			isRequired = "false",
			objectName = "CustomObject251");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject251");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject251",
			value = "1.23");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject251");

		ObjectPortlet.updateEntry(
			entry = "1.23",
			updateEntry = "4.56");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject251");

		ObjectPortlet.assertEntryNotPresent(entry = "1.23");

		ObjectPortlet.viewEntry(entry = "4.56");
	}

	@description = "LPS-135396 - Verify it is possible to edit a Integer entry on layout"
	@priority = "4"
	test CanEditIntegerEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 252",
			objectName = "CustomObject252",
			pluralLabelName = "Custom Objects 252");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Integer",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "Integer",
			isRequired = "false",
			objectName = "CustomObject252");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject252");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject252",
			value = "321");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject252");

		ObjectPortlet.updateEntry(
			entry = "321",
			updateEntry = "123456");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject252");

		ObjectPortlet.assertEntryNotPresent(entry = "321");

		ObjectPortlet.viewEntry(entry = "123456");
	}

	@description = "LPS-135396 - Verify it is possible to edit a Long entry on layout"
	@priority = "4"
	test CanEditLongEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 253",
			objectName = "CustomObject253",
			pluralLabelName = "Custom Objects 253");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "LongInteger",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "Long",
			isRequired = "false",
			objectName = "CustomObject253");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject253");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject253",
			value = "987654321");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject253");

		ObjectPortlet.updateEntry(
			entry = "987654321",
			updateEntry = "1234567891234567");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject253");

		ObjectPortlet.assertEntryNotPresent(entry = "987654321");

		ObjectPortlet.viewEntry(entry = "1234567891234567");
	}

	@description = "LPS-135396 - Verify it is possible to edit a Picklist entry on layout"
	@priority = "4"
	test CanEditPicklistEntryOnLayout {
		Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");

		for (var itemsName : list "1,2") {
			Picklist.addPicklistItemViaAPI(
				itemKey = "${itemsName}",
				itemName = "Item Test ${itemsName}",
				picklistName = "Custom Picklist");
		}

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 254",
			objectName = "CustomObject254",
			pluralLabelName = "Custom Objects 254");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 254");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field Picklist",
			fieldPicklist = "Custom Picklist",
			fieldType = "Picklist");

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject254");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject254");

		ObjectAdmin.addObjectPicklistFieldEntryViaUI(picklistOption = "Item Test 1");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject254");

		ObjectPortlet.viewEntryDetails(entry = "Item Test 1");

		ObjectAdmin.changePicklistFieldEntry(
			entrySelected = "Item Test 1",
			newPicklistOption = "Item Test 2");

		ObjectPortlet.assertEntryDetailsValueSelected(entrySelected = "Item Test 2");

		ObjectPortlet.assertEntryDetailsNotPresent(entryNotSelected = "Item Test 1");
	}

	@description = "LPS-135396 - Verify it is possible to edit a String entry on layout"
	@priority = "5"
	test CanEditStringEntryOnLayout {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 255",
			objectName = "CustomObject255",
			pluralLabelName = "Custom Objects 255");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject255");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject255");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject255",
			value = "Text test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject255");

		ObjectPortlet.updateEntry(
			entry = "Text test",
			updateEntry = "Update test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject255");

		ObjectPortlet.assertEntryNotPresent(entry = "Text test");

		ObjectPortlet.viewEntry(entry = "Update test");
	}

	@description = "LPS-135390 - Verify it is not possible to add an Object entry without the Add Object Entry permission"
	@priority = "5"
	test CannotAddObjectEntryWithoutAddPermission {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectPortlet#CannotAddObjectEntryWithoutAddPermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_APPLICATION_PERMISSION_ACTION_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		Navigator.openURL();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.assertPlusButtonIsNotPresent();
	}

	@description = "LPS-135390 - Verify it is not possible to delete an Object entry without the Delete permission"
	@priority = "4"
	test CannotDeleteObjectEntryWithoutDeletePermission {
		property test.name.skip.portal.instance = "ObjectPortlet#CannotDeleteObjectEntryWithoutDeletePermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Text test");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_RESOURCE_PERMISSIONS_VIEW_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		Navigator.openURL();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.assertDeleteEntryButtonNotPresent(entry = "Text test");
	}

	@description = "LPS-135390 - Verify it is not possible to update an Object entry without the Update permission"
	@priority = "4"
	test CannotUpdateObjectEntryWithoutUpdatePermission {
		property portal.upstream = "quarantine";
		property test.name.skip.portal.instance = "ObjectPortlet#CannotUpdateObjectEntryWithoutUpdatePermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Text test");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_RESOURCE_PERMISSIONS_VIEW_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Navigator.openURL();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntryDetails(entry = "Text test");

		ObjectAdmin.viewFieldValueDisabled(fieldValue = "Text test");
	}

	@description = "LPS-135390 - Verify it is not possible to view other user's Object entry with only the Add Object Entry permission"
	@priority = "5"
	test CannotViewOtherUsersEntryWithOnlyAddPermission {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectPortlet#CannotViewOtherUsersEntryWithOnlyAddPermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Text test");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_RESOURCE_PERMISSION_ADD_ENTRY_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		Navigator.openURL();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.assertEntryNotPresent(entry = "Test Entry");
	}

	@description = "LPS-135390 - Verify it is not possible to view other user's Object entry without the View permission"
	@priority = "4"
	test CannotViewOtherUsersEntryWithoutViewPermission {
		property test.name.skip.portal.instance = "ObjectPortlet#CannotViewOtherUsersEntryWithoutViewPermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Test Entry");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Navigator.openURL();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.assertEntryNotPresent(entry = "Test Entry");
	}

	@description = "LPS-135393 - Verify that is possible to order the auto-generated table by an entry on the Custom Object Portlet"
	@priority = "3"
	test CanOrderTable {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 261",
			objectName = "CustomObject261",
			pluralLabelName = "Custom Objects 261");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject261");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject261");

		for (var number : list "1,2") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject261",
				value = "Test text ${number}");
		}

		ObjectAdmin.goToCustomObject(objectName = "CustomObject261");

		ObjectPortlet.sortField(sortFieldName = "Text");

		ObjectPortlet.assertFilterResultsSpecificOrder(entry = "Test text 1,Test text 2");

		ObjectPortlet.sortField(sortFieldName = "Text");

		ObjectPortlet.assertFilterResultsSpecificOrder(entry = "Test text 2,Test text 1");
	}

	@description = "LPS-135393 - Verify that is possible to search for an entry on the auto-generated table on the Custom Object Portlet"
	@priority = "5"
	test CanSeachEntry {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 262",
			objectName = "CustomObject262",
			pluralLabelName = "Custom Objects 262");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Text",
			fieldName = "text",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject262");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject262");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject262",
			value = "Test 1");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject262",
			value = "Entry 2");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject262");

		ObjectPortlet.searchEntry(entryName = "Entry 2");

		ObjectPortlet.viewEntry(entry = "Entry 2");

		ObjectPortlet.assertEntryNotPresent(entry = "Test 1");
	}

	@description = "LPS-135393 - Verify that is possible to search for a field on the dropdown to select the columns to be displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "3"
	test CanSearchForFieldOnDropdownToSelectColumns {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 263",
			objectName = "CustomObject263",
			pluralLabelName = "Custom Objects 263");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject263");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject263");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject263",
			value = "Test text");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject263");

		ObjectPortlet.searchColumn(columnName = "Field");

		ObjectPortlet.assertMenuItemColumn(dropdowntItem = "Field");
	}

	@description = "LPS-140082 - Verify it is possible to search for a partial Object entry on the Relationship field"
	@priority = "4"
	test CanSearchPartialOnRelationshipField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 264",
			objectName = "CustomObject264",
			pluralLabelName = "Custom Objects 264");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject264");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject264",
			objectName_2 = "CustomObject264",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 264");

		CreateObject.selectTitleField(fieldLabel = "Field");

		CreateObject.saveObject();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject264");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject264");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject264",
			value = "Test 1");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject264",
			value = "Test 2");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject264");

		ObjectPortlet.viewEntryDetails(entry = "Test 1");

		ObjectPortlet.searchEntryRelationshipField(entryValue = "Tes");

		ObjectPortlet.assertRelationshipEntrySearchResultsPresent(entry = "t 2");
	}

	@description = "LPS-135390 - Verify it is possible to update an Object entry with the Update permission"
	@priority = "4"
	test CanUpdateObjectEntryWithUpdatePermission {
		property test.name.skip.portal.instance = "ObjectPortlet#CanUpdateObjectEntryWithUpdatePermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Text test");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_RESOURCE_PERMISSIONS_VIEW_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_RESOURCE_PERMISSIONS_UPDATE_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Navigator.openURL();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.updateEntry(
			entry = "Text test",
			updateEntry = "Test 2");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.assertEntryNotPresent(entry = "Text test");

		ObjectPortlet.viewEntry(entry = "Test 2");
	}

	@description = "LPS-135396 - Verify it is possible to view a BigDecimal entry and label on layout"
	@priority = "4"
	test CanViewBigDecimalEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 266",
			objectName = "CustomObject266",
			pluralLabelName = "Custom Objects 266");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "PrecisionDecimal",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "BigDecimal",
			isRequired = "false",
			objectName = "CustomObject266");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject266");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject266",
			value = "123.123456");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject266");

		ObjectPortlet.viewEntryDetails(entry = "123.123456");

		ObjectPortlet.assertEntryDetailsLabelPresent(entryLabel = "Field");

		ObjectPortlet.assertEntryDetailsValuePresent(entryValue = "123.123456");
	}

	@description = "LPS-135396 - Verify it is possible to view a Boolean entry and label on layout"
	@priority = "4"
	test CanViewBooleanEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 267",
			objectName = "CustomObject267",
			pluralLabelName = "Custom Objects 267");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Boolean",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "Boolean",
			isRequired = "false",
			objectName = "CustomObject267");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject267");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject267",
			value = "true");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject267");

		ObjectPortlet.viewEntryDetails(entry = "Yes");

		ObjectPortlet.assertEntryDetailsLabelPresent(entryLabel = "Field");

		ObjectPortlet.assertEntryDetailsCheckedPresent();
	}

	@description = "LPS-135396 - Verify it is possible to view a Date entry and label on layout"
	@priority = "4"
	test CanViewDateEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 268",
			objectName = "CustomObject268",
			pluralLabelName = "Custom Objects 268");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Date",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "Date",
			isRequired = "false",
			objectName = "CustomObject268");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject268");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject268",
			value = "2001-01-01");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject268");

		ObjectPortlet.viewEntryDetails(entry = "Jan 1, 2001");

		ObjectPortlet.assertEntryDetailsLabelPresent(entryLabel = "Field");

		ObjectPortlet.assertEntryDetailsValuePresent(entryValue = "01/01/2001");
	}

	@description = "LPS-135396 - Verify it is possible to view a Double entry and label on layout"
	@priority = "4"
	test CanViewDoubleEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 269",
			objectName = "CustomObject269",
			pluralLabelName = "Custom Objects 269");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Decimal",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "Double",
			isRequired = "false",
			objectName = "CustomObject269");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject269");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject269",
			value = "1.54");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject269");

		ObjectPortlet.viewEntryDetails(entry = "1.54");

		ObjectPortlet.assertEntryDetailsLabelPresent(entryLabel = "Field");

		ObjectPortlet.assertEntryDetailsValuePresent(entryValue = "1.54");
	}

	@description = "LPS-135396 - Verify it is possible to view an Integer entry and label on layout"
	@priority = "4"
	test CanViewIntegerEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 270",
			objectName = "CustomObject270",
			pluralLabelName = "Custom Objects 270");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Integer",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "Integer",
			isRequired = "false",
			objectName = "CustomObject270");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject270");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject270",
			value = "12345");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject270");

		ObjectPortlet.viewEntryDetails(entry = "12345");

		ObjectPortlet.assertEntryDetailsLabelPresent(entryLabel = "Field");

		ObjectPortlet.assertEntryDetailsValuePresent(entryValue = "12345");
	}

	@description = "LPS-135396 - Verify it is possible to view a Long entry and label on layout"
	@priority = "4"
	test CanViewLongEntryOnLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 271",
			objectName = "CustomObject271",
			pluralLabelName = "Custom Objects 271");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "LongInteger",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "Long",
			isRequired = "false",
			objectName = "CustomObject271");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject271");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject271",
			value = "12345678");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject271");

		ObjectPortlet.viewEntryDetails(entry = "12345678");

		ObjectPortlet.assertEntryDetailsLabelPresent(entryLabel = "Field");

		ObjectPortlet.assertEntryDetailsValuePresent(entryValue = "12345678");
	}

	@description = "LPS-135390 - Verify it is possible to view other user's Object entry with the View permission"
	@priority = "4"
	test CanViewOtherUsersEntryWithViewPermission {
		property test.name.skip.portal.instance = "ObjectPortlet#CanViewOtherUsersEntryWithViewPermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Test Entry");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_RESOURCE_PERMISSIONS_VIEW_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Navigator.openURL();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Test Entry");
	}

	@description = "LPS-135396 - Verify it is possible to view a Picklist entry and label on layout"
	@priority = "4"
	test CanViewPicklistEntryOnLayout {
		Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");

		for (var itemsName : list "1,2") {
			Picklist.addPicklistItemViaAPI(
				itemKey = "${itemsName}",
				itemName = "Item Test ${itemsName}",
				picklistName = "Custom Picklist");
		}

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 273",
			objectName = "CustomObject273",
			pluralLabelName = "Custom Objects 273");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 273");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field Picklist",
			fieldPicklist = "Custom Picklist",
			fieldType = "Picklist");

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject273");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject273");

		ObjectAdmin.addObjectPicklistFieldEntryViaUI(picklistOption = "Item Test 1");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject273");

		ObjectPortlet.viewEntryDetails(entry = "Item Test 1");

		ObjectPortlet.assertEntryDetailsLabelPresent(entryLabel = "Field Picklist");

		ObjectPortlet.assertEntryDetailsValueSelected(entrySelected = "Item Test 1");
	}

	@description = "LPS-135396 - Verify it is possible to view a String entry and label on layout"
	@priority = "5"
	test CanViewStringEntryOnLayout {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 274",
			objectName = "CustomObject274",
			pluralLabelName = "Custom Objects 274");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject274");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject274");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject274",
			value = "Text Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject274");

		ObjectPortlet.viewEntryDetails(entry = "Text Test");

		ObjectPortlet.assertEntryDetailsLabelPresent(entryLabel = "Field");

		ObjectPortlet.assertEntryDetailsValuePresent(entryValue = "Text Test");
	}

	@description = "LPS-138755 - Add an entry and make sure the author value is correctly displayed"
	@priority = "5"
	test CanViewUserNameOnAuthorColumn {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 275",
			objectName = "CustomObject275",
			pluralLabelName = "Custom Objects 275");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject275");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject275");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject275",
			value = "Text test");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject275");

		ObjectPortlet.assertAuthorColumnDisplaysUserName(
			authorName = "Test Test",
			column = "Author");
	}

	@description = "LPS-135393 - Verify that the columns ID, Field(s) and Workflow Status are displayed"
	@priority = "5"
	test ColumnsAreDisplayed {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 276",
			objectName = "CustomObject276",
			pluralLabelName = "Custom Objects 276");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject276");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject276");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject276",
			value = "String");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject276");

		WaitForPageLoad();

		ObjectPortlet.assertGenericEntryColumnIsDisplayed(fieldLabelName = "ID");

		ObjectPortlet.assertFieldEntryColumnIsDisplayed(fieldLabelName = "Field");

		ObjectPortlet.assertGenericEntryColumnIsDisplayed(fieldLabelName = "Status");
	}

	@description = "LPS-135393 - Verify that a Date entry is correctly displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "4"
	test DateDisplayedOnAutoGeneratedTable {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 277",
			objectName = "CustomObject277",
			pluralLabelName = "Custom Objects 277");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Date",
			fieldLabelName = "Date",
			fieldName = "customObjectField",
			fieldType = "Date",
			isRequired = "false",
			objectName = "CustomObject277");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject277");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject277",
			value = "2021-09-23");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject277");

		ObjectPortlet.viewEntry(entry = "Sep 23, 2021");
	}

	@description = "LPS-135393 - Verify that a Double entry is correctly displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "4"
	test DoubleDisplayedOnAutoGeneratedTable {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 278",
			objectName = "CustomObject278",
			pluralLabelName = "Custom Objects 278");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Decimal",
			fieldLabelName = "Double",
			fieldName = "customObjectField",
			fieldType = "Double",
			isRequired = "false",
			objectName = "CustomObject278");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject278");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject278",
			value = "1.54");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject278");

		ObjectPortlet.viewEntry(entry = "1.54");
	}

	@description = "LPS-138745 - Verify that duplicated entry is not submitted when refreshing the Object portlet"
	@priority = "4"
	test DuplicatedEntryNotSubmittedWhenRefreshingPage {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 279",
			objectName = "CustomObject279",
			pluralLabelName = "Custom Objects 279");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject279");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject279");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject279");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "Test Entry");

		Refresh();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject279");

		ObjectPortlet.assertDuplicatedEntryNotPresent(entry = "Test Entry");
	}

	@description = "LPS-135393 - Verify the empty state when searching for a value that does not exist on the auto-generated table on the Custom Object Portlet"
	@priority = "3"
	test EmptyStateDisplayedForSearch {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 280",
			objectName = "CustomObject280",
			pluralLabelName = "Custom Objects 280");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject280");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject280");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject280",
			value = "Test text");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject280");

		ObjectPortlet.searchEntry(entryName = "Lorem ipsum");

		ObjectAdmin.assertNoResultsWereFound();
	}

	@description = "LPS-135393 - Verify the empty state when searching for a value that does not exist on the dropdown to select the columns to be displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "3"
	test EmptyStateDisplayedForSearchOnDropdownToSelectColumns {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 281",
			objectName = "CustomObject281",
			pluralLabelName = "Custom Objects 281");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject281");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject281");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject281",
			value = "Test text");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject281");

		ObjectPortlet.searchColumn(columnName = "test");

		ObjectPortlet.assertNoFieldsWereFound();
	}

	@description = "LPS-135393 - Verify if the empty state is displayed when there is no entry on the Custom Object Portlet"
	@priority = "4"
	test EmptyStateIsDisplayedWhenNoEntry {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 282",
			objectName = "CustomObject282",
			pluralLabelName = "Custom Objects 282");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject282");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject282");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject282");

		ObjectAdmin.assertNoResultsWereFound();
	}

	@description = "LPS-135393 - Verify that an Integer entry is correctly displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "4"
	test IntegerDisplayedOnAutoGeneratedTable {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 283",
			objectName = "CustomObject283",
			pluralLabelName = "Custom Objects 283");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Integer",
			fieldLabelName = "Integer",
			fieldName = "customObjectField",
			fieldType = "Integer",
			isRequired = "false",
			objectName = "CustomObject283");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject283");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject283",
			value = "123456789");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject283");

		ObjectPortlet.viewEntry(entry = "123456789");
	}

	@description = "LPS-135393 - Verify that a Long entry is correctly displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "4"
	test LongDisplayedOnAutoGeneratedTable {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 284",
			objectName = "CustomObject284",
			pluralLabelName = "Custom Objects 284");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "LongInteger",
			fieldLabelName = "Long",
			fieldName = "customObjectField",
			fieldType = "Long",
			isRequired = "false",
			objectName = "CustomObject284");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject284");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject284",
			value = "1234567891234567");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject284");

		ObjectPortlet.viewEntry(entry = "1234567891234567");
	}

	@description = "LPS-135393 - Verify that a String entry is correctly displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "5"
	test StringDisplayedOnAutoGeneratedTable {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 285",
			objectName = "CustomObject285",
			pluralLabelName = "Custom Objects 285");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject285");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject285");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject285",
			value = "test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test ");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject285");

		ObjectPortlet.viewEntry(entry = "test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test ");
	}

	@description = "LPS-135393 - Verify the table is updated when changing a page on the Custom Object Portlet"
	@priority = "3"
	test TableUpdatedWhenChangingPage {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 286",
			objectName = "CustomObject286",
			pluralLabelName = "Custom Objects 286");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject286");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject286");

		for (var number : list "1,2,3,4,5") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject286",
				value = "Test text ${number}");
		}

		ObjectAdmin.goToCustomObject(objectName = "CustomObject286");

		ObjectPortlet.changePagination(itemsPerPage = "4 items");

		ObjectPortlet.checkAnyPage(pageNumber = "2");

		ObjectPortlet.viewEntry(entry = "Test text 5");

		ObjectPortlet.assertEntryNotPresent(entry = "Test text 1");

		ObjectPortlet.assertEntryNotPresent(entry = "Test text 2");

		ObjectPortlet.assertEntryNotPresent(entry = "Test text 3");

		ObjectPortlet.assertEntryNotPresent(entry = "Test text 4");
	}

	@description = "LPS-135393 - Verify the table is updated when changing the pagination number on the Custom Object Portlet"
	@priority = "3"
	test TableUpdatedWhenChangingPaginationNumber {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 287",
			objectName = "CustomObject287",
			pluralLabelName = "Custom Objects 287");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject287");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject287");

		for (var number : list "1,2,3,4,5,6,7,8") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject287",
				value = "Test text ${number}");
		}

		ObjectAdmin.goToCustomObject(objectName = "CustomObject287");

		ObjectPortlet.changePagination(itemsPerPage = "4 items");

		ObjectPortlet.viewEntry(entry = "Test text 1");

		ObjectPortlet.viewEntry(entry = "Test text 2");

		ObjectPortlet.viewEntry(entry = "Test text 3");

		ObjectPortlet.viewEntry(entry = "Test text 4");

		ObjectPortlet.assertEntryNotPresent(entry = "Test text 5");

		ObjectPortlet.assertEntryNotPresent(entry = "Test text 6");

		ObjectPortlet.assertEntryNotPresent(entry = "Test text 7");

		ObjectPortlet.assertEntryNotPresent(entry = "Test text 8");
	}

}