@component-name = "portal-object"
definition {

	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectAdmin.deleteAllCustomObjectsViaAPI();
		}
	}

	@description = "LPS-135390 - Verify it is possible to view and access the Object Admin portlet with the Access in Control Panel permission"
	@priority = "4"
	test CanAccessObjectAdminWithAccessPermission {
		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_object_definitions_portlet_ObjectDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.object.model.ObjectDefinition",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectPortlet.assertIsDisplayedOnControlPanel(itemMenu = "Objects");

		ObjectAdmin.openObjectAdmin();

		CreateObject.assertCustomObject(labelName = "User");

		CreateObject.assertCustomObject(labelName = "Commerce Order");
	}

	@description = "LPS-135397 - Verify if it's possible to add a Block"
	@priority = "5"
	test CanAddBlock {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 1",
			objectName = "CustomObject1",
			pluralLabelName = "Custom Objects 1");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject1");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 1");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(tabName = "Field Tab");

		ObjectAdmin.addLayoutBlockViaUI(blockName = "Block Name");

		ObjectAdmin.assertBlockIsPresent(fieldBlockName = "Block Name");
	}

	@description = "LPS-135397 - Verify if it's possible to add Entries with Custom Layout Created"
	@priority = "4"
	test CanAddEntriesWithCustomLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 2",
			objectName = "CustomObject2",
			pluralLabelName = "Custom Objects 2");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject2");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject2");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 2");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "2",
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject2");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject2");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry 1");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject2");

		ObjectPortlet.viewEntry(entry = "Entry 1");
	}

	@description = "LPS-135635 - Verify it is possible to add a field after the Object is published and submit entries to it"
	@priority = "5"
	test CanAddFieldAndViewEntriesAfterPublished {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 3",
			objectName = "CustomObject3",
			pluralLabelName = "Custom Objects 3");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject3");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject3");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject3");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject3");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "String Entry");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject3");

		ObjectPortlet.viewEntry(entry = "String Entry");
	}

	@description = "LPS-135397 - Verify if it's possible to add a Field for the Block with one column"
	@priority = "4"
	test CanAddFieldForBlockOneColumn {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 4",
			objectName = "CustomObject4",
			pluralLabelName = "Custom Objects 4");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject4");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject4");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 4");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block Name",
			columnsNumber = "1",
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		CreateObject.assertFieldAddedOnBlock(fieldLabelName = "Custom Field");
	}

	@description = "LPS-135397 - Verify if it's possible to add a Field for the Block with three columns"
	@priority = "4"
	test CanAddFieldForBlockThreeColumns {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 5",
			objectName = "CustomObject5",
			pluralLabelName = "Custom Objects 5");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject5");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject5");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 5");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block Name",
			columnsNumber = "3",
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		CreateObject.assertFieldAddedOnBlock(fieldLabelName = "Custom Field");
	}

	@description = "LPS-135397 - Verify if it's possible to add a Field for the Block with two columns"
	@priority = "4"
	test CanAddFieldForBlockTwoColumns {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 6",
			objectName = "CustomObject6",
			pluralLabelName = "Custom Objects 6");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject6");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject6");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 6");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block Name",
			columnsNumber = "2",
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		CreateObject.assertFieldAddedOnBlock(fieldLabelName = "Custom Field");
	}

	@description = "LPS-135397 - Verify if it's possible to add a Tab with Fields Type"
	@priority = "5"
	test CanAddFieldTab {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 7",
			objectName = "CustomObject7",
			pluralLabelName = "Custom Objects 7");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject7");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 7");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(tabName = "Field Tab");

		ObjectAdmin.assertFieldTabIsPresent(fieldTabName = "Field Tab");
	}

	@description = "LPS-139803 - Verify it is possible to add a Object Entry Title Field"
	@priority = "5"
	test CanAddObjectEntryTitleField {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 8",
			objectName = "CustomObject8",
			pluralLabelName = "Custom Objects8");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject8");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 8");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		CreateObject.saveObject();

		CreateObject.assertTitleFieldIsSelected(fieldLabel = "Custom Field");
	}

	@description = "LPS-135390 - Verify it is possible to add an Object with the Add Object Definition permission"
	@priority = "4"
	test CanAddObjectWithAddPermission {
		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS_APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS_RESOURCE_PERMISSION_ADD_OBJECT_DEFINITION",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Navigator.openURL();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object 9",
			pluralLabelName = "Custom Objects 9");

		ObjectAdmin.saveCustomObject();

		CreateObject.assertCustomObject(labelName = "Custom Object 9");
	}

	@description = "LPS-135400 - Verify it is possible to add a relation with an entry through the Relationship field"
	@priority = "5"
	test CanAddRelationOnRelationshipField {
		property portal.acceptance = "quarantine";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 141652",
			objectName = "CustomObject141652",
			pluralLabelName = "Custom Objects 141652");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject141652");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject141652",
			objectName_2 = "CustomObject141652",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject141652");

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject141652",
				value = "Entry ${fieldEntry}");
		}

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject141652");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 141652");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		Button.clickSave();

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "1",
			fieldList = "Custom Field,Relationship",
			tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject141652");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		ObjectPortlet.selectRelationshipFieldEntry(
			entry = "",
			newEntry = "Entry B");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject141652");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		ObjectPortlet.gotoRelationshipTab();

		ObjectPortlet.viewEntry(entry = "Entry A");
	}

	@description = "LPS-135400 - Verify it is possible to add many relations through the Relationship tab"
	@priority = "5"
	test CanAddRelationOnRelationshipTab {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 10",
			objectName = "CustomObject10",
			pluralLabelName = "Custom Objects 10");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject10");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject10",
			objectName_2 = "CustomObject10",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject10");

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject10",
				value = "Entry ${fieldEntry}");
		}

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject10");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 10");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		CreateObject.saveObject();

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "1",
			fieldList = "Custom Field,Relationship",
			tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject10");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		ObjectAdmin.gotoRelationshipsTab();

		CreateObject.addRelationshipAndSelectEntry(titleFieldName = "Entry B");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject10");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		CreateObject.assertEntrySelectedOnRelationshipField(entry = "Entry A");
	}

	@description = "LPS-135549 - Verify it is possible to cancel the creation of a Custom Object"
	@priority = "4"
	test CanCancelCreationCustomObject {
		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object 11",
			pluralLabelName = "Custom Objects11");

		Button.clickCancel();

		AssertElementNotPresent(
			key_name = "CustomObject11",
			key_system = "No",
			locator1 = "ObjectAdmin#VIEW_OBJECT");
	}

	@description = "LPS-135549 - Verify it is possible to cancel the creation of a Field"
	@priority = "4"
	test CanCancelCreationField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 12",
			objectName = "CustomObject12",
			pluralLabelName = "Custom Objects 12");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 12");

		ObjectAdmin.goToFieldsTab();

		LexiconEntry.gotoAdd();

		Type(
			locator1 = "ObjectField#LABEL_INPUT",
			value1 = "Custom Field");

		ObjectField.selectType(fieldType = "Text");

		Button.clickCancel();

		ObjectAdmin.assertObjectFieldNotPresent(fieldLabel = "Custom Field");
	}

	@description = "LPS-135400 - Verify it is possible to cancel the creation of a Relationship"
	@priority = "4"
	test CanCancelRelationshipCreation {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 13",
			objectName = "CustomObject13",
			pluralLabelName = "Custom Objects 13");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 13");

		ObjectAdmin.gotoRelationshipsTab();

		LexiconEntry.gotoAdd();

		Type(
			locator1 = "ObjectAdmin#LABEL_OBJECT_RELATIONSHIP",
			value1 = "Custom Relationship");

		Click(locator1 = "ObjectAdmin#RELATIONSHIPS_TYPE_FORM");

		Click(
			key_type = "One to Many",
			locator1 = "ObjectAdmin#SELECT_RELATIONSHIPS_TYPE_OPTION");

		Select(
			locator1 = "ObjectAdmin#SELECT_OBJECT_RELATIONSHIP",
			value1 = "CustomObject13");

		Button.clickCancel();

		ObjectAdmin.assertNoResultsWereFound();
	}

	@description = "LPS-135397 - Verify it is possible to Cancel the update of a Layout"
	@priority = "4"
	test CanCancelUpdateLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 14",
			objectName = "CustomObject14",
			pluralLabelName = "Custom Objects 14");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject14");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject14");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 14");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "2",
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		Click(locator1 = "ObjectAdmin#LAYOUT_INFO_TAB");

		Type(
			locator1 = "ObjectAdmin#LAYOUT_BASIC_INFO_NAME_FIELD",
			value1 = "Layout Updated");

		Button.clickCancel();

		Refresh();

		AssertTextNotEquals(
			key_name = "Layout",
			locator1 = "ObjectAdmin#TABLE_LIST_TITLE",
			value1 = "Layout Updated");
	}

	@description = "LPS-135551 - Verify it is possible to change the Panel Category Key after publishing the Object"
	@priority = "4"
	test CanChangePanelCategoryKeyAfterPublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 15",
			objectName = "CustomObject15",
			pluralLabelName = "Custom Objects 15");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject15");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject15");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 15");

		CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Users");

		CreateObject.saveObject();

		ObjectPortlet.assertObjectIsDisplayedOnControlPanel();
	}

	@description = "LPS-135397 - Verify it is possible to collapse and expand a block of fields"
	@priority = "4"
	test CanCollapseAndExpandBlock {
		property portal.upstream = "quarantine";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 16",
			objectName = "CustomObject16",
			pluralLabelName = "Custom Objects 16");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject16");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject16");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 16");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "2",
			fieldLabelName = "Custom Field",
			isCollapsible = "Yes",
			tabName = "Field Tab");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject16");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject16");

		LexiconEntry.gotoAdd();

		CreateObject.assertCanCollapseAndExpandEntryField();
	}

	@description = "LPS-135549 - Verify it is possible to create a BigDecimal field"
	@priority = "4"
	test CanCreateBigDecimalField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 17",
			objectName = "CustomObject17",
			pluralLabelName = "Custom Objects17");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 17");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "Precision Decimal");

		Refresh();

		ObjectAdmin.assertObjectField(
			fieldLabel = "Custom Field",
			fieldType = "PrecisionDecimal");
	}

	@description = "LPS-135549 - Verify it is possible to create a Boolean field"
	@priority = "4"
	test CanCreateBooleanField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 18",
			objectName = "CustomObject18",
			pluralLabelName = "Custom Objects 18");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 18");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "Boolean");

		Refresh();

		ObjectAdmin.assertObjectField(
			fieldLabel = "Custom Field",
			fieldType = "Boolean");
	}

	@description = "LPS-135549 - Verify if it is possible to create a Custom Object"
	@priority = "5"
	test CanCreateCustomObject {
		property portal.acceptance = "true";

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object 19",
			pluralLabelName = "Custom Objects 19");

		ObjectAdmin.saveCustomObject();

		CreateObject.assertCustomObject(labelName = "Custom Object 19");
	}

	@description = "LPS-135549 - Verify it is possible to create a Date field"
	@priority = "4"
	test CanCreateDateField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 20",
			objectName = "CustomObject20",
			pluralLabelName = "Custom Objects 20");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 20");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "Date");

		Refresh();

		ObjectAdmin.assertObjectField(
			fieldLabel = "Custom Field",
			fieldType = "Date");
	}

	@description = "LPS-135549 - Verify it is possible to create a Double field"
	@priority = "4"
	test CanCreateDoubleField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 21",
			objectName = "CustomObject21",
			pluralLabelName = "Custom Objects 21");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 21");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "Decimal");

		Refresh();

		ObjectAdmin.assertObjectField(
			fieldLabel = "Custom Field",
			fieldType = "Decimal");
	}

	@description = "LPS-135549 - Verify it is possible to create an Integer field"
	@priority = "4"
	test CanCreateIntegerField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 22",
			objectName = "CustomObject22",
			pluralLabelName = "Custom Objects 22");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 22");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "Integer");

		Refresh();

		ObjectAdmin.assertObjectField(
			fieldLabel = "Custom Field",
			fieldType = "Integer");
	}

	@description = "LPS-135397 - Verify if it's possible to create a Layout for an Object"
	@priority = "5"
	test CanCreateLayout {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 23",
			objectName = "CustomObject23",
			pluralLabelName = "Custom Objects 23");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 23");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.addObjectLayoutViaUI(layoutName = "Layout Name");

		ObjectAdmin.assertObjectLayout(layoutLabel = "Layout Name");
	}

	@description = "LPS-135549 - Verify it is possible to create a Long field"
	@priority = "4"
	test CanCreateLongField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 24",
			objectName = "CustomObject24",
			pluralLabelName = "Custom Objects 24");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 24");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "Long Integer");

		ObjectAdmin.assertObjectField(
			fieldLabel = "Custom Field",
			fieldType = "LongInteger");
	}

	@description = "LPS-135401 - Verify it is possible to create a Many to Many Relationship"
	@priority = "5"
	test CanCreateManyToManyRelationship {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Object A 25",
			objectName = "ObjectA25",
			pluralLabelName = "Objects A");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Object B 26",
			objectName = "ObjectB26",
			pluralLabelName = "Objects B 26");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Object A 25");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship",
			object = "ObjectB26",
			type = "Many to Many");

		AssertElementPresent(
			key_label = "Relationship",
			locator1 = "ObjectAdmin#RELATIONSHIP_LABEL");
	}

	@description = "LPS-135400 - Verify it is possible to create a One to Many Relationship"
	@priority = "4"
	test CanCreateOneToManyRelationship {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object A 27",
			objectName = "CustomObjectA27",
			pluralLabelName = "Custom Objects A 27");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object B 28",
			objectName = "CustomObjectB28",
			pluralLabelName = "Custom Objects B 28");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A 27");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship",
			object = "CustomObjectB28",
			type = "One to Many");

		AssertElementPresent(
			key_label = "Relationship",
			locator1 = "ObjectAdmin#RELATIONSHIP_LABEL");
	}

	@description = "LPS-136595 - Verify it is possible to create a Picklist field"
	@priority = "4"
	test CanCreatePicklistField {
		Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");

		Picklist.addPicklistItemViaAPI(
			itemKey = "0",
			itemName = "Item Test",
			picklistName = "Custom Picklist");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 29",
			objectName = "CustomObject29",
			pluralLabelName = "Custom Objects 29");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 29");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field Picklist",
			fieldPicklist = "Custom Picklist",
			fieldType = "Picklist");

		ObjectAdmin.assertObjectField(
			fieldLabel = "Field Picklist",
			fieldType = "Picklist");
	}

	@description = "LPS-135549 - Verify it is possible to create a String field"
	@priority = "5"
	test CanCreateStringField {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 30",
			objectName = "CustomObject30",
			pluralLabelName = "Custom Objects 30");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 30");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "Text");

		Refresh();

		ObjectAdmin.assertObjectField(
			fieldLabel = "Custom Field",
			fieldType = "Text");
	}

	@description = "LPS-137879 - Verify it is not possible to delete a Custom Object field after the Object is published"
	@priority = "4"
	test CanDeleteCustomObjectFieldAfterPublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 31",
			objectName = "CustomObject31",
			pluralLabelName = "Custom Objects 31");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject31");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject31");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field Delete",
			fieldName = "customObjectFieldDelete",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject31");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 31");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.deleteObjectField(fieldName = "Custom Field Delete");

		ObjectAdmin.assertObjectFieldNotPresent(fieldLabel = "Custom Field Delete");
	}

	@description = "LPS-137879 - Verify it is possible to delete a Custom Object field before the Object is published"
	@priority = "4"
	test CanDeleteCustomObjectFieldBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 32",
			objectName = "CustomObject32",
			pluralLabelName = "Custom Objects 32");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject32");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 32");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.deleteObjectField(fieldName = "Custom Field");

		ObjectAdmin.assertObjectFieldNotPresent(fieldLabel = "Custom Field");
	}

	@description = "LPS-135397 - Verify if it's possible to delete a Field"
	@priority = "5"
	test CanDeleteFieldOnLayout {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 33",
			objectName = "CustomObject33",
			pluralLabelName = "Custom Objects 33");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject33");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject33");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 33");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block Name",
			columnsNumber = "1",
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		CreateObject.deleteFieldOnBlock();

		CreateObject.assertFieldNotPresentInBlock(fieldLabelName = "Custom Field");
	}

	@description = "LPS-135397 - Verify if it's possible to delete a Layout for an Object"
	@priority = "5"
	test CanDeleteLayout {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 34",
			objectName = "CustomObject34",
			pluralLabelName = "Custom Objects 34");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject34");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 34");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "Delete");

		ObjectAdmin.assertObjectLayoutNotPresent(layoutLabel = "Layout Name");
	}

	@description = "LPS-135390 - Verify it is possible to delete an Object with the Delete permission"
	@priority = "4"
	test CanDeleteObjectWithDeletePermission {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 35",
			objectName = "CustomObject35",
			pluralLabelName = "Custom Objects 35");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS_APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects 35",
			roleTitle = "Regular Role",
			roleType = "Regular");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS_RESOURCE_PERMISSION_VIEW_OBJECT_DEFINITION_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS_RESOURCE_PERMISSIONS_DELETE_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Navigator.openURL();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		CreateObject.deleteObjectViaUI(objectLabel = "Custom Object 35");

		CreateObject.assertObjectNotPresent(objectLabel = "Custom Object 35");
	}

	@description = "LPS-135401 - Verify that it is possible to delete a relation with an entry on the Relationship tab"
	@priority = "5"
	test CanDeleteRelationOnRelationshipTab {
		property portal.acceptance = "quarantine";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 141661",
			objectName = "CustomObject141661",
			pluralLabelName = "Custom Objects 141661");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject141661");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject141661",
			objectName_2 = "CustomObject141661",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject141661");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 141661");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		Button.clickSave();

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "1",
			fieldList = "Custom Field,Relationship",
			tabName = "Field Tab");

		ObjectAdmin.addTabFieldsOnLayout(tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject141661");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject141661",
			value = "Entry A");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject141661");

		ObjectAdmin.addObjectStringFieldEntryViaUI(
			entryOption = "Entry A",
			entryValue = "Entry B");

		ObjectAdmin.gotoRelationshipsTab();

		CreateObject.addRelationshipAndSelectEntry(titleFieldName = "Entry A");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject141661");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		CreateObject.deleteEntryInRelationshipTab();

		ObjectPortlet.assertEntryNotPresent(entry = "Entry B");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject141661");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		ObjectPortlet.assertEntryNotPresent(entry = "Entry A");
	}

	@description = "LPS-135400 - Verify it is possible to delete a Relationship"
	@priority = "5"
	test CanDeleteRelationship {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 36",
			objectName = "CustomObject36",
			pluralLabelName = "Custom Objects 36");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject36",
			objectName_2 = "CustomObject36",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 36");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "Delete");

		ObjectAdmin.assertNoResultsWereFound();
	}

	@description = "LPS-135390 - Verify it is not possible to add an Object without the Add Object Definition permission"
	@priority = "5"
	test CannotAddObjectWithoutAddPermission {
		property portal.acceptance = "true";

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS_APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		Navigator.openURL();

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.assertPlusButtonIsNotPresent();
	}

	@description = "LPS-135397 - Verify if it's not possible to add a Tab with Relationship Type in an Object without Relashionsip"
	@priority = "4"
	test CannotAddRelationshibTabWithoutRelationship {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 37",
			objectName = "CustomObject37",
			pluralLabelName = "Custom Objects 37");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject37");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 37");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(tabName = "Relationship Tab");

		Click(
			key_tab = "Save",
			locator1 = "Button#TAB_SUBMIT_BTN");

		ObjectAdmin.assertObjectLayoutRelationshipFieldRequiredError();
	}

	@description = "LPS-135397 - Verify that the Relationship tab cannot be added first"
	@priority = "4"
	test CannotAddRelationshipTabFirst {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 38",
			objectName = "CustomObject38",
			pluralLabelName = "Custom Objects 38");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject38");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 38");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.goToLayoutTabOnLayouts();

		CreateObject.assertCannotAddRelationshipTabFirst();
	}

	@description = "LPS-135549 - Verify that it is not possible to create a Field with a duplicated Field Name"
	@priority = "4"
	test CannotCreateDuplicatedFieldName {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 39",
			objectName = "CustomObject39",
			pluralLabelName = "Custom Objects 39");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject39");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 39");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "Text");

		AssertTextEquals(
			locator1 = "Message#ERROR",
			value1 = "This name is already in use. Try another one.");
	}

	@description = "LPS-135549 - Verify that it is not possible to create a Object with a duplicated Object Name"
	@priority = "4"
	test CannotCreateDuplicatedObjectName {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 40",
			objectName = "CustomObject40",
			pluralLabelName = "Custom Objects 40");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object 40",
			fieldName = "CustomObject40",
			pluralLabelName = "Custom Objects 40");

		ObjectAdmin.saveCustomObject();

		AssertTextEquals(
			locator1 = "Message#ERROR",
			value1 = "This name is already in use. Try another one.");
	}

	@description = "LPS-135400 - Verify it is not possible to create duplicated Relationship name"
	@priority = "4"
	test CannotCreateDuplicatedRelationshipName {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 41",
			objectName = "CustomObject41",
			pluralLabelName = "Custom Objects 41");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject41",
			objectName_2 = "CustomObject41",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 41");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship",
			object = "CustomObject41",
			type = "One to Many");

		AssertTextEquals(
			locator1 = "Message#ERROR",
			value1 = "Duplicate name relationship");
	}

	@description = "LPS-135390 - Verify it is not possible to delete an Object without the Delete permission"
	@priority = "4"
	test CannotDeleteObjectWithoutDeletePermission {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 42",
			objectName = "CustomObject42",
			pluralLabelName = "Custom Objects 42");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_object_definitions_portlet_ObjectDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		Navigator.openURL();

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.assertDeleteEntryButtonNotPresent(entry = "Custom Object 42");
	}

	@description = "LPS-139160 - Verify it is not possible to delete an Object via API after it was published"
	@priority = "4"
	test CannotDeletePublishedObjectViaApi {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 43",
			objectName = "CustomObject43",
			pluralLabelName = "Custom Objects 43");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject43");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject43");

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.assertObjectStatus(
			label = "Custom Object 43",
			status = "Approved");
	}

	@description = "LPS-135400 - Verify it is not possible to delete a Relationship when an Object is published"
	@priority = "5"
	test CannotDeleteRelationshipWhenPublished {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 44",
			objectName = "CustomObject44",
			pluralLabelName = "Custom Objects 44");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject44",
			objectName_2 = "CustomObject44",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject44");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 44");

		ObjectAdmin.gotoRelationshipsTab();

		AssertElementNotPresent(locator1 = "ObjectAdmin#KEBAB_MENU");

		AssertElementNotPresent(
			key_kebabOption = "Delete",
			locator1 = "ObjectAdmin#KEBAB_MENU_OPTION");
	}

	@description = "LPS-135549 - Verify it is not possible to leave the Field Name field blank"
	@priority = "4"
	test CannotLeaveFieldNameBlank {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 45",
			objectName = "CustomObject45",
			pluralLabelName = "Custom Objects 45");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 45");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldName = "",
			fieldType = "Text");

		AssertElementPresent(locator1 = "ObjectAdmin#REQUIRED_ERROR_MESSAGE");
	}

	@description = "LPS-135549 - Verify it is not possible to leave the Label field blank"
	@priority = "4"
	test CannotLeaveLabelFieldBlank {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 46",
			objectName = "CustomObject46",
			pluralLabelName = "Custom Objects 46");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 46");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "",
			fieldName = "customField",
			fieldType = "Text");

		ObjectAdmin.assertLabelFieldRequired();
	}

	@description = "LPS-135549 - Verify it is not possible to leave the Object Label field blank"
	@priority = "4"
	test CannotLeaveObjectLabelFieldBlank {
		ObjectAdmin.openObjectAdmin();

		Click(locator1 = "ObjectAdmin#ADD_CUSTOM_OBJECT");

		Type(
			locator1 = "ObjectAdmin#PLURAL_LABEL_CUSTOM_OBJECT",
			value1 = "Custom Objects 47");

		Type(
			locator1 = "ObjectAdmin#NAME_CUSTOM_OBJECT",
			value1 = "CustomObject47");

		ObjectAdmin.saveCustomObject();

		ObjectAdmin.assertObjectLabelFieldRequired();
	}

	@description = "LPS-135549 - Verify it is not possible to leave the Object Name field blank"
	@priority = "4"
	test CannotLeaveObjectNameFieldBlank {
		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object",
			fieldName = "",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.saveCustomObject();

		ObjectAdmin.assertObjectNameFieldRequired();
	}

	@description = "LPS-136595 - Verify it is not possible to leave the Picklist field empty when creating an Object Picklist field"
	@priority = "4"
	test CannotLeavePicklistFieldEmpty {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 48",
			objectName = "CustomObject48",
			pluralLabelName = "Custom Objects 48");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 48");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "Picklist");

		Button.clickSave();

		CreateObject.assertRequiredPicklistOnField();
	}

	@description = "LPS-135400 - Verify it is not possible to leave the Relationship Name blank"
	@priority = "4"
	test CannotLeaveRelationshipNameBlank {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 49",
			objectName = "CustomObject49",
			pluralLabelName = "Custom Objects 49");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 49");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship",
			name = "",
			object = "CustomObject49",
			type = "One to Many");

		AssertElementPresent(locator1 = "ObjectAdmin#NAME_OBJECT_RELATIONSHIP_REQUIRED");
	}

	@description = "LPS-135400 - Verify it is not possible to leave the Relationship Object blank"
	@priority = "4"
	test CannotLeaveRelationshipObjectBlank {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 50",
			objectName = "CustomObject50",
			pluralLabelName = "Custom Objects 50");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 50");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Custom Relationship",
			type = "One to Many");

		CreateObject.assertRequiredPicklistOnField();
	}

	@description = "LPS-135400 - Verify it is not possible to leave the Relationship Type blank"
	@priority = "4"
	test CannotLeaveRelationshipTypeBlank {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 51",
			objectName = "CustomObject51",
			pluralLabelName = "Custom Objects 51");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 51");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship",
			object = "CustomObject51");

		AssertElementPresent(locator1 = "ObjectAdmin#RELATIONSHIPS_TYPE_FORM_REQUIRED");
	}

	@description = "LPS-135549 - Verify it is not possible to leave the Type field blank"
	@priority = "4"
	test CannotLeaveTypeFieldBlank {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 52",
			objectName = "CustomObject52",
			pluralLabelName = "Custom Objects 52");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 52");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(fieldLabel = "Custom Field");

		ObjectAdmin.assertTypeFieldRequired();
	}

	@description = "LPS-135390 - Verify it is not possible to publish an Object without the Publish Object Definition permission"
	@priority = "4"
	test CannotPublishObjectWithouPublishPermission {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 53",
			objectName = "CustomObject53",
			pluralLabelName = "Custom Objects 53");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS_APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS_RESOURCE_PERMISSION_VIEW_OBJECT_DEFINITION_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Navigator.openURL();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 53");

		CreateObject.assertDisabledPublishObjectButton();
	}

	@description = "LPS-135549 - Verify it is not possible to save with the first character of the Object Name in lower case"
	@priority = "4"
	test CannotSaveLowerCaseObjectName {
		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object 54",
			fieldName = "customObject54",
			pluralLabelName = "Custom Objects 54");

		ObjectAdmin.saveCustomObject();

		AssertTextEquals(
			locator1 = "Message#ERROR",
			value1 = "The first character of a name must be an upper case letter.");
	}

	@description = "LPS-135549 - Verify it is not possible to save with special characters for the Field Name"
	@priority = "4"
	test CannotSaveSpecialCharacterFieldName {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 55",
			objectName = "CustomObject55",
			pluralLabelName = "Custom Objects 55");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 55");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldName = "customField#$%",
			fieldType = "Long Integer");

		AssertTextEquals(
			locator1 = "Message#ERROR",
			value1 = "Name must only contain letters and digits.");
	}

	@description = "LPS-135549 - Verify it is not possible to save with the first character of the Field Name in upper case"
	@priority = "4"
	test CannotSaveUpperCaseFieldName {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 56",
			objectName = "CustomObject56",
			pluralLabelName = "Custom Objects 56");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 56");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldName = "CustomField",
			fieldType = "Text");

		AssertTextEquals(
			locator1 = "Message#ERROR",
			value1 = "The first character of a name must be an lower case letter.");
	}

	@description = "LPS-135549 - Verify it is not possible to save with special characters for the Object Name"
	@priority = "4"
	test CannotSaveWithSpecialCharacterForObjectName {
		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object 57",
			pluralLabelName = "Custom Objects 57");

		Type(
			locator1 = "ObjectAdmin#NAME_CUSTOM_OBJECT",
			value1 = "ObjectTest@");

		ObjectAdmin.saveCustomObject();

		Alert.viewErrorMessage(errorMessage = "Name must only contain letters and digits");
	}

	@description = "LPS-135397 - Verify it is not possible to set a layout as default without all the required fields on the first tab"
	@priority = "4"
	test CannotSetLayoutDefaultWithoutAllRequiredFieldsOnFirstTab {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 58",
			objectName = "CustomObject58",
			pluralLabelName = "Custom Objects 58");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field Required",
			fieldName = "customObjectFieldRequired",
			fieldType = "String",
			isRequired = "true",
			objectName = "CustomObject58");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field Not Required",
			fieldName = "customObjectFieldNotRequired",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject58");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject58");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 58");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "2",
			fieldLabelName = "Custom Field Not Required",
			tabName = "Field Tab");

		Click(locator1 = "ObjectAdmin#LAYOUT_INFO_TAB");

		Click.clickAtNotVisible(locator1 = "ObjectAdmin#ENTRY_BOOLEAN_CHECKBOX");

		Button.clickSave();

		SelectFrame(locator1 = "Message#ERROR");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR",
			value1 = "All required object fields must be associated to the first tab of a default object layout");
	}

	@description = "LPS-139005 - Verify that is not possible to submit entries in a form with an Object that was inactivated"
	@priority = "4"
	test CannotSubmitEntriesInFormAfterObjectInactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 59",
			objectName = "CustomObject59",
			pluralLabelName = "Custom Objects 59");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject59");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject59");

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		PopulateObjectFormsConfiguration.openFormSettings();

		PopulateObjectFormsConfiguration.selectObject(label = "Object");

		PopulateObjectFormsConfiguration.selectCustomObject(label = "Custom Object 59");

		Form.gotoAddField(fieldType = "Text");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Custom Field");

		Form.publishForm();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 59");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		PopulateObjectFormsConfiguration.openForm();

		AssertElementPresent(
			key_text = "exclamation-full",
			locator1 = "Icon#ANY");

		MouseOver(
			key_text = "exclamation-full",
			locator1 = "Icon#ANY");

		AssertElementPresent(locator1 = "PopulateObjectFormsConfiguration#ALERT_ICON_MESSAGE");

		LexiconEntry.gotoVerticalEllipsisMenuItemNoError(menuItem = "Edit");

		FormsAdminNavigator.openPublishURL();

		FormFields.editText(
			fieldLabel = "Text",
			fieldName = "Text",
			fieldValue = "Entry 1");

		AssertClick(
			locator1 = "Button#MAIN_CONTENT_SUBMIT",
			value1 = "Submit");

		AssertElementNotPresent(locator1 = "Message#SUCCESS_DISMISSIBLE");
	}

	@description = "LPS-135400 - Verify it is not possible to submit an entry with a invalid value on the Relationship field"
	@priority = "4"
	test CannotSubmitEntryWithInvalidValueOnRelationshipField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 60",
			objectName = "CustomObject60",
			pluralLabelName = "Custom Objects 60");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject60");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject60",
			objectName_2 = "CustomObject60",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject60");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject60",
			value = "Entry A");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject60");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		ObjectPortlet.searchEntryRelationshipField(entryValue = "!@#$%");

		Button.clickSave();

		CreateObject.viewErrorValueInvalid(
			className = "feedback",
			errorMessage = "The field value is invalid.");
	}

	@description = "LPS-135635 - Verify it is not possible to update the Mandatory of a Field after the Object is published"
	@priority = "4"
	test CannotUpdateFieldMandatoryAfterPublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 62",
			objectName = "CustomObject62",
			pluralLabelName = "Custom Objects 62");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject62");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject62");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 62");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Field");

		AssertElementPresent(locator1 = "ObjectField#MANDATORY_TOGGLE_DISABLED");
	}

	@description = "LPS-135635 - Verify it is not possible to update the Name of a Field after the Object is published"
	@priority = "5"
	test CannotUpdateFieldNameAfterPublished {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 63",
			objectName = "CustomObject63",
			pluralLabelName = "Custom Objects 63");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject63");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject63");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 63");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		ObjectField.assertNameDisabled();
	}

	@description = "LPS-135635 - Verify it is not possible to update the Type of a Field after the Object is published"
	@priority = "4"
	test CannotUpdateFieldTypeAfterPublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 64",
			objectName = "CustomObject64",
			pluralLabelName = "Custom Objects 64");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject64");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject64");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 64");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		ObjectField.assertTypeDisabled();
	}

	@description = "LPS-135635 - Verify it is not possible to update the Object name after it is published"
	@priority = "5"
	test CannotUpdateObjectNameAfterPublished {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 65",
			objectName = "CustomObject65",
			pluralLabelName = "Custom Objects 65");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject65");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject65");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 65");

		CreateObject.assertDisabledObjectName();
	}

	@description = "LPS-135635 - Verify it is not possible to update the Object scope after it is published"
	@priority = "4"
	test CannotUpdateObjectScopeAfterPublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 66",
			objectName = "CustomObject66",
			pluralLabelName = "Custom Objects 66");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject66");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject66");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 66");

		AssertElementPresent(locator1 = "CreateObject#VIEW_OBJECT_SCOPE_DISABLED");
	}

	@description = "LPS-135390 - Verify it is not possible to update an Object without the Update permission"
	@priority = "4"
	test CannotUpdateObjectWithUpdatePermission {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 67",
			objectName = "CustomObject67",
			pluralLabelName = "Custom Objects 67");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_object_definitions_portlet_ObjectDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.object.model.ObjectDefinition",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 67");

		CreateObject.assertDisabledAllFields();
	}

	@description = "LPS-135635 - Verify it is not possible to update the Searchable section after the Object is published"
	@priority = "4"
	test CannotUpdateSearchableSectionAfterPublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 68",
			objectName = "CustomObject68",
			pluralLabelName = "Custom Objects 68");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject68");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject68");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 68");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		AssertElementPresent(locator1 = "ObjectAdmin#VIEW_SEARCHABLE_SECTION_DISABLED");
	}

	@description = "LPS-135649 - Verify that the Object is not displayed on Process Builder settings before Published"
	@priority = "4"
	test CannotViewObjectOnProcessBuilderBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 69",
			objectName = "CustomObject69",
			pluralLabelName = "Custom Objects 69");

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.viewDefinitionNotPresent(workflowDefinitionTitle = "Custom Object 69");
	}

	@description = "LPS-135649 - Verify that the Object is not not displayed on Workflow settings from Site Menu before Published"
	@priority = "4"
	test CannotViewObjectOnWorkflowSettingsSiteMenuBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 70",
			objectName = "CustomObject70",
			pluralLabelName = "Custom Objects 70");

		Workflow.openWorkflowAdmin(siteURLKey = "guest");

		Workflow.viewDefinitionNotPresent(workflowDefinitionTitle = "Custom Object 70");
	}

	@description = "LPS-135390 - Verify it is not possible to view an Object without the View permission"
	@priority = "4"
	test CannotViewObjectWithoutViewPermission {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 71",
			objectName = "CustomObject71",
			pluralLabelName = "Custom Objects 71");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		CreateObject.assertCustomObjectNotPresent(labelName = "Custom Object 71");
	}

	@description = "LPS-135549 - Verify it is possible to Publish a Custom Object"
	@priority = "5"
	test CanPublishCustomObject {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 72",
			objectName = "CustomObject72",
			pluralLabelName = "Custom Objects 72");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Date",
			fieldLabelName = "Not Required Field",
			fieldName = "date",
			fieldType = "Date",
			isRequired = "false",
			objectName = "CustomObject72");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.assertObjectStatus(
			label = "Custom Object 72",
			status = "Draft");

		ObjectPortlet.selectCustomObject(label = "Custom Object 72");

		ObjectAdmin.publishObjectViaUI();

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.assertObjectStatus(
			label = "Custom Object 72",
			status = "Approved");
	}

	@description = "LPS-135390 - Verify it is possible to publish an Object with the Publish Object Definition permission"
	@priority = "4"
	test CanPublishObjectWithPublishPermission {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 73",
			objectName = "CustomObject73",
			pluralLabelName = "Custom Objects 73");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject73");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_object_definitions_portlet_ObjectDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "PUBLISH_OBJECT_DEFINITION",
			resourceName = "com.liferay.object",
			roleTitle = "Regular Role");

		for (var resourceAction : list "UPDATE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com.liferay.object.model.ObjectDefinition",
				roleTitle = "Regular Role");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 73");

		Button.clickPublish();

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.assertObjectStatus(
			label = "Custom Object 73",
			status = "Approved");
	}

	@description = "LPS-135401 - Verify that it is possible to relate to many other entries on both objects"
	@priority = "5"
	test CanRelateManyOtherEntriesBothObjects {
		property portal.acceptance = "quarantine";

		for (var nameObject : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${nameObject} 74",
				objectName = "CustomObject${nameObject}74",
				pluralLabelName = "Custom Objects ${nameObject} 74");
		}

		for (var nameField : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${nameField}",
				fieldName = "customObjectField${nameField}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${nameField}74");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout ${letter}",
				objectName = "CustomObject${letter}74");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA74",
			objectName_2 = "CustomObjectB74",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "manyToMany");

		for (var letter : list "A,B") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object ${letter} 74");

			CreateObject.selectTitleField(fieldLabel = "Custom Field ${letter}");

			Button.clickSave();

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			SelectFrame(locator1 = "IFrame#IFRAME");

			Click.clickAtNotVisible(locator1 = "ObjectAdmin#ENTRY_BOOLEAN_CHECKBOX");

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = "2",
				fieldLabelName = "Custom Field ${letter}",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");

			Button.clickSave();

			Navigator.openURL();
		}

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA74");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB74");

		for (var letter : list "A,B,C") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObjectA74");

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry ${letter}");
		}

		Navigator.openURL();

		for (var letter : list "D,E,F") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObjectB74");

			ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry ${letter}");
		}

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectA74");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		ObjectAdmin.gotoRelationshipsTab();

		for (var letter : list "D,E") {
			CreateObject.addRelationshipAndSelectEntry(titleFieldName = "Entry ${letter}");

			Refresh();

			WaitForPageLoad();

			ObjectPortlet.viewEntry(entry = "Entry ${letter}");
		}

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB74");

		ObjectPortlet.viewEntryDetails(entry = "Entry F");

		ObjectAdmin.gotoRelationshipsTab();

		for (var letter : list "B,C") {
			CreateObject.addRelationshipAndSelectEntry(titleFieldName = "Entry ${letter}");

			Refresh();

			WaitForPageLoad();

			ObjectPortlet.viewEntry(entry = "Entry ${letter}");
		}
	}

	@description = "LPS-135551 - Verify it is possible to scope the Object by Company"
	@priority = "5"
	test CanScopeObjectByCompany {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 75",
			objectName = "CustomObject75",
			panelCategoryKey = "control_panel.account_entries_admin",
			pluralLabelName = "Custom Objects 75",
			scope = "company");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject75");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject75");

		Navigator.openURL();

		ApplicationsMenuHelper.openApplicationsMenu();

		ApplicationsMenu.gotoPanel(panel = "Control Panel");

		AssertElementPresent(locator1 = "ObjectPortlet#CUSTOM_OBJECT_ON_CONTROL_PANEL");
	}

	@description = "LPS-135551 - Verify it is possible to scope the Object by Site"
	@priority = "5"
	test CanScopeObjectBySite {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 75",
			objectName = "CustomObject75",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects 75",
			scope = "site");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject75");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject75");

		Navigator.openURL();

		ProductMenuHelper.openProductMenu();

		ProductMenuHelper.expandCategory(category = "Content & Data");

		AssertElementPresent(
			key_portlet = "Custom Objects 75",
			locator1 = "ProductMenu#PORTLET",
			value1 = "Custom Objects 75");
	}

	@description = "LPS-135547 - Verify it is possible to search for a Custom Object"
	@priority = "4"
	test CanSearchForCustomObject {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter} 76",
				objectName = "CustomObject${letter}76",
				pluralLabelName = "Custom Objects ${letter} 76");
		}

		ObjectAdmin.openObjectAdmin();

		Search.searchCP(searchTerm = "CustomObjectA76");

		CreateObject.assertCustomObject(labelName = "Custom Object A 76");

		CreateObject.assertCustomObjectNotPresent(labelName = "Custom Object B 76");
	}

	@description = "LPS-135547 - Verify it is possible to search for a field from a Custom Object"
	@priority = "4"
	test CanSearchForFieldCustomObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 77",
			objectName = "CustomObject77",
			pluralLabelName = "Custom Objects 77");

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject77");
		}

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 77");

		ObjectAdmin.goToFieldsTab();

		Search.searchCP(searchTerm = "customObjectFieldA");

		ObjectAdmin.assertObjectField(
			fieldLabel = "Custom Field A",
			fieldType = "Text");

		ObjectAdmin.assertObjectFieldNotPresent(fieldLabel = "Custom Field B");
	}

	@description = "LPS-135547 - Verify it is possible to search for a field from a System Object"
	@priority = "4"
	test CanSearchForFieldSystemObject {
		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "User");

		ObjectAdmin.goToFieldsTab();

		Search.searchCP(searchTerm = "GivenName");

		CreateObject.viewObject(labelName = "First Name");

		CreateObject.assertLabelBasicInfo(fieldLabel = "First Name");

		CreateObject.assertLabelBasicInfoNotPresent(fieldLabel = "Email Address");
	}

	@description = "LPS-135547 - Verify it is possible to search for a System Object"
	@priority = "4"
	test CanSearchForSystemObject {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object A 78",
			objectName = "CustomObjectA78",
			pluralLabelName = "Custom Objects A 78");

		ObjectAdmin.openObjectAdmin();

		Search.searchCP(searchTerm = "User");

		CreateObject.assertCustomObject(labelName = "User");

		CreateObject.assertCustomObjectNotPresent(labelName = "Custom Object A 78");
	}

	@description = "LPS-139803 - Verify it is possible to search for the Object Entry Title on the Relationship field"
	@priority = "4"
	test CanSearchObjectEntryTitleOnRelationshipField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 79",
			objectName = "CustomObject79",
			pluralLabelName = "Custom Objects 79");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject79");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject79",
			objectName_2 = "CustomObject79",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject79");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 79");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		CreateObject.saveObject();

		for (var fieldEntry : list "Entry ABC,Custom Field") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject79",
				value = "${fieldEntry}");
		}

		ObjectAdmin.goToCustomObject(objectName = "CustomObject79");

		LexiconEntry.gotoAdd();

		ObjectPortlet.searchEntryRelationshipField(entryValue = "Entry ABC");

		ObjectPortlet.assertRelationshipEntrySearchResultsPresent(entry = "Entry ABC");

		ObjectPortlet.assertRelationshipEntrySearchResultsNotPresent(entry = "Custom Field");
	}

	@description = "LPS-135397 - Verify if it's possible to set the block as Collapsible"
	@priority = "4"
	test CanSetBlockCollapsible {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 80",
			objectName = "CustomObject80",
			pluralLabelName = "Custom Objects 80");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject80");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 80");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(tabName = "Field Tab");

		ObjectAdmin.addLayoutBlockViaUI(blockName = "Block Name");

		CreateObject.checkToggleCollapsible();

		CreateObject.assertToggleCollapsibleChecked();
	}

	@description = "LPS-135389 - Verify it is possible to set a different language value for a Field Label"
	@priority = "4"
	test CanSetDifferentLanguageForFieldLabel {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 81",
			objectName = "CustomObject81",
			pluralLabelName = "Custom Objects 81");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject81");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 81");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Field");

		ObjectAdmin.changeLabelLanguage(newLanguage = "pt_BR");

		CreateObject.editLabel(labelName = "Campo Customizado");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject81");

		MyAccount.configureDisplaySettingsLanguage(languageName = "português (Brasil)");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject81");

		LexiconEntry.gotoAdd();

		ObjectPortlet.assertFieldLabelName(fieldLabelName = "Campo Customizado");
	}

	@description = "LPS-135389 - Verify it is possible to set a different language value for an Object Label"
	@priority = "5"
	test CanSetDifferentLanguageForObjectLabel {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 82",
			objectName = "CustomObject82",
			pluralLabelName = "Custom Objects 82");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 82");

		ObjectAdmin.changeLabelLanguage(newLanguage = "pt-BR");

		CreateObject.editLabel(labelName = "Objeto Costumizado 82");

		CreateObject.editPluralLabel(pluralLabelName = "Objetos Costumizados 82");

		CreateObject.saveObject();

		MyAccount.configureDisplaySettingsLanguage(languageName = "português (Brasil)");

		ObjectAdmin.openObjectAdmin();

		CreateObject.assertCustomObject(labelName = "Objeto Costumizado 82");
	}

	@description = "LPS-135389 - Verify it is possible to set a different language value for an Object Plural Label"
	@priority = "4"
	test CanSetDifferentLanguageForObjectPluralLabel {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 83",
			objectName = "CustomObject83",
			pluralLabelName = "Custom Objects 83");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject83");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 83");

		ObjectAdmin.changePluralLabelLanguage(newLanguage = "pt-BR");

		CreateObject.editLabel(labelName = "Objeto Customizado 83");

		CreateObject.editPluralLabel(pluralLabelName = "Objetos Customizados 83");

		CreateObject.saveObject();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject83");

		MyAccount.configureDisplaySettingsLanguage(languageName = "português (Brasil)");

		Navigator.openURL();

		ApplicationsMenuHelper.openApplicationsMenu();

		ApplicationsMenu.gotoPanel(panel = "Painel de Controle");

		AssertElementPresent(
			key_category = "Objeto",
			key_portlet = "Objetos Customizados 83",
			locator1 = "ApplicationsMenu#PORTLET");
	}

	@description = "LPS-135549 - Verify it is possible to set a field as Mandatory"
	@priority = "4"
	test CanSetFieldMandatory {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 84",
			objectName = "CustomObject84",
			pluralLabelName = "Custom Objects 84");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 84");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Custom Field",
			fieldType = "Text",
			isMandatory = "true");

		ObjectAdmin.goToFieldsDetails(label = "Custom Field");

		ObjectField.assertMandatory();
	}

	@description = "LPS-139005 - Verify that is possible to submit entries in a form with an Object that was reactivated"
	@priority = "4"
	test CanSubmitEntriesOnFormWhenReactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 85",
			objectName = "CustomObject85",
			pluralLabelName = "Custom Objects 85");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject85");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject85");

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form 1");

		PopulateObjectFormsConfiguration.openFormSettings();

		PopulateObjectFormsConfiguration.selectObject(label = "Object");

		PopulateObjectFormsConfiguration.selectCustomObject(label = "Custom Object 85");

		Form.gotoAddField(fieldType = "Text");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Custom Field");

		Form.save();

		Form.publishForm();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 85");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 85");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		Navigator.openURL();

		PopulateObjectFormsConfiguration.openForm();

		AssertElementNotPresent(
			key_text = "exclamation-full",
			locator1 = "Icon#ANY");

		FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

		FormsAdminNavigator.openPublishURL();

		FormFields.editText(
			fieldLabel = "Text",
			fieldName = "Text",
			fieldValue = "Entry 1");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject85");

		ObjectPortlet.viewEntry(entry = "Entry 1");
	}

	@description = "LPS-135397 - Verify if it's possible to update a Custom Layout Created"
	@priority = "4"
	test CanUpdateCustomLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 86",
			objectName = "CustomObject86",
			pluralLabelName = "Custom Objects 86");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject86");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject86");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 86");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "2",
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		Click(locator1 = "ObjectAdmin#LAYOUT_INFO_TAB");

		Type(
			locator1 = "ObjectAdmin#LAYOUT_BASIC_INFO_NAME_FIELD",
			value1 = "Layout Updated");

		Button.clickSave();

		Refresh();

		AssertTextEquals(
			key_name = "Layout Updated",
			locator1 = "ObjectAdmin#TABLE_LIST_TITLE",
			value1 = "Layout Updated");
	}

	@description = "LPS-135635 - Verify it is possible to update the Label of a Field after the Object is published"
	@priority = "5"
	test CanUpdateFieldLabelAfterPublished {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 87",
			objectName = "CustomObject87",
			pluralLabelName = "Custom Objects 87");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject87");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject87");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 87");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		ObjectField.typeLabel(content = "Text Update");

		ObjectField.save();

		ObjectAdmin.goToFieldsDetails(label = "Text Update");

		ObjectField.assertLabel(content = "Text Update");
	}

	@description = "LPS-135635 - Verify it is possible to update the Label of a Field before the Object is published"
	@priority = "5"
	test CanUpdateFieldLabelBeforePublished {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 88",
			objectName = "CustomObject88",
			pluralLabelName = "Custom Objects 88");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject88");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 88");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		ObjectField.typeLabel(content = "Text Update");

		ObjectField.save();

		ObjectAdmin.goToFieldsDetails(label = "Text Update");

		ObjectField.assertLabel(content = "Text Update");
	}

	@description = "LPS-135635 - Verify it is possible to update the Mandatory of a Field before the Object is published"
	@priority = "4"
	test CanUpdateFieldMandatoryBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 89",
			objectName = "CustomObject89",
			pluralLabelName = "Custom Objects 89");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject89");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 89");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		ObjectField.toggleMandatory();

		ObjectField.save();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		ObjectField.checkToggleMandatory();
	}

	@description = "LPS-135635 - Verify it is possible to update the Name of a Field before the Object is published"
	@priority = "4"
	test CanUpdateFieldNameBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 90",
			objectName = "CustomObject90",
			pluralLabelName = "Custom Objects 90");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject90");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 90");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		ObjectField.typeName(fieldName = "customObjectFieldUpdate");

		ObjectField.save();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		ObjectField.assertName(fieldName = "customObjectFieldUpdate");
	}

	@description = "LPS-135635 - Verify it is possible to update the Searchable section before the Object is published"
	@priority = "4"
	test CanUpdateFieldSearchableSectionBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 91",
			objectName = "CustomObject91",
			pluralLabelName = "Custom Objects 91");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject91");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 91");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		ObjectAdmin.clickFieldsSearchableSectionRadioOption(radioOption = "Text");

		ObjectField.save();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		ObjectField.assertSearchableLanguage(selected = "English (United States)");
	}

	@description = "LPS-135635 - Verify it is possible to update the Type of a Field before the Object is published"
	@priority = "4"
	test CanUpdateFieldTypeBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 92",
			objectName = "CustomObject92",
			pluralLabelName = "Custom Objects 92");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Text",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject92");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 92");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		ObjectField.selectType(fieldType = "Date");

		ObjectField.save();

		ObjectAdmin.goToFieldsDetails(label = "Text");

		ObjectField.assertType(fieldType = "Date");
	}

	@description = "LPS-135635 - Verify it is possible to update the Object label after it is published"
	@priority = "4"
	test CanUpdateObjectLabelAfterPublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 93",
			objectName = "CustomObject93",
			pluralLabelName = "Custom Objects 93");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject93");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject93");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 93");

		CreateObject.editLabel(labelName = "Update Custom Object 93");

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 93");

		CreateObject.assertObjectLabel(labelName = "Update Custom Object 93");
	}

	@description = "LPS-135635 - Verify it is possible to update the Object label before it is published"
	@priority = "5"
	test CanUpdateObjectLabelBeforePublished {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 94",
			objectName = "CustomObject94",
			pluralLabelName = "Custom Objects 94");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 94");

		CreateObject.editLabel(labelName = "Update Custom Object 94");

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 94");

		CreateObject.assertObjectLabel(labelName = "Update Custom Object 94");
	}

	@description = "LPS-135635 - Verify it is possible to update the Object name before it is published"
	@priority = "4"
	test CanUpdateObjectNameBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 95",
			objectName = "CustomObject95",
			pluralLabelName = "Custom Objects 95");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 95");

		ObjectAdmin.editCustomObject(fieldName = "CustomObject295");

		Navigator.gotoBack();

		ObjectPortlet.selectCustomObject(label = "Custom Object 95");

		AssertTextEquals(
			locator1 = "ObjectAdmin#DETAILS_NAME_CUSTOM_OBJECT",
			value1 = "CustomObject295");
	}

	@description = "LPS-135635 - Verify it is possible to update the Object panel category key before it is published"
	@priority = "4"
	test CanUpdateObjectPanelCategoryBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 96",
			objectName = "CustomObject96",
			pluralLabelName = "Custom Objects 96");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 96");

		CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Users");

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 96");

		CreateObject.assertPanelCategoryKey(panelCategoryKey = "Control Panel > Users");
	}

	@description = "LPS-135635 - Verify it is possible to update the Object panel category key after it is published"
	@priority = "4"
	test CanUpdateObjectPanelCategoryKeyAfterPublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 97",
			objectName = "CustomObject97",
			pluralLabelName = "Custom Objects 97");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject97");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 97");

		CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Users");

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 97");

		CreateObject.assertPanelCategoryKey(panelCategoryKey = "Control Panel > Users");
	}

	@description = "LPS-135635 - Verify it is possible to update the Object plural label after it is published"
	@priority = "4"
	test CanUpdateObjectPluralLabelAfterPublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 98",
			objectName = "CustomObject98",
			pluralLabelName = "Custom Objects 98");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject98");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject98");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 98");

		CreateObject.editPluralLabel(pluralLabelName = "Update Plural Label Custom Object 98");

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 98");

		CreateObject.assertObjectPluralLabel(pluralLabelName = "Update Plural Label Custom Object 98");
	}

	@description = "LPS-135635 - Verify it is possible to update the Object plural label before it is published"
	@priority = "4"
	test CanUpdateObjectPluralLabelBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 99",
			objectName = "CustomObject99",
			pluralLabelName = "Custom Objects 99");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 99");

		CreateObject.editPluralLabel(pluralLabelName = "Update Plural Label Custom Object 99");

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 99");

		CreateObject.assertObjectPluralLabel(pluralLabelName = "Update Plural Label Custom Object 99");
	}

	@description = "LPS-135635 - Verify it is possible to update the Object scope before it is published"
	@priority = "4"
	test CanUpdateObjectScopeBeforePublished {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 100",
			objectName = "CustomObject100",
			pluralLabelName = "Custom Objects 100");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 100");

		ObjectAdmin.selectObjectScope(fieldOption = "Site");

		Button.clickSave();

		Navigator.gotoBack();

		ObjectPortlet.viewEntry(entry = "site");
	}

	@description = "LPS-135390 - Verify it is possible to update an Object with the Update permission"
	@priority = "4"
	test CanUpdateObjectWithUpdatePermission {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 101",
			objectName = "CustomObject101",
			pluralLabelName = "Custom Objects 101");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject101");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_object_definitions_portlet_ObjectDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		for (var resourceAction : list "UPDATE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com.liferay.object.model.ObjectDefinition",
				roleTitle = "Regular Role");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 101");

		ObjectAdmin.editCustomObject(
			fieldLabelName = "Object Edit 101",
			fieldName = "ObjectEdit101",
			pluralLabelName = "Objects Edit 101");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		ObjectAdmin.selectObjectScope(fieldOption = "Company");

		CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Object");

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Object Edit 101");

		CreateObject.assertObjectLabel(labelName = "Object Edit 101");

		CreateObject.assertObjectPluralLabel(pluralLabelName = "Objects Edit 101");

		CreateObject.assertTitleFieldIsSelected(fieldLabel = "Custom Field");

		CreateObject.assertScopeFieldSelected(fieldScope = "Company");

		CreateObject.assertPanelCategoryKey(panelCategoryKey = "Control Panel > Object");
	}

	@description = "LPS-135400 - Verify it is possible to update a Relationship"
	@priority = "5"
	test CanUpdateRelationship {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 102",
			objectName = "CustomObject102",
			pluralLabelName = "Custom Objects 102");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject102",
			objectName_2 = "CustomObject102",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 102");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		CreateObject.editLabel(labelName = "Relationship Updated");

		Button.clickSave();

		Refresh();

		AssertTextEquals(
			key_label = "Relationship Updated",
			locator1 = "ObjectAdmin#RELATIONSHIP_LABEL",
			value1 = "Relationship Updated");
	}

	@description = "LPS-140342 - Verify it is possible to view and edit its own Object with only the Add Object Definition permission"
	@priority = "4"
	test CanViewAndEditObjectWithAddObjectPermission {
		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_object_definitions_portlet_ObjectDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_OBJECT_DEFINITION",
			resourceName = "com.liferay.object",
			roleTitle = "Regular Role");

		for (var resourceAction : list "UPDATE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com.liferay.object.model.ObjectDefinition",
				roleTitle = "Regular Role");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object 103",
			fieldName = "CustomObject103",
			pluralLabelName = "Custom Objects 103");

		ObjectAdmin.saveCustomObject();

		CreateObject.assertCustomObject(labelName = "Custom Object 103");

		ObjectPortlet.selectCustomObject(label = "Custom Object 103");

		ObjectAdmin.editCustomObject(
			fieldLabelName = "Object Edit 103",
			fieldName = "ObjectEdit103",
			pluralLabelName = "Objects Edit 103");

		ObjectAdmin.selectObjectScope(fieldOption = "Company");

		CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Object");

		CreateObject.saveObject();

		for (var valueFieldLabel : list "ObjectEdit103,Object Edit 103,Objects Edit 103") {
			CreateObject.assertValuesOnObjectData(fieldLabel = "${valueFieldLabel}");
		}

		CreateObject.assertValuesOnScope(
			valuePanelCategory = "Control Panel > Object",
			valueScope = "Company");
	}

	@description = "LPS-135397 - Verify if it's possible to view Entries with Custom Layout Created"
	@priority = "4"
	test CanViewEntriesWithCustomLayout {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 104",
			objectName = "CustomObject104",
			pluralLabelName = "Custom Objects 104");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject104");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject104");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 104");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "1",
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		Click(locator1 = "ObjectAdmin#LAYOUT_INFO_TAB");

		Click.clickAtNotVisible(locator1 = "ObjectAdmin#ENTRY_BOOLEAN_CHECKBOX");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject104");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject104",
			value = "Entry 1");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject104");

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		AssertElementPresent(
			key_tabName = "Field Tab",
			locator1 = "ObjectAdmin#ANY_TAB_ON_ENTRY");

		AssertElementPresent(
			key_labelName = "Block 1",
			locator1 = "ObjectAdmin#LABEL_FIELD_GROUP_TITLE");

		AssertElementPresent(
			key_labelName = "Custom Field",
			locator1 = "ObjectAdmin#LABEL_FIELD_ENTRY");

		AssertElementPresent(
			key_text = "Save",
			locator1 = "Button#ANY");

		AssertElementPresent(
			key_text = "Cancel",
			locator1 = "Button#ANY");
	}

	@description = "LPS-135397 - Verify if it's possible to view the Entry with one column"
	@priority = "4"
	test CanViewEntryWithOneColumn {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 105",
			objectName = "CustomObject105",
			pluralLabelName = "Custom Objects 105");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject105");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject105");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 105");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "1",
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject105");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject105");

		LexiconEntry.gotoAdd();

		CreateObject.assertOneColumnOnFieldEntry();
	}

	@description = "LPS-135397 - Verify if it's possible to view the Entry with three columns"
	@priority = "4"
	test CanViewEntryWithThreeColumns {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 106",
			objectName = "CustomObject106",
			pluralLabelName = "Custom Objects 106");

		for (var letter : list "A,B,C") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject106");
		}

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject106");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 106");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "3",
			fieldList = "Custom Field A,Custom Field B,Custom Field C",
			tabName = "Field Tab");

		Click(locator1 = "ObjectAdmin#LAYOUT_INFO_TAB");

		Click.clickAtNotVisible(locator1 = "ObjectAdmin#ENTRY_BOOLEAN_CHECKBOX");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject106");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject106");

		LexiconEntry.gotoAdd();

		ObjectPortlet.assertFieldAtSpecificColumn(
			fieldColumnNumber = "0",
			fieldLabel = "Custom Field A");

		ObjectPortlet.assertFieldAtSpecificColumn(
			fieldColumnNumber = "1",
			fieldLabel = "Custom Field B");

		ObjectPortlet.assertFieldAtSpecificColumn(
			fieldColumnNumber = "2",
			fieldLabel = "Custom Field C");
	}

	@description = "LPS-135397 - Verify if it's possible to view the Entry with two columns"
	@priority = "5"
	test CanViewEntryWithTwoColumns {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 107",
			objectName = "CustomObject107",
			pluralLabelName = "Custom Objects 107");

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject107");
		}

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject107");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 107");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "2",
			fieldList = "Custom Field A,Custom Field B",
			tabName = "Field Tab");

		Click(locator1 = "ObjectAdmin#LAYOUT_INFO_TAB");

		Click.clickAtNotVisible(locator1 = "ObjectAdmin#ENTRY_BOOLEAN_CHECKBOX");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject107");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject107");

		LexiconEntry.gotoAdd();

		AssertElementPresent(
			key_fieldColumnNumber = "0",
			key_fieldLabel = "Custom Field A",
			locator1 = "ObjectAdmin#FIELD_COLUMN_POSITION_ON_ENTRY_PAGE");

		AssertElementPresent(
			key_fieldColumnNumber = "1",
			key_fieldLabel = "Custom Field B",
			locator1 = "ObjectAdmin#FIELD_COLUMN_POSITION_ON_ENTRY_PAGE");
	}

	@description = "LPS-135400 - There is an explanation about each Relationship type"
	@priority = "3"
	test CanViewExplanationRelationshipTypes {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 108",
			objectName = "CustomObject108",
			pluralLabelName = "Custom Objects 108");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 108");

		ObjectAdmin.gotoRelationshipsTab();

		LexiconEntry.gotoAdd();

		Click(locator1 = "ObjectAdmin#RELATIONSHIPS_TYPE_FORM");

		ObjectAdmin.assertRelationshipsTypeDescription(
			description = "One object's entry interacts with many others object's entries.",
			type = "One to Many");

		ObjectAdmin.assertRelationshipsTypeDescription(
			description = "Multiple object's entries can interact with many others object's entries.",
			type = "Many to Many");
	}

	@description = "LPS-135549 - Verify it is possible to view the Details of a Field by clicking on the eye icon"
	@priority = "4"
	test CanViewFieldsDetailsByClickingEyeIcon {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 109",
			objectName = "CustomObject109",
			pluralLabelName = "Custom Objects 109");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject109");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 109");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.viewDetails();
	}

	@description = "LPS-135549 - Verify it is possible to view the Details of a Field by clicking on its name"
	@priority = "4"
	test CanViewFieldsDetailsByClickingName {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 110",
			objectName = "CustomObject110",
			pluralLabelName = "Custom Objects 110");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject110");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 110");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Field");

		AssertElementPresent(locator1 = "ObjectAdmin#SIDE_PANEL");
	}

	@description = "LPS-139803 - Verify it the Object Entry Title of a BigDecimal type is displayed on the Relationship field when adding an entry"
	@priority = "4"
	test CanViewObjectEntryTitleBigDecimalOnRelationshipField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 111",
			objectName = "CustomObject111",
			pluralLabelName = "Custom Objects 111");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "PrecisionDecimal",
			fieldLabelName = "BigDecimal",
			fieldName = "customObjectField",
			fieldType = "BigDecimal",
			isRequired = "false",
			objectName = "CustomObject111");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject111",
			objectName_2 = "CustomObject111",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject111");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 111");

		CreateObject.selectTitleField(fieldLabel = "BigDecimal");

		CreateObject.saveObject();

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject111",
			value = "123.123456");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject111");

		CreateObject.assertAddedEntryRelationshipIsDisplayed(entry = "123.123456");
	}

	@description = "LPS-139803 - Verify it the Object Entry Title of a Boolean type is displayed on the Relationship field when adding an entry"
	@priority = "4"
	test CanViewObjectEntryTitleBooleanOnRelationshipField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 112",
			objectName = "CustomObject112",
			pluralLabelName = "Custom Objects 112");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Boolean",
			fieldLabelName = "Boolean",
			fieldName = "customObjectField",
			fieldType = "Boolean",
			isRequired = "false",
			objectName = "CustomObject112");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject112",
			objectName_2 = "CustomObject112",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject112");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 112");

		CreateObject.selectTitleField(fieldLabel = "Boolean");

		Button.clickSave();

		ObjectAdmin.addObjectBoleanFieldEntryViaUI(
			objectName = "CustomObject112",
			value = "true");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject112");

		CreateObject.assertAddedEntryRelationshipIsDisplayed(entry = "true");
	}

	@description = "LPS-139803 - Verify it the Object Entry Title of a Date type is displayed on the Relationship field when adding an entry"
	@priority = "4"
	test CanViewObjectEntryTitleDateOnRelationshipField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 113",
			objectName = "CustomObject113",
			pluralLabelName = "Custom Objects 113");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Date",
			fieldLabelName = "Date",
			fieldName = "customObjectField",
			fieldType = "Date",
			isRequired = "false",
			objectName = "CustomObject113");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject113",
			objectName_2 = "CustomObject113",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject113");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 113");

		CreateObject.selectTitleField(fieldLabel = "Date");

		CreateObject.saveObject();

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject113",
			value = "2021-01-01");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject113");

		CreateObject.assertAddedEntryRelationshipIsDisplayed(entry = "2021-01-01");
	}

	@description = "LPS-139803 - Verify it the Object Entry Title of a Double type is displayed on the Relationship field when adding an entry"
	@priority = "4"
	test CanViewObjectEntryTitleDoubleOnRelationshipField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 114",
			objectName = "CustomObject114",
			pluralLabelName = "Custom Objects 114");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Decimal",
			fieldLabelName = "Double",
			fieldName = "customObjectField",
			fieldType = "Double",
			isRequired = "false",
			objectName = "CustomObject114");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject114",
			objectName_2 = "CustomObject114",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject114");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 114");

		CreateObject.selectTitleField(fieldLabel = "Double");

		Button.clickSave();

		WaitForPageLoad();

		Navigator.openURL();

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject114",
			value = "12.34");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject114");

		CreateObject.assertAddedEntryRelationshipIsDisplayed(entry = "12.34");
	}

	@description = "LPS-139803 - Verify it the Object Entry Title of a Integer type is displayed on the Relationship field when adding an entry"
	@priority = "4"
	test CanViewObjectEntryTitleIntegerOnRelationshipField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 115",
			objectName = "CustomObject115",
			pluralLabelName = "Custom Objects 115");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Integer",
			fieldLabelName = "Integer",
			fieldName = "customObjectField",
			fieldType = "Integer",
			isRequired = "false",
			objectName = "CustomObject115");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject115",
			objectName_2 = "CustomObject115",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject115");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 115");

		CreateObject.selectTitleField(fieldLabel = "Integer");

		Button.clickSave();

		WaitForPageLoad();

		Navigator.openURL();

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject115",
			value = "123");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject115");

		CreateObject.assertAddedEntryRelationshipIsDisplayed(entry = "123");
	}

	@description = "LPS-139803 - Verify it the Object Entry Title of a Long type is displayed on the Relationship field when adding an entry"
	@priority = "4"
	test CanViewObjectEntryTitleLongOnRelationshipField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 141616",
			objectName = "CustomObject141616",
			pluralLabelName = "Custom Objects 141616");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "LongInteger",
			fieldLabelName = "Long",
			fieldName = "customObjectField",
			fieldType = "Long",
			isRequired = "false",
			objectName = "CustomObject141616");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject141616",
			objectName_2 = "CustomObject141616",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject141616");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 141616");

		CreateObject.selectTitleField(fieldLabel = "Long");

		Button.clickSave();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject141616");

		ObjectAdmin.addObjectLongFieldEntryViaUI(entryValue = "1234567891234567");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject141616");

		CreateObject.assertAddedEntryRelationshipIsDisplayed(entry = "1234567891234567");
	}

	@description = "LPS-139803 - Verify it the Object Entry Title is displayed on the Item Selector of a fragment on a Display Page"
	@priority = "4"
	test CanViewObjectEntryTitleOnItemSelectorFragment {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 116",
			objectName = "CustomObject116",
			pluralLabelName = "Custom Objects 116");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject116");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 116");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		CreateObject.saveObject();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject116");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject116",
			value = "Test Entry");

		Navigator.openURL();

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "guest");

		DisplayPageTemplatesAdmin.addDisplayPage(
			contentType = "Custom Object 116",
			displayPageName = "Blank Display Page",
			subtype = "Custom Object 116");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "Custom Field");

		VisualizeObjectCollectionDisplay.viewMappedFragment(fieldLabel = "Custom Field");

		PageEditor.selectItemToPreviewWithObject(objectLabel = "Custom Object 116");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "Test Entry");
	}

	@description = "LPS-139803 - Verify it the Object Entry Title is displayed on the Relationship tab"
	@priority = "4"
	test CanViewObjectEntryTitleOnRelationshipTab {
		property portal.upstream = "quarantine";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 141620",
			objectName = "CustomObject141620",
			pluralLabelName = "Custom Objects 141620");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject141620");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject141620",
			objectName_2 = "CustomObject141620",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject141620");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 141620");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		CreateObject.saveObject();

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "1",
			fieldList = "Custom Field,Relationship",
			tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject141620");

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject141620",
				value = "Entry ${fieldEntry}");
		}

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject141620");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		ObjectAdmin.gotoRelationshipsTab();

		CreateObject.addRelationshipAndSelectEntry(titleFieldName = "Entry B");

		Refresh();

		ObjectPortlet.viewEntry(entry = "Entry B");
	}

	@description = "LPS-139803 - Verify if the Object Entry Title is displayed for Object entries on workflow pages (My Workflow Tasks, My Submissions, and Submissions)"
	@priority = "4"
	test CanViewObjectEntryTitleOnWorkflowPages {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 141624",
			objectName = "CustomObject141624",
			pluralLabelName = "Custom Objects 141624");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject141624");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 141624");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		CreateObject.saveObject();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject141624");

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Custom Object 141624");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject141624",
			value = "Test Entry");

		Navigator.openURL();

		ObjectAdmin.openMyWorkflowTasks();

		Navigator.gotoNavTab(navTab = "Assigned to My Roles");

		Workflow.gotoAssetViaTableTitle(workflowAssetTitle = "Test Entry");

		ObjectAdmin.openMySubmissions();

		Workflow.gotoAssetViaTableTitle(workflowAssetTitle = "Test Entry");

		ObjectAdmin.openSubmissions();

		Workflow.gotoAssetViaTableTitle(workflowAssetTitle = "Test Entry");
	}

	@description = "LPS-139803 - Verify it the Object Entry Title of a Picklist type is displayed on the Relationship field when adding an entry"
	@ignore = "Test Stub"
	@priority = "4"
	test CanViewObjectEntryTitlePicklistOnRelationshipField {

		// TODO LPS-141617 CanViewObjectEntryTitlePicklistOnRelationshipField pending implementation

	}

	@description = "LPS-139803 - Verify if the Object Entry Title is displayed when selecting to preview an object entry on a Page Template"
	@priority = "4"
	test CanViewObjectEntryTitlePreviewOnPageTemplate {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 141623",
			objectName = "CustomObject141623",
			pluralLabelName = "Custom Objects 141623");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject141623");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 141623");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		CreateObject.saveObject();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject141623");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject141623",
			value = "Test Entry");

		Navigator.openURL();

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "guest");

		DisplayPageTemplatesAdmin.addDisplayPage(
			contentType = "Custom Object 141623",
			displayPageName = "Blank Display Page",
			subtype = "Custom Object 141623");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "Custom Field");

		VisualizeObjectCollectionDisplay.viewMappedFragment(fieldLabel = "Custom Field");

		VisualizeObjectCollectionDisplay.viewEntryPreviewOnPageTemplate(entryTitle = "Test Entry");
	}

	@description = "LPS-139803 - Verify it the Object Entry Title of a String type is displayed on the Relationship field when adding an entry"
	@priority = "5"
	test CanViewObjectEntryTitleStringOnRelationshipField {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 117",
			objectName = "CustomObject117",
			pluralLabelName = "Custom Objects 117");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject117");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject117",
			objectName_2 = "CustomObject117",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject117");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 117");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		CreateObject.saveObject();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject117");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry 1");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject117");

		CreateObject.assertAddedEntryRelationshipIsDisplayed(entry = "Entry 1");
	}

	@description = "LPS-135549 - Verify it is possible to view the Details of an Object by clicking on the eye icon"
	@priority = "4"
	test CanViewObjectsDetailsByClickingEyeIcon {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 118",
			objectName = "CustomObject118",
			pluralLabelName = "Custom Objects 118");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 118");

		ObjectAdmin.assertObjectDetailsPage();
	}

	@description = "LPS-135549 - Verify it is possible to view the Details of an Object by clicking on its name"
	@priority = "4"
	test CanViewObjectsDetailsByClickingName {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 118",
			objectName = "CustomObject118",
			pluralLabelName = "Custom Objects 118");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 118");

		ObjectAdmin.assertObjectDetailsPage();
	}

	@description = "LPS-135390 - Verify it is possible to view an Object with the View permission"
	@priority = "4"
	test CanViewObjectWithViewPermission {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 119",
			objectName = "CustomObject119",
			pluralLabelName = "Custom Objects 119");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = "90",
			roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_object_definitions_portlet_ObjectDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.object.model.ObjectDefinition",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Navigator.openURL();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		CreateObject.assertCustomObject(labelName = "Custom Object 119");
	}

	@description = "LPS-135400 - Verify it is possible to view a Relationship"
	@priority = "5"
	test CanViewRelationship {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 120",
			objectName = "CustomObject120",
			pluralLabelName = "Custom Objects 120");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject120",
			objectName_2 = "CustomObject120",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 120");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.viewDetails();
	}

	@description = "LPS-135397 - Verify if it's possible to view a tab of relationship with entries"
	@priority = "5"
	test CanViewRelationshipTab {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 121",
			objectName = "CustomObject121",
			pluralLabelName = "Custom Objects 121");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject121");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject121",
			objectName_2 = "CustomObject121",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject121");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 121");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		SelectFrame(locator1 = "IFrame#IFRAME");

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "2",
			fieldLabelName = "Custom Field",
			tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		Click(locator1 = "ObjectAdmin#LAYOUT_INFO_TAB");

		Click.clickAtNotVisible(locator1 = "ObjectAdmin#ENTRY_BOOLEAN_CHECKBOX");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject121");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject121",
			value = "Entry 1");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject121");

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		Click(
			key_tabName = "Relationship Tab",
			locator1 = "ObjectAdmin#ANY_TAB_ON_ENTRY");

		AssertElementPresent(
			key_tabName = "Relationship Tab",
			locator1 = "ObjectAdmin#ANY_TAB_ON_ENTRY");
	}

	@description = "LPS-135401 - Verify if Cascade deletion type of Relationship Many to Many will allow to delete only the entry with relation but not its relations"
	@priority = "4"
	test CascadeDeletionManyToManyWillAllowDelete {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter} 122",
				objectName = "CustomObject${letter}122",
				pluralLabelName = "Custom Objects ${letter} 122");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}122");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			deletionType = "cascade",
			objectName_1 = "CustomObjectA122",
			objectName_2 = "CustomObjectB122",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "manyToMany");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObjectA122");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A 122");

		CreateObject.selectTitleField(fieldLabel = "Custom Field A");

		CreateObject.saveObject();

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "1",
			fieldLabelName = "Custom Field A",
			tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object B 122");

		CreateObject.selectTitleField(fieldLabel = "Custom Field B");

		CreateObject.saveObject();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA122");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB122");

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField${fieldEntry}",
				objectName = "CustomObject${fieldEntry}122",
				value = "Entry ${fieldEntry}");
		}

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectA122");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		ObjectAdmin.gotoRelationshipsTab();

		CreateObject.addRelationshipAndSelectEntry(titleFieldName = "Entry B");

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectA122");

		ObjectPortlet.deleteEntry(entry = "Entry A");

		ObjectPortlet.assertEntryNotPresent(entry = "Entry A");

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB122");

		ObjectPortlet.viewEntry(entry = "Entry B");
	}

	@description = "LPS-135401 - Verify if Cascade deletion type of Relationship One to Many will allow the entry with relation (from the child Object) to be deleted but not its relation"
	@priority = "4"
	test CascadeDeletionOneToManyWillAllowDeleteChild {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter} 123",
				objectName = "CustomObject${letter}123",
				pluralLabelName = "Custom Objects ${letter} 123");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}123");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			deletionType = "cascade",
			objectName_1 = "CustomObjectA123",
			objectName_2 = "CustomObjectB123",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A 123");

		CreateObject.selectTitleField(fieldLabel = "Custom Field A");

		Button.clickSave();

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObjectA123");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "1",
			fieldLabelName = "Custom Field A",
			tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object B 123");

		CreateObject.selectTitleField(fieldLabel = "Custom Field B");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA123");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB123");

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField${fieldEntry}",
				objectName = "CustomObject${fieldEntry}123",
				value = "Entry ${fieldEntry}");
		}

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB123");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		ObjectPortlet.chooseEntryOnRelationshipField(entryOption = "Entry A");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB123");

		ObjectPortlet.deleteEntry(entry = "Entry B");

		ObjectPortlet.assertEntryNotPresent(entry = "Entry B");

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectA123");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		ObjectPortlet.gotoRelationshipTab();

		ObjectPortlet.assertEntryOnRelationshipFieldNotPresent(customObject = "Entry B");
	}

	@description = "LPS-135401 - Verify if Cascade deletion type of Relationship One to Many will allow the entry with relation (from the parent Object) and its relations to be deleted"
	@priority = "5"
	test CascadeDeletionOneToManyWillAllowDeleteParent {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter} 124",
				objectName = "CustomObject${letter}124",
				pluralLabelName = "Custom Objects ${letter} 124");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}124");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			deletionType = "cascade",
			objectName_1 = "CustomObjectA124",
			objectName_2 = "CustomObjectB124",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A 124");

		CreateObject.selectTitleField(fieldLabel = "Custom Field A");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA124");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB124");

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField${fieldEntry}",
				objectName = "CustomObject${fieldEntry}124",
				value = "Entry ${fieldEntry}");
		}

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB124");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		ObjectPortlet.chooseEntryOnRelationshipField(entryOption = "Entry A");

		Button.clickSave();

		WaitForSPARefresh();

		WaitForPageLoad();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectA124");

		ObjectPortlet.deleteEntry(entry = "Entry A");

		ObjectPortlet.assertEntryNotPresent(entry = "Entry A");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB124");

		ObjectPortlet.assertEntryNotPresent(entry = "Entry B");
	}

	@description = "LPS-135401 - Verify that when adding an entry that was already related to another it will keep related to both entries"
	@priority = "4"
	test ChoosingAlreadyRelatedEntryWillKeepOnBothEntries {
		property portal.upstream = "quarantine";

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter} 125",
				objectName = "CustomObject${letter}125",
				pluralLabelName = "Custom Objects ${letter} 125");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}125");

			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout Name",
				objectName = "CustomObject${letter}125");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA125",
			objectName_2 = "CustomObjectB125",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "manyToMany");

		for (var letter : list "A,B") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object ${letter} 125");

			CreateObject.selectTitleField(fieldLabel = "Custom Field ${letter}");

			CreateObject.saveObject();

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = "1",
				fieldLabelName = "Custom Field ${letter}",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");

			Button.clickSave();
		}

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA125");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB125");

		for (var nameEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectFieldA",
				objectName = "CustomObjectA125",
				value = "Entry ${nameEntry}");
		}

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectFieldB",
			objectName = "CustomObjectB125",
			value = "Entry C");

		for (var nameEntry : list "A,B") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObjectA125");

			ObjectPortlet.viewEntryDetails(entry = "Entry ${nameEntry}");

			ObjectAdmin.gotoRelationshipsTab();

			CreateObject.addRelationshipAndSelectEntry(titleFieldName = "Entry C");

			Refresh();

			ObjectPortlet.viewEntry(entry = "Entry C");

			Navigator.openURL();
		}

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectA125");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectPortlet.viewEntry(entry = "Entry C");
	}

	@description = "LPS-135549 - Verify that the columns Name and Type are displayed for the Fields table"
	@priority = "4"
	test ColumnsAreDisplayedFieldsTable {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 126",
			objectName = "CustomObject126",
			pluralLabelName = "Custom Objects 126");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject126");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 126");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.assertFieldsTableColumnsAreDisplayed();
	}

	@description = "LPS-135549 - Verify that the columns Name, System and Status are displayed for the Objects table"
	@priority = "4"
	test ColumnsAreDisplayedObjectsTable {
		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.assertObjectColumnsAreDisplayed();
	}

	@description = "LPS-135649 - Verify that a completed entry is displayed with an Approved status"
	@priority = "5"
	test CompletedEntryDisplaysApprovedStatus {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 141629",
			objectName = "CustomObject141629",
			pluralLabelName = "Custom Objects 141629");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject141629");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject141629");

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Custom Object 141629");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject141629",
			value = "Entry 1");

		ObjectAdmin.openMyWorkflowTasks();

		Navigator.gotoNavTab(navTab = "Assigned to My Roles");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Assign to Me");

		Workflow.confirmWorkflowAction();

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Approve");

		Workflow.confirmWorkflowAction();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject141629");

		ObjectPortlet.assertEntryStauts(
			key_entry = "Entry 1",
			key_status = "Approved");
	}

	@description = "LPS-135401 - Verify if Disassociate deletion type of Relationship Many to Many will allow the entry with relation to be deleted and its relations to be disassociated"
	@priority = "4"
	test DisassociateDeletionManyToManyWillAllowDelete {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter} 127",
				objectName = "CustomObject${letter}127",
				pluralLabelName = "Custom Objects ${letter} 127");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}127");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			deletionType = "disassociate",
			objectName_1 = "CustomObjectA127",
			objectName_2 = "CustomObjectB127",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "manyToMany");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObjectA127");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A 127");

		CreateObject.selectTitleField(fieldLabel = "Custom Field A");

		Button.clickSave();

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "1",
			fieldLabelName = "Custom Field A",
			tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object B 127");

		CreateObject.selectTitleField(fieldLabel = "Custom Field B");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA127");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB127");

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField${fieldEntry}",
				objectName = "CustomObject${fieldEntry}127",
				value = "Entry ${fieldEntry}");
		}

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectA127");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		ObjectPortlet.gotoRelationshipTab();

		CreateObject.addRelationshipAndSelectEntry(titleFieldName = "Entry B");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB127");

		ObjectPortlet.deleteEntry(entry = "Entry B");

		ObjectPortlet.assertEntryNotPresent(entry = "Entry B");

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectA127");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		ObjectPortlet.gotoRelationshipTab();

		ObjectPortlet.assertEntryOnRelationshipFieldNotPresent(customObject = "Entry B");
	}

	@description = "LPS-135401 - Verify if Disassociate deletion type of Relationship One to Many will allow the entry with relation (from the child Object) to be deleted and its relation to be disassociated"
	@priority = "4"
	test DisassociateDeletionOneToManyWillAllowDeleteChild {
		for (var nameObject : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${nameObject} 128",
				objectName = "CustomObject${nameObject}128",
				pluralLabelName = "Custom Objects ${nameObject} 128");
		}

		for (var nameField : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${nameField}",
				fieldName = "customObjectField${nameField}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${nameField}128");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			deletionType = "disassociate",
			objectName_1 = "CustomObjectA128",
			objectName_2 = "CustomObjectB128",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A 128");

		CreateObject.selectTitleField(fieldLabel = "Custom Field A");

		CreateObject.saveObject();

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObjectA128");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "1",
			fieldLabelName = "Custom Field A",
			tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object B 128");

		CreateObject.selectTitleField(fieldLabel = "Custom Field B");

		CreateObject.saveObject();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA128");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB128");

		for (var nameEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField${nameEntry}",
				objectName = "CustomObject${nameEntry}128",
				value = "Entry ${nameEntry}");
		}

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB128");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		ObjectPortlet.chooseEntryOnRelationshipField(entryOption = "Entry A");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB128");

		ObjectPortlet.deleteEntry(entry = "Entry B");

		ObjectPortlet.assertEntryNotPresent(entry = "Entry B");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectA128");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		ObjectPortlet.gotoRelationshipTab();

		ObjectPortlet.assertEntryNotPresent(entry = "Entry B");
	}

	@description = "LPS-135401 - Verify if Disassociate deletion type of Relationship One to Many will allow the entry with relation (from the parent Object) to be deleted and its relations to be disassociated"
	@priority = "5"
	test DisassociateDeletionOneToManyWillAllowDeleteParent {
		for (var nameObject : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${nameObject} 129",
				objectName = "CustomObject${nameObject}129",
				pluralLabelName = "Custom Objects ${nameObject} 129");
		}

		for (var nameField : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${nameField}",
				fieldName = "customObjectField${nameField}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${nameField}129");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			deletionType = "disassociate",
			objectName_1 = "CustomObjectA129",
			objectName_2 = "CustomObjectB129",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A 129");

		CreateObject.selectTitleField(fieldLabel = "Custom Field A");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA129");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB129");

		for (var nameEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField${nameEntry}",
				objectName = "CustomObject${nameEntry}129",
				value = "Entry ${nameEntry}");
		}

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB129");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		ObjectPortlet.chooseEntryOnRelationshipField(entryOption = "Entry A");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectA129");

		ObjectPortlet.deleteEntry(entry = "Entry A");

		ObjectPortlet.assertEntryNotPresent(entry = "Entry A");

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB129");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		ObjectPortlet.assertEntryOnRelationshipFieldNotPresent(customObject = "Entry A");
	}

	@description = "LPS-135547 - Verify the empty state when searching for an Object returns nothing"
	@priority = "3"
	test EmptyStateNoResultObject {
		ObjectAdmin.openObjectAdmin();

		Search.searchCP(searchTerm = "Object X 130");

		ObjectAdmin.assertNoResultsWereFound();
	}

	@description = "LPS-135547 - Verify the empty state when searching for an Object field returns nothing"
	@priority = "3"
	test EmptyStateNoResultObjectField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 130",
			objectName = "CustomObject130",
			pluralLabelName = "Custom Objects 130");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject130");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 130");

		ObjectAdmin.goToFieldsTab();

		Search.searchCP(searchTerm = "CustomObject X 130");

		ObjectAdmin.assertNoResultsWereFound();
	}

	@description = "LPS-135400 - Verify the empty state message when there is no Relationship"
	@priority = "3"
	test EmptyStateWhenNoRelationship {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 131",
			objectName = "CustomObject131",
			pluralLabelName = "Custom Objects 131");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 131");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.assertNoResultsWereFound();
	}

	@description = "LPS-135549 - Verify that the Field Name is autofilled when Label is filled"
	@priority = "4"
	test FieldNameIsAutofilled {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 132",
			objectName = "CustomObject132",
			pluralLabelName = "Custom Objects 132");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 132");

		ObjectAdmin.goToFieldsTab();

		CreateObject.assertObjectFieldNameIsAutofilled(
			fieldLabel = "Custom Field",
			fieldName = "customField");
	}

	@description = "LPS-135397 - Verify if it's not possible to add a Field without Choose an Option Field"
	@priority = "4"
	test FieldOptionRequired {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 133",
			objectName = "CustomObject133",
			pluralLabelName = "Custom Objects 133");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObject133");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 133");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(tabName = "Field Tab");

		ObjectAdmin.addLayoutBlockViaUI(blockName = "Block Name");

		ObjectAdmin.assertNotPossibleAddFieldOnBlockWithoutChooseOptionField();
	}

	@description = "LPS-140097 - Verify that other fields are not deleted when a Relationship field is deleted after a Relationship is deleted"
	@priority = "4"
	test FieldsAreNotDeletedWhenRelationshipDeleted {
		for (var nameObject : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${nameObject} 134",
				objectName = "CustomObject${nameObject}134",
				pluralLabelName = "Custom Objects ${nameObject} 134");
		}

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field B",
			fieldName = "customObjectFieldB",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObjectB134");

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA134",
			objectName_2 = "CustomObjectB134",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A 134");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "Delete");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object B 134");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.assertObjectField(
			fieldLabel = "Custom Field",
			fieldType = "Text");
	}

	@description = "LPS-137874 - Verify that Objects created on a Virtual Instance are not displayed on the Forms Settings, Collection Providers and Display Page Template of the Main Instance and vice versa"
	@ignore = "Test Stub"
	@priority = "4"
	test FormCollectionProvidersDisplayPageDisplayOnlyItsInstanceObjects {

		// TODO LPS-141684 FormCollectionProvidersDisplayPageDisplayOnlyItsInstanceObjects pending implementation

	}

	@description = "LPS-135635 - Verify that the options Keyword and Text appears under the Searchable section when updating the field type to String"
	@ignore = "true"
	@priority = "4"
	test KeywordAndTextAppearsWhenUpdateFieldType {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 135",
			objectName = "CustomObject135",
			pluralLabelName = "Custom Objects 135");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Integer",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "Integer",
			isRequired = "false",
			objectName = "CustomObject135");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 135");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Field");

		ObjectField.selectType(fieldType = "Text");

		CreateObject.assertSearchableSectionOptionsAppears(radioOption = "Keyword");

		CreateObject.assertSearchableSectionOptionsAppears(radioOption = "Text");
	}

	@description = "LPS-135635 - Verify that the options Keyword and Text disappears under the Searchable section when updating the field type from String to another type"
	@priority = "4"
	test KeywordAndTextDisappearsWhenUpdateFieldType {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 136",
			objectName = "CustomObject136",
			pluralLabelName = "Custom Objects 136");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject136");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 136");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Field");

		ObjectField.selectType(fieldType = "Integer");

		ObjectAdmin.assertKeywordAndTextNotPresent();
	}

	@description = "LPS-135549 - Verify that the field with String type has the options Keyword and Text under the Searchable section"
	@priority = "4"
	test KeywordAndTextDisplayedForStringTypeField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 137",
			objectName = "CustomObject137",
			pluralLabelName = "Custom Objects 137");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject137");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 137");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Field");

		ObjectAdmin.assertKeywordAndText();
	}

	@description = "LPS-135549 - Verify that the field with String type has the option Language when the Text option is selected under the Searchable section"
	@priority = "4"
	test LanguageDisplayedForTextOption {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 138",
			objectName = "CustomObject138",
			pluralLabelName = "Custom Objects 138");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject138");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 138");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.goToFieldsDetails(label = "Custom Field");

		ObjectAdmin.clickFieldsSearchableSectionRadioOption(radioOption = "Text");

		ObjectField.assertSearchableLanguage(selected = "English (United States)");
	}

	@description = "LPS-137741 - Verify that Objects created on a Virtual Instance are not displayed on the Object Admin of the Main Instance and vice versa"
	@ignore = "Test Stub"
	@priority = "4"
	test ObjectAdminDisplaysOnlyItsInstanceObjects {

		// TODO LPS-141682 ObjectAdminDisplaysOnlyItsInstanceObjects pending implementation

	}

	@description = "LPS-139005 - Verify that the Object is no longer displayed on the Collection Providers when inactivated"
	@priority = "4"
	test ObjectDisappearsCollectionProvidersWhenInactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 139",
			objectName = "CustomObject139",
			pluralLabelName = "Custom Objects 139");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject139");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 139");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		VisualizeObjectCollectionDisplay.openObjectCollectionProvider();

		AssertElementNotPresent(
			key_labelName = "Custom Objects 139",
			locator1 = "VisualizeObjectCollectionDisplay#VIEW_OBJECT_COLLECTION_DISPLAY");
	}

	@description = "LPS-139005 - Verify that the Object is no longer displayed on the Form's storage type when inactivated"
	@priority = "4"
	test ObjectDisappearsFormStorageSettingsWhenInactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 140",
			objectName = "CustomObject140",
			pluralLabelName = "Custom Objects 140");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject140");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 140");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoAddForm();

		PopulateObjectFormsConfiguration.openFormSettings();

		PopulateObjectFormsConfiguration.selectObject(label = "Object");

		Click(locator1 = "PopulateObjectFormsConfiguration#DEFAULT_SELECT_OBJECT");

		AssertElementNotPresent(
			key_label = "Custom Object 140",
			locator1 = "PopulateObjectFormsConfiguration#DISPLAY_SELECT_OBJECT");
	}

	@description = "LPS-139005 - Verify that the Object is no longer displayed on the Page Item Selector when inactivated"
	@priority = "4"
	test ObjectDisappearsPageItemSelectWhenInactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 141",
			objectName = "CustomObject141",
			pluralLabelName = "Custom Objects 141");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject141");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 141");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		Navigator.openURL();

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		Click.javaScriptClick(locator1 = "VisualizeObjectDisplayPage#SELECT_ITEM");

		SelectFrame(
			key_title = "Select",
			locator1 = "IFrame#MODAL_ANY");

		AssertElementNotPresent(
			key_pluralLabelName = "Custom Objects 141",
			locator1 = "VisualizeObjectDisplayPage#SELECT_OBJECT");
	}

	@description = "LPS-139005 - Verify that the Object is no longer displayed on the Page Template (subtype) when inactivated"
	@priority = "4"
	test ObjectDisappearsPageTemplateWhenInactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 142",
			objectName = "CustomObject142",
			pluralLabelName = "Custom Objects 142");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject142");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 142");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		VisualizeObjectDisplayPage.openPageTemplate();

		Click(locator1 = "VisualizeObjectDisplayPage#SELECT_BLANK_OBJECT_DISPLAY_PAGE_TEMPLATE");

		Click(locator1 = "VisualizeObjectDisplayPage#OBJECT_CONTENT_TYPE");

		AssertElementNotPresent(
			key_type = "Custom Object 142",
			locator1 = "VisualizeObjectDisplayPage#CONTENT_TYPE_OPTION",
			value1 = "Custom Object 142");
	}

	@description = "LPS-139005 - Verify that the Object is no longer displayed on the Workflow Process Builder page when inactivated"
	@priority = "4"
	test ObjectDisappearsProcessBuilderWhenInactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 143",
			objectName = "CustomObject143",
			pluralLabelName = "Custom Objects 143");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject143");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 143");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		WaitForSPARefresh();

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		AssertElementNotPresent(
			key_workflowResourceValue = "Custom Object 143",
			locator1 = "WorkflowConfiguration#RESOURCE_TABLE_WORKFLOW");
	}

	@description = "LPS-139005 - Verify that the Object is no longer displayed on the Workflow Site Menu page when inactivated"
	@priority = "4"
	test ObjectDisappearsWorkflowSiteMenuWhenInactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 144",
			objectName = "CustomObject144",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects 144",
			scope = "site");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject144");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 144");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			portlet = "Workflow");

		AssertElementNotPresent(
			key_workflowResourceValue = "Custom Object 144",
			locator1 = "WorkflowConfiguration#RESOURCE_TABLE_WORKFLOW");
	}

	@description = "LPS-139005 - Verify that the Object entries are not displayed on Page fragments from an Object that was inactivated"
	@priority = "4"
	test ObjectEntriesDisappearsPageFragmentsWhenInactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 145",
			objectName = "CustomObject145",
			pluralLabelName = "Custom Objects 145");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject145");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 145");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		CreateObject.saveObject();

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject145");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject145",
			value = "Entry Test");

		Navigator.openURL();

		ContentPages.addPage(pageName = "Blank Display Page");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			fragmentName = "Collection Display",
			infoListProviderName = "Custom Objects 145");

		PageEditor.editCollectionDisplay(
			fragmentName = "Collection Display",
			selectedName = "Custom Objects 145",
			styleDisplay = "Table");

		PageEditor.clickPublish();

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		CreateObject.inactiveCustomObject(objectName = "Custom Object 145");

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "View",
			pageName = "Blank Display Page");

		ObjectAdmin.assertEntryOnPageNotPresent(entryName = "Entry Test");
	}

	@description = "LPS-135649 - Verify that pending and completed Object entries disappears from Workflow Metrics page when they are deleted"
	@priority = "4"
	test ObjectEntriesDisappearsWorkflowMetricsWhenDeleted {
		property test.run.environment = "EE";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 146",
			objectName = "CustomObject146",
			pluralLabelName = "Custom Objects 146");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject146");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject146");

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Custom Object 146");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject146");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "Entry Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject146");

		ObjectPortlet.deleteEntry(entry = "Entry Test");

		WorkflowMetrics.checkWorkflowReports(
			key_onTimeValue = "0",
			key_overdueValue = "0",
			key_totalPendingValue = "0",
			key_workflowProcessName = "Single Approver");
	}

	@description = "LPS-139005 - Verify that pending and completed Object entries with workflow are not displayed on the Workflow Metrics page when inactivated"
	@ignore = "Test Stub"
	@priority = "4"
	test ObjectEntriesDisappearsWorkflowMetricsWhenInactivated {

		// TODO LPS-140866 ObjectEntriesDisappearsWorkflowMetricsWhenInactivated pending implementation

	}

	@description = "LPS-135649 - Verify that pending and completed Object entries disappears from Workflow pages (My Workflow Tasks, Submissions, and My Submissions) when they are deleted"
	@priority = "4"
	test ObjectEntriesDisappearsWorkflowPagesWhenDeleted {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 141635",
			objectName = "CustomObject141635",
			pluralLabelName = "Custom Objects 141635");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject141635");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject141635");

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Custom Object 141635");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject141635");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "Entry Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject141635");

		ObjectPortlet.deleteEntry(entry = "Entry Test");

		Navigator.openURL();

		ObjectAdmin.openMyWorkflowTasks();

		Navigator.gotoNavTab(navTab = "Assigned to My Roles");

		Workflow.viewCompletedTasksTaskNotPresentCP(workflowAssetTitle = "Custom Object 141635");

		ObjectAdmin.openMySubmissions();

		CreateObject.assertObjectNotPresentInSubmissions(objectName = "Custom Object 141635");

		ObjectAdmin.openSubmissions();

		CreateObject.assertObjectNotPresentInSubmissions(objectName = "Custom Object 141635");
	}

	@description = "LPS-139005 - Verify that pending and completed Object entries with workflow are not displayed on the workflow pages (My Workflow Tasks, My Submissions, and Submissions) when inactivated"
	@priority = "4"
	test ObjectEntriesDisappearsWorkflowPagesWhenInactivated {
		property portal.upstream = "quarantine";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 140865",
			objectName = "CustomObject140865",
			pluralLabelName = "Custom Objects 140865");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject140865");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject140865");

		ObjectAdmin.openObjectAdmin();

		WaitForSPARefresh();

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Custom Object 140865");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject140865",
			value = "Test");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject140865",
			value = "Test 2");

		ObjectAdmin.openMyWorkflowTasks();

		Navigator.gotoNavTab(navTab = "Assigned to My Roles");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Assign to Me");

		Workflow.confirmWorkflowAction();

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Approve");

		Workflow.confirmWorkflowAction();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 140865");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openMyWorkflowTasks();

		AssertElementNotPresent(
			key_workflowAssetTitle = "Custom Object 140865",
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_ASSET_TYPE");

		Navigator.gotoNavTab(navTab = "Assigned to My Roles");

		AssertElementNotPresent(
			key_workflowAssetTitle = "Custom Object 140865",
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_ASSET_TYPE");

		ObjectAdmin.openMySubmissions();

		AssertElementNotPresent(
			key_submissionName = "Custom Object 140865",
			locator1 = "WorkflowSubmissions#SUBMISSION_BY_NAME");

		ObjectAdmin.openSubmissions();

		AssertElementNotPresent(
			key_submissionName = "Custom Object 140865",
			locator1 = "WorkflowSubmissions#SUBMISSION_BY_NAME");
	}

	@description = "LPS-139005 - Verify that the Object entries are displayed again on Page fragments from an Object that was reactivated"
	@priority = "4"
	test ObjectEntriesReappearsPageFragmentsWhenReactivated {
		property portal.upstream = "quarantine";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 142598",
			objectName = "CustomObject142598",
			pluralLabelName = "Custom Objects 142598");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject142598");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject142598");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject142598",
			value = "Test 1");

		Navigator.openURL();

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectDisplayPage.addItem(
			frameTitle = "Select",
			pluralLabelName = "Custom Objects 142598");

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "Custom Field");

		PageEditor.clickPublish();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 142598");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 142598");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "View",
			pageName = "Test Content Page Name");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "Test 1");
	}

	@description = "LPS-139005 - Verify that the Object entries with workflow are displayed again on the Workflow Metrics page when reactivated"
	@priority = "4"
	test ObjectEntriesReappearsWorkflowMetricsWhenReactivated {
		property test.run.environment = "EE";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 147",
			objectName = "CustomObject147",
			pluralLabelName = "Custom Objects 147");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject147");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject147");

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Custom Object 147");

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject147",
				value = "Entry ${fieldEntry}");
		}

		Navigator.openURL();

		ObjectAdmin.openMyWorkflowTasks();

		Navigator.gotoNavTab(navTab = "Assigned to My Roles");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Assign to Me");

		Workflow.confirmWorkflowAction();

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Approve");

		Workflow.confirmWorkflowAction();

		ObjectAdmin.openObjectAdmin();

		CreateObject.inactiveCustomObject(objectName = "Custom Object 147");

		ObjectAdmin.openObjectAdmin();

		CreateObject.activeCustomObject(objectName = "Custom Object 147");

		Navigator.openURL();

		WorkflowMetrics.goToWorkflowProcessMetrics(workflowProcessName = "Single Approver");

		WorkflowMetrics.checkPendingWorkflowValues(
			key_ontime = "0",
			key_overdue = "0",
			key_pending = "1",
			key_untracked = "1");

		Click(locator1 = "WorkflowMetrics#METRICS_PERFORMANCE_TAB");

		WorkflowMetrics.checkCompletedWorkflowValues(
			key_completed = "1",
			key_ontime = "0",
			key_overdue = "0",
			key_untracked = "1");
	}

	@description = "LPS-139005 - Verify that pending and completed Object entries with workflow are displayed again on the workflow pages (My Workflow Tasks, My Submissions, and Submissions) when reactivated"
	@priority = "4"
	test ObjectEntriesReappearsWorkflowPagesWhenReactivated {
		property portal.upstream = "quarantine";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 140887",
			objectName = "CustomObject140887",
			pluralLabelName = "Custom Objects 140887");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject140887");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject140887");

		ObjectAdmin.openObjectAdmin();

		WaitForSPARefresh();

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Custom Object 140887");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject140887",
			value = "Test");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject140887",
			value = "Test 2");

		ObjectAdmin.openMyWorkflowTasks();

		Navigator.gotoNavTab(navTab = "Assigned to My Roles");

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Assign to Me");

		Workflow.confirmWorkflowAction();

		LexiconEntry.gotoEllipsisMenuItem(menuItem = "Approve");

		Workflow.confirmWorkflowAction();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 140887");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 140887");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		ObjectAdmin.openMyWorkflowTasks();

		AssertElementPresent(
			key_workflowAssetTitle = "Custom Object 140887",
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_ASSET_TYPE");

		Navigator.gotoNavTab(navTab = "Assigned to My Roles");

		AssertElementPresent(
			key_workflowAssetTitle = "Custom Object 140887",
			locator1 = "MyWorkflowTasks#ASSIGNED_TO_ME_TABLE_ASSET_TYPE");

		ObjectAdmin.openMySubmissions();

		AssertElementPresent(
			key_submissionName = "Custom Object 140887",
			locator1 = "WorkflowSubmissions#SUBMISSION_BY_NAME");

		ObjectAdmin.openSubmissions();

		AssertElementPresent(
			key_submissionName = "Custom Object 140887",
			locator1 = "WorkflowSubmissions#SUBMISSION_BY_NAME");
	}

	@description = "LPS-135649 - Verify the Asset Title, Asset Type and Item Subject of a Object's entry on the Workflow Metrics page"
	@priority = "4"
	test ObjectInfoDisplayedOnWorkflowMetrics {
		property test.run.environment = "EE";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 148",
			objectName = "CustomObject148",
			pluralLabelName = "Custom Objects 148");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject148");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject148");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 148");

		CreateObject.selectTitleField(fieldLabel = "Custom Field");

		CreateObject.saveObject();

		Navigator.openURL();

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Custom Object 148");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject148",
			value = "Entry Test");

		Navigator.openURL();

		WorkflowMetrics.goToWorkflowProcessMetrics(workflowProcessName = "Single Approver");

		Click(locator1 = "WorkflowMetrics#DASHBOARD_TOTAL_PENDING_ITEMS_TITLE");

		Workflow.assertInfoItem(
			key_assignee = "Unassigned",
			key_createdBy = "Test Test",
			key_dueDate = "-",
			key_itemSubject = "Custom Object 148: Entry Test",
			key_processStep = "Review");

		WorkflowMetricsAllItemsList.assertInfoItemByIDEntry(
			assetTitle = "Entry Test",
			assetType = "Custom Object 148",
			createdBy = "Test Test",
			currentAssignee = "Unassigned",
			currentStep = "Review",
			processStatus = "Pending");
	}

	@description = "LPS-139603 - Verify that the Object Name is displayed on the Relationship tab when a Relationship is created"
	@priority = "4"
	test ObjectNameDisplayedOnTheRelationshipTab {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter} 149",
				objectName = "CustomObject${letter}149",
				pluralLabelName = "Custom Objects ${letter} 149");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}149");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA149",
			objectName_2 = "CustomObjectB149",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A 149");

		ObjectAdmin.gotoRelationshipsTab();

		CreateObject.assertRelatedObject(relatedObject = "CustomObjectB149");
	}

	@description = "LPS-135549 - Verify that the Object Name is autofilled when Label is filled"
	@priority = "4"
	test ObjectNameIsAutofilled {
		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object 150",
			pluralLabelName = "");

		CreateObject.assertObjectDefinitionName(objectName = "CustomObject150");
	}

	@description = "LPS-135649 - Verify that when Objects are not scoped by Site it should not be displayed on the Workflow settings from the Site Menu"
	@priority = "4"
	test ObjectNotScopedBySiteNotDisplayedOnSiteMenu {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151",
			objectName = "CustomObject151",
			pluralLabelName = "Custom Objects 151");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151");

		Workflow.openWorkflowAdmin(siteURLKey = "guest");

		Workflow.viewDefinitionNotPresent(workflowDefinitionTitle = "Custom Object 151");
	}

	@description = "LPS-139005 - Verify that the Object portlet is no longer displayed on the Open Menu when inactivated"
	@priority = "5"
	test ObjectPorletDisappearsOpenMenuWhenInactivated {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 140856",
			objectName = "CustomObject140856",
			pluralLabelName = "Custom Objects 140856");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject140856");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject140856");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 140856");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ApplicationsMenuHelper.openApplicationsMenu();

		ApplicationsMenu.gotoPanel(panel = "Control Panel");

		AssertElementNotPresent(
			key_category = "Object",
			key_portlet = "Custom Objects 140856",
			locator1 = "ApplicationsMenu#PORTLET");
	}

	@description = "LPS-139005 - Verify that the Object portlet is no longer displayed on the Site Menu when inactivated"
	@priority = "4"
	test ObjectPorletDisappearsSiteMenuWhenInactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 152",
			objectName = "CustomObject152",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects 152",
			scope = "site");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject152");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 152");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		Navigator.openURL();

		ProductMenuHelper.openProductMenu();

		ProductMenuHelper.expandCategory(category = "Content & Data");

		AssertElementNotPresent(
			key_portlet = "Custom Object 152",
			locator1 = "ProductMenu#PORTLET",
			value1 = "Custom Object 152");
	}

	@description = "LPS-139005 - Verify that the Object portlet is displayed again on the Open Menu when reactivated"
	@priority = "4"
	test ObjectPortletReappearsOpenMenuWhenReactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 153",
			objectName = "CustomObject153",
			pluralLabelName = "Custom Objects 153");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject153");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject153");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 153");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		ObjectPortlet.assertObjectIsDisplayedOnControlPanel();
	}

	@description = "LPS-139005 - Verify that the Object portlet is displayed again on the Site Menu when reactivated"
	@priority = "4"
	test ObjectPortletReappearsSiteMenuWhenReactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 154",
			objectName = "CustomObject154",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects 154",
			scope = "site");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject154");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject154");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 154");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 154");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		Navigator.openURL();

		ProductMenuHelper.openProductMenu();

		ProductMenuHelper.expandCategory(category = "Content & Data");

		AssertElementPresent(
			key_portlet = "Custom Objects 154",
			locator1 = "ProductMenu#PORTLET",
			value1 = "Custom Objects 154");
	}

	@description = "LPS-139005 - Verify that the Object is displayed again on the Collection Providers when reactivated"
	@priority = "4"
	test ObjectReappearsCollectionProvidersWhenReactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 155",
			objectName = "CustomObject155",
			pluralLabelName = "Custom Objects 155");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject155");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject155");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 155");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 155");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		VisualizeObjectCollectionDisplay.openObjectCollectionProvider();

		AssertElementPresent(
			key_labelName = "Custom Objects 155",
			locator1 = "VisualizeObjectCollectionDisplay#VIEW_OBJECT_COLLECTION_DISPLAY");
	}

	@description = "LPS-139005 - Verify that the Object is displayed again on the Form's storage type when reactivated"
	@priority = "4"
	test ObjectReappearsFormStorageTypeWhenReactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 156",
			objectName = "CustomObject156",
			pluralLabelName = "Custom Objects 156");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject156");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject156");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 156");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 156");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoAddForm();

		PopulateObjectFormsConfiguration.openFormSettings();

		PopulateObjectFormsConfiguration.selectObject(label = "Object");

		Click(locator1 = "PopulateObjectFormsConfiguration#DEFAULT_SELECT_OBJECT");

		AssertElementPresent(
			key_label = "Custom Object 156",
			locator1 = "PopulateObjectFormsConfiguration#DISPLAY_SELECT_OBJECT");
	}

	@description = "LPS-139005 - Verify that the Object is displayed again on the Page Item Selector when reactivated"
	@priority = "4"
	test ObjectReappearsPageItemSelectorWhenReactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 157",
			objectName = "CustomObject157",
			pluralLabelName = "Custom Objects 157");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject157");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject157");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 157");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 157");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		Navigator.openURL();

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		Click.javaScriptClick(locator1 = "VisualizeObjectDisplayPage#SELECT_ITEM");

		SelectFrame(
			key_title = "Select",
			locator1 = "IFrame#MODAL_ANY");

		AssertElementPresent(
			key_pluralLabelName = "Custom Objects 157",
			locator1 = "VisualizeObjectDisplayPage#SELECT_OBJECT");
	}

	@description = "LPS-139005 - Verify that the Object is displayed again on the Page Template (subtype) when reactivated"
	@priority = "4"
	test ObjectReappearsPageTemplateWhenReactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 158",
			objectName = "CustomObject158",
			pluralLabelName = "Custom Objects 158");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject158");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 158");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 158");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		VisualizeObjectDisplayPage.openPageTemplate();

		Click(locator1 = "VisualizeObjectDisplayPage#SELECT_BLANK_OBJECT_DISPLAY_PAGE_TEMPLATE");

		Click(locator1 = "VisualizeObjectDisplayPage#OBJECT_CONTENT_TYPE");

		AssertElementPresent(
			locator1 = "VisualizeObjectDisplayPage#OBJECT_CONTENT_TYPE",
			value1 = "Custom Object 158");
	}

	@description = "LPS-139005 - Verify that the Object is displayed again on the Workflow Process Builder page when reactivated"
	@priority = "4"
	test ObjectReappearsProcessBuilderWhenReactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 159",
			objectName = "CustomObject159",
			pluralLabelName = "Custom Objects 159");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject159");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject159");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 159");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 159");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		WaitForSPARefresh();

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		AssertElementPresent(
			key_workflowResourceValue = "Custom Object 159",
			locator1 = "WorkflowConfiguration#RESOURCE_TABLE_WORKFLOW");
	}

	@description = "LPS-139005 - Verify that the Object is displayed again on the Workflow Site Menu page when reactivated"
	@priority = "4"
	test ObjectReappearsWorkflowSiteMenuWhenReactivated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 160",
			objectName = "CustomObject160",
			panelCategoryKey = "Content & Data",
			pluralLabelName = "Custom Objects 160",
			scope = "site");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject160");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject160");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 160");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 160");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Workflow");

		AssertElementPresent(
			key_workflowResourceValue = "Custom Object 160",
			locator1 = "WorkflowConfiguration#RESOURCE_TABLE_WORKFLOW");
	}

	@description = "LPS-135551 - Verify that when the Object is scoped by Site each site will have its own entries"
	@priority = "4"
	test ObjectScopedBySiteEntries {
		for (var sites : list "A,B") {
			JSONGroup.addGroup(groupName = "Site ${sites}");
		}

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 161",
			objectName = "CustomObject161",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects 161",
			scope = "site");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject161");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161");

		PagesAdmin.openPagesAdmin(siteURLKey = "site-a");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Custom Objects 161");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "Entry Test");

		Navigator.gotoBack();

		ObjectPortlet.viewEntry(entry = "Entry Test");

		PagesAdmin.openPagesAdmin(siteURLKey = "site-b");

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Custom Objects 161");

		ObjectPortlet.assertEntryNotPresent(entry = "Entry Test");
	}

	@description = "LPS-137741 - Verify that Objects created on a Virtual Instance are not displayed on the Panel of the Main Instance and vice versa"
	@ignore = "Test Stub"
	@priority = "4"
	test PanelDisplaysOnlyItsInstanceObjects {

		// TODO LPS-141683 PanelDisplaysOnlyItsInstanceObjects pending implementation

	}

	@description = "LPS-135401 - Verify that by default the Prevent deletion type of Relationship is selected"
	@priority = "4"
	test PreventDeletionIsDefault {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 162",
			objectName = "CustomObject162",
			pluralLabelName = "Custom Objects 162");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 162");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship",
			object = "CustomObject162",
			type = "One to Many");

		ObjectAdmin.goToRelationshipsDetails(fieldName = "Relationship");

		CreateObject.assertSelectedValueInDeletionType(deletionType = "Prevent");
	}

	@description = "LPS-135401 - Verify if Prevent deletion type of Relationship Many to Many won't allow the user to delete an entry with relation"
	@priority = "4"
	test PreventDeletionManyToManyWontAllowDelete {
		property portal.upstream = "quarantine";

		for (var nameObject : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${nameObject} 163",
				objectName = "CustomObject${nameObject}163",
				pluralLabelName = "Custom Objects ${nameObject} 163");
		}

		for (var nameField : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${nameField}",
				fieldName = "customObjectField${nameField}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${nameField}163");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA163",
			objectName_2 = "CustomObjectB163",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "manyToMany");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObjectA163");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A 163");

		CreateObject.selectTitleField(fieldLabel = "Custom Field A");

		CreateObject.saveObject();

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "1",
			fieldLabelName = "Custom Field A",
			tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		Button.clickSave();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object B 163");

		CreateObject.selectTitleField(fieldLabel = "Custom Field B");

		CreateObject.saveObject();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA163");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB163");

		for (var nameEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField${nameEntry}",
				objectName = "CustomObject${nameEntry}163",
				value = "Entry ${nameEntry}");
		}

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectA163");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		ObjectPortlet.gotoRelationshipTab();

		CreateObject.addRelationshipAndSelectEntry(titleFieldName = "Entry B");

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectA163");

		ObjectPortlet.deleteEntry(entry = "Entry A");

		ObjectPortlet.viewEntry(entry = "Entry A");

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB163");

		ObjectPortlet.deleteEntry(entry = "Entry B");

		ObjectPortlet.viewEntry(entry = "Entry B");
	}

	@description = "LPS-135401 - Verify if Prevent deletion type of Relationship One to Many will allow the user to delete an entry with relation from the child Object"
	@priority = "4"
	test PreventDeletionOneToManyWillAllowDelete {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter} 164",
				objectName = "CustomObject${letter}164",
				pluralLabelName = "Custom Objects ${letter} 164");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}164");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA164",
			objectName_2 = "CustomObjectB164",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout Name",
			objectName = "CustomObjectA164");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A 164");

		CreateObject.selectTitleField(fieldLabel = "Custom Field A");

		CreateObject.saveObject();

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		ObjectAdmin.goToLayoutTabOnLayouts();

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "1",
			fieldLabelName = "Custom Field A",
			tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object B 164");

		CreateObject.selectTitleField(fieldLabel = "Custom Field B");

		CreateObject.saveObject();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA164");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB164");

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField${fieldEntry}",
				objectName = "CustomObject${fieldEntry}164",
				value = "Entry ${fieldEntry}");
		}

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB164");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		CreateObject.chooseEntryOnRelationshipField(entryOption = "Entry A");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB164");

		ObjectPortlet.deleteEntry(entry = "Entry B");

		ObjectPortlet.assertEntryNotPresent(entry = "Entry B");

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectA164");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		ObjectPortlet.gotoRelationshipTab();

		ObjectPortlet.assertEntryNotPresent(entry = "Entry B");
	}

	@description = "LPS-135401 - Verify if Prevent deletion type of Relationship One to Many won't allow the user to delete an entry with relation from the parent Object"
	@priority = "5"
	test PreventDeletionOneToManyWontAllowDelete {
		property portal.acceptance = "quarantine";

		for (var nameObject : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${nameObject} 165",
				objectName = "CustomObject${nameObject}165",
				pluralLabelName = "Custom Objects ${nameObject} 165");
		}

		for (var nameField : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${nameField}",
				fieldName = "customObjectField${nameField}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${nameField}165");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA165",
			objectName_2 = "CustomObjectB165",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A 165");

		CreateObject.selectTitleField(fieldLabel = "Custom Field A");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA165");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB165");

		for (var nameEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField${nameEntry}",
				objectName = "CustomObject${nameEntry}165",
				value = "Entry ${nameEntry}");
		}

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB165");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		CreateObject.chooseEntryOnRelationshipField(entryOption = "Entry A");

		Button.clickSave();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectA165");

		ObjectPortlet.deleteEntry(entry = "Entry A");

		ObjectPortlet.viewEntry(entry = "Entry A");
	}

	@description = "LPS-139418 - Verify that previous filled data is not kept when cancelling the creation of an Object"
	@priority = "4"
	test PreviousFilledDataIsNotKeptAfterCancel {
		ObjectAdmin.openObjectAdmin();

		LexiconEntry.gotoAdd();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object 166",
			pluralLabelName = "Custom Objects 166");

		Button.clickCancel();

		Click(locator1 = "ObjectAdmin#ADD_CUSTOM_OBJECT");

		AssertTextEquals(
			locator1 = "ObjectAdmin#PLURAL_LABEL_CUSTOM_OBJECT",
			value1 = "");

		AssertTextEquals(
			locator1 = "ObjectAdmin#LABEL_CUSTOM_OBJECT",
			value1 = "");

		AssertTextEquals(
			locator1 = "ObjectAdmin#NAME_CUSTOM_OBJECT",
			value1 = "");
	}

	@description = "LPS-135401 - Verify that the Relationship is created on both objects for a Many to Many Relationship"
	@priority = "5"
	test RelationshipCreatedBothObjectsManyToMany {
		property portal.acceptance = "true";

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter} 167",
				objectName = "CustomObject${letter}167",
				pluralLabelName = "Custom Objects ${letter} 167");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA167",
			objectName_2 = "CustomObjectB167",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "manyToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A 167");

		ObjectAdmin.gotoRelationshipsTab();

		CreateObject.assertRelatedObject(relatedObject = "CustomObjectB167");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object B 167");

		ObjectAdmin.gotoRelationshipsTab();

		CreateObject.assertRelatedObject(relatedObject = "CustomObjectA167");
	}

	@description = "LPS-135400 - Verify that relationship field is automatically created"
	@priority = "5"
	test RelationshipFieldAutomaticallyCreated {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object A 168",
			objectName = "CustomObjectA168",
			pluralLabelName = "Custom Objects 168");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object B 168",
			objectName = "CustomObjectB168",
			pluralLabelName = "Custom Objects 168");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A 168");

		ObjectAdmin.gotoRelationshipsTab();

		ObjectAdmin.addObjectRelationshipViaUI(
			label = "Relationship Label",
			object = "CustomObjectB168",
			type = "One to Many");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object B 168");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.assertObjectField(
			fieldLabel = "Relationship Label",
			fieldType = "Relationship");
	}

	@description = "LPS-139005 - Verify that the Relationship field will not be displayed on a Collection Display with List Style set as Table when the parent object is inactivated"
	@priority = "4"
	test RelationshipFieldCannotBeDisplayedForCollectionDisplayTableWhenInactivated {
		property portal.upstream = "quarantine";

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter} 169",
				objectName = "CustomObject${letter}169",
				pluralLabelName = "Custom Objects ${letter} 169");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}169");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA169",
			objectName_2 = "CustomObjectB169",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		for (var letter : list "A,B") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object ${letter} 169");

			CreateObject.selectTitleField(fieldLabel = "Custom Field ${letter}");

			CreateObject.saveObject();
		}

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA169");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB169");

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField${fieldEntry}",
				objectName = "CustomObject${fieldEntry}169",
				value = "Entry ${fieldEntry}");
		}

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB169");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		ObjectPortlet.chooseEntryOnRelationshipField(entryOption = "Entry A");

		Button.clickSave();

		ObjectAdmin.openObjectAdmin();

		CreateObject.inactiveCustomObject(objectName = "Custom Object A 169");

		Navigator.openURL();

		ContentPages.addPage(pageName = "Blank Display Page");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			fragmentName = "Collection Display",
			infoListProviderName = "Custom Objects B 169");

		PageEditor.editCollectionDisplay(
			fragmentName = "Collection Display",
			selectedName = "Custom Objects B 169",
			styleDisplay = "Table");

		PageEditor.clickPublish();

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "View",
			pageName = "Blank Display Page");

		ObjectAdmin.assertEntryOnPageNotPresent(entryName = "Entry A");
	}

	@description = "LPS-139005 - Verify that the Relationship field will not be displayed to be selected for a Page fragment when the parent object is inactivated"
	@priority = "4"
	test RelationshipFieldCannotBeSelectedForPageFragmentWhenInactivated {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter} 170",
				objectName = "CustomObject${letter}170",
				pluralLabelName = "Custom Objects ${letter} 170");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}170");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA170",
			objectName_2 = "CustomObjectB170",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA170");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB170");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectFieldB",
			objectName = "CustomObjectB170",
			value = "Entry");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A 170");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		Navigator.openURL();

		ContentPages.addPage(pageName = "Test Content Page Name");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectDisplayPage.addItem(
			frameTitle = "Select",
			pluralLabelName = "Custom Objects B 170");

		Click(locator1 = "VisualizeObjectCollectionDisplay#MAP_FRAGMENT");

		AssertElementNotPresent(
			key_option = "Custom Object A 170",
			locator1 = "VisualizeObjectCollectionDisplay#FIELD_NAME_OPTION");
	}

	@description = "LPS-139005 - Verify that the Relationship field is no longer displayed when the parent object is inactivated (One to Many)"
	@priority = "4"
	test RelationshipFieldDisappearsWhenInactivatedOneToMany {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter} 171",
				objectName = "CustomObject${letter}171",
				pluralLabelName = "Custom Objects ${letter} 171");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}171");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA171",
			objectName_2 = "CustomObjectB171",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA171");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB171");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectFieldB",
			objectName = "CustomObjectB171",
			value = "Entry 1");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A 171");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Object",
			panel = "Control Panel",
			portlet = "Custom Objects B 171");

		LexiconEntry.gotoAdd();

		AssertElementNotPresent(
			key_fieldLabelName = "Custom Field A",
			locator1 = "ObjectPortlet#FIELD_LABEL_NAME",
			value1 = "Custom Field A");

		Navigator.gotoBack();

		ObjectPortlet.viewEntryDetails(entry = "Entry 1");

		AssertElementNotPresent(
			key_fieldLabelName = "Custom Field A",
			locator1 = "ObjectPortlet#FIELD_LABEL_NAME",
			value1 = "Custom Field A");
	}

	@description = "LPS-135401 - Verify that the Relationship field is not created"
	@priority = "4"
	test RelationshipFieldNotCreatedOnManyToMany {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 141659 ${letter}",
				objectName = "CustomObject141659${letter}",
				pluralLabelName = "Custom Objects 141659 ${letter}");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject141659A",
			objectName_2 = "CustomObject141659B",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "manyToMany");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 141659 B");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.assertNoResultsWereFound();
	}

	@description = "LPS-139005 - Verify that the Relationship field is displayed again when the parent object is reactivated (One to Many)"
	@priority = "4"
	test RelationshipFieldReappearsWhenReactivatedOneToMany {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter} 172",
				objectName = "CustomObject${letter}172",
				pluralLabelName = "Custom Objects ${letter} 172");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}172");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA172",
			objectName_2 = "CustomObjectB172",
			relationshipLabel = "Relationship Label",
			relationshipName = "relationshipLabel",
			relationshipType = "oneToMany");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA172");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB172");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectFieldB",
			objectName = "CustomObjectB172",
			value = "Entry 1");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A 172");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A 172");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		ApplicationsMenu.gotoPortlet(
			category = "Object",
			panel = "Control Panel",
			portlet = "Custom Objects B 172");

		LexiconEntry.gotoAdd();

		AssertElementPresent(
			key_fieldLabelName = "Relationship Label",
			locator1 = "ObjectPortlet#FIELD_LABEL_NAME",
			value1 = "Custom Object A 172");

		Navigator.gotoBack();

		ObjectPortlet.viewEntryDetails(entry = "Entry 1");

		AssertElementPresent(
			key_fieldLabelName = "Relationship Label",
			locator1 = "ObjectPortlet#FIELD_LABEL_NAME",
			value1 = "Custom Object A 172");
	}

	@description = "LPS-139005 - Verify that the Relationship tab is no longer displayed when the other object is inactivated (Many to Many)"
	@priority = "4"
	test RelationshipTabDisappearsWhenInactivatedManyToMany {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter} 173",
				objectName = "CustomObject${letter}173",
				pluralLabelName = "Custom Objects ${letter} 173");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}173");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA173",
			objectName_2 = "CustomObjectB173",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "manyToMany");

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout",
				objectName = "CustomObject${letter}173");
		}

		Navigator.openURL();

		for (var letter : list "A,B") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object ${letter} 173");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = "1",
				fieldLabelName = "Custom Field ${letter}",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");

			Button.clickSave();

			Navigator.openURL();
		}

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA173");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB173");

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField${fieldEntry}",
				objectName = "CustomObject${fieldEntry}173",
				value = "Entry ${fieldEntry}");
		}

		ObjectAdmin.openObjectAdmin();

		CreateObject.inactiveCustomObject(objectName = "Custom Object B 173");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectA173");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		ObjectAdmin.assertRelationshipTabNotPresent();

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		CreateObject.activeCustomObject(objectName = "Custom Object B 173");

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		CreateObject.inactiveCustomObject(objectName = "Custom Object A 173");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectB173");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		ObjectAdmin.assertRelationshipTabNotPresent();
	}

	@description = "LPS-139005 - Verify that the Relationship tab is no longer displayed when the child object is inactivated (One to Many)"
	@priority = "4"
	test RelationshipTabDisappearsWhenInactivatedOneToMany {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object ${letter} 174",
				objectName = "CustomObject${letter}174",
				pluralLabelName = "Custom Objects ${letter} 174");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject${letter}174");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObjectA174",
			objectName_2 = "CustomObjectB174",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObjectA174");

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectA174");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObjectB174");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object A 174");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "2",
			fieldLabelName = "Custom Field A",
			tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		Button.clickSave();

		Navigator.openURL();

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectFieldA",
			objectName = "CustomObjectA174",
			value = "Entry 1");

		ObjectAdmin.openObjectAdmin();

		CreateObject.inactiveCustomObject(objectName = "Custom Object B 174");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObjectA174");

		ObjectPortlet.viewEntryDetails(entry = "Entry 1");

		AssertElementNotPresent(
			key_tabName = "Relationship Tab",
			locator1 = "ObjectAdmin#ENTRY_RELATIONSHIP_TAB");
	}

	@description = "LPS-139005 - Verify that the Relationship tab is displayed again when the other object is reactivated (Many to Many)"
	@priority = "4"
	test RelationshipTabReappearsWhenReactivatedManyToMany {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 140875 ${letter}",
				objectName = "CustomObject140875${letter}",
				pluralLabelName = "Custom Objects 140875 ${letter}");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject140875${letter}");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject140875A",
			objectName_2 = "CustomObject140875B",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "manyToMany");

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout",
				objectName = "CustomObject140875${letter}");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 140875 ${letter}");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = "1",
				fieldLabelName = "Custom Field ${letter}",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");

			Button.clickSave();
		}

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject140875A");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject140875B");

		for (var fieldEntry : list "A,B") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField${fieldEntry}",
				objectName = "CustomObject140875${fieldEntry}",
				value = "Entry ${fieldEntry}");
		}

		ObjectAdmin.openObjectAdmin();

		CreateObject.inactiveCustomObject(objectName = "Custom Object 140875 B");

		ObjectAdmin.openObjectAdmin();

		CreateObject.activeCustomObject(objectName = "Custom Object 140875 B");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject140875A");

		ObjectPortlet.viewEntryDetails(entry = "Entry A");

		ObjectAdmin.assertRelationshipTabPresent();

		ObjectAdmin.openObjectAdmin();

		CreateObject.inactiveCustomObject(objectName = "Custom Object 140875 A");

		ObjectAdmin.openObjectAdmin();

		CreateObject.activeCustomObject(objectName = "Custom Object 140875 A");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject140875B");

		ObjectPortlet.viewEntryDetails(entry = "Entry B");

		ObjectAdmin.assertRelationshipTabPresent();
	}

	@description = "LPS-139005 - Verify that the Relationship tab is displayed again when the child object is reactivated (One to Many)"
	@priority = "4"
	test RelationshipTabReappearsWhenReactivatedOneToMany {
		for (var letter : list "A,B") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 140873 ${letter}",
				objectName = "CustomObject140873${letter}",
				pluralLabelName = "Custom Objects 140873 ${letter}");
		}

		for (var letter : list "A,B") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field ${letter}",
				fieldName = "customObjectField${letter}",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject140873${letter}");
		}

		ObjectAdmin.addObjectRelationshipViaAPI(
			objectName_1 = "CustomObject140873A",
			objectName_2 = "CustomObject140873B",
			relationshipLabel = "Relationship",
			relationshipName = "relationship",
			relationshipType = "oneToMany");

		ObjectAdmin.addObjectLayoutViaAPI(
			layoutName = "Layout",
			objectName = "CustomObject140873A");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 140873 A");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

		ObjectAdmin.markLayoutAsDefault();

		Click(locator1 = "ObjectAdmin#LAYOUT_LAYOUT_TAB");

		ObjectAdmin.addTabFieldsOnLayout(
			blockName = "Block 1",
			columnsNumber = "2",
			fieldLabelName = "Custom Field A",
			tabName = "Field Tab");

		ObjectAdmin.addTabRelationshipsOnLayout(
			relationshipsLabelName = "Relationship",
			tabName = "Relationship Tab");

		Button.clickSave();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject140873A");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject140873B");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectFieldA",
			objectName = "CustomObject140873A",
			value = "Entry 1");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 140873 B");

		CreateObject.checkToggleInactive();

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 140873 B");

		CreateObject.checkToggleActive();

		CreateObject.saveObject();

		ApplicationsMenu.gotoPortlet(
			category = "Object",
			panel = "Control Panel",
			portlet = "Custom Objects 140873 A");

		ObjectPortlet.viewEntryDetails(entry = "Entry 1");

		AssertElementPresent(
			key_tabName = "Relationship Tab",
			locator1 = "ObjectAdmin#ENTRY_RELATIONSHIP_TAB");
	}

	@description = "LPS-135549 - Verify that the columns Name, System and Status displays the correct value on the Objects table when a Custom Object is created"
	@priority = "4"
	test TableDisplayCorrectValueWhenObjectCreated {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 175",
			objectName = "CustomObject175",
			pluralLabelName = "Custom Objects 175");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.assertObjectColumnValue(
			label = "Custom Object 175",
			scope = "company",
			status = "Draft",
			system = "No");
	}

	@description = "LPS-138213 - Verify that updated data is kept when clicking on the Publish button"
	@priority = "4"
	test UpdatedDataIsKeptWhenPublishing {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 141685",
			objectName = "CustomObject141685",
			pluralLabelName = "Custom Objects 141685");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject141685");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 141685");

		ObjectAdmin.editCustomObject(
			fieldLabelName = "Object Edit 141685",
			fieldName = "ObjectEdit141685",
			pluralLabelName = "Objects Edit 141685");

		ObjectAdmin.selectObjectScope(fieldOption = "Site");

		CreateObject.selectPanelCategoryKey(panelCategoryKey = "Site Administration > Site Builder");

		Button.clickPublish();

		Navigator.openURL();

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Object Edit 141685");

		for (var valueFieldLabel : list "ObjectEdit141685,Object Edit 141685,Objects Edit 141685") {
			CreateObject.assertValuesOnObjectData(fieldLabel = "${valueFieldLabel}");
		}

		CreateObject.assertValuesOnScope(
			valuePanelCategory = "Site Administration > Site Builder",
			valueScope = "Site");
	}

	@description = "LPS-135548 - Verify that user can view custom objects"
	@priority = "5"
	test ViewCustomObjects {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 176",
			objectName = "CustomObject176",
			pluralLabelName = "Custom Objects 176");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.viewCustomObject(name = "Custom Object 176");
	}

	@description = "LPS-135548 - Verify that user can view system objects"
	@priority = "5"
	test ViewSystemObjects {
		property portal.acceptance = "true";

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.viewSystemObject(name = "User");
	}

	@description = "LPS-135649 - Verify that a withdrawn pending entry is displayed with a Draft status"
	@priority = "4"
	test WithdrawnEntryDisplaysDraftStatus {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 177",
			objectName = "CustomObject177",
			pluralLabelName = "Custom Objects 177");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject177");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject177");

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Custom Object 177");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject177",
			value = "Entry Test");

		ObjectAdmin.openMySubmissions();

		CreateObject.withdrawObjectTask(objectName = "Custom Object 177");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject177");

		ObjectPortlet.assertEntryStauts(
			key_entry = "Entry Test",
			key_status = "Draft");
	}

	@description = "LPS-135649 - Verify that the workflow is triggered when submitting an entry through Forms"
	@priority = "4"
	test WorkflowTriggeredWhenSubmitingEntryThroughForms {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 178",
			objectName = "CustomObject178",
			pluralLabelName = "Custom Objects 178");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject178");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject178");

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Custom Object 178");

		Navigator.openURL();

		PopulateObjectFormsConfiguration.openForm();

		FormsAdminNavigator.gotoAddForm();

		Form.editName(formName = "Form Object");

		PopulateObjectFormsConfiguration.openFormSettings();

		PopulateObjectFormsConfiguration.selectObject(label = "Object");

		PopulateObjectFormsConfiguration.selectCustomObject(label = "Custom Object 178");

		Form.gotoAddField(fieldType = "Text");

		PopulateObjectFormsConfiguration.mapFormField(fieldLabelName = "Custom Field");

		Form.publishForm();

		FormsAdminNavigator.gotoPublishedForm();

		FormViewBuilder.editText(
			fieldName = "Text",
			fieldValue = "Entry Test");

		FormPortlet.submitSuccessfully();

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject178");

		ObjectPortlet.assertEntryStauts(
			key_entry = "Entry Test",
			key_status = "Pending");
	}

	@description = "LPS-135649 - Verify that the workflow is triggered when submitting an entry through Custom Object portlet"
	@priority = "4"
	test WorkflowTriggeredWhenSubmitingEntryThroughObjectPortlet {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 179",
			objectName = "CustomObject179",
			pluralLabelName = "Custom Objects 179");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject179");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject179");

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Custom Object 179");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject179");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject179");

		ObjectPortlet.assertEntryStauts(
			key_entry = "Entry Test",
			key_status = "Pending");
	}

	@description = "LPS-135649 - Verify that the workflow is triggered when submitting an entry when Object is scoped by Site and the workflow was assigned on the Workflow settings from the Site Menu"
	@priority = "4"
	test WorkflowTriggeredWhenSubmitingEntryThroughObjectPortletFromSiteMenu {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 180",
			objectName = "CustomObject180",
			panelCategoryKey = "site_administration.content",
			pluralLabelName = "Custom Objects 180",
			scope = "site");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject180");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject180");

		ObjectAdmin.openWorkflowProcessBuilderConfiguration();

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Custom Object 180");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject180");

		ObjectPortlet.addSingleFieldEntryViaUI(entry = "Entry Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject180");

		ObjectPortlet.assertEntryStauts(
			key_entry = "Entry Test",
			key_status = "Pending");
	}

}