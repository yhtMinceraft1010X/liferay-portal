@component-name = "portal-object"
definition {

	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectAdmin.deleteAllCustomObjectsViaAPI();
		}
	}

	@description = "LPS-135390 - Verify it is possible to view and access the Picklist portlet with the Access in Control Panel permission"
	@priority = "4"
	test CanAccessPicklistWithAccessPermission {
		JSONRole.addRegularRole(roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		ObjectPortlet.assertHeader(objectLabel = "Picklists");

		ObjectAdmin.assertNoResultsWereFound();
	}

	@description = "LPS-135390 - Verify it is possible to add a Picklist with the Add permission"
	@priority = "4"
	test CanAddPicklistWithAddPermission {
		JSONRole.addRegularRole(roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.list.type.model.ListTypeDefinition",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_LIST_TYPE_DEFINITION",
			resourceName = "com.liferay.list.type",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		Picklist.addPicklistViaUI(picklistName = "Picklist Test");

		Picklist.assertPicklist(picklistName = "Picklist Test");
	}

	@description = "LPS-146759 - Verify it is possible to update a single Picklist permissions with the Permissions permission"
	@priority = "5"
	test CanDefineSinglePicklistPermissionsWithPermissionsPermission {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectPermission#CanDefineSinglePicklistPermissionsWithPermissionsPermission";

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Picklist.addPicklistViaAPI(picklistName = "Custom Picklist 148941");

		Picklist.gotoPicklists();

		ObjectCustomViews.gotoPermissions(entryName = "Custom Picklist 148941");

		ObjectCustomViews.selectPermissionToRegularRole(permissionsList = "PERMISSIONS,VIEW");

		Button.clickSave();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		ObjectCustomViews.gotoPermissions(entryName = "Custom Picklist 148941");

		ObjectCustomViews.selectPermissionToRegularRole(permissionsList = "VIEW");

		Button.clickSave();

		Picklist.gotoPicklists();

		Picklist.assertPicklistNotPresent(picklistName = "Custom Picklist 148941");
	}

	@description = "LPS-135390 - Verify it is possible to delete a Picklist with the Delete permission"
	@priority = "4"
	test CanDeletePicklistWithDeletePermission {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		for (var resourceAction : list "DELETE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com.liferay.list.type.model.ListTypeDefinition",
				roleTitle = "Regular Role");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			picklistName = "Picklist Test",
			picklistOption = "Delete");

		Picklist.assertPicklistNotPresent(picklistName = "Picklist Test");
	}

	@description = "LPS-146757 - Verify it is possible to delete a single Object Entry with the Delete permission"
	@priority = "5"
	test CanDeleteSingleObjectEntryWithDeletePermission {
		property osgi.module.configuration.file.names = "com.liferay.object.rest.internal.configuration.FFObjectEntryPermissionsActionConfiguration.config";
		property osgi.module.configurations = "enabled=&quot;true&quot;";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectPermission#CanDeleteSingleObjectEntryWithDeletePermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Entry Test");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		Navigator.openURL();

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectCustomViews.gotoPermissions(entryName = "Entry Test");

		ObjectCustomViews.selectPermissionToRegularRole(permissionsList = "DELETE,VIEW");

		Button.clickSave();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.deleteEntry(entry = "Entry Test");

		ObjectPortlet.assertEntryNotPresent(entry = "Entry Test");
	}

	@description = "LPS-146758 - Verify it is possible to delete a single Object with the Delete permission"
	@priority = "5"
	test CanDeleteSingleObjectWithDeletePermission {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectPermission#CanDeleteSingleObjectWithDeletePermission";

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_object_web_internal_object_definitions_portlet_ObjectDefinitionsPortlet",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 148930",
			objectName = "CustomObject148930",
			pluralLabelName = "Custom Objects 148930");

		ObjectAdmin.openObjectAdmin();

		ObjectCustomViews.gotoPermissions(entryName = "Custom Object 148930");

		ObjectCustomViews.selectPermissionToRegularRole(permissionsList = "DELETE,VIEW");

		Button.clickSave();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		CreateObject.deleteObjectViaUI(objectLabel = "Custom Object 148930");

		CreateObject.assertObjectNotPresent(objectLabel = "Custom Object 148930");
	}

	@description = "LPS-146759 - Verify it is possible to delete a single Picklist with the Delete permission"
	@priority = "5"
	test CanDeleteSinglePicklistWithDeletePermission {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectPermission#CanDeleteSinglePicklistWithDeletePermission";

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Picklist.addPicklistViaAPI(picklistName = "Custom Picklist 148938");

		Picklist.gotoPicklists();

		ObjectCustomViews.gotoPermissions(entryName = "Custom Picklist 148938");

		ObjectCustomViews.selectPermissionToRegularRole(permissionsList = "DELETE,VIEW");

		Button.clickSave();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		Picklist.optionsPicklist(
			picklistName = "Custom Picklist 148938",
			picklistOption = "Delete");

		Picklist.assertPicklistNotPresent(picklistName = "Custom Picklist 148938");
	}

	@description = "LPS-135390 - Verify it is possible to edit its own Object entry with only the Add Object Entry permission"
	@priority = "5"
	test CanEditItsOwnEntryWithOnlyAddPermission {
		property portal.acceptance = "quarantine";
		property test.name.skip.portal.instance = "ObjectPermission#CanEditItsOwnEntryWithOnlyAddPermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceActionIndex : list "APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX,RESOURCE_PERMISSION_ADD_ENTRY_CHECKBOX") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.definePermissionCP(
				permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_${resourceActionIndex}",
				permissionDefinitionValue = "",
				permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
				permissionNavigationValue = "Custom Objects",
				roleTitle = "Regular Role",
				roleType = "Regular");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry Test");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Entry Test");

		ObjectPortlet.viewEntryDetails(entry = "Entry Test");

		ObjectAdmin.editEntryName(newEntryValue = "Update Entry");

		Navigator.openURL();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Update Entry");
	}

	@description = "LPS-135390 - Verify it is not possible to add a Picklist without the Add permission"
	@priority = "5"
	test CannotAddPicklistWithoutAddPermission {
		property portal.acceptance = "true";

		JSONRole.addRegularRole(roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		AssertElementNotPresent(locator1 = "Button#PLUS");
	}

	@description = "LPS-146759 - Verify it is not possible to update a single Picklist permissions created by the user if the Permissions Owner permission is removed"
	@priority = "4"
	test CannotDefineSinglePicklistPermissionsWithoutPermissionsOwnerPermission {
		property test.name.skip.portal.instance = "ObjectPermission#CannotDefineSinglePicklistPermissionsWithoutPermissionsOwnerPermission";

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_LIST_TYPE_DEFINITION",
			resourceName = "com.liferay.list.type",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		Picklist.addPicklistViaUI(picklistName = "Picklist Test");

		Refresh();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Picklist.gotoPicklists();

		ObjectCustomViews.gotoPermissions(entryName = "Picklist Test");

		ObjectCustomViews.selectAnyPermissions(
			owner = "true",
			permissionsList = "PERMISSIONS");

		Button.clickSave();

		Refresh();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		ObjectCustomViews.viewOptionNotPresentInKebabMenu(
			entryName = "Picklist Test",
			menuItem = "Permissions");
	}

	@description = "LPS-146757 - Verify it is not possible to delete a single Object Entry create by the user if the Delete Owner permission is removed"
	@priority = "4"
	test CannotDeleteOwnSingleObjectEntryWithoutDeleteOwnerPermission {
		property osgi.module.configuration.file.names = "com.liferay.object.rest.internal.configuration.FFObjectEntryPermissionsActionConfiguration.config";
		property osgi.module.configurations = "enabled=&quot;true&quot;";
		property test.name.skip.portal.instance = "ObjectPermission#CannotDeleteOwnSingleObjectEntryWithoutDeleteOwnerPermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		JSONRole.addRegularRole(roleTitle = "Regular Role");

		for (var resourceActionIndex : list "APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX,RESOURCE_PERMISSION_ADD_ENTRY_CHECKBOX") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.definePermissionCP(
				permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_${resourceActionIndex}",
				permissionDefinitionValue = "",
				permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
				permissionNavigationValue = "Custom Objects",
				roleTitle = "Regular Role",
				roleType = "Regular");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectCustomViews.gotoPermissions(entryName = "Entry Test");

		ObjectCustomViews.selectAnyPermissions(
			owner = "true",
			permissionsList = "DELETE");

		Button.clickSave();

		Refresh();

		ObjectCustomViews.viewOptionNotPresentInKebabMenu(
			entryName = "Entry Test",
			menuItem = "Delete");
	}

	@description = "LPS-135390 - Verify it is not possible to delete a Picklist without the Delete permission"
	@priority = "4"
	test CannotDeletePicklistWithoutDeletePermission {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.list.type.model.ListTypeDefinition",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		MenuItem.viewNotPresent(menuItem = "Delete");
	}

	@description = "LPS-146758 - Verify it is not possible to delete a single Object created by the user if the Delete Owner permission is removed"
	@priority = "4"
	test CannotDeleteSingleObjectWithoutDeleteOwnerPermission {
		property test.name.skip.portal.instance = "ObjectPermission#CannotDeleteSingleObjectWithoutDeleteOwnerPermission";

		JSONRole.addRegularRole(roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_object_web_internal_object_definitions_portlet_ObjectDefinitionsPortlet",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_OBJECT_DEFINITION",
			resourceName = "com.liferay.object",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object 148934",
			pluralLabelName = "Custom Objects 148934");

		ObjectAdmin.saveCustomObject();

		Refresh();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		ObjectAdmin.openObjectAdmin();

		ObjectCustomViews.gotoPermissions(entryName = "Custom Object 148934");

		ObjectCustomViews.selectAnyPermissions(
			owner = "true",
			permissionsList = "DELETE");

		Button.clickSave();

		Refresh();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectCustomViews.viewOptionNotPresentInKebabMenu(
			entryName = "Custom Object 148934",
			menuItem = "Delete");
	}

	@description = "LPS-146759 - Verify it is not possible to delete a single Picklist created by the user if the Delete Owner permission is removed"
	@priority = "4"
	test CannotDeleteSinglePicklistWithoutDeleteOwnerPermission {
		property test.name.skip.portal.instance = "ObjectPermission#CannotDeleteSinglePicklistWithoutDeleteOwnerPermission";

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_LIST_TYPE_DEFINITION",
			resourceName = "com.liferay.list.type",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "PERMISSIONS",
			resourceName = "com.liferay.list.type.model.ListTypeDefinition",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		Picklist.addPicklistViaUI(picklistName = "Picklist Test");

		Refresh();

		ObjectCustomViews.gotoPermissions(entryName = "Picklist Test");

		ObjectCustomViews.selectAnyPermissions(
			owner = "true",
			permissionsList = "DELETE");

		Button.clickSave();

		Refresh();

		ObjectCustomViews.viewOptionNotPresentInKebabMenu(
			entryName = "Picklist Test",
			menuItem = "Delete");
	}

	@description = "LPS-146757 - Verify it is not possible to update a single Object Entry permissions create by the user if the Permissions Owner permission is removed"
	@priority = "4"
	test CannotUpdateOwnSingleObjectEntryWithoutPermissionsOwnerPermission {
		property osgi.module.configuration.file.names = "com.liferay.object.rest.internal.configuration.FFObjectEntryPermissionsActionConfiguration.config";
		property osgi.module.configurations = "enabled=&quot;true&quot;";
		property test.name.skip.portal.instance = "ObjectPermission#CannotUpdateOwnSingleObjectEntryWithoutPermissionsOwnerPermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		JSONRole.addRegularRole(roleTitle = "Regular Role");

		for (var resourceActionIndex : list "APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX,RESOURCE_PERMISSION_ADD_ENTRY_CHECKBOX") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.definePermissionCP(
				permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_${resourceActionIndex}",
				permissionDefinitionValue = "",
				permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
				permissionNavigationValue = "Custom Objects",
				roleTitle = "Regular Role",
				roleType = "Regular");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectCustomViews.gotoPermissions(entryName = "Entry Test");

		ObjectCustomViews.selectAnyPermissions(
			owner = "true",
			permissionsList = "PERMISSIONS");

		Button.clickSave();

		Refresh();

		ObjectCustomViews.viewOptionNotPresentInKebabMenu(
			entryName = "Entry Test",
			menuItem = "Permissions");
	}

	@description = "LPS-146757 - Verify it is not possible to update a single Object Entry create by the user if the Update Owner permission is removed"
	@priority = "4"
	test CannotUpdateOwnSingleObjectEntryWithoutUpdateOwnerPermission {
		property osgi.module.configuration.file.names = "com.liferay.object.rest.internal.configuration.FFObjectEntryPermissionsActionConfiguration.config";
		property osgi.module.configurations = "enabled=&quot;true&quot;";
		property test.name.skip.portal.instance = "ObjectPermission#CannotUpdateOwnSingleObjectEntryWithoutUpdateOwnerPermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		JSONRole.addRegularRole(roleTitle = "Regular Role");

		for (var resourceActionIndex : list "APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX,RESOURCE_PERMISSION_ADD_ENTRY_CHECKBOX") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.definePermissionCP(
				permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_${resourceActionIndex}",
				permissionDefinitionValue = "",
				permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
				permissionNavigationValue = "Custom Objects",
				roleTitle = "Regular Role",
				roleType = "Regular");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectCustomViews.gotoPermissions(entryName = "Entry Test");

		ObjectCustomViews.selectAnyPermissions(
			owner = "true",
			permissionsList = "UPDATE");

		Button.clickSave();

		Refresh();

		ObjectPortlet.viewEntryDetails(entry = "Entry Test");

		ObjectAdmin.viewFieldValueDisabled(fieldValue = "Entry Test");

		AssertElementNotPresent(locator1 = "Button#SAVE");
	}

	@description = "LPS-135390 - Verify it is not possible to update a Picklist without the Update permission"
	@priority = "4"
	test CannotUpdatePicklistWithoutUpdatePermission {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "ItemTest",
			itemName = "Picklist Item",
			picklistName = "Picklist Test");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.list.type.model.ListTypeDefinition",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		CreateObject.viewObject(labelName = "Picklist Test");

		Picklist.assertDisabledPicklistName();

		Picklist.assertDisabledSaveButton();

		CreateObject.viewObject(labelName = "Picklist Item");

		Picklist.assertDisabledPicklistItem();

		Picklist.assertDisabledSaveButton();
	}

	@description = "LPS-146758 - Verify it is not possible to update a single Object permissions created by the user if the Permissions Owner permission is removed"
	@priority = "4"
	test CannotUpdateSingleObjectPermissionWithoutPermissionsOwnerPermission {
		property test.name.skip.portal.instance = "ObjectPermission#CannotUpdateSingleObjectPermissionWithoutPermissionsOwnerPermission";

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_object_web_internal_object_definitions_portlet_ObjectDefinitionsPortlet",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_OBJECT_DEFINITION",
			resourceName = "com.liferay.object",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object 148937",
			pluralLabelName = "Custom Objects 148937");

		ObjectAdmin.saveCustomObject();

		Refresh();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		ObjectAdmin.openObjectAdmin();

		ObjectCustomViews.gotoPermissions(entryName = "Custom Object 148937");

		ObjectCustomViews.selectAnyPermissions(
			owner = "true",
			permissionsList = "PERMISSIONS");

		Button.clickSave();

		Refresh();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectCustomViews.viewOptionNotPresentInKebabMenu(
			entryName = "Custom Object 148937",
			menuItem = "Permissions");
	}

	@description = "LPS-146758 - Verify it is not possible to update a single Object created by the user if the Delete Owner permission is removed"
	@priority = "4"
	test CannotUpdateSingleObjectWithoutUpdateOwnerPermission {
		property test.name.skip.portal.instance = "ObjectPermission#CannotUpdateSingleObjectWithoutUpdateOwnerPermission";

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_object_web_internal_object_definitions_portlet_ObjectDefinitionsPortlet",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_OBJECT_DEFINITION",
			resourceName = "com.liferay.object",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "PERMISSIONS",
			resourceName = "com.liferay.object.model.ObjectDefinition",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object 148935",
			pluralLabelName = "Custom Objects 148935");

		ObjectAdmin.saveCustomObject();

		Refresh();

		ObjectCustomViews.gotoPermissions(entryName = "Custom Object 148935");

		ObjectCustomViews.selectAnyPermissions(
			owner = "true",
			permissionsList = "UPDATE");

		Button.clickSave();

		Refresh();

		ObjectPortlet.selectCustomObject(label = "Custom Object 148935");

		CreateObject.assertDisabledAllFields();

		CreateObject.assertDisabledPublishObjectButton();
	}

	@description = "LPS-146759 - Verify it is not possible to update a single Picklist created by the user if the Update Owner permission is removed"
	@priority = "4"
	test CannotUpdateSinglePicklistWithoutUpdateOwnerPermission {
		property test.name.skip.portal.instance = "ObjectPermission#CannotUpdateSinglePicklistWithoutUpdateOwnerPermission";

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_LIST_TYPE_DEFINITION",
			resourceName = "com.liferay.list.type",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "PERMISSIONS",
			resourceName = "com.liferay.list.type.model.ListTypeDefinition",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		Picklist.addPicklistViaUI(picklistName = "Picklist Test");

		Refresh();

		ObjectCustomViews.gotoPermissions(entryName = "Picklist Test");

		ObjectCustomViews.selectAnyPermissions(
			owner = "true",
			permissionsList = "UPDATE");

		Button.clickSave();

		Refresh();

		Picklist.gotoPicklistView(picklistName = "Picklist Test");

		Picklist.assertDisabledPicklistName();

		Picklist.assertDisabledSaveButton();
	}

	@description = "LPS-146757 - Verify it is not possible to view a single Object Entry create by the user if the View Owner permission is removed"
	@priority = "4"
	test CannotViewOwnSingleObjectEntryWithoutViewOwnerPermission {
		property test.name.skip.portal.instance = "ObjectPermission#CannotViewOwnSingleObjectEntryWithoutViewOwnerPermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		JSONRole.addRegularRole(roleTitle = "Regular Role");

		for (var resourceActionIndex : list "APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX,RESOURCE_PERMISSION_ADD_ENTRY_CHECKBOX") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.definePermissionCP(
				permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_${resourceActionIndex}",
				permissionDefinitionValue = "",
				permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
				permissionNavigationValue = "Custom Objects",
				roleTitle = "Regular Role",
				roleType = "Regular");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectCustomViews.gotoPermissions(entryName = "Entry Test");

		ObjectCustomViews.selectAnyPermissions(
			owner = "true",
			permissionsList = "VIEW");

		Button.clickSave();

		Refresh();

		ObjectPortlet.assertEntryNotPresent(entry = "Entry Test");
	}

	@description = "LPS-135390 - Verify it is not possible to view a Picklist without the View permission"
	@priority = "4"
	test CannotViewPicklistWithoutViewPermission {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		JSONRole.addRegularRole(roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		Picklist.assertPicklistNotPresent(picklistName = "Picklist Test");
	}

	@description = "LPS-146758 - Verify it is not possible to View a single Object created by the user if the View Owner permission is removed"
	@priority = "4"
	test CannotViewSingleObjectWithoutViewOwnerPermission {
		property test.name.skip.portal.instance = "ObjectPermission#CannotViewSingleObjectWithoutViewOwnerPermission";

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_object_web_internal_object_definitions_portlet_ObjectDefinitionsPortlet",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_OBJECT_DEFINITION",
			resourceName = "com.liferay.object",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "PERMISSIONS",
			resourceName = "com.liferay.object.model.ObjectDefinition",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectAdmin.addNewObject(
			fieldLabelName = "Custom Object 148936",
			pluralLabelName = "Custom Objects 148936");

		ObjectAdmin.saveCustomObject();

		Refresh();

		ObjectCustomViews.gotoPermissions(entryName = "Custom Object 148936");

		ObjectCustomViews.selectAnyPermissions(
			owner = "true",
			permissionsList = "VIEW");

		Button.clickSave();

		Refresh();

		CreateObject.assertCustomObjectNotPresent(labelName = "Custom Object 148936");
	}

	@description = "LPS-146759 - Verify it is not possible to view a single Picklist created by the user if the View Owner permission is removed"
	@priority = "4"
	test CannotViewSinglePicklistWithoutViewOwnerPermission {
		property test.name.skip.portal.instance = "ObjectPermission#CannotViewSinglePicklistWithoutViewOwnerPermission";

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_LIST_TYPE_DEFINITION",
			resourceName = "com.liferay.list.type",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "PERMISSIONS",
			resourceName = "com.liferay.list.type.model.ListTypeDefinition",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		Picklist.addPicklistViaUI(picklistName = "Picklist Test");

		Refresh();

		ObjectCustomViews.gotoPermissions(entryName = "Picklist Test");

		ObjectCustomViews.selectAnyPermissions(
			owner = "true",
			permissionsList = "VIEW");

		Button.clickSave();

		Refresh();

		Picklist.assertPicklistNotPresent(picklistName = "Picklist Test");
	}

	@description = "LPS-135390 - Verify it is possible to update a Picklist with the Update permission"
	@priority = "4"
	test CanUpdatePicklistWithUpdatePermission {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		for (var resourceAction : list "UPDATE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com.liferay.list.type.model.ListTypeDefinition",
				roleTitle = "Regular Role");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		CreateObject.viewObject(labelName = "Picklist Test");

		Picklist.updatePicklistName(picklistName = "Update Picklist");

		Button.clickSave();

		Refresh();

		Picklist.assertPicklist(picklistName = "Update Picklist");
	}

	@description = "LPS-146757 - Verify it is possible to update a single Object Entry permissions with the Permissions permission"
	@priority = "5"
	test CanUpdateSingleObjectEntryPermissionsPermission {
		property osgi.module.configuration.file.names = "com.liferay.object.rest.internal.configuration.FFObjectEntryPermissionsActionConfiguration.config";
		property osgi.module.configurations = "enabled=&quot;true&quot;";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectPermission#CanUpdateSingleObjectEntryPermissionsPermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Entry Test");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		Navigator.openURL();

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectCustomViews.gotoPermissions(entryName = "Entry Test");

		ObjectCustomViews.selectPermissionToRegularRole(permissionsList = "PERMISSIONS,VIEW");

		Button.clickSave();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectCustomViews.gotoPermissions(entryName = "Entry Test");

		ObjectCustomViews.selectPermissionToRegularRole(permissionsList = "VIEW");

		Button.clickSave();

		Refresh();

		ObjectPortlet.assertEntryNotPresent(entry = "Entry Test");
	}

	@description = "LPS-146757 - Verify it is possible to update a single Object Entry with the Update permission"
	@priority = "5"
	test CanUpdateSingleObjectEntryWithUpdatePermission {
		property osgi.module.configuration.file.names = "com.liferay.object.rest.internal.configuration.FFObjectEntryPermissionsActionConfiguration.config";
		property osgi.module.configurations = "enabled=&quot;true&quot;";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectPermission#CanUpdateSingleObjectEntryWithUpdatePermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Entry Test");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		Navigator.openURL();

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectCustomViews.gotoPermissions(entryName = "Entry Test");

		ObjectCustomViews.selectPermissionToRegularRole(permissionsList = "UPDATE,VIEW");

		Button.clickSave();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.updateEntry(
			entry = "Entry Test",
			updateEntry = "Test Entry");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.assertEntryNotPresent(entry = "Entry Test");

		ObjectPortlet.viewEntry(entry = "Test Entry");
	}

	@description = "LPS-146758 - Verify it is possible to update a single Object permissions with the Permissions permission"
	@priority = "5"
	test CanUpdateSingleObjectPermissionsWithPermissionsPermission {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectPermission#CanUpdateSingleObjectPermissionsWithPermissionsPermission";

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_object_web_internal_object_definitions_portlet_ObjectDefinitionsPortlet",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 148933",
			objectName = "CustomObject148933",
			pluralLabelName = "Custom Objects 148933");

		ObjectAdmin.openObjectAdmin();

		ObjectCustomViews.gotoPermissions(entryName = "Custom Object 148933");

		ObjectCustomViews.selectPermissionToRegularRole(permissionsList = "PERMISSIONS,VIEW");

		Button.clickSave();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectCustomViews.gotoPermissions(entryName = "Custom Object 148933");

		ObjectCustomViews.selectPermissionToRegularRole(permissionsList = "VIEW");

		Button.clickSave();

		Refresh();

		CreateObject.assertObjectNotPresent(objectLabel = "Custom Object 148933");
	}

	@description = "LPS-146758 - Verify it is possible to update a single Object with the Update permission"
	@priority = "5"
	test CanUpdateSingleObjectWithUpdatePermission {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectPermission#CanUpdateSingleObjectWithUpdatePermission";

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_object_web_internal_object_definitions_portlet_ObjectDefinitionsPortlet",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 148931",
			objectName = "CustomObject148931",
			pluralLabelName = "Custom Objects 148931");

		ObjectAdmin.openObjectAdmin();

		ObjectCustomViews.gotoPermissions(entryName = "Custom Object 148931");

		ObjectCustomViews.selectPermissionToRegularRole(permissionsList = "UPDATE,VIEW");

		Button.clickSave();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 148931");

		CreateObject.editLabel(labelName = "Update Custom Object");

		CreateObject.saveObject();

		ObjectAdmin.openObjectAdmin();

		CreateObject.assertCustomObject(labelName = "Update Custom Object");
	}

	@description = "LPS-146759 - Verify it is possible to update a single Picklist with the Update permission"
	@priority = "5"
	test CanUpdateSinglePicklistWithUpdatePermission {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectPermission#CanUpdateSinglePicklistWithUpdatePermission";

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Picklist.addPicklistViaAPI(picklistName = "Custom Picklist 148939");

		Picklist.gotoPicklists();

		ObjectCustomViews.gotoPermissions(entryName = "Custom Picklist 148939");

		ObjectCustomViews.selectPermissionToRegularRole(permissionsList = "UPDATE,VIEW");

		Button.clickSave();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		CreateObject.viewObject(labelName = "Custom Picklist 148939");

		Picklist.updatePicklistName(picklistName = "Update Custom Picklist");

		Button.clickSave();

		Picklist.gotoPicklists();

		Picklist.assertPicklist(picklistName = "Update Custom Picklist");
	}

	@description = "LPS-140342 - Verify it is possible view and edit its own Picklist with only the Add Picklist permission"
	@priority = "4"
	test CanViewAndEditPicklistWithAddPicklistPermission {
		JSONRole.addRegularRole(roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.list.type.model.ListTypeDefinition",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ADD_LIST_TYPE_DEFINITION",
			resourceName = "com.liferay.list.type",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		Picklist.addPicklistViaUI(picklistName = "Picklist Test");

		Picklist.assertPicklist(picklistName = "Picklist Test");

		CreateObject.viewObject(labelName = "Picklist Test");

		Picklist.updatePicklistName(picklistName = "Update Picklist");

		Button.clickSave();

		Refresh();

		Picklist.assertPicklist(picklistName = "Update Picklist");
	}

	@description = "LPS-135390 - Verify it is possible to view its own Object entry with only the Add Object Entry permission"
	@priority = "5"
	test CanViewItsOwnEntryWithOnlyAddPermission {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectPermission#CanViewItsOwnEntryWithOnlyAddPermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		for (var resourceActionIndex : list "APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX,RESOURCE_PERMISSION_ADD_ENTRY_CHECKBOX") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.definePermissionCP(
				permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_${resourceActionIndex}",
				permissionDefinitionValue = "",
				permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
				permissionNavigationValue = "Custom Objects",
				roleTitle = "Regular Role",
				roleType = "Regular");
		}

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectAdmin.addObjectStringFieldEntryViaUI(entryValue = "Entry Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Entry Test");
	}

	@description = "LPS-135390 - Verify it is possible to view a Picklist with the View permission"
	@priority = "4"
	test CanViewPicklistWithViewPermission {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		JSONRole.addRegularRole(roleTitle = "Regular Role");

		for (var resourceAction : list "ACCESS_IN_CONTROL_PANEL,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "${resourceAction}",
				resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
				roleTitle = "Regular Role");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW",
			resourceName = "com.liferay.list.type.model.ListTypeDefinition",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		Picklist.assertPicklist(picklistName = "Picklist Test");
	}

	@description = "LPS-146757 - Verify it is possible to view a single Object Entry with the View permission"
	@priority = "5"
	test CanViewSingleObjectEntryWithViewPermission {
		property osgi.module.configuration.file.names = "com.liferay.object.rest.internal.configuration.FFObjectEntryPermissionsActionConfiguration.config";
		property osgi.module.configurations = "enabled=&quot;true&quot;";
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectPermission#CanViewSingleObjectEntryWithViewPermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Entry Test");

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_APPLICATION_PERMISSION_ACCESS_CONTROL_PANEL_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Regular Role",
			roleType = "Regular");

		Navigator.openURL();

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectCustomViews.gotoPermissions(entryName = "Entry Test");

		ObjectCustomViews.selectPermissionToRegularRole(permissionsList = "PERMISSIONS,VIEW");

		Button.clickSave();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject");

		ObjectPortlet.viewEntry(entry = "Entry Test");
	}

	@description = "LPS-146758 - Verify it is possible to view a single Object with the View permission"
	@priority = "5"
	test CanViewSingleObjectWithViewPermission {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectPermission#CanViewSingleObjectWithViewPermission";

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_object_web_internal_object_definitions_portlet_ObjectDefinitionsPortlet",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 148932",
			objectName = "CustomObject148932",
			pluralLabelName = "Custom Objects 148932");

		ObjectAdmin.openObjectAdmin();

		ObjectCustomViews.gotoPermissions(entryName = "Custom Object 148932");

		ObjectCustomViews.selectPermissionToRegularRole(permissionsList = "PERMISSIONS,VIEW");

		Button.clickSave();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		ObjectAdmin.openObjectAdmin();

		CreateObject.assertCustomObject(labelName = "Custom Object 148932");
	}

	@description = "LPS-146759 - Verify it is possible to view a single Picklist with the View permission"
	@priority = "5"
	test CanViewSinglePicklistWithViewPermission {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectPermission#CanViewSinglePicklistWithViewPermission";

		JSONRole.addRegularRole(
			roleKey = "Regular Role",
			roleTitle = "Regular Role");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "ACCESS_IN_CONTROL_PANEL",
			resourceName = "com_liferay_object_web_internal_list_type_portlet_portlet_ListTypeDefinitionsPortlet",
			roleTitle = "Regular Role");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Regular Role",
			userEmailAddress = "userea@liferay.com");

		Picklist.addPicklistViaAPI(picklistName = "Custom Picklist 148940");

		Picklist.gotoPicklists();

		ObjectCustomViews.gotoPermissions(entryName = "Custom Picklist 148940");

		ObjectCustomViews.selectPermissionToRegularRole(permissionsList = "PERMISSIONS,VIEW");

		Button.clickSave();

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Picklist.gotoPicklists();

		Picklist.assertPicklist(picklistName = "Custom Picklist 148940");
	}

	@description = "LPS-146756 - Verify that a guest user with the resource permission action of "Add Object Entry" activated can add new object entries and view its own entries"
	@priority = "5"
	test GuestCanAddObjectEntriesWithAddPermission {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectPermission#GuestCanAddObjectEntriesWithAddPermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Entry Test");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		Check.checkToggleSwitch(locator1 = "ObjectPortlet#VIEW_WIDGET_BUTTON");

		CreateObject.saveObject();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(
			pageName = "Object Page",
			sitePageType = "Widget Page");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Object Page");

		Portlet.addPG(
			pageName = "Object Page",
			portletName = "Custom Objects");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		for (var resourceActionIndex : list "RESOURCE_PERMISSION_ADD_ENTRY_CHECKBOX,RESOURCE_PERMISSIONS_VIEW_CHECKBOX") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Roles");

			Role.definePermissionCP(
				permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_${resourceActionIndex}",
				permissionDefinitionValue = "",
				permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
				permissionNavigationValue = "Custom Objects",
				roleTitle = "Guest",
				roleType = "Regular");
		}

		Navigator.openURL();

		User.logoutPG();

		Navigator.gotoPage(pageName = "Object Page");

		LexiconEntry.gotoAdd();

		Type(
			locator1 = "ObjectAdmin#ENTRY_STRING_VALUE_FIELD",
			value1 = "Entry Test");

		Button.clickSave();

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Object Page");

		ObjectPortlet.viewEntry(entry = "Entry Test");
	}

	@description = "LPS-146756 - Verify that a guest user with the resource permission action of "Add Object Entry" unactivated can't add new object entries"
	@priority = "5"
	test GuestCannotAddObjectEntriesWithoutAddPermission {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectPermission#GuestCannotAddObjectEntriesWithoutAddPermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 148949",
			objectName = "CustomObject148949",
			pluralLabelName = "Custom Objects 148949");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject148949");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject148949");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject148949",
			value = "Entry Test");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 148949");

		Check.checkToggleSwitch(locator1 = "ObjectPortlet#VIEW_WIDGET_BUTTON");

		CreateObject.saveObject();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(
			pageName = "Object Page",
			sitePageType = "Widget Page");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Object Page");

		Portlet.addPG(
			pageName = "Object Page",
			portletName = "Custom Objects 148949");

		Navigator.openURL();

		User.logoutPG();

		Navigator.gotoPage(pageName = "Object Page");

		ObjectPortlet.assertPlusButtonIsNotPresent();
	}

	@description = "LPS-146756 - Verify that a guest user with the resource permission action of "View"  unactivated can't vizualize object entries"
	@priority = "5"
	test GuestCannotViewObjectEntriesWithoutViewPermission {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectPermission#GuestCannotViewObjectEntriesWithoutViewPermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 148948",
			objectName = "CustomObject148948",
			pluralLabelName = "Custom Objects 148948");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject148948");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject148948");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject148948",
			value = "Entry Test");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 148948");

		Check.checkToggleSwitch(locator1 = "ObjectPortlet#VIEW_WIDGET_BUTTON");

		CreateObject.saveObject();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(
			pageName = "Object Page",
			sitePageType = "Widget Page");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Object Page");

		Portlet.addPG(
			pageName = "Object Page",
			portletName = "Custom Objects 148948");

		Navigator.openURL();

		User.logoutPG();

		Navigator.gotoPage(pageName = "Object Page");

		ObjectPortlet.assertEntryNotPresent(entry = "Entry Test");
	}

	@description = "LPS-146756 - Verify that a guest user with the resource permission action of "View" activated can vizualize object entries"
	@priority = "5"
	test GuestCanViewObjectEntriesWithViewPermission {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ObjectPermission#GuestCanViewObjectEntriesWithViewPermission";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object",
			objectName = "CustomObject",
			pluralLabelName = "Custom Objects");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject",
			value = "Entry Test");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object");

		Check.checkToggleSwitch(locator1 = "ObjectPortlet#VIEW_WIDGET_BUTTON");

		CreateObject.saveObject();

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(
			pageName = "Object Page",
			sitePageType = "Widget Page");

		Navigator.openURL();

		Navigator.gotoPage(pageName = "Object Page");

		Portlet.addPG(
			pageName = "Object Page",
			portletName = "Custom Objects");

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Roles");

		Role.definePermissionCP(
			permissionDefinitionKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS_RESOURCE_PERMISSIONS_VIEW_CHECKBOX",
			permissionDefinitionValue = "",
			permissionNavigationKey = "CONTROL_PANEL_CUSTOM_OBJECTS_PERMISSIONS",
			permissionNavigationValue = "Custom Objects",
			roleTitle = "Guest",
			roleType = "Regular");

		Navigator.openURL();

		User.logoutPG();

		Navigator.gotoPage(pageName = "Object Page");

		ObjectPortlet.viewEntry(entry = "Entry Test");
	}

}