@component-name = "portal-object"
definition {

	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectAdmin.deleteAllCustomObjectsViaAPI();
		}
	}

	@description = "LPS-135386 - Verify if the user can display the entries on a table format"
	@priority = "5"
	test CanDisplayEntriesOnTableFormat {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 299",
			objectName = "CustomObject299",
			pluralLabelName = "Custom Objects 299");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject299");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject299");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject299",
			value = "Test Text 1");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject299",
			value = "Test Text 2");

		VisualizeObjectDisplayPage.createObjectPageTemplate(
			contentType = "Custom Object 299",
			pageTemplateName = "Blank Display Page");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			fragmentName = "Collection Display",
			infoListProviderName = "Custom Objects 299");

		DoubleClick(
			collectionName = "Collection Display",
			locator1 = "VisualizeObjectCollectionDisplay#FRAGMENT_COLLECTION");

		Select(
			key_fieldLabel = "Style Display",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Table");

		PageEditor.clickPublish();

		VisualizeObjectDisplayPage.openDisplayPage(displayPageName = "Blank Display Page");

		VisualizeObjectCollectionDisplay.assertTableEntriesPresent(entries = "Test Text 1");

		VisualizeObjectCollectionDisplay.assertTableEntriesPresent(entries = "Test Text 2");
	}

	@description = "LPS-133865 - Verify if the fields from an Object are displayed to be mapped on a fragment"
	@priority = "5"
	test FieldsFromObjectDisplayedToBeMapped {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 300",
			objectName = "CustomObject300",
			pluralLabelName = "Custom Objects 300");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Integer",
			fieldLabelName = "Number",
			fieldName = "integer",
			fieldType = "Integer",
			isRequired = "false",
			objectName = "CustomObject300");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Text",
			fieldName = "text",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject300");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject300");

		VisualizeObjectDisplayPage.createObjectPageTemplate(
			contentType = "Custom Object 300",
			pageTemplateName = "Blank Display Page");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		VisualizeObjectCollectionDisplay.addFieldForCollectionDisplay(fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "Number");

		VisualizeObjectCollectionDisplay.viewMappedFragment(fieldLabel = "Number");

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "Text");

		VisualizeObjectCollectionDisplay.viewMappedFragment(fieldLabel = "Text");
	}

	@description = "LPS-133865 - Verify if the Object is displayed to be selected as Collection Provider on the Collection Display fragment"
	@priority = "5"
	test ObjectDisplayedToCollectionProdiver {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 301",
			objectName = "CustomObject301",
			pluralLabelName = "Custom Objects 301");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Field",
			fieldName = "customObjectField",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject301");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject301");

		VisualizeObjectCollectionDisplay.openObjectCollectionProvider();

		VisualizeObjectCollectionDisplay.viewObjectCollectionProvider(labelName = "Custom Objects 301");
	}

	@description = "LPS-133865 - Verify if the Object entries are rendered inside the Collection Display fragment"
	@priority = "5"
	test ObjectEntriesAreRendered {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 302",
			objectName = "CustomObject302",
			pluralLabelName = "Custom Objects 302");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Text",
			fieldLabelName = "Text",
			fieldName = "text",
			fieldType = "String",
			isRequired = "false",
			objectName = "CustomObject302");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject302");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject302",
			value = "Test Text 1");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "text",
			objectName = "CustomObject302",
			value = "Test Text 2");

		VisualizeObjectDisplayPage.createObjectPageTemplate(
			contentType = "Custom Object 302",
			pageTemplateName = "Blank Display Page");

		PageEditor.addFragment(
			collectionName = "Content Display",
			fragmentName = "Collection Display");

		PageEditor.editCollectionDisplay(
			fragmentName = "Collection Display",
			infoListProviderName = "Custom Objects 302");

		PageEditor.gotoTab(tabName = "Fragments and Widgets");

		VisualizeObjectCollectionDisplay.addFieldForCollectionDisplay(fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectCollectionDisplay.addFieldInsideCollectionDisplay(
			fragmentName = "Heading",
			label = "Expand Collection Display");

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "Text");

		PageEditor.clickPublish();

		VisualizeObjectDisplayPage.openDisplayPage(displayPageName = "Blank Display Page");

		VisualizeObjectCollectionDisplay.viewEntriesFragment(entries = "Test Text 1");

		VisualizeObjectCollectionDisplay.viewEntriesFragment(entries = "Test Text 2");
	}

}