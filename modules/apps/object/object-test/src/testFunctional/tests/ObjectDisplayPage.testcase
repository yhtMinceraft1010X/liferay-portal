@component-name = "portal-object"
definition {

	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectAdmin.deleteAllCustomObjectsViaAPI();
		}
	}

	@description = "LPS-142659 - Verify it is possible to display a specific entry of Clob type for a specific Object"
	@priority = "4"
	test DisplaySpecificEntryClob {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 203",
			objectName = "CustomObject203",
			pluralLabelName = "Custom Objects 203");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "LongText",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "Clob",
			isRequired = "false",
			objectName = "CustomObject203");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject203");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject203",
			value = "We make it possible for people to reach their full potential to serve others.");

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		ContentPages.addPage(pageName = "Blank Page");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectDisplayPage.addItem(
			frameTitle = "Select",
			pluralLabelName = "Custom Objects 203");

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "Custom Field");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "We make it possible for people to reach their full potential to serve others.");

		PageEditor.clickPublish();

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "View",
			pageName = "Blank Page");

		VisualizeObjectCollectionDisplay.viewEntriesFragment(entries = "We make it possible for people to reach their full potential to serve others.");
	}

	@description = "LPS-136595 - Verify it is possible to display a specific entry of Picklist type for a specific Object"
	@priority = "4"
	test DisplaySpecificEntryPicklist {
		property portal.upstream = "quarantine";

		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "entryTest",
			itemName = "Entry Test",
			picklistName = "Picklist Test");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 204",
			objectName = "CustomObject204",
			pluralLabelName = "Custom Objects 204");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 204");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field Picklist",
			fieldPicklist = "Picklist Test",
			fieldType = "Picklist");

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject204");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject204");

		ObjectAdmin.addObjectPicklistFieldEntryViaUI(picklistOption = "Entry Test");

		PagesAdmin.openPagesAdmin(siteURLKey = "guest");

		ContentPages.addPage(pageName = "Blank Page");

		PageEditor.addFragment(
			collectionName = "Basic Components",
			fragmentName = "Heading");

		VisualizeObjectCollectionDisplay.openHeading();

		VisualizeObjectDisplayPage.addItem(
			frameTitle = "Select",
			pluralLabelName = "Custom Objects 204");

		VisualizeObjectCollectionDisplay.mapFragment(fieldLabel = "Field Picklist");

		VisualizeObjectDisplayPage.assertDisplayEntry(entry = "Entry Test");

		PageEditor.clickPublish();

		PagesAdmin.gotoPageEllipsisMenuItem(
			menuItem = "View",
			pageName = "Blank Page");

		VisualizeObjectCollectionDisplay.viewEntriesFragment(entries = "Entry Test");
	}

}