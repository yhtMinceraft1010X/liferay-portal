@component-name = "portal-object"
definition {

	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			ObjectAdmin.deleteAllCustomObjectsViaAPI();
		}
	}

	@description = "LPS-142659 - Verify that the user is able to add an entry of long text and view the entry"
	@priority = "4"
	test CanAddClobLongText {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 195",
			objectName = "CustomObject195",
			pluralLabelName = "Custom Objects 195");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "LongText",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "Clob",
			isRequired = "false",
			objectName = "CustomObject195");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject195");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject195",
			value = "By building a vibrant business, making technology useful, and investing in communities, we make it possible for people to reach their full potential to serve others.");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject195");

		ObjectPortlet.viewEntry(entry = "By building a vibrant business, making technology useful, and investing in communities, we make it possible for people to reach their full potential to serve others.");
	}

	@description = "LPS-147658 - Verify it is possible to submit an empty value for a Date field and it will be correctly displayed on the View"
	@priority = "5"
	test CanDisplayEmptyDateValue {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 147871",
			objectName = "CustomObject147871",
			pluralLabelName = "Custom Objects 147871");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "Date",
			fieldLabelName = "Date",
			fieldName = "customObjectField",
			fieldType = "Date",
			isRequired = "false",
			objectName = "CustomObject147871");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject147871");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject147871");

		LexiconEntry.gotoAdd();

		Button.clickSave();

		WaitForSPARefresh();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject147871");

		ObjectPortlet.viewEntry(entry = "");
	}

	@description = "LPS-142659 - Verify it is possible to edit a entry of Clob field and view the update on entry table"
	@priority = "4"
	test CanEditClobField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 196",
			objectName = "CustomObject196",
			pluralLabelName = "Custom Objects 196");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "LongText",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "Clob",
			isRequired = "false",
			objectName = "CustomObject196");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject196");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject196",
			value = "We make it possible for people to reach their full potential to serve others.");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject196");

		ObjectPortlet.viewEntry(entry = "We make it possible for people to reach their full potential to serve others.");

		ObjectPortlet.viewClobEntryDetails(clobEntry = "We make it possible for people to reach their full potential to serve others.");

		ObjectAdmin.editClobEntryName(clobEntry = "All people are inherently valuable; who we are is as important as what we can do.");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject196");

		ObjectPortlet.viewEntry(entry = "All people are inherently valuable; who we are is as important as what we can do.");
	}

	@description = "LPS-150797 - Verify it is possible to view object entries after adding a file in the attachment field"
	@priority = "5"
	test CanViewObjectEntriesAfterAddingAttachment {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151587",
			objectName = "CustomObject151587",
			pluralLabelName = "Custom Objects 151587");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 151587");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldAttachment = "Upload Directly from the User's Computer",
			fieldLabel = "Custom Attachment",
			fieldType = "Attachment");

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151587");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151587");

		ObjectAutoGenerated.addAttachment(fileName = "LiferayLogo.png");

		Button.clickSave();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151587");

		ObjectPortlet.viewEntry(entry = "LiferayLogo.png");
	}

	@description = "LPS-143064 - Verify that, when seeing an object view with uploads, the user must only be able to read the first line of the text without considering its format"
	@priority = "4"
	test CanViewOnlyFirstLineOfUploadTextField {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 151585",
			objectName = "CustomObject151585",
			pluralLabelName = "Custom Objects 151585");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "RichText",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "Clob",
			isRequired = "false",
			objectName = "CustomObject151585");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject151585");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151585");

		LexiconEntry.gotoAdd();

		ObjectAutoGenerated.typeAndEditRichText(
			richText = "By building a vibrant business, making technology useful, and investing in communities, we make it possible for people to reach their full potential to serve others.",
			typeEdit = "Strong");

		SelectFrame(locator1 = "ObjectAdmin#VIEW_SHEET_ON_DEFINE_PERMISSIONS");

		Button.clickSave();

		ObjectAdmin.goToCustomObject(objectName = "CustomObject151585");

		AssertCssValue(
			key_entry = "By building a vibrant business, making technology useful, and investing in communities, we make it possible for people to reach their full potential to serve others.",
			locator1 = "ObjectPortlet#ENTRY_VALUE",
			locator2 = "height",
			value1 = "21px");

		ObjectAutoGenerated.assertTypeTextNotPresentInEntryView(
			anyTextNotPresent = "By building a vibrant business, making technology useful, and investing in communities, we make it possible for people to reach their full potential to serve others.",
			formatName = "strong");

		ObjectAutoGenerated.assertTypeTextPresentInEntryView(
			anyTextPresent = "By building a vibrant business, making technology useful, and investing in communities, we make it possible for people to reach their full potential to serve others.",
			formatName = "span");
	}

	@description = "LPS-142659 - Verify that a Clob entry is correctly displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "4"
	test ClobDisplayed {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 197",
			objectName = "CustomObject197",
			pluralLabelName = "Custom Objects 197");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "LongText",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "Clob",
			isRequired = "false",
			objectName = "CustomObject197");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject197");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject197",
			value = "We make it possible for people to reach their full potential to serve others.");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject197");

		ObjectPortlet.viewEntry(entry = "We make it possible for people to reach their full potential to serve others.");
	}

	@description = "LPS-142659 - Text will be truncated on the Object portlet table view if it has more than 56 characters"
	@priority = "4"
	test ClobLongTextWillTruncate {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 198",
			objectName = "CustomObject198",
			pluralLabelName = "Custom Objects 198");

		ObjectAdmin.addObjectFieldViaAPI(
			fieldBusinessType = "LongText",
			fieldLabelName = "Custom Field",
			fieldName = "customObjectField",
			fieldType = "Clob",
			isRequired = "false",
			objectName = "CustomObject198");

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject198");

		ObjectAdmin.addObjectSingleFieldEntryViaAPI(
			fieldName = "customObjectField",
			objectName = "CustomObject198",
			value = "We make it possible for people to reach their full potential to serve others.");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject198");

		AssertElementPresent(
			key_entry = "We make it possible for people to reach their full potential to serve others.",
			locator1 = "ObjectPortlet#ENTRY_VALUE_WITH_ELLIPSIS");
	}

	@description = "LPS-136595 - Verify that a Picklist entry is correctly displayed on the auto-generated table on the Custom Object Portlet"
	@priority = "4"
	test PicklistDisplayed {
		Picklist.addPicklistViaAPI(picklistName = "Picklist Test");

		Picklist.addPicklistItemViaAPI(
			itemKey = "entryTest",
			itemName = "Entry Test",
			picklistName = "Picklist Test");

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 199",
			objectName = "CustomObject199",
			pluralLabelName = "Custom Objects 199");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 199");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.addObjectFieldViaUI(
			fieldLabel = "Field Picklist",
			fieldPicklist = "Picklist Test",
			fieldType = "Picklist");

		Navigator.openURL();

		ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject199");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject199");

		ObjectAdmin.addObjectPicklistFieldEntryViaUI(picklistOption = "Entry Test");

		ObjectAdmin.goToCustomObject(objectName = "CustomObject199");

		ObjectPortlet.viewEntry(entry = "Entry Test");
	}

}