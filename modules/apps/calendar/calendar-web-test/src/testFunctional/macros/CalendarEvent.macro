definition {

	var siteName = "Liferay";

	macro _expandPanel {
		var panelNamePath = StringUtil.replace("${panelName}", " ", "_");
		var panelNamePath = StringUtil.upperCase("${panelNamePath}");

		if (IsElementPresent(locator1 = "CalendarEditEvent#${panelNamePath}_PANEL_COLLAPSED")) {
			ScrollWebElementIntoView(locator1 = "CalendarEditEvent#${panelNamePath}_PANEL_COLLAPSED");

			Click(locator1 = "CalendarEditEvent#${panelNamePath}_PANEL_COLLAPSED");

			Pause(locator1 = "3000");

			AssertElementPresent(locator1 = "CalendarEditEvent#${panelNamePath}_PANEL_EXPANDED");
		}
		else if (IsElementPresent(locator1 = "CalendarEditEvent#${panelNamePath}_PANEL_EXPANDED")) {
			ScrollWebElementIntoView(locator1 = "CalendarEditEvent#${panelNamePath}_PANEL_EXPANDED");

			Click(locator1 = "CalendarEditEvent#${panelNamePath}_PANEL_EXPANDED");

			if (IsElementPresent(locator1 = "CalendarEditEvent#${panelNamePath}_PANEL_COLLAPSED")) {
				ScrollWebElementIntoView(locator1 = "CalendarEditEvent#${panelNamePath}_PANEL_COLLAPSED");

				Click(locator1 = "CalendarEditEvent#${panelNamePath}_PANEL_COLLAPSED");

				Pause(locator1 = "3000");

				AssertElementPresent(locator1 = "CalendarEditEvent#${panelNamePath}_PANEL_EXPANDED");
			}
		}
	}

	macro _options {
		if ("${optionSetValue}" == "viewPermission") {
			Select(
				locator1 = "Select#PERMISSIONS",
				value1 = "${viewPermissionValue}");
		}

		if ("${optionSetValue}" == "permissions") {
			var key_permissionDefinitionKey = "${permissionDefinitionKey}";
			var key_roleTitle = "${roleTitle}";

			Check(locator1 = "AssetPermissions#PERMISSIONS_CHECKBOX");
		}

		if ("${optionSetValue}" == "inviteResource") {
			CalendarEvent.inviteResource(resourceNameList = "${specificOptionSetValue}");
		}

		if ("${optionSetValue}" == "reminders") {
			CalendarEvent.configureReminders();
		}

		if ("${optionSetValue}" == "resourcesAvailability") {
			CalendarEvent.viewResourcesAvailability();
		}

		if ("${optionSetValue}" == "tag") {
			CalendarEvent.tag(tagText = "${specificOptionSetValue}");
		}
	}

	macro _viewNewEventIframe {
		AssertElementPresent.assertVisible(locator1 = "CalendarEditEvent#START_DATE");

		AssertElementPresent.assertVisible(locator1 = "CalendarEditEvent#START_DATE_TIME");

		AssertElementPresent.assertVisible(locator1 = "CalendarEditEvent#END_DATE");

		AssertElementPresent.assertVisible(locator1 = "CalendarEditEvent#END_DATE_TIME");
	}

	macro _viewResourcesAvailabilityEvent {
		var key_endDate = "${endDate}";
		var key_endDateTime = "${endDateTime}";
		var key_startDate = "${startDate}";
		var key_startDateTime = "${startDateTime}";

		AssertElementPresent(locator1 = "CalendarEditEvent#RESOURCES_AVAILABILITY_SCHEDULER_EVENT_REGULAR");
	}

	macro add {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		if ("${eventType}" == "Regular") {
			CalendarEvent.addRegular(
				calendarName = "${calendarName}",
				defaultURL = "${defaultURL}",
				duration1 = "${duration1}",
				duration2 = "${duration2}",
				eventTitle = "${eventTitle}",
				nodePort = "${nodePort}",
				number1 = "${number1}",
				number2 = "${number2}",
				optionSet = "${optionSet}",
				optionSetValue = "${optionSetValue}",
				pageName = "${pageName}",
				pageStaging = "${pageStaging}",
				reminders = "${reminders}",
				resourcesAvailability = "${resourcesAvailability}",
				siteName = "${siteName}",
				siteURL = "${siteURL}",
				specificOptionSetValue = "${specificOptionSetValue}",
				workflow = "${workflow}");
		}
		else if ("${eventType}" == "All Day") {
			CalendarEvent.addAllDay(
				calendarName = "${calendarName}",
				defaultURL = "${defaultURL}",
				duration1 = "${duration1}",
				duration2 = "${duration2}",
				eventTitle = "${eventTitle}",
				nodePort = "${nodePort}",
				number1 = "${number1}",
				number2 = "${number2}",
				optionSet = "${optionSet}",
				optionSetValue = "${optionSetValue}",
				pageName = "${pageName}",
				pageStaging = "${pageStaging}",
				reminders = "${reminders}",
				resourcesAvailability = "${resourcesAvailability}",
				siteName = "${siteName}",
				siteURL = "${siteURL}",
				specificOptionSetValue = "${specificOptionSetValue}",
				workflow = "${workflow}");
		}
		else if ("${eventType}" == "Repeating") {
			CalendarEvent.addRepeating(
				calendarName = "${calendarName}",
				defaultURL = "${defaultURL}",
				duration1 = "${duration1}",
				duration2 = "${duration2}",
				eventTitle = "${eventTitle}",
				frequency = "${frequency}",
				nodePort = "${nodePort}",
				number1 = "${number1}",
				number2 = "${number2}",
				numberOfOccurrences = "${numberOfOccurrences}",
				optionSet = "${optionSet}",
				optionSetValue = "${optionSetValue}",
				pageName = "${pageName}",
				pageStaging = "${pageStaging}",
				reminders = "${reminders}",
				resourcesAvailability = "${resourcesAvailability}",
				siteName = "${siteName}",
				siteURL = "${siteURL}",
				specificOptionSetValue = "${specificOptionSetValue}",
				workflow = "${workflow}");
		}

		if ("${eventCommentEnabled}" == "true") {
			CalendarEvent.addComment(
				calendarName = "${calendarName}",
				endDate = "${endDate}",
				endDateTime = "${endDateTime}",
				eventComment = "${eventComment}",
				eventCommentList = "${eventCommentList}",
				eventTitle = "${eventTitle}",
				eventType = "${eventType}",
				startDate = "${startDate}",
				startDateTime = "${startDateTime}",
				user = "${user}");
		}
	}

	macro addAllDay {
		CalendarEvent.editTitle(eventTitle = "${eventTitle}");

		var endDateTime = "11:59 PM";
		var startDateTime = "12:00 AM";

		Check(locator1 = "CalendarEditEvent#ALL_DAY_CHECKBOX");

		AssertNotVisible(locator1 = "CalendarEditEvent#START_DATE_TIME");

		AssertNotVisible(locator1 = "CalendarEditEvent#END_DATE_TIME");

		var endDate = selenium.getElementValue("CalendarEditEvent#END_DATE");
		var startDate = selenium.getElementValue("CalendarEditEvent#START_DATE");

		CalendarEvent.selectCalendar(calendarName = "${calendarName}");

		if ("${optionSet}" == "true") {
			CalendarEvent._options(
				optionSetValue = "${optionSetValue}",
				specificOptionSetValue = "${specificOptionSetValue}");
		}

		if ("${reminders}" == "true") {
			CalendarEvent.configureReminders(
				duration1 = "${duration1}",
				duration2 = "${duration2}",
				number1 = "${number1}",
				number2 = "${number2}");
		}

		if ("${workflow}" == "true") {
			AssertClick(
				locator1 = "Button#SUBMIT_FOR_PUBLICATION",
				value1 = "Submit for Publication");

			Alert.viewSuccessMessage();
		}
		else {
			CalendarEvent.publish();
		}

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		if ("${pageStaging}" == "true") {
			Navigator.gotoStagedSitePage(
				pageName = "${pageName}",
				siteName = "${siteName}");
		}
		else if ("${siteURL}" == "true") {
			Navigator.gotoSitePage(
				pageName = "${pageName}",
				siteName = "${siteName}");
		}
		else {
			Navigator.gotoPage(pageName = "${pageName}");
		}

		var key_endDate = "${endDate}";
		var key_endDateTime = "${endDateTime}";
		var key_startDate = "${startDate}";
		var key_startDateTime = "${startDateTime}";

		if ("${reminders}" == "true") {
			if (!(IsElementPresent(locator1 = "Calendar#SCHEDULER_EVENT_ALL_DAY_WITH_REMINDER"))) {
				Click(locator1 = "Calendar#VIEW_NEXT_BUTTON");
			}

			AssertElementPresent(locator1 = "Calendar#SCHEDULER_EVENT_ALL_DAY_WITH_REMINDER");
		}
		else {
			AssertElementPresent(locator1 = "Calendar#SCHEDULER_EVENT_ALL_DAY");
		}
	}

	macro addComment {
		CalendarEvent.viewDetails(
			calendarName = "${calendarName}",
			eventTitle = "${eventTitle}",
			eventType = "${eventType}");

		if (isSet(eventCommentList)) {
			for (var eventComment : list "${eventCommentList}") {
				Comments.addPG(entryComment = "${eventComment}");
			}
		}
		else {
			Comments.addPG(entryComment = "${eventComment}");
		}

		if (isSet(eventCommentList)) {
			for (var eventComment : list "${eventCommentList}") {
				var key_entryComment = "${eventComment}";
				var key_userFullName = "${user}";

				AssertTextEquals(
					locator1 = "Comments#USER_NAME",
					value1 = "${user} (You)");

				AssertTextEquals(
					locator1 = "Comments#COMMENT_BODY_SPECIFIC",
					value1 = "${eventComment}");
			}
		}
		else {
			var key_entryComment = "${eventComment}";
			var key_userFullName = "${user}";

			AssertTextEquals(
				locator1 = "Comments#USER_NAME",
				value1 = "${user} (You)");

			AssertTextEquals(
				locator1 = "Comments#COMMENT_BODY_SPECIFIC",
				value1 = "${eventComment}");
		}

		SelectFrame(value1 = "relative=top");
	}

	macro addDescription {
		CalendarNavigator.gotoEditEvent(eventTitle = "${eventTitle}");

		Type(
			key_fieldName = "${fieldName}",
			locator1 = "CKEditor#BODY_FIELD_IFRAME",
			value1 = "${fieldValue}");
	}

	macro addPGViaAP {
		AssetPublisherPortlet.addAsset(assetType = "Calendar Event");

		CalendarEvent._viewNewEventIframe();

		CalendarEvent.editTitle(eventTitle = "${eventTitle}");

		Button.clickPublish();
	}

	macro addRegular {
		CalendarEvent.editTitle(eventTitle = "${eventTitle}");

		AssertNotChecked(locator1 = "CalendarEditEvent#ALL_DAY_CHECKBOX");

		AssertNotChecked(locator1 = "CalendarEditEvent#REPEAT_CHECKBOX");

		var endDate = selenium.getElementValue("CalendarEditEvent#END_DATE");
		var endDateTime = selenium.getElementValue("CalendarEditEvent#END_DATE_TIME");
		var startDate = selenium.getElementValue("CalendarEditEvent#START_DATE");
		var startDateTime = selenium.getElementValue("CalendarEditEvent#START_DATE_TIME");

		CalendarEvent.selectCalendar(calendarName = "${calendarName}");

		if ("${optionSet}" == "true") {
			CalendarEvent._options(
				optionSetValue = "${optionSetValue}",
				specificOptionSetValue = "${specificOptionSetValue}");
		}

		if ("${resourcesAvailability}" == "true") {
			CalendarEvent.viewResourcesAvailability();
		}

		if ("${reminders}" == "true") {
			CalendarEvent.configureReminders(
				duration1 = "${duration1}",
				duration2 = "${duration2}",
				number1 = "${number1}",
				number2 = "${number2}");
		}

		if ("${workflow}" == "true") {
			AssertClick(
				locator1 = "Button#SUBMIT_FOR_PUBLICATION",
				value1 = "Submit for Publication");

			Alert.viewSuccessMessage();
		}
		else {
			CalendarEvent.publish();
		}

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		if ("${pageStaging}" == "true") {
			Navigator.gotoStagedSitePage(
				pageName = "${pageName}",
				siteName = "${siteName}");
		}
		else if ("${siteURL}" == "true") {
			Navigator.gotoSitePage(
				pageName = "${pageName}",
				siteName = "${siteName}");
		}
		else {
			Navigator.gotoPage(pageName = "${pageName}");
		}

		CalendarScheduler._viewRegularEventTitleViaMonthView(
			endDate = "${endDate}",
			endDateTime = "${endDateTime}",
			eventTitle = "${eventTitle}",
			startDate = "${startDate}",
			startDateTime = "${startDateTime}");
	}

	macro addRegularInCustomSite {
		CalendarEvent.editTitle(eventTitle = "${eventTitle}");

		AssertNotChecked(locator1 = "CalendarEditEvent#ALL_DAY_CHECKBOX");

		AssertNotChecked(locator1 = "CalendarEditEvent#REPEAT_CHECKBOX");

		var endDate = selenium.getElementValue("CalendarEditEvent#END_DATE");
		var endDateTime = selenium.getElementValue("CalendarEditEvent#END_DATE_TIME");
		var startDate = selenium.getElementValue("CalendarEditEvent#START_DATE");
		var startDateTime = selenium.getElementValue("CalendarEditEvent#START_DATE_TIME");

		CalendarEvent.selectCalendar(calendarName = "${calendarName}");

		if ("${optionSet}" == "true") {
			CalendarEvent._options(
				optionSetValue = "${optionSetValue}",
				specificOptionSetValue = "${specificOptionSetValue}");
		}

		CalendarEvent.publish();

		Navigator.gotoSitePage(
			pageName = "${pageName}",
			siteName = "${siteName}");

		CalendarScheduler._viewRegularEventTitleViaMonthView(
			endDate = "${endDate}",
			endDateTime = "${endDateTime}",
			eventTitle = "${eventTitle}",
			startDate = "${startDate}",
			startDateTime = "${startDateTime}");
	}

	macro addRepeating {
		CalendarEvent.editTitle(eventTitle = "${eventTitle}");

		var endDate = selenium.getElementValue("CalendarEditEvent#END_DATE");
		var endDateTime = selenium.getElementValue("CalendarEditEvent#END_DATE_TIME");
		var startDate = selenium.getElementValue("CalendarEditEvent#START_DATE");
		var startDateTime = selenium.getElementValue("CalendarEditEvent#START_DATE_TIME");

		CalendarEvent.setRepeating(
			frequency = "${frequency}",
			numberOfOccurrences = "${numberOfOccurrences}");

		CalendarEvent.selectCalendar(calendarName = "${calendarName}");

		if ("${optionSet}" == "true") {
			CalendarEvent._options(
				optionSetValue = "${optionSetValue}",
				specificOptionSetValue = "${specificOptionSetValue}");
		}

		if ("${reminders}" == "true") {
			CalendarEvent.configureReminders(
				duration1 = "${duration1}",
				duration2 = "${duration2}",
				number1 = "${number1}",
				number2 = "${number2}");
		}

		if ("${workflow}" == "true") {
			AssertClick(
				locator1 = "Button#SUBMIT_FOR_PUBLICATION",
				value1 = "Submit for Publication");

			Alert.viewSuccessMessage();
		}
		else {
			CalendarEvent.publish();
		}

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		if ("${pageStaging}" == "true") {
			Navigator.gotoStagedSitePage(
				pageName = "${pageName}",
				siteName = "${siteName}");
		}
		else if ("${siteURL}" == "true") {
			Navigator.gotoSitePage(
				pageName = "${pageName}",
				siteName = "${siteName}");
		}
		else {
			Navigator.gotoPage(pageName = "${pageName}");
		}

		var key_endDate = "${endDate}";
		var key_endDateTime = "${endDateTime}";
		var key_startDate = "${startDate}";
		var key_startDateTime = "${startDateTime}";

		if (!(IsElementPresent(locator1 = "Calendar#SCHEDULER_EVENT_REPEAT"))) {
			Click(locator1 = "Calendar#VIEW_NEXT_BUTTON");
		}

		AssertElementPresent(locator1 = "Calendar#SCHEDULER_EVENT_REPEAT");

		AssertTextEquals(
			locator1 = "Calendar#SCHEDULER_EVENT_REPEAT_TITLE",
			value1 = "${eventTitle}");
	}

	macro addRSVP {
		CalendarNavigator.gotoView(viewType = "Week");

		CalendarScheduler.selectSpecificEventNoRefresh(eventTitle = "${eventTitle}");

		AssertTextEquals(
			locator1 = "Calendar#SCHEDULER_EVENT_DIALOG_BOX_EVENT_TITLE",
			value1 = "${eventTitle}");

		var key_rsvp = "${rsvp}";

		AssertClick(
			locator1 = "Calendar#SCHEDULER_EVENT_DIALOG_BOX_ATTEND_ACTIVE",
			value1 = "${rsvp}");

		if (IsElementPresent(locator1 = "CalendarEditEvent#ENTIRE_SERIES_BUTTON")) {
			AssertClick(
				locator1 = "CalendarEditEvent#ENTIRE_SERIES_BUTTON",
				value1 = "Entire Series");
		}

		CalendarScheduler.viewRSVP(
			eventTitle = "${eventTitle}",
			rsvp = "${rsvp}");
	}

	macro addTag {
		var key_tagText = "${tagText}";

		Type.typePause(
			locator1 = "CalendarEditEvent#CATEGORIZATION_TAG_FIELD",
			value1 = "${key_tagText}");

		KeyPress.keyPress(
			locator1 = "CalendarEditEvent#CATEGORIZATION_TAG_FIELD",
			value1 = "\RETURN");

		if (IsElementPresent(locator1 = "CalendarEditEvent#CATEGORIZATION_ADD_TAGS_BUTTON")) {
			AssertClick(
				locator1 = "CalendarEditEvent#CATEGORIZATION_ADD_TAGS_BUTTON",
				value1 = "Add");
		}

		AssertTextEquals(
			locator1 = "CalendarEditEvent#CATEGORIZATION_TAG_SPECIFIC",
			value1 = "${key_tagText}");
	}

	macro addViaDayView {
		CalendarScheduler.gotoAddViaDayView();

		CalendarScheduler.editTitle(eventTitle = "${eventTitle}");

		CalendarScheduler.saveEvent();
	}

	macro assertEventNotEditable {
		AssertElementNotPresent(locator1 = "Calendar#SCHEDULER_EVENT_DIALOG_BOX_EDIT_BUTTON");
	}

	macro clickDeclineButton {
		AssertClick(
			locator1 = "CalendarViewEventDetails#DECLINE_BUTTON",
			value1 = "Decline");
	}

	macro clickMaybeButton {
		AssertClick(
			locator1 = "CalendarViewEventDetails#MAYBE_BUTTON",
			value1 = "Maybe");
	}

	macro clickPublish {
		AssertClick(
			locator1 = "Button#SUBMIT",
			value1 = "Publish");
	}

	macro compareEventDateAndTimeToResourcesAvailabilityDateAndTime {
		var endDate = selenium.getElementValue("CalendarEditEvent#END_DATE");
		var endDateTime = selenium.getElementValue("CalendarEditEvent#END_DATE_TIME");
		var startDate = selenium.getElementValue("CalendarEditEvent#START_DATE");
		var startDateTime = selenium.getElementValue("CalendarEditEvent#START_DATE_TIME");

		CalendarEvent._viewResourcesAvailabilityEvent(
			endDate = "${endDate}",
			endDateTime = "${endDateTime}",
			startDate = "${startDate}",
			startDateTime = "${startDateTime}");
	}

	macro configureReminders {
		CalendarEvent._expandPanel(panelName = "Reminders");

		Check(locator1 = "CalendarEditEvent#REMINDERS_EMAIL_CHECKBOX_1");

		Check(locator1 = "CalendarEditEvent#REMINDERS_EMAIL_CHECKBOX_2");

		Type(
			locator1 = "CalendarEditEvent#REMINDERS_VALUE_INPUT_ACTIVE_1",
			value1 = "${number1}");

		Type(
			locator1 = "CalendarEditEvent#REMINDERS_VALUE_INPUT_ACTIVE_2",
			value1 = "${number2}");

		Select(
			locator1 = "CalendarEditEvent#REMINDERS_DURATION_SELECT_ACTIVE_1",
			value1 = "${duration1}");

		Select(
			locator1 = "CalendarEditEvent#REMINDERS_DURATION_SELECT_ACTIVE_2",
			value1 = "${duration2}");

		AssertElementNotPresent(locator1 = "CalendarEditEvent#REMINDERS_VALUE_INPUT_INACTIVE_1");

		AssertElementNotPresent(locator1 = "CalendarEditEvent#REMINDERS_VALUE_INPUT_INACTIVE_2");

		AssertElementNotPresent(locator1 = "CalendarEditEvent#REMINDERS_DURATION_SELECT_INACTIVE_1");

		AssertElementNotPresent(locator1 = "CalendarEditEvent#REMINDERS_DURATION_SELECT_INACTIVE_2");
	}

	macro delete {
		CalendarNavigator.gotoView(viewType = "Agenda");

		var i = "1";

		while (IsElementPresent(locator1 = "xpath=(//div[contains(@class,'scheduler-view-agenda-event') and contains(@data-clientid,'scheduler-event')])[${i}]")) {
			Click(locator1 = "xpath=(//div[contains(@class,'scheduler-view-agenda-event') and contains(@data-clientid,'scheduler-event')])[${i}]");

			if (IsElementNotPresent(locator1 = "Calendar#SCHEDULER_EVENT_DIALOG_BOX_DELETE_BUTTON")) {
				var i = ${i} + 1;

				Click(locator1 = "xpath=(//div[contains(@class,'scheduler-view-agenda-event') and contains(@data-clientid,'scheduler-event')])[${i}]");
			}
			else {
				if (IsElementPresent(locator1 = "xpath=(//input[contains(@value,'Repeating')])")) {
					AssertClickNoError(
						locator1 = "Calendar#SCHEDULER_EVENT_DIALOG_BOX_DELETE_BUTTON",
						value1 = "Delete");

					AssertClick(
						locator1 = "CalendarEditEvent#ENTIRE_SERIES_BUTTON",
						value1 = "Entire Series");
				}
				else if (IsTextEqual(locator1 = "Calendar#SCHEDULER_EVENT_DIALOG_BOX_USERS_FIELD", value1 = "—")) {
					AssertClickNoError(
						locator1 = "Calendar#SCHEDULER_EVENT_DIALOG_BOX_DELETE_BUTTON",
						value1 = "Delete");

					AssertConfirm.waitForConfirmation(value1 = "Would you like to delete this event?");
				}
				else {
					AssertClickNoError(
						locator1 = "Calendar#SCHEDULER_EVENT_DIALOG_BOX_DELETE_BUTTON",
						value1 = "Delete");

					AssertConfirm.waitForConfirmation(value1 = "Deleting this event will cancel the meeting with your guests. Would you like to delete?");
				}
			}
		}

		AssertTextEquals(
			locator1 = "CalendarAgendaView#EMPTY_MESSAGE",
			value1 = "No events.");

		AssertElementNotPresent(locator1 = "CalendarAgendaView#SCHEDULER_EVENT_GENERIC");

		AssertElementNotPresent(locator1 = "CalendarAgendaView#SCHEDULER_EVENT_REPEATING");

		CalendarNavigator.gotoView(viewType = "Week");
	}

	macro deleteRepeatingEventViaAgendaView {
		CalendarNavigator.gotoView(viewType = "Agenda");

		var key_eventTitle = "${eventTitle}";

		if (("${deleteOptionSet}" == "Entire Series") || ("${deleteOptionSet}" == "Single Event")) {
			AssertClick(
				locator1 = "CalendarAgendaView#SCHEDULER_EVENT_SPECIFIC_1",
				value1 = "${eventTitle}");
		}
		else if ("${deleteOptionSet}" == "Following Events") {
			AssertClick(
				locator1 = "CalendarAgendaView#SCHEDULER_EVENT_SPECIFIC_2",
				value1 = "${eventTitle}");
		}

		AssertElementPresent(locator1 = "Calendar#SCHEDULER_EVENT_DIALOG_BOX_DELETE_BUTTON");

		ClickNoError(
			locator1 = "Calendar#SCHEDULER_EVENT_DIALOG_BOX_DELETE_BUTTON",
			value1 = "Delete");

		if ("${deleteOptionSet}" == "Entire Series") {
			AssertClick(
				locator1 = "CalendarEditEvent#ENTIRE_SERIES_BUTTON",
				value1 = "Entire Series");

			AssertElementNotPresent(locator1 = "CalendarAgendaView#SCHEDULER_EVENT_SPECIFIC_1");

			AssertElementNotPresent(locator1 = "CalendarAgendaView#SCHEDULER_EVENT_SPECIFIC_2");
		}
		else if ("${deleteOptionSet}" == "Following Events") {
			AssertClick(
				locator1 = "CalendarEditEvent#FOLLOWING_EVENTS_BUTTON",
				value1 = "Following Events");

			AssertElementPresent(locator1 = "CalendarAgendaView#SCHEDULER_EVENT_SPECIFIC_1");

			AssertElementNotPresent(locator1 = "CalendarAgendaView#SCHEDULER_EVENT_SPECIFIC_2");
		}
		else if ("${deleteOptionSet}" == "Single Event") {
			AssertClick(
				locator1 = "CalendarEditEvent#SINGLE_EVENT_BUTTON",
				value1 = "Single Event");

			AssertElementPresent(locator1 = "CalendarAgendaView#SCHEDULER_EVENT_SPECIFIC_1");

			AssertElementNotPresent(locator1 = "CalendarAgendaView#SCHEDULER_EVENT_SPECIFIC_2");
		}

		Refresh();
	}

	macro deleteSpecific {
		CalendarNavigator.gotoView(viewType = "Week");

		CalendarScheduler.selectSpecificEvent(eventTitle = "${eventTitle}");

		CalendarScheduler.viewEventTitleViaDialogBox(eventTitle = "${eventTitle}");

		if (IsTextEqual(locator1 = "Calendar#SCHEDULER_EVENT_DIALOG_BOX_USERS_FIELD", value1 = "—")) {
			AssertClickNoError(
				locator1 = "Calendar#SCHEDULER_EVENT_DIALOG_BOX_DELETE_BUTTON",
				value1 = "Delete");

			AssertConfirm.waitForConfirmation(value1 = "Would you like to delete this event?");
		}
		else {
			AssertClickNoError(
				locator1 = "Calendar#SCHEDULER_EVENT_DIALOG_BOX_DELETE_BUTTON",
				value1 = "Delete");

			AssertConfirm.waitForConfirmation(value1 = "Deleting this event will cancel the meeting with your guests. Would you like to delete?");
		}

		var currentDay = DateUtil.getCurrentDayOfWeek();
		var currentHour = DateUtil.getCurrentHour();

		echo(" The current day is: ${currentDay} ");

		echo(" The current hour is: ${currentHour} ");

		if (("${currentDay}" == "Saturday") && ("${currentHour}" == "6")) {
			Refresh();
		}

		CalendarScheduler.viewSpecificEventNotPresent(eventTitle = "${eventTitle}");
	}

	macro disableEventBySiteCalendarName {
		Click(
			key_calendarName = "${calendarName}",
			locator1 = "Calendar#CURRENT_SITE_CALENDARS_CALENDAR_PRIMARY");
	}

	macro edit {
		CalendarNavigator.gotoEditEvent(
			eventTitle = "${eventTitle}",
			eventType = "${eventType}");

		if (isSet(endDateTimeEdit)) {
			var endDateTime = "${endDateTimeEdit}";
		}
		else {
			var endDateTime = "09:30 AM";
		}

		if (isSet(startDateTimeEdit)) {
			var startDateTime = "${startDateTimeEdit}";
		}
		else {
			var startDateTime = "08:30 AM";
		}

		if ("${eventType}" == "All Day") {
			var endDateTime = "11:59 PM";
			var startDateTime = "12:00 AM";

			AssertChecked(locator1 = "CalendarEditEvent#ALL_DAY_CHECKBOX");

			AssertNotVisible(locator1 = "CalendarEditEvent#START_DATE_TIME");

			AssertNotVisible(locator1 = "CalendarEditEvent#END_DATE_TIME");

			var endDate = selenium.getElementValue("CalendarEditEvent#END_DATE");
			var startDate = selenium.getElementValue("CalendarEditEvent#START_DATE");

			AssertTextEquals(
				locator1 = "TextInput#TITLE",
				value1 = "${eventTitle}");

			PortletEntry.inputTitle(title = "${eventTitleEdit}");

			AssertElementPresent(locator1 = "CalendarEditEvent#START_DATE");

			AssertElementPresent(locator1 = "CalendarEditEvent#END_DATE");

			if ("${optionSet}" == "true") {
				CalendarEvent._options(
					optionSetValue = "${optionSetValue}",
					specificOptionSetValue = "${specificOptionSetValue}");
			}
		}
		else if ("${eventType}" == "Regular") {
			AssertTextEquals(
				locator1 = "TextInput#TITLE",
				value1 = "${eventTitle}");

			PortletEntry.inputTitle(title = "${eventTitleEdit}");

			AssertElementPresent(locator1 = "CalendarEditEvent#START_DATE");

			AssertElementPresent(locator1 = "CalendarEditEvent#START_DATE_TIME");

			AssertElementPresent(locator1 = "CalendarEditEvent#END_DATE");

			AssertElementPresent(locator1 = "CalendarEditEvent#END_DATE_TIME");

			var endDate = selenium.getElementValue("CalendarEditEvent#END_DATE");
			var startDate = selenium.getElementValue("CalendarEditEvent#START_DATE");

			Type(
				locator1 = "CalendarEditEvent#START_DATE_TIME",
				value1 = "${startDateTime}");

			Click(locator1 = "TextInput#TITLE");

			Type(
				locator1 = "CalendarEditEvent#END_DATE_TIME",
				value1 = "${endDateTime}");

			Click(locator1 = "TextInput#TITLE");

			if ("${optionSet}" == "true") {
				CalendarEvent._options(
					optionSetValue = "${optionSetValue}",
					specificOptionSetValue = "${specificOptionSetValue}");
			}
		}
		else if ("${eventType}" == "Repeating") {
			AssertTextEquals(
				locator1 = "TextInput#TITLE",
				value1 = "${eventTitle}");

			PortletEntry.inputTitle(title = "${eventTitleEdit}");

			AssertElementPresent(locator1 = "CalendarEditEvent#START_DATE");

			AssertElementPresent(locator1 = "CalendarEditEvent#START_DATE_TIME");

			AssertElementPresent(locator1 = "CalendarEditEvent#END_DATE");

			AssertElementPresent(locator1 = "CalendarEditEvent#END_DATE_TIME");

			var endDate = selenium.getElementValue("CalendarEditEvent#END_DATE");
			var startDate = selenium.getElementValue("CalendarEditEvent#START_DATE");

			Type(
				locator1 = "CalendarEditEvent#START_DATE_TIME",
				value1 = "${startDateTime}");

			Click(locator1 = "TextInput#TITLE");

			Type(
				locator1 = "CalendarEditEvent#END_DATE_TIME",
				value1 = "${endDateTime}");

			Click(locator1 = "TextInput#TITLE");

			AssertChecked(locator1 = "CalendarEditEvent#REPEAT_CHECKBOX");

			AssertTextEquals(
				locator1 = "CalendarEditEvent#REPEAT_SUMMARY",
				value1 = "Daily, 1 Times");

			if ("${optionSet}" == "true") {
				CalendarEvent._options(
					optionSetValue = "${optionSetValue}",
					specificOptionSetValue = "${specificOptionSetValue}");
			}
		}

		Click(locator1 = "Button#PUBLISH");

		if (IsElementPresent(locator1 = "CalendarEditEvent#ENTIRE_SERIES_BUTTON")) {
			AssertClick(
				locator1 = "CalendarEditEvent#ENTIRE_SERIES_BUTTON",
				value1 = "Entire Series");
		}

		if ("${optionSetValue}" == "inviteResource") {
			AssertElementPresent(locator1 = "CalendarEditEvent#ARE_YOU_SURE_DIALOG_BOX_HEADER");

			AssertTextEquals(
				locator1 = "CalendarEditEvent#ARE_YOU_SURE_DIALOG_BOX_BODY",
				value1 = "You are about to make changes that will only affect your calendar (${calendarName}).");

			AssertClick(
				locator1 = "CalendarEditEvent#SAVE_CHANGES_BUTTON",
				value1 = "Save changes.");
		}

		Alert.viewSuccessMessage();

		SelectFrame(value1 = "relative=top");

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		Navigator.gotoPage(pageName = "${pageName}");

		var key_eventTitle = "${eventTitleEdit}";

		AssertTextEquals(
			locator1 = "Calendar#SCHEDULER_EVENT_SPECIFIC",
			value1 = "${eventTitleEdit}");
	}

	macro editTitle {
		while (IsNotEditable(locator1 = "TextInput#TITLE")) {
			Pause(locator1 = "5000");
		}

		PortletEntry.inputTitle(title = "${eventTitle}");
	}

	macro expandResourcesAvailabilityPanel {
		ScrollWebElementIntoView(locator1 = "CalendarEditEvent#RESOURCES_AVAILABILITY_PANEL_COLLAPSED");

		Click(locator1 = "CalendarEditEvent#RESOURCES_AVAILABILITY_PANEL_COLLAPSED");
	}

	macro gotoConfigureInvitations {
		CalendarEvent._expandPanel(panelName = "Invitations");
	}

	macro gotoConfigureRelatedAssets {
		CalendarEvent._expandPanel(panelName = "Related Assets");
	}

	macro gotoRepeatConfiguration {
		Click(locator1 = "CalendarEditEvent#REPEAT_CHECKBOX");
	}

	macro inviteResource {
		CalendarEvent._expandPanel(panelName = "Invitations");

		for (var resourceName : list "${resourceNameList}") {
			Type(
				locator1 = "CalendarEditEvent#INVITATIONS_INVITE_RESOURCE_FIELD",
				value1 = "${resourceName}");

			var key_resource = "${resourceName}";

			if (IsElementNotPresent(locator1 = "CalendarEditEvent#INVITATIONS_INVITE_RESOURCE_FIELD_LIST")) {
				Type(
					locator1 = "CalendarEditEvent#INVITATIONS_INVITE_RESOURCE_FIELD",
					value1 = "${resourceName}");
			}

			Click(
				locator1 = "CalendarEditEvent#INVITATIONS_INVITE_RESOURCE_FIELD_LIST",
				value1 = "${resourceName}");

			CalendarEvent.viewRSVPPending(resourceName = "${resourceName}");
		}
	}

	macro publish {
		CalendarEvent.clickPublish();

		Alert.viewSuccessMessage();
	}

	macro publishRepeating {
		AssertClick(
			locator1 = "Button#SUBMIT",
			value1 = "Publish");

		AssertElementPresent(locator1 = "CalendarEditEvent#RECURRING_EVENT_DIALOG_BOX_HEADER");

		var saveOptionPath = StringUtil.replace("${saveOption}", " ", "_");
		var saveOptionPath = StringUtil.upperCase("${saveOptionPath}");

		AssertClick(
			locator1 = "CalendarEditEvent#${saveOptionPath}_BUTTON",
			value1 = "${saveOption}");

		Alert.viewSuccessMessage();
	}

	macro publishWithUserNotification {
		AssertClick(
			locator1 = "Button#SUBMIT",
			value1 = "Publish");

		AssertElementPresent(locator1 = "CalendarEditEvent#ARE_YOU_SURE_DIALOG_BOX_HEADER");

		AssertTextEquals(
			locator1 = "CalendarEditEvent#ARE_YOU_SURE_DIALOG_BOX_BODY",
			value1 = "Invited users will be notified.");

		AssertClick(
			locator1 = "CalendarEditEvent#SAVE_CHANGES_BUTTON",
			value1 = "Save changes.");

		Alert.viewSuccessMessage();
	}

	macro resizeViaEventBlock {
		if (!(IsElementPresent(locator1 = "Calendar#SCHEDULER_EVENT_GENERIC"))) {
			Click(locator1 = "Calendar#VIEW_PREVIOUS_BUTTON");
		}

		MouseOver.mouseOverNotVisible(locator1 = "Calendar#SCHEDULER_EVENT_GENERIC");
	}

	macro saveEventUserInvite {
		AssertElementPresent(locator1 = "CalendarEditEvent#ARE_YOU_SURE_DIALOG_BOX_HEADER");

		AssertTextEquals(
			locator1 = "CalendarEditEvent#ARE_YOU_SURE_DIALOG_BOX_BODY",
			value1 = "Invited users will be notified.");

		AssertClick(
			locator1 = "CalendarEditEvent#SAVE_CHANGES_BUTTON",
			value1 = "Save changes.");
	}

	macro saveEventUserInviteCancel {
		AssertElementPresent(locator1 = "CalendarEditEvent#ARE_YOU_SURE_DIALOG_BOX_HEADER");

		AssertTextEquals(
			locator1 = "CalendarEditEvent#ARE_YOU_SURE_DIALOG_BOX_BODY",
			value1 = "Invited users will be notified.");

		AssertClick(
			locator1 = "CalendarEditEvent#DO_NOT_CHANGE_THE_EVENT_BUTTON",
			value1 = "Do not change the event.");
	}

	macro selectCalendar {
		if (isSet(calendarName)) {
			CalendarEvent._expandPanel(panelName = "Details");

			Select(
				locator1 = "CalendarEditEvent#DETAILS_CALENDAR_SELECT",
				value1 = "${calendarName}");
		}
	}

	macro selectEventIframe {
		SelectFrame(locator1 = "IFrame#METADATA_SETS_IFRAME");
	}

	macro selectRepeatFrequency {
		Select(
			locator1 = "CalendarEditEvent#REPEAT_REPEATS_DROPDOWN",
			value1 = "${frequency}");

		AssertSelectedLabel(
			locator1 = "CalendarEditEvent#REPEAT_REPEATS_DROPDOWN",
			value1 = "${frequency}");
	}

	macro selectTimes {
		Click(locator1 = "TextInput#TITLE");

		var key_startDateTime = "${startDateTime}";

		Click(locator1 = "CalendarEditEvent#START_DATE_TIME_OPTION");

		Click(locator1 = "TextInput#TITLE");

		var key_endDateTime = "${endDateTime}";

		Click(locator1 = "CalendarEditEvent#END_DATE_TIME_OPTION");

		CalendarEvent.viewTimes(
			endDateTime = "${endDateTime}",
			startDateTime = "${startDateTime}");
	}

	macro setAllDay {
		Check(locator1 = "CalendarEditEvent#ALL_DAY_CHECKBOX");

		AssertNotVisible(locator1 = "CalendarEditEvent#START_DATE_TIME");

		AssertNotVisible(locator1 = "CalendarEditEvent#END_DATE_TIME");
	}

	macro setDates {
		Type(
			locator1 = "CalendarEditEvent#START_DATE",
			value1 = "${startDate}");

		Click(locator1 = "TextInput#TITLE");

		Type(
			locator1 = "CalendarEditEvent#END_DATE",
			value1 = "${endDate}");

		Click(locator1 = "TextInput#TITLE");
	}

	macro setDatesToday {
		var endDate = selenium.getElementValue("CalendarEditEvent#START_DATE");

		Type(
			locator1 = "CalendarEditEvent#END_DATE",
			value1 = "${endDate}");
	}

	macro setEndDate {
		Type(
			locator1 = "CalendarEditEvent#END_DATE",
			value1 = "${endDate}");
	}

	macro setEndDateTomorrow {
		Click(locator1 = "CalendarEditEvent#END_DATE");

		var daySelected = selenium.getText("CalendarEditEvent#MINI_CALENDAR_DAY_SELECTED");
		var tomorrow = ${daySelected} + 1;
		var key_daySpecific = "${tomorrow}";

		if (IsElementPresent(locator1 = "CalendarEditEvent#MINI_CALENDAR_DAY_SPECIFIC")) {
			Click(locator1 = "CalendarEditEvent#MINI_CALENDAR_DAY_SPECIFIC");
		}
		else {
			Click(locator1 = "CalendarEditEvent#MINI_CALENDAR_NEXT_MONTH_BUTTON");

			var key_daySpecific = "1";

			Click(locator1 = "CalendarEditEvent#MINI_CALENDAR_DAY_SPECIFIC");
		}
	}

	macro setRepeating {
		CalendarEvent.gotoRepeatConfiguration();

		CalendarEvent.selectRepeatFrequency(frequency = "${frequency}");

		AssertSelectedLabel(
			locator1 = "CalendarEditEvent#REPEAT_REPEAT_EVERY_DROPDOWN",
			value1 = "1");

		if ("${frequency}" == "Monthly") {
			Click(locator1 = "CalendarEditEvent#REPEAT_REPEAT_ON_DAY_OF_THE_WEEK_RADIO");
		}

		if (isSet(numberOfOccurrences)) {
			Click(locator1 = "CalendarEditEvent#REPEAT_ENDS_AFTER_RADIO");

			Type(
				locator1 = "CalendarEditEvent#REPEAT_ENDS_AFTER_FIELD",
				value1 = "${numberOfOccurrences}");
		}

		if (isSet(endOnDate)) {
			Click(locator1 = "CalendarEditEvent#REPEAT_ENDS_ON_RADIO");

			Type.clickAtType(
				locator1 = "CalendarEditEvent#REPEAT_ENDS_ON_DATE_FIELD",
				value1 = "${endOnDate}");
		}

		Click(locator1 = "CalendarEditEvent#REPEAT_DIALOG_SUMMARY");

		if ("${frequency}" == "Monthly") {
			AssertTextEquals.assertPartialText(
				locator1 = "CalendarEditEvent#REPEAT_DIALOG_SUMMARY",
				value1 = "${frequency}");

			var currentDay = selenium.getElementValue("CalendarEditEvent#REPEAT_MONTHLY_CURRENT_DAY");
			var currentDay = StringUtil.lowerCase("${currentDay}");
			var currentDay = StringUtil.upperCaseFirstLetter("${currentDay}");

			AssertTextEquals.assertPartialText(
				locator1 = "CalendarEditEvent#REPEAT_DIALOG_SUMMARY",
				value1 = "${currentDay}");

			AssertTextEquals.assertPartialText(
				locator1 = "CalendarEditEvent#REPEAT_DIALOG_SUMMARY",
				value1 = "${numberOfOccurrences} Times");

			CalendarEvent.viewRepeatingMonthPosition();

			AssertClick(
				locator1 = "CalendarEditEvent#REPEAT_DONE_BUTTON",
				value1 = "Done");
		}
		else if ("${frequency}" == "Weekly") {
			AssertTextEquals.assertPartialText(
				locator1 = "CalendarEditEvent#REPEAT_DIALOG_SUMMARY",
				value1 = "${frequency}");

			var currentDay = selenium.getElementValue("CalendarEditEvent#REPEAT_WEEKLY_CURRENT_DAY");
			var currentDay = StringUtil.lowerCase("${currentDay}");
			var currentDay = StringUtil.upperCaseFirstLetter("${currentDay}");

			AssertTextEquals.assertPartialText(
				locator1 = "CalendarEditEvent#REPEAT_DIALOG_SUMMARY",
				value1 = "${currentDay}");

			AssertTextEquals.assertPartialText(
				locator1 = "CalendarEditEvent#REPEAT_DIALOG_SUMMARY",
				value1 = "${numberOfOccurrences} Times");

			AssertClick(
				locator1 = "CalendarEditEvent#REPEAT_DONE_BUTTON",
				value1 = "Done");
		}
		else if (isSet(numberOfOccurrences)) {
			AssertTextEquals(
				locator1 = "CalendarEditEvent#REPEAT_DIALOG_SUMMARY",
				value1 = "${frequency}, ${numberOfOccurrences} Times");

			AssertClick(
				locator1 = "CalendarEditEvent#REPEAT_DONE_BUTTON",
				value1 = "Done");

			AssertTextEquals(
				locator1 = "CalendarEditEvent#REPEAT_SUMMARY",
				value1 = "${frequency}, ${numberOfOccurrences} Times");
		}
		else if (isSet(endOnDate)) {
			AssertTextEquals(
				locator1 = "CalendarEditEvent#REPEAT_DIALOG_SUMMARY",
				value1 = "${frequency}, Until ${endOnDateSummary}");

			AssertClick(
				locator1 = "CalendarEditEvent#REPEAT_DONE_BUTTON",
				value1 = "Done");

			AssertTextEquals(
				locator1 = "CalendarEditEvent#REPEAT_SUMMARY",
				value1 = "${frequency}, Until ${endOnDateSummary}");
		}
		else {
			AssertClick(
				locator1 = "CalendarEditEvent#REPEAT_DONE_BUTTON",
				value1 = "Done");
		}

		Check(locator1 = "CalendarEditEvent#REPEAT_CHECKBOX");
	}

	macro setRepeatingYearly {
		CalendarEvent.gotoRepeatConfiguration();

		CalendarEvent.selectRepeatFrequency(frequency = "Yearly");

		AssertSelectedLabel(
			locator1 = "CalendarEditEvent#REPEAT_REPEAT_EVERY_DROPDOWN",
			value1 = "1");

		Click(locator1 = "CalendarEditEvent#REPEAT_REPEAT_ON_DAY_OF_THE_WEEK_RADIO");

		Click(locator1 = "CalendarEditEvent#REPEAT_DIALOG_SUMMARY");

		if (IsTextEqual(locator1 = "CalendarEditEvent#REPEAT_DIALOG_SUMMARY", value1 = "${yearlyRecurrenceSummary}")) {
			AssertTextEquals(
				locator1 = "CalendarEditEvent#REPEAT_DIALOG_SUMMARY",
				value1 = "${yearlyRecurrenceSummary}");
		}
		else {
			AssertTextEquals(
				locator1 = "CalendarEditEvent#REPEAT_DIALOG_SUMMARY",
				value1 = "${yearlyRecurrenceSummaryPreviousDay}");
		}

		AssertTextEquals(
			locator1 = "CalendarEditEvent#REPEAT_DIALOG_SUMMARY",
			value1 = "${yearlyRecurrenceSummary}");

		AssertClick(
			locator1 = "CalendarEditEvent#REPEAT_DONE_BUTTON",
			value1 = "Done");

		Check(locator1 = "CalendarEditEvent#REPEAT_CHECKBOX");
	}

	macro setSpecificDate {
		Click(locator1 = "CalendarEditEvent#START_DATE");

		AssertClick(
			key_daySpecific = "${startDay}",
			locator1 = "CalendarEditEvent#MINI_CALENDAR_DAY_SPECIFIC",
			value1 = "${key_daySpecific}");

		Click(locator1 = "CalendarEditEvent#END_DATE");

		AssertClick(
			key_daySpecific = "${endDay}",
			locator1 = "CalendarEditEvent#MINI_CALENDAR_DAY_SPECIFIC",
			value1 = "${key_daySpecific}");
	}

	macro setTimes {
		Type(
			locator1 = "CalendarEditEvent#START_DATE_TIME",
			value1 = "${startDateTime}");

		Click(locator1 = "TextInput#TITLE");

		Type(
			locator1 = "CalendarEditEvent#END_DATE_TIME",
			value1 = "${endDateTime}");

		Click(locator1 = "TextInput#TITLE");

		CalendarEvent.viewTimes(
			endDateTime = "${endDateTime}",
			startDateTime = "${startDateTime}");
	}

	macro tag {
		CalendarEvent._expandPanel(panelName = "Categorization");

		AssertElementPresent(locator1 = "CalendarEditEvent#CATEGORIZATION_TAG_FIELD");

		if (isSet(tagTextList)) {
			for (var tagText : list "${tagTextList}") {
				CalendarEvent.addTag(key_tagText = "${tagText}");
			}
		}
		else {
			CalendarEvent.addTag(key_tagText = "${tagText}");
		}
	}

	macro tearDown {
		if ("${marketplace}" == "true") {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");

			PagesAdmin.addPage(pageName = "Marketplace Calendar Testing");

			Navigator.gotoPage(pageName = "Marketplace Calendar Testing");

			Portlet.addPG(
				i = "${i}",
				pageName = "Marketplace Calendar Testing",
				portletName = "Calendar");

			Navigator.gotoPage(pageName = "Marketplace Calendar Testing");
		}

		CalendarEvent.delete();

		VerifyElementPresent(locator1 = "Message#SUCCESS_DISMISSIBLE");

		if (IsElementPresent(locator1 = "Button#CLOSE_MESSAGE")) {
			Click.clickNoWaitForVisible(locator1 = "Button#CLOSE_MESSAGE");
		}
	}

	macro tearDownNoCloseMessage {
		if ("${marketplace}" == "true") {
			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");

			PagesAdmin.addPage(pageName = "Marketplace Calendar Testing");

			Navigator.gotoPage(pageName = "Marketplace Calendar Testing");

			Portlet.addPG(
				i = "${i}",
				pageName = "Marketplace Calendar Testing",
				portletName = "Calendar");

			Navigator.gotoPage(pageName = "Marketplace Calendar Testing");
		}

		CalendarEvent.delete();

		VerifyElementPresent(locator1 = "Message#SUCCESS_DISMISSIBLE");
	}

	macro view {
		var eventTitle = "${eventTitle}";

		CalendarScheduler.viewDay(eventTitle = "${eventTitle}");

		CalendarScheduler.viewWeek(
			eventTitle = "${eventTitle}",
			frequency = "${frequency}",
			numberOfOccurrences = "${numberOfOccurrences}");

		CalendarScheduler.viewMonth(
			eventTitle = "${eventTitle}",
			frequency = "${frequency}",
			numberOfOccurrences = "${numberOfOccurrences}");

		CalendarScheduler.viewAgenda(
			eventTitle = "${eventTitle}",
			numberOfOccurrences = "${numberOfOccurrences}");

		CalendarNavigator.gotoView(viewType = "Week");
	}

	macro viewAllDay {
		for (var viewType : list "Day,Week,Month") {
			CalendarNavigator.gotoView(viewType = "${viewType}");

			AssertElementPresent(
				key_eventTitle = "${eventTitle}",
				locator1 = "Calendar#SCHEDULER_VIEW_ALL_DAY_EVENT_DAY_WEEK_AND_MONTH_VIEW");
		}

		CalendarScheduler.viewAgenda(eventTitle = "${eventTitle}");
	}

	macro viewApprovedEventRSVPButtons {
		AssertTextEquals(
			locator1 = "CalendarViewEventDetails#MAYBE_BUTTON",
			value1 = "Maybe");

		AssertTextEquals(
			locator1 = "CalendarViewEventDetails#DECLINE_BUTTON",
			value1 = "Decline");
	}

	macro viewApprovedRSVP {
		CalendarNavigator.gotoView(viewType = "Week");

		CalendarScheduler.selectSpecificEventNoRefresh(eventTitle = "${eventTitle}");

		AssertTextEquals(
			locator1 = "Calendar#SCHEDULER_EVENT_DIALOG_BOX_EVENT_TITLE",
			value1 = "${eventTitle}");

		AssertElementPresent(
			key_rsvp = "${rsvp}",
			locator1 = "Calendar#SCHEDULER_EVENT_DIALOG_BOX_ATTEND_INACTIVE");
	}

	macro viewAvailableCalendars {
		CalendarEvent._expandPanel(panelName = "Details");

		for (var availableCalendarName : list "${availableCalendarList}") {
			var key_calendarName = "${availableCalendarName}";

			AssertElementPresent(locator1 = "CalendarEditEvent#DETAILS_CALENDAR_SELECT_OPTION");
		}
	}

	macro viewCalendarCommentsMessagePresent {
		AssertElementPresent(locator1 = "CKEditor#BODY_FIELD_IFRAME");

		AssertElementPresent(locator1 = "CalendarViewEventDetails#CALENDAR_COMMENT_DEFAULT_MESSAGE");
	}

	macro viewCalendarCommentsNotPresent {
		AssertElementNotPresent(locator1 = "CKEditor#BODY_FIELD_IFRAME");

		AssertElementNotPresent(locator1 = "CalendarViewEventDetails#CALENDAR_COMMENT_DEFAULT_MESSAGE");
	}

	macro viewCalendarRatingNotPresent {
		AssertElementNotPresent(locator1 = "Ratings#YOUR_RATING_STAR");

		AssertElementNotPresent(locator1 = "Ratings#AVERAGE_STAR");
	}

	macro viewCalendarRatingPresent {
		AssertElementPresent(locator1 = "Ratings#YOUR_RATING_STAR");

		AssertElementPresent(locator1 = "Ratings#AVERAGE_STAR");
	}

	macro viewComment {
		CalendarEvent.viewDetails(
			calendarName = "${calendarName}",
			eventTitle = "${eventTitle}",
			eventType = "${eventType}");

		if (isSet(eventCommentList)) {
			for (var eventComment : list "${eventCommentList}") {
				var key_entryComment = "${eventComment}";
				var key_userFullName = "${user}";

				AssertTextEquals(
					locator1 = "Comments#USER_NAME",
					value1 = "${user} (You)");

				AssertTextEquals(
					locator1 = "Comments#COMMENT_BODY_SPECIFIC",
					value1 = "${eventComment}");
			}
		}
		else {
			var key_entryComment = "${eventComment}";
			var key_userFullName = "${user}";

			AssertTextEquals(
				locator1 = "Comments#USER_NAME",
				value1 = "${user} (You)");

			AssertTextEquals(
				locator1 = "Comments#COMMENT_BODY_SPECIFIC",
				value1 = "${eventComment}");
		}

		SelectFrame(value1 = "relative=top");
	}

	macro viewDescription {
		AssertTextEquals(
			key_eventDescription = "${eventDescription}",
			locator1 = "CalendarViewEventDetails#EVENT_DESCRIPTION",
			value1 = "${key_eventDescription}");
	}

	macro viewDetails {
		CalendarNavigator.gotoView(viewType = "Week");

		CalendarScheduler.selectSpecificEvent(eventTitle = "${eventTitle}");

		CalendarScheduler.viewEventTitleViaDialogBox(eventTitle = "${eventTitle}");

		CalendarScheduler._viewCalendarViaDialogBox(
			calendarName = "${calendarName}",
			schedulerEventDialogBox = "${schedulerEventDialogBox}");

		CalendarEvent.viewTitleViaDetails(eventTitle = "${eventTitle}");
	}

	macro viewDetailsFields {
		AssertElementPresent(
			key_tab = "Status",
			locator1 = "CalendarViewEventDetails#STATUS");

		AssertElementPresent(
			key_tab = "Starts",
			locator1 = "CalendarViewEventDetails#START_DATE_FIELD");

		AssertElementPresent(
			key_tab = "Ends",
			locator1 = "CalendarViewEventDetails#END_DATE_FIELD");

		AssertElementPresent(
			key_tab = "Resources",
			locator1 = "CalendarViewEventDetails#RESOURCES_FIELD");
	}

	macro viewDetailsInPortlet {
		AssertTextEquals(
			locator1 = "Portlet#H3_HEADER",
			value1 = "${eventTitle}");

		CalendarEvent.viewDetailsResources(calendarName = "${calendarName}");

		AssertElementPresent(locator1 = "CalendarViewEventDetails#START_DATE_FIELD");

		AssertElementPresent(locator1 = "CalendarViewEventDetails#END_DATE_FIELD");

		if (isSet(relatedAssetTitle)) {
			AssertTextEquals(
				locator1 = "AssetRelatedAssets#HEADER",
				value1 = "Related Assets");

			AssertTextEquals(
				key_relatedAssetTitle = "${relatedAssetTitle}",
				locator1 = "AssetRelatedAssets#ASSET_TITLE",
				value1 = "${relatedAssetTitle}");
		}

		CalendarEvent.viewApprovedEventRSVPButtons();
	}

	macro viewDetailsResources {
		AssertTextEquals(
			locator1 = "CalendarViewEventDetails#RESOURCES_FIELD",
			value1 = "${calendarName}");
	}

	macro viewDetailsTags {
		if (isSet(tagTextList)) {
			for (var tagText : list "${tagTextList}") {
				var key_tagText = "${tagText}";

				AssertElementPresent(locator1 = "CalendarViewEventDetails#TAGS_LABEL");

				AssertTextEquals(
					locator1 = "CalendarViewEventDetails#TAGS_TAG_SPECIFIC",
					value1 = "Tags: ${tagText}");
			}
		}
		else {
			var key_tagText = "${tagText}";

			AssertElementPresent(locator1 = "CalendarViewEventDetails#TAGS_LABEL");

			AssertTextEquals(
				locator1 = "CalendarViewEventDetails#TAGS_TAG_SPECIFIC",
				value1 = "Tags: ${tagText}");
		}

		SelectFrame(value1 = "relative=top");
	}

	macro viewDetailsViaMailLink {
		AssertTextEquals(
			locator1 = "Portlet#H3_HEADER",
			value1 = "${eventTitle}");

		AssertElementPresent(locator1 = "CalendarViewEventDetails#START_DATE_FIELD");

		AssertElementPresent(locator1 = "CalendarViewEventDetails#END_DATE_FIELD");

		CalendarEvent.viewApprovedEventRSVPButtons();
	}

	macro viewEndsDate {
		AssertTextEquals(
			locator1 = "CalendarEditEvent#END_DATE",
			value1 = "${endDate}");
	}

	macro viewEventNotToday {
		for (var viewType : list "Day,Week,Month") {
			CalendarNavigator.gotoView(viewType = "${viewType}");

			AssertElementPresent(
				key_eventTitle = "${eventTitle}",
				locator1 = "Calendar#SCHEDULER_VIEW_EVENT_NOT_TODAY");
		}

		CalendarScheduler.viewAgenda(
			eventTitle = "${eventTitle}",
			numberOfOccurrences = "${numberOfOccurrences}");
	}

	macro viewInvitationResourceNotPresent {
		CalendarEvent._expandPanel(panelName = "Invitations");

		for (var resourceName : list "${resourceNameList}") {
			Type(
				locator1 = "CalendarEditEvent#INVITATIONS_INVITE_RESOURCE_FIELD",
				value1 = "${resourceName}");

			var key_resource = "${resourceName}";

			AssertElementNotPresent(locator1 = "CalendarEditEvent#INVITATIONS_INVITE_RESOURCE_FIELD_LIST");
		}
	}

	macro viewInvitedEventWithWorkflow {
		CalendarNavigator.gotoView(viewType = "Week");

		CalendarScheduler.selectSpecificEventNoRefresh(eventTitle = "${eventTitle}");

		AssertTextEquals(
			locator1 = "Calendar#SCHEDULER_EVENT_DIALOG_BOX_EVENT_TITLE",
			value1 = "${eventTitle}");

		AssertElementPresent(locator1 = "Calendar#SCHEDULER_EVENT_DIALOG_BOX_CALENDAR");

		CalendarScheduler.viewNoRSVP(eventTitle = "${eventTitle}");
	}

	macro viewInvitedUserRSVPWithApprovedWorkflow {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		var key_userCalendarName = "${userCalendarName}";
		var key_siteCalendarName = "${siteCalendarName}";
		var key_siteName = "${siteName}";

		Click(locator1 = "Calendar#CURRENT_SITE_CALENDARS_CALENDAR");

		Pause(locator1 = "5000");

		if (IsElementPresent(locator1 = "Calendar#CURRENT_SITE_CALENDARS_CALENDAR_PRIMARY_COLOR_DEFAULT")) {
			Click(locator1 = "Calendar#CURRENT_SITE_CALENDARS_CALENDAR");
		}

		if (IsElementNotPresent(locator1 = "Calendar#MY_CALENDARS_CALENDAR_PRIMARY_COLOR_DEFAULT")) {
			Click(locator1 = "Calendar#MY_CALENDARS_CALENDAR");
		}

		CalendarEvent.viewInvitedEventWithWorkflow(
			eventTitle = "${eventTitle}",
			userCalendarName = "${userCalendarName}");

		Click(locator1 = "Calendar#CURRENT_SITE_CALENDARS_CALENDAR");
	}

	macro viewMaybeAndDeclineButtons {
		AssertElementPresent(
			key_tab = "Maybe",
			locator1 = "CalendarViewEventDetails#MAYBE_BUTTON");

		AssertElementPresent(
			key_tab = "Decline",
			locator1 = "CalendarViewEventDetails#DECLINE_BUTTON");
	}

	macro viewNoRepeating {
		AssertNotVisible(locator1 = "CalendarEditEvent#REPEAT_SUMMARY");

		AssertNotChecked(locator1 = "CalendarEditEvent#REPEAT_CHECKBOX");
	}

	macro viewNotPresentViaAgendaView {
		AssertElementNotPresent(locator1 = "xpath=(//div[contains(@class,'scheduler-view-agenda-event') and contains(@data-clientid,'scheduler-event')])[${eventNumber}]");
	}

	macro viewNoUserInviteWithUnapprovedWorkflow {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		var key_siteCalendarName = "${siteCalendarName}";
		var key_siteName = "${siteName}";
		var key_eventTitle = "${eventTitle}";

		AssertClick(
			locator1 = "Calendar#CURRENT_SITE_CALENDARS_CALENDAR",
			value1 = "${siteCalendarName}");

		if (IsElementPresent(locator1 = "Calendar#SCHEDULER_EVENT_SPECIFIC")) {
			CalendarScheduler.viewSpecificEventNotVisible(eventTitle = "${eventTitle}");
		}
		else {
			CalendarScheduler.viewSpecificEventNotPresent(eventTitle = "${eventTitle}");
		}

		AssertClick(
			locator1 = "Calendar#CURRENT_SITE_CALENDARS_CALENDAR",
			value1 = "${siteCalendarName}");
	}

	macro viewRepeatingEventErrorMessage {
		Click(locator1 = "Button#PUBLISH");

		Alert.viewRequestFailedToComplete();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_1",
			value1 = "The last repeating date should come after the event start date.");
	}

	macro viewRepeatingEventViaViewDetails {
		AssertTextEquals(
			locator1 = "Portlet#H3_HEADER",
			value1 = "${eventTitle}");

		if ("${frequency}" == "Daily") {
			AssertTextEquals(
				locator1 = "CalendarViewEventDetails#REPEAT_OCCURRENCE_SUMMARY",
				value1 = "Daily, ${numberOfOccurrences} Times");
		}
		else if ("${frequency}" == "Weekly") {
			AssertTextEquals.assertPartialText(
				locator1 = "CalendarViewEventDetails#REPEAT_OCCURRENCE_SUMMARY",
				value1 = "Weekly, on ");

			AssertTextEquals.assertPartialText(
				locator1 = "CalendarViewEventDetails#REPEAT_OCCURRENCE_SUMMARY",
				value1 = ", ${numberOfOccurrences} Times");
		}
		else if ("${frequency}" == "Yearly") {
			AssertTextEquals(
				locator1 = "CalendarViewEventDetails#REPEAT_OCCURRENCE_SUMMARY",
				value1 = "${yearlyRecurrenceSummary}");
		}
		else if ("${frequency}" == "Monthly") {
			var today = DateUtil.getCurrentDayOfWeek();

			AssertTextEquals.assertPartialText(
				locator1 = "CalendarViewEventDetails#REPEAT_OCCURRENCE_SUMMARY",
				value1 = "Monthly");

			AssertTextEquals.assertPartialText(
				locator1 = "CalendarViewEventDetails#REPEAT_OCCURRENCE_SUMMARY",
				value1 = "${numberOfOccurrences} Times");

			AssertTextEquals.assertPartialText(
				locator1 = "CalendarViewEventDetails#REPEAT_OCCURRENCE_SUMMARY",
				value1 = "${today}");
		}
	}

	macro viewRepeatingMonthPosition {
		var repeatingMonthPosition = selenium.getElementValue("CalendarEditEvent#REPEAT_MONTHLY_CURRENT_MONTH_POSITION");

		if ("${repeatingMonthPosition}" == "1") {
			AssertTextEquals.assertPartialText(
				locator1 = "CalendarEditEvent#REPEAT_DIALOG_SUMMARY",
				value1 = "First");
		}
		else if ("${repeatingMonthPosition}" == "2") {
			AssertTextEquals.assertPartialText(
				locator1 = "CalendarEditEvent#REPEAT_DIALOG_SUMMARY",
				value1 = "Second");
		}
		else if ("${repeatingMonthPosition}" == "3") {
			AssertTextEquals.assertPartialText(
				locator1 = "CalendarEditEvent#REPEAT_DIALOG_SUMMARY",
				value1 = "Third");
		}
		else if ("${repeatingMonthPosition}" == "4") {
			AssertTextEquals.assertPartialText(
				locator1 = "CalendarEditEvent#REPEAT_DIALOG_SUMMARY",
				value1 = "Fourth");
		}
		else if ("${repeatingMonthPosition}" == "-1") {
			AssertTextEquals.assertPartialText(
				locator1 = "CalendarEditEvent#REPEAT_DIALOG_SUMMARY",
				value1 = "Last");
		}
	}

	macro viewRepeatWeekStartDay {
		AssertTextEquals(
			locator1 = "CalendarEditEvent#REPEAT_REPEAT_ON_DAY_OF_THE_WEEK_WEEKDAY_WEEK_START_DAY",
			value1 = "${weekStartDay}");
	}

	macro viewResourcesAvailability {
		CalendarEvent.expandResourcesAvailabilityPanel();

		AssertElementPresent(locator1 = "CalendarEditEvent#RESOURCES_AVAILABILITY_SCHEDULER_EVENT_GENERIC");
	}

	macro viewRSVPAccepted {
		var key_resource = "${resourceName}";

		AssertTextEquals(
			locator1 = "CalendarEditEvent#INVITATIONS_ACCEPTED",
			value1 = "${resourceName}");
	}

	macro viewRSVPDeclined {
		var key_resource = "${resourceName}";

		AssertTextEquals(
			locator1 = "CalendarEditEvent#INVITATIONS_DECLINED",
			value1 = "${resourceName}");
	}

	macro viewRSVPMaybe {
		var key_resource = "${resourceName}";

		AssertTextEquals(
			locator1 = "CalendarEditEvent#INVITATIONS_MAYBE",
			value1 = "${resourceName}");
	}

	macro viewRSVPPending {
		var key_resource = "${resourceName}";

		AssertTextEquals(
			locator1 = "CalendarEditEvent#INVITATIONS_PENDING",
			value1 = "${resourceName}");
	}

	macro viewSiteCalendarEventNotPresent {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		var key_siteName = "${siteName}";

		AssertElementNotPresent(locator1 = "Calendar#CURRENT_SITE_CALENDARS_HEADER");

		var key_endDateTime = "${endDateTime}";
		var key_startDateTime = "${startDateTime}";

		AssertElementNotPresent(locator1 = "Calendar#SCHEDULER_EVENT_SPECIFIC_EVENT_TIMES");
	}

	macro viewSiteCalendarEventWithDefaultPermissions {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		var key_siteName = "${siteName}";

		AssertTextEquals(
			locator1 = "Calendar#CURRENT_SITE_CALENDARS_HEADER",
			value1 = "${siteName}'s Calendars");

		var key_endDateTime = "${endDateTime}";
		var key_startDateTime = "${startDateTime}";

		Click(locator1 = "Calendar#SCHEDULER_EVENT_SPECIFIC_EVENT_TIMES");

		var key_calendarName = "${calendarName}";

		AssertTextEquals(
			locator1 = "Calendar#SCHEDULER_EVENT_CALENDAR_NAME",
			value1 = "${calendarName}");

		AssertNotVisible(
			locator1 = "Calendar#SCHEDULER_EVENT_DIALOG_BOX_EVENT_TITLE",
			value1 = "${eventTitle}");
	}

	macro viewSiteRSVPWithApprovedWorkflow {
		var key_userCalendarName = "${userCalendarName}";

		AssertClick(
			locator1 = "Calendar#MY_CALENDARS_CALENDAR",
			value1 = "${userCalendarName}");

		AssertElementNotPresent(locator1 = "Calendar#SCHEDULER_EVENT_ATTENDING_ROW_OPTIONS");

		AssertClick(
			locator1 = "Calendar#MY_CALENDARS_CALENDAR",
			value1 = "${userCalendarName}");
	}

	macro viewSiteRSVPWithUnapprovedWorkflow {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		var key_siteCalendarName = "${siteCalendarName}";
		var key_siteName = "${siteName}";

		Pause(locator1 = "5000");

		if (IsElementNotPresent(locator1 = "Calendar#CURRENT_SITE_CALENDARS_CALENDAR_PRIMARY_COLOR_DEFAULT")) {
			Click(locator1 = "Calendar#CURRENT_SITE_CALENDARS_CALENDAR");
		}

		CalendarScheduler.selectSpecificEventNoRefresh(eventTitle = "${eventTitle}");

		AssertElementPresent(locator1 = "Calendar#SCHEDULER_EVENT_DIALOG_BOX_CALENDAR");

		AssertElementNotPresent(locator1 = "Calendar#SCHEDULER_EVENT_ATTENDING_ROW_OPTIONS");
	}

	macro viewStartsDate {
		AssertTextEquals(
			locator1 = "CalendarEditEvent#START_DATE",
			value1 = "${startDate}");
	}

	macro viewStatusViaDetails {
		AssertTextEquals.assertPartialText(
			locator1 = "CalendarViewEventDetails#STATUS",
			value1 = "${status}");
	}

	macro viewTimes {
		AssertTextEquals.assertValue(
			locator1 = "CalendarEditEvent#START_DATE_TIME",
			value1 = "${startDateTime}");

		AssertTextEquals.assertValue(
			locator1 = "CalendarEditEvent#END_DATE_TIME",
			value1 = "${endDateTime}");
	}

	macro viewTimes24Hour {
		AssertTextEquals.assertValue(
			locator1 = "CalendarEditEvent#START_DATE_TIME_24_HOUR",
			value1 = "${startDateTime}");

		AssertTextEquals.assertValue(
			locator1 = "CalendarEditEvent#END_DATE_TIME_24_HOUR",
			value1 = "${endDateTime}");
	}

	macro viewTimesViaDetails {
		AssertTextEquals.assertPartialText(
			locator1 = "CalendarViewEventDetails#START_DATE_FIELD",
			value1 = "${startDateTime}");

		AssertTextEquals.assertPartialText(
			locator1 = "CalendarViewEventDetails#END_DATE_FIELD",
			value1 = "${endDateTime}");
	}

	macro viewTitle {
		AssertTextEquals(
			locator1 = "TextInput#TITLE",
			value1 = "${eventTitle}");
	}

	macro viewTitleViaDetails {
		CalendarScheduler.gotoDetailsViaDialogBox();

		AssertTextEquals(
			locator1 = "Portlet#H3_HEADER",
			value1 = "${eventTitle}");
	}

	macro viewToday {
		var eventTitle = "${eventTitle}";

		CalendarScheduler.viewDay(eventTitle = "${eventTitle}");

		CalendarScheduler.viewWeek(
			eventTitle = "${eventTitle}",
			frequency = "${frequency}",
			numberOfOccurrences = "${numberOfOccurrences}");

		CalendarScheduler.viewMonth(
			eventTitle = "${eventTitle}",
			frequency = "${frequency}",
			numberOfOccurrences = "${numberOfOccurrences}");

		CalendarNavigator.gotoToday();

		CalendarScheduler.viewAgenda(
			eventTitle = "${eventTitle}",
			numberOfOccurrences = "${numberOfOccurrences}");

		CalendarNavigator.gotoView(viewType = "Week");
	}

	macro viewUnavailableCalendarsNotPresent {
		CalendarEvent._expandPanel(panelName = "Details");

		for (var unavailableCalendarName : list "${unavailableCalendarList}") {
			var key_calendarName = "${unavailableCalendarName}";

			AssertElementNotPresent(locator1 = "CalendarEditEvent#DETAILS_CALENDAR_SELECT_OPTION");
		}
	}

	macro viewUsers {
		CalendarNavigator.gotoView(viewType = "Week");

		CalendarScheduler._selectSpecificEventCurrentDay(eventTitle = "${eventTitle}");

		CalendarScheduler.viewEventTitleViaDialogBox(eventTitle = "${eventTitle}");

		CalendarScheduler.viewEventUsersViaDialogBox(
			user = "${user}",
			usersList = "${usersList}");
	}

	macro viewViaAgendaView {
		AssertElementPresent(locator1 = "xpath=(//div[contains(@class,'scheduler-view-agenda-event') and contains(@data-clientid,'scheduler-event')])[${eventNumber}]");
	}

	macro viewViaAssetPublisher {
		var key_assetTitle = "${eventTitle}";

		AssertTextEquals(
			locator1 = "AP#ASSET_ABSTRACT_TITLE",
			value1 = "${eventTitle}");

		AssertTextEquals.assertPartialText(
			locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
			value1 = "${calendarName}");

		AssertTextEquals.assertPartialText(
			locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
			value1 = "Resources:");

		AssertTextEquals.assertPartialText(
			locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
			value1 = "Starts:");

		AssertTextEquals.assertPartialText(
			locator1 = "AP#ASSET_ABSTRACT_DESCRIPTION",
			value1 = "Ends:");
	}

	macro viewYearly {
		for (var viewType : list "Day,Week,Month") {
			CalendarNavigator.gotoView(viewType = "${viewType}");

			AssertElementPresent(
				key_eventTitle = "${eventTitle}",
				locator1 = "Calendar#SCHEDULER_VIEW_YEARLY_EVENT_DAY_WEEK_AND_MONTH_VIEW");
		}

		CalendarScheduler.viewAgenda(eventTitle = "${eventTitle}");
	}

}