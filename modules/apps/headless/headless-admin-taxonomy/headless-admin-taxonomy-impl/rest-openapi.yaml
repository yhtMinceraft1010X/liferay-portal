components:
    schemas:
        AssetType:
            description:
                Represents the asset type associated with a `TaxonomyCategory`.
            properties:
                required:
                    description:
                        A flag that marks if this type is required.
                    type: boolean
                subtype:
                    description:
                        The asset's subtype.
                    type: string
                type:
                    description:
                        The asset's type (e.g., `BlogPosting`, `Document`, etc.).
                    type: string
            type: object
        Creator:
            description:
                Represents the user who created the content. Properties follow the [creator](https://schema.org/creator)
                specification.
            properties:
                additionalName:
                    description:
                        An additional name for the user. This can be used for a middle name.
                    readOnly: true
                    type: string
                contentType:
                    # @review
                    description:
                        The type of the content.
                    readOnly: true
                    type: string
                familyName:
                    description:
                        The user's surname (last name).
                    readOnly: true
                    type: string
                givenName:
                    description:
                        The user's first name.
                    readOnly: true
                    type: string
                id:
                    description:
                        The user's ID.
                    format: int64
                    readOnly: true
                    type: integer
                image:
                    description:
                        A relative URL to the user's profile image.
                    format: uri
                    readOnly: true
                    type: string
                name:
                    description:
                        The user's full name.
                    readOnly: true
                    type: string
                profileURL:
                    description:
                        A relative URL to the user's profile.
                    format: uri
                    readOnly: true
                    type: string
            type: object
        Keyword:
            description:
                Represents a keyword that describes content. Properties follow the
                [keywords](https://schema.org/keywords) specification.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    readOnly: true
                    type: object
                assetLibraryKey:
                    readOnly: true
                    type: string
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    description:
                        The keyword's creator.
                    readOnly: true
                dateCreated:
                    description:
                        The keyword's creation date.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    description:
                        The keyword's most recent modification date.
                    format: date-time
                    readOnly: true
                    type: string
                id:
                    description:
                        The keyword's ID.
                    format: int64
                    readOnly: true
                    type: integer
                keywordUsageCount:
                    description:
                        The number of times this keyword has been used with other assets.
                    readOnly: true
                    type: integer
                name:
                    description:
                        The keyword's name.
                    type: string
                siteId:
                    description:
                        The ID of the site to which this keyword is scoped.
                    format: int64
                    readOnly: true
                    type: integer
                subscribed:
                    # @review
                    description:
                        A flag that indicates whether the user making the requests is subscribed to this keyword.
                    readOnly: true
                    type: boolean
            required:
                - name
            type: object
        TaxonomyCategory:
            description:
                Represents a category, which is a hierarchical classification that can be associated with particular
                asset types. Properties follow the [category](https://schema.org/category) specification.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    readOnly: true
                    type: object
                availableLanguages:
                    description:
                        A list of languages the category has a translation for.
                    items:
                        type: string
                    readOnly: true
                    type: array
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    description:
                        The category's creator.
                    readOnly: true
                dateCreated:
                    description:
                        The category's creation date.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    description:
                        The category's most recent modification date.
                    format: date-time
                    readOnly: true
                    type: string
                description:
                    description:
                        The category's text description.
                    type: string
                description_i18n:
                    additionalProperties:
                        type: string
                    type: object
                externalReferenceCode:
                    # @review
                    description:
                        The category's external reference code
                    type: string
                id:
                    description:
                        The category's ID.
                    readOnly: true
                    type: string
                name:
                    description:
                        The category's name.
                    type: string
                name_i18n:
                    additionalProperties:
                        type: string
                    type: object
                numberOfTaxonomyCategories:
                    description:
                        The number of times this category has been used in other assets.
                    readOnly: true
                    type: integer
                parentTaxonomyCategory:
                    description:
                        The category's parent category, if it exists.
                    properties:
                        id:
                            format: int64
                            type: integer
                        name:
                            type: string
                    readOnly: true
                    type: object
                parentTaxonomyVocabulary:
                    description:
                        The parent category's `TaxonomyVocabulary`, if such a parent category exists.
                    properties:
                        id:
                            format: int64
                            type: integer
                        name:
                            type: string
                    readOnly: true
                    type: object
                siteId:
                    description:
                        The ID of the site to which this category is scoped.
                    format: int64
                    readOnly: true
                    type: integer
                taxonomyCategoryProperties:
                    # @review
                    description:
                        The category's properties.
                    items:
                        $ref: "#/components/schemas/TaxonomyCategoryProperty"
                    type: array
                taxonomyCategoryUsageCount:
                    readOnly: true
                    type: integer
                taxonomyVocabularyId:
                    description:
                        The `TaxonomyVocabulary` id, only if the category does not have a parent category.
                    format: int64
                    type: integer
                viewableBy:
                    description:
                        A write-only property that specifies the category's default permissions.
                    enum: [Anyone, Members, Owner]
                    type: string
                    writeOnly: true
            required:
                - name
            type: object
        TaxonomyCategoryProperty:
            # @review
            description:
                Key value pair to associate detailed information with a category.
            properties:
                key:
                    # @review
                    description:
                        The taxonomy category property's key.
                    type: string
                value:
                    # @review
                    description:
                        The taxonomy category property's value.
                    type: string
            required:
                - key
            type: object
        TaxonomyVocabulary:
            description:
                Represents a vocabulary, which is a grouping of categories for a specific purpose (e.g., classification,
                sorting, etc.).
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    readOnly: true
                    type: object
                assetLibraryKey:
                    readOnly: true
                    type: string
                assetTypes:
                    description:
                        A list of asset types that can be associated with this vocabulary.
                    items:
                        $ref: "#/components/schemas/AssetType"
                    type: array
                availableLanguages:
                    description:
                        A list of languages the vocabulary has a translation for.
                    items:
                        type: string
                    readOnly: true
                    type: array
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    description:
                        The vocabulary's creator.
                    readOnly: true
                dateCreated:
                    description:
                        The vocabulary's creation date.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    description:
                        The vocabulary's most recent modification date.
                    format: date-time
                    readOnly: true
                    type: string
                description:
                    description:
                        The vocabulary's text description.
                    type: string
                description_i18n:
                    additionalProperties:
                        type: string
                    type: object
                externalReferenceCode:
                    description:
                        The vocabulary's external reference code.
                    type: string
                id:
                    description:
                        The vocabulary's ID.
                    format: int64
                    readOnly: true
                    type: integer
                name:
                    description:
                        The vocabulary's name.
                    type: string
                name_i18n:
                    additionalProperties:
                        type: string
                    type: object
                numberOfTaxonomyCategories:
                    description:
                        The number of categories that directly depend on this vocabulary.
                    readOnly: true
                    type: integer
                siteId:
                    description:
                        The ID of the site to which this vocabulary is scoped.
                    format: int64
                    readOnly: true
                    type: integer
                viewableBy:
                    description:
                        A write-only property that specifies the vocabulary's default permissions.
                    enum: [Anyone, Members, Owner]
                    type: string
                    writeOnly: true
            required:
                - name
            type: object
info:
    description:
        "A Java client JAR is available for use with the group ID 'com.liferay', artifact ID
        'com.liferay.headless.admin.taxonomy.client', and version '4.0.14'."
    license:
        name: "Apache 2.0"
        url: "http://www.apache.org/licenses/LICENSE-2.0.html"
    title: "Headless Admin Taxonomy"
    version: v1.0
openapi: 3.0.1
paths:
    "/asset-libraries/{assetLibraryId}/keywords":
        get:
            operationId: getAssetLibraryKeywordsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Keyword"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Keyword"
                                type: array
            tags: ["Keyword"]
        post:
            operationId: postAssetLibraryKeyword
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Keyword"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Keyword"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Keyword"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Keyword"
            tags: ["Keyword"]
    "/asset-libraries/{assetLibraryId}/keywords/permissions":
        get:
            operationId: getAssetLibraryKeywordPermissionsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Keyword"]
        put:
            operationId: putAssetLibraryKeywordPermissionsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Keyword"]
    "/asset-libraries/{assetLibraryId}/taxonomy-vocabularies":
        get:
            operationId: getAssetLibraryTaxonomyVocabulariesPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/TaxonomyVocabulary"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/TaxonomyVocabulary"
                                type: array
            tags: ["TaxonomyVocabulary"]
        post:
            operationId: postAssetLibraryTaxonomyVocabulary
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/TaxonomyVocabulary"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/TaxonomyVocabulary"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TaxonomyVocabulary"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/TaxonomyVocabulary"
            tags: ["TaxonomyVocabulary"]
    "/asset-libraries/{assetLibraryId}/taxonomy-vocabularies/permissions":
        get:
            operationId: getAssetLibraryTaxonomyVocabularyPermissionsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["TaxonomyVocabulary"]
        put:
            operationId: putAssetLibraryTaxonomyVocabularyPermissionsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["TaxonomyVocabulary"]
    "/keywords/ranked":
        get:
            operationId: getKeywordsRankedPage
            parameters:
                - in: query
                  name: siteId
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Keyword"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Keyword"
                                type: array
            tags: ["Keyword"]
    "/keywords/{keywordId}":
        delete:
            description:
                Deletes the keyword and returns a 204 if the operation succeeds.
            operationId: deleteKeyword
            parameters:
                - in: path
                  name: keywordId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Keyword"]
        get:
            description:
                Retrieves a keyword.
            operationId: getKeyword
            parameters:
                - in: path
                  name: keywordId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Keyword"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Keyword"
            tags: ["Keyword"]
        put:
            description:
                Replaces the keyword with the information sent in the request body. Any missing fields are deleted,
                unless required.
            operationId: putKeyword
            parameters:
                - in: path
                  name: keywordId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Keyword"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Keyword"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Keyword"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Keyword"
            tags: ["Keyword"]
    "/keywords/{keywordId}/subscribe":
        put:
            operationId: putKeywordSubscribe
            parameters:
                - in: path
                  name: keywordId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Keyword"]
    "/keywords/{keywordId}/unsubscribe":
        put:
            operationId: putKeywordUnsubscribe
            parameters:
                - in: path
                  name: keywordId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Keyword"]
    "/sites/{siteId}/keywords":
        get:
            description:
                Retrieves a Site's keywords. Results can be paginated, filtered, searched, and sorted.
            operationId: getSiteKeywordsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Keyword"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Keyword"
                                type: array
            tags: ["Keyword"]
        post:
            description:
                Inserts a new keyword in a Site.
            operationId: postSiteKeyword
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Keyword"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Keyword"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Keyword"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Keyword"
            tags: ["Keyword"]
    "/sites/{siteId}/keywords/permissions":
        get:
            operationId: getSiteKeywordPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Keyword"]
        put:
            operationId: putSiteKeywordPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Keyword"]
    "/sites/{siteId}/taxonomy-vocabularies":
        get:
            description:
                Retrieves a Site's taxonomy vocabularies. Results can be paginated, filtered, searched, and sorted.
            operationId: getSiteTaxonomyVocabulariesPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/TaxonomyVocabulary"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/TaxonomyVocabulary"
                                type: array
            tags: ["TaxonomyVocabulary"]
        post:
            description:
                Inserts a new taxonomy vocabulary in a Site.
            operationId: postSiteTaxonomyVocabulary
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/TaxonomyVocabulary"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/TaxonomyVocabulary"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TaxonomyVocabulary"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/TaxonomyVocabulary"
            tags: ["TaxonomyVocabulary"]
    "/sites/{siteId}/taxonomy-vocabularies/by-external-reference-code/{externalReferenceCode}":
        delete:
            # @review
            description:
                Deletes the site's taxonomy vocabulary by external reference code.
            operationId: deleteSiteTaxonomyVocabularyByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["TaxonomyVocabulary"]
        get:
            # @review
            description:
                Retrieves the site's taxonomy vocabulary by external reference code.
            operationId: getSiteTaxonomyVocabularyByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TaxonomyVocabulary"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/TaxonomyVocabulary"
            tags: ["TaxonomyVocabulary"]
        put:
            # @review
            description:
                Updates the site's taxonomy vocabulary with the given external reference code, or creates it if it not
                exists.
            operationId: putSiteTaxonomyVocabularyByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/TaxonomyVocabulary"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/TaxonomyVocabulary"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TaxonomyVocabulary"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/TaxonomyVocabulary"
            tags: ["TaxonomyVocabulary"]
    "/sites/{siteId}/taxonomy-vocabularies/permissions":
        get:
            operationId: getSiteTaxonomyVocabularyPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["TaxonomyVocabulary"]
        put:
            operationId: putSiteTaxonomyVocabularyPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["TaxonomyVocabulary"]
    "/taxonomy-categories/ranked":
        get:
            operationId: getTaxonomyCategoriesRankedPage
            parameters:
                - in: query
                  name: siteId
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/TaxonomyCategory"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/TaxonomyCategory"
                                type: array
            tags: ["TaxonomyCategory"]
    "/taxonomy-categories/{parentTaxonomyCategoryId}/taxonomy-categories":
        get:
            description:
                Retrieves a taxonomy category's child taxonomy categories. Results can be paginated, filtered, searched,
                and sorted.
            operationId: getTaxonomyCategoryTaxonomyCategoriesPage
            parameters:
                - in: path
                  name: parentTaxonomyCategoryId
                  required: true
                  schema:
                      type: string
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/TaxonomyCategory"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/TaxonomyCategory"
                                type: array
            tags: ["TaxonomyCategory"]
        post:
            description:
                Inserts a new child taxonomy category.
            operationId: postTaxonomyCategoryTaxonomyCategory
            parameters:
                - in: path
                  name: parentTaxonomyCategoryId
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/TaxonomyCategory"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/TaxonomyCategory"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TaxonomyCategory"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/TaxonomyCategory"
            tags: ["TaxonomyCategory"]
    "/taxonomy-categories/{taxonomyCategoryId}":
        delete:
            description:
                Deletes the taxonomy category and returns a 204 if the operation succeeds.
            operationId: deleteTaxonomyCategory
            parameters:
                - in: path
                  name: taxonomyCategoryId
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["TaxonomyCategory"]
        get:
            description:
                Retrieves a taxonomy category.
            operationId: getTaxonomyCategory
            parameters:
                - in: path
                  name: taxonomyCategoryId
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TaxonomyCategory"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/TaxonomyCategory"
            tags: ["TaxonomyCategory"]
        patch:
            description:
                Updates only the fields received in the request body. Other fields are left untouched.
            operationId: patchTaxonomyCategory
            parameters:
                - in: path
                  name: taxonomyCategoryId
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/TaxonomyCategory"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/TaxonomyCategory"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TaxonomyCategory"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/TaxonomyCategory"
            tags: ["TaxonomyCategory"]
        put:
            description:
                Replaces the taxonomy category with the information sent in the request body. Any missing fields are
                deleted unless they are required.
            operationId: putTaxonomyCategory
            parameters:
                - in: path
                  name: taxonomyCategoryId
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/TaxonomyCategory"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/TaxonomyCategory"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TaxonomyCategory"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/TaxonomyCategory"
            tags: ["TaxonomyCategory"]
    "/taxonomy-categories/{taxonomyCategoryId}/permissions":
        get:
            operationId: getTaxonomyCategoryPermissionsPage
            parameters:
                - in: path
                  name: taxonomyCategoryId
                  required: true
                  schema:
                      type: string
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["TaxonomyCategory"]
        put:
            operationId: putTaxonomyCategoryPermissionsPage
            parameters:
                - in: path
                  name: taxonomyCategoryId
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["TaxonomyCategory"]
    "/taxonomy-vocabularies/{taxonomyVocabularyId}":
        delete:
            description:
                Deletes the taxonomy vocabulary and returns a 204 if the operation succeeds.
            operationId: deleteTaxonomyVocabulary
            parameters:
                - in: path
                  name: taxonomyVocabularyId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["TaxonomyVocabulary"]
        get:
            description:
                Retrieves a taxonomy vocabulary.
            operationId: getTaxonomyVocabulary
            parameters:
                - in: path
                  name: taxonomyVocabularyId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TaxonomyVocabulary"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/TaxonomyVocabulary"
            tags: ["TaxonomyVocabulary"]
        patch:
            description:
                Updates only the fields received in the request body. Any other fields are left untouched.
            operationId: patchTaxonomyVocabulary
            parameters:
                - in: path
                  name: taxonomyVocabularyId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/TaxonomyVocabulary"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/TaxonomyVocabulary"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TaxonomyVocabulary"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/TaxonomyVocabulary"
            tags: ["TaxonomyVocabulary"]
        put:
            description:
                Replaces the taxonomy vocabulary with the information sent in the request body. Any missing fields are
                deleted unless they are required.
            operationId: putTaxonomyVocabulary
            parameters:
                - in: path
                  name: taxonomyVocabularyId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/TaxonomyVocabulary"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/TaxonomyVocabulary"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TaxonomyVocabulary"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/TaxonomyVocabulary"
            tags: ["TaxonomyVocabulary"]
    "/taxonomy-vocabularies/{taxonomyVocabularyId}/permissions":
        get:
            operationId: getTaxonomyVocabularyPermissionsPage
            parameters:
                - in: path
                  name: taxonomyVocabularyId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["TaxonomyVocabulary"]
        put:
            operationId: putTaxonomyVocabularyPermissionsPage
            parameters:
                - in: path
                  name: taxonomyVocabularyId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["TaxonomyVocabulary"]
    "/taxonomy-vocabularies/{taxonomyVocabularyId}/taxonomy-categories":
        get:
            description:
                Retrieves a vocabulary's taxonomy categories. Results can be paginated, filtered, searched, and sorted.
            operationId: getTaxonomyVocabularyTaxonomyCategoriesPage
            parameters:
                - in: path
                  name: taxonomyVocabularyId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/TaxonomyCategory"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/TaxonomyCategory"
                                type: array
            tags: ["TaxonomyCategory"]
        post:
            description:
                Inserts a new taxonomy category in a taxonomy vocabulary.
            operationId: postTaxonomyVocabularyTaxonomyCategory
            parameters:
                - in: path
                  name: taxonomyVocabularyId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/TaxonomyCategory"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/TaxonomyCategory"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TaxonomyCategory"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/TaxonomyCategory"
            tags: ["TaxonomyCategory"]
    "/taxonomy-vocabularies/{taxonomyVocabularyId}/taxonomy-categories/by-external-reference-code/{externalReferenceCode}":
        delete:
            # @review
            description:
                Deletes the site's taxonomy category by external reference code.
            operationId: deleteTaxonomyVocabularyTaxonomyCategoryByExternalReferenceCode
            parameters:
                - in: path
                  name: taxonomyVocabularyId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["TaxonomyCategory"]
        get:
            # @review
            description:
                Retrieves the site's taxonomy category by external reference code.
            operationId: getTaxonomyVocabularyTaxonomyCategoryByExternalReferenceCode
            parameters:
                - in: path
                  name: taxonomyVocabularyId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TaxonomyCategory"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/TaxonomyCategory"
            tags: ["TaxonomyCategory"]
        put:
            # @review
            description:
                Updates the site's taxonomy category with the given external reference code, or creates it if it not
                exists.
            operationId: putTaxonomyVocabularyTaxonomyCategoryByExternalReferenceCode
            parameters:
                - in: path
                  name: taxonomyVocabularyId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/TaxonomyCategory"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/TaxonomyCategory"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TaxonomyCategory"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/TaxonomyCategory"
            tags: ["TaxonomyCategory"]