components:
    schemas:
        AggregateRating:
            description:
                Represents the average rating. See [AggregateRating](https://www.schema.org/AggregateRating) for more
                information.
            properties:
                bestRating:
                    description:
                        The highest possible rating (by default normalized to 1.0).
                    format: double
                    readOnly: true
                    type: number
                ratingAverage:
                    description:
                        The average rating.
                    format: double
                    readOnly: true
                    type: number
                ratingCount:
                    description:
                        The number of ratings.
                    readOnly: true
                    type: integer
                ratingValue:
                    # @review
                    description:
                        The rating value.
                    format: double
                    readOnly: true
                    type: number
                worstRating:
                    description:
                        The lowest possible rating (by default normalized to 0.0).
                    format: double
                    readOnly: true
                    type: number
            type: object
        BlogPosting:
            description:
                Represents a blog post. See [BlogPosting](https://www.schema.org/BlogPosting) for more information.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    # @review
                    description:
                        Block of actions allowed by the user making the request.
                    readOnly: true
                    type: object
                aggregateRating:
                    allOf:
                        - $ref: "#/components/schemas/AggregateRating"
                    description:
                        The blog post's average rating.
                    readOnly: true
                alternativeHeadline:
                    description:
                        The blog post's subtitle.
                    type: string
                articleBody:
                    description:
                        The blog post's body (content).
                    type: string
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    description:
                        The blog post's author.
                    readOnly: true
                customFields:
                    # @review
                    description:
                        A list of the custom fields associated with the blog post.
                    items:
                        $ref: "#/components/schemas/CustomField"
                    type: array
                dateCreated:
                    description:
                        The blog post's creation date.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    description:
                        The blog post's most recent modification date.
                    format: date-time
                    readOnly: true
                    type: string
                datePublished:
                    description:
                        The blog post's publication date.
                    format: date-time
                    type: string
                description:
                    description:
                        The blog post's description.
                    type: string
                encodingFormat:
                    description:
                        The blog post's media format (e.g., HTML, BBCode, etc.).
                    readOnly: true
                    type: string
                externalReferenceCode:
                    description:
                        The blog post's external reference code.
                    type: string
                friendlyUrlPath:
                    description:
                        The blog post's relative URL.
                    type: string
                headline:
                    description:
                        The blog post's main title.
                    type: string
                id:
                    description:
                        The blog post's identifier.
                    format: int64
                    readOnly: true
                    type: integer
                image:
                    description:
                        The blog post's cover image.
                    properties:
                        caption:
                            description:
                                The text describing the image.
                            type: string
                        contentUrl:
                            description:
                                The image's relative URL.
                            format: uri
                            readOnly: true
                            type: string
                        contentValue:
                            # @review
                            description:
                                "optional field with the content of the image in Base64, can be embedded with
                                nestedFields"
                            readOnly: true
                            type: string
                        imageId:
                            description:
                                The image's ID. This can be used to retrieve more information in the `Document` API.
                            format: int64
                            type: integer
                    type: object
                keywords:
                    description:
                        A list of keywords describing the blog post.
                    items:
                        type: string
                    type: array
                numberOfComments:
                    description:
                        The number of comments this blog post has received.
                    readOnly: true
                    type: integer
                relatedContents:
                    # @review
                    description:
                        A list of related contents to this blog post.
                    items:
                        $ref: "#/components/schemas/RelatedContent"
                    readOnly: true
                    type: array
                renderedContents:
                    description:
                        A list of rendered blogs posts, which results from using a display page to process the blogs
                        post and return HTML.
                    items:
                        $ref: "#/components/schemas/RenderedContent"
                    readOnly: true
                    type: array
                siteId:
                    description:
                        The ID of the site to which this blog post is scoped.
                    format: int64
                    readOnly: true
                    type: integer
                taxonomyCategoryBriefs:
                    description:
                        The categories associated with this blog post.
                    items:
                        $ref: "#/components/schemas/TaxonomyCategoryBrief"
                    readOnly: true
                    type: array
                taxonomyCategoryIds:
                    # @review
                    description:
                        A write-only field that adds `TaxonomyCategory` instances to the blog post.
                    items:
                        format: int64
                        type: integer
                    type: array
                    writeOnly: true
                viewableBy:
                    description:
                        A write-only property that specifies the default permissions.
                    enum: [Anyone, Members, Owner]
                    type: string
                    writeOnly: true
            required:
                - articleBody
                - headline
            type: object
        BlogPostingImage:
            description:
                Represents a blog post's image. Properties follow the [image](https://schema.org/image) specification.
            properties:
                contentUrl:
                    description:
                        The image's relative URL.
                    readOnly: true
                    type: string
                contentValue:
                    # @review
                    description:
                        optional field with the content of the image in Base64, can be embedded with nestedFields
                    readOnly: true
                    type: string
                encodingFormat:
                    description:
                        The image's content type (e.g., `application/png`, etc.).
                    readOnly: true
                    type: string
                fileExtension:
                    description:
                        The image's file extension.
                    readOnly: true
                    type: string
                id:
                    description:
                        The image's ID.
                    format: int64
                    readOnly: true
                    type: integer
                sizeInBytes:
                    description:
                        The image's size in bytes.
                    format: int64
                    readOnly: true
                    type: integer
                title:
                    description:
                        The image's title text.
                    type: string
                viewableBy:
                    description:
                        A write-only property that specifies the default permissions.
                    enum: [Anyone, Members, Owner]
                    type: string
                    writeOnly: true
            type: object
        ClassFieldReference:
            properties:
                className:
                    type: string
                fieldName:
                    type: string
                fieldValue:
                    type: string
            required:
                - className
                - fieldName
                - fieldValue
            type: object
        ClassFieldsReference:
            properties:
                className:
                    type: string
                fields:
                    description:
                        The list of fields for the reference.
                    items:
                        properties:
                            fieldName:
                                description:
                                    The name of the field.
                                type: string
                            fieldValue:
                                description:
                                    The internal value of the field.
                                type: string
                        type: object
                    type: array
            required:
                - className
                - fields
            type: object
        ClassNameReference:
            properties:
                className:
                    type: string
            required:
                - className
        ClassPKReference:
            properties:
                className:
                    type: string
                classPK:
                    format: int64
                    type: integer
            required:
                - className
                - classPK
            type: object
        ClassTypeReference:
            properties:
                className:
                    type: string
                subtypeId:
                    format: int64
                    type: integer
            required:
                - className
            type: object
        CollectionViewport:
            # @review
            description:
                Represents a collection viewport.
            properties:
                collectionViewportDefinition:
                    # @review
                    description:
                        The definition of the collection viewport.
                    properties:
                        numberOfColumns:
                            # @review
                            description:
                                The number of columns of the collection viewport.
                            type: integer
                    type: object
                id:
                    # @review
                    description:
                        The collection viewport's ID.
                    type: string
            required:
                - id
                - collectionViewportDefinition
            type: object
        ColumnViewport:
            properties:
                columnViewportDefinition:
                    properties:
                        size:
                            maximum: 12
                            minimum: 1
                            type: integer
                    type: object
                id:
                    type: string
            required:
                - columnViewportDefinition
                - id
            type: object
        Comment:
            description:
                Represents a comment. See [Comment](https://www.schema.org/Comment) for more details.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    # @review
                    description:
                        Block of actions allowed by the user making the request.
                    readOnly: true
                    type: object
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    description:
                        The comment's author.
                    readOnly: true
                dateCreated:
                    description:
                        The comment's creation date.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    description:
                        The comment's latest modification date.
                    format: date-time
                    readOnly: true
                    type: string
                externalReferenceCode:
                    # @review
                    description:
                        The comment's external reference code.
                    type: string
                id:
                    description:
                        The comment's ID.
                    format: int64
                    readOnly: true
                    type: integer
                numberOfComments:
                    description:
                        The number of child comments on this comment.
                    readOnly: true
                    type: integer
                parentCommentId:
                    # @review
                    description:
                        the ID of the comment's parent, if it exists.
                    format: int64
                    type: integer
                text:
                    description:
                        The comment's text content.
                    type: string
            type: object
        ContentDocument:
            description:
                Represents a document (binary data and metadata) associated with structured content. Properties follow
                the [Media Object](https://schema.org/MediaObject) specification.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    # @review
                    description:
                        Block of actions allowed by the user making the request.
                    readOnly: true
                    type: object
                contentType:
                    description:
                        The type of content.
                    readOnly: true
                    type: string
                contentUrl:
                    description:
                        The document's relative URL.
                    format: uri
                    readOnly: true
                    type: string
                contentValue:
                    # @review
                    description:
                        optional field with the content of the document in Base64, can be embedded with nestedFields
                    readOnly: true
                    type: string
                description:
                    description:
                        The document's description.
                    type: string
                encodingFormat:
                    description:
                        The document's content type (e.g., `application/pdf`, etc.).
                    readOnly: true
                    type: string
                fileExtension:
                    description:
                        The document's file extension.
                    readOnly: true
                    type: string
                id:
                    description:
                        The document's ID.
                    format: int64
                    type: integer
                sizeInBytes:
                    description:
                        The document's file size in bytes.
                    format: int64
                    readOnly: true
                    type: integer
                title:
                    description:
                        The document's title.
                    type: string
            type: object
        ContentElement:
            # @review
            properties:
                content:
                    description:
                        The content's fields.
                    readOnly: true
                    type: object
                contentType:
                    description:
                        The content set element's type.
                    readOnly: true
                    type: string
                id:
                    description:
                        The content set element's ID.
                    format: int64
                    readOnly: true
                    type: integer
                title:
                    description:
                        The content's title.
                    readOnly: true
                    type: string
                title_i18n:
                    additionalProperties:
                        type: string
                    description:
                        The localized content's titles.
                    readOnly: true
                    type: object
        ContentField:
            description:
                Represents the value of each field in structured content. Fields can contain different information types
                (e.g., documents, geolocation, etc.).
            properties:
                contentFieldValue:
                    allOf:
                        - $ref: "#/components/schemas/ContentFieldValue"
                    description:
                        The field's value.
                contentFieldValue_i18n:
                    additionalProperties:
                        $ref: "#/components/schemas/ContentFieldValue"
                    description:
                        The localized field's values.
                    type: object
                dataType:
                    description:
                        The field type (e.g., image, text, etc.).
                    readOnly: true
                    type: string
                inputControl:
                    description:
                        The field's control type (e.g., text, text area, etc.).
                    readOnly: true
                    type: string
                label:
                    description:
                        The field's label.
                    readOnly: true
                    type: string
                label_i18n:
                    additionalProperties:
                        type: string
                    description:
                        The localized field's labels.
                    readOnly: true
                    type: object
                name:
                    description:
                        The field's internal name. This is valid for comparisons and unique in the structured content.
                    type: string
                nestedContentFields:
                    description:
                        A list of child content fields that depend on this resource.
                    items:
                        $ref: "#/components/schemas/ContentField"
                    type: array
                repeatable:
                    description:
                        A flag that indicates whether this field can be rendered multiple times.
                    readOnly: true
                    type: boolean
        ContentFieldValue:
            description:
                # @review
                Represents the value of a content field. Can contain different information types (e.g., geolocation,
                documents, etc.).
            properties:
                data:
                    description:
                        The field's content for simple types.
                    type: string
                document:
                    allOf:
                        - $ref: "#/components/schemas/ContentDocument"
                    description:
                        A content document element.
                geo:
                    description:
                        A point determined by latitude and longitude.
                    properties:
                        latitude:
                            description:
                                The latitude of a point in space.
                            format: double
                            type: number
                        longitude:
                            description:
                                The longitude of a point in space.
                            format: double
                            type: number
                    type: object
                image:
                    allOf:
                        - $ref: "#/components/schemas/ContentDocument"
                    description:
                        A content document element that stores an image file.
                link:
                    description:
                        A link to a page on the server.
                    format: uri
                    type: string
                structuredContentLink:
                    description:
                        A link to structured content on the server.
                    properties:
                        contentType:
                            description:
                                The type of content.
                            readOnly: true
                            type: string
                        embeddedStructuredContent:
                            allOf:
                                - $ref: "#/components/schemas/StructuredContent"
                            # @review
                            description:
                                Optional field with the structured content, can be embedded with nestedFields.
                            readOnly: true
                        id:
                            description:
                                The resource's ID.
                            format: int64
                            type: integer
                        title:
                            description:
                                The resource's title.
                            type: string
                    type: object
        ContentSetElement:
            description:
                Represents each member of a content set and can contain different types of assets.
            properties:
                content:
                    description:
                        The content's fields.
                    readOnly: true
                    type: object
                contentType:
                    description:
                        The content set element's type.
                    readOnly: true
                    type: string
                id:
                    description:
                        The content set element's ID.
                    format: int64
                    readOnly: true
                    type: integer
                title:
                    description:
                        The content's title.
                    readOnly: true
                    type: string
                title_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized content's titles.
                    readOnly: true
                    type: object
        ContentStructure:
            description:
                Represents the content structure that backs structured content. This defines which form fields are
                available and the possible types and values.
            properties:
                assetLibraryKey:
                    # @review
                    description:
                        The key of the asset library to which the content structure is scoped.
                    readOnly: true
                    type: string
                availableLanguages:
                    description:
                        The list of languages the content structure has a translation for.
                    items:
                        type: string
                    readOnly: true
                    type: array
                contentStructureFields:
                    description:
                        The list of the content structure's fields.
                    items:
                        $ref: "#/components/schemas/ContentStructureField"
                    readOnly: true
                    type: array
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    description:
                        The content structure's creator.
                    readOnly: true
                dateCreated:
                    description:
                        The content structure's creation date.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    description:
                        The last time a field of the content structure changed.
                    format: date-time
                    readOnly: true
                    type: string
                description:
                    description:
                        The content structure's description.
                    readOnly: true
                    type: string
                description_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized content structure's description.
                    readOnly: true
                    type: object
                id:
                    description:
                        The content structure's ID.
                    format: int64
                    readOnly: true
                    type: integer
                name:
                    description:
                        The content structure's name.
                    readOnly: true
                    type: string
                name_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized content structure's names.
                    readOnly: true
                    type: object
                siteId:
                    description:
                        The ID of the site to which the content structure is scoped.
                    format: int64
                    readOnly: true
                    type: integer
            type: object
        ContentStructureField:
            description:
                Represents each field in a content structure, backed by a content field.
            properties:
                dataType:
                    description:
                        The form field's type (e.g., date, geolocation, text, etc.).
                    readOnly: true
                    type: string
                inputControl:
                    description:
                        The form field's input control type (e.g., text, textarea, select field, etc.).
                    readOnly: true
                    type: string
                label:
                    description:
                        The form field's label.
                    readOnly: true
                    type: string
                label_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The form field's labels.
                    readOnly: true
                    type: object
                localizable:
                    description:
                        A flag that indicates whether the content is accessible in different languages.
                    readOnly: true
                    type: boolean
                multiple:
                    description:
                        A flag that indicates whether the form field can have several values.
                    readOnly: true
                    type: boolean
                name:
                    description:
                        The form field's name.
                    readOnly: true
                    type: string
                nestedContentStructureFields:
                    description:
                        The child content structure fields that depend on this form field.
                    items:
                        $ref: "#/components/schemas/ContentStructureField"
                    readOnly: true
                    type: array
                options:
                    description:
                        The list of different possible values.
                    items:
                        properties:
                            label:
                                description:
                                    The option's label.
                                type: string
                            label_i18n:
                                additionalProperties:
                                    type: string
                                # @review
                                description:
                                    The localized option's labels.
                                type: object
                            value:
                                description:
                                    The internal value of the field option.
                                type: string
                        type: object
                    readOnly: true
                    type: array
                predefinedValue:
                    description:
                        The form field's default value.
                    readOnly: true
                    type: string
                predefinedValue_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized form field's default values.
                    readOnly: true
                    type: object
                repeatable:
                    description:
                        A flag that indicates whether this content can be rendered (and answered) several times.
                    readOnly: true
                    type: boolean
                required:
                    description:
                        A flag that indicates whether this form field is required.
                    readOnly: true
                    type: boolean
                showLabel:
                    description:
                        A flag that indicates whether the structure's end target should render the field label.
                    readOnly: true
                    type: boolean
            type: object
        ContentTemplate:
            # @review
            description:
                Represents a content template.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    # @review
                    description:
                        Block of actions allowed by the user making the request.
                    readOnly: true
                    type: object
                assetLibraryKey:
                    # @review
                    description:
                        The key of the asset library to which the content template is scoped.
                    readOnly: true
                    type: string
                availableLanguages:
                    # @review
                    description:
                        The list of languages the content template has a translation for.
                    items:
                        type: string
                    readOnly: true
                    type: array
                contentStructureId:
                    # @review
                    description:
                        The ID of the `ContentStructure`.
                    format: int64
                    type: integer
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    # @review
                    description:
                        The content template's creator.
                    readOnly: true
                dateCreated:
                    # @review
                    description:
                        The content template's creation date.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    # @review
                    description:
                        The last time the content template changed.
                    format: date-time
                    readOnly: true
                    type: string
                description:
                    # @review
                    description:
                        the content template's description.
                    type: string
                description_i18n:
                    # @review
                    additionalProperties:
                        type: string
                    description:
                        the localized content template's descriptions.
                    type: object
                id:
                    # @review
                    description:
                        The content template's ID.
                    readOnly: true
                    type: string
                name:
                    # @review
                    description:
                        the content template's name.
                    type: string
                name_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        the localized content template's name.
                    type: object
                programmingLanguage:
                    # @review
                    description:
                        the content template's programming language.
                    type: string
                siteId:
                    # @review
                    description:
                        The ID of the site to which the content template is scoped.
                    format: int64
                    readOnly: true
                    type: integer
                templateScript:
                    # @review
                    description:
                        The content template's script.
                    type: string
            required:
                - contentStructureId
                - name
        ContextReference:
            properties:
                contextSource:
                    enum: [CollectionItem, DisplayPageItem]
                    type: string
            required:
                - contextSource
            type: object
        Creator:
            description:
                Represents the user account of the content's creator/author. Properties follow the
                [creator](https://schema.org/creator) specification.
            properties:
                additionalName:
                    description:
                        The author's additional name (e.g., middle name).
                    readOnly: true
                    type: string
                contentType:
                    # @review
                    description:
                        The type of the content.
                    readOnly: true
                    type: string
                familyName:
                    description:
                        The author's surname.
                    readOnly: true
                    type: string
                givenName:
                    description:
                        The author's first name.
                    readOnly: true
                    type: string
                id:
                    description:
                        The author's ID.
                    format: int64
                    readOnly: true
                    type: integer
                image:
                    description:
                        A relative URL to the author's profile image.
                    format: uri
                    readOnly: true
                    type: string
                name:
                    description:
                        The author's full name.
                    readOnly: true
                    type: string
                profileURL:
                    # @review
                    description:
                        A relative URL to the author's user profile. Optional field, can be embedded with nestedFields.
                    format: uri
                    readOnly: true
                    type: string
            type: object
        CreatorStatistics:
            # @review
            description:
                Detailed info of the creator.
            properties:
                joinDate:
                    description:
                        Join date of the author.
                    format: date-time
                    readOnly: true
                    type: string
                lastPostDate:
                    description:
                        Last post created by the author.
                    format: date-time
                    readOnly: true
                    type: string
                postsNumber:
                    description:
                        Number of posts publicated by the author.
                    readOnly: true
                    type: integer
                rank:
                    description:
                        The rank of the author.
                    readOnly: true
                    type: string
            type: object
        CustomField:
            # @review
            description:
                Represents the value of each custom field. Fields can contain different information types (e.g.,
                geolocation, strings, etc.).
            properties:
                customValue:
                    allOf:
                        - $ref: "#/components/schemas/CustomValue"
                    description:
                        The field's value.
                dataType:
                    description:
                        The field type (e.g., image, text, etc.).
                    readOnly: true
                    type: string
                name:
                    description:
                        The field's internal name. This is valid for comparisons and unique in the structured content.
                    type: string
        CustomMetaTag:
            # @review
            description:
                Represents a custom meta tag.
            properties:
                key:
                    # @review
                    description:
                        The custom metatag's key.
                    type: string
                value:
                    # @review
                    description:
                        The custom metatag's value
                    type: string
                value_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized custom metatag's values.
                    type: object
            type: object
        CustomValue:
            # @review
            description:
                Represents a custom value.
            properties:
                data:
                    # @review
                    description:
                        The field's content value for simple types.
                    type: object
                data_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized field's content values for simple types.
                    type: object
                geo:
                    allOf:
                        - $ref: "#/components/schemas/Geo"
                    description:
                        A point determined by latitude and longitude.
            type: object
        DisplayPageTemplate:
            description:
                Represents a Display Page template.
            properties:
                contentSubtype:
                    # @review
                    description:
                        The display page template's content subtype.
                    properties:
                        subtypeId:
                            # @review
                            description:
                                The content subtype's ID.
                            format: int64
                            type: integer
                        subtypeKey:
                            # @review
                            description:
                                The content subtype's Key.
                            type: string
                    type: object
                contentType:
                    # @review
                    description:
                        The type of content.
                    properties:
                        className:
                            # @review
                            description:
                                The content type's class name.
                            type: string
                    type: object
                defaultTemplate:
                    # @review
                    description:
                        Specifies if the page template should be the default for the given content type/subtype.
                    type: boolean
                key:
                    # @review
                    description:
                        The display page template's key.
                    type: string
                name:
                    # @review
                    description:
                        The display page template's name.
                    type: string
            type: object
        Document:
            description:
                Represents a Document Library file, storing binary and metadata information. Properties follow the
                [MediaObject](https://schema.org/MediaObject) specification.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    # @review
                    description:
                        Block of actions allowed by the user making the request.
                    readOnly: true
                    type: object
                adaptedImages:
                    description:
                        An array of images in several resolutions and sizes, created by the Adaptive Media framework.
                    items:
                        properties:
                            contentUrl:
                                description:
                                    The image's relative URL.
                                format: uri
                                type: string
                            contentValue:
                                # @review
                                description:
                                    Optional field with the content of the image in Base64, can be embedded with
                                    nestedFields.
                                readOnly: true
                                type: string
                            height:
                                description:
                                    The image's height in pixels.
                                type: integer
                            resolutionName:
                                description:
                                    The name of the image's Adaptive Media image resolution.
                                type: string
                            sizeInBytes:
                                description:
                                    The image's size in bytes.
                                format: int64
                                type: integer
                            width:
                                description:
                                    The image's width in pixels.
                                type: integer
                        type: object
                    readOnly: true
                    type: array
                aggregateRating:
                    allOf:
                        - $ref: "#/components/schemas/AggregateRating"
                    description:
                        The document's average rating.
                    readOnly: true
                assetLibraryKey:
                    # @review
                    description:
                        The key of the asset library to which the document is scoped.
                    readOnly: true
                    type: string
                contentUrl:
                    description:
                        The document's relative URL.
                    format: binary
                    readOnly: true
                    type: string
                contentValue:
                    # @review
                    description:
                        The optional field with the content of the document in Base64, can be embedded with
                        nestedFields.
                    readOnly: true
                    type: string
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    description:
                        The document's creator.
                    readOnly: true
                customFields:
                    # @review
                    description:
                        A list of the custom fields associated with the document.
                    items:
                        $ref: "#/components/schemas/CustomField"
                    type: array
                dateCreated:
                    description:
                        The document's creation date.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    description:
                        The last time a field of the document changed.
                    format: date-time
                    readOnly: true
                    type: string
                description:
                    description:
                        The document's description.
                    type: string
                documentFolderId:
                    description:
                        The ID of the `DocumentFolder` where this document is stored.
                    format: int64
                    type: integer
                documentType:
                    properties:
                        availableLanguages:
                            # @review
                            description:
                                The list of languages the document type has a translation for.
                            items:
                                type: string
                            readOnly: true
                            type: array
                        contentFields:
                            # @review
                            description:
                                The list of content fields the document type has.
                            items:
                                $ref: "#/components/schemas/ContentField"
                            type: array
                        description:
                            # @review
                            description:
                                The document type's description.
                            type: string
                        description_i18n:
                            additionalProperties:
                                type: string
                            # @review
                            description:
                                The localized document type's description.
                            readOnly: true
                            type: object
                        name:
                            # @review
                            description:
                                The document type's name.
                            type: string
                        name_i18n:
                            additionalProperties:
                                type: string
                            # @review
                            description:
                                The localized document type's name.
                            readOnly: true
                            type: object
                    type: object
                encodingFormat:
                    description:
                        The document's content type (e.g., `application/pdf`, etc.).
                    readOnly: true
                    type: string
                externalReferenceCode:
                    # @review
                    description:
                        The document's external reference code.
                    type: string
                fileExtension:
                    description:
                        The document's file extension.
                    readOnly: true
                    type: string
                id:
                    description:
                        The document's ID.
                    format: int64
                    readOnly: true
                    type: integer
                keywords:
                    description:
                        A list of keywords describing the document.
                    items:
                        type: string
                    type: array
                numberOfComments:
                    description:
                        The number of comments on the document.
                    readOnly: true
                    type: integer
                relatedContents:
                    # @review
                    description:
                        A list of related contents to this document.
                    items:
                        $ref: "#/components/schemas/RelatedContent"
                    readOnly: true
                    type: array
                renderedContents:
                    description:
                        A list of rendered documents, which results from using a display page to process the document
                        and return HTML.
                    items:
                        $ref: "#/components/schemas/RenderedContent"
                    readOnly: true
                    type: array
                siteId:
                    # @review
                    description:
                        The ID of the site to which this document is scoped.
                    format: int64
                    readOnly: true
                    type: integer
                sizeInBytes:
                    description:
                        The document's size in bytes.
                    format: int64
                    readOnly: true
                    type: integer
                taxonomyCategoryBriefs:
                    # @review
                    description:
                        The categories associated with this document.
                    items:
                        $ref: "#/components/schemas/TaxonomyCategoryBrief"
                    readOnly: true
                    type: array
                taxonomyCategoryIds:
                    description:
                        A write-only field that adds `TaxonomyCategory` instances to the document.
                    items:
                        format: int64
                        type: integer
                    type: array
                    writeOnly: true
                title:
                    description:
                        The document's main title/name.
                    type: string
                viewableBy:
                    description:
                        A write-only property that specifies the document's default permissions.
                    enum: [Anyone, Members, Owner]
                    type: string
                    writeOnly: true
            type: object
        DocumentFolder:
            description:
                Represents a document folder that can contain documents and other folders.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    # @review
                    description:
                        Block of actions allowed by the user making the request.
                    readOnly: true
                    type: object
                assetLibraryKey:
                    # @review
                    description:
                        The key of the asset library to which the folder is scoped.
                    readOnly: true
                    type: string
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    description:
                        The folder's creator.
                    readOnly: true
                customFields:
                    # @review
                    description:
                        A list of the custom fields associated with the folder.
                    items:
                        $ref: "#/components/schemas/CustomField"
                    type: array
                dateCreated:
                    description:
                        The folder's creation date.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    description:
                        The last time a field of the folder changed.
                    format: date-time
                    readOnly: true
                    type: string
                description:
                    description:
                        The folder's description.
                    type: string
                id:
                    description:
                        The folder's ID.
                    format: int64
                    readOnly: true
                    type: integer
                name:
                    description:
                        The folder's main title/name.
                    type: string
                numberOfDocumentFolders:
                    description:
                        The number of this folder's child folders.
                    readOnly: true
                    type: integer
                numberOfDocuments:
                    description:
                        The number of documents in this folder.
                    readOnly: true
                    type: integer
                parentDocumentFolderId:
                    # @review
                    description:
                        The ID of the folder's parent, if it exists.
                    format: int64
                    type: integer
                siteId:
                    description:
                        The ID of the site to which this folder is scoped.
                    format: int64
                    readOnly: true
                    type: integer
                subscribed:
                    # @review
                    description:
                        A flag that indicates whether the user making the requests is subscribed to this folder.
                    readOnly: true
                    type: boolean
                viewableBy:
                    description:
                        A write-only property that specifies the folder's default permissions.
                    enum: [Anyone, Members, Owner]
                    type: string
                    writeOnly: true
            required:
                - name
            type: object
        Experience:
            description:
                # @review
                Represents a customized experience for a given page.
            properties:
                key:
                    # @review
                    description:
                        the experience's key.
                    type: string
                name:
                    # @review
                    description:
                        the experience's name.
                    type: string
                name_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        the localized experience's names.
                    type: object
                segments:
                    # @review
                    description:
                        A list of segments the experience is used for.
                    items:
                        $ref: "../../headless-admin-user/headless-admin-user-impl/rest-openapi.yaml#Segment"
                    type: array
            type: object
        Fragment:
            # @review
            description:
                Represents a template made up of CSS, HTML, and JavaScript used to build Content Pages.
            properties:
                collectionName:
                    # @review
                    description:
                        The collection name this fragment belongs to.
                    type: string
                key:
                    # @review
                    description:
                        The fragment's key.
                    type: string
                name:
                    # @review
                    description:
                        The fragment's name.
                    type: string
            type: object
        FragmentField:
            # @review
            description:
                Represents a fragment field.
            properties:
                id:
                    # @review
                    description:
                        The fragment field's ID.
                    type: string
                value:
                    anyOf:
                        - $ref: "#/components/schemas/FragmentFieldBackgroundImage"
                        - $ref: "#/components/schemas/FragmentFieldHTML"
                        - $ref: "#/components/schemas/FragmentFieldImage"
                        - $ref: "#/components/schemas/FragmentFieldText"
                    # @review
                    description:
                        The fragment field's value.
            type: object
        FragmentFieldBackgroundImage:
            # @review
            description:
                Represents a fragment field with a background image.
            properties:
                backgroundFragmentImage:
                    allOf:
                        - $ref: "#/components/schemas/FragmentImage"
                    # @review
                    description:
                        The fragment field's background image.
                backgroundImage:
                    deprecated: true
                    description:
                        "Deprecated as of Athanasius (7.3.x), replaced by backgroundFragmentImage"
                    properties:
                        description:
                            oneOf:
                                - $ref: "#/components/schemas/FragmentInlineValue"
                        title:
                            oneOf:
                                - $ref: "#/components/schemas/FragmentInlineValue"
                        url:
                            oneOf:
                                - $ref: "#/components/schemas/FragmentInlineValue"
                                - $ref: "#/components/schemas/FragmentMappedValue"
                    type: object
            type: object
        FragmentFieldHTML:
            # @review
            description:
                Represents a fragment field with HTML.
            properties:
                html:
                    # @review
                    description:
                        The fragment field's HTML. Can be inline or mapped to an external value.
                    oneOf:
                        - $ref: "#/components/schemas/FragmentInlineValue"
                        - $ref: "#/components/schemas/FragmentMappedValue"
            type: object
        FragmentFieldImage:
            # @review
            description:
                Represents a fragment field with an image.
            properties:
                fragmentImage:
                    allOf:
                        - $ref: "#/components/schemas/FragmentImage"
                    # @review
                    description:
                        The fragment field's image.
                fragmentLink:
                    allOf:
                        - $ref: "#/components/schemas/FragmentLink"
                    # @review
                    description:
                        A link to a fragment.
            type: object
        FragmentFieldText:
            # @review
            description:
                Represents a fragment field with text.
            properties:
                fragmentLink:
                    allOf:
                        - $ref: "#/components/schemas/FragmentLink"
                    # @review
                    description:
                        A link to a fragment.
                text:
                    # @review
                    description:
                        The fragment field's text.
                    oneOf:
                        - $ref: "#/components/schemas/FragmentInlineValue"
                        - $ref: "#/components/schemas/FragmentMappedValue"
            type: object
        FragmentImage:
            # @review
            description:
                Represents a fragment image.
            properties:
                description:
                    # @review
                    description:
                        The fragment image's description.
                    oneOf:
                        - $ref: "#/components/schemas/FragmentInlineValue"
                fragmentImageClassPKReference:
                    allOf:
                        - $ref: "#/components/schemas/FragmentImageClassPKReference"
                    # @review
                    description:
                        A reference to a fragment image class primary key.
                title:
                    # @review
                    description:
                        The fragment image's title.
                    oneOf:
                        - $ref: "#/components/schemas/FragmentInlineValue"
                url:
                    # @review
                    description:
                        The fragment image's url. Can be inline or mapped to an external value.
                    oneOf:
                        - $ref: "#/components/schemas/FragmentInlineValue"
                        - $ref: "#/components/schemas/FragmentMappedValue"
            type: object
        FragmentImageClassPKReference:
            # @review
            description:
                Represents a reference to a fragment image class primary key.
            properties:
                classPKReferences:
                    additionalProperties:
                        $ref: "#/components/schemas/ClassPKReference"
                    # @review
                    description:
                        A map of class primary key references.
                    type: object
                fragmentImageConfiguration:
                    allOf:
                        - $ref: "#/components/schemas/FragmentImageConfiguration"
                    # @review
                    description:
                        The fragment image's configuration.
            type: object
        FragmentImageConfiguration:
            # @review
            description:
                Represents the Adaptive Media fragment image configuration for different viewports.
            properties:
                landscapeMobile:
                    # @review
                    description:
                        The landscape mobile configuration of the fragment image.
                    type: string
                portraitMobile:
                    # @review
                    description:
                        The portrait mobile configuration of the fragment image.
                    type: string
                tablet:
                    # @review
                    description:
                        The tablet configuration of the fragment image.
                    type: string
            type: object
        FragmentInlineValue:
            # @review
            description:
                Represents a fragment inline value.
            properties:
                value:
                    # @review
                    description:
                        The fragment's inline value.
                    type: string
                value_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized fragment's inline values.
                    type: object
            type: object
        FragmentLink:
            # @review
            description:
                Represents a fragment link.
            properties:
                href:
                    deprecated: true
                    oneOf:
                        - $ref: "#/components/schemas/FragmentInlineValue"
                        - $ref: "#/components/schemas/FragmentMappedValue"
                target:
                    deprecated: true
                    enum: [Blank, Parent, Self, Top]
                    type: string
                value:
                    allOf:
                        - $ref: "#/components/schemas/FragmentLinkValue"
                    # @review
                    description:
                        The fragment link's value.
                value_i18n:
                    additionalProperties:
                        $ref: "#/components/schemas/FragmentLinkValue"
                    # @review
                    description:
                        The localized fragment link's values.
                    type: object
        FragmentLinkValue:
            # @review
            description:
                Represents a fragment link value.
            properties:
                href:
                    # @review
                    description:
                        The fragment link value's hypertext reference. Can be inline or mapped to an external value.
                    oneOf:
                        - $ref: "#/components/schemas/FragmentInlineValue"
                        - $ref: "#/components/schemas/FragmentMappedValue"
                target:
                    # @review
                    description:
                        The fragment link value's target (blank, parent, self, top).
                    enum: [Blank, Parent, Self, Top]
                    type: string
        FragmentMappedValue:
            # @review
            description:
                Represents a fragment mapped value.
            properties:
                defaultFragmentInlineValue:
                    allOf:
                        - $ref: "#/components/schemas/FragmentInlineValue"
                    # @review
                    description:
                        The default value of the fragment mapped value.
                defaultValue:
                    deprecated: true
                    description:
                        "Deprecated as of Athanasius (7.3.x), replaced by defaultFragmentInlineValue"
                    properties:
                        value:
                            type: string
                        value_i18n:
                            additionalProperties:
                                type: string
                            type: object
                    type: object
                mapping:
                    # @review
                    description:
                        The mapping of the fragment mapped value.
                    properties:
                        fieldKey:
                            # @review
                            description:
                                The mapping's field key.
                            type: string
                        itemReference:
                            # @review
                            description:
                                The mapping's item reference.
                            oneOf:
                                - $ref: "#/components/schemas/ClassFieldReference"
                                - $ref: "#/components/schemas/ClassFieldsReference"
                                - $ref: "#/components/schemas/ClassPKReference"
                                - $ref: "#/components/schemas/ContextReference"
                    type: object
            type: object
        FragmentSettingsAllowed:
            # @review
            description:
                Represents the settings of allowed fragments in a page dropzone.
            properties:
                allowedFragments:
                    # @review
                    description:
                        A list of allowed fragments.
                    items:
                        $ref: "#/components/schemas/Fragment"
                    type: array
            type: object
        FragmentSettingsUnallowed:
            # @review
            description:
                Represents the settings of unallowed fragments in a page dropzone.
            properties:
                unallowedFragments:
                    items:
                        $ref: "#/components/schemas/Fragment"
                    type: array
            type: object
        FragmentStyle:
            # @review
            description:
                Represents a fragment style.
            properties:
                backgroundColor:
                    # @review
                    description:
                        The fragment's background color.
                    type: string
                backgroundFragmentImage:
                    allOf:
                        - $ref: "#/components/schemas/FragmentImage"
                    # @review
                    description:
                        The fragment's background image.
                borderColor:
                    # @review
                    description:
                        The fragment's border color.
                    type: string
                borderRadius:
                    # @review
                    description:
                        The fragment's background radius.
                    type: string
                borderWidth:
                    # @review
                    description:
                        The fragment's border width.
                    type: string
                fontFamily:
                    # @review
                    description:
                        The fragment's font family.
                    type: string
                fontSize:
                    # @review
                    description:
                        The fragment's font size.
                    type: string
                fontWeight:
                    # @review
                    description:
                        The fragment's font weight.
                    type: string
                height:
                    # @review
                    description:
                        The fragment's height.
                    type: string
                hidden:
                    # @review
                    description:
                        Specifies if the fragment is hidden to the user.
                    type: boolean
                marginBottom:
                    # @review
                    description:
                        The fragment's margin bottom.
                    type: string
                marginLeft:
                    # @review
                    description:
                        The fragment's margin left.
                    type: string
                marginRight:
                    # @review
                    description:
                        The fragment's margin right.
                    type: string
                marginTop:
                    # @review
                    description:
                        The fragment's margin top.
                    type: string
                maxHeight:
                    # @review
                    description:
                        The fragment's max height.
                    type: string
                maxWidth:
                    # @review
                    description:
                        The fragment's max width.
                    type: string
                minHeight:
                    # @review
                    description:
                        The fragment's min height.
                    type: string
                minWidth:
                    # @review
                    description:
                        The fragment's min width.
                    type: string
                opacity:
                    # @review
                    description:
                        The fragment's opacity.
                    type: string
                overflow:
                    # @review
                    description:
                        The fragment's overflow behavior.
                    type: string
                paddingBottom:
                    # @review
                    description:
                        The fragment's padding bottom.
                    type: string
                paddingLeft:
                    # @review
                    description:
                        The fragment's padding left.
                    type: string
                paddingRight:
                    # @review
                    description:
                        The fragment's padding right.
                    type: string
                paddingTop:
                    # @review
                    description:
                        The fragment's padding top.
                    type: string
                shadow:
                    # @review
                    description:
                        The fragment's shadow effect.
                    type: string
                textAlign:
                    # @review
                    description:
                        The fragment's text align.
                    type: string
                textColor:
                    # @review
                    description:
                        The fragment's text color.
                    type: string
                width:
                    # @review
                    description:
                        The fragment's width.
                    type: string
            type: object
        FragmentViewport:
            # @review
            description:
                Represents a fragment viewport.
            properties:
                fragmentViewportStyle:
                    # @review
                    description:
                        The fragment's viewport style.
                    properties:
                        backgroundColor:
                            # @review
                            description:
                                The fragment viewport's background color.
                            type: string
                        borderColor:
                            # @review
                            description:
                                The fragment viewport's border color.
                            type: string
                        borderRadius:
                            # @review
                            description:
                                The fragment viewport's background radius.
                            type: string
                        borderWidth:
                            # @review
                            description:
                                The fragment viewport's border width.
                            type: string
                        fontFamily:
                            # @review
                            description:
                                The fragment viewport's font family.
                            type: string
                        fontSize:
                            # @review
                            description:
                                The fragment viewport's font size.
                            type: string
                        fontWeight:
                            # @review
                            description:
                                The fragment viewport's font weight.
                            type: string
                        height:
                            # @review
                            description:
                                The fragment viewport's height.
                            type: string
                        hidden:
                            # @review
                            description:
                                Specifies if the fragment's viewport is hidden to the user.
                            type: boolean
                        marginBottom:
                            # @review
                            description:
                                The fragment viewport's margin bottom.
                            type: string
                        marginLeft:
                            # @review
                            description:
                                The fragment viewport's margin left.
                            type: string
                        marginRight:
                            # @review
                            description:
                                The fragment viewport's margin right.
                            type: string
                        marginTop:
                            # @review
                            description:
                                The fragment viewport's margin top.
                            type: string
                        maxHeight:
                            # @review
                            description:
                                The fragment viewport's max height.
                            type: string
                        maxWidth:
                            # @review
                            description:
                                The fragment viewport's max width.
                            type: string
                        minHeight:
                            # @review
                            description:
                                The fragment viewport's min height.
                            type: string
                        minWidth:
                            # @review
                            description:
                                The fragment viewport's min width.
                            type: string
                        opacity:
                            # @review
                            description:
                                The fragment viewport's opacity.
                            type: string
                        overflow:
                            # @review
                            description:
                                The fragment viewport's overflow behavior.
                            type: string
                        paddingBottom:
                            # @review
                            description:
                                The fragment viewport's padding bottom.
                            type: string
                        paddingLeft:
                            # @review
                            description:
                                The fragment viewport's padding left.
                            type: string
                        paddingRight:
                            # @review
                            description:
                                The fragment viewport's padding right.
                            type: string
                        paddingTop:
                            # @review
                            description:
                                The fragment viewport's padding top.
                            type: string
                        shadow:
                            # @review
                            description:
                                The fragment viewport's shadow effect.
                            type: string
                        textAlign:
                            # @review
                            description:
                                The fragment viewport's text align.
                            type: string
                        textColor:
                            # @review
                            description:
                                The fragment viewport's text color.
                            type: string
                        width:
                            # @review
                            description:
                                The fragment viewport's width.
                            type: string
                    type: object
                id:
                    # @review
                    description:
                        The fragment viewport's ID.
                    type: string
            required:
                - fragmentViewportStyle
                - id
            type: object
        Geo:
            description:
                A point determined by latitude and longitude.
            properties:
                latitude:
                    description:
                        The latitude of a point in space.
                    format: double
                    type: number
                longitude:
                    description:
                        The longitude of a point in space.
                    format: double
                    type: number
            type: object
        KnowledgeBaseArticle:
            description:
                Represents a Knowledge Base article (`KBArticle`), the main entity in the Knowledge Base API.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    # @review
                    description:
                        Block of actions allowed by the user making the request.
                    readOnly: true
                    type: object
                aggregateRating:
                    allOf:
                        - $ref: "#/components/schemas/AggregateRating"
                    description:
                        The article's average rating.
                    readOnly: true
                articleBody:
                    description:
                        The article's main content.
                    type: string
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    description:
                        The article's author.
                    readOnly: true
                customFields:
                    # @review
                    description:
                        A list of the custom fields associated with the article.
                    items:
                        $ref: "#/components/schemas/CustomField"
                    type: array
                dateCreated:
                    description:
                        The date the article was created.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    description:
                        The last time the article's content or metadata changed.
                    format: date-time
                    readOnly: true
                    type: string
                description:
                    description:
                        The article's description.
                    type: string
                encodingFormat:
                    description:
                        The article's media type (e.g., HTML, BBCode, etc.).
                    readOnly: true
                    type: string
                externalReferenceCode:
                    description:
                        The article's external reference code.
                    type: string
                friendlyUrlPath:
                    description:
                        The article's relative URL.
                    type: string
                id:
                    description:
                        The article's ID.
                    format: int64
                    readOnly: true
                    type: integer
                keywords:
                    description:
                        A list of keywords describing the article.
                    items:
                        type: string
                    type: array
                numberOfAttachments:
                    description:
                        The article's number attachments.
                    readOnly: true
                    type: integer
                numberOfKnowledgeBaseArticles:
                    description:
                        The number of this article's child articles.
                    readOnly: true
                    type: integer
                parentKnowledgeBaseArticleId:
                    # @review
                    description:
                        The ID of the article's parent, if it exists.
                    format: int64
                    type: integer
                parentKnowledgeBaseFolder:
                    description:
                        The article's parent folder, if it exists.
                    properties:
                        folderId:
                            # @review
                            description:
                                The folder's parent ID.
                            format: int64
                            type: integer
                        folderName:
                            # @review
                            description:
                                The folder's parent name.
                            type: string
                    readOnly: true
                    type: object
                parentKnowledgeBaseFolderId:
                    description:
                        The ID of the article's parent folder, if that folder exists.
                    format: int64
                    type: integer
                    writeOnly: true
                relatedContents:
                    # @review
                    description:
                        A list of related contents to this article.
                    items:
                        $ref: "#/components/schemas/RelatedContent"
                    readOnly: true
                    type: array
                siteId:
                    description:
                        The ID of the site to which this article is scoped.
                    format: int64
                    readOnly: true
                    type: integer
                subscribed:
                    # @review
                    description:
                        A flag that indicates whether the user making the requests is subscribed to this article.
                    readOnly: true
                    type: boolean
                taxonomyCategoryBriefs:
                    # @review
                    description:
                        The categories associated with this article.
                    items:
                        $ref: "#/components/schemas/TaxonomyCategoryBrief"
                    readOnly: true
                    type: array
                taxonomyCategoryIds:
                    # @review
                    description:
                        A write-only field that adds `TaxonomyCategory` instances to the article.
                    items:
                        format: int64
                        type: integer
                    type: array
                    writeOnly: true
                title:
                    description:
                        The article's main title.
                    type: string
                viewableBy:
                    description:
                        A write-only property that specifies the article's default permissions.
                    enum: [Anyone, Members, Owner]
                    type: string
                    writeOnly: true
            required:
                - articleBody
                - title
            type: object
        KnowledgeBaseAttachment:
            description:
                Represents a binary file attached to a Knowledge Base article.
            properties:
                contentUrl:
                    description:
                        The file's relative URL.
                    readOnly: true
                    type: string
                contentValue:
                    # @review
                    description:
                        optional field with the content of the document in Base64, can be embedded with nestedFields
                    readOnly: true
                    type: string
                encodingFormat:
                    description:
                        The file's media type (e.g., application/pdf, etc.).
                    readOnly: true
                    type: string
                fileExtension:
                    description:
                        The file's extension.
                    readOnly: true
                    type: string
                id:
                    description:
                        The file's ID.
                    format: int64
                    readOnly: true
                    type: integer
                sizeInBytes:
                    description:
                        The file's size in bytes.
                    format: int64
                    readOnly: true
                    type: integer
                title:
                    description:
                        The file's main title.
                    type: string
            type: object
        KnowledgeBaseFolder:
            description:
                Represents a folder for organizing Knowledge Base articles.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    # @review
                    description:
                        Block of actions allowed by the user making the request.
                    readOnly: true
                    type: object
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    description:
                        The folder's creator.
                    readOnly: true
                customFields:
                    # @review
                    description:
                        A list of the custom fields associated with the folder.
                    items:
                        $ref: "#/components/schemas/CustomField"
                    type: array
                dateCreated:
                    description:
                        The date the folder was created.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    description:
                        The last time the folder was modified.
                    format: date-time
                    readOnly: true
                    type: string
                description:
                    description:
                        The folder's description.
                    type: string
                externalReferenceCode:
                    description:
                        The folder's external reference code.
                    type: string
                id:
                    description:
                        The folder's ID.
                    format: int64
                    readOnly: true
                    type: integer
                name:
                    description:
                        The folder's main title/name.
                    type: string
                numberOfKnowledgeBaseArticles:
                    description:
                        The number of Knowledge Base articles in this folder.
                    readOnly: true
                    type: integer
                numberOfKnowledgeBaseFolders:
                    description:
                        The number of Knowledge Base folders in this folder.
                    readOnly: true
                    type: integer
                parentKnowledgeBaseFolder:
                    description:
                        The folder's parent Knowledge Base folder, if it exists.
                    properties:
                        folderId:
                            description:
                                The parent folder's ID.
                            format: int64
                            type: integer
                        folderName:
                            description:
                                The parent folder's name.
                            type: string
                    readOnly: true
                    type: object
                parentKnowledgeBaseFolderId:
                    description:
                        The ID of the folder's parent Knowledge Base folder, if such a parent folder exists.
                    format: int64
                    type: integer
                    writeOnly: true
                siteId:
                    description:
                        The ID of the site to which this folder is scoped.
                    format: int64
                    readOnly: true
                    type: integer
                viewableBy:
                    description:
                        A write-only property that specifies the folder's default permissions.
                    enum: [Anyone, Members, Owner]
                    type: string
                    writeOnly: true
            required:
                - name
            type: object
        Language:
            # @review
            description:
                Describes a specific language in the platform.
            properties:
                countryName:
                    # @review
                    description:
                        The language's contry name.
                    type: string
                countryName_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized language's country name values.
                    type: object
                id:
                    # @review
                    description:
                        The language's ID.
                    type: string
                markedAsDefault:
                    # @review
                    description:
                        A flag that indicates whether the language has benn marked as default language.
                    type: boolean
                name:
                    # @review
                    description:
                        The language's name.
                    type: string
                name_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized language's name values.
                    type: object
            type: object
        MasterPage:
            # @review
            description:
                Represents a page with common elements (header, footer, ...) used for all or several pages of a site.
            properties:
                key:
                    # @review
                    description:
                        The master page's key.
                    type: string
                name:
                    # @review
                    description:
                        The master page's name.
                    type: string
            type: object
        MessageBoardAttachment:
            description:
                A binary file attached to a message on a message board (`MessageBoardMessage`).
            properties:
                contentUrl:
                    description:
                        The file's relative URL.
                    readOnly: true
                    type: string
                contentValue:
                    # @review
                    description:
                        optional field with the content of the document in Base64, can be embedded with nestedFields
                    readOnly: true
                    type: string
                encodingFormat:
                    description:
                        The file's media format (e.g., application/pdf, etc.).
                    readOnly: true
                    type: string
                fileExtension:
                    description:
                        The file's extension.
                    readOnly: true
                    type: string
                id:
                    description:
                        The file's ID.
                    format: int64
                    readOnly: true
                    type: integer
                sizeInBytes:
                    description:
                        The file's size in bytes.
                    format: int64
                    readOnly: true
                    type: integer
                title:
                    description:
                        The file's title.
                    type: string
            type: object
        MessageBoardMessage:
            description:
                Represents a message on a message board. Properties follow the [Discussion Forum
                Posting](https://schema.org/DiscussionForumPosting) specification.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    # @review
                    description:
                        Block of actions allowed by the user making the request.
                    readOnly: true
                    type: object
                aggregateRating:
                    allOf:
                        - $ref: "#/components/schemas/AggregateRating"
                    description:
                        The message's average rating.
                    readOnly: true
                anonymous:
                    description:
                        A flag that indicates whether the message's author is anonymous.
                    type: boolean
                articleBody:
                    description:
                        The message's main content.
                    type: string
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    description:
                        The message's author.
                    readOnly: true
                creatorStatistics:
                    allOf:
                        - $ref: "#/components/schemas/CreatorStatistics"
                    # @review
                    description:
                        The message's creator statistics (rank, join date, number of posts, ...)
                customFields:
                    # @review
                    description:
                        A list of the custom fields associated with the blog post.
                    items:
                        $ref: "#/components/schemas/CustomField"
                    type: array
                dateCreated:
                    description:
                        The date the message was created.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    description:
                        The last time the content or metadata of the message was changed.
                    format: date-time
                    readOnly: true
                    type: string
                encodingFormat:
                    description:
                        The message's media format (e.g., HTML, BBCode, etc.).
                    type: string
                externalReferenceCode:
                    description:
                        The message's external reference code.
                    type: string
                friendlyUrlPath:
                    type: string
                headline:
                    description:
                        The message's main title.
                    type: string
                id:
                    description:
                        The message's ID.
                    format: int64
                    readOnly: true
                    type: integer
                keywords:
                    description:
                        A list of keywords describing the message.
                    items:
                        type: string
                    type: array
                messageBoardSectionId:
                    # @review
                    description:
                        The ID of the Message Board Section to which this message is scoped.
                    format: int64
                    type: integer
                messageBoardThreadId:
                    # @review
                    description:
                        The ID of the Message Board Thread to which this message is scoped.
                    format: int64
                    readOnly: true
                    type: integer
                numberOfMessageBoardAttachments:
                    description:
                        The number of the message's attachments.
                    readOnly: true
                    type: integer
                numberOfMessageBoardMessages:
                    description:
                        The number of the message's child messages.
                    readOnly: true
                    type: integer
                parentMessageBoardMessageId:
                    # @review
                    description:
                        The ID of the message's parent, if it exists.
                    format: int64
                    type: integer
                relatedContents:
                    # @review
                    description:
                        A list of related contents to this message.
                    items:
                        $ref: "#/components/schemas/RelatedContent"
                    readOnly: true
                    type: array
                showAsAnswer:
                    description:
                        A flag that indicates whether the message is answering a question.
                    type: boolean
                siteId:
                    description:
                        The ID of the site to which this message is scoped.
                    format: int64
                    readOnly: true
                    type: integer
                status:
                    # @review
                    description:
                        The message's status.
                    readOnly: true
                    type: string
                subscribed:
                    # @review
                    description:
                        A flag that indicates whether the user making the requests is subscribed to this message.
                    readOnly: true
                    type: boolean
                viewableBy:
                    description:
                        A write-only property that specifies the default permissions.
                    enum: [Anyone, Members, Owner]
                    type: string
                    writeOnly: true
            type: object
        MessageBoardSection:
            description:
                Represents a section/folder on a message board, used to organize messages.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    # @review
                    description:
                        Block of actions allowed by the user making the request.
                    readOnly: true
                    type: object
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    description:
                        The section's creator.
                    readOnly: true
                customFields:
                    # @review
                    description:
                        A list of the custom fields associated with the section.
                    items:
                        $ref: "#/components/schemas/CustomField"
                    type: array
                dateCreated:
                    description:
                        The date the section was created.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    description:
                        The last time the section was changed.
                    format: date-time
                    readOnly: true
                    type: string
                description:
                    description:
                        The section's description.
                    type: string
                id:
                    description:
                        The section's ID.
                    format: int64
                    readOnly: true
                    type: integer
                numberOfMessageBoardSections:
                    description:
                        The number of this section's child sections.
                    readOnly: true
                    type: integer
                numberOfMessageBoardThreads:
                    description:
                        The number of message board threads in this section.
                    readOnly: true
                    type: integer
                parentMessageBoardSectionId:
                    # @review
                    description:
                        The ID of the section parent's, if it exists.
                    format: int64
                    type: integer
                siteId:
                    description:
                        The ID of the site to which this section is scoped.
                    format: int64
                    readOnly: true
                    type: integer
                subscribed:
                    # @review
                    description:
                        A flag that indicates whether the user making the requests is subscribed to this section.
                    readOnly: true
                    type: boolean
                title:
                    description:
                        The section's main title.
                    type: string
                viewableBy:
                    description:
                        A write-only property that specifies the default permissions.
                    enum: [Anyone, Members, Owner]
                    type: string
                    writeOnly: true
            required:
                - title
            type: object
        # @review
        MessageBoardThread:
            description:
                Represents a discussion thread in a message board.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    # @review
                    description:
                        Block of actions allowed by the user making the request.
                    readOnly: true
                    type: object
                aggregateRating:
                    allOf:
                        - $ref: "#/components/schemas/AggregateRating"
                    description:
                        The thread's average rating.
                    readOnly: true
                articleBody:
                    description:
                        The thread's main body content (the message written as the thread's description).
                    type: string
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    description:
                        The thread's creator.
                    readOnly: true
                creatorStatistics:
                    allOf:
                        - $ref: "#/components/schemas/CreatorStatistics"
                    # @review
                    description:
                        The thread's creator statistics (rank, join date, number of posts, ...)
                customFields:
                    # @review
                    description:
                        A list of the custom fields associated with the thread.
                    items:
                        $ref: "#/components/schemas/CustomField"
                    type: array
                dateCreated:
                    description:
                        The date the thread was created.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    description:
                        The last time any field of the thread changed.
                    format: date-time
                    readOnly: true
                    type: string
                encodingFormat:
                    description:
                        The media format of the thread's content (e.g., HTML, BBCode, etc.).
                    type: string
                friendlyUrlPath:
                    type: string
                hasValidAnswer:
                    # @review
                    description:
                        A flag that indicates whether this thread has a message considered as valid
                    type: boolean
                headline:
                    description:
                        The thread's main title.
                    type: string
                id:
                    description:
                        The thread's ID.
                    format: int64
                    readOnly: true
                    type: integer
                keywords:
                    description:
                        A list of keywords describing the thread.
                    items:
                        type: string
                    type: array
                locked:
                    # @review
                    description:
                        A flag that indicates whether this thread is locked.
                    readOnly: true
                    type: boolean
                messageBoardSectionId:
                    # @review
                    description:
                        The ID of the Message Board Section to which this message is scoped.
                    format: int64
                    type: integer
                numberOfMessageBoardAttachments:
                    description:
                        The number of the thread's attachments.
                    readOnly: true
                    type: integer
                numberOfMessageBoardMessages:
                    description:
                        The number of the thread's messages.
                    readOnly: true
                    type: integer
                relatedContents:
                    # @review
                    description:
                        A list of related contents to this thread.
                    items:
                        $ref: "#/components/schemas/RelatedContent"
                    readOnly: true
                    type: array
                seen:
                    # @review
                    description:
                        A flag that indicates whether this thread has been seen.
                    type: boolean
                showAsQuestion:
                    description:
                        A flag that indicates whether this thread was posted as a question that can receive approved
                        answers.
                    type: boolean
                siteId:
                    description:
                        The ID of the site to which this thread is scoped.
                    format: int64
                    readOnly: true
                    type: integer
                status:
                    # @review
                    description:
                        The thread's status.
                    readOnly: true
                    type: string
                subscribed:
                    # @review
                    description:
                        A flag that indicates whether the user making the requests is subscribed to this thread.
                    type: boolean
                taxonomyCategoryBriefs:
                    # @review
                    description:
                        The categories associated with this thread.
                    items:
                        $ref: "#/components/schemas/TaxonomyCategoryBrief"
                    readOnly: true
                    type: array
                taxonomyCategoryIds:
                    # @review
                    description:
                        A write-only field that adds `TaxonomyCategory` instances to the thread.
                    items:
                        format: int64
                        type: integer
                    type: array
                    writeOnly: true
                threadType:
                    description:
                        The thread's type.
                    type: string
                viewCount:
                    description:
                        The number of views of this thread.
                    format: int64
                    readOnly: true
                    type: integer
                viewableBy:
                    description:
                        A write-only property that specifies the thread's default permissions.
                    enum: [Anyone, Members, Owner]
                    type: string
                    writeOnly: true
            required:
                - headline
            type: object
        NavigationMenu:
            # @review
            description:
                Represents a navigation menu.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    # @review
                    description:
                        Block of actions allowed by the user making the request.
                    readOnly: true
                    type: object
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    # @review
                    description:
                        The navigation menu's creator.
                    readOnly: true
                dateCreated:
                    # @review
                    description:
                        The navigation menu's creation date.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    # @review
                    description:
                        The last time the navigation menu changed.
                    format: date-time
                    readOnly: true
                    type: string
                id:
                    # @review
                    description:
                        The navigation menu's ID.
                    format: int64
                    readOnly: true
                    type: integer
                name:
                    # @review
                    description:
                        The navigation menu's name.
                    type: string
                navigationMenuItems:
                    # @review
                    description:
                        The list of navigation menu items this navigation menu has.
                    items:
                        $ref: "#/components/schemas/NavigationMenuItem"
                    type: array
                navigationType:
                    # @review
                    description:
                        The navigation menu's type (primary, secondary, social).
                    enum: [Primary, Secondary, Social]
                    type: string
                siteId:
                    # @review
                    description:
                        The ID of the site to which this navigation menu is scoped.
                    format: int64
                    readOnly: true
                    type: integer
        NavigationMenuItem:
            # @review
            description:
                Represents a navigation menu item.
            properties:
                availableLanguages:
                    # @review
                    description:
                        The list of languages the navigation menu item has a translation for.
                    items:
                        type: string
                    readOnly: true
                    type: array
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                     # @review
                    description:
                        The navigation menu item's creator.
                    readOnly: true
                dateCreated:
                    # @review
                    description:
                        The navigation menu item's creation date.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    # @review
                    description:
                        The last time the navigation menu item changed.
                    format: date-time
                    readOnly: true
                    type: string
                id:
                    # @review
                    description:
                        The navigation menu item's ID.
                    format: int64
                    type: integer
                link:
                    # @review
                    description:
                        The link to a page on the server.
                    format: uri
                    type: string
                link_i18n:
                    additionalProperties:
                        format: uri
                        type: string
                    # @review
                    description:
                        The localized links to a page on the server.
                    type: object
                name:
                    # @review
                    description:
                        The navigation menu item's name.
                    type: string
                name_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized navigation menu item's names.
                    type: object
                navigationMenuItems:
                    # @review
                    description:
                        The navigation menu items this navigation menu item has.
                    items:
                        $ref: "#/components/schemas/NavigationMenuItem"
                    type: array
                parentNavigationMenuId:
                    # @review
                    description:
                        The ID of the navigation menu item's parent.
                    format: int64
                    readOnly: true
                    type: integer
                sitePageURL:
                    # @review
                    description:
                        The navigation menu item's linked site page URL.
                    readOnly: true
                    type: string
                type:
                    # @review
                    description:
                        The navigation menu item's type.
                    readOnly: true
                    type: string
                url:
                    # @review
                    description:
                        The navigation menu item's linked URL.
                    type: string
                useCustomName:
                    type: boolean
        OpenGraphSettings:
            # @review
            description:
                Represents settings related with Open Graph protocol.
            properties:
                description:
                    # @review
                    description:
                        The Open Graph's description.
                    type: string
                description_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized Open Graph's descriptions.
                    type: object
                image:
                    allOf:
                        - $ref: "#/components/schemas/ContentDocument"
                    # @review
                    description:
                        The Open Graph's image.
                title:
                    # @review
                    description:
                        The Open Graph's title.
                    type: string
                title_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized Open Graph's titles.
                    type: object
            type: object
        PageCollectionDefinition:
            # @review
            description:
                Represents a definition of a Page Collection.
            properties:
                collectionConfig:
                    properties:
                        collectionReference:
                            # @review
                            description:
                                The page collection's reference.
                            oneOf:
                                - $ref: "#/components/schemas/ClassNameReference"
                                - $ref: "#/components/schemas/ClassPKReference"
                        collectionType:
                            # @review
                            description:
                                The page collection's type (Collection, CollectionProvider).
                            enum: [Collection, CollectionProvider]
                            type: string
                    required:
                        - collectionReference
                        - collectionType
                    type: object
                collectionViewports:
                    # @review
                    description:
                        A list of viewports of the page collection.
                    items:
                        $ref: "#/components/schemas/CollectionViewport"
                    type: array
                displayAllItems:
                    # @review
                    description:
                        Whether to show all items when pagination is disabled.
                    type: boolean
                displayAllPages:
                    # @review
                    description:
                        Whether to show all pages when pagination is enabled.
                    type: boolean
                fragmentStyle:
                    allOf:
                        - $ref: "#/components/schemas/FragmentStyle"
                    # @review
                    description:
                        The fragment style of the page collection.
                fragmentViewports:
                    # @review
                    description:
                        The fragment viewports of the page collection.
                    items:
                        $ref: "#/components/schemas/FragmentViewport"
                    type: array
                listItemStyle:
                    # @review
                    description:
                        The style of a list of items in the page collection.
                    type: string
                listStyle:
                    # @review
                    description:
                        The style of a list in the page collection.
                    type: string
                numberOfColumns:
                    # @review
                    description:
                        The number of columns in the page collection.
                    type: integer
                numberOfItems:
                    # @review
                    description:
                        The maximum number of items to display in the page collection when pagination is disabled.
                    type: integer
                numberOfItemsPerPage:
                    # @review
                    description:
                        The number of items per page in the page collection.
                    type: integer
                numberOfPages:
                    # @review
                    description:
                        The maximum number of pages to show when pagination is enabled.
                    type: integer
                paginationType:
                    # @review
                    description:
                        The type of pagination.
                    enum: [
                        None,
                        Numeric,
                        # "Deprecated as of Cavanaugh (7.4.x), replaced by Numeric"
                        Regular,
                        Simple]
                    type: string
                showAllItems:
                    deprecated: true
                    # @review
                    description:
                        Whether to show all items when pagination is enabled. Deprecated as of Cavanaugh (7.4.x),
                        replaced by displayAllPages
                    type: boolean
                templateKey:
                    # @review
                    description:
                        The page collection's template key.
                    type: string
            type: object
        PageCollectionItemDefinition:
            # @review
            description:
                Represents a definition of a Page Collection Item.
            properties:
                collectionItemConfig:
                    # @review
                    description:
                        The page collection item's configuration.
                    type: object
            type: object
        PageColumnDefinition:
            # @review
            description:
                Represents a definition of a Page Column.
            properties:
                columnViewportConfig:
                    deprecated: true
                    description:
                        "Deprecated as of Athanasius (7.3.x), replaced by columnViewports"
                    properties:
                        landscapeMobile:
                            properties:
                                size:
                                    maximum: 12
                                    minimum: 1
                                    type: integer
                            type: object
                        portraitMobile:
                            properties:
                                size:
                                    maximum: 12
                                    minimum: 1
                                    type: integer
                            type: object
                        tablet:
                            properties:
                                size:
                                    maximum: 12
                                    minimum: 1
                                    type: integer
                            type: object
                    type: object
                columnViewports:
                    # @review
                    description:
                        A list of column viewports of the page column definition.
                    items:
                        $ref: "#/components/schemas/ColumnViewport"
                    type: array
                size:
                    # @review
                    description:
                        The page column's size.
                    maximum: 12
                    minimum: 1
                    type: integer
            type: object
        PageDefinition:
            # @review
            description:
                Represent a definition of a Page.
            properties:
                pageElement:
                    allOf:
                        - $ref: "#/components/schemas/PageElement"
                    # @review
                    description:
                        The page's page element.
                settings:
                    allOf:
                        - $ref: "#/components/schemas/Settings"
                    # @review
                    description:
                        The page's settings.
                version:
                    # @review
                    description:
                        The version of the JSON generated by page definition.
                    format: double
                    type: number
            type: object
        PageDropZoneDefinition:
            # @review
            description:
                Represent a definition of a Page drop zone.
            properties:
                fragmentSettings:
                    # @review
                    description:
                        The page drop zone's allowed or unallowed fragments.
                    oneOf:
                        - $ref: "#/components/schemas/FragmentSettingsAllowed"
                        - $ref: "#/components/schemas/FragmentSettingsUnallowed"
            type: object
        PageElement:
            # @review
            description:
                Represents a Page element.
            properties:
                definition:
                    # @review
                    description:
                        The page element's definition.
                    oneOf:
                        - $ref: "#/components/schemas/PageCollectionDefinition"
                        - $ref: "#/components/schemas/PageCollectionItemDefinition"
                        - $ref: "#/components/schemas/PageColumnDefinition"
                        - $ref: "#/components/schemas/PageDropZoneDefinition"
                        - $ref: "#/components/schemas/PageFormDefinition"
                        - $ref: "#/components/schemas/PageFragmentInstanceDefinition"
                        - $ref: "#/components/schemas/PageRootDefinition"
                        - $ref: "#/components/schemas/PageRowDefinition"
                        - $ref: "#/components/schemas/PageSectionDefinition"
                        - $ref: "#/components/schemas/PageWidgetInstanceDefinition"
                pageElements:
                    # @review
                    description:
                        A list of the page elements this page element has.
                    items:
                        $ref: "#/components/schemas/PageElement"
                    type: array
                type:
                    # @review
                    description:
                        The page element's type (collection, collection item, column, drop zone, form, fragment,
                        fragment drop zone, root, row, section or widget).
                    enum: [Collection, CollectionItem, Column, DropZone, Form, Fragment, FragmentDropZone, Root, Row, Section,
                        Widget]
                    type: string
        PageFormDefinition:
            # @review
            description:
                Represent a definition of a Page form.
            properties:
                formConfig:
                    # @review
                    description:
                        The page form's configuration.
                    properties:
                        formReference:
                            # @review
                            description:
                                The form reference.
                            oneOf:
                                - $ref: "#/components/schemas/ClassTypeReference"
                                - $ref: "#/components/schemas/ContextReference"
                    type: object
                fragmentStyle:
                    allOf:
                        - $ref: "#/components/schemas/FragmentStyle"
                    # @review
                    description:
                        The fragment style of a Page form.
                fragmentViewports:
                    # @review
                    description:
                        A list of fragment viewports of a Page form.
                    items:
                        $ref: "#/components/schemas/FragmentViewport"
                    type: array
                indexed:
                    # @review
                    description:
                        A flag that indicates whether the page fragment instance is indexed or not.
                    type: boolean
            type: object
        PageFragmentInstanceDefinition:
            # @review
            description:
                Represents a definition of a Page Fragment Instance.
            properties:
                fragment:
                    allOf:
                        - $ref: "#/components/schemas/Fragment"
                    # @review
                    description:
                        The fragment of the page fragment instance.
                fragmentConfig:
                    additionalProperties:
                        type: object
                    # @review
                    description:
                        The page fragment instance's configuration.
                    type: object
                fragmentFields:
                    # @review
                    description:
                        The fragment fields of the page fragment instance.
                    items:
                        $ref: "#/components/schemas/FragmentField"
                    type: array
                fragmentStyle:
                    allOf:
                        - $ref: "#/components/schemas/FragmentStyle"
                    # @review
                    description:
                        The fragment style of the page fragment instance.
                fragmentViewports:
                    # @review
                    description:
                        A list of fragment viewports of the page fragment instance.
                    items:
                        $ref: "#/components/schemas/FragmentViewport"
                    type: array
                indexed:
                    # @review
                    description:
                        A flag that indicates whether the page fragment instance is indexed or not.
                    type: boolean
                widgetInstances:
                    # @review
                    description:
                        A list of widget instances of the page fragment instance.
                    items:
                        $ref: "#/components/schemas/WidgetInstance"
                    type: array
            type: object
        PageRootDefinition:
            # @review
            description:
                Represents a definition of a Root Page.
            type: object
        PageRowDefinition:
            # @review
            description:
                Represents a definition of a Page row.
            properties:
                fragmentStyle:
                    allOf:
                        - $ref: "#/components/schemas/FragmentStyle"
                    # @review
                    description:
                        The fragment style of a Page row.
                fragmentViewports:
                    # @review
                    description:
                        A list of fragment viewports of a Page row.
                    items:
                        $ref: "#/components/schemas/FragmentViewport"
                    type: array
                gutters:
                    # @review
                    description:
                        A flag that indicates whether the page row has gutters.
                    type: boolean
                indexed:
                    # @review
                    description:
                        A flag that indicates whether the page row is indexed or not.
                    type: boolean
                modulesPerRow:
                    # @review
                    description:
                        The page row's modules per row.
                    type: integer
                numberOfColumns:
                    # @review
                    description:
                        The page row's number of columns.
                    type: integer
                reverseOrder:
                    # @review
                    description:
                        A flag that indicates whether the page row has reverse order.
                    type: boolean
                rowViewportConfig:
                    deprecated: true
                    description:
                        "Deprecated as of Athanasius (7.3.x), replaced by rowViewports"
                    properties:
                        landscapeMobile:
                            properties:
                                modulesPerRow:
                                    type: integer
                                reverseOrder:
                                    type: boolean
                                verticalAlignment:
                                    type: string
                            type: object
                        portraitMobile:
                            properties:
                                modulesPerRow:
                                    type: integer
                                reverseOrder:
                                    type: boolean
                                verticalAlignment:
                                    type: string
                            type: object
                        tablet:
                            properties:
                                modulesPerRow:
                                    type: integer
                                reverseOrder:
                                    type: boolean
                                verticalAlignment:
                                    type: string
                            type: object
                    type: object
                rowViewports:
                    # @review
                    description:
                        A list of viewports of the page row.
                    items:
                        $ref: "#/components/schemas/RowViewport"
                    type: array
                verticalAlignment:
                    # @review
                    description:
                        The vertical aligment property of the page row.
                    type: string
            type: object
        PageSectionDefinition:
            # @review
            description:
                Represents a definition of a Page section.
            properties:
                backgroundColor:
                    deprecated: true
                    type: string
                backgroundFragmentImage:
                    allOf:
                        - $ref: "#/components/schemas/FragmentImage"
                    # @review
                    description:
                        The background fragment image of the page section.
                backgroundImage:
                    deprecated: true
                    description:
                        "Deprecated as of Athanasius (7.3.x), replaced by backgroundFragmentImage"
                    properties:
                        description:
                            oneOf:
                                - $ref: "#/components/schemas/FragmentInlineValue"
                        title:
                            oneOf:
                                - $ref: "#/components/schemas/FragmentInlineValue"
                        url:
                            oneOf:
                                - $ref: "#/components/schemas/FragmentInlineValue"
                                - $ref: "#/components/schemas/FragmentMappedValue"
                    type: object
                fragmentLink:
                    allOf:
                        - $ref: "#/components/schemas/FragmentLink"
                    # @review
                    description:
                        The fragment link of the page section.
                fragmentStyle:
                    allOf:
                        - $ref: "#/components/schemas/FragmentStyle"
                    # @review
                    description:
                        The fragment style of the page section.
                fragmentViewports:
                    # @review
                    description:
                        A list of fragment viewports of the page section.
                    items:
                        $ref: "#/components/schemas/FragmentViewport"
                    type: array
                htmlProperties:
                    # @review
                    description:
                        The page section's html properties
                    properties:
                        htmlTag:
                            enum: [Article, Aside, Div, Footer, Header, Main, Nav, Section]
                            type: string
                    type: object
                indexed:
                    # @review
                    description:
                        A flag that indicates whether the page section is indexed or not.
                    type: boolean
                layout:
                    # @review
                    description:
                        the page section's layout.
                    properties:
                        align:
                            deprecated: true
                            enum: [Baseline, Center, End, None, Start, Stretch]
                            type: string
                        borderColor:
                            deprecated: true
                            type: string
                        borderRadius:
                            deprecated: true
                            enum: [Circle, Large, None, Pill, Regular]
                            type: string
                        borderWidth:
                            deprecated: true
                            type: integer
                        containerType:
                            # @review
                            description:
                                The container's type (fixed or fluid).
                            enum: [Fixed, Fluid]
                            type: string
                        contentDisplay:
                            deprecated: true
                            enum: [Block, FlexColumn, FlexRow]
                            type: string
                        flexWrap:
                            enum: [NoWrap, Wrap, WrapReverse]
                            type: string
                        justify:
                            deprecated: true
                            enum: [Center, End, None, SpaceAround, SpaceBetween, Start]
                            type: string
                        marginBottom:
                            deprecated: true
                            type: integer
                        marginLeft:
                            deprecated: true
                            type: integer
                        marginRight:
                            deprecated: true
                            type: integer
                        marginTop:
                            deprecated: true
                            type: integer
                        opacity:
                            deprecated: true
                            type: integer
                        paddingBottom:
                            deprecated: true
                            type: integer
                        paddingHorizontal:
                            deprecated: true
                            type: integer
                        paddingLeft:
                            deprecated: true
                            type: integer
                        paddingRight:
                            deprecated: true
                            type: integer
                        paddingTop:
                            deprecated: true
                            type: integer
                        shadow:
                            deprecated: true
                            enum: [Default, Large, None, Regular, Small]
                            type: string
                        widthType:
                            # @review
                            description:
                                The width's type (fixed or fluid).
                            enum: [Fixed, Fluid]
                            type: string
                    type: object
            type: object
        PageSettings:
            # @review
            description:
                Represents the settings of a Page.
            properties:
                customMetaTags:
                    # @review
                    description:
                        A list of custom metatags this page has.
                    items:
                        $ref: "#/components/schemas/CustomMetaTag"
                    type: array
                hiddenFromNavigation:
                    # @review
                    description:
                        A flag that indicates whether the page is hidden from navigation.
                    type: boolean
                openGraphSettings:
                    allOf:
                        - $ref: "#/components/schemas/OpenGraphSettings"
                    # @review
                    description:
                        The page's Open Graph settings.
                seoSettings:
                    allOf:
                        - $ref: "#/components/schemas/SEOSettings"
                    # @review
                    description:
                        The page's SEO settings.
            type: object
        PageTemplate:
            # @review
            description:
                Represents a Page template.
            properties:
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    # @review
                    description:
                        The page template's creator.
                    readOnly: true
                dateCreated:
                    # @review
                    description:
                        The page template's creation date.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    # @review
                    description:
                        The last time the page template changed.
                    format: date-time
                    readOnly: true
                    type: string
                id:
                    # @review
                    description:
                        The page template's ID.
                    format: int64
                    readOnly: true
                    type: integer
                keywords:
                    # @review
                    description:
                        A list of keywords describing the page template.
                    items:
                        type: string
                    type: array
                name:
                    # @review
                    description:
                        The page template's name.
                    type: string
                pageDefinition:
                    allOf:
                        - $ref: "#/components/schemas/PageDefinition"
                    # @review
                    description:
                        The page template's definition.
                pageTemplateCollection:
                    allOf:
                        - $ref: "#/components/schemas/PageTemplateCollection"
                    # @review
                    description:
                        The page template's collection.
                    readOnly: true
                taxonomyCategoryBriefs:
                    description:
                        The categories associated with this page template.
                    items:
                        $ref: "#/components/schemas/TaxonomyCategoryBrief"
                    readOnly: true
                    type: array
                taxonomyCategoryIds:
                    # @review
                    description:
                        A write-only field that adds `TaxonomyCategory` instances to the page template.
                    items:
                        format: int64
                        type: integer
                    type: array
                    writeOnly: true
                uuid:
                    description:
                        A valid external identifier to reference this page template.
                    readOnly: true
                    type: string
            type: object
        PageTemplateCollection:
            # @review
            description:
                Represents a Page template collection.
            properties:
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    # @review
                    description:
                        The page template collection's creator.
                    readOnly: true
                dateCreated:
                    # @review
                    description:
                        The page template collection's creation date.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    # @review
                    description:
                        The last time the page template collection changed.
                    format: date-time
                    readOnly: true
                    type: string
                description:
                    # @review
                    description:
                        The page template collection's description.
                    type: string
                id:
                    # @review
                    description:
                        The page template collection's ID.
                    format: int64
                    readOnly: true
                    type: integer
                name:
                    # @review
                    description:
                        The page template collection's name.
                    type: string
                uuid:
                    description:
                        A valid external identifier to reference this page template collection.
                    readOnly: true
                    type: string
            type: object
        PageWidgetInstanceDefinition:
            # @review
            description:
                Represents a definition of a Page Widget instance.
            properties:
                fragmentStyle:
                    allOf:
                        - $ref: "#/components/schemas/FragmentStyle"
                    # @review
                    description:
                        The fragment style of the page widget instance.
                fragmentViewports:
                    # @review
                    description:
                        A list of fragment viewports of the page widget instance.
                    items:
                        $ref: "#/components/schemas/FragmentViewport"
                    type: array
                widgetInstance:
                    allOf:
                        - $ref: "#/components/schemas/WidgetInstance"
                    # @review
                    description:
                        The widget instance of the page widget instance.
            type: object
        Rating:
            description:
                Represents a rating/score received by any kind of asset. Properties follow the
                [Rating](https://schema.org/Rating) specification.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    # @review
                    description:
                        Block of actions allowed by the user making the request.
                    readOnly: true
                    type: object
                bestRating:
                    description:
                        The best possible rating an asset can receive (normalized to 1.0 by default).
                    format: double
                    readOnly: true
                    type: number
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    description:
                        The rating's creator.
                    readOnly: true
                dateCreated:
                    description:
                        The rating's creation date.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    description:
                        The last time a field of the rating changed.
                    format: date-time
                    readOnly: true
                    type: string
                id:
                    description:
                        The rating's ID.
                    format: int64
                    readOnly: true
                    type: integer
                ratingValue:
                    description:
                        The rating's value.
                    format: double
                    type: number
                worstRating:
                    description:
                        The worst possible rating an asset can receive (normalized to 0.0 by default).
                    format: double
                    readOnly: true
                    type: number
            type: object
        RelatedContent:
            # @review
            description:
                Represents a relationship between two resources, internally modeled as AssetLink.
            properties:
                contentType:
                    description:
                        The type of the content.
                    readOnly: true
                    type: string
                id:
                    description:
                        The identifier of the resource.
                    format: int64
                    readOnly: true
                    type: integer
                title:
                    description:
                        The title of the content.
                    readOnly: true
                    type: string
        RenderedContent:
            # @review
            description:
                Rendered content, which results from using a template or display page to process the content and return
                HTML.
            properties:
                contentTemplateId:
                    # @review
                    description:
                        The ID of the template or display page used to render the content.
                    readOnly: true
                    type: string
                contentTemplateName:
                    # @review
                    description:
                        The name of the template or display page used to render the content.
                    type: string
                contentTemplateName_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized names of the template or display page used to render the content.
                    type: object
                markedAsDefault:
                    # @review
                    description:
                        Specifies if the template or display page are marked as default to display the content.
                    type: boolean
                renderedContentURL:
                    # @review
                    description:
                        An absolute URL to the rendered content.
                    format: uri
                    type: string
                renderedContentValue:
                    # @review
                    description:
                        Optional field with the rendered content, can be embedded with nestedFields.
                    type: string
            type: object
        RenderedPage:
            # @review
            description:
                A list of rendered pages, which results from using a page template and the appropriate viewport to
                process the page and return HTML.
            properties:
                masterPageId:
                    # @review
                    description:
                        The ID of the master page used to render the content.
                    readOnly: true
                    type: string
                masterPageName:
                    # @review
                    description:
                        The name of the master page used to render the content.
                    type: string
                pageTemplateId:
                    # @review
                    description:
                        The ID of the template used to render the content.
                    readOnly: true
                    type: string
                pageTemplateName:
                    # @review
                    description:
                        The name of the template used to render the content.
                    type: string
                renderedPageURL:
                    # @review
                    description:
                        An absolute URL to the rendered page.
                    type: string
            type: object
        RowViewport:
            # @review
            description:
                Represents a row viewport.
            properties:
                id:
                    # @review
                    description:
                        The row viewport's ID.
                    type: string
                rowViewportDefinition:
                    # @review
                    description:
                        The definition of the row viewport.
                    properties:
                        modulesPerRow:
                            # @review
                            description:
                                The number of modules per row.
                            type: integer
                        reverseOrder:
                            # @review
                            description:
                                A flag that indicates whether the row viewport has reverse order.
                            type: boolean
                        verticalAlignment:
                            # @review
                            description:
                                The vertical aligment property of the row viewport.
                            type: string
                    type: object
            required:
                - id
                - rowViewportDefinition
            type: object
        SEOSettings:
            # @review
            description:
                Represents settings related with SEO.
            properties:
                customCanonicalURL:
                    # @review
                    description:
                        The canonical URL of the page, if it exists.
                    type: string
                customCanonicalURL_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized canonical URL of the page, if it exists.
                    type: object
                description:
                    type: string
                    # @review
                    description:
                        The page's description to be used as summary for search engines.
                description_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized descriptions of the page to be used as summary for search engines.
                    type: object
                htmlTitle:
                    # @review
                    description:
                        The page's main title to be used by search engines.
                    type: string
                htmlTitle_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized main titles of the page to be used by search engines.
                    type: object
                robots:
                    # @review
                    description:
                        A tag telling search engines if and how they should crawl the page.
                    type: string
                robots_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        A localized tag telling search engines if and how they should crawl the page.
                    type: object
                seoKeywords:
                    # @review
                    description:
                        A list of target keywords of the page to be used by search engines.
                    type: string
                seoKeywords_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        A list of localized target keywords of the page to be used by search engines.
                    type: object
            type: object
        Settings:
            # @review
            description:
                Represents the settings of a page.
            properties:
                colorSchemeName:
                    # @review
                    description:
                        The page's color scheme name.
                    type: string
                css:
                    # @review
                    description:
                        The page's CSS.
                    type: string
                javascript:
                    # @review
                    description:
                        The page's JavaScript.
                    type: string
                masterPage:
                    allOf:
                        - $ref: "#/components/schemas/MasterPage"
                    # @review
                    description:
                        The page's master page.
                styleBook:
                    # @review
                    description:
                        The StyleBook that is applied to the page.
                    properties:
                        key:
                            # @review
                            description:
                                The stylebook's key.
                            type: string
                        name:
                            # @review
                            description:
                                The stylebook's name.
                            type: string
                    type: object
                themeName:
                    # @review
                    description:
                        The page's theme name.
                    type: string
                themeSettings:
                    # @review
                    description:
                        The page's theme settings.
                    type: object
            type: object
        SitePage:
            # @review
            description:
                Represents a site page. This is modeled internally as a `Layout`.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    # @review
                    description:
                        Block of actions allowed by the user making the request.
                    readOnly: true
                    type: object
                aggregateRating:
                    allOf:
                        - $ref: "#/components/schemas/AggregateRating"
                    # @review
                    description:
                        The page's average rating.
                    readOnly: true
                availableLanguages:
                    # @review
                    description:
                        The list of languages the page has a translation for.
                    items:
                        type: string
                    readOnly: true
                    type: array
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    # @review
                    description:
                        The page's creator.
                    readOnly: true
                customFields:
                    # @review
                    description:
                        Custom fields associated with the page.
                    items:
                        $ref: "#/components/schemas/CustomField"
                    type: array
                dateCreated:
                    # @review
                    description:
                        The page's creation date.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    # @review
                    description:
                        The last time any field of the page was changed.
                    format: date-time
                    readOnly: true
                    type: string
                datePublished:
                    # @review
                    description:
                        The page's most recent publication date.
                    format: date-time
                    type: string
                experience:
                    allOf:
                        - $ref: "#/components/schemas/Experience"
                    # @review
                    description:
                        Experience of the page that it's being retrieved.
                friendlyUrlPath:
                    # @review
                    description:
                        A relative URL to the page's rendered content.
                    type: string
                friendlyUrlPath_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized relative URLs to the page's rendered content.
                    type: object
                keywords:
                    # @review
                    description:
                        A list of keywords describing the page.
                    items:
                        type: string
                    type: array
                pageDefinition:
                    allOf:
                        - $ref: "#/components/schemas/PageDefinition"
                    # @review
                    description:
                        Optional field with the structure of all the elements of the page. Can be embedded with
                        nestedFields when retrieving the collection of site pages. When retrieving a single site page,
                        it will automatically be included.
                pageSettings:
                    allOf:
                        - $ref: "#/components/schemas/PageSettings"
                    # @review
                    description:
                        Settings of the page, such as SEO or OpenGraph.
                pageType:
                    # @review
                    description:
                        The type of the page.
                    type: string
                renderedPage:
                    allOf:
                        - $ref: "#/components/schemas/RenderedPage"
                    # @review
                    description:
                        Metadata of the page such as it's master page and template.
                siteId:
                    # @review
                    description:
                        The ID of the site to which this page is scoped.
                    format: int64
                    readOnly: true
                    type: integer
                taxonomyCategoryBriefs:
                    # @review
                    description:
                        The categories associated with this page.
                    items:
                        $ref: "#/components/schemas/TaxonomyCategoryBrief"
                    readOnly: true
                    type: array
                taxonomyCategoryIds:
                    # @review
                    description:
                        A write-only field that adds `TaxonomyCategory` instances to the page.
                    items:
                        format: int64
                        type: integer
                    type: array
                    writeOnly: true
                title:
                    # @review
                    description:
                        The page's title.
                    type: string
                title_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized page's titles.
                    type: object
                uuid:
                    # @review
                    description:
                        A valid external identifier to reference this page.
                    readOnly: true
                    type: string
                viewableBy:
                    enum:
                        - Anyone
                        - Members
                        - Owner
                    type: string
                    writeOnly: true
            required:
                - title
            type: object
        StructuredContent:
            description:
                Represents content that has fields and is rendered by a template backed by a `ContentStructure`. This is
                modeled internally as a `JournalArticle`.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    # @review
                    description:
                        Block of actions allowed by the user making the request.
                    readOnly: true
                    type: object
                aggregateRating:
                    allOf:
                        - $ref: "#/components/schemas/AggregateRating"
                    description:
                        The structured content's average rating.
                    readOnly: true
                assetLibraryKey:
                    # @review
                    description:
                        The key of the asset library to which the structure content is scoped.
                    readOnly: true
                    type: string
                availableLanguages:
                    description:
                        The list of languages the structured content has a translation for.
                    items:
                        type: string
                    readOnly: true
                    type: array
                contentFields:
                    description:
                        The list of fields that store the structured content's information.
                    items:
                        $ref: "#/components/schemas/ContentField"
                    type: array
                contentStructureId:
                    description:
                        The ID of the `ContentStructure`.
                    format: int64
                    type: integer
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    description:
                        The structured content's creator.
                    readOnly: true
                customFields:
                    # @review
                    description:
                        A list of the custom fields associated with the structured content.
                    items:
                        $ref: "#/components/schemas/CustomField"
                    type: array
                dateCreated:
                    description:
                        The structured content's creation date.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    description:
                        The last time any field of the structured content was changed.
                    format: date-time
                    readOnly: true
                    type: string
                datePublished:
                    description:
                        The structured content's most recent publication date.
                    format: date-time
                    type: string
                description:
                    description:
                        The structured content's description.
                    type: string
                description_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized structured content's descriptions.
                    type: object
                externalReferenceCode:
                    # @review
                    description:
                        The structured content's external reference code.
                    type: string
                friendlyUrlPath:
                    description:
                        A relative URL to the structured content's rendered content.
                    type: string
                friendlyUrlPath_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized relative URLs to the structured content's rendered content.
                    type: object
                id:
                    description:
                        The structured content's ID.
                    format: int64
                    readOnly: true
                    type: integer
                key:
                    description:
                        An identifier, independent of the database, that can be used to reference the structured
                        content.
                    readOnly: true
                    type: string
                keywords:
                    description:
                        A list of keywords describing the structured content.
                    items:
                        type: string
                    type: array
                numberOfComments:
                    description:
                        The number of comments the structured content has received.
                    readOnly: true
                    type: integer
                priority:
                    # @review
                    description:
                        The structured content's priority.
                    format: double
                    type: number
                relatedContents:
                    # @review
                    description:
                        A list of related contents to this structured content.
                    items:
                        $ref: "#/components/schemas/RelatedContent"
                    readOnly: true
                    type: array
                renderedContents:
                    description:
                        A list of rendered content, which results from using a template to process the content and
                        return HTML.
                    items:
                        $ref: "#/components/schemas/RenderedContent"
                    readOnly: true
                    type: array
                siteId:
                    description:
                        The ID of the site to which this structured content is scoped.
                    format: int64
                    readOnly: true
                    type: integer
                subscribed:
                    # @review
                    description:
                        A flag that indicates whether the user making the requests is subscribed to this structured
                        content.
                    readOnly: true
                    type: boolean
                taxonomyCategoryBriefs:
                    # @review
                    description:
                        The categories associated with this structured content.
                    items:
                        $ref: "#/components/schemas/TaxonomyCategoryBrief"
                    readOnly: true
                    type: array
                taxonomyCategoryIds:
                    # @review
                    description:
                        A write-only field that adds `TaxonomyCategory` instances to the structured content.
                    items:
                        format: int64
                        type: integer
                    type: array
                    writeOnly: true
                title:
                    description:
                        The structured content's main title.
                    type: string
                title_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized structured content's main titles.
                    type: object
                uuid:
                    description:
                        A valid external identifier to reference this structured content.
                    readOnly: true
                    type: string
                viewableBy:
                    description:
                        A write-only property that specifies the structured content's default permissions.
                    enum: [Anyone, Members, Owner]
                    type: string
                    writeOnly: true
            required:
                - contentStructureId
                - title
        StructuredContentFolder:
            description:
                Represents a folder that can be used to organize structured content.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    # @review
                    description:
                        Block of actions allowed by the user making the request.
                    readOnly: true
                    type: object
                assetLibraryKey:
                    # @review
                    description:
                        The key of the asset library to which the folder is scoped.
                    readOnly: true
                    type: string
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    description:
                        The folder's creator.
                    readOnly: true
                customFields:
                    # @review
                    description:
                        A list of the custom fields associated with the folder.
                    items:
                        $ref: "#/components/schemas/CustomField"
                    type: array
                dateCreated:
                    description:
                        The date the folder was created.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    description:
                        The last time any of the folder's fields changed.
                    format: date-time
                    readOnly: true
                    type: string
                description:
                    description:
                        The folder's description.
                    type: string
                id:
                    description:
                        The folder's ID.
                    format: int64
                    readOnly: true
                    type: integer
                name:
                    description:
                        The folder's name.
                    type: string
                numberOfStructuredContentFolders:
                    description:
                        The number of structured content folders inside this folder.
                    readOnly: true
                    type: integer
                numberOfStructuredContents:
                    description:
                        The number of structured content objects inside this folder.
                    readOnly: true
                    type: integer
                parentStructuredContentFolderId:
                    # @review
                    description:
                        The ID of the folder's parent, if it exists.
                    format: int64
                    type: integer
                siteId:
                    description:
                        The ID of the site to which this folder is scoped.
                    format: int64
                    readOnly: true
                    type: integer
                subscribed:
                    # @review
                    description:
                        A flag that indicates whether the user making the requests is subscribed to this folder.
                    readOnly: true
                    type: boolean
                viewableBy:
                    description:
                        A write-only property that specifies the folder's default permissions.
                    enum: [Anyone, Members, Owner]
                    type: string
                    writeOnly: true
            required:
                - name
            type: object
        TaxonomyCategoryBrief:
            properties:
                embeddedTaxonomyCategory:
                    # @review
                    description:
                        Optional field with the embedded taxonomy category, can be embedded with nestedFields
                    readOnly: true
                    type: object
                taxonomyCategoryId:
                    description:
                        The category's ID. This can be used to retrieve more information in the `TaxonomyCategory` API.
                    format: int64
                    readOnly: true
                    type: integer
                taxonomyCategoryName:
                    description:
                        The category's name.
                    readOnly: true
                    type: string
                taxonomyCategoryName_i18n:
                    additionalProperties:
                        type: string
                    # @review
                    description:
                        The localized category's names.
                    readOnly: true
                    type: object
            type: object
        WidgetInstance:
            # @review
            description:
                Represents a Widget Instance.
            properties:
                widgetConfig:
                    additionalProperties:
                        type: object
                    type: object
                widgetInstanceId:
                    # @review
                    description:
                        The widget instance's ID.
                    type: string
                widgetName:
                    # @review
                    description:
                        The widget instance's name.
                    type: string
                widgetPermissions:
                    # @review
                    description:
                        The widget instance's permissions.
                    items:
                        properties:
                            actionKeys:
                                # @review
                                description:
                                    The keys of the actions the role has permission for.
                                items:
                                    type: string
                                type: array
                            roleKey:
                                # @review
                                description:
                                    The role's key.
                                type: string
                        type: object
                    type: array
            type: object
        WikiNode:
            # @review
            description:
                Represents a wiki node that can be used to organize wiki pages.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    # @review
                    description:
                        Block of actions allowed by the user making the request.
                    readOnly: true
                    type: object
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    description:
                        The wiki node's creator.
                    readOnly: true
                dateCreated:
                    description:
                        The date the wiki node was created.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    description:
                        The last time any of the wiki node's fields changed.
                    format: date-time
                    readOnly: true
                    type: string
                description:
                    description:
                        The wiki node's description.
                    type: string
                externalReferenceCode:
                    description:
                        The wiki node's external reference code.
                    type: string
                id:
                    description:
                        The wiki node's ID.
                    format: int64
                    readOnly: true
                    type: integer
                name:
                    description:
                        The wiki node's name.
                    type: string
                numberOfWikiPages:
                    description:
                        The number of child wiki page on this wiki node.
                    readOnly: true
                    type: integer
                siteId:
                    description:
                        The ID of the site to which this wiki node is scoped.
                    format: int64
                    readOnly: true
                    type: integer
                subscribed:
                    # @review
                    description:
                        A flag that indicates whether the user making the requests is subscribed to this wiki node.
                    readOnly: true
                    type: boolean
                viewableBy:
                    description:
                        A write-only property that specifies the default permissions.
                    enum: [Anyone, Members, Owner]
                    type: string
                    writeOnly: true
            type: object
        WikiPage:
            # @review
            description:
                Represents a wiki page.
            properties:
                actions:
                    additionalProperties:
                        additionalProperties:
                            type: string
                        type: object
                    # @review
                    description:
                        Block of actions allowed by the user making the request.
                    readOnly: true
                    type: object
                aggregateRating:
                    allOf:
                        - $ref: "#/components/schemas/AggregateRating"
                    description:
                        The blog post's average rating.
                    readOnly: true
                content:
                    description:
                        The wiki page's content.
                    type: string
                creator:
                    allOf:
                        - $ref: "#/components/schemas/Creator"
                    description:
                        The wiki page's creator.
                    readOnly: true
                customFields:
                    # @review
                    description:
                        A list of the custom fields associated with the wiki page.
                    items:
                        $ref: "#/components/schemas/CustomField"
                    type: array
                dateCreated:
                    description:
                        The date the wiki page was created.
                    format: date-time
                    readOnly: true
                    type: string
                dateModified:
                    description:
                        The last time any of the wiki page's fields changed.
                    format: date-time
                    readOnly: true
                    type: string
                description:
                    description:
                        The wiki page's description.
                    type: string
                encodingFormat:
                    description:
                        The wiki page's media format (e.g., HTML, BBCode, etc.).
                    type: string
                externalReferenceCode:
                    description:
                        The wiki page's external reference code.
                    type: string
                headline:
                    description:
                        The wiki page's main title.
                    type: string
                id:
                    description:
                        The wiki page's ID.
                    format: int64
                    readOnly: true
                    type: integer
                keywords:
                    description:
                        A list of keywords describing the blog post.
                    items:
                        type: string
                    type: array
                numberOfAttachments:
                    description:
                        The wiki page's number attachments.
                    readOnly: true
                    type: integer
                numberOfWikiPages:
                    description:
                        The number of child wiki page on this wiki page.
                    readOnly: true
                    type: integer
                parentWikiPageId:
                    # @review
                    description:
                        The ID of the wiki page's parent, if it exists.
                    format: int64
                    type: integer
                relatedContents:
                    # @review
                    description:
                        A list of related contents to this wiki page.
                    items:
                        $ref: "#/components/schemas/RelatedContent"
                    readOnly: true
                    type: array
                siteId:
                    description:
                        The ID of the site to which this wiki page is scoped.
                    format: int64
                    readOnly: true
                    type: integer
                subscribed:
                    # @review
                    description:
                        A flag that indicates whether the user making the requests is subscribed to this wiki page.
                    readOnly: true
                    type: boolean
                taxonomyCategoryBriefs:
                    # @review
                    description:
                        The categories associated with this wiki page.
                    items:
                        $ref: "#/components/schemas/TaxonomyCategoryBrief"
                    readOnly: true
                    type: array
                taxonomyCategoryIds:
                    # @review
                    description:
                        A write-only field that adds `TaxonomyCategory` instances to the wiki page.
                    items:
                        format: int64
                        type: integer
                    type: array
                    writeOnly: true
                viewableBy:
                    description:
                        A write-only property that specifies the default permissions.
                    enum: [Anyone, Members, Owner]
                    type: string
                    writeOnly: true
                wikiNodeId:
                    # @review
                    description:
                        The ID of the wiki node to which the wiki page belongs.
                    format: int64
                    type: integer
            required:
                - encodingFormat
                - headline
            type: object
        WikiPageAttachment:
            # @review
            description:
                A binary file attached to a wiki page.
            properties:
                contentUrl:
                    description:
                        The file's relative URL.
                    readOnly: true
                    type: string
                contentValue:
                    # @review
                    description:
                        Optional field with the content of the document in Base64, can be embedded with nestedFields.
                    readOnly: true
                    type: string
                encodingFormat:
                    description:
                        The file's media format (e.g., application/pdf, etc.).
                    readOnly: true
                    type: string
                fileExtension:
                    description:
                        The file's extension.
                    readOnly: true
                    type: string
                id:
                    description:
                        The file's ID.
                    format: int64
                    readOnly: true
                    type: integer
                sizeInBytes:
                    description:
                        The file's size in bytes.
                    format: int64
                    readOnly: true
                    type: integer
                title:
                    description:
                        The file's title.
                    type: string
            type: object
info:
    description:
        "A Java client JAR is available for use with the group ID 'com.liferay', artifact ID
        'com.liferay.headless.delivery.client', and version '4.0.27'."
    license:
        name: "Apache 2.0"
        url: "http://www.apache.org/licenses/LICENSE-2.0.html"
    title: "Headless Delivery"
    version: v1.0
openapi: 3.0.1
paths:
    "/asset-libraries/{assetLibraryId}/content-elements":
        get:
            operationId: getAssetLibraryContentElementsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentElement"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentElement"
                                type: array
            tags: ["ContentElement"]
    "/asset-libraries/{assetLibraryId}/content-sets/by-key/{key}/content-set-elements":
        get:
            operationId: getAssetLibraryContentSetByKeyContentSetElementsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: key
                  required: true
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentSetElement"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentSetElement"
                                type: array
            tags: ["ContentSetElement"]
    "/asset-libraries/{assetLibraryId}/content-sets/by-uuid/{uuid}/content-set-elements":
        get:
            operationId: getAssetLibraryContentSetByUuidContentSetElementsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: uuid
                  required: true
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentSetElement"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentSetElement"
                                type: array
            tags: ["ContentSetElement"]
    "/asset-libraries/{assetLibraryId}/content-structures":
        get:
            operationId: getAssetLibraryContentStructuresPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentStructure"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentStructure"
                                type: array
            tags: ["ContentStructure"]
    "/asset-libraries/{assetLibraryId}/content-structures/permissions":
        get:
            operationId: getAssetLibraryContentStructurePermissionsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["ContentStructure"]
        put:
            operationId: putAssetLibraryContentStructurePermissionsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["ContentStructure"]
    "/asset-libraries/{assetLibraryId}/content-templates":
        get:
            operationId: getAssetLibraryContentTemplatesPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentTemplate"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentTemplate"
                                type: array
            tags: ["ContentTemplate"]
    "/asset-libraries/{assetLibraryId}/document-folders":
        get:
            operationId: getAssetLibraryDocumentFoldersPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: flatten
                  schema:
                      type: boolean
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/DocumentFolder"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/DocumentFolder"
                                type: array
            tags: ["DocumentFolder"]
        post:
            operationId: postAssetLibraryDocumentFolder
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/DocumentFolder"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/DocumentFolder"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/DocumentFolder"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/DocumentFolder"
            tags: ["DocumentFolder"]
    "/asset-libraries/{assetLibraryId}/document-folders/permissions":
        get:
            operationId: getAssetLibraryDocumentFolderPermissionsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["DocumentFolder"]
        put:
            operationId: putAssetLibraryDocumentFolderPermissionsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["DocumentFolder"]
    "/asset-libraries/{assetLibraryId}/documents":
        get:
            operationId: getAssetLibraryDocumentsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: flatten
                  schema:
                      type: boolean
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Document"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Document"
                                type: array
            tags: ["Document"]
        post:
            operationId: postAssetLibraryDocument
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            properties:
                                document:
                                    $ref: "#/components/schemas/Document"
                                file:
                                    format: binary
                                    type: string
                            type: object
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Document"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Document"
            tags: ["Document"]
    "/asset-libraries/{assetLibraryId}/documents/permissions":
        get:
            operationId: getAssetLibraryDocumentPermissionsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Document"]
        put:
            operationId: putAssetLibraryDocumentPermissionsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Document"]
    "/asset-libraries/{assetLibraryId}/languages":
        get:
            # @review
            description:
                Retrieves the asset libraries languages.
            operationId: getAssetLibraryLanguagesPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Language"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Language"
                                type: array
            tags: ["Language"]
    "/asset-libraries/{assetLibraryId}/structured-content-folders":
        get:
            operationId: getAssetLibraryStructuredContentFoldersPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: flatten
                  schema:
                      type: boolean
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/StructuredContentFolder"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/StructuredContentFolder"
                                type: array
            tags: ["StructuredContentFolder"]
        post:
            operationId: postAssetLibraryStructuredContentFolder
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/StructuredContentFolder"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/StructuredContentFolder"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StructuredContentFolder"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/StructuredContentFolder"
            tags: ["StructuredContentFolder"]
    "/asset-libraries/{assetLibraryId}/structured-content-folders/permissions":
        get:
            operationId: getAssetLibraryStructuredContentFolderPermissionsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContentFolder"]
        put:
            operationId: putAssetLibraryStructuredContentFolderPermissionsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContentFolder"]
    "/asset-libraries/{assetLibraryId}/structured-contents":
        get:
            operationId: getAssetLibraryStructuredContentsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: flatten
                  schema:
                      type: boolean
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
                - in: header
                  name: Accept-Language
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/StructuredContent"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/StructuredContent"
                                type: array
            tags: ["StructuredContent"]
        post:
            operationId: postAssetLibraryStructuredContent
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: header
                  name: Accept-Language
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/StructuredContent"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/StructuredContent"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
            tags: ["StructuredContent"]
    "/asset-libraries/{assetLibraryId}/structured-contents/permissions":
        get:
            operationId: getAssetLibraryStructuredContentPermissionsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContent"]
        put:
            operationId: putAssetLibraryStructuredContentPermissionsPage
            parameters:
                - in: path
                  name: assetLibraryId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContent"]
    "/blog-posting-images/{blogPostingImageId}":
        delete:
            description:
                Deletes the blog post's image.
            operationId: deleteBlogPostingImage
            parameters:
                - in: path
                  name: blogPostingImageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["BlogPostingImage"]
        get:
            description:
                Retrieves the blog post's image. The binary image is returned as a relative URL to the image itself.
            operationId: getBlogPostingImage
            parameters:
                - in: path
                  name: blogPostingImageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BlogPostingImage"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/BlogPostingImage"
            tags: ["BlogPostingImage"]
    "/blog-postings/{blogPostingId}":
        delete:
            description:
                Deletes the blog post and returns a 204 if the operation succeeds.
            operationId: deleteBlogPosting
            parameters:
                - in: path
                  name: blogPostingId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["BlogPosting"]
        get:
            description:
                Retrieves the blog post.
            operationId: getBlogPosting
            parameters:
                - in: path
                  name: blogPostingId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BlogPosting"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/BlogPosting"
            tags: ["BlogPosting"]
        patch:
            description:
                Updates the blog post using only the fields received in the request body. Any other fields are left
                untouched. Returns the updated blog post.
            operationId: patchBlogPosting
            parameters:
                - in: path
                  name: blogPostingId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BlogPosting"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/BlogPosting"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BlogPosting"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/BlogPosting"
            tags: ["BlogPosting"]
        put:
            description:
                Replaces the blog post with the information sent in the request body. Any missing fields are deleted,
                unless they are required.
            operationId: putBlogPosting
            parameters:
                - in: path
                  name: blogPostingId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BlogPosting"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/BlogPosting"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BlogPosting"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/BlogPosting"
            tags: ["BlogPosting"]
    "/blog-postings/{blogPostingId}/comments":
        get:
            description:
                Retrieves the blog post's comments in a list. Results can be paginated, filtered, searched, and sorted.
            operationId: getBlogPostingCommentsPage
            parameters:
                - in: path
                  name: blogPostingId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Comment"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Comment"
                                type: array
            tags: ["Comment"]
        post:
            description:
                Creates a new comment on the blog post.
            operationId: postBlogPostingComment
            parameters:
                - in: path
                  name: blogPostingId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Comment"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Comment"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Comment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Comment"
            tags: ["Comment"]
    "/blog-postings/{blogPostingId}/my-rating":
        delete:
            description:
                Deletes the blog post rating of the user who authenticated the request.
            operationId: deleteBlogPostingMyRating
            parameters:
                - in: path
                  name: blogPostingId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["BlogPosting"]
        get:
            description:
                Retrieves the blog post rating of the user who authenticated the request.
            operationId: getBlogPostingMyRating
            parameters:
                - in: path
                  name: blogPostingId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Rating"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Rating"
            tags: ["BlogPosting"]
        post:
            description:
                Creates a new blog post rating by the user who authenticated the request.
            operationId: postBlogPostingMyRating
            parameters:
                - in: path
                  name: blogPostingId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Rating"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Rating"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Rating"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Rating"
            tags: ["BlogPosting"]
        put:
            description:
                Replaces an existing blog post rating by the user who authenticated the request.
            operationId: putBlogPostingMyRating
            parameters:
                - in: path
                  name: blogPostingId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Rating"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Rating"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Rating"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Rating"
            tags: ["BlogPosting"]
    "/blog-postings/{blogPostingId}/permissions":
        get:
            operationId: getBlogPostingPermissionsPage
            parameters:
                - in: path
                  name: blogPostingId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["BlogPosting"]
        put:
            operationId: putBlogPostingPermissionsPage
            parameters:
                - in: path
                  name: blogPostingId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["BlogPosting"]
    "/blog-postings/{blogPostingId}/rendered-content-by-display-page/{displayPageKey}":
        get:
            description:
                Retrieves the blog post's rendered display page
            operationId: getBlogPostingRenderedContentByDisplayPageDisplayPageKey
            parameters:
                - in: path
                  name: blogPostingId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: displayPageKey
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        text/html:
                            schema:
                                type: string
            tags: ["BlogPosting"]
    "/comments/{commentId}":
        delete:
            description:
                Deletes the comment and returns a 204 if the operation succeeded.
            operationId: deleteComment
            parameters:
                - in: path
                  name: commentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Comment"]
        get:
            description:
                Retrieves the comment.
            operationId: getComment
            parameters:
                - in: path
                  name: commentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Comment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Comment"
            tags: ["Comment"]
        put:
            description:
                Replaces the comment with the information sent in the request body. Any missing fields are deleted,
                unless they are required.
            operationId: putComment
            parameters:
                - in: path
                  name: commentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Comment"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Comment"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Comment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Comment"
            tags: ["Comment"]
    "/comments/{parentCommentId}/comments":
        get:
            description:
                Retrieves the parent comment's child comments. Results can be paginated, filtered, searched, and sorted.
            operationId: getCommentCommentsPage
            parameters:
                - in: path
                  name: parentCommentId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Comment"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Comment"
                                type: array
            tags: ["Comment"]
        post:
            description:
                Creates a new child comment of the existing comment.
            operationId: postCommentComment
            parameters:
                - in: path
                  name: parentCommentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Comment"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Comment"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Comment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Comment"
            tags: ["Comment"]
    "/content-sets/{contentSetId}/content-set-elements":
        get:
            # @review
            description:
                "Retrieves the content set's elements (e.g., structured content, blogs, etc.). Results can be paginated.
                The set of available headers are: Accept-Language (string), Host (string), User-Agent (string),
                X-Browser (string), X-Cookies (collection string), X-Device-Brand (string), X-Device-Model (string),
                X-Device-Screen-Resolution-Height (double), X-Device-Screen-Resolution-Width (double),
                X-Last-Sign-In-Date-Time (date time) and X-Signed-In (boolean). Local date will be always present in the
                request."
            operationId: getContentSetContentSetElementsPage
            parameters:
                - in: path
                  name: contentSetId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentSetElement"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentSetElement"
                                type: array
            tags: ["ContentSetElement"]
    "/content-structures/{contentStructureId}":
        get:
            description:
                Retrieves the content structure.
            operationId: getContentStructure
            parameters:
                - in: path
                  name: contentStructureId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ContentStructure"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/ContentStructure"
            tags: ["ContentStructure"]
    "/content-structures/{contentStructureId}/permissions":
        get:
            operationId: getContentStructurePermissionsPage
            parameters:
                - in: path
                  name: contentStructureId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["ContentStructure"]
        put:
            operationId: putContentStructurePermissionsPage
            parameters:
                - in: path
                  name: contentStructureId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["ContentStructure"]
    "/content-structures/{contentStructureId}/structured-contents":
        get:
            description:
                Retrieves a list of the content structure's structured content. Results can be paginated, filtered,
                searched, and sorted.
            operationId: getContentStructureStructuredContentsPage
            parameters:
                - in: path
                  name: contentStructureId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
                - in: header
                  name: Accept-Language
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/StructuredContent"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/StructuredContent"
                                type: array
            tags: ["StructuredContent"]
    "/document-folders/{documentFolderId}":
        delete:
            description:
                Deletes the document folder and returns a 204 if the operation succeeds.
            operationId: deleteDocumentFolder
            parameters:
                - in: path
                  name: documentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["DocumentFolder"]
        get:
            description:
                Retrieves the document folder.
            operationId: getDocumentFolder
            parameters:
                - in: path
                  name: documentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/DocumentFolder"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/DocumentFolder"
            tags: ["DocumentFolder"]
        patch:
            description:
                Updates only the fields received in the request body. Any other fields are left untouched.
            operationId: patchDocumentFolder
            parameters:
                - in: path
                  name: documentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/DocumentFolder"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/DocumentFolder"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/DocumentFolder"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/DocumentFolder"
            tags: ["DocumentFolder"]
        put:
            description:
                Replaces the document folder with the information sent in the request body. Any missing fields are
                deleted, unless they are required.
            operationId: putDocumentFolder
            parameters:
                - in: path
                  name: documentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/DocumentFolder"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/DocumentFolder"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/DocumentFolder"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/DocumentFolder"
            tags: ["DocumentFolder"]
    "/document-folders/{documentFolderId}/documents":
        get:
            description:
                Retrieves the folder's documents. Results can be paginated, filtered, searched, and sorted.
            operationId: getDocumentFolderDocumentsPage
            parameters:
                - in: path
                  name: documentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: flatten
                  schema:
                      type: boolean
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Document"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Document"
                                type: array
            tags: ["Document"]
        post:
            description:
                Creates a new document inside the folder identified by `documentFolderId`. The request body must be
                `multipart/form-data` with two parts, the file's bytes (`file`), and an optional JSON string
                (`document`) with the metadata.
            operationId: postDocumentFolderDocument
            parameters:
                - in: path
                  name: documentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            properties:
                                document:
                                    $ref: "#/components/schemas/Document"
                                file:
                                    format: binary
                                    type: string
                            type: object
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Document"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Document"
            tags: ["Document"]
    "/document-folders/{documentFolderId}/permissions":
        get:
            operationId: getDocumentFolderPermissionsPage
            parameters:
                - in: path
                  name: documentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["DocumentFolder"]
        put:
            operationId: putDocumentFolderPermissionsPage
            parameters:
                - in: path
                  name: documentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["DocumentFolder"]
    "/document-folders/{documentFolderId}/subscribe":
        put:
            operationId: putDocumentFolderSubscribe
            parameters:
                - in: path
                  name: documentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["DocumentFolder"]
    "/document-folders/{documentFolderId}/unsubscribe":
        put:
            operationId: putDocumentFolderUnsubscribe
            parameters:
                - in: path
                  name: documentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["DocumentFolder"]
    "/document-folders/{parentDocumentFolderId}/document-folders":
        get:
            description:
                Retrieves the folder's subfolders. Results can be paginated, filtered, searched, and sorted.
            operationId: getDocumentFolderDocumentFoldersPage
            parameters:
                - in: path
                  name: parentDocumentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: flatten
                  schema:
                      type: boolean
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/DocumentFolder"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/DocumentFolder"
                                type: array
            tags: ["DocumentFolder"]
        post:
            description:
                Creates a new folder in a folder identified by `parentDocumentFolderId`.
            operationId: postDocumentFolderDocumentFolder
            parameters:
                - in: path
                  name: parentDocumentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/DocumentFolder"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/DocumentFolder"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/DocumentFolder"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/DocumentFolder"
            tags: ["DocumentFolder"]
    "/documents/{documentId}":
        delete:
            description:
                Deletes the document and returns a 204 if the operation succeeds.
            operationId: deleteDocument
            parameters:
                - in: path
                  name: documentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Document"]
        get:
            description:
                Retrieves the document.
            operationId: getDocument
            parameters:
                - in: path
                  name: documentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Document"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Document"
            tags: ["Document"]
        patch:
            description:
                Updates only the fields received in the request body, leaving any other fields untouched. The request
                body must be `multipart/form-data` with two parts, the file's bytes (`file`), and an optional JSON
                string (`document`) with the metadata.
            operationId: patchDocument
            parameters:
                - in: path
                  name: documentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            properties:
                                document:
                                    $ref: "#/components/schemas/Document"
                                file:
                                    format: binary
                                    type: string
                            type: object
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Document"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Document"
            tags: ["Document"]
        put:
            description:
                Replaces the document with the information sent in the request body. Any missing fields are deleted,
                unless they are required. The request body must be `multipart/form-data` with two parts, the file's
                bytes (`file`), and an optional JSON string (`document`) with the metadata.
            operationId: putDocument
            parameters:
                - in: path
                  name: documentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            properties:
                                document:
                                    $ref: "#/components/schemas/Document"
                                file:
                                    format: binary
                                    type: string
                            type: object
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Document"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Document"
            tags: ["Document"]
    "/documents/{documentId}/comments":
        get:
            description:
                Retrieves the document's comments. Results can be paginated, filtered, searched, and sorted.
            operationId: getDocumentCommentsPage
            parameters:
                - in: path
                  name: documentId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Comment"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Comment"
                                type: array
            tags: ["Comment"]
        post:
            description:
                Creates a new comment on the document.
            operationId: postDocumentComment
            parameters:
                - in: path
                  name: documentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Comment"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Comment"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Comment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Comment"
            tags: ["Comment"]
    "/documents/{documentId}/my-rating":
        delete:
            description:
                Deletes the document's rating and returns a 204 if the operation succeeded.
            operationId: deleteDocumentMyRating
            parameters:
                - in: path
                  name: documentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Document"]
        get:
            description:
                Retrieves the document's rating.
            operationId: getDocumentMyRating
            parameters:
                - in: path
                  name: documentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Rating"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Rating"
            tags: ["Document"]
        post:
            description:
                Creates a new rating for the document, by the user who authenticated the request.
            operationId: postDocumentMyRating
            parameters:
                - in: path
                  name: documentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Rating"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Rating"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Rating"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Rating"
            tags: ["Document"]
        put:
            description:
                Replaces the rating with the information sent in the request body. Any missing fields are deleted,
                unless they are required.
            operationId: putDocumentMyRating
            parameters:
                - in: path
                  name: documentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Rating"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Rating"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Rating"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Rating"
            tags: ["Document"]
    "/documents/{documentId}/permissions":
        get:
            operationId: getDocumentPermissionsPage
            parameters:
                - in: path
                  name: documentId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Document"]
        put:
            operationId: putDocumentPermissionsPage
            parameters:
                - in: path
                  name: documentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Document"]
    "/documents/{documentId}/rendered-content-by-display-page/{displayPageKey}":
        get:
            description:
                Retrieves the document's rendered display page
            operationId: getDocumentRenderedContentByDisplayPageDisplayPageKey
            parameters:
                - in: path
                  name: documentId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: displayPageKey
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        text/html:
                            schema:
                                type: string
            tags: ["Document"]
    "/knowledge-base-articles/{knowledgeBaseArticleId}":
        delete:
            description:
                Deletes the knowledge base article and returns a 204 if the operation succeeds.
            operationId: deleteKnowledgeBaseArticle
            parameters:
                - in: path
                  name: knowledgeBaseArticleId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["KnowledgeBaseArticle"]
        get:
            description:
                Retrieves the knowledge base article.
            operationId: getKnowledgeBaseArticle
            parameters:
                - in: path
                  name: knowledgeBaseArticleId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseArticle"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseArticle"
            tags: ["KnowledgeBaseArticle"]
        patch:
            description:
                Updates only the fields received in the request body, leaving any other fields untouched.
            operationId: patchKnowledgeBaseArticle
            parameters:
                - in: path
                  name: knowledgeBaseArticleId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseArticle"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseArticle"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseArticle"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseArticle"
            tags: ["KnowledgeBaseArticle"]
        put:
            description:
                Replaces the knowledge base article with the information sent in the request body. Any missing fields
                are deleted, unless they are required.
            operationId: putKnowledgeBaseArticle
            parameters:
                - in: path
                  name: knowledgeBaseArticleId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseArticle"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseArticle"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseArticle"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseArticle"
            tags: ["KnowledgeBaseArticle"]
    "/knowledge-base-articles/{knowledgeBaseArticleId}/knowledge-base-attachments":
        get:
            description:
                Retrieves the knowledge base article's attachments.
            operationId: getKnowledgeBaseArticleKnowledgeBaseAttachmentsPage
            parameters:
                - in: path
                  name: knowledgeBaseArticleId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/KnowledgeBaseAttachment"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/KnowledgeBaseAttachment"
                                type: array
            tags: ["KnowledgeBaseAttachment"]
        post:
            description:
                Creates a new attachment for an existing knowledge base article. The request body must be
                `multipart/form-data` with two parts, a `file` part with the file's bytes, and an optional JSON string
                (`knowledgeBaseAttachment`) with the metadata.
            operationId: postKnowledgeBaseArticleKnowledgeBaseAttachment
            parameters:
                - in: path
                  name: knowledgeBaseArticleId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            properties:
                                file:
                                    format: binary
                                    type: string
                                knowledgeBaseAttachment:
                                    $ref: "#/components/schemas/KnowledgeBaseAttachment"
                            type: object
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseAttachment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseAttachment"
            tags: ["KnowledgeBaseAttachment"]
    "/knowledge-base-articles/{knowledgeBaseArticleId}/my-rating":
        delete:
            description:
                Deletes the knowledge base article's rating and returns a 204 if the operation succeeds.
            operationId: deleteKnowledgeBaseArticleMyRating
            parameters:
                - in: path
                  name: knowledgeBaseArticleId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["KnowledgeBaseArticle"]
        get:
            description:
                Retrieves the knowledge base article's rating.
            operationId: getKnowledgeBaseArticleMyRating
            parameters:
                - in: path
                  name: knowledgeBaseArticleId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Rating"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Rating"
            tags: ["KnowledgeBaseArticle"]
        post:
            description:
                Creates a rating for the knowledge base article.
            operationId: postKnowledgeBaseArticleMyRating
            parameters:
                - in: path
                  name: knowledgeBaseArticleId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Rating"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Rating"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Rating"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Rating"
            tags: ["KnowledgeBaseArticle"]
        put:
            description:
                Replaces the rating with the information sent in the request body. Any missing fields are deleted,
                unless they are required.
            operationId: putKnowledgeBaseArticleMyRating
            parameters:
                - in: path
                  name: knowledgeBaseArticleId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Rating"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Rating"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Rating"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Rating"
            tags: ["KnowledgeBaseArticle"]
    "/knowledge-base-articles/{knowledgeBaseArticleId}/permissions":
        get:
            operationId: getKnowledgeBaseArticlePermissionsPage
            parameters:
                - in: path
                  name: knowledgeBaseArticleId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["KnowledgeBaseArticle"]
        put:
            operationId: putKnowledgeBaseArticlePermissionsPage
            parameters:
                - in: path
                  name: knowledgeBaseArticleId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["KnowledgeBaseArticle"]
    "/knowledge-base-articles/{knowledgeBaseArticleId}/subscribe":
        put:
            operationId: putKnowledgeBaseArticleSubscribe
            parameters:
                - in: path
                  name: knowledgeBaseArticleId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["KnowledgeBaseArticle"]
    "/knowledge-base-articles/{knowledgeBaseArticleId}/unsubscribe":
        put:
            operationId: putKnowledgeBaseArticleUnsubscribe
            parameters:
                - in: path
                  name: knowledgeBaseArticleId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["KnowledgeBaseArticle"]
    "/knowledge-base-articles/{parentKnowledgeBaseArticleId}/knowledge-base-articles":
        get:
            description:
                Retrieves the parent knowledge base article's child knowledge base articles. Results can be paginated,
                filtered, searched, and sorted.
            operationId: getKnowledgeBaseArticleKnowledgeBaseArticlesPage
            parameters:
                - in: path
                  name: parentKnowledgeBaseArticleId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: flatten
                  schema:
                      type: boolean
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/KnowledgeBaseArticle"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/KnowledgeBaseArticle"
                                type: array
            tags: ["KnowledgeBaseArticle"]
        post:
            description:
                Creates a child knowledge base article of the knowledge base article identified by
                `parentKnowledgeBaseArticleId`.
            operationId: postKnowledgeBaseArticleKnowledgeBaseArticle
            parameters:
                - in: path
                  name: parentKnowledgeBaseArticleId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseArticle"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseArticle"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseArticle"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseArticle"
            tags: ["KnowledgeBaseArticle"]
    "/knowledge-base-attachments/{knowledgeBaseAttachmentId}":
        delete:
            description:
                Deletes the knowledge base file attachment and returns a 204 if the operation succeeds.
            operationId: deleteKnowledgeBaseAttachment
            parameters:
                - in: path
                  name: knowledgeBaseAttachmentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["KnowledgeBaseAttachment"]
        get:
            description:
                Retrieves the knowledge base attachment.
            operationId: getKnowledgeBaseAttachment
            parameters:
                - in: path
                  name: knowledgeBaseAttachmentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseAttachment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseAttachment"
            tags: ["KnowledgeBaseAttachment"]
    "/knowledge-base-folders/{knowledgeBaseFolderId}":
        delete:
            description:
                Deletes the knowledge base folder and returns a 204 if the operation succeeds.
            operationId: deleteKnowledgeBaseFolder
            parameters:
                - in: path
                  name: knowledgeBaseFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["KnowledgeBaseFolder"]
        get:
            description:
                Retrieves the knowledge base folder.
            operationId: getKnowledgeBaseFolder
            parameters:
                - in: path
                  name: knowledgeBaseFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseFolder"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseFolder"
            tags: ["KnowledgeBaseFolder"]
        patch:
            description:
                Updates only the fields received in the request body, leaving any other fields untouched.
            operationId: patchKnowledgeBaseFolder
            parameters:
                - in: path
                  name: knowledgeBaseFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseFolder"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseFolder"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseFolder"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseFolder"
            tags: ["KnowledgeBaseFolder"]
        put:
            description:
                Replaces the knowledge base folder with the information sent in the request body. Any missing fields are
                deleted, unless they are required.
            operationId: putKnowledgeBaseFolder
            parameters:
                - in: path
                  name: knowledgeBaseFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseFolder"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseFolder"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseFolder"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseFolder"
            tags: ["KnowledgeBaseFolder"]
    "/knowledge-base-folders/{knowledgeBaseFolderId}/knowledge-base-articles":
        get:
            description:
                Retrieves the folder's knowledge base articles. Results can be paginated, filtered, searched, flattened,
                and sorted.
            operationId: getKnowledgeBaseFolderKnowledgeBaseArticlesPage
            parameters:
                - in: path
                  name: knowledgeBaseFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: flatten
                  schema:
                      type: boolean
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/KnowledgeBaseArticle"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/KnowledgeBaseArticle"
                                type: array
            tags: ["KnowledgeBaseArticle"]
        post:
            description:
                Creates a new knowledge base article in the folder.
            operationId: postKnowledgeBaseFolderKnowledgeBaseArticle
            parameters:
                - in: path
                  name: knowledgeBaseFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseArticle"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseArticle"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseArticle"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseArticle"
            tags: ["KnowledgeBaseArticle"]
    "/knowledge-base-folders/{knowledgeBaseFolderId}/permissions":
        get:
            operationId: getKnowledgeBaseFolderPermissionsPage
            parameters:
                - in: path
                  name: knowledgeBaseFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["KnowledgeBaseFolder"]
        put:
            operationId: putKnowledgeBaseFolderPermissionsPage
            parameters:
                - in: path
                  name: knowledgeBaseFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["KnowledgeBaseFolder"]
    "/knowledge-base-folders/{parentKnowledgeBaseFolderId}/knowledge-base-folders":
        get:
            description:
                Retrieves the knowledge base folder's subfolders.
            operationId: getKnowledgeBaseFolderKnowledgeBaseFoldersPage
            parameters:
                - in: path
                  name: parentKnowledgeBaseFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/KnowledgeBaseFolder"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/KnowledgeBaseFolder"
                                type: array
            tags: ["KnowledgeBaseFolder"]
        post:
            description:
                Creates a knowledge base folder inside the parent folder.
            operationId: postKnowledgeBaseFolderKnowledgeBaseFolder
            parameters:
                - in: path
                  name: parentKnowledgeBaseFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseFolder"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseFolder"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseFolder"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseFolder"
            tags: ["KnowledgeBaseFolder"]
    "/message-board-attachments/{messageBoardAttachmentId}":
        delete:
            description:
                Deletes the message board attachment and returns a 204 if the operation succeeds.
            operationId: deleteMessageBoardAttachment
            parameters:
                - in: path
                  name: messageBoardAttachmentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardAttachment"]
        get:
            description:
                Retrieves the message board attachment.
            operationId: getMessageBoardAttachment
            parameters:
                - in: path
                  name: messageBoardAttachmentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardAttachment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardAttachment"
            tags: ["MessageBoardAttachment"]
    "/message-board-messages/{messageBoardMessageId}":
        delete:
            description:
                Deletes the message board message and returns a 204 if the operation succeeds.
            operationId: deleteMessageBoardMessage
            parameters:
                - in: path
                  name: messageBoardMessageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardMessage"]
        get:
            description:
                Retrieves the message board message.
            operationId: getMessageBoardMessage
            parameters:
                - in: path
                  name: messageBoardMessageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardMessage"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardMessage"
            tags: ["MessageBoardMessage"]
        patch:
            description:
                Updates only the fields received in the request body, leaving any other fields untouched.
            operationId: patchMessageBoardMessage
            parameters:
                - in: path
                  name: messageBoardMessageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/MessageBoardMessage"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/MessageBoardMessage"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardMessage"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardMessage"
            tags: ["MessageBoardMessage"]
        put:
            description:
                Replaces the message board message with the information sent in the request body. Any missing fields are
                deleted, unless they are required.
            operationId: putMessageBoardMessage
            parameters:
                - in: path
                  name: messageBoardMessageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/MessageBoardMessage"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/MessageBoardMessage"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardMessage"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardMessage"
            tags: ["MessageBoardMessage"]
    "/message-board-messages/{messageBoardMessageId}/message-board-attachments":
        get:
            description:
                Retrieves the message board message's attachments.
            operationId: getMessageBoardMessageMessageBoardAttachmentsPage
            parameters:
                - in: path
                  name: messageBoardMessageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardAttachment"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardAttachment"
                                type: array
            tags: ["MessageBoardAttachment"]
        post:
            description:
                Creates an attachment for the message board message. The request body must be `multipart/form-data` with
                two parts, the file's bytes (`file`), and an optional JSON string (`MessageBoardAttachment`) with the
                metadata.
            operationId: postMessageBoardMessageMessageBoardAttachment
            parameters:
                - in: path
                  name: messageBoardMessageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            properties:
                                MessageBoardAttachment:
                                    $ref: "#/components/schemas/MessageBoardAttachment"
                                file:
                                    format: binary
                                    type: string
                            type: object
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardAttachment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardAttachment"
            tags: ["MessageBoardAttachment"]
    "/message-board-messages/{messageBoardMessageId}/my-rating":
        delete:
            description:
                Deletes the message board message's rating and returns a 204 if the operation succeeds.
            operationId: deleteMessageBoardMessageMyRating
            parameters:
                - in: path
                  name: messageBoardMessageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardMessage"]
        get:
            description:
                Retrieves the message board message's rating.
            operationId: getMessageBoardMessageMyRating
            parameters:
                - in: path
                  name: messageBoardMessageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Rating"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Rating"
            tags: ["MessageBoardMessage"]
        post:
            description:
                Creates a rating for the message board message.
            operationId: postMessageBoardMessageMyRating
            parameters:
                - in: path
                  name: messageBoardMessageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Rating"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Rating"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Rating"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Rating"
            tags: ["MessageBoardMessage"]
        put:
            description:
                Replaces the rating with the information sent in the request body. Any missing fields are deleted,
                unless they are required.
            operationId: putMessageBoardMessageMyRating
            parameters:
                - in: path
                  name: messageBoardMessageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Rating"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Rating"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Rating"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Rating"
            tags: ["MessageBoardMessage"]
    "/message-board-messages/{messageBoardMessageId}/permissions":
        get:
            operationId: getMessageBoardMessagePermissionsPage
            parameters:
                - in: path
                  name: messageBoardMessageId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardMessage"]
        put:
            operationId: putMessageBoardMessagePermissionsPage
            parameters:
                - in: path
                  name: messageBoardMessageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardMessage"]
    "/message-board-messages/{messageBoardMessageId}/subscribe":
        put:
            operationId: putMessageBoardMessageSubscribe
            parameters:
                - in: path
                  name: messageBoardMessageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardMessage"]
    "/message-board-messages/{messageBoardMessageId}/unsubscribe":
        put:
            operationId: putMessageBoardMessageUnsubscribe
            parameters:
                - in: path
                  name: messageBoardMessageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardMessage"]
    "/message-board-messages/{parentMessageBoardMessageId}/message-board-messages":
        get:
            description:
                Retrieves the parent message board message's child messages. Results can be paginated, filtered,
                searched, and sorted.
            operationId: getMessageBoardMessageMessageBoardMessagesPage
            parameters:
                - in: path
                  name: parentMessageBoardMessageId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: flatten
                  schema:
                      type: boolean
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardMessage"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardMessage"
                                type: array
            tags: ["MessageBoardMessage"]
        post:
            description:
                Creates a child message board message of the parent message.
            operationId: postMessageBoardMessageMessageBoardMessage
            parameters:
                - in: path
                  name: parentMessageBoardMessageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/MessageBoardMessage"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/MessageBoardMessage"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardMessage"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardMessage"
            tags: ["MessageBoardMessage"]
    "/message-board-sections/{messageBoardSectionId}":
        delete:
            description:
                Deletes the message board section and returns a 204 if the operation succeeds.
            operationId: deleteMessageBoardSection
            parameters:
                - in: path
                  name: messageBoardSectionId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardSection"]
        get:
            description:
                Retrieves the message board section.
            operationId: getMessageBoardSection
            parameters:
                - in: path
                  name: messageBoardSectionId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardSection"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardSection"
            tags: ["MessageBoardSection"]
        patch:
            description:
                Updates only the fields received in the request body, leaving any other fields untouched.
            operationId: patchMessageBoardSection
            parameters:
                - in: path
                  name: messageBoardSectionId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/MessageBoardSection"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/MessageBoardSection"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardSection"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardSection"
            tags: ["MessageBoardSection"]
        put:
            description:
                Replaces the message board section with the information sent in the request body. Any missing fields are
                deleted, unless they are required.
            operationId: putMessageBoardSection
            parameters:
                - in: path
                  name: messageBoardSectionId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/MessageBoardSection"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/MessageBoardSection"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardSection"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardSection"
            tags: ["MessageBoardSection"]
    "/message-board-sections/{messageBoardSectionId}/message-board-threads":
        get:
            description:
                Retrieves the message board section's threads. Results can be paginated, filtered, searched, and sorted.
            operationId: getMessageBoardSectionMessageBoardThreadsPage
            parameters:
                - in: path
                  name: messageBoardSectionId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardThread"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardThread"
                                type: array
            tags: ["MessageBoardThread"]
        post:
            description:
                Creates a new message board thread inside a section.
            operationId: postMessageBoardSectionMessageBoardThread
            parameters:
                - in: path
                  name: messageBoardSectionId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/MessageBoardThread"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/MessageBoardThread"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardThread"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardThread"
            tags: ["MessageBoardThread"]
    "/message-board-sections/{messageBoardSectionId}/permissions":
        get:
            operationId: getMessageBoardSectionPermissionsPage
            parameters:
                - in: path
                  name: messageBoardSectionId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardSection"]
        put:
            operationId: putMessageBoardSectionPermissionsPage
            parameters:
                - in: path
                  name: messageBoardSectionId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardSection"]
    "/message-board-sections/{messageBoardSectionId}/subscribe":
        put:
            operationId: putMessageBoardSectionSubscribe
            parameters:
                - in: path
                  name: messageBoardSectionId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardSection"]
    "/message-board-sections/{messageBoardSectionId}/unsubscribe":
        put:
            operationId: putMessageBoardSectionUnsubscribe
            parameters:
                - in: path
                  name: messageBoardSectionId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardSection"]
    "/message-board-sections/{parentMessageBoardSectionId}/message-board-sections":
        get:
            description:
                Retrieves the parent message board section's subsections. Results can be paginated, filtered, searched,
                and sorted.
            operationId: getMessageBoardSectionMessageBoardSectionsPage
            parameters:
                - in: path
                  name: parentMessageBoardSectionId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardSection"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardSection"
                                type: array
            tags: ["MessageBoardSection"]
        post:
            description:
                Creates a new message board section in the parent section.
            operationId: postMessageBoardSectionMessageBoardSection
            parameters:
                - in: path
                  name: parentMessageBoardSectionId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/MessageBoardSection"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/MessageBoardSection"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardSection"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardSection"
            tags: ["MessageBoardSection"]
    "/message-board-threads/ranked":
        get:
            operationId: getMessageBoardThreadsRankedPage
            parameters:
                - in: query
                  name: dateCreated
                  schema:
                      format: date-time
                      type: string
                - in: query
                  name: dateModified
                  schema:
                      format: date-time
                      type: string
                - in: query
                  name: messageBoardSectionId
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardThread"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardThread"
                                type: array
            tags: ["MessageBoardThread"]
    "/message-board-threads/{messageBoardThreadId}":
        delete:
            description:
                Deletes the message board thread and returns a 204 if the operation succeeds.
            operationId: deleteMessageBoardThread
            parameters:
                - in: path
                  name: messageBoardThreadId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardThread"]
        get:
            description:
                Retrieves the message board thread.
            operationId: getMessageBoardThread
            parameters:
                - in: path
                  name: messageBoardThreadId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardThread"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardThread"
            tags: ["MessageBoardThread"]
        patch:
            description:
                Updates only the fields received in the request body, leaving any other fields untouched.
            operationId: patchMessageBoardThread
            parameters:
                - in: path
                  name: messageBoardThreadId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/MessageBoardThread"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/MessageBoardThread"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardThread"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardThread"
            tags: ["MessageBoardThread"]
        put:
            description:
                Replaces the message board thread with the information sent in the request body. Any missing fields are
                deleted, unless they are required.
            operationId: putMessageBoardThread
            parameters:
                - in: path
                  name: messageBoardThreadId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/MessageBoardThread"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/MessageBoardThread"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardThread"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardThread"
            tags: ["MessageBoardThread"]
    "/message-board-threads/{messageBoardThreadId}/message-board-attachments":
        get:
            description:
                Retrieves the message board thread's attachments.
            operationId: getMessageBoardThreadMessageBoardAttachmentsPage
            parameters:
                - in: path
                  name: messageBoardThreadId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardAttachment"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardAttachment"
                                type: array
            tags: ["MessageBoardAttachment"]
        post:
            description:
                Creates a new attachment for the message board thread. The request body should be `multipart/form-data`
                with two parts, the file's bytes (`file`), and an optional JSON string (`knowledgeBaseAttachment`) with
                the metadata.
            operationId: postMessageBoardThreadMessageBoardAttachment
            parameters:
                - in: path
                  name: messageBoardThreadId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            properties:
                                file:
                                    format: binary
                                    type: string
                                knowledgeBaseAttachment:
                                    $ref: "#/components/schemas/MessageBoardAttachment"
                            type: object
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardAttachment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardAttachment"
            tags: ["MessageBoardAttachment"]
    "/message-board-threads/{messageBoardThreadId}/message-board-messages":
        get:
            description:
                Retrieves the message board thread's messages. Results can be paginated, filtered, searched, and sorted.
            operationId: getMessageBoardThreadMessageBoardMessagesPage
            parameters:
                - in: path
                  name: messageBoardThreadId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardMessage"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardMessage"
                                type: array
            tags: ["MessageBoardMessage"]
        post:
            description:
                Creates a new message in the message board thread.
            operationId: postMessageBoardThreadMessageBoardMessage
            parameters:
                - in: path
                  name: messageBoardThreadId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/MessageBoardMessage"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/MessageBoardMessage"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardMessage"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardMessage"
            tags: ["MessageBoardMessage"]
    "/message-board-threads/{messageBoardThreadId}/my-rating":
        delete:
            description:
                Deletes the message board thread's rating and returns a 204 if the operation succeeds.
            operationId: deleteMessageBoardThreadMyRating
            parameters:
                - in: path
                  name: messageBoardThreadId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardThread"]
        get:
            description:
                Retrieves the message board thread's rating.
            operationId: getMessageBoardThreadMyRating
            parameters:
                - in: path
                  name: messageBoardThreadId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Rating"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Rating"
            tags: ["MessageBoardThread"]
        post:
            description:
                Creates the message board thread's rating.
            operationId: postMessageBoardThreadMyRating
            parameters:
                - in: path
                  name: messageBoardThreadId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Rating"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Rating"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Rating"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Rating"
            tags: ["MessageBoardThread"]
        put:
            description:
                Replaces the rating with the information sent in the request body. Any missing fields are deleted,
                unless they are required.
            operationId: putMessageBoardThreadMyRating
            parameters:
                - in: path
                  name: messageBoardThreadId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Rating"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Rating"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Rating"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Rating"
            tags: ["MessageBoardThread"]
    "/message-board-threads/{messageBoardThreadId}/permissions":
        get:
            operationId: getMessageBoardThreadPermissionsPage
            parameters:
                - in: path
                  name: messageBoardThreadId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardThread"]
        put:
            operationId: putMessageBoardThreadPermissionsPage
            parameters:
                - in: path
                  name: messageBoardThreadId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardThread"]
    "/message-board-threads/{messageBoardThreadId}/subscribe":
        put:
            operationId: putMessageBoardThreadSubscribe
            parameters:
                - in: path
                  name: messageBoardThreadId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardThread"]
    "/message-board-threads/{messageBoardThreadId}/unsubscribe":
        put:
            operationId: putMessageBoardThreadUnsubscribe
            parameters:
                - in: path
                  name: messageBoardThreadId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardThread"]
    "/navigation-menus/{navigationMenuId}":
        delete:
            # @review
            description:
                Deletes the navigation menu and returns a 204 if the operation succeeds
            operationId: deleteNavigationMenu
            parameters:
                - in: path
                  name: navigationMenuId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["NavigationMenu"]
        get:
            operationId: getNavigationMenu
            parameters:
                - in: path
                  name: navigationMenuId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/NavigationMenu"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/NavigationMenu"
            tags: ["NavigationMenu"]
        put:
            # @review
            description:
                Replaces the navigation menu with the information sent in the request body. Any missing fields are
                deleted, unless they are required.
            operationId: putNavigationMenu
            parameters:
                - in: path
                  name: navigationMenuId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/NavigationMenu"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/NavigationMenu"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/NavigationMenu"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/NavigationMenu"
            tags: ["NavigationMenu"]
    "/navigation-menus/{navigationMenuId}/permissions":
        get:
            operationId: getNavigationMenuPermissionsPage
            parameters:
                - in: path
                  name: navigationMenuId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["NavigationMenu"]
        put:
            operationId: putNavigationMenuPermissionsPage
            parameters:
                - in: path
                  name: navigationMenuId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["NavigationMenu"]
    "/sites/{siteId}/blog-posting-images":
        get:
            description:
                Retrieves the site's blog post images. Results can be paginated, filtered, searched, and sorted.
            operationId: getSiteBlogPostingImagesPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/BlogPostingImage"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/BlogPostingImage"
                                type: array
            tags: ["BlogPostingImage"]
        post:
            description:
                Creates a blog post image. The request body must be `multipart/form-data` with two parts, the file's
                bytes (`file`), and an optional JSON string (`blogPostingImage`) with the metadata.
            operationId: postSiteBlogPostingImage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            properties:
                                blogPostingImage:
                                    $ref: "#/components/schemas/BlogPostingImage"
                                file:
                                    format: binary
                                    type: string
                            type: object
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BlogPostingImage"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/BlogPostingImage"
            tags: ["BlogPostingImage"]
    "/sites/{siteId}/blog-postings":
        get:
            description:
                Retrieves the site's blog postings. Results can be paginated, filtered, searched, and sorted.
            operationId: getSiteBlogPostingsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/BlogPosting"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/BlogPosting"
                                type: array
            tags: ["BlogPosting"]
        post:
            description:
                Creates a new blog post.
            operationId: postSiteBlogPosting
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BlogPosting"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/BlogPosting"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BlogPosting"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/BlogPosting"
            tags: ["BlogPosting"]
    "/sites/{siteId}/blog-postings/by-external-reference-code/{blogPostingExternalReferenceCode}/comments/by-external-reference-code/{externalReferenceCode}":
        delete:
            # @review
            description:
                Deletes the blog posting's comment by blog posting's and comment's external reference codes.
            operationId: deleteSiteBlogPostingByExternalReferenceCodeBlogPostingExternalReferenceCodeCommentByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: blogPostingExternalReferenceCode
                  required: true
                  schema:
                      type: string
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Comment"]
        get:
            # @review
            description:
                Retrieves the blog posting's comment by blog posting's and comment's external reference codes.
            operationId: getSiteBlogPostingByExternalReferenceCodeBlogPostingExternalReferenceCodeCommentByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: blogPostingExternalReferenceCode
                  required: true
                  schema:
                      type: string
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Comment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Comment"
            tags: ["Comment"]
        put:
            # @review
            description:
                Updates the blog posting's comment given the blog posting's and comment's external reference codes, or
                creates it if it not exists.
            operationId: putSiteBlogPostingByExternalReferenceCodeBlogPostingExternalReferenceCodeCommentByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: blogPostingExternalReferenceCode
                  required: true
                  schema:
                      type: string
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Comment"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Comment"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Comment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Comment"
            tags: ["Comment"]
    "/sites/{siteId}/blog-postings/by-external-reference-code/{externalReferenceCode}":
        delete:
            # @review
            description:
                Deletes the blog post by external reference code.
            operationId: deleteSiteBlogPostingByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["BlogPosting"]
        get:
            # @review
            description:
                Retrieves the site's blog post by external reference code.
            operationId: getSiteBlogPostingByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BlogPosting"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/BlogPosting"
            tags: ["BlogPosting"]
        put:
            # @review
            description:
                Updates the site's blog post with the given external reference code, or creates it if it not exists.
            operationId: putSiteBlogPostingByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BlogPosting"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/BlogPosting"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BlogPosting"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/BlogPosting"
            tags: ["BlogPosting"]
    "/sites/{siteId}/blog-postings/permissions":
        get:
            operationId: getSiteBlogPostingPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["BlogPosting"]
        put:
            operationId: putSiteBlogPostingPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["BlogPosting"]
    "/sites/{siteId}/blog-postings/subscribe":
        put:
            operationId: putSiteBlogPostingSubscribe
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["BlogPosting"]
    "/sites/{siteId}/blog-postings/unsubscribe":
        put:
            operationId: putSiteBlogPostingUnsubscribe
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["BlogPosting"]
    "/sites/{siteId}/comments/by-external-reference-code/{parentCommentExternalReferenceCode}/comments/by-external-reference-code/{externalReferenceCode}":
        delete:
            # @review
            description:
                Deletes the parent comment's comment by its parent comment's and comment's external reference codes.
            operationId: deleteSiteCommentByExternalReferenceCodeParentCommentExternalReferenceCodeCommentByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: parentCommentExternalReferenceCode
                  required: true
                  schema:
                      type: string
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Comment"]
        get:
            # @review
            description:
                Retrieves the parent comment's comment by its parent comment's and comment's external reference codes.
            operationId: getSiteCommentByExternalReferenceCodeParentCommentExternalReferenceCodeCommentByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: parentCommentExternalReferenceCode
                  required: true
                  schema:
                      type: string
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Comment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Comment"
            tags: ["Comment"]
        put:
            # @review
            description:
                Updates the parent comment's comment given the parent comment's and comment's external reference codes,
                or creates it if it not exists.
            operationId: putSiteCommentByExternalReferenceCodeParentCommentExternalReferenceCodeCommentByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: parentCommentExternalReferenceCode
                  required: true
                  schema:
                      type: string
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Comment"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Comment"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Comment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Comment"
            tags: ["Comment"]
    "/sites/{siteId}/content-elements":
        get:
            operationId: getSiteContentElementsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentElement"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentElement"
                                type: array
            tags: ["ContentElement"]
    "/sites/{siteId}/content-sets/by-key/{key}/content-set-elements":
        get:
            description:
                Retrieves the content set elements by key. Results can be paginated.
            operationId: getSiteContentSetByKeyContentSetElementsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: key
                  required: true
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentSetElement"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentSetElement"
                                type: array
            tags: ["ContentSetElement"]
    "/sites/{siteId}/content-sets/by-uuid/{uuid}/content-set-elements":
        get:
            description:
                Retrieves the content set elements by UUID. Results can be paginated.
            operationId: getSiteContentSetByUuidContentSetElementsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: uuid
                  required: true
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentSetElement"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentSetElement"
                                type: array
            tags: ["ContentSetElement"]
    "/sites/{siteId}/content-structures":
        get:
            description:
                Retrieves the site's content structures. Results can be paginated, filtered, searched, and sorted.
            operationId: getSiteContentStructuresPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentStructure"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentStructure"
                                type: array
            tags: ["ContentStructure"]
    "/sites/{siteId}/content-structures/permissions":
        get:
            operationId: getSiteContentStructurePermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["ContentStructure"]
        put:
            operationId: putSiteContentStructurePermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["ContentStructure"]
    "/sites/{siteId}/content-templates":
        get:
            operationId: getSiteContentTemplatesPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentTemplate"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/ContentTemplate"
                                type: array
            tags: ["ContentTemplate"]
    "/sites/{siteId}/content-templates/{contentTemplateId}":
        get:
            operationId: getSiteContentTemplate
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: contentTemplateId
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ContentTemplate"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/ContentTemplate"
            tags: ["ContentTemplate"]
    "/sites/{siteId}/document-folders":
        get:
            description:
                Retrieves the site's document folders. Results can be paginated, filtered, searched, flattened, and
                sorted.
            operationId: getSiteDocumentFoldersPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: flatten
                  schema:
                      type: boolean
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/DocumentFolder"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/DocumentFolder"
                                type: array
            tags: ["DocumentFolder"]
        post:
            description:
                Creates a new document folder.
            operationId: postSiteDocumentFolder
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/DocumentFolder"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/DocumentFolder"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/DocumentFolder"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/DocumentFolder"
            tags: ["DocumentFolder"]
    "/sites/{siteId}/document-folders/permissions":
        get:
            operationId: getSiteDocumentFolderPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["DocumentFolder"]
        put:
            operationId: putSiteDocumentFolderPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["DocumentFolder"]
    "/sites/{siteId}/documents":
        get:
            description:
                Retrieves the documents in the site's root folder. Results can be paginated, filtered, searched,
                flattened, and sorted.
            operationId: getSiteDocumentsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: flatten
                  schema:
                      type: boolean
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Document"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Document"
                                type: array
            tags: ["Document"]
        post:
            description:
                Creates a new document. The request body must be `multipart/form-data` with two parts, the file's bytes
                (`file`), and an optional JSON string (`document`) with the metadata.
            operationId: postSiteDocument
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            properties:
                                document:
                                    $ref: "#/components/schemas/Document"
                                file:
                                    format: binary
                                    type: string
                            type: object
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Document"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Document"
            tags: ["Document"]
    "/sites/{siteId}/documents/by-external-reference-code/{documentExternalReferenceCode}/comments/by-external-reference-code/{externalReferenceCode}":
        delete:
            # @review
            description:
                Deletes the document's comment by document's and comment's external reference codes.
            operationId: deleteSiteDocumentByExternalReferenceCodeDocumentExternalReferenceCodeCommentByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: documentExternalReferenceCode
                  required: true
                  schema:
                      type: string
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Comment"]
        get:
            # @review
            description:
                Retrieves the document's comment by document's and comment's external reference codes.
            operationId: getSiteDocumentByExternalReferenceCodeDocumentExternalReferenceCodeCommentByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: documentExternalReferenceCode
                  required: true
                  schema:
                      type: string
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Comment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Comment"
            tags: ["Comment"]
        put:
            # @review
            description:
                Updates the document's comment given the document's and comment's external reference codes, or creates
                it if it not exists.
            operationId: putSiteDocumentByExternalReferenceCodeDocumentExternalReferenceCodeCommentByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: documentExternalReferenceCode
                  required: true
                  schema:
                      type: string
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Comment"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Comment"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Comment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Comment"
            tags: ["Comment"]
    "/sites/{siteId}/documents/by-external-reference-code/{externalReferenceCode}":
        delete:
            # @review
            description:
                Deletes the site's document by external reference code returns a 204 if the operation succeeds.
            operationId: deleteSiteDocumentByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Document"]
        get:
            # @review
            description:
                Retrieves the site's document by external reference code.
            operationId: getSiteDocumentByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Document"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Document"
            tags: ["Document"]
        put:
            # @review
            description:
                Replaces the document by external reference code with the information sent in the request body, or
                replaces it if it not exists. Any missing fields are deleted, unless they are required. The request body
                must be `multipart/form-data` with two parts, the file'sbytes (`file`), and an optional JSON string
                (`document`) with the metadata.
            operationId: putSiteDocumentByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            properties:
                                document:
                                    $ref: "#/components/schemas/Document"
                                file:
                                    format: binary
                                    type: string
                            type: object
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Document"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Document"
            tags: ["Document"]
    "/sites/{siteId}/documents/permissions":
        get:
            operationId: getSiteDocumentPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Document"]
        put:
            operationId: putSiteDocumentPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Document"]
    "/sites/{siteId}/knowledge-base-articles":
        get:
            description:
                Retrieves the site's knowledge base articles. Results can be paginated, filtered, searched, flattened,
                and sorted.
            operationId: getSiteKnowledgeBaseArticlesPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: flatten
                  schema:
                      type: boolean
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/KnowledgeBaseArticle"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/KnowledgeBaseArticle"
                                type: array
            tags: ["KnowledgeBaseArticle"]
        post:
            description:
                Creates a new knowledge base article.
            operationId: postSiteKnowledgeBaseArticle
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseArticle"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseArticle"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseArticle"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseArticle"
            tags: ["KnowledgeBaseArticle"]
    "/sites/{siteId}/knowledge-base-articles/by-external-reference-code/{externalReferenceCode}":
        delete:
            # @review
            description:
                Deletes the knowledge base article by external reference code.
            operationId: deleteSiteKnowledgeBaseArticleByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["KnowledgeBaseArticle"]
        get:
            # @review
            description:
                Retrieves the site's knowledge base article by external reference code.
            operationId: getSiteKnowledgeBaseArticleByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseArticle"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseArticle"
            tags: ["KnowledgeBaseArticle"]
        put:
            # @review
            description:
                Updates the site's knowledge base article with the given external reference code, or creates it if it
                not exists.
            operationId: putSiteKnowledgeBaseArticleByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseArticle"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseArticle"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseArticle"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseArticle"
            tags: ["KnowledgeBaseArticle"]
    "/sites/{siteId}/knowledge-base-articles/permissions":
        get:
            operationId: getSiteKnowledgeBaseArticlePermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["KnowledgeBaseArticle"]
        put:
            operationId: putSiteKnowledgeBaseArticlePermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["KnowledgeBaseArticle"]
    "/sites/{siteId}/knowledge-base-articles/subscribe":
        put:
            operationId: putSiteKnowledgeBaseArticleSubscribe
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["KnowledgeBaseArticle"]
    "/sites/{siteId}/knowledge-base-articles/unsubscribe":
        put:
            operationId: putSiteKnowledgeBaseArticleUnsubscribe
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["KnowledgeBaseArticle"]
    "/sites/{siteId}/knowledge-base-folders":
        get:
            description:
                Retrieves the site's knowledge base folders. Results can be paginated.
            operationId: getSiteKnowledgeBaseFoldersPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/KnowledgeBaseFolder"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/KnowledgeBaseFolder"
                                type: array
            tags: ["KnowledgeBaseFolder"]
        post:
            description:
                Creates a new knowledge base folder.
            operationId: postSiteKnowledgeBaseFolder
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseFolder"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseFolder"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseFolder"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseFolder"
            tags: ["KnowledgeBaseFolder"]
    "/sites/{siteId}/knowledge-base-folders/by-external-reference-code/{externalReferenceCode}":
        delete:
            # @review
            description:
                Deletes the knowledge base folder by external reference code.
            operationId: deleteSiteKnowledgeBaseFolderByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["KnowledgeBaseFolder"]
        get:
            # @review
            description:
                Retrieves the site's knowledge base folder by external reference code.
            operationId: getSiteKnowledgeBaseFolderByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseFolder"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseFolder"
            tags: ["KnowledgeBaseFolder"]
        put:
            # @review
            description:
                Updates the site's knowledge base folder with the given external reference code, or creates it if it not
                exists.
            operationId: putSiteKnowledgeBaseFolderByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseFolder"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/KnowledgeBaseFolder"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseFolder"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/KnowledgeBaseFolder"
            tags: ["KnowledgeBaseFolder"]
    "/sites/{siteId}/knowledge-base-folders/permissions":
        get:
            operationId: getSiteKnowledgeBaseFolderPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["KnowledgeBaseFolder"]
        put:
            operationId: putSiteKnowledgeBaseFolderPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["KnowledgeBaseFolder"]
    "/sites/{siteId}/languages":
        get:
            # @review
            description:
                Retrieves the site's languages.
            operationId: getSiteLanguagesPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Language"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Language"
                                type: array
            tags: ["Language"]
    "/sites/{siteId}/message-board-messages":
        # @review
        get:
            description:
                Retrieves the site's message board messages.
            operationId: getSiteMessageBoardMessagesPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: flatten
                  schema:
                      type: boolean
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardMessage"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardMessage"
                                type: array
            tags: ["MessageBoardMessage"]
    "/sites/{siteId}/message-board-messages/by-external-reference-code/{externalReferenceCode}":
        delete:
            # @review
            description:
                Deletes the site's message board message by external reference code.
            operationId: deleteSiteMessageBoardMessageByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardMessage"]
        get:
            # @review
            description:
                Retrieves the site's message board message by external reference code.
            operationId: getSiteMessageBoardMessageByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardMessage"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardMessage"
            tags: ["MessageBoardMessage"]
        put:
            # @review
            description:
                Updates the site's message board message with the given external reference code, or creates it if it not
                exists.
            operationId: putSiteMessageBoardMessageByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/MessageBoardMessage"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/MessageBoardMessage"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardMessage"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardMessage"
            tags: ["MessageBoardMessage"]
    "/sites/{siteId}/message-board-messages/by-friendly-url-path/{friendlyUrlPath}":
        get:
            operationId: getSiteMessageBoardMessageByFriendlyUrlPath
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: friendlyUrlPath
                  required: true
                  schema:
                      type: string
                - in: header
                  name: Accept-Language
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardMessage"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardMessage"
            tags: ["MessageBoardMessage"]
    "/sites/{siteId}/message-board-messages/permissions":
        get:
            operationId: getSiteMessageBoardMessagePermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardMessage"]
        put:
            operationId: putSiteMessageBoardMessagePermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardMessage"]
    "/sites/{siteId}/message-board-sections":
        get:
            description:
                Retrieves the site's message board sections. Results can be paginated, filtered, searched, flattened,
                and sorted.
            operationId: getSiteMessageBoardSectionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: flatten
                  schema:
                      type: boolean
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardSection"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardSection"
                                type: array
            tags: ["MessageBoardSection"]
        post:
            description:
                Creates a new message board section.
            operationId: postSiteMessageBoardSection
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/MessageBoardSection"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/MessageBoardSection"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardSection"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardSection"
            tags: ["MessageBoardSection"]
    "/sites/{siteId}/message-board-sections/permissions":
        get:
            operationId: getSiteMessageBoardSectionPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardSection"]
        put:
            operationId: putSiteMessageBoardSectionPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardSection"]
    "/sites/{siteId}/message-board-threads":
        get:
            description:
                Retrieves the site's message board threads. Results can be paginated, filtered, searched, flattened, and
                sorted.
            operationId: getSiteMessageBoardThreadsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: flatten
                  schema:
                      type: boolean
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardThread"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MessageBoardThread"
                                type: array
            tags: ["MessageBoardThread"]
        post:
            description:
                Creates a new message board thread.
            operationId: postSiteMessageBoardThread
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/MessageBoardThread"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/MessageBoardThread"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardThread"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardThread"
            tags: ["MessageBoardThread"]
    "/sites/{siteId}/message-board-threads/by-friendly-url-path/{friendlyUrlPath}":
        get:
            operationId: getSiteMessageBoardThreadByFriendlyUrlPath
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: friendlyUrlPath
                  required: true
                  schema:
                      type: string
                - in: header
                  name: Accept-Language
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessageBoardThread"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/MessageBoardThread"
            tags: ["MessageBoardThread"]
    "/sites/{siteId}/message-board-threads/permissions":
        get:
            operationId: getSiteMessageBoardThreadPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardThread"]
        put:
            operationId: putSiteMessageBoardThreadPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["MessageBoardThread"]
    "/sites/{siteId}/navigation-menus":
        get:
            operationId: getSiteNavigationMenusPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/NavigationMenu"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/NavigationMenu"
                                type: array
            tags: ["NavigationMenu"]
        post:
            # @review
            description:
                Creates a new navigation menu.
            operationId: postSiteNavigationMenu
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/NavigationMenu"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/NavigationMenu"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/NavigationMenu"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/NavigationMenu"
            tags: ["NavigationMenu"]
    "/sites/{siteId}/navigation-menus/permissions":
        get:
            operationId: getSiteNavigationMenuPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["NavigationMenu"]
        put:
            operationId: putSiteNavigationMenuPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["NavigationMenu"]
    "/sites/{siteId}/site-pages":
        get:
            # @review
            description:
                Retrieves the public pages of the site
            operationId: getSiteSitePagesPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/SitePage"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/SitePage"
                                type: array
            tags: ["SitePage"]
    "/sites/{siteId}/site-pages/{friendlyUrlPath}":
        get:
            # @review
            description:
                Retrieves a specific public page of a site
            operationId: getSiteSitePage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: friendlyUrlPath
                  required: true
                  schema:
                      type: string
                - in: header
                  name: Accept-Language
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SitePage"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/SitePage"
            tags: ["SitePage"]
    "/sites/{siteId}/site-pages/{friendlyUrlPath}/experiences":
        get:
            # @review
            description:
                Retrieves the experiences of a given Page
            operationId: getSiteSitePagesExperiencesPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: friendlyUrlPath
                  required: true
                  schema:
                      type: string
                - in: header
                  name: Accept-Language
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/SitePage"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/SitePage"
                                type: array
            tags: ["SitePage"]
    "/sites/{siteId}/site-pages/{friendlyUrlPath}/experiences/{experienceKey}":
        get:
            # @review
            description:
                Retrieves a specific public page of a site for a given experience
            operationId: getSiteSitePageExperienceExperienceKey
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: friendlyUrlPath
                  required: true
                  schema:
                      type: string
                - in: path
                  name: experienceKey
                  required: true
                  schema:
                      type: string
                - in: header
                  name: Accept-Language
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SitePage"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/SitePage"
            tags: ["SitePage"]
    "/sites/{siteId}/site-pages/{friendlyUrlPath}/experiences/{experienceKey}/rendered-page":
        get:
            description:
                Retrieves the rendered content of a given public page for a given experience.
            operationId: getSiteSitePageExperienceExperienceKeyRenderedPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: friendlyUrlPath
                  required: true
                  schema:
                      type: string
                - in: path
                  name: experienceKey
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        text/html:
                            schema:
                                type: string
            tags: ["SitePage"]
    "/sites/{siteId}/site-pages/{friendlyUrlPath}/rendered-page":
        get:
            description:
                Retrieves the rendered content of a given public page.
            operationId: getSiteSitePageRenderedPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: friendlyUrlPath
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        text/html:
                            schema:
                                type: string
            tags: ["SitePage"]
    "/sites/{siteId}/structured-content-folders":
        get:
            description:
                Retrieves the site's structured content folders. Results can be paginated, filtered, searched,
                flattened, and sorted.
            operationId: getSiteStructuredContentFoldersPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: flatten
                  schema:
                      type: boolean
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/StructuredContentFolder"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/StructuredContentFolder"
                                type: array
            tags: ["StructuredContentFolder"]
        post:
            description:
                Creates a new structured content folder.
            operationId: postSiteStructuredContentFolder
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/StructuredContentFolder"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/StructuredContentFolder"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StructuredContentFolder"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/StructuredContentFolder"
            tags: ["StructuredContentFolder"]
    "/sites/{siteId}/structured-content-folders/permissions":
        get:
            operationId: getSiteStructuredContentFolderPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContentFolder"]
        put:
            operationId: putSiteStructuredContentFolderPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContentFolder"]
    "/sites/{siteId}/structured-contents":
        get:
            description:
                Retrieves the site's structured content. Results can be paginated, filtered, searched, flattened, and
                sorted.
            operationId: getSiteStructuredContentsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: flatten
                  schema:
                      type: boolean
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
                - in: header
                  name: Accept-Language
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/StructuredContent"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/StructuredContent"
                                type: array
            tags: ["StructuredContent"]
        post:
            description:
                Creates a new structured content.
            operationId: postSiteStructuredContent
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: header
                  name: Accept-Language
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/StructuredContent"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/StructuredContent"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
            tags: ["StructuredContent"]
    "/sites/{siteId}/structured-contents/by-external-reference-code/{externalReferenceCode}":
        delete:
            # @review
            description:
                Deletes the site's structured content by external reference code.
            operationId: deleteSiteStructuredContentByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContent"]
        get:
            # @review
            description:
                Retrieves the site's structured content by external reference code.
            operationId: getSiteStructuredContentByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
            tags: ["StructuredContent"]
        put:
            # @review
            description:
                Updates the site's structured content with the given external reference code, or creates it if it not
                exists.
            operationId: putSiteStructuredContentByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/StructuredContent"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/StructuredContent"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
            tags: ["StructuredContent"]
    "/sites/{siteId}/structured-contents/by-external-reference-code/{structuredContentExternalReferenceCode}/comments/by-external-reference-code/{externalReferenceCode}":
        delete:
            # @review
            description:
                Deletes the structured content's comment by structured content's and comment's external reference codes.
            operationId: deleteSiteStructuredContentByExternalReferenceCodeStructuredContentExternalReferenceCodeCommentByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: structuredContentExternalReferenceCode
                  required: true
                  schema:
                      type: string
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["Comment"]
        get:
            # @review
            description:
                Retrieves the structured content's comment by structured content's and comment's external reference
                codes.
            operationId: getSiteStructuredContentByExternalReferenceCodeStructuredContentExternalReferenceCodeCommentByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: structuredContentExternalReferenceCode
                  required: true
                  schema:
                      type: string
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Comment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Comment"
            tags: ["Comment"]
        put:
            # @review
            description:
                Updates the structured content's comment given the structured content's and comment's external reference
                codes, or creates it if it not exists.
            operationId: putSiteStructuredContentByExternalReferenceCodeStructuredContentExternalReferenceCodeCommentByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: structuredContentExternalReferenceCode
                  required: true
                  schema:
                      type: string
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Comment"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Comment"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Comment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Comment"
            tags: ["Comment"]
    "/sites/{siteId}/structured-contents/by-key/{key}":
        get:
            description:
                Retrieves a structured content by its key (`articleKey`).
            operationId: getSiteStructuredContentByKey
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: key
                  required: true
                  schema:
                      type: string
                - in: header
                  name: Accept-Language
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
            tags: ["StructuredContent"]
    "/sites/{siteId}/structured-contents/by-uuid/{uuid}":
        get:
            description:
                Retrieves a structured content by its UUID.
            operationId: getSiteStructuredContentByUuid
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: uuid
                  required: true
                  schema:
                      type: string
                - in: header
                  name: Accept-Language
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
            tags: ["StructuredContent"]
    "/sites/{siteId}/structured-contents/permissions":
        get:
            operationId: getSiteStructuredContentPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContent"]
        put:
            operationId: putSiteStructuredContentPermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContent"]
    "/sites/{siteId}/wiki-nodes":
        get:
            # @review
            description:
                Retrieves the wiki node's of a site. Results can be paginated, filtered, searched, and sorted.
            operationId: getSiteWikiNodesPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/WikiNode"
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/WikiNode"
            tags: ["WikiNode"]
        post:
            description:
                Creates a new wiki node
            operationId: postSiteWikiNode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/WikiNode"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/WikiNode"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/WikiNode"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/WikiNode"
            tags: ["WikiNode"]
    "/sites/{siteId}/wiki-nodes/by-external-reference-code/{externalReferenceCode}":
        delete:
            # @review
            description:
                Deletes the site's wiki node by external reference code.
            operationId: deleteSiteWikiNodeByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["WikiNode"]
        get:
            # @review
            description:
                Retrieves the site's wiki node by external reference code.
            operationId: getSiteWikiNodeByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/WikiNode"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/WikiNode"
            tags: ["WikiNode"]
        put:
            # @review
            description:
                Updates the site's wiki node with the given external reference code, or creates it if it not exists.
            operationId: putSiteWikiNodeByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/WikiNode"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/WikiNode"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/WikiNode"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/WikiNode"
            tags: ["WikiNode"]
    "/sites/{siteId}/wiki-nodes/permissions":
        get:
            operationId: getSiteWikiNodePermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["WikiNode"]
        put:
            operationId: putSiteWikiNodePermissionsPage
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["WikiNode"]
    "/sites/{siteId}/wiki-pages/by-external-reference-code/{externalReferenceCode}":
        delete:
            # @review
            description:
                Deletes the wiki page by external reference code.
            operationId: deleteSiteWikiPageByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["WikiPage"]
        get:
            # @review
            description:
                Retrieves the wiki page by external reference code
            operationId: getSiteWikiPageByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/WikiPage"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/WikiPage"
            tags: ["WikiPage"]
        put:
            # @review
            description:
                Updates the wiki page with the given external reference code, or creates it if it not exists.
            operationId: putSiteWikiPageByExternalReferenceCode
            parameters:
                - in: path
                  name: siteId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: externalReferenceCode
                  required: true
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/WikiPage"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/WikiPage"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/WikiPage"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/WikiPage"
            tags: ["WikiPage"]
    "/structured-content-folder/{structuredContentFolderId}/permissions":
        get:
            operationId: getStructuredContentFolderPermissionsPage
            parameters:
                - in: path
                  name: structuredContentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContentFolder"]
        put:
            operationId: putStructuredContentFolderPermissionsPage
            parameters:
                - in: path
                  name: structuredContentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContentFolder"]
    "/structured-content-folders/{parentStructuredContentFolderId}/structured-content-folders":
        get:
            description:
                Retrieves the parent structured content folder's subfolders. Results can be paginated, filtered,
                searched, and sorted.
            operationId: getStructuredContentFolderStructuredContentFoldersPage
            parameters:
                - in: path
                  name: parentStructuredContentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/StructuredContentFolder"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/StructuredContentFolder"
                                type: array
            tags: ["StructuredContentFolder"]
        post:
            description:
                Creates a new structured content folder in an existing folder.
            operationId: postStructuredContentFolderStructuredContentFolder
            parameters:
                - in: path
                  name: parentStructuredContentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/StructuredContentFolder"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/StructuredContentFolder"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StructuredContentFolder"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/StructuredContentFolder"
            tags: ["StructuredContentFolder"]
    "/structured-content-folders/{structuredContentFolderId}":
        delete:
            description:
                Deletes the structured content folder and returns a 204 if the operation succeeds.
            operationId: deleteStructuredContentFolder
            parameters:
                - in: path
                  name: structuredContentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContentFolder"]
        get:
            description:
                Retrieves the structured content folder.
            operationId: getStructuredContentFolder
            parameters:
                - in: path
                  name: structuredContentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StructuredContentFolder"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/StructuredContentFolder"
            tags: ["StructuredContentFolder"]
        patch:
            description:
                Updates only the fields received in the request body, leaving any other fields untouched.
            operationId: patchStructuredContentFolder
            parameters:
                - in: path
                  name: structuredContentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/StructuredContentFolder"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/StructuredContentFolder"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StructuredContentFolder"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/StructuredContentFolder"
            tags: ["StructuredContentFolder"]
        put:
            description:
                Replaces the structured content folder with the information sent in the request body. Any missing fields
                are deleted, unless they are required.
            operationId: putStructuredContentFolder
            parameters:
                - in: path
                  name: structuredContentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/StructuredContentFolder"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/StructuredContentFolder"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StructuredContentFolder"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/StructuredContentFolder"
            tags: ["StructuredContentFolder"]
    "/structured-content-folders/{structuredContentFolderId}/structured-contents":
        get:
            description:
                Retrieves the folder's structured content. Results can be paginated, filtered, searched, and sorted.
            operationId: getStructuredContentFolderStructuredContentsPage
            parameters:
                - in: path
                  name: structuredContentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: flatten
                  schema:
                      type: boolean
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
                - in: header
                  name: Accept-Language
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/StructuredContent"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/StructuredContent"
                                type: array
            tags: ["StructuredContent"]
        post:
            description:
                Creates a new structured content in the folder.
            operationId: postStructuredContentFolderStructuredContent
            parameters:
                - in: path
                  name: structuredContentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: header
                  name: Accept-Language
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/StructuredContent"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/StructuredContent"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
            tags: ["StructuredContent"]
    "/structured-content-folders/{structuredContentFolderId}/subscribe":
        put:
            operationId: putStructuredContentFolderSubscribe
            parameters:
                - in: path
                  name: structuredContentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContentFolder"]
    "/structured-content-folders/{structuredContentFolderId}/unsubscribe":
        put:
            operationId: putStructuredContentFolderUnsubscribe
            parameters:
                - in: path
                  name: structuredContentFolderId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContentFolder"]
    "/structured-contents/{structuredContentId}":
        delete:
            description:
                Deletes the structured content and returns a 204 if the operation succeeds.
            operationId: deleteStructuredContent
            parameters:
                - in: path
                  name: structuredContentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContent"]
        get:
            description:
                Retrieves the structured content via its ID.
            operationId: getStructuredContent
            parameters:
                - in: path
                  name: structuredContentId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: header
                  name: Accept-Language
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
            tags: ["StructuredContent"]
        patch:
            description:
                Updates only the fields received in the request body, leaving any other fields untouched.
            operationId: patchStructuredContent
            parameters:
                - in: path
                  name: structuredContentId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: header
                  name: Accept-Language
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/StructuredContent"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/StructuredContent"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
            tags: ["StructuredContent"]
        put:
            description:
                Replaces the structured content with the information sent in the request body. Any missing fields are
                deleted, unless they are required.
            operationId: putStructuredContent
            parameters:
                - in: path
                  name: structuredContentId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: header
                  name: Accept-Language
                  schema:
                      type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/StructuredContent"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/StructuredContent"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/StructuredContent"
            tags: ["StructuredContent"]
    "/structured-contents/{structuredContentId}/comments":
        get:
            description:
                Retrieves the structured content's comments. Results can be paginated, filtered, searched, and sorted.
            operationId: getStructuredContentCommentsPage
            parameters:
                - in: path
                  name: structuredContentId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Comment"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/Comment"
                                type: array
            tags: ["Comment"]
        post:
            description:
                Creates a new comment on the structured content.
            operationId: postStructuredContentComment
            parameters:
                - in: path
                  name: structuredContentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Comment"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Comment"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Comment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Comment"
            tags: ["Comment"]
    "/structured-contents/{structuredContentId}/my-rating":
        delete:
            description:
                Deletes the structured content's rating and returns a 204 if the operation succeeds.
            operationId: deleteStructuredContentMyRating
            parameters:
                - in: path
                  name: structuredContentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContent"]
        get:
            description:
                Retrieves the structured content's rating.
            operationId: getStructuredContentMyRating
            parameters:
                - in: path
                  name: structuredContentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Rating"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Rating"
            tags: ["StructuredContent"]
        post:
            description:
                Create a rating for the structured content.
            operationId: postStructuredContentMyRating
            parameters:
                - in: path
                  name: structuredContentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Rating"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Rating"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Rating"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Rating"
            tags: ["StructuredContent"]
        put:
            description:
                Replaces the rating with the information sent in the request body. Any missing fields are deleted,
                unless they are required.
            operationId: putStructuredContentMyRating
            parameters:
                - in: path
                  name: structuredContentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Rating"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/Rating"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Rating"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/Rating"
            tags: ["StructuredContent"]
    "/structured-contents/{structuredContentId}/permissions":
        get:
            operationId: getStructuredContentPermissionsPage
            parameters:
                - in: path
                  name: structuredContentId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContent"]
        put:
            operationId: putStructuredContentPermissionsPage
            parameters:
                - in: path
                  name: structuredContentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContent"]
    "/structured-contents/{structuredContentId}/rendered-content-by-display-page/{displayPageKey}":
        get:
            description:
                Retrieves the structured content's rendered display page
            operationId: getStructuredContentRenderedContentByDisplayPageDisplayPageKey
            parameters:
                - in: path
                  name: structuredContentId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: displayPageKey
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        text/html:
                            schema:
                                type: string
            tags: ["StructuredContent"]
    "/structured-contents/{structuredContentId}/rendered-content/{contentTemplateId}":
        get:
            description:
                Retrieves the structured content's rendered template (the result of applying the structure's values to a
                template).
            operationId: getStructuredContentRenderedContentContentTemplate
            parameters:
                - in: path
                  name: structuredContentId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: path
                  name: contentTemplateId
                  required: true
                  schema:
                      type: string
            responses:
                200:
                    content:
                        text/html:
                            schema:
                                type: string
            tags: ["StructuredContent"]
    "/structured-contents/{structuredContentId}/subscribe":
        put:
            operationId: putStructuredContentSubscribe
            parameters:
                - in: path
                  name: structuredContentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContent"]
    "/structured-contents/{structuredContentId}/unsubscribe":
        put:
            operationId: putStructuredContentUnsubscribe
            parameters:
                - in: path
                  name: structuredContentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["StructuredContent"]
    "/wiki-nodes/{wikiNodeId}":
        # @review
        delete:
            description:
                Deletes the wiki node and returns a 204 if the operation succeeds.
            operationId: deleteWikiNode
            parameters:
                - in: path
                  name: wikiNodeId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["WikiNode"]
        get:
            description:
                Retrieves the wiki node
            operationId: getWikiNode
            parameters:
                - in: path
                  name: wikiNodeId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/WikiNode"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/WikiNode"
            tags: ["WikiNode"]
        put:
            description:
                Replaces the wiki node with the information sent in the request body. Any missing fields are deleted,
                unless they are required.
            operationId: putWikiNode
            parameters:
                - in: path
                  name: wikiNodeId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/WikiNode"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/WikiNode"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/WikiNode"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/WikiNode"
            tags: ["WikiNode"]
    "/wiki-nodes/{wikiNodeId}/permissions":
        get:
            operationId: getWikiNodePermissionsPage
            parameters:
                - in: path
                  name: wikiNodeId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["WikiNode"]
        put:
            operationId: putWikiNodePermissionsPage
            parameters:
                - in: path
                  name: wikiNodeId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["WikiNode"]
    "/wiki-nodes/{wikiNodeId}/subscribe":
        put:
            operationId: putWikiNodeSubscribe
            parameters:
                - in: path
                  name: wikiNodeId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["WikiNode"]
    "/wiki-nodes/{wikiNodeId}/unsubscribe":
        put:
            operationId: putWikiNodeUnsubscribe
            parameters:
                - in: path
                  name: wikiNodeId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["WikiNode"]
    "/wiki-nodes/{wikiNodeId}/wiki-pages":
        get:
            # @review
            description:
                Retrieves the wiki page's of a node. Results can be paginated, filtered, searched, and sorted.
            operationId: getWikiNodeWikiPagesPage
            parameters:
                - in: path
                  name: wikiNodeId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: aggregationTerms
                  schema:
                      items:
                          type: string
                      type: array
                - in: query
                  name: filter
                  schema:
                      type: string
                - in: query
                  name: page
                  schema:
                      type: integer
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                - in: query
                  name: search
                  schema:
                      type: string
                - in: query
                  name: sort
                  schema:
                      type: string
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/WikiPage"
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/WikiPage"
            tags: ["WikiPage"]
        post:
            description:
                Creates a new wiki page
            operationId: postWikiNodeWikiPage
            parameters:
                - in: path
                  name: wikiNodeId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/WikiPage"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/WikiPage"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/WikiPage"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/WikiPage"
            tags: ["WikiPage"]
    "/wiki-page-attachments/{wikiPageAttachmentId}":
        delete:
            # @review
            description:
                Deletes the wiki page attachment and returns a 204 if the operation succeeds.
            operationId: deleteWikiPageAttachment
            parameters:
                - in: path
                  name: wikiPageAttachmentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["WikiPageAttachment"]
        get:
            description:
                Retrieves the wiki page attachment.
            operationId: getWikiPageAttachment
            parameters:
                - in: path
                  name: wikiPageAttachmentId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/WikiPageAttachment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/WikiPageAttachment"
            tags: ["WikiPageAttachment"]
    "/wiki-pages/{parentWikiPageId}/wiki-pages":
        get:
            # @review
            description:
                Retrieves the child wiki page's of a wiki page.
            operationId: getWikiPageWikiPagesPage
            parameters:
                - in: path
                  name: parentWikiPageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/WikiPage"
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/WikiPage"
            tags: ["WikiPage"]
        post:
            description:
                Creates a child wiki page of the parent wiki page.
            operationId: postWikiPageWikiPage
            parameters:
                - in: path
                  name: parentWikiPageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/WikiPage"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/WikiPage"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/WikiPage"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/WikiPage"
            tags: ["WikiPage"]
    "/wiki-pages/{wikiPageId}":
        # @review
        delete:
            description:
                Deletes the wiki page and returns a 204 if the operation succeeds.
            operationId: deleteWikiPage
            parameters:
                - in: path
                  name: wikiPageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["WikiPage"]
        get:
            description:
                Retrieves the wiki page
            operationId: getWikiPage
            parameters:
                - in: path
                  name: wikiPageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/WikiPage"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/WikiPage"
            tags: ["WikiPage"]
        put:
            description:
                Replaces the wiki page with the information sent in the request body. Any missing fields are deleted,
                unless they are required.
            operationId: putWikiPage
            parameters:
                - in: path
                  name: wikiPageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/WikiPage"
                    application/xml:
                        schema:
                            $ref: "#/components/schemas/WikiPage"
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/WikiPage"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/WikiPage"
            tags: ["WikiPage"]
    "/wiki-pages/{wikiPageId}/permissions":
        get:
            operationId: getWikiPagePermissionsPage
            parameters:
                - in: path
                  name: wikiPageId
                  required: true
                  schema:
                      format: int64
                      type: integer
                - in: query
                  name: roleNames
                  schema:
                      type: string
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["WikiPage"]
        put:
            operationId: putWikiPagePermissionsPage
            parameters:
                - in: path
                  name: wikiPageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["WikiPage"]
    "/wiki-pages/{wikiPageId}/subscribe":
        put:
            operationId: putWikiPageSubscribe
            parameters:
                - in: path
                  name: wikiPageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["WikiPage"]
    "/wiki-pages/{wikiPageId}/unsubscribe":
        put:
            operationId: putWikiPageUnsubscribe
            parameters:
                - in: path
                  name: wikiPageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                204:
                    content:
                        application/json: {}
                        application/xml: {}
            tags: ["WikiPage"]
    "/wiki-pages/{wikiPageId}/wiki-page-attachments":
        get:
            # @review
            description:
                Retrieves the wiki page's attachments.
            operationId: getWikiPageWikiPageAttachmentsPage
            parameters:
                - in: path
                  name: wikiPageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/WikiPageAttachment"
                                type: array
                        application/xml:
                            schema:
                                items:
                                    $ref: "#/components/schemas/WikiPageAttachment"
                                type: array
            tags: ["WikiPageAttachment"]
        post:
            description:
                Creates an attachment for the wiki page. The request body must be `multipart/form-data` with two parts,
                the file's bytes (`file`), and an optional JSON string (`WikiPageAttachment`) with the metadata.
            operationId: postWikiPageWikiPageAttachment
            parameters:
                - in: path
                  name: wikiPageId
                  required: true
                  schema:
                      format: int64
                      type: integer
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            properties:
                                WikiPageAttachment:
                                    $ref: "#/components/schemas/WikiPageAttachment"
                                file:
                                    format: binary
                                    type: string
                            type: object
            responses:
                200:
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/WikiPageAttachment"
                        application/xml:
                            schema:
                                $ref: "#/components/schemas/WikiPageAttachment"
            tags: ["WikiPageAttachment"]