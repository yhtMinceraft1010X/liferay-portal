@component-name = "portal-lima"
definition {

	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "SEO";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Add a site via JSON") {
			JSONGroup.addGroup(groupName = "Test Site Name");
		}

		task ("Add a Page via JSON") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page Name");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This ensures that the user can customize OG tags, also covers LPS-134658."
	@priority = "5"
	@refactordone
	test CanCustomizeMetaTags {
		var portalURL = PropsUtil.get("portal.url");

		var siteId = JSONGroupSetter.setGroupId(groupName = "Test Site Name");

		Navigator.openToGroupPagesPortlet(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			portlet = "Open Graph",
			siteURLKey = "test-site-name");

		OpenGraph.configureOpenGraph(
			customDescription = "This is a custom description",
			customImage = "true",
			customTitle = "This is a custom title",
			pageName = "Test Page Name",
			uploadFileName = "Document_1.jpg");

		Page.viewPreview(
			description = "This is a custom description",
			htmlTitle = "This is a custom title",
			key_imageName = "Document_1.jpg",
			openGraph = "true",
			portalURL = "${portalURL}",
			siteNameURL = "test-site-name");

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-page-name");

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''"og:title" content="This is a custom title","og:description" content="This is a custom description","og:image" content="${portalURL}/documents/${siteId}/0/Document_1.jpg''');
	}

	@description = "This ensures that the user can customize OG tags with escape characters."
	@priority = "4"
	@refactordone
	test CanCustomizeMetaTagsWithEscapeCharacters {
		var portalURL = PropsUtil.get("portal.url");

		Navigator.openToGroupPagesPortlet(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			portlet = "Open Graph",
			siteURLKey = "test-site-name");

		OpenGraph.configureOpenGraph(
			customDescription = '''description@#$%^*()~`1234567890''',
			customTitle = '''@#$%^*()~`1234567890title''');

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-page-name");

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''"og:title" content="@#$%^*()~`1234567890title","og:description" content="description@#$%^*()~`1234567890"''');
	}

	@description = "This ensures that OG tags will not appear when Open Graph is disabled."
	@priority = "5"
	@refactordone
	test CanDisableConfiguration {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "OpenGraph#CanDisableConfiguration";

		var portalURL = PropsUtil.get("portal.url");

		OpenGraph.openToConfigInSystemSettings(portlet = "SEO");

		FormFields.disableCheckbox(fieldName = "Enable Open Graph");

		SystemSettings.saveConfiguration();

		Navigator.openToGroupPagesPortlet(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			portlet = "General",
			siteURLKey = "test-site-name");

		OpenGraph.viewNoTab();

		Site.openToSiteSettingsPages(
			portlet = "Pages",
			siteURLKey = "test-site-name");

		OpenGraph.viewNoTab();

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-page-name");

		OpenGraph.viewNoOpenGraphProperties(ogPropertyList = '''property="og:title",property="og:site_name",property="og:url",property="og:locale"''');
	}

	@description = "This ensures that OG configuration is properly disabled at the site level."
	@priority = "5"
	@refactordone
	test CanDisableConfigurationAtSiteLevel {
		OpenGraph.disableOpenGraphAtSiteLevel(siteURLKey = "test-site-name");

		Navigator.openToGroupPagesPortlet(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			portlet = "General",
			siteURLKey = "test-site-name");

		OpenGraph.viewNoTab();

		JSONGroup.addGroup(groupName = "Test Site Name 2");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name 2",
			layoutName = "Test Page Name 2");

		Navigator.openToGroupPagesPortlet(
			groupName = "Test Site Name 2",
			layoutName = "Test Page Name 2",
			portlet = "Open Graph",
			siteURLKey = "test-site-name-2");

		OpenGraph.viewDefaultConfiguration();
	}

	@description = "This ensures that the user can edit existing OG tags."
	@priority = "5"
	@refactordone
	test CanEditMetaTagCustomizations {
		var portalURL = PropsUtil.get("portal.url");

		var siteId = JSONGroupSetter.setGroupId(groupName = "Test Site Name");

		Navigator.openToGroupPagesPortlet(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			portlet = "Open Graph",
			siteURLKey = "test-site-name");

		OpenGraph.configureOpenGraph(
			customDescription = "This is a custom description",
			customImage = "true",
			customTitle = "This is a custom title",
			pageName = "Test Page Name",
			uploadFileName = "Document_1.jpg");

		OpenGraph.configureOpenGraph(
			customDescription = "This is a custom description edit",
			customImage = "true",
			customTitle = "This is a custom title edit",
			pageName = "Test Page Name",
			uploadFileName = "Document_2.jpg");

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-page-name");

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''"og:title" content="This is a custom title edit","og:description" content="This is a custom description edit","og:image" content="${portalURL}/documents/${siteId}/0/Document_2''');
	}

	@description = "This test ensures that user can map the blogs with open graph meta tags for display pages."
	@priority = "5"
	@refactordone
	test CanMapBlogsToDisplayPage {
		var portalURL = PropsUtil.get("portal.url");

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Blogs Entry",
			displayPageTemplateEntryName = "Display Page Template Name",
			groupName = "Test Site Name");

		DisplayPageTemplate.addFragment(
			collectionName = "Content Display",
			displayPageName = "Display Page Template Name",
			fragmentName = "Display Page Content",
			siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
			item = "Configure",
			pageTemplateName = "Display Page Template Name");

		Navigator.gotoNavNested(navNested = "Open Graph");

		OpenGraph.viewDefaultMappedField(portlet = "Open Graph");

		OpenGraph.mapEditableTextToField(
			field = "Title,Subtitle",
			mappedField = "Title",
			mappedFieldName = "Title",
			mappedFieldText = "Title is ",
			textType = "TextInput");

		OpenGraph.mapEditableTextToField(
			field = "Content,Description",
			mappedField = "Description",
			mappedFieldName = "Description",
			mappedFieldText = "Description is ",
			textType = "TextArea");

		OpenGraph.mapEditableTextToField(
			field = "Author Name,Description",
			mappedField = "ImageAlt",
			mappedFieldName = "Image Alt Description",
			mappedFieldText = "Image Alt is ",
			textType = "TextArea");

		OpenGraph.mapEditableTextToField(
			field = "Author Profile Image",
			mappedFieldName = "Image");

		Button.clickSave();

		OpenGraph.viewMappedField(
			mappedField = "Title",
			mappedFieldValue = "Title is Title: ${title:Title}Subtitle: ${subtitle:Subtitle}");

		OpenGraph.viewMappedField(
			mappedField = "Description",
			mappedFieldValue = "Description is Content: ${content:Content}Description: ${description:Description}",
			textType = "TextArea");

		OpenGraph.viewMappedField(
			mappedField = "Image",
			mappedFieldValue = "Blogs Entry: Author Profile Image");

		OpenGraph.viewMappedField(
			mappedField = "ImageAlt",
			mappedFieldValue = "Image Alt is Author Name: ${authorName:Author Name}Description: ${description:Description}",
			textType = "TextArea");

		BlogsNavigator.openBlogsAdmin(siteURLKey = "test-site-name");

		Blogs.addWithCustomAbstract(
			entryAbstractDescription = "Custom Abstract",
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title");

		DisplayPageTemplate.selectDisplayPageTemplateForAsset(
			assetType = "Blogs Entry",
			entryTitle = "Blogs Entry Title",
			groupName = "Test Site Name",
			pageName = "Display Page Template Name",
			siteURLKey = "test-site-name");

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/b/blogs-entry-title");

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''"og:title" content="Title is Title: Blogs Entry TitleSubtitle: Blogs Entry Subtitle","og:description" content="Description is Content: Blogs Entry ContentDescription: Custom Abstract"''');

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''"og:image:alt" content="Image Alt is Author Name: Test TestDescription: Custom Abstract","og:image" content="${portalURL}/image/user_portrait''');
	}

	@description = "This test ensures that user can map the document with open graph meta tags for display pages."
	@priority = "5"
	@refactordone
	test CanMapDocumentToDisplayPage {
		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Document",
			displayPageTemplateEntryName = "Display Page Template Name",
			groupName = "Test Site Name",
			subType = "Basic Document");

		DisplayPageTemplate.addFragment(
			collectionName = "Content Display",
			displayPageName = "Display Page Template Name",
			fragmentName = "Display Page Content",
			siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
			item = "Configure",
			pageTemplateName = "Display Page Template Name");

		Navigator.gotoNavNested(navNested = "Open Graph");

		OpenGraph.viewDefaultMappedField(portlet = "Open Graph");

		OpenGraph.mapEditableTextToField(
			field = "File Name",
			mappedField = "Title",
			mappedFieldName = "Title",
			mappedFieldText = "Title is ",
			textType = "TextInput");

		OpenGraph.mapEditableTextToField(
			field = "MIME Type",
			mappedField = "Description",
			mappedFieldName = "Description",
			mappedFieldText = "Description is ",
			textType = "TextArea");

		OpenGraph.mapEditableTextToField(
			field = "Author Name",
			mappedField = "ImageAlt",
			mappedFieldName = "Image Alt Description",
			mappedFieldText = "Image Alt is ",
			textType = "TextArea");

		OpenGraph.mapEditableTextToField(
			field = "Preview Image",
			mappedFieldName = "Image");

		Button.clickSave();

		OpenGraph.viewMappedField(
			mappedField = "Title",
			mappedFieldValue = "Title is File Name: ${fileName:File Name}");

		OpenGraph.viewMappedField(
			mappedField = "Description",
			mappedFieldValue = "Description is MIME Type: ${mimeType:MIME Type}",
			textType = "TextArea");

		OpenGraph.viewMappedField(
			mappedField = "Image",
			mappedFieldValue = "Document: Preview Image");

		OpenGraph.viewMappedField(
			mappedField = "ImageAlt",
			mappedFieldValue = "Image Alt is Author Name: ${authorName:Author Name}",
			textType = "TextArea");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		DisplayPageTemplate.selectDisplayPageTemplateForAsset(
			assetType = "Document",
			entryTitle = "DM Document Title",
			groupName = "Test Site Name",
			pageName = "Display Page Template Name",
			siteURLKey = "test-site-name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		var dmFileEntryId = JSONDocument.getFileEntryId(
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Site Name");

		var portalURL = PropsUtil.get("portal.url");

		var siteId = JSONGroupAPI._getGroupIdByName(
			groupName = "Test Site Name",
			site = "true");

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/d/${dmFileEntryId}");

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''"og:title" content="Title is File Name: Document_1.jpg","og:description" content="Description is MIME Type: image/jpeg"''');

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''"og:image:alt" content="Image Alt is Author Name: Test Test","og:image" content="${portalURL}/documents/${siteId}/0/Document_1''');
	}

	@description = "This test ensures that image meta tags are displayed with the site image and alt description in the HTML when the image fields are not mapped in the display page."
	@priority = "5"
	@refactordone
	test CanMapSiteImageToDisplayPage {
		Site.openSiteSettingsAdmin(siteURLKey = "test-site-name");

		Click(
			key_itemName = "Pages",
			locator1 = "ListGroupItem#ITEM_TEXT");

		Navigator.gotoNavTab(navTab = "Open Graph");

		OpenGraph.configureOpenGraph(
			altDescription = "This is image alternative description",
			customImage = "true",
			uploadFileName = "Document_1.jpg");

		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Blogs Entry",
			displayPageTemplateEntryName = "Display Page Template Name",
			groupName = "Test Site Name");

		DisplayPageTemplate.addFragment(
			collectionName = "Content Display",
			displayPageName = "Display Page Template Name",
			fragmentName = "Display Page Content",
			siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
			item = "Configure",
			pageTemplateName = "Display Page Template Name");

		Navigator.gotoNavNested(navNested = "Open Graph");

		OpenGraph.viewMappedField(
			mappedField = "Image",
			mappedFieldValue = "-- Unmapped --");

		OpenGraph.viewMappedField(
			mappedField = "ImageAlt",
			mappedFieldValue = "",
			textType = "TextArea");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entrySubtitle = "Blogs Entry Subtitle",
			entryTitle = "Blogs Entry Title",
			groupName = "Test Site Name");

		DisplayPageTemplate.selectDisplayPageTemplateForAsset(
			assetType = "Blogs Entry",
			entryTitle = "Blogs Entry Title",
			groupName = "Test Site Name",
			pageName = "Display Page Template Name",
			siteURLKey = "test-site-name");

		var portalURL = PropsUtil.get("portal.url");

		var siteId = JSONGroupAPI._getGroupIdByName(
			groupName = "Test Site Name",
			site = "true");

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/b/blogs-entry-title");

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''"og:image:alt" content="This is image alternative description","og:image" content="${portalURL}/documents/${siteId}/0/Document_1''');
	}

	@description = "This test ensures that user can map the web content with open graph meta tags for display pages."
	@priority = "5"
	@refactordone
	test CanMapWebContentToDisplayPage {
		JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
			contentType = "Web Content Article",
			displayPageTemplateEntryName = "Display Page Template Name",
			groupName = "Test Site Name",
			subType = "Basic Web Content");

		DisplayPageTemplate.addFragment(
			collectionName = "Content Display",
			displayPageName = "Display Page Template Name",
			fragmentName = "Display Page Content",
			siteURLKey = "test-site-name");

		DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "test-site-name");

		PageTemplatesAdmin.gotoPageTemplateEllipsisItem(
			item = "Configure",
			pageTemplateName = "Display Page Template Name");

		Navigator.gotoNavNested(navNested = "Open Graph");

		OpenGraph.viewDefaultMappedField(portlet = "Open Graph");

		OpenGraph.mapEditableTextToField(
			field = "Description",
			mappedField = "Description",
			mappedFieldName = "Description",
			mappedFieldText = "Description is ",
			textType = "TextArea");

		Button.clickSave();

		OpenGraph.viewMappedField(
			mappedField = "Description",
			mappedFieldValue = "Description is Description: ${description:Description}",
			textType = "TextArea");

		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			description = "Web Content Description",
			groupName = "Test Site Name",
			title = "Web Content Title");

		DisplayPageTemplate.selectDisplayPageTemplateForAsset(
			assetType = "Web Content",
			entryTitle = "Web Content Title",
			groupName = "Test Site Name",
			pageName = "Display Page Template Name",
			siteURLKey = "test-site-name");

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name/w/web-content-title");

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''"og:title" content="Web Content Title","og:description" content="Description is Description: Web Content Description"''');
	}

	@description = "This ensures that the user can reset to the default OG title tag."
	@priority = "5"
	@refactordone
	test CanRevertCustomTitle {
		var portalURL = PropsUtil.get("portal.url");

		Navigator.openToGroupPagesPortlet(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			portlet = "Open Graph",
			siteURLKey = "test-site-name");

		OpenGraph.configureOpenGraph(customTitle = "This is a custom title");

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-page-name");

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''property="og:title" content="This is a custom title"''');

		User.firstLoginPG();

		Navigator.openToGroupPagesPortlet(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			portlet = "Open Graph",
			siteURLKey = "test-site-name");

		OpenGraph.disableOpenGraphCustomSettings(customTitle = "This is a custom title");

		Button.click(button = "Save");

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-page-name");

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''property="og:title" content="Test Page Name - Test Site Name''');
	}

	@description = "This ensures that OG tags will appear when Open Graph is enabled."
	@priority = "5"
	@refactordone
	test CanViewDefaultMetaTags {
		property portal.acceptance = "true";

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openToGroupPagesPortlet(
			groupName = "Test Site Name",
			layoutName = "Test Page Name",
			portlet = "Open Graph",
			siteURLKey = "test-site-name");

		OpenGraph.viewDefaultConfiguration();

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-page-name");

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''property="og:title",property="og:site_name",property="og:url",property="og:locale"''');

		OpenGraph.viewNoOpenGraphProperties(ogPropertyList = '''property="og:image",property="og:description"''');
	}

	@description = "This ensures that meta tags can be viewed on a new page."
	@priority = "5"
	@refactordone
	test CanViewNewPageWithMetaTags {
		var portalURL = PropsUtil.get("portal.url");

		PagesAdmin.openPagesAdmin(siteURLKey = "test-site-name");

		PagesAdmin.addPage(
			customDescription = "This is a new description",
			customTitle = "This is a new title",
			openGraph = "true",
			pageName = "Test New Page");

		Navigator.openSpecificURL(url = "${portalURL}/c/portal/logout");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-new-page");

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''"og:title" content="This is a new title","og:description" content="This is a new description"''');

		OpenGraph.viewOpenGraphProperties(ogPropertyList = '''"og:url" content="${portalURL}/web/test-site-name/test-new-page","og:locale" content="en_US","og:locale:alternate" content="en_US","og:site_name" content="Test Site Name"''');
	}

}