@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Account";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Accounts.tearDownCP();
		}
	}

	@description = "This test adds an account user via Account Users portlet"
	@priority = "5"
	test CanAddAccountUser {
		property portal.acceptance = "true";

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account with User",
			accountEntryType = "Business");

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Control Panel",
			portlet = "Account Users");

		AccountUsers.addUser(
			accountName = "Account with User",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		AccountUsers.openAccountUsersAdmin();

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");
	}

	@description = "This test adds an account user to an account via Edit User page"
	@priority = "4"
	test CanAddUserToAccountViaEditUser {
		for (var accountNumber : list "1,2") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Accounts Name ${accountNumber}",
				accountEntryType = "Business");
		}

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Accounts Name 1",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		AccountUsers.openAccountUsersAdmin();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "userfn userln");

		AssertTextEquals.assertPartialText(
			locator1 = "Portlet#HEADER",
			value1 = "Edit User userfn userln");

		Navigator.gotoNavNested(navNested = "Accounts");

		AssertClick(
			key_text = "Select",
			locator1 = "Button#ANY",
			value1 = "Select");

		SelectFrame(
			key_title = "Select Account",
			locator1 = "IFrame#MODAL_ANY");

		AssertClick(
			key_accountName = "Accounts Name 2",
			locator1 = "AccountUsers#SELECT_AN_ACCOUNT_CHOOSE_BUTTON",
			value1 = "Choose");

		Button.clickSave();

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.viewEntryAccounts(
			accountName = "Accounts Name 1, Accounts Name 2",
			accountUserName = "userfn userln");
	}

	@description = "This test adds more than 4 account users and asserts correct pagination."
	@priority = "3"
	test CanChangePaginationInAccountUsersList {
		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account Name",
			accountEntryType = "Business");

		for (var accountUser : list "1,2,3,4,5,6") {
			AccountUsers.openAccountUsersAdmin();

			AccountUsers.addUser(
				accountName = "Account Name",
				userEmailAddress = "userea${accountUser}@liferay.com",
				userFirstName = "userfn${accountUser}",
				userLastName = "userln${accountUser}",
				userScreenName = "usersn${accountUser}");
		}

		AccountUsers.openAccountUsersAdmin();

		Pagination.changePagination(itemsPerPage = "4");

		for (var accountUser : list "1,2,3,4") {
			LexiconEntry.viewEntryName(rowEntry = "userfn${accountUser} userln${accountUser}");
		}

		for (var accountUser : list "5,6") {
			LexiconEntry.viewNoEntry(rowEntry = "userfn${accountUser} userln${accountUser}");
		}

		Pagination.viewResults(results = "Showing 1 to 4 of 6 entries.");

		Click(locator1 = "Pagination#NEXT_LINK");

		for (var accountUser : list "5,6") {
			LexiconEntry.viewEntryName(rowEntry = "userfn${accountUser} userln${accountUser}");
		}

		for (var accountUser : list "1,2,3,4") {
			LexiconEntry.viewNoEntry(rowEntry = "userfn${accountUser} userln${accountUser}");
		}

		Pagination.viewResults(results = "Showing 5 to 6 of 6 entries.");
	}

	@description = "This test deactivates an active user"
	@priority = "4"
	test CanDeactivateUser {
		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account with User",
			accountEntryType = "Business");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Account with User",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		AccountUsers.openAccountUsersAdmin();

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");

		AccountUsers.deactivateUser(userFirstName = "userfn");

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		LexiconEntry.viewEntryStatus(
			rowEntry = "userfn",
			rowStatus = "Inactive");
	}

	@description = "This test edits a user via Account Users portlet"
	@priority = "5"
	test CanEditAccountUser {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "This is an Account with User.",
			accountName = "Account with User");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Account with User",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.editUser(
			accountUser = "userfn userln",
			editEmailAddress = "edituserfn@liferay.com",
			editFirstName = "edituserfn",
			password = "test");

		AccountUsers.openAccountUsersAdmin();

		LexiconEntry.viewEntryName(rowEntry = "edituserfn userln");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with User");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.viewAssignee(assigneeName = "edituserfn@liferay.com");

		Accounts.viewAssignee(assigneeName = "edituserfn");
	}

	@description = "This is a use case for LPS-107598 and LPS-129713"
	@priority = "3"
	test CanFilterAccountUserInTheUsersAdminPortlet {
		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account with User",
			accountEntryType = "Business");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Account with User",
			userEmailAddress = "userac@liferay.com",
			userFirstName = "userac",
			userLastName = "userac",
			userScreenName = "userac");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.openUsersAdmin();

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");

		LexiconEntry.viewEntryName(rowEntry = "userac userac");

		ManagementBar.setFilterAndOrder(filterBy = "Company Users");

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");

		LexiconEntry.viewNoEntry(rowEntry = "userac userac");

		ManagementBar.setFilterAndOrder(filterBy = "Account Users");

		LexiconEntry.viewEntryName(rowEntry = "userac userac");

		LexiconEntry.viewNoEntry(rowEntry = "userfn userln");
	}

	@description = "The filter by Any Account filters all users that assigned account"
	@priority = "3"
	test CanFilterByAnyAccount {
		for (var newEntryNum : list "1,2,3") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account ${newEntryNum} with User",
				accountEntryType = "Business");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Account ${newEntryNum} with User",
				userEmailAddress = "userea${newEntryNum}@liferay.com",
				userFirstName = "userfn${newEntryNum}",
				userLastName = "userln${newEntryNum}",
				userScreenName = "usersn${newEntryNum}");
		}

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.removeAccount(
			accountName = "Account 1 with User",
			accountUser = "userfn1 userln1");

		AccountUsers.openAccountUsersAdmin();

		ManagementBar.setFilterAndOrder(filterBy = "Any Account");

		LexiconEntry.viewEntryName(rowEntry = "userfn2 userln2");

		LexiconEntry.viewEntryName(rowEntry = "userfn3 userln3");

		LexiconEntry.viewNoEntry(rowEntry = "userfn1 userln1");
	}

	@description = "This filters users that do not have any assigned account"
	@priority = "3"
	test CanFilterByNoAssignedAccount {
		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account with User",
			accountEntryType = "Business");

		for (var accountUser : list "1,2") {
			AccountUsers.openAccountUsersAdmin();

			AccountUsers.addUser(
				accountName = "Account with User",
				userEmailAddress = "userea${accountUser}@liferay.com",
				userFirstName = "userfn${accountUser}",
				userLastName = "userln${accountUser}",
				userScreenName = "usersn${accountUser}");
		}

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.removeAccount(
			accountName = "Account with User",
			accountUser = "userfn1 userln1");

		AccountUsers.openAccountUsersAdmin();

		ManagementBar.setFilterAndOrder(filterBy = "No Assigned Account");

		LexiconEntry.viewEntryName(rowEntry = "userfn1 userln1");

		LexiconEntry.viewNoEntry(rowEntry = "userfn2 userln2");

		ManagementBar.setFilterAndOrder(filterBy = "Any Account");

		LexiconEntry.viewEntryName(rowEntry = "userfn2 userln2");

		LexiconEntry.viewNoEntry(rowEntry = "userfn1 userln1");
	}

	@description = "This filters users by Selected Accounts, choosing a specific account to view"
	@priority = "3"
	test CanFilterBySelectedAccounts {
		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Business Account",
			accountEntryType = "Business");

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Person Account",
			accountEntryType = "Person");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Business Account",
			userEmailAddress = "businessuser@liferay.com",
			userFirstName = "business",
			userLastName = "user",
			userScreenName = "businessuser");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Business Account",
			userEmailAddress = "userbusiness@liferay.com",
			userFirstName = "user",
			userLastName = "business",
			userScreenName = "userbusiness");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Person Account",
			userEmailAddress = "personuser@liferay.com",
			userFirstName = "person",
			userLastName = "user",
			userScreenName = "personuser");

		AccountUsers.openAccountUsersAdmin();

		ManagementBar.setFilterAndOrder(filterBy = "Selected Accounts");

		AccountUsers.selectAccounts(accountName = "Person Account");

		LexiconEntry.viewEntryName(rowEntry = "person user");

		LexiconEntry.viewNoEntry(rowEntry = "user business");

		LexiconEntry.viewNoEntry(rowEntry = "business user");

		ManagementBar.setFilterAndOrder(filterBy = "Selected Accounts");

		AccountUsers.selectAccounts(accountName = "Business Account");

		LexiconEntry.viewEntryName(rowEntry = "business user");

		LexiconEntry.viewEntryName(rowEntry = "user business");

		LexiconEntry.viewNoEntry(rowEntry = "person user");
	}

	@description = "This filters users by status: active and inactive"
	@priority = "3"
	test CanFilterByStatus {
		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Filter Account User",
			accountEntryType = "Business");

		for (var accountUser : list "1,2") {
			AccountUsers.openAccountUsersAdmin();

			AccountUsers.addUser(
				accountName = "Filter Account User",
				userEmailAddress = "userea${accountUser}@liferay.com",
				userFirstName = "userfn${accountUser}",
				userLastName = "userln${accountUser}",
				userScreenName = "usersn${accountUser}");
		}

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.deactivateUser(userFirstName = "userfn2");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Filter Account User");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		LexiconEntry.viewEntryName(rowEntry = "userfn1 userln1");

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		LexiconEntry.viewEntryName(rowEntry = "userfn2 userln2");

		ManagementBar.setFilterAndOrder(filterBy = "Active");

		LexiconEntry.viewEntryName(rowEntry = "userfn1 userln1");
	}

	@description = "This test impersonates an account user via Account Users portlet"
	@priority = "4"
	test CanImpersonateUser {
		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account with User",
			accountEntryType = "Business");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Account with User",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		AccountUsers.openAccountUsersAdmin();

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");

		User.impersonateCP(
			siteName = "${siteName}",
			userName = "userfn");
	}

	@description = "This test asserts that a person account cannot be selected in Edit User when a user is already assigned to a Person Account."
	@priority = "4"
	test CannotSelectPersonAccountWithUserAssigned {
		task ("Given there is a Person account with a user assigned") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Person Account",
				accountEntryType = "Person");

			AccountUsers.openAccountUsersAdmin();

			AccountUsers.addUser(
				accountName = "Person Account",
				userEmailAddress = "personuser@liferay.com",
				userFirstName = "person",
				userLastName = "user",
				userScreenName = "personuser");
		}

		task ("When an admin attempts to add a new user in Account Users portlet") {
			AccountUsers.openAccountUsersAdmin();

			LexiconEntry.gotoAdd();

			Pause(locator1 = "3000");

			SelectFrame(locator1 = "IFrame#SELECT_ACCOUNT");
		}

		task ("Then Person accounts with assigned users do not display") {
			AssertTextEquals(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No accounts were found.");
		}
	}

	@description = "This test clicks on the cancel button and back icon upon account user creation. It then asserts that the account user was not saved."
	@priority = "3"
	test ClickingCancelOrBackWillNotSaveAccountUser {
		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account with User",
			accountEntryType = "Business");

		AccountUsers.openAccountUsersAdmin();

		LexiconEntry.gotoAdd();

		SelectFrame(locator1 = "IFrame#SELECT_ACCOUNT");

		AssertClick(
			key_accountName = "Account with User",
			locator1 = "AccountUsers#SELECT_AN_ACCOUNT_CHOOSE_BUTTON",
			value1 = "Choose");

		SelectFrame(value1 = "relative=top");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_SCREEN_NAME_FIELD",
			value1 = "usersn");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_EMAIL_ADDRESS_FIELD",
			value1 = "userea@liferay.com");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_FIRST_NAME_FIELD",
			value1 = "userfn");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_LAST_NAME_FIELD",
			value1 = "userln");

		Button.clickCancel();

		AccountUsers.openAccountUsersAdmin();

		LexiconEntry.viewNoEntry(rowEntry = "userfn userln");

		AccountUsers.openAccountUsersAdmin();

		LexiconEntry.gotoAdd();

		SelectFrame(locator1 = "IFrame#SELECT_ACCOUNT");

		AssertClick(
			key_accountName = "Account with User",
			locator1 = "AccountUsers#SELECT_AN_ACCOUNT_CHOOSE_BUTTON",
			value1 = "Choose");

		SelectFrame(value1 = "relative=top");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_SCREEN_NAME_FIELD",
			value1 = "usersn");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_EMAIL_ADDRESS_FIELD",
			value1 = "userea@liferay.com");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_FIRST_NAME_FIELD",
			value1 = "userfn");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_LAST_NAME_FIELD",
			value1 = "userln");

		Navigator.gotoBack();

		AccountUsers.openAccountUsersAdmin();

		LexiconEntry.viewNoEntry(rowEntry = "userfn userln");
	}

}