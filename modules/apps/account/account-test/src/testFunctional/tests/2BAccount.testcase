@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Account";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "2B Account Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "2B Account Page",
			layoutTemplate = "1 Column");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "2B Account Page",
			widgetName = "Account Management");

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account Name",
			accountEntryType = "Business");

		JSONAccountEntryUser.addAccountEntryUser(
			accountEntryName = "Account Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.addAssigneeToRoleViaRolesTab(
			accountRoleTitle = "Account Administrator",
			assigneeName = "userfn");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.setUserPassword(
			accountUser = "userfn",
			accountUserPassword = "test");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Accounts.tearDownCP();
		}
	}

	@description = "This test adds the Add Account Entry permission to Account Admin and assert user can add an account."
	@priority = "5"
	test AccountAdminCanAddAccount {
		property portal.acceptance = "true";

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Accounts.setAddAccountEntryPermissions(
			roleTitle = "Reg Role Name",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.addBusinessAccount(
			accountDescription = "Accounts Name Description for Test",
			accountName = "Accounts Name for Test");

		Navigator.gotoPage(pageName = "2B Account Page");

		LexiconEntry.viewEntryName(rowEntry = "Accounts Name for Test");
	}

	@description = "This test asserts that an Account Admin can add a billing address to an Account."
	@priority = "5"
	test AccountAdminCanAddBillingAddressToAccount {
		Search.searchPG(
			portletName = "Account Management",
			searchTerm = "Account Name");

		Accounts.goToEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Account Name");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddressViaSetDefaultAddress(
			addressCity = "Shibuya-ku",
			addressCountry = "Japan",
			addressName = "Liferay Japan K. K.",
			addressPostalCode = "150-0021",
			addressRegion = "Tokyo",
			addressStreet1 = "1F Faveur Ebisu,",
			addressStreet2 = "1-26-7 Ebisu Nishi",
			addressType = "Billing",
			phoneNumber = "+81 3-5456-5796");

		AssertElementPresent(
			key_tab = "Addresses",
			locator1 = "NavTab#ACTIVE_TAB_LINK");

		Search.searchPG(
			portletName = "Account Name",
			searchTerm = "Liferay Japan K. K.");

		LexiconEntry.viewEntryContent(
			rowAny = "Billing",
			rowEntry = "Liferay Japan K. K.");
	}

	@description = "This test asserts that an Account Admin can add a new user to an account"
	@priority = "5"
	test AccountAdminCanAddNewUserToAccount {
		property portal.acceptance = "true";

		JSONAccountEntryUser.addAccountEntryUser(
			accountEntryName = "Account Name",
			userEmailAddress = "userea1@liferay.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1");

		Navigator.gotoPage(pageName = "2B Account Page");

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.viewAssignee(assigneeName = "userfn1");
	}

	@description = "This test asserts that an Account Admin can add a shipping address to an Account."
	@priority = "5"
	test AccountAdminCanAddShippingAddressToAccount {
		Search.searchPG(
			portletName = "Account Management",
			searchTerm = "Account Name");

		Accounts.goToEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Account Name");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddressViaSetDefaultAddress(
			addressCity = "Diamond Bar",
			addressCountry = "United States",
			addressName = "Liferay, Inc.",
			addressPostalCode = "91765",
			addressRegion = "California",
			addressStreet1 = "1400 Montefino Ave",
			addressType = "Shipping",
			phoneNumber = "+1-877-543-3729");

		AssertElementPresent(
			key_tab = "Addresses",
			locator1 = "NavTab#ACTIVE_TAB_LINK");

		Search.searchPG(
			portletName = "Account Name",
			searchTerm = "Liferay, Inc.");

		LexiconEntry.viewEntryContent(
			rowAny = "Shipping",
			rowEntry = "Liferay, Inc.");
	}

	@description = "This test asserts that an Account Admin can assign roles to users."
	@priority = "5"
	test AccountAdminCanAssignRolesToUsers {
		property portal.acceptance = "true";

		task ("Add a new user into the 'Account Name' account") {
			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Account Name",
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.gotoAssigneeTab(assigneeTab = "Users");

			WaitForElementPresent(
				key_rowEntry = "user1 user1",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");
		}

		task ("Assign new user the role of 'Account Administrator'") {
			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "user1 user1");
		}

		task ("Assert that the new user has 'Account Administator' listed in their role") {
			AssertTextEquals(
				key_columnName = "lfr-account-roles-column",
				key_rowEntry = "user1 user1",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER_TD",
				value1 = "Account Administrator");
		}
	}

	@description = "This test asserts that an Account can be deactivated and will show Active and Inactive filters."
	@priority = "4"
	test AccountAdminCanDeactivateAccount {
		Permissions.definePermissionViaJSONAPI(
			resourceAction = "DELETE",
			resourceName = "com.liferay.account.model.AccountEntry",
			roleTitle = "Account Administrator",
			roleType = "account");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.goToEntryMenuItem(
			menuItem = "Deactivate",
			rowEntry = "Account Name");

		AssertConfirm(value1 = "Are you sure you want to deactivate this?");

		Alert.viewSuccessMessage();

		Accounts.viewInactiveAccount(accountName = "Account Name");
	}

	@description = "This test asserts that an Account can be deleted."
	@priority = "4"
	test AccountAdminCanDeleteAccount {
		property portal.acceptance = "true";

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "DELETE",
			resourceName = "com.liferay.account.model.AccountEntry",
			roleTitle = "Account Administrator",
			roleType = "account");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.goToEntryMenuItem(
			menuItem = "Delete",
			rowEntry = "Account Name");

		AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

		Alert.viewSuccessMessage();
	}

	@description = "This test asserts that an Account Admin can edit an account he is assigned to."
	@priority = "5"
	test AccountAdminCanEditAccount {
		property portal.acceptance = "true";

		Accounts.goToEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Account Name");

		AssertTextEquals(
			key_portletName = "Account",
			locator1 = "Portlet#TITLE",
			value1 = "Edit Account Name");

		PortletEntry.inputName(name = "This is a new update");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Navigator.gotoPage(pageName = "2B Account Page");

		LexiconEntry.viewEntryName(rowEntry = "This is a new update");

		LexiconEntry.viewNoEntry(rowEntry = "Account Name");
	}

	@description = "This test asserts that an Account Administrator can edit the info of users who belong to that account."
	@priority = "4"
	test AccountAdminCanEditOtherUserInfo {
		task ("Sign in as Super User and add additional user into an account") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Account Name",
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln1",
				userScreenName = "usersn1");
		}

		task ("Create and assign a new role to Account Admin that allows for them to view and edit other users") {
			JSONRole.addRegularRole(roleTitle = "Edit User Role");

			for (var resourceActionIndex : list "UPDATE,VIEW") {
				Permissions.definePermissionViaJSONAPI(
					resourceAction = "${resourceActionIndex}",
					resourceName = "com.liferay.portal.kernel.model.User",
					roleTitle = "Edit User Role");
			}

			JSONRole.assignRoleToUser(
				roleTitle = "Edit User Role",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sign back in as Account Admin and edit the other user name") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Navigator.gotoNavTab(navTab = "Users");

			AccountUsers.editUser(
				accountManagementWidget = "true",
				accountUser = "userfn1 userln1",
				editFirstName = "userEdit");
		}

		task ("Assert that the user has the edited first name and the original name cannot be found") {
			Navigator.gotoPage(pageName = "2B Account Page");

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Navigator.gotoNavTab(navTab = "Users");

			LexiconEntry.viewEntryName(rowEntry = "userEdit userln1");

			LexiconEntry.viewNoEntry(rowEntry = "userfn1 userln1");
		}
	}

	@description = "This test asserts that an Account Admin cannot add a user wtih an email domain that is blocked."
	@priority = "4"
	test AccountAdminCannotAddUserWithBlockedDomain {
		task ("Login as Super User and block the gmail.com email domain") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			AccountConfiguration.enableAccountEmailDomain();

			AccountConfiguration.addBlockedEmailDomain(settingValues = "gmail.com");
		}

		task ("Login as Account Admin and go to Users tab in the Account Management Widget") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			Accounts.goToEntryMenuItem(
				menuItem = "Manage Users",
				rowEntry = "Account Name");
		}

		task ("Attempt to add user using the email domain blocked previously and assert that the new user is not added into the account") {
			Accounts.viewErrorWhenAddingUserWithBlockedDomain(
				accountName = "Account Name",
				assigneeName = "gmailUser",
				emailDomainName = "gmail.com",
				userEmailAddress = "userea@gmail.com",
				userFirstName = "gmailUser",
				userLastName = "gmailUser",
				userScreenName = "blockedUser");

			Navigator.gotoPage(pageName = "2B Account Page");

			Accounts.goToEntryMenuItem(
				menuItem = "Manage Users",
				rowEntry = "Account Name");

			LexiconEntry.viewNoEntry(rowEntry = "gmailUser gmailUser");
		}
	}

	@description = "This test sets a valid domain for a business account. Account Admin can only add users with a valid domain"
	@priority = "3"
	test AccountAdminCanOnlyAddUserWithValidDomain {
		task ("Login as Super User and enable email domain") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			AccountConfiguration.enableAccountEmailDomain();
		}

		task ("Login as Account Admin and edit Account Name with a domain set") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			Accounts.goToEntryMenuItem(
				menuItem = "Edit",
				rowEntry = "Account Name");

			AssertClick(
				locator1 = "Account#VALID_DOMAINS_ADD_BUTTON",
				value1 = "Add");

			SelectFrame(locator1 = "IFrame#ADD_DOMAIN");

			PortletEntry.inputText(
				fieldLabel = "Domain",
				text = "gmail.com");

			Button.clickSave();

			AssertElementPresent(
				key_domainName = "gmail.com",
				locator1 = "Account#VALID_DOMAINS_DOMAIN_NAME");

			Button.clickSave();

			Alert.viewSuccessMessage();
		}

		task ("Attempt to add user using the valid domain and assert that the new user is added into the account") {
			Accounts.addNewUserWithSameDomain(
				accountName = "Account Name",
				assigneeName = "gmailUser",
				emailDomainName = "gmail.com",
				userEmailAddress = "userea@gmail.com",
				userFirstName = "gmailUser",
				userLastName = "gmailUser",
				userScreenName = "User",
				validDomainNames = "gmail.com");

			Navigator.gotoPage(pageName = "2B Account Page");

			Accounts.goToEntryMenuItem(
				menuItem = "Manage Users",
				rowEntry = "Account Name");

			AssertElementPresent(
				key_userName = "gmailUser",
				locator1 = "Account#USER_TABLE_NAME");
		}

		task ("As account admin attempt to add user using the invalid domain and assert that the new user is not added into the account") {
			Accounts.viewErrorWhenAddingUserWithInvalidDomain(
				accountName = "Account Name",
				asAccountAdmin = "true",
				assigneeName = "9teenUser",
				emailDomainName = "9teen.com",
				userEmailAddress = "userea@9teen.com",
				userFirstName = "9teenUser",
				userLastName = "9teenUser",
				userScreenName = "User1");

			Navigator.gotoPage(pageName = "2B Account Page");

			Accounts.goToEntryMenuItem(
				menuItem = "Manage Users",
				rowEntry = "Account Name");

			LexiconEntry.viewNoEntry(rowEntry = "9teenUser 9teenUser");
		}
	}

	@description = "This test asserts that an Account Admin can set a billing address to an Account."
	@priority = "5"
	test AccountAdminCanSetDefaultBillingAddress {
		Search.searchPG(
			portletName = "Account Management",
			searchTerm = "Account Name");

		Accounts.goToEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Account Name");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddressViaSetDefaultAddress(
			addressCity = "Diamond Bar",
			addressCountry = "United States",
			addressName = "Liferay, Inc.",
			addressPostalCode = "91765",
			addressRegion = "California",
			addressStreet1 = "1400 Montefino Ave",
			addressType = "Billing",
			phoneNumber = "+1-877-543-3729");

		Accounts.gotoAssigneeTab(assigneeTab = "Details");

		Accounts.setDefaultBillingAddress(addressName = "Liferay, Inc.");

		AssertElementPresent(
			key_tab = "Details",
			locator1 = "NavTab#ACTIVE_TAB_LINK");

		Accounts.viewDefaultBillingAddress(
			addressCity = "Diamond Bar",
			addressCountry = "United States",
			addressName = "Liferay, Inc.",
			addressPostalCode = "91765",
			addressRegion = "California",
			addressStreet1 = "1400 Montefino Ave",
			phoneNumber = "+1-877-543-3729");
	}

	@description = "This test asserts that an Account Admin can set a shipping address to an Account."
	@priority = "5"
	test AccountAdminCanSetDefaultShippingAddress {
		Search.searchPG(
			portletName = "Account Management",
			searchTerm = "Account Name");

		Accounts.goToEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "Account Name");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddressViaSetDefaultAddress(
			addressCity = "Shibuya-ku",
			addressCountry = "Japan",
			addressName = "Liferay Japan K. K.",
			addressPostalCode = "150-0021",
			addressRegion = "Tokyo",
			addressStreet1 = "1F Faveur Ebisu,",
			addressStreet2 = "1-26-7 Ebisu Nishi",
			addressType = "Shipping",
			phoneNumber = "+81 3-5456-5796");

		Accounts.gotoAssigneeTab(assigneeTab = "Details");

		Accounts.setDefaultShippingAddress(addressName = "Liferay Japan K. K.");

		AssertElementPresent(
			key_tab = "Details",
			locator1 = "NavTab#ACTIVE_TAB_LINK");

		Accounts.viewDefaultShippingAddress(
			addressCity = "Shibuya-ku",
			addressCountry = "Japan",
			addressName = "Liferay Japan K. K.",
			addressPostalCode = "150-0021",
			addressRegion = "Tokyo",
			addressStreet1 = "1F Faveur Ebisu,",
			addressStreet2 = "1-26-7 Ebisu Nishi",
			phoneNumber = "+81 3-5456-5796");
	}

	@description = "This test asserts that an Account Admin can add and unassign organization in bulk"
	@priority = "5"
	test AccountAdminCanUnassignOrganizationsInBulk {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "MANAGE_ORGANIZATIONS",
			resourceName = "com.liferay.account.model.AccountEntry",
			roleTitle = "Account Administrator",
			roleType = "account");

		for (var organizationNumber : list "1,2,3,4") {
			JSONOrganization.addOrganization(
				organizationName = "Organization ${organizationNumber}",
				organizationSite = "true");
		}

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.assignMultipleOrganizations(
			accountName = "Account Name",
			organizationNumber = "1,3,4");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.unassignMultipleOrganizations(
			accountName = "Account Name",
			organizationNumber = "1,3,4");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.viewNoAssignee(
			accountName = "Account Name",
			assigneeType = "Organizations");
	}

	@description = "This test asserts that an Account Admin can add and unassign organization to an account"
	@priority = "5"
	test AccountAdminCanUnassignOrganizationToAccount {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "MANAGE_ORGANIZATIONS",
			resourceName = "com.liferay.account.model.AccountEntry",
			roleTitle = "Account Administrator",
			roleType = "account");

		JSONOrganization.addOrganization(
			organizationName = "Organization for Account",
			organizationSite = "true");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.assignOrganizations(
			accountName = "Account Name",
			assigneeName = "Organization for Account");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.gotoAssigneeTab(assigneeTab = "Organizations");

		Accounts.removeOrganizationAsAssignee(
			accountName = "Account Name",
			assigneeName = "Organization for Account");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.viewNoAssignee(
			accountName = "Account Name",
			assigneeType = "Organizations");
	}

	@description = "This test asserts that an Account Admin can unassign roles to users."
	@priority = "5"
	test AccountAdminCanUnassignRolesToUsers {
		task ("Given an Account User is given a role by the Account Administrator") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.addOwnedAccountRole(accountRoleTitle = "Account Specific Role");

			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Account Name",
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Specific Role",
				accountUserName = "user1 user1");

			AssertTextEquals(
				key_columnName = "lfr-account-roles-column",
				key_rowEntry = "user1 user1",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER_TD",
				value1 = "Account Specific Role");
		}

		task ("When the Account Administrator unassigns that role") {
			Accounts.unassignUserRole(
				accountRoleTitle = "Account Specific Role",
				accountUserName = "user1 user1");
		}

		task ("Then that user should no longer have that role associated with them") {
			AssertTextNotEquals(
				key_columnName = "lfr-account-roles-column",
				key_rowEntry = "user1 user1",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER_TD",
				value1 = "Account Specific Role");
		}
	}

	@description = "This test asserts that account users can be ordered by First Name, Last Name, Email."
	@priority = "4"
	test AdminCanOrderUsers {
		task ("Add new users to account") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Account Name",
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn1",
				userLastName = "userln5",
				userScreenName = "usersn1");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Account Name",
				userEmailAddress = "userea3@liferay.com",
				userFirstName = "userfn5",
				userLastName = "userln2",
				userScreenName = "usersn2");
		}

		task ("Sign back in as Account Administrator and view account users") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			Accounts.goToEntryMenuItem(
				menuItem = "Manage Users",
				rowEntry = "Account Name");
		}

		task ("Assert users can be ordered by First Name") {
			ManagementBar.setFilterAndOrder(orderBy = "First Name");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "1",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "userfn userln");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "2",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "userfn1 userln5");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "3",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "userfn5 userln2");
		}

		task ("Asser users can be ordered by Last Name") {
			ManagementBar.setFilterAndOrder(orderBy = "Last Name");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "1",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "userfn userln");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "2",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "userfn5 userln2");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "3",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "userfn1 userln5");
		}

		task ("Asser users can be ordered by Email Address") {
			ManagementBar.setFilterAndOrder(orderBy = "Email Address");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "1",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "userfn1 userln5");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "2",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "userfn5 userln2");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "3",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "userfn userln");
		}
	}

	@description = "This test asserts Account Administrators can search for account users"
	@priority = "5"
	test AdminCanSearchForAccountUsers {
		property portal.acceptance = "true";

		task ("Add several users to account") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			for (var userNum : list "2,3,4") {
				JSONAccountEntryUser.addAccountEntryUser(
					accountEntryName = "Account Name",
					userEmailAddress = "userea${userNum}@liferay.com",
					userFirstName = "userfn${userNum}",
					userLastName = "userln${userNum}",
					userScreenName = "usersn${userNum}");
			}
		}

		task ("Sign back in as Account Administrator and view account users") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			Accounts.goToEntryMenuItem(
				menuItem = "Manage Users",
				rowEntry = "Account Name");
		}

		task ("Assert all users can be searched by first last name") {
			for (var userNum : list "2,3,4") {
				Search.searchPG(
					portletName = "Account Name",
					searchTerm = "userfn${userNum} userln${userNum}");

				LexiconEntry.viewEntryName(rowEntry = "userfn${userNum} userln${userNum}");

				LexiconEntry.viewNoEntry(rowEntry = "userfn userln");

				if ("${userNum}" == "2") {
					LexiconEntry.viewNoEntry(rowEntry = "userfn3 userln3");

					LexiconEntry.viewNoEntry(rowEntry = "userfn4 userln4");
				}
				else if ("${userNum}" == "3") {
					LexiconEntry.viewNoEntry(rowEntry = "userfn2 userln2");

					LexiconEntry.viewNoEntry(rowEntry = "userfn4 userln4");
				}
				else {
					LexiconEntry.viewNoEntry(rowEntry = "userfn2 userln3");

					LexiconEntry.viewNoEntry(rowEntry = "userfn3 userln3");
				}
			}
		}

		task ("Assert all users can be searched by email") {
			for (var userNum : list "2,3,4") {
				Search.searchPG(
					portletName = "Account Name",
					searchTerm = "userea${userNum}@liferay.com");

				LexiconEntry.viewEntryName(rowEntry = "userea${userNum}@liferay.com");

				LexiconEntry.viewNoEntry(rowEntry = "userea@liferay.com");

				if ("${userNum}" == "2") {
					LexiconEntry.viewNoEntry(rowEntry = "userea3@liferay.com");

					LexiconEntry.viewNoEntry(rowEntry = "userea4@liferay.com");
				}
				else if ("${userNum}" == "3") {
					LexiconEntry.viewNoEntry(rowEntry = "userea2@liferay.com");

					LexiconEntry.viewNoEntry(rowEntry = "userea4@liferay.com");
				}
				else {
					LexiconEntry.viewNoEntry(rowEntry = "userea2@liferay.com");

					LexiconEntry.viewNoEntry(rowEntry = "userea3@liferay.com");
				}
			}
		}
	}

	@description = "This test asserts Account Administrators can view all account users"
	@priority = "5"
	test AdminCanViewAllAccountUsers {
		task ("Add several users to account") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			for (var userNum : list "2,3,4") {
				JSONAccountEntryUser.addAccountEntryUser(
					accountEntryName = "Account Name",
					userEmailAddress = "userea${userNum}@liferay.com",
					userFirstName = "userfn${userNum}",
					userLastName = "userln${userNum}",
					userScreenName = "usersn${userNum}");
			}
		}

		task ("Assert all users can be viewed") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			Accounts.goToEntryMenuItem(
				menuItem = "Manage Users",
				rowEntry = "Account Name");

			LexiconEntry.viewEntryName(rowEntry = "userfn userln");

			for (var userNum : list "2,3,4") {
				LexiconEntry.viewEntryName(rowEntry = "userfn${userNum} userln${userNum}");
			}
		}
	}

	@description = "This test asserts that a newly created site will have default account type settings even after changing settings on original site."
	@priority = "5"
	test AllowedAccountTypeIsSiteWide {
		task ("Log in as Super User to give permissions for account adding to Account Administrator User") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");

			Accounts.setAddAccountEntryPermissions(
				roleTitle = "Reg Role Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Only allow for Person accounts to be created or visible") {
			Accounts.setAllowedAccountTypeInSiteSettings(allowedType = "Person");
		}

		task ("Create a Person account as the Account Administrator user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			Accounts.addPersonAccount(accountName = "Person Account");
		}

		task ("Assert that the Account Administrator can only see the Person account and not the Business account made in the setup") {
			Navigator.gotoPage(pageName = "2B Account Page");

			LexiconEntry.viewNoEntry(rowEntry = "Account Name");

			LexiconEntry.viewEntryName(rowEntry = "Person Account");
		}

		task ("Log back in as Super User to create a new site and add a new page with the Account Management Widget") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");

			ApplicationsMenu.gotoPortlet(
				category = "Sites",
				panel = "Control Panel",
				portlet = "Sites");

			Site.addBlankCP(siteName = "Site Name");

			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");

			PagesAdmin.addPage(
				pageName = "2B New Site",
				sitePageType = "Widget Page");

			Navigator.gotoSitePage(
				pageName = "2B New Site",
				siteName = "Site Name");

			Portlet.addPG(portletName = "Account Management");
		}

		task ("As the Account Administrator, go to new site and assert that both account types are now visible due to default allowed account type settings") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoSitePage(
				pageName = "2B New Site",
				siteName = "Site Name");

			LexiconEntry.viewEntryName(rowEntry = "Account Name");

			LexiconEntry.viewEntryName(rowEntry = "Person Account");
		}
	}

	@description = "This is a test for LRQA-73702 and asserts that a user can see all accounts that they belong to"
	@priority = "5"
	test CanAccessAListOfAccountsTheUserBelongsTo {
		task ("Given two accounts are created") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Test Account Member",
				accountEntryType = "Business");

			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Test Account Non-Member",
				accountEntryType = "Business");

			task ("And given a user is added to one of the accounts") {
				Navigator.gotoPage(pageName = "2B Account Page");

				LexiconEntry.gotoEntry(rowEntry = "Test Account Member");

				Accounts.assignUsers(
					accountName = "Test Account Member",
					assigneeName = "userfn userln");
			}
		}

		task ("When that user logs in and views the account page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");
		}

		task ("Then the user should only see accounts they belong to") {
			for (var accountName : list "Account Name,Test Account Member") {
				LexiconEntry.viewEntryName(rowEntry = "${accountName}");
			}

			LexiconEntry.viewNoEntry(rowEntry = "Test Account Non-Member");
		}
	}

	@description = "This test checks that the size of the pagination list can be changed."
	@priority = "4"
	test CanChangePaginationInAccounts {
		AssertElementNotPresent(locator1 = "Pagination#PAGINATION_BAR");

		LexiconEntry.viewEntryName(rowEntry = "Account Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "test test");

		for (var accountNum : list "1,2,3,4,5") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name ${accountNum}",
				accountEntryType = "Business");
		}

		for (var accountNames : list "Account Name 1,Account Name 2,Account Name 3,Account Name 4,Account Name 5") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "${accountNames}");

			Accounts.assignUsers(
				accountName = "${accountNames}",
				assigneeName = "userfn userln");
		}

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");

		AssertElementPresent(locator1 = "Pagination#PAGINATION_BAR");

		for (var listEntries : list "4,8,20,60") {
			Pagination.changePagination(itemsPerPage = "${listEntries}");

			if ("${listEntries}" == "4") {
				Pagination.viewResults(results = "Showing 1 to 4 of 6 entries.");

				LexiconEntry.viewNoEntry(rowEntry = "Account Name 4");

				LexiconEntry.viewNoEntry(rowEntry = "Account Name 5");

				for (var accountEntries : list "Account Name,Account Name 1,Account Name 2,Account Name 3") {
					LexiconEntry.viewEntryName(rowEntry = "${accountEntries}");
				}

				Click(locator1 = "Pagination#NEXT_LINK");

				Pagination.viewResults(results = "Showing 5 to 6 of 6 entries.");

				LexiconEntry.viewEntryName(rowEntry = "Account Name 4");

				LexiconEntry.viewEntryName(rowEntry = "Account Name 5");

				for (var accountEntries : list "Account Name,Account Name 1,Account Name 2,Account Name 3") {
					LexiconEntry.viewNoEntry(rowEntry = "${accountEntries}");
				}
			}
			else {
				Pagination.viewResults(results = "Showing 1 to 6 of 6 entries.");

				for (var allAccounts : list "Account Name,Account Name 1,Account Name 2,Account Name 3,Account Name 4,Account Name 5") {
					LexiconEntry.viewEntryName(rowEntry = "${allAccounts}");
				}
			}
		}
	}

	@description = "This test asserts that account users can be filtered by status."
	@priority = "4"
	test CanFilterAccountUsersByStatus {
		task ("Add new users to account") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			for (var userNum : list "2,3,4") {
				JSONAccountEntryUser.addAccountEntryUser(
					accountEntryName = "Account Name",
					userEmailAddress = "userea${userNum}@liferay.com",
					userFirstName = "userfn${userNum}",
					userLastName = "userln${userNum}",
					userScreenName = "usersn${userNum}");
			}
		}

		task ("Deactivate some users") {
			AccountUsers.openAccountUsersAdmin();

			for (var userNum : list "3,4") {
				AccountUsers.deactivateUser(userFirstName = "userfn${userNum}");
			}
		}

		task ("Sign back in as Account Administrator and view account users") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			Accounts.goToEntryMenuItem(
				menuItem = "Manage Users",
				rowEntry = "Account Name");
		}

		task ("Assert users can be filtered by Active status") {
			ManagementBar.setFilterAndOrder(filterBy = "Active");

			LexiconEntry.viewEntryName(rowEntry = "userfn userln");

			LexiconEntry.viewEntryName(rowEntry = "userfn2 userln2");

			for (var userNum : list "3,4") {
				LexiconEntry.viewNoEntry(rowEntry = "userfn${userNum} userln${userNum}");
			}
		}

		task ("Asser users can be filtered by Inactive status") {
			ManagementBar.setFilterAndOrder(filterBy = "Inactive");

			for (var userNum : list "3,4") {
				LexiconEntry.viewEntryName(rowEntry = "userfn${userNum} userln${userNum}");
			}

			LexiconEntry.viewNoEntry(rowEntry = "userfn userln");

			LexiconEntry.viewNoEntry(rowEntry = "userfn2 userln2");
		}
	}

	@description = "This test asserts that an Account Admin cannot view accounts not assigned to him."
	@priority = "5"
	test CannotViewOtherAccounts {
		property portal.acceptance = "true";

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account Name 2",
			accountEntryType = "Business");

		Navigator.gotoPage(pageName = "2B Account Page");

		LexiconEntry.viewEntryName(rowEntry = "Account Name");

		LexiconEntry.viewEntryName(rowEntry = "Account Name 2");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");

		LexiconEntry.viewEntryName(rowEntry = "Account Name");

		LexiconEntry.viewNoEntry(rowEntry = "Account Name 2");
	}

	@description = "This test asserts that only business accounts can be added when the allowed account type is business"
	@priority = "5"
	test CanOnlyAddBusinessAccountsWhenAllowedAccountTypeIsBusiness {
		property portal.acceptance = "true";

		task ("Add account entry permission to Account Admin") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			Accounts.setAddAccountEntryPermissions(
				roleTitle = "Reg Role Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Set allowed account type to business") {
			Accounts.setAllowedAccountTypeInSiteSettings(allowedType = "Business");
		}

		task ("Assert Account Admin can only add business accounts") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			LexiconEntry.gotoAdd();

			PortletEntry.inputName(name = "Business Account Only");

			AssertElementNotPresent(
				key_fieldLabel = "Type",
				key_value = "Person",
				locator1 = "Select#GENERIC_SELECT_VALUE");

			SelectField.select(
				selectFieldLabel = "Type",
				selectFieldValue = "Business");

			Button.clickSave();

			Navigator.gotoPage(pageName = "2B Account Page");

			LexiconEntry.viewEntryName(rowEntry = "Business Account Only");
		}
	}

	@description = "This test asserts that only person accounts can be added when the allowed account type is person"
	@priority = "5"
	test CanOnlyAddPersonAccountsWhenAllowedAccountTypeIsPerson {
		property portal.acceptance = "true";

		task ("Add account entry permission to Account Admin") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			Accounts.setAddAccountEntryPermissions(
				roleTitle = "Reg Role Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Set allowed account type to person") {
			Accounts.setAllowedAccountTypeInSiteSettings(allowedType = "Person");
		}

		task ("Assert Account Admin can only add person accounts") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			LexiconEntry.gotoAdd();

			PortletEntry.inputName(name = "Person Account Only");

			AssertElementNotPresent(
				key_fieldLabel = "Type",
				key_value = "Business",
				locator1 = "Select#GENERIC_SELECT_VALUE");

			SelectField.select(
				selectFieldLabel = "Type",
				selectFieldValue = "Person");

			Button.clickSave();

			Navigator.gotoPage(pageName = "2B Account Page");

			LexiconEntry.viewEntryName(rowEntry = "Person Account Only");
		}
	}

	@description = "This test sets the Allowed Account Type to only Business and assert that only Business Accounts display in Account Management Widget."
	@priority = "4"
	test CanOnlyViewBusinessAccountsWhenAllowedAccountTypeIsBusiness {
		property test.name.skip.portal.instance = "2BAccount#CanOnlyViewBusinessAccountsWhenAllowedAccountTypeIsBusiness";

		task ("Login as Super User to create a Person type account and assign Account Admin to it") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");

			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Person Account",
				accountEntryType = "Person");

			Accounts.openAccountsAdmin();

			Accounts.gotoEdit(accountName = "Person Account");

			Accounts.assignExistingUserToPersonAccount(accountUserName = "userfn");
		}

		task ("View that all accounts are listed") {
			Accounts.openAccountsAdmin();

			for (var accounts : list "Account Name,Person Account") {
				LexiconEntry.viewEntryName(rowEntry = "${accounts}");
			}
		}

		task ("Change account type settings to only allow the viewing of Business Type accounts") {
			var siteName = TestCase.getSiteName(siteName = "${siteName}");

			ApplicationsMenu.gotoSite(site = "${siteName}");

			Accounts.setAllowedAccountTypeInSiteSettings(allowedType = "Business");
		}

		task ("Log back in as Account Administrator and assert that only the Business account is listed and the Person account is not") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			AssertElementPresent(
				key_rowEntry = "Account Name",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

			AssertElementNotPresent(
				key_rowEntry = "Person Account",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");
		}
	}

	@description = "This test sets the Allowed Account Type to only Person and assert that only Person Accounts display in Account Management Widget."
	@priority = "4"
	test CanOnlyViewPersonAccountsWhenAllowedAccountTypeIsPerson {
		property test.name.skip.portal.instance = "2BAccount#CanOnlyViewPersonAccountsWhenAllowedAccountTypeIsPerson";

		task ("Login as Super User to create a Person type account and assign Account Admin to it") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");

			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Person Account",
				accountEntryType = "Person");

			Accounts.openAccountsAdmin();

			Accounts.gotoEdit(accountName = "Person Account");

			Accounts.assignExistingUserToPersonAccount(accountUserName = "userfn");
		}

		task ("View that all accounts are listed") {
			Accounts.openAccountsAdmin();

			for (var accounts : list "Account Name,Person Account") {
				LexiconEntry.viewEntryName(rowEntry = "${accounts}");
			}
		}

		task ("Change account type settings to only allow the viewing of Person Type accounts") {
			var siteName = TestCase.getSiteName(siteName = "${siteName}");

			ApplicationsMenu.gotoSite(site = "${siteName}");

			Accounts.setAllowedAccountTypeInSiteSettings(allowedType = "Person");
		}

		task ("Log back in as Account Administrator and assert that the Business account is not visible and only Person Account is listed") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			AssertElementNotPresent(
				key_rowEntry = "Account Name",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

			AssertElementPresent(
				key_rowEntry = "Person Account",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");
		}
	}

	@description = "This test asserts that an Account Admin can remove a user from an account."
	@priority = "5"
	test CanRemoveUserFromAccount {
		property portal.acceptance = "true";

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		JSONAccountEntryUser.addAccountEntryUser(
			accountEntryName = "Account Name",
			userEmailAddress = "user1@liferay.com",
			userFirstName = "user1",
			userLastName = "user1",
			userScreenName = "user1");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		JSONAccountEntryUser.addAccountEntryUser(
			accountEntryName = "Account Name",
			userEmailAddress = "user2@liferay.com",
			userFirstName = "user2",
			userLastName = "user2",
			userScreenName = "user2");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.goToEntryMenuItem(
			menuItem = "Manage Users",
			rowEntry = "Account Name");

		AssertElementPresent(
			key_tab = "Users",
			locator1 = "NavTab#ACTIVE_TAB_LINK");

		for (var users : list "user1 user1,user2 user2") {
			Accounts.goToEntryMenuItem(
				menuItem = "Remove",
				rowEntry = "${users}");

			AssertConfirm(value1 = "Are you sure you want to remove this user?");
		}

		Navigator.gotoPage(pageName = "2B Account Page");

		Search.searchPG(
			portletName = "Account Management",
			searchTerm = "Account Name");

		Accounts.goToEntryMenuItem(
			menuItem = "Manage Users",
			rowEntry = "Account Name");

		LexiconEntry.viewNoEntry(rowEntry = "user1");

		LexiconEntry.viewNoEntry(rowEntry = "user2");
	}

	@description = "This test asserts that a user can select an account from the list as the active account. Backend tests are covering functionality for account selection."
	@priority = "4"
	test CanSetActiveAccount {
		property portal.acceptance = "true";

		task ("Sign in as Super User to give permissions to add accounts to the Account Administrator user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			Accounts.setAddAccountEntryPermissions(
				roleTitle = "Reg Role Name",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sign in as Account Administrator and create a new account") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			Navigator.gotoPage(pageName = "2B Account Page");

			Accounts.addBusinessAccount(
				accountDescription = "New Active Account Selection",
				accountName = "New Selection for Test");
		}

		task ("Select new account to be main active account, denoted by a checkmark, and assert that previous account is no longer selected") {
			Navigator.gotoPage(pageName = "2B Account Page");

			Accounts.goToEntryMenuItem(
				menuItem = "Select Account",
				rowEntry = "New Selection for Test");

			Accounts.viewSelectedAccount(entryName = "New Selection for Test");

			AssertElementNotPresent(
				key_entryName = "Account Name",
				locator1 = "Account#SELECT_ACCOUNT_ENTRY_CHECKMARK");
		}
	}

	@description = "This test searches for an Account within the list by Account Name and Account ID."
	@priority = "5"
	test CanViewAccountsUserIsAMemberOf {
		Search.searchPG(
			portletName = "Account Management",
			searchTerm = "Account Name");

		LexiconEntry.viewEntryName(rowEntry = "Account Name");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.searchAccountsViaId(accountName = "Account Name");
	}

	@description = "This test filters Accounts by status."
	@priority = "4"
	test FilterByStatus {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Accounts.setAddAccountEntryPermissions(
			roleTitle = "Reg Role Name",
			userEmailAddress = "userea@liferay.com");

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "DELETE",
			resourceName = "com.liferay.account.model.AccountEntry",
			roleTitle = "Account Administrator",
			roleType = "account");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.addBusinessAccount(accountName = "New Active Account");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.goToEntryMenuItem(
			menuItem = "Deactivate",
			rowEntry = "Account Name");

		AssertConfirm(value1 = "Are you sure you want to deactivate this?");

		Alert.viewSuccessMessage();

		Accounts.viewInactiveAccount(accountName = "Account Name");

		LexiconEntry.viewNoEntry(rowEntry = "New Active Account");

		ManagementBar.setFilterAndOrder(filterBy = "Active");

		LexiconEntry.viewNoEntry(rowEntry = "Account Name");

		LexiconEntry.viewEntryStatus(
			rowEntry = "New Active Account",
			rowStatus = "Active");
	}

	@description = "This test filters Accounts by Account Type."
	@priority = "3"
	test FilterByType {
		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		Accounts.setAddAccountEntryPermissions(
			roleTitle = "Reg Role Name",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.gotoPage(pageName = "2B Account Page");

		Accounts.addPersonAccount(accountName = "Person Account");

		Navigator.gotoPage(pageName = "2B Account Page");

		for (var allAccounts : list "Account Name,Person Account") {
			LexiconEntry.viewEntryName(rowEntry = "${allAccounts}");
		}

		for (var filter : list "Business,Person") {
			ManagementBar.setFilterAndOrder(filterBy = "${filter}");

			if ("${filter}" == "Business") {
				LexiconEntry.viewEntryName(rowEntry = "Account Name");

				LexiconEntry.viewNoEntry(rowEntry = "Person Account");
			}
			else if ("${filter}" == "Person") {
				LexiconEntry.viewEntryName(rowEntry = "Person Account");

				LexiconEntry.viewNoEntry(rowEntry = "Account Name");
			}
		}
	}

	@description = "This test asserts that multiple users can be assigned to roles simultaneously."
	@priority = "5"
	test ManyToManyRelationshipAssignmentIsPossible {
		task ("Given an additional account user is created") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Account Name",
				userEmailAddress = "userea2@liferay.com",
				userFirstName = "userfn2",
				userLastName = "userln2",
				userScreenName = "usersn2");

			task ("And given a new account role is created") {
				Accounts.openAccountsAdmin();

				LexiconEntry.gotoEntry(rowEntry = "Account Name");

				Accounts.addOwnedAccountRole(accountRoleTitle = "Test Account Role");
			}
		}

		task ("When both account users are assigned to the default 'Account Administrator' role and the newly created role") {
			Navigator.gotoPage(pageName = "2B Account Page");

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "userfn2");

			for (var accountUserName : list "userfn,userfn2") {
				Accounts.openAccountsAdmin();

				LexiconEntry.gotoEntry(rowEntry = "Account Name");

				Accounts.addAssigneeToRoleViaUsersTab(
					accountRoleTitle = "Test Account Role",
					accountUserName = "${accountUserName}");
			}
		}

		task ("Then the accounts table should display both users holding both roles simultaneously") {
			for (var user : list "userfn userln,userfn2 userln2") {
				AssertTextEquals(
					key_columnName = "lfr-account-roles-column",
					key_rowEntry = "${user}",
					locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER_TD",
					value1 = "Account Administrator, Test Account Role");
			}
		}
	}

}