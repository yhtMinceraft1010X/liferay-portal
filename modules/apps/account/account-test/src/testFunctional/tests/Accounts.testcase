@component-name = "portal-user-management-and-portal-configuration"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Account";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Accounts.tearDownCP();
		}
	}

	@description = "This test asserts that a user can view all the Account Groups an account is assigned to via Account details page"
	@priority = "4"
	test AccountGroupsAreDisplayedInAccountDetailsPage {
		property portal.acceptance = "true";

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Accounts Name",
			accountEntryType = "Business");

		AccountGroups.openAccountGroupsAdmin();

		for (var accountGroupNum : list "1,2,3") {
			AccountGroups.addCP(
				accountGroupDescription = "Account Group Description ${accountGroupNum}",
				accountGroupName = "Account Group ${accountGroupNum}");

			Navigator.gotoNavTab(navTab = "Accounts");

			AccountGroups.addAssignee(
				accountGroupName = "Account Group ${accountGroupNum}",
				assigneeNames = "Accounts Name",
				assigneeType = "Accounts");

			Navigator.gotoBack();
		}

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Accounts Name");

		Accounts.gotoAssigneeTab(assigneeTab = "Account Groups");

		for (var accountGroupNum : list "1,2,3") {
			AssertTextEquals(
				key_columnName = "lfr-name",
				key_tableEntry = "Account Group ${accountGroupNum}",
				locator1 = "LexiconTable#TABLE_ENTRY_INFO",
				value1 = "Account Group ${accountGroupNum}");

			AssertTextEquals(
				key_columnName = "lfr-description",
				key_tableEntry = "Account Group ${accountGroupNum}",
				locator1 = "LexiconTable#TABLE_ENTRY_INFO",
				value1 = "Account Group Description ${accountGroupNum}");
		}
	}

	@description = "This test asserts that an account name will automatically truncate and will stop adding more characters as you type after it reaches the character limit of 100."
	@priority = "5"
	test AccountNameCannotExceed100Characters {
		task ("When a user types an account name with more than 100 characters") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoAdd();

			PortletEntry.inputName(name = "Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet");
		}

		task ("Then only the first 100 characters are typed in. No more than 100 characters can be added") {
			AssertTextEquals(
				locator1 = "TextInput#NAME",
				value1 = "Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor s");

			AssertTextNotEquals(
				locator1 = "TextInput#NAME",
				value1 = "Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet");

			Button.clickSave();

			Accounts.openAccountsAdmin();

			LexiconEntry.viewNoEntry(rowEntry = "Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet");
		}
	}

	@description = "This is a use case for LPS-101893. It asserts all accounts display properly across pages."
	@priority = "4"
	test AccountsDisplayWhenChangingPagination {
		for (var accountNum : list "1,2,3,4,5,6") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Accounts Name ${accountNum}",
				accountEntryType = "Business");
		}

		Accounts.openAccountsAdmin();

		Pagination.changePagination(itemsPerPage = "4");

		for (var accountNum : list "1,2,3,4") {
			LexiconEntry.viewEntryName(rowEntry = "Accounts Name ${accountNum}");
		}

		Pagination.viewResults(results = "Showing 1 to 4 of 6 entries.");

		Click(locator1 = "Pagination#NEXT_LINK");

		for (var accountNum : list "5,6") {
			LexiconEntry.viewEntryName(rowEntry = "Accounts Name ${accountNum}");
		}

		Pagination.viewResults(results = "Showing 5 to 6 of 6 entries.");
	}

	@description = "Duplicate External Reference Codes should not be allowed for multiple accounts in the same company. If a duplicate ERC is submitted, the form will not be saved and an error message will inform the user that the ERC belongs to another account."
	@priority = "4"
	test AccountWithDuplicateExternalReferenceCodeIsNotSaved {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountName = "Business Account Name",
			externalReferenceCode = "AAA-0100");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoAdd();

		PortletEntry.inputName(name = "Another Account");

		PortletEntry.inputText(
			fieldLabel = "External Reference Code",
			text = "AAA-0100");

		Button.clickSave();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_1",
			value1 = "The given external reference code belongs to another account.");

		Accounts.openAccountsAdmin();

		LexiconEntry.viewEntryName(rowEntry = "Business Account Name");

		LexiconEntry.viewNoEntry(rowEntry = "Another Account");
	}

	@description = "This test makes sure that only one user can be assigned to a Person Account. When you add another person to a Person Account with assigned user, it will only replace the existing user and not add another one."
	@priority = "4"
	test AddingSecondUserToPersonAccountWillReplaceFirstUser {
		property portal.acceptance = "true";

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Person Account",
			accountEntryType = "Person");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Person Account");

		JSONAccountEntryUser.addAccountEntryUser(
			accountEntryName = "Person Account",
			userEmailAddress = "userfn1@liferay.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1");

		Accounts.addNewUserToPersonAccount(
			accountName = "Person Account",
			userEmailAddress = "userfn2@liferay.com",
			userFirstName = "userfn2",
			userLastName = "userln2",
			userScreenName = "usersn2");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.viewEntryAccounts(
			accountName = "Person Account",
			accountUserName = "userfn2 userln2");

		LexiconEntry.viewNoEntry(rowEntry = "userfn1 userln1");

		ManagementBar.setFilterAndOrder(filterBy = "No Assigned Account");

		AccountUsers.viewEntryAccounts(
			accountName = "No Assigned Account",
			accountUserName = "userfn1 userln1");
	}

	@description = "This test adds an address to account and asserts this address is not shared across accounts"
	@priority = "3"
	test AddressesAreAccountSpecific {
		property testray.component.names = "Address";

		for (var accountNumber : list "1,2") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account ${accountNumber}",
				accountEntryType = "Business");
		}

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account 1");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddress(
			addressCity = "Dalian",
			addressCountry = "China",
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressPostalCode = "116023",
			addressRegion = "Liaoning Sheng",
			addressStreet1 = "537 Huangpu Road Taide Building,",
			addressStreet2 = "1005 High-Tech Zone",
			phoneNumber = "+86 (0)411 88120855");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account 2");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No addresses were found.");
	}

	@description = "This test asserts that only the chosen address type displays when setting default shipping and billing addresses"
	@priority = "5"
	test AddressesFilterCorrectlyDefaultAddress {
		property portal.acceptance = "true";
		property testray.component.names = "Address";

		task ("Add account") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Business");
		}

		task ("Add a billing address and a shipping address to account") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

			Accounts.addAddress(
				addressCity = "Diamond Bar",
				addressCountry = "United States",
				addressName = "Liferay, Inc.",
				addressPostalCode = "91765",
				addressRegion = "California",
				addressStreet1 = "1400 Montefino Ave",
				addressType = "Billing",
				phoneNumber = "+1-877-LIFERAY (1-877-543-3729)");

			Accounts.addAddress(
				addressCity = "Dalian",
				addressCountry = "China",
				addressName = "Liferay Dalian Software Co., Ltd.",
				addressPostalCode = "116023",
				addressRegion = "Liaoning Sheng",
				addressStreet1 = "537 Huangpu Road Taide Building,",
				addressStreet2 = "1005 High-Tech Zone",
				addressType = "Shipping",
				phoneNumber = "+86 (0)411 88120855");
		}

		task ("Assert shipping addresses and filter by address type are not availabile when setting default billing address") {
			Accounts.gotoAssigneeTab(assigneeTab = "Details");

			Click(locator1 = "Account#DEFAULT_ACCOUNT_ADDRESSES_SET_DEFAULT_BILLING");

			SelectFrame(
				key_title = "Set Default Billing Address",
				locator1 = "IFrame#MODAL_ANY");

			ManagementBar.viewNoSubheaderInFilterAndOrder(subheadItem = "Filter by Type");

			LexiconEntry.viewEntryName(rowEntry = "Liferay, Inc.");

			LexiconEntry.viewNoEntry(rowEntry = "Liferay Dalian Software Co., Ltd.");
		}

		task ("Assert billing addresses and filter by address type are not availabile when setting default shipping address") {
			SelectFrameTop();

			Click(locator1 = "Account#DEFAULT_ACCOUNT_ADDRESSES_SET_DEFAULT_SHIPPING");

			SelectFrame(
				key_title = "Set Default Shipping Address",
				locator1 = "IFrame#MODAL_ANY");

			ManagementBar.viewNoSubheaderInFilterAndOrder(subheadItem = "Filter by Type");

			LexiconEntry.viewEntryName(rowEntry = "Liferay Dalian Software Co., Ltd.");

			LexiconEntry.viewNoEntry(rowEntry = "Liferay, Inc.");
		}
	}

	@description = "This test asserts that an Account Manager can view all accounts that are added by other users in the Accounts Admin portlet, not just the ones he created"
	@priority = "5"
	test AllAccountsEntriesDisplay {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		task ("Add several accounts") {
			for (var accountNum : list "1,2,3") {
				JSONAccountEntry.addAccountEntry(
					accountEntryName = "Account Name ${accountNum}",
					accountEntryType = "Business");
			}
		}

		task ("Add a user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Assign Administrator role to user") {
			JSONRole.assignRoleToUser(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com");
		}

		task ("Sign in as the Administrator") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");
		}

		task ("Assert all added account entries display") {
			Accounts.openAccountsAdmin();

			for (var accountNum : list "1,2,3") {
				LexiconEntry.viewEntryName(rowEntry = "Account Name ${accountNum}");
			}
		}
	}

	@description = "Use case for LPS-139430. Asserts a user can be assigned to an account through the Users Admin portlet"
	@priority = "3"
	test AssignUserToAccountViaUsersAdmin {
		task ("Given two accounts are created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Test 1",
				accountEntryType = "Business");

			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Test 2",
				accountEntryType = "Business");

			task ("And given an account user is added to one of those accounts") {
				JSONAccountEntryUser.addAccountEntryUser(
					accountEntryName = "Account Test 1",
					userEmailAddress = "userea@liferay.com",
					userFirstName = "userfn",
					userLastName = "userln",
					userScreenName = "usersn");
			}
		}

		task ("When assigning the second account through the Users Admin to the same user") {
			User.assignAccountCP(
				accountName = "Account Test 2",
				userScreenName = "usersn");
		}

		task ("Then both accounts should be listed when viewing the user's memberships via Users Admin") {
			User.openUsersAdmin();

			UserNavigator.gotoUser(userScreenName = "usersn");

			UserNavigator.gotoMemberships();

			for (var accountName : list "Account Test 1,Account Test 2") {
				AssertElementPresent(
					key_accountName = "${accountName}",
					locator1 = "UsersAndOrganizationsEditUser#ACCOUNTS_TABLE_ACCOUNT_NAMES");
			}
		}
	}

	@description = "This test asserts that a domain blocked in one instance will not be blocked when creating a separate virtual instance."
	@priority = "4"
	test BlockedDomainsAreInstanceWide {
		property test.name.skip.portal.instance = "Accounts#BlockedDomainsAreInstanceWide";

		task ("Block google.com domain and create a new account") {
			AccountConfiguration.addBlockedEmailDomain(settingValues = "google.com");

			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Business Account",
				accountEntryType = "Business");
		}

		task ("Attempt to add a user with a blocked domain and assert the warning and error") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Business Account");

			Accounts.viewErrorWhenAddingUserWithBlockedDomain(
				accountName = "Business Account",
				assigneeName = "userfn",
				emailDomainName = "google.com",
				userEmailAddress = "userea@google.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("Set up a new virtual instance and create a new account") {
			Navigator.openURL();

			SAML.addVirtualInstances(virtualHosts = "www.able.com");

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			Navigator.openSpecificURL(url = "http://www.able.com:8080/group/guest/~/control_panel/manage?p_p_id=com_liferay_account_admin_web_internal_portlet_AccountEntriesAdminPortlet");

			Accounts.addBusinessAccount(accountName = "New Instance Account");
		}

		task ("Add a user with the same domain and assert the error message for blocked domains does not display") {
			Accounts.gotoAssigneeTab(assigneeTab = "Users");

			LexiconEntry.gotoAdd();

			SelectFrame(
				key_title = "Assign Users to New Instance Account",
				locator1 = "IFrame#MODAL_ANY");

			LexiconEntry.gotoAdd();

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_SCREEN_NAME_FIELD",
				value1 = "googleUser");

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_EMAIL_ADDRESS_FIELD",
				value1 = "user@google.com");

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_FIRST_NAME_FIELD",
				value1 = "googleUser");

			Type(
				locator1 = "UsersAndOrganizationsEditUser#DETAILS_LAST_NAME_FIELD",
				value1 = "googleUser");

			AssertTextNotPresent(value1 = "google.com is a blocked domain. Account administrators cannot add users with this domain to their accounts. You can still manually assign this email address to this user.");

			AssertClick(
				locator1 = "Button#SAVE",
				value1 = "Save");

			Alert.viewSuccessMessage();

			Navigator.openSpecificURL(url = "http://www.able.com:8080/group/guest/~/control_panel/manage?p_p_id=com_liferay_account_admin_web_internal_portlet_AccountUsersAdminPortlet");

			AssertTextEquals(
				key_columnName = "lfr-email-column",
				key_rowEntry = "googleUser googleUser",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER_TD",
				value1 = "user@google.com");
		}
	}

	@description = "This test adds a new user via the Users tab of an Account"
	@priority = "4"
	test CanAddAccountUserViaAssignUser {
		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Assign Account User",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Assign Account User");

		Accounts.addNewUserToBusinessAccount(
			accountName = "Assign Account User",
			assigneeName = "userfn",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Assign Account User");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.viewAssignee(assigneeName = "userfn");
	}

	@description = "This test adds and removes a user assignee to an Owned or account specific role."
	@priority = "4"
	test CanAddAndRemoveAssigneeToAnOwnedAccountRole {
		property portal.acceptance = "true";

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account Name",
			accountEntryType = "Business");

		JSONAccountEntryUser.addAccountEntryUser(
			accountEntryName = "Account Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.addOwnedAccountRole(accountRoleTitle = "Account Role Title");

		Accounts.addAssigneeToRole(
			accountRoleTitle = "Account Role Title",
			assigneeName = "userfn");

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.gotoAssigneeTab(assigneeTab = "Roles");

		// Navigate to assignees via menu item and removes existing assignee from role

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Assign Users",
			rowEntry = "Account Role Title");

		LexiconEntry.selectEntry(rowEntry = "userfn userln");

		ClickNoError(
			key_text = "times-circle",
			locator1 = "Icon#ANY");

		AssertConfirm(value1 = "Are you sure you want to remove the selected users?");

		Alert.viewSuccessMessage();

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "There are no users associated with this role.");
	}

	@description = "This test adds and removes multiple organizations from an account via management toolbar."
	@priority = "4"
	test CanAddAndRemoveOrganizationsInBulk {
		for (var organizationNumber : list "1,2,3,4") {
			JSONOrganization.addOrganization(
				organizationName = "Organization ${organizationNumber}",
				organizationSite = "true");
		}

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account with Organization",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Organization");

		Accounts.assignMultipleOrganizations(
			accountName = "Account with Organization",
			organizationNumber = "1,3,4");

		for (var organizationNumber : list "1,3,4") {
			Accounts.viewAssignee(assigneeName = "Organization ${organizationNumber}");
		}

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Organization");

		Accounts.unassignMultipleOrganizations(
			accountName = "Account Name",
			organizationNumber = "1,3");

		for (var organizationNumber : list "1,3") {
			LexiconEntry.viewNoEntry(rowEntry = "Organization ${organizationNumber}");
		}

		LexiconEntry.viewEntryName(rowEntry = "Organization 4");
	}

	@description = "This test adds a Person Account by changing the type in the dropdown upon creation."
	@priority = "4"
	test CanAddAPersonAccount {
		Accounts.openAccountsAdmin();

		Accounts.addPersonAccount(
			accountDescription = "This is a Person Account.",
			accountName = "Person Account");

		Accounts.openAccountsAdmin();

		Search.searchCP(searchTerm = "Person Account");

		Accounts.viewAccountDetails(
			accountDescription = "This is a Person Account.",
			accountName = "Person Account",
			accountType = "Person");
	}

	@description = "This test adds a category to an account"
	@priority = "3"
	test CanAddCategoryToAnAccount {
		JSONCategory.addVocabulary(
			groupName = "Global",
			title = "Vocabulary Name 1");

		JSONCategory.addCategory(
			groupName = "Global",
			title = "Category Name 1",
			vocabularyName = "Vocabulary Name 1");

		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccountWithCategory(
			accountName = "Account with Category",
			categoryName = "Category Name 1",
			vocabularyName = "Vocabulary Name 1");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Category");

		AssetCategorization.viewCategory(categoryName = "Category Name 1");

		AssetCategorization.viewVocabulary(vocabularyName = "Vocabulary Name 1");
	}

	@description = "This test asserts that multiple accounts can be added with the same domain"
	@priority = "3"
	test CanAddMultipleAccountsWithSameDomain {
		task ("Enable account email domains") {
			AccountConfiguration.enableAccountEmailDomain();
		}

		task ("Add multiple accounts with the same domain") {
			Accounts.openAccountsAdmin();

			for (var accountNum : list "1,2,3") {
				Accounts.addAccountWithDomain(
					accountName = "Account Name ${accountNum}",
					domainNames = "liferay.com");

				Accounts.openAccountsAdmin();

				LexiconEntry.viewEntryName(rowEntry = "Account Name ${accountNum}");
			}
		}
	}

	@description = "This test asserts that users can add more than one domain to a business account."
	@priority = "4"
	test CanAddMultipleDomainsToAccount {
		property portal.acceptance = "true";

		AccountConfiguration.enableAccountEmailDomain();

		Accounts.openAccountsAdmin();

		Accounts.addAccountWithDomain(
			accountName = "Account with Multi Domains",
			domainNames = "liferay.com,Google.com,si-na.com,9teen.com");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Multi Domains");

		for (var domainName : list "liferay.com,Google.com,si-na.com,9teen.com") {
			AssertElementPresent(
				key_domainName = "${domainName}",
				locator1 = "Account#VALID_DOMAINS_DOMAIN_NAME");
		}
	}

	@description = "This test adds a new shipping address and billing address via Set Default Address. It asserts that these addresses are set by default after adding."
	@priority = "3"
	test CanAddNewAddressViaSetDefaultAddress {
		property testray.component.names = "Address";

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account Name",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		AssertClick(
			locator1 = "Account#DEFAULT_ACCOUNT_ADDRESSES_SET_DEFAULT_SHIPPING",
			value1 = "Set Default Address");

		SelectFrame(
			key_title = "Set Default Shipping Address",
			locator1 = "IFrame#MODAL_ANY");

		Accounts.addAddressViaSetDefaultAddress(
			addressCity = "Diamond Bar",
			addressCountry = "United States",
			addressName = "Liferay, Inc.",
			addressPostalCode = "91765",
			addressRegion = "California",
			addressStreet1 = "1400 Montefino Ave",
			phoneNumber = "+1-877-LIFERAY (1-877-543-3729)");

		AssertClick(
			locator1 = "Account#DEFAULT_ACCOUNT_ADDRESSES_SET_DEFAULT_BILLING",
			value1 = "Set Default Address");

		SelectFrame(
			key_title = "Set Default Billing Address",
			locator1 = "IFrame#MODAL_ANY");

		Accounts.addAddressViaSetDefaultAddress(
			addressCity = "Shibuya-ku",
			addressCountry = "Japan",
			addressName = "Liferay Japan K. K.",
			addressPostalCode = "150-0021",
			addressRegion = "Tokyo",
			addressStreet1 = "1F Faveur Ebisu,",
			addressStreet2 = "1-26-7 Ebisu Nishi",
			phoneNumber = "+81 3-5456-5796");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.viewDefaultShippingAddress(
			addressCity = "Diamond Bar",
			addressCountry = "United States",
			addressName = "Liferay, Inc.",
			addressPostalCode = "91765",
			addressRegion = "California",
			addressStreet1 = "1400 Montefino Ave",
			addressType = "Billing",
			phoneNumber = "+1-877-LIFERAY (1-877-543-3729)");

		Accounts.viewDefaultBillingAddress(
			addressCity = "Shibuya-ku",
			addressCountry = "Japan",
			addressName = "Liferay Japan K. K.",
			addressPostalCode = "150-0021",
			addressRegion = "Tokyo",
			addressStreet1 = "1F Faveur Ebisu,",
			addressStreet2 = "1-26-7 Ebisu Nishi",
			addressType = "Shipping",
			phoneNumber = "+81 3-5456-5796");
	}

	@description = "This test assigns an existing user to account through the Users tab"
	@priority = "4"
	test CanAssignExistingUserToAccount {
		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account Name",
			accountEntryType = "Business");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Account Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		AccountConfiguration.enableAccountEmailDomain();

		Accounts.openAccountsAdmin();

		Accounts.addAccountWithDomain(
			accountDescription = "This is a test for adding user to account.",
			accountName = "Account with Exist User",
			domainNames = "liferay.com");

		Accounts.assignUsers(
			accountName = "Account with Exist User",
			assigneeName = "userfn");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Exist User");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.viewAssignee(assigneeName = "userfn");
	}

	@description = "This test asserts that multiple users can be assigned to an account via the Assign Users Modal"
	@priority = "4"
	test CanAssignMultipleUsersViaAssignUsersModal {
		task ("Create an account and add 4 users into it") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Business Account",
				accountEntryType = "Business");

			for (var userNum : list "1,2,3,4") {
				JSONAccountEntryUser.addAccountEntryUser(
					accountEntryName = "Business Account",
					userEmailAddress = "userea${userNum}@liferay.com",
					userFirstName = "userfn${userNum}",
					userLastName = "userln${userNum}",
					userScreenName = "usersn${userNum}");
			}
		}

		task ("Remove all users from Account so they can later be assigned") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Business Account");

			Accounts.gotoAssigneeTab(assigneeTab = "Users");

			PortletEntry.selectAll();

			ClickNoError(
				key_text = "times-circle",
				locator1 = "Icon#ANY");

			AssertConfirm.waitForConfirmation(value1 = "Are you sure you want to remove the selected users?");

			Alert.viewSuccessMessage();
		}

		task ("Open and click into the Assign Users Modal") {
			LexiconEntry.gotoAdd();

			WaitForElementPresent(
				key_title = "Assign Users to Business Account",
				locator1 = "IFrame#MODAL_ANY");

			SelectFrame(
				key_title = "Assign Users to Business Account",
				locator1 = "IFrame#MODAL_ANY");
		}

		task ("Assign multiple users from Assign Users modal and assert that the correct users were added") {
			for (var accountUser : list "1,2,3") {
				LexiconEntry.selectEntry(rowEntry = "userfn${accountUser} userln${accountUser}");
			}

			SelectFrameTop();

			Button.clickAssign();

			Alert.viewSuccessMessage();

			for (var accountUser : list "1,2,3") {
				LexiconEntry.viewEntryName(rowEntry = "userfn${accountUser} userln${accountUser}");
			}

			LexiconEntry.viewNoEntry(rowEntry = "userfn4 userln4");
		}
	}

	@description = "This test adds an organization as an assignee of a business account"
	@priority = "4"
	test CanAssignOrganizationToBusinessAccount {
		JSONOrganization.addOrganization(
			organizationName = "Organization for Account",
			organizationSite = "true");

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account with Organization",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Organization");

		Accounts.assignOrganizations(
			accountName = "Account with Organization",
			assigneeName = "Organization for Account");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Organization");

		Accounts.gotoAssigneeTab(assigneeTab = "Organizations");

		Accounts.viewAssignee(assigneeName = "Organization for Account");
	}

	@description = "This test assigns a role to an Account User in the Account Details page via Users tab"
	@priority = "4"
	test CanAssignRolesViaUsersTab {
		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account Name",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.addOwnedAccountRole(accountRoleTitle = "Account Specific Role");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Account Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.addAssigneeToRoleViaUsersTab(
			accountRoleTitle = "Account Administrator",
			accountUserName = "userfn userln");

		AssertTextEquals(
			key_columnName = "lfr-account-roles-column",
			key_rowEntry = "userfn userln",
			locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER_TD",
			value1 = "Account Administrator");

		Accounts.addAssigneeToRoleViaUsersTab(
			accountRoleTitle = "Account Specific Role",
			accountUserName = "userfn userln");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Navigator.gotoNavTab(navTab = "Users");

		AssertTextEquals(
			key_columnName = "lfr-account-roles-column",
			key_rowEntry = "userfn userln",
			locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER_TD",
			value1 = "Account Administrator, Account Specific Role");
	}

	@description = "This test updates an account's status from Active to Inactive asserts change saves successfully."
	@priority = "4"
	test CanChangeAccountStatusToInactiveThenActiveViaEdit {
		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Change Account Status",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		Accounts.editCP(
			accountName = "Change Account Status",
			accountNameEdit = "Edited Account Name",
			accountStatusEdit = "Inactive");

		Accounts.openAccountsAdmin();

		LexiconEntry.viewNoEntry(rowEntry = "Edited Account Name");

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		LexiconEntry.viewEntryStatus(
			rowEntry = "Edited Account Name",
			rowStatus = "Inactive");

		LexiconEntry.gotoEntry(rowEntry = "Edited Account Name");

		Check.checkToggleSwitch(locator1 = "ToggleSwitch#ACCOUNT_STATUS");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Accounts.openAccountsAdmin();

		LexiconEntry.viewEntryStatus(
			rowEntry = "Edited Account Name",
			rowStatus = "Active");
	}

	@description = "This test asserts that address type can be changed from Billing to Shipping and vice versa."
	@priority = "5"
	test CanChangeAddressType {
		property portal.acceptance = "true";
		property testray.component.names = "Address";

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Change Account Address Type",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Change Account Address Type");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddress(
			addressCity = "Dalian",
			addressCountry = "China",
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressPostalCode = "116023",
			addressRegion = "Liaoning Sheng",
			addressStreet1 = "537 Huangpu Road Taide Building,",
			addressStreet2 = "1005 High-Tech Zone",
			phoneNumber = "+86 (0)411 88120855");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Change Account Address Type");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		LexiconEntry.viewEntryName(rowEntry = "Liferay Dalian Software Co., Ltd.");

		for (var rowAny : list "537 Huangpu Road Taide Building,Dalian,Liaoning Sheng,116023,Billing and Shipping") {
			LexiconEntry.viewEntryContent(
				rowAny = "${rowAny}",
				rowEntry = "Liferay Dalian Software Co., Ltd.");
		}

		Accounts.editAddress(
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressType = "Shipping");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Change Account Address Type");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		for (var rowAny : list "537 Huangpu Road Taide Building,Dalian,Liaoning Sheng,116023,Shipping") {
			LexiconEntry.viewEntryContent(
				rowAny = "${rowAny}",
				rowEntry = "Liferay Dalian Software Co., Ltd.");
		}

		Accounts.editAddress(
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressType = "Billing");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Change Account Address Type");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		for (var rowAny : list "537 Huangpu Road Taide Building,Dalian,Liaoning Sheng,116023,Billing") {
			LexiconEntry.viewEntryContent(
				rowAny = "${rowAny}",
				rowEntry = "Liferay Dalian Software Co., Ltd.");
		}
	}

	@description = "This test adds more than 4 addresses to an account and asserts correct pagination in the address list."
	@priority = "3"
	test CanChangePaginationInAddressesList {
		property testray.component.names = "Address";

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account Name",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddress(
			addressCity = "Chicago",
			addressCountry = "United States",
			addressName = "Chicago",
			addressPostalCode = "60606",
			addressRegion = "Illinois",
			addressStreet1 = "205 W. Wacker Dr",
			addressStreet2 = "Suite 720",
			addressType = "Billing",
			phoneNumber = "+1-877-LIFERAY (1-877-543-3729)");

		Accounts.addAddress(
			addressCity = "Hamilton",
			addressCountry = "United States",
			addressName = "Hamilton",
			addressPostalCode = "45011",
			addressRegion = "Ohio",
			addressStreet1 = "10 Journal Square",
			addressStreet2 = "Suite 200",
			addressType = "Billing",
			phoneNumber = "+1-877-LIFERAY (1-877-543-3729)");

		Accounts.addAddress(
			addressCity = "Shibuya-ku",
			addressCountry = "Japan",
			addressName = "Japan K. K.",
			addressPostalCode = "150-0021",
			addressRegion = "Tokyo",
			addressStreet1 = "1F Faveur Ebisu,",
			addressStreet2 = "1-26-7 Ebisu Nishi",
			addressType = "Shipping",
			phoneNumber = "+81 3-5456-5796");

		Accounts.addAddress(
			addressCity = "Recife",
			addressCountry = "Brazil",
			addressName = "Latin America Ltda",
			addressPostalCode = "2480",
			addressRegion = "São Paulo",
			addressStreet1 = "Alameda Santos",
			addressStreet2 = "7 andar",
			addressType = "Billing",
			phoneNumber = "+55 11 3377-7530");

		Accounts.addAddress(
			addressCity = "Diamond Bar",
			addressCountry = "United States",
			addressName = "Los Angeles",
			addressPostalCode = "91765",
			addressRegion = "California",
			addressStreet1 = "1400 Montefino Ave",
			addressType = "Billing",
			phoneNumber = "+1-877-LIFERAY (1-877-543-3729)");

		Accounts.addAddress(
			addressCity = "Madrid",
			addressCountry = "Spain",
			addressName = "Spain and Portugal",
			addressPostalCode = "28046",
			addressRegion = "Madrid",
			addressStreet1 = "Paseo de la Castellana",
			addressStreet2 = "280 Planta 1. Modulo B",
			addressType = "Billing",
			phoneNumber = "+34 91 733 63 43");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Pagination.changePagination(itemsPerPage = "4");

		for (var addressName : list "Chicago,Hamilton,Japan K. K.,Latin America Ltda") {
			LexiconEntry.viewEntryName(rowEntry = "${addressName}");
		}

		for (var addressName : list "Los Angeles,Spain and Portugal") {
			LexiconEntry.viewNoEntry(rowEntry = "${addressName}");
		}

		Pagination.viewResults(results = "Showing 1 to 4 of 6 entries.");

		Click(locator1 = "Pagination#NEXT_LINK");

		for (var addressName : list "Los Angeles,Spain and Portugal") {
			LexiconEntry.viewEntryName(rowEntry = "${addressName}");
		}

		for (var addressName : list "Chicago,Hamilton,Japan K. K.,Latin America Ltda") {
			LexiconEntry.viewNoEntry(rowEntry = "${addressName}");
		}

		Pagination.viewResults(results = "Showing 5 to 6 of 6 entries.");
	}

	@description = "Assert that the pagination is changable when assigning organizations to an account."
	@priority = "4"
	test CanChangePaginationInAssignOrganizations {
		task ("Setting up an account with organizations.") {
			for (var organizationNumber : list "1,2,3,4,5,6,7") {
				JSONOrganization.addOrganization(
					organizationName = "Organization ${organizationNumber}",
					organizationSite = "true");
			}

			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account with Organization",
				accountEntryType = "Business");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account with Organization");

			Accounts.gotoAssigneeTab(assigneeTab = "Organizations");
		}

		task ("Changing the numbers assigned to a page on the Assign Organizations to Account with Organization modal and checking them.") {
			LexiconEntry.gotoAdd();

			SelectFrame(
				key_title = "Assign Organizations to Account with Organization",
				locator1 = "IFrame#MODAL_ANY");

			Pagination.changePagination(itemsPerPage = "4");

			for (var organizationNumber : list "1,2,3,4") {
				LexiconEntry.viewEntryName(rowEntry = "Organization ${organizationNumber}");
			}

			Pagination.viewResults(results = "Showing 1 to 4 of 7 entries.");

			for (var organizationNumber : list "5,6,7") {
				LexiconEntry.viewNoEntry(rowEntry = "Organization ${organizationNumber}");
			}

			Click(locator1 = "Pagination#NEXT_LINK");

			for (var organizationNumber : list "5,6,7") {
				LexiconEntry.viewEntryName(rowEntry = "Organization ${organizationNumber}");
			}

			Pagination.viewResults(results = "Showing 5 to 7 of 7 entries.");

			for (var organizationNumber : list "1,2,3,4") {
				LexiconEntry.viewNoEntry(rowEntry = "Organization ${organizationNumber}");
			}
		}
	}

	@description = "This test asserts that pagination can be changed in the Assign Users Modal."
	@priority = "4"
	test CanChangePaginationInAssignUsersModal {
		task ("Add an account and add 5 users to it") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Business Account",
				accountEntryType = "Business");

			for (var userNum : list "1,2,3,4,5") {
				JSONAccountEntryUser.addAccountEntryUser(
					accountEntryName = "Business Account",
					userEmailAddress = "userea${userNum}@liferay.com",
					userFirstName = "userfn${userNum}",
					userLastName = "userln${userNum}",
					userScreenName = "usersn${userNum}");
			}
		}

		task ("Open and click into the Assign Users Modal") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Business Account");

			Accounts.gotoAssigneeTab(assigneeTab = "Users");

			LexiconEntry.gotoAdd();

			WaitForElementPresent(
				key_title = "Assign Users to Business Account",
				locator1 = "IFrame#MODAL_ANY");

			SelectFrame(
				key_title = "Assign Users to Business Account",
				locator1 = "IFrame#MODAL_ANY");
		}

		task ("Assert pagination can be changed and correct entries and amount are displayed") {
			for (var listEntries : list "4,8,20") {
				Pagination.changePagination(itemsPerPage = "${listEntries}");

				if ("${listEntries}" == "4") {
					Pagination.viewResults(results = "Showing 1 to 4 of 6 entries.");

					LexiconEntry.viewNoEntry(rowEntry = "userfn4 userln4");

					for (var accountUsers : list "Test Test,userfn1 userln1,userfn2 userln2,userfn3 userln3") {
						LexiconEntry.viewEntryName(rowEntry = "${accountUsers}");
					}

					Click(locator1 = "Pagination#NEXT_LINK");

					Pagination.viewResults(results = "Showing 5 to 6 of 6 entries.");

					LexiconEntry.viewEntryName(rowEntry = "userfn4 userln4");

					LexiconEntry.viewEntryName(rowEntry = "userfn5 userln5");

					for (var accountUsers : list "Test Test,userfn1 userln1,userfn2 userln2,userfn3 userln3") {
						LexiconEntry.viewNoEntry(rowEntry = "${accountUsers}");
					}
				}
				else {
					Pagination.viewResults(results = "Showing 1 to 6 of 6 entries.");

					for (var allUsers : list "Test Test,userfn1 userln1,userfn2 userln2,userfn3 userln3,userfn4 userln4,userfn5 userln5") {
						LexiconEntry.viewEntryName(rowEntry = "${allUsers}");
					}
				}
			}
		}
	}

	@description = "This test adds more than 3 Owned Roles to an account and asserts correct pagination in the Roles list."
	@priority = "3"
	test CanChangePaginationInRolesList {
		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account with Role",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Role");

		for (var accountRoleNumber : list "1,2,3,4") {
			Accounts.addOwnedAccountRole(accountRoleTitle = "Account Role ${accountRoleNumber}");

			Navigator.gotoBack();
		}

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Role");

		Accounts.gotoAssigneeTab(assigneeTab = "Roles");

		Pagination.changePagination(itemsPerPage = "4");

		for (var accountRoleName : list "Account Administrator,Account Role 1,Account Role 2,Account Role 3") {
			LexiconEntry.viewEntryName(rowEntry = "${accountRoleName}");
		}

		LexiconEntry.viewNoEntry(rowEntry = "Account Role 4");

		Pagination.viewResults(results = "Showing 1 to 4 of 5 entries.");

		Click(locator1 = "Pagination#NEXT_LINK");

		LexiconEntry.viewEntryName(rowEntry = "Account Role 4");

		for (var accountRoleName : list "Account Administrator,Account Role 1,Account Role 2,Account Role 3") {
			LexiconEntry.viewNoEntry(rowEntry = "${accountRoleName}");
		}

		Pagination.viewResults(results = "Showing 5 to 5 of 5 entries.");
	}

	@description = "This test deactivates an active account and asserts account displays in correct filter."
	@priority = "4"
	test CanDeactivateAccount {
		property portal.acceptance = "true";

		for (var accountNumber : list "1,2,3") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Accounts Name ${accountNumber} for Test",
				accountEntryType = "Business");
		}

		Accounts.openAccountsAdmin();

		Accounts.deactivateAccount(accountName = "Accounts Name 1 for Test");

		Accounts.viewInactiveAccount(accountName = "Accounts Name 1 for Test");

		Accounts.openAccountsAdmin();

		Accounts.deactivateAccount(
			accountName = "Accounts Name 2 for Test",
			deactivateType = "Hide Icon");

		Accounts.viewInactiveAccount(accountName = "Accounts Name 2 for Test");

		Accounts.openAccountsAdmin();

		Accounts.deactivateAccount(
			accountName = "Accounts Name 3 for Test",
			deactivateType = "Management Toolbar");

		Accounts.viewInactiveAccount(accountName = "Accounts Name 3 for Test");
	}

	@description = "This test deactivates and activates multiple entries via management toolbar"
	@priority = "4"
	test CanDeactivateAndActivateAccountsInBulk {
		for (var accountNumber : list "1,2,3,4,5,6") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account ${accountNumber}",
				accountEntryType = "Business");
		}

		Accounts.openAccountsAdmin();

		for (var accountNumber : list "1,3,5") {
			LexiconEntry.selectEntry(rowEntry = "Account ${accountNumber}");
		}

		ClickNoError(
			key_text = "hidden",
			locator1 = "Icon#ANY");

		AssertConfirm.waitForConfirmation(value1 = "Are you sure you want to deactivate this?");

		Alert.viewSuccessMessage();

		for (var accountNumber : list "1,3,5") {
			LexiconEntry.viewNoEntry(rowEntry = "Account ${accountNumber}");
		}

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		for (var accountNumber : list "1,3,5") {
			LexiconEntry.viewEntryName(rowEntry = "Account ${accountNumber}");
		}

		for (var accountNumber : list "2,4,6") {
			LexiconEntry.viewNoEntry(rowEntry = "Account ${accountNumber}");
		}

		for (var accountNumber : list "1,3,5") {
			LexiconEntry.selectEntry(rowEntry = "Account ${accountNumber}");
		}

		ClickNoError(
			key_text = "undo",
			locator1 = "Icon#ANY");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No accounts were found.");

		ManagementBar.setFilterAndOrder(filterBy = "Active");

		for (var accountNumber : list "1,3,5") {
			LexiconEntry.viewEntryName(rowEntry = "Account ${accountNumber}");
		}
	}

	@description = "This test asserts that group scope permissions can be defined in the Accounts Admin Portlet."
	@priority = "5"
	test CanDefineGroupScopePermissionsInAccountsAdmin {
		property portal.acceptance = "true";

		task ("Create an account and account role through Accounts Admin Portlet") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Business");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Accounts.addOwnedAccountRole(accountRoleTitle = "New Account Role");

			Navigator.gotoBack();
		}

		task ("Navigate to Define Group Scope Permissions on newly created role") {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Define Permissions",
				rowEntry = "New Account Role");

			Navigator.gotoNavTab(navTab = "Define Group Scope Permissions");
		}

		task ("Add all Account Management permissions under the Site and Asset Library Administration tab") {
			var key_navItem = "Site and Asset Library Administration";

			Click.clickAt(locator1 = "RolesPermissionsNavigation#PERMISSIONS_NAVITEM_COLLAPSED");

			var key_subItem = "Applications";

			Click.clickAt(locator1 = "RolesPermissionsNavigation#PERMISSIONS_NAVITEM_SUBITEM_COLLAPSED");

			var key_subItem = "Account Management";

			Click.clickAt(locator1 = "RolesPermissionsNavigation#PERMISSIONS_NAVITEM_SUBITEM");

			Check(locator1 = "RolesPermissions#ACCOUNTS_APPLICATION_PERMISSIONS_SELECT_ALL");

			Button.clickSave();

			AssertElementPresent(
				key_permissionDefinitionValue = "All Sites and Asset Libraries",
				key_permissionNavigationValue = "Account Management: Permissions",
				locator1 = "RolesPermissionsSummary#PERMISSION_TABLE_PERMISSIONS");
		}
	}

	@description = "This test asserts that group scope permissions can be defined in the Roles Admin portlet."
	@priority = "5"
	test CanDefineGroupScopePermissionsInRolesAdmin {
		property test.name.skip.portal.instance = "Accounts#CanDefineGroupScopePermissionsInRolesAdmin";

		task ("Create a new role through Roles Admin Portlet") {
			Role.openRolesAdmin();

			Navigator.gotoNavTab(navTab = "Account Roles");

			Role.add(roleTitle = "Test Role");

			Navigator.gotoNavTab(navTab = "Define Group Scope Permissions");
		}

		task ("Add all Account Management permissions under the Site and Asset Library Administration tab") {
			var key_navItem = "Site and Asset Library Administration";

			Click.clickAt(locator1 = "RolesPermissionsNavigation#PERMISSIONS_NAVITEM_COLLAPSED");

			var key_subItem = "Applications";

			Click.clickAt(locator1 = "RolesPermissionsNavigation#PERMISSIONS_NAVITEM_SUBITEM_COLLAPSED");

			var key_subItem = "Account Management";

			Click.clickAt(locator1 = "RolesPermissionsNavigation#PERMISSIONS_NAVITEM_SUBITEM");

			Check(locator1 = "RolesPermissions#ACCOUNTS_APPLICATION_PERMISSIONS_SELECT_ALL");

			Button.clickSave();

			WaitForElementPresent(locator1 = "NavBar#CONTAINER");

			AssertElementPresent(
				key_permissionDefinitionValue = "All Sites and Asset Libraries",
				key_permissionNavigationValue = "Account Management: Permissions",
				locator1 = "RolesPermissionsSummary#PERMISSION_TABLE_PERMISSIONS");
		}
	}

	@description = "This only tests the UI for defining permissions for an Owned or account specific role. Permissioning will be covered when 2B widgets are implemented."
	@priority = "4"
	test CanDefinePermissionsForOwnedAccountRole {
		task ("Add a business account with Owned or account specific role and navigate to Define Permissions") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Business Account with Role",
				accountEntryType = "Business");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Business Account with Role");

			Accounts.addOwnedAccountRole(accountRoleTitle = "Account Specific Role");

			Navigator.gotoBack();

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Define Permissions",
				rowEntry = "Account Specific Role");
		}

		task ("Select All permissions for Applications and Resource Permissions for Account Entries") {
			var key_navItem = "Accounts";
			var key_subItem = "Accounts";

			Click.clickAt(locator1 = "RolesPermissionsNavigation#PERMISSIONS_NAVITEM_COLLAPSED");

			Click.clickAt(locator1 = "RolesPermissionsNavigation#PERMISSIONS_NAVITEM_SUBITEM");

			Check(locator1 = "RolesPermissions#ACCOUNTS_APPLICATION_PERMISSIONS_SELECT_ALL");

			Check(locator1 = "RolesPermissions#ACCOUNTS_RESOURCE_PERMISSIONS_ACCOUNT_ENTRY_SELECT_ALL");

			Button.clickSave();
		}

		task ("Select All permissions for Resource Permissions for Account Users") {
			var key_navItem = "Accounts";
			var key_subItem = "Account Users";

			Click.clickAt(locator1 = "RolesPermissionsNavigation#PERMISSIONS_NAVITEM_COLLAPSED");

			Click.clickAt(locator1 = "RolesPermissionsNavigation#PERMISSIONS_NAVITEM_SUBITEM");

			Check(locator1 = "RolesPermissions#ACCOUNTS_APPLICATION_PERMISSIONS_SELECT_ALL");

			Button.clickSave();
		}

		task ("Select All permissions for Resource Permissions for Account Groups") {
			var key_navItem = "Accounts";
			var key_subItem = "Account Groups";

			Click.clickAt(locator1 = "RolesPermissionsNavigation#PERMISSIONS_NAVITEM_COLLAPSED");

			Click.clickAt(locator1 = "RolesPermissionsNavigation#PERMISSIONS_NAVITEM_SUBITEM");

			Check(locator1 = "RolesPermissions#ACCOUNTS_APPLICATION_PERMISSIONS_SELECT_ALL");

			Button.clickSave();
		}
	}

	@description = "This test asserts an account can be deleted successfully via management toolbar and menu item."
	@priority = "5"
	test CanDeleteAccount {
		property portal.acceptance = "true";

		for (var accountNumber : list "1,2,3") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Delete Accounts Name ${accountNumber} for Test",
				accountEntryType = "Business");
		}

		Accounts.openAccountsAdmin();

		Accounts.deleteAccount(accountName = "Delete Accounts Name 1 for Test");

		LexiconEntry.viewNoEntry(rowEntry = "Delete Accounts Name 1 for Test");

		Accounts.openAccountsAdmin();

		Accounts.deleteAccount(
			accountName = "Delete Accounts Name 2 for Test",
			deleteType = "Delete Icon");

		LexiconEntry.viewNoEntry(rowEntry = "Delete Accounts Name 2 for Test");

		Accounts.openAccountsAdmin();

		Accounts.deleteAccount(
			accountName = "Delete Accounts Name 3 for Test",
			deleteType = "Management Toolbar");

		LexiconEntry.viewNoEntry(rowEntry = "Delete Accounts Name 3 for Test");

		Accounts.openAccountsAdmin();

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		for (var accountNumber : list "1,2,3") {
			LexiconEntry.viewNoEntry(rowEntry = "Delete Accounts Name ${accountNumber} for Test");
		}
	}

	@description = "This test deletes multiple accounts via management toolbar"
	@priority = "3"
	test CanDeleteAccountsInBulk {
		for (var accountNumber : list "1,2,3") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account ${accountNumber}",
				accountEntryType = "Business");
		}

		for (var accountNumber : list "4,5,6") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account ${accountNumber}",
				accountEntryType = "Person");
		}

		Accounts.openAccountsAdmin();

		for (var accountNumber : list "1,2,4,6") {
			LexiconEntry.selectEntry(rowEntry = "Account ${accountNumber}");
		}

		ClickNoError(
			key_text = "times-circle",
			locator1 = "Icon#ANY");

		AssertConfirm.waitForConfirmation(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

		Alert.viewSuccessMessage();

		for (var accountNumber : list "1,2,4,6") {
			LexiconEntry.viewNoEntry(rowEntry = "Account ${accountNumber}");
		}

		for (var accountNumber : list "3,5") {
			LexiconEntry.viewEntryName(rowEntry = "Account ${accountNumber}");
		}

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		for (var accountNumber : list "1,2,4,6") {
			LexiconEntry.viewNoEntry(rowEntry = "Account ${accountNumber}");
		}
	}

	@description = "This test asserts address deletes successfully."
	@priority = "3"
	test CanDeleteAddress {
		property testray.component.names = "Address";

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account Delete Address",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Delete Address");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddress(
			addressCity = "Dalian",
			addressCountry = "China",
			addressDescription = "Address of DL office.",
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressPostalCode = "116023",
			addressRegion = "Liaoning Sheng",
			addressStreet1 = "537 Huangpu Road Taide Building,",
			addressStreet2 = "High-Tech Zone",
			addressStreet3 = "1005",
			phoneNumber = "+86 (0)411 88120855");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Delete Address");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		LexiconEntry.viewEntryName(rowEntry = "Liferay Dalian Software Co., Ltd.");

		LexiconEntry.delete(
			menuItem = "Delete",
			rowEntry = "Liferay Dalian Software Co., Ltd.");

		AssertConsoleTextNotPresent(value1 = "javax.servlet.ServletException");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Delete Address");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		LexiconEntry.viewNoEntry(rowEntry = "Liferay Dalian Software Co., Ltd.");
	}

	@description = "This test deletes multiple addresses via management toolbar"
	@priority = "4"
	test CanDeleteAddressesInBulk {
		property testray.component.names = "Address";

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account Name",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddress(
			addressCity = "Diamond Bar",
			addressCountry = "United States",
			addressName = "Liferay, Inc.",
			addressPostalCode = "91765",
			addressRegion = "California",
			addressStreet1 = "1400 Montefino Ave",
			addressType = "Billing",
			phoneNumber = "+1-877-LIFERAY (1-877-543-3729)");

		Accounts.addAddress(
			addressCity = "Dalian",
			addressCountry = "China",
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressPostalCode = "116023",
			addressRegion = "Liaoning Sheng",
			addressStreet1 = "537 Huangpu Road Taide Building,",
			addressStreet2 = "High-Tech Zone",
			addressStreet3 = "1005",
			addressType = "Shipping",
			phoneNumber = "+86 (0)411 88120855");

		Accounts.addAddress(
			addressCity = "Shibuya-ku",
			addressCountry = "Japan",
			addressName = "Liferay Japan K. K.",
			addressPostalCode = "150-0021",
			addressRegion = "Tokyo",
			addressStreet1 = "1F Faveur Ebisu,",
			addressStreet2 = "1-26-7 Ebisu Nishi",
			addressType = "Shipping",
			phoneNumber = "+81 3-5456-5796");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		for (var addressName : list "Liferay Dalian Software Co., Ltd.,Liferay Japan K. K.") {
			LexiconEntry.selectEntry(rowEntry = "${addressName}");
		}

		ClickNoError(
			key_text = "times-circle",
			locator1 = "Icon#ANY");

		AssertConfirm.waitForConfirmation(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

		Alert.viewSuccessMessage();

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		for (var addressName : list "Liferay Dalian Software Co., Ltd.,Liferay Japan K. K.") {
			LexiconEntry.viewNoEntry(rowEntry = "${addressName}");
		}

		LexiconEntry.viewEntryName(rowEntry = "Liferay, Inc.");
	}

	@description = "This is a use case for LPS-101315. Deleting an inactive account will navigate you back to inactive filter."
	@priority = "3"
	test CanDeleteAnInactiveAccount {
		Accounts.openAccountsAdmin();

		Accounts.addInactiveBusinessAccount(
			accountDescription = "Accounts Name Description for Test",
			accountName = "Accounts Name for Test");

		Accounts.openAccountsAdmin();

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		Accounts.deleteAccount(accountName = "Accounts Name for Test");

		ManagementBar.viewFilterAndOrder(menuItem = "Inactive");

		LexiconEntry.viewNoEntry(rowEntry = "Accounts Name for Test");
	}

	@description = "This test adds a custom field for an account entry and asserts field can be updated."
	@priority = "4"
	test CanEditAccountCustomField {
		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Custom Fields");

		CustomFields.addCP(
			customFieldName = "Text Field",
			customFieldType = "Input Field",
			customInputDataType = "Text",
			resourceName = "Account Entry");

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Accounts Name with Custom Field",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		Accounts.editCP(
			accountName = "Accounts Name with Custom Field",
			accountNameEdit = "Edit with Custom Field",
			customFieldText = "Custom Field for Account");

		Accounts.openAccountsAdmin();

		Accounts.viewAccountDetails(
			accountName = "Edit with Custom Field",
			customFieldText = "Custom Field for Account");
	}

	@description = "This test asserts that address fields are able to be added and edited."
	@priority = "4"
	test CanEditAddressFields {
		property testray.component.names = "Address";

		task ("Add an inital account entry with city, country, postal code, region, and street.") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "CanEditAddressFields",
				accountEntryType = "Business");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "CanEditAddressFields");

			Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

			Accounts.addAddress(
				addressCity = "Dalian",
				addressCountry = "Cuba",
				addressName = "Address Entry Name",
				addressPostalCode = "116023",
				addressStreet1 = "537 Huangpu Road Taide Building,");
		}

		task ("Edit the previously added account entry information.") {
			Accounts.editAddress(
				addressCity = "Irvine",
				addressCountry = "Chile",
				addressName = "Address Entry Name",
				addressPostalCode = "123456",
				addressStreet1 = "Street address one");
		}

		task ("Assert that the correct edits were made to street and city") {
			AssertTextEquals(
				key_columnName = "lfr-street-column",
				key_rowEntry = "Address Entry Name",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER_TD",
				value1 = "Street address one");

			AssertTextEquals(
				key_columnName = "lfr-city-column",
				key_rowEntry = "Address Entry Name",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER_TD",
				value1 = "Irvine");
		}

		task ("Assert that original names are no longer present for street and city.") {
			AssertTextNotEquals(
				key_columnName = "lfr-street-column",
				key_rowEntry = "Address Entry Name",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER_TD",
				value1 = "537 Huangpu Road Taide Building,");

			AssertTextNotEquals(
				key_columnName = "lfr-city-column",
				key_rowEntry = "Address Entry Name",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER_TD",
				value1 = "Dalian");
		}
	}

	@description = "This test asserts that External Reference Code is editable."
	@priority = "3"
	test CanEditExternalReferenceCode {
		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountName = "Business Account Name",
			externalReferenceCode = "AAA-0100");

		Accounts.openAccountsAdmin();

		Accounts.gotoEdit(accountName = "Business Account Name");

		PortletEntry.inputText(
			fieldLabel = "External Reference Code",
			text = "AAA-0111");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Business Account Name");

		AssertTextEquals(
			key_fieldLabel = "External Reference Code",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "AAA-0111");
	}

	@description = "This is a use case for LPS-101221. It updates an inactive account by clicking on its link and asserts user stays on the Inactive filter when you go back to Accounts list."
	@priority = "4"
	test CanEditInactiveAccount {
		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Accounts Name for Test",
			accountEntryStatus = "Inactive",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.viewNoEntry(rowEntry = "Accounts Name for Test");

		ManagementBar.setFilterAndOrder(filterBy = "Inactive");

		LexiconEntry.viewEntryName(rowEntry = "Accounts Name for Test");

		LexiconEntry.viewEntryStatus(
			rowEntry = "Accounts Name for Test",
			rowStatus = "Inactive");

		LexiconEntry.gotoEntry(rowEntry = "Accounts Name for Test");

		PortletEntry.inputName(name = "Update Accounts Name via Name Link");

		Button.clickSave();

		Alert.viewSuccessMessage();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Edit Update Accounts Name via Name Link");

		Navigator.gotoBack();

		ManagementBar.viewFilterAndOrder(menuItem = "Inactive");

		LexiconEntry.viewEntryName(rowEntry = "Update Accounts Name via Name Link");

		LexiconEntry.viewEntryStatus(
			rowEntry = "Update Accounts Name via Name Link",
			rowStatus = "Inactive");

		LexiconEntry.viewNoEntry(rowEntry = "Accounts Name for Test");
	}

	@description = "This test updates an account's name and description and asserts change saves successfully."
	@priority = "5"
	test CanEditNameAndDescription {
		property portal.acceptance = "true";

		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccount(
			accountDescription = "Accounts Name Description for Test",
			accountName = "Accounts Name for Test");

		AssertElementPresent(locator1 = "Icon#BACK");

		Accounts.openAccountsAdmin();

		Accounts.editCP(
			accountDescriptionEdit = "Update Accounts Name Description for Test",
			accountName = "Accounts Name for Test",
			accountNameEdit = "Update Accounts Name for Test");

		Accounts.openAccountsAdmin();

		LexiconEntry.viewEntryName(rowEntry = "Update Accounts Name for Test");

		LexiconEntry.viewNoEntry(rowEntry = "Accounts Name for Test");

		LexiconEntry.gotoEntry(rowEntry = "Update Accounts Name for Test");

		PortletEntry.inputName(name = "Update Accounts Name via Name Link");

		Button.clickSave();

		Alert.viewSuccessMessage();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Edit Update Accounts Name via Name Link");

		Accounts.openAccountsAdmin();

		LexiconEntry.viewEntryName(rowEntry = "Update Accounts Name via Name Link");

		LexiconEntry.viewNoEntry(rowEntry = "Update Accounts Name for Test");
	}

	@description = "This is a use case for LPS-139477. This test asserts accounts are filtered by All Accounts by default. Changing filter to Business, Guest and Person shows accurate results."
	@priority = "3"
	test CanFilterAccountsByType {
		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Business Account",
			accountEntryType = "Business");

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Guest Account",
			accountEntryType = "Guest");

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Person Account",
			accountEntryType = "Person");

		Accounts.openAccountsAdmin();

		LexiconEntry.viewEntryName(rowEntry = "Business Account");

		LexiconEntry.viewEntryName(rowEntry = "Person Account");

		ManagementBar.setFilterAndOrder(filterBy = "Business");

		LexiconEntry.viewEntryName(rowEntry = "Business Account");

		LexiconEntry.viewNoEntry(rowEntry = "Guest Account");

		LexiconEntry.viewNoEntry(rowEntry = "Person Account");

		ManagementBar.setFilterAndOrder(filterBy = "Guest");

		LexiconEntry.viewEntryName(rowEntry = "Guest Account");

		LexiconEntry.viewNoEntry(rowEntry = "Business Account");

		LexiconEntry.viewNoEntry(rowEntry = "Person Account");

		ManagementBar.setFilterAndOrder(filterBy = "Person");

		LexiconEntry.viewEntryName(rowEntry = "Person Account");

		LexiconEntry.viewNoEntry(rowEntry = "Business Account");

		LexiconEntry.viewNoEntry(rowEntry = "Guest Account");
	}

	@description = "This test asserts that users are correctly filtered by First Name, Last Name, and Email Address in the Assign Users Modal"
	@priority = "4"
	test CanFilterAndOrderUsersInAssignUsersModal {
		task ("Add an account and add 3 different users with varying names and email addresses") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Business Account",
				accountEntryType = "Business");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Business Account",
				userEmailAddress = "Z-ea@liferay.com",
				userFirstName = "A-user",
				userLastName = "userln2",
				userScreenName = "A-user");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Business Account",
				userEmailAddress = "Y-ea@liferay.com",
				userFirstName = "B-user",
				userLastName = "userln3",
				userScreenName = "B-user");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Business Account",
				userEmailAddress = "X-ea@liferay.com",
				userFirstName = "C-user",
				userLastName = "userln1",
				userScreenName = "C-user");
		}

		task ("Open and click into the Assign Users Modal") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Business Account");

			Accounts.gotoAssigneeTab(assigneeTab = "Users");

			LexiconEntry.gotoAdd();

			WaitForElementPresent(
				key_title = "Assign Users to Business Account",
				locator1 = "IFrame#MODAL_ANY");

			SelectFrame(
				key_title = "Assign Users to Business Account",
				locator1 = "IFrame#MODAL_ANY");
		}

		task ("Assert users can be ordered by First Name and are in correct order") {
			ManagementBar.setFilterAndOrder(orderBy = "First Name");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "1",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "A-user");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "2",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "B-user");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "3",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "C-user");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "4",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "Test");
		}

		task ("Assert users can be ordered by Last Name and are in correct order") {
			ManagementBar.setFilterAndOrder(orderBy = "Last Name");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "1",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "Test");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "2",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "userln1");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "3",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "userln2");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "4",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "userln3");
		}

		task ("Assert users can be ordered by Email Address and are in correct order") {
			ManagementBar.setFilterAndOrder(orderBy = "Email Address");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "1",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "test@liferay.com");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "2",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "x-ea@liferay.com");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "3",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "y-ea@liferay.com");

			AssertTextEquals.assertPartialText(
				key_rowNumber = "4",
				locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER",
				value1 = "z-ea@liferay.com");
		}
	}

	@description = "This asserts that filter in setting default shipping will not change to billing and that billing addresses do not display as options."
	@priority = "3"
	test CannotAddBillingAddressAsDefaultShipping {
		property testray.component.names = "Address";

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account 1",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account 1");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddress(
			addressCity = "Diamond Bar",
			addressCountry = "United States",
			addressName = "Liferay, Inc.",
			addressPostalCode = "91765",
			addressRegion = "California",
			addressStreet1 = "1400 Montefino Ave",
			addressType = "Billing",
			phoneNumber = "+1-877-LIFERAY (1-877-543-3729)");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account 1");

		AssertClick(
			locator1 = "Account#DEFAULT_ACCOUNT_ADDRESSES_SET_DEFAULT_SHIPPING",
			value1 = "Set Default Address");

		SelectFrame(
			key_title = "Set Default Shipping Address",
			locator1 = "IFrame#MODAL_ANY");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No addresses were found.");

		Search.searchCP(searchTerm = "Diamond Bar");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No addresses were found.");
	}

	@description = "This asserts that filter in setting default billing will not change to shipping and that shipping addresses do not display as options."
	@priority = "3"
	test CannotAddShippingAddressAsDefaultBilling {
		property testray.component.names = "Address";

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account 1",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account 1");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddress(
			addressCity = "Dalian",
			addressCountry = "China",
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressPostalCode = "116023",
			addressRegion = "Liaoning Sheng",
			addressStreet1 = "537 Huangpu Road Taide Building,",
			addressStreet2 = "High-Tech Zone",
			addressStreet3 = "1005",
			addressType = "Shipping",
			phoneNumber = "+86 (0)411 88120855");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account 1");

		AssertClick(
			locator1 = "Account#DEFAULT_ACCOUNT_ADDRESSES_SET_DEFAULT_BILLING",
			value1 = "Set Default Address");

		SelectFrame(
			key_title = "Set Default Billing Address",
			locator1 = "IFrame#MODAL_ANY");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No addresses were found.");

		Search.searchCP(searchTerm = "China");

		AssertTextEquals(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No addresses were found.");
	}

	@description = "This test adds a blocked domain in instance settings and asserts that a user with a blocked domain cannot be added to an account."
	@priority = "4"
	test CannotAddUserWithBlockedEmailDomain {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given an account is created and is configured to have blocked domains") {
			AccountConfiguration.enableAccountEmailDomain();

			AccountConfiguration.addBlockedEmailDomain(settingValues = "yahoo.com,blocked.com");

			Accounts.openAccountsAdmin();

			Accounts.addAccountWithDomain(
				accountName = "AM Account",
				domainNames = "liferay.com,Google.com");
		}

		task ("When an account manager is added to the account and attempts to create a new account user using a blocked email domain an error should display") {
			AccountConfiguration.addAccountManager(
				accountName = "AM Account",
				orgName = "AM Organization",
				orgRoleTitle = "Account Manager",
				userEmailAddress = "useramea@liferay.com",
				userFirstName = "useramfn",
				userLastName = "useramln",
				userScreenName = "useramsn");

			User.logoutPG();

			User.loginUserPG(
				password = "test",
				userEmailAddress = "useramea@liferay.com");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "AM Account");

			Accounts.viewErrorWhenAddingUserWithBlockedDomain(
				accountName = "AM Account",
				assigneeName = "userfn",
				emailDomainName = "blocked.com",
				userEmailAddress = "userea@blocked.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("Then the user should not be added or listed in that account") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "AM Account");

			Accounts.gotoAssigneeTab(assigneeTab = "Users");

			LexiconEntry.viewNoEntry(rowEntry = "userfn userln");
		}
	}

	@description = "This test sets a valid domain for a business account. It attempts to add a user with a different domain and asserts that a warning displays and the user is not added."
	@priority = "3"
	test CannotAddUserWithInvalidEmailDomain {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given an account is created and is configured to have valid email domains") {
			AccountConfiguration.enableAccountEmailDomain();

			Accounts.openAccountsAdmin();

			Accounts.addAccountWithDomain(
				accountName = "AM Account",
				domainNames = "liferay.com,Google.com,9teen.com");
		}

		task ("When an account manager is added to the account and attempts to create a new account user using an invalid email domain an error should display") {
			AccountConfiguration.addAccountManager(
				accountName = "AM Account",
				orgName = "AM Organization",
				orgRoleTitle = "Account Manager",
				userEmailAddress = "useramea@liferay.com",
				userFirstName = "useramfn",
				userLastName = "useramln",
				userScreenName = "useramsn");

			User.logoutPG();

			User.loginUserPG(
				password = "test",
				userEmailAddress = "useramea@liferay.com");

			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "AM Account");

			Accounts.viewErrorWhenAddingUserWithInvalidDomain(
				accountName = "AM Account",
				assigneeName = "userfn",
				emailDomainName = "nodomain.com",
				userEmailAddress = "userea@nodomain.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("Then the user should not be added or listed in that account") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "AM Account");

			Accounts.gotoAssigneeTab(assigneeTab = "Users");

			LexiconEntry.viewNoEntry(rowEntry = "userfn userln");
		}
	}

	@description = "This test adds an address, sets it as default, and removes it as default"
	@priority = "3"
	test CanRemoveAddressAsDefault {
		property testray.component.names = "Address";

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account Remove Address",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Remove Address");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddress(
			addressCity = "Dalian",
			addressCountry = "China",
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressPostalCode = "116023",
			addressRegion = "Liaoning Sheng",
			addressStreet1 = "537 Huangpu Road Taide Building,",
			addressStreet2 = "High-Tech Zone",
			addressStreet3 = "1005",
			phoneNumber = "+86 (0)411 88120855");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Remove Address");

		Accounts.setDefaultShippingAddress(
			addressDataType = "${addressDataType}",
			addressName = "Liferay Dalian Software Co., Ltd.");

		Accounts.viewDefaultShippingAddress(
			addressCity = "Dalian",
			addressCountry = "China",
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressPostalCode = "116023",
			addressRegion = "Liaoning Sheng",
			addressStreet1 = "537 Huangpu Road Taide Building,",
			addressStreet2 = "High-Tech Zone",
			addressStreet3 = "1005",
			phoneNumber = "+86 (0)411 88120855");

		Accounts.setDefaultBillingAddress(
			addressDataType = "${addressDataType}",
			addressName = "Liferay Dalian Software Co., Ltd.");

		Accounts.viewDefaultBillingAddress(
			addressCity = "Dalian",
			addressCountry = "China",
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressPostalCode = "116023",
			addressRegion = "Liaoning Sheng",
			addressStreet1 = "537 Huangpu Road Taide Building,",
			addressStreet2 = "High-Tech Zone",
			addressStreet3 = "1005",
			phoneNumber = "+86 (0)411 88120855");

		Accounts.removeDefaultBillingAddress(accountName = "Account Remove Address");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Remove Address");

		Accounts.removeDefaultShippingAddress(accountName = "Account Remove Address");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Remove Address");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		LexiconEntry.viewEntryName(rowEntry = "Liferay Dalian Software Co., Ltd.");
	}

	@description = "This test removes domain set to an account."
	@priority = "3"
	test CanRemoveDomainFromAccount {
		AccountConfiguration.enableAccountEmailDomain();

		Accounts.openAccountsAdmin();

		Accounts.addAccountWithDomain(
			accountName = "Remove Account Domain",
			domainNames = "liferay.com,Google.com");

		Accounts.openAccountsAdmin();

		Accounts.removeDomain(
			accountName = "Remove Account Domain",
			domainName = "Google.com");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Remove Account Domain");

		AssertElementPresent(
			key_domainName = "liferay.com",
			locator1 = "Account#VALID_DOMAINS_DOMAIN_NAME");

		AssertElementNotPresent(
			key_domainName = "Google.com",
			locator1 = "Account#VALID_DOMAINS_DOMAIN_NAME");
	}

	@description = "This test removes a blocked domain in Instance Settings."
	@priority = "4"
	test CanRemoveDomainFromBlacklist {
		AccountConfiguration.addBlockedEmailDomain(settingValues = "yahoo.com,blocked.com,google.com");

		for (var settingValue : list "yahoo.com,blocked.com,google.com") {
			SystemSettings.viewTextareaPartialText(
				settingName = "Blocked Email Domains",
				settingValue = "${settingValue}");
		}

		SystemSettings.editTextAreaSetting(
			settingName = "Blocked Email Domains",
			settingValue = "blocked.com");

		SystemSettings.saveConfiguration();

		SystemSettings.viewTextareaValue(
			fieldName = "blockedEmailDomains",
			fieldValue = "blocked.com");
	}

	@description = "This test removes an organization as an assignee of a business account."
	@priority = "5"
	test CanRemoveOrganizationFromBusinessAccount {
		property portal.acceptance = "true";

		JSONOrganization.addOrganization(
			organizationName = "Organization for Account",
			organizationSite = "true");

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Unassign Organization from Account",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Unassign Organization from Account");

		Accounts.assignOrganizations(
			accountName = "Unassign Organization from Account",
			assigneeName = "Organization for Account");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Unassign Organization from Account");

		Accounts.gotoAssigneeTab(assigneeTab = "Organizations");

		Accounts.removeOrganizationAsAssignee(assigneeName = "Organization for Account");

		Accounts.openAccountsAdmin();

		Accounts.viewNoAssignee(
			accountName = "Unassign Organization from Account",
			assigneeType = "Organizations");
	}

	@description = "This test removes a user from account via Users tab"
	@priority = "5"
	test CanRemoveUserFromAccount {
		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Remove Account User",
			accountEntryType = "Business");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Remove Account User",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Remove Account User");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		Accounts.removeUserAsAssignee(assigneeName = "userfn");

		Accounts.openAccountsAdmin();

		Accounts.viewNoAssignee(
			accountName = "Remove Account User",
			assigneeType = "Users");
	}

	@description = "This test removes a user from a person account"
	@priority = "4"
	test CanRemoveUserFromPersonAccount {
		property portal.acceptance = "true";

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Person Account",
			accountEntryType = "Person");

		JSONAccountEntryUser.addAccountEntryUser(
			accountEntryName = "Person Account",
			userEmailAddress = "userfn1@liferay.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Person Account");

		AssertElementPresent(
			key_userName = "userfn1",
			locator1 = "Account#USER_TABLE_NAME");

		Click(
			key_text = "times-circle",
			locator1 = "Icon#ANY");

		Alert.viewMutedMessage(muteMessage = "Assign a user to this person account.");

		Button.clickSave();

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Person Account");

		AssertElementNotPresent(
			key_userName = "userfn1",
			locator1 = "Account#USER_TABLE_NAME");
	}

	@description = "This test removes multiple users from an account in bulk via management toolbar"
	@priority = "3"
	test CanRemoveUsersFromAccountsInBulk {
		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Business Account",
			accountEntryType = "Business");

		for (var accountUser : list "1,2,3,4") {
			AccountUsers.openAccountUsersAdmin();

			AccountUsers.addUser(
				accountName = "Business Account",
				userEmailAddress = "userea${accountUser}@liferay.com",
				userFirstName = "userfn${accountUser}",
				userLastName = "userln${accountUser}",
				userScreenName = "usersn${accountUser}");
		}

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Business Account");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		for (var accountUser : list "1,3,4") {
			LexiconEntry.selectEntry(rowEntry = "userfn${accountUser} userln${accountUser}");
		}

		ClickNoError(
			key_text = "times-circle",
			locator1 = "Icon#ANY");

		AssertConfirm.waitForConfirmation(value1 = "Are you sure you want to remove the selected users?");

		Alert.viewSuccessMessage();

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Business Account");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		for (var accountUser : list "1,3,4") {
			LexiconEntry.viewNoEntry(rowEntry = "userfn${accountUser} userln${accountUser}");
		}

		LexiconEntry.viewEntryName(rowEntry = "userfn2 userln2");
	}

	@description = "This test searches for an address in the addresses tab of an account."
	@priority = "3"
	test CanSearchForAddressInAddressesTab {
		property testray.component.names = "Address";

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Search Address",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Search Address");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddress(
			addressCity = "Dalian",
			addressCountry = "China",
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressPostalCode = "116023",
			addressRegion = "Liaoning Sheng",
			addressStreet1 = "537 Huangpu Road Taide Building,",
			addressStreet2 = "High-Tech Zone",
			addressStreet3 = "1005",
			phoneNumber = "+86 (0)411 88120855");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		for (var searchTerm : list "Dalian,China,Liaoning,Liferay,116023") {
			Search.searchCP(searchTerm = "${searchTerm}");

			LexiconEntry.viewEntryName(rowEntry = "Liferay Dalian Software Co., Ltd.");
		}
	}

	@description = "This test searches for organizations assigned to an account"
	@priority = "4"
	test CanSearchForAssignedOrganizations {
		task ("Add an account and add two organizations") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Business Account",
				accountEntryType = "Business");

			for (var org : list "Organization Name,New Selection for Search Test") {
				JSONOrganization.addOrganization(
					organizationName = "${org}",
					organizationSite = "true");
			}
		}

		task ("Assign both organizations to the account") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Business Account");

			for (var org : list "Organization Name,New Selection for Search Test") {
				Accounts.assignOrganizations(
					accountName = "Business Account",
					assigneeName = "${org}");
			}
		}

		task ("Search for both organizations and assert only the searched organization is displayed") {
			for (var searchTerm : list "Organization Name,New Selection for Search Test") {
				Search.searchCP(searchTerm = "${searchTerm}");

				if ("${searchTerm}" == "Organization Name") {
					LexiconEntry.viewEntryName(rowEntry = "Organization Name");

					LexiconEntry.viewNoEntry(rowEntry = "New Selection for Search Test");
				}
				else if ("${searchTerm}" == "New Selection for Search Test") {
					LexiconEntry.viewEntryName(rowEntry = "New Selection for Search Test");

					LexiconEntry.viewNoEntry(rowEntry = "Organization Name");
				}
			}
		}
	}

	@description = "This test sets default shipping and default billing addresses for an account."
	@priority = "3"
	test CanSetDefaultAddresses {
		property testray.component.names = "Address";

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account with Default Address",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Default Address");

		Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

		Accounts.addAddress(
			addressCity = "Dalian",
			addressCountry = "China",
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressPostalCode = "116023",
			addressRegion = "Liaoning Sheng",
			addressStreet1 = "537 Huangpu Road Taide Building,",
			addressStreet2 = "High-Tech Zone",
			addressStreet3 = "1005",
			phoneNumber = "+86 (0)411 88120855");

		LexiconEntry.viewEntryName(rowEntry = "Liferay Dalian Software Co., Ltd.");

		Accounts.addAddress(
			addressCity = "Diamond Bar",
			addressCountry = "United States",
			addressName = "Liferay, Inc.",
			addressPostalCode = "91765",
			addressRegion = "California",
			addressStreet1 = "1400 Montefino Ave",
			addressType = "Billing",
			phoneNumber = "+1-877-LIFERAY (1-877-543-3729)");

		Accounts.addAddress(
			addressCity = "Shibuya-ku",
			addressCountry = "Japan",
			addressName = "Liferay Japan K. K.",
			addressPostalCode = "150-0021",
			addressRegion = "Tokyo",
			addressStreet1 = "1F Faveur Ebisu,",
			addressStreet2 = "1-26-7 Ebisu Nishi",
			addressType = "Shipping",
			phoneNumber = "+81 3-5456-5796");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Default Address");

		Accounts.setDefaultShippingAddress(addressName = "Liferay Japan K. K.");

		Accounts.viewDefaultShippingAddress(
			addressCity = "Shibuya-ku",
			addressCountry = "Japan",
			addressName = "Liferay Japan K. K.",
			addressPostalCode = "150-0021",
			addressRegion = "Tokyo",
			addressStreet1 = "1F Faveur Ebisu,",
			addressStreet2 = "1-26-7 Ebisu Nishi",
			phoneNumber = "+81 3-5456-5796");

		Accounts.setDefaultBillingAddress(addressName = "Liferay, Inc.");

		Accounts.viewDefaultBillingAddress(
			addressCity = "Diamond Bar",
			addressCountry = "United States",
			addressName = "Liferay, Inc.",
			addressPostalCode = "91765",
			addressRegion = "California",
			addressStreet1 = "1400 Montefino Ave",
			phoneNumber = "+1-877-LIFERAY (1-877-543-3729)");

		Accounts.changeDefaultShippingAddress(addressName = "Liferay Dalian Software Co., Ltd.");

		Accounts.changeDefaultBillingAddress(addressName = "Liferay Dalian Software Co., Ltd.");

		Accounts.viewDefaultBillingAddress(
			addressCity = "Dalian",
			addressCountry = "China",
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressPostalCode = "116023",
			addressRegion = "Liaoning Sheng",
			addressStreet1 = "537 Huangpu Road Taide Building,",
			addressStreet2 = "High-Tech Zone",
			addressStreet3 = "1005",
			phoneNumber = "+86 (0)411 88120855");

		Accounts.viewDefaultShippingAddress(
			addressCity = "Dalian",
			addressCountry = "China",
			addressName = "Liferay Dalian Software Co., Ltd.",
			addressPostalCode = "116023",
			addressRegion = "Liaoning Sheng",
			addressStreet1 = "537 Huangpu Road Taide Building,",
			addressStreet2 = "High-Tech Zone",
			addressStreet3 = "1005",
			phoneNumber = "+86 (0)411 88120855");
	}

	@description = "This test unassigns a role to an Account User in the Account Details page via Users tab"
	@priority = "3"
	test CanUnassignRolesViaUsersTab {
		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account Name",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.addOwnedAccountRole(accountRoleTitle = "Account Specific Role");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Account Name",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Accounts.addAssigneeToRoleViaUsersTab(
			accountRoleTitle = "Account Administrator",
			accountUserName = "userfn userln");

		AssertTextEquals(
			key_columnName = "lfr-account-roles-column",
			key_rowEntry = "userfn userln",
			locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER_TD",
			value1 = "Account Administrator");

		Accounts.unassignUserRole(
			accountRoleTitle = "Account Administrator",
			accountUserName = "userfn userln");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account Name");

		Navigator.gotoNavTab(navTab = "Users");

		AssertElementPresent(
			key_columnName = "lfr-account-roles-column",
			key_rowEntry = "userfn userln",
			locator1 = "ContentRow#ENTRY_CONTENT_ROW_NUMBER_TD",
			value1 = "");
	}

	@description = "This test view the account user via Manage Users in account list view"
	@priority = "3"
	test CanViewAccountUsersViaManageUsersInAccountsListView {
		task ("Given A new Account and add new Account User to it") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Business");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Account Name",
				userEmailAddress = "userfn@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("When Navigate to the account menu item Manage Users") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Manage Users",
				rowEntry = "Account Name");
		}

		task ("Then the assigned account user displays") {
			Navigator.viewActivatedNavTab(navTab = "Users");

			Accounts.viewAssignee(assigneeName = "userfn");
		}
	}

	@description = "This tests canceling account creation will not save it."
	@priority = "3"
	test ClickingCancelOrBackWillNotSaveAccount {
		Accounts.openAccountsAdmin();

		LexiconEntry.gotoAdd();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Add Account");

		PortletEntry.inputName(name = "Cancel Accounts Name");

		Button.clickCancel();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Accounts");

		Accounts.openAccountsAdmin();

		Search.searchCP(searchTerm = "Cancel Accounts Name");

		LexiconEntry.viewNoEntry(rowEntry = "Cancel Accounts Name");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoAdd();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Add Account");

		PortletEntry.inputName(name = "Back Icon Account");

		Navigator.gotoBack();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Accounts");

		Accounts.openAccountsAdmin();

		Search.searchCP(searchTerm = "Back Icon Account");

		LexiconEntry.viewNoEntry(rowEntry = "Back Icon Account");
	}

	@description = "This test makes sure the default account roles are present in Roles Admin."
	@priority = "4"
	test DefaultAccountRolesArePresent {
		property portal.acceptance = "true";

		Role.openRolesAdmin();

		Navigator.gotoNavItem(navItem = "Account Roles");

		LexiconEntry.changeDisplayStyle(displayStyle = "table");

		AssertTextEquals(
			key_tableEntry = "Account Administrator",
			locator1 = "LexiconTable#TABLE_ENTRY_TITLE_LINK",
			value1 = "Account Administrator");

		AssertTextEquals(
			key_columnName = "description",
			key_tableEntry = "Account Administrator",
			locator1 = "LexiconTable#TABLE_ENTRY_COLUMN_LINK",
			value1 = "Account Administrators are super users of their account.");

		AssertTextEquals(
			key_tableEntry = "Account Member",
			locator1 = "LexiconTable#TABLE_ENTRY_TITLE_LINK",
			value1 = "Account Member");

		AssertTextEquals(
			key_columnName = "description",
			key_tableEntry = "Account Member",
			locator1 = "LexiconTable#TABLE_ENTRY_COLUMN_LINK",
			value1 = "All users who belong to an account have this role within that account.");
	}

	@description = "This test removes domain set to an account."
	@priority = "4"
	test DisablingDomainValidationRemovesWarningMessages {
		AccountConfiguration.enableAccountEmailDomain();

		Accounts.openAccountsAdmin();

		Accounts.addAccountWithDomain(
			accountName = "Business Account",
			domainNames = "liferay.com");

		Accounts.addNewUserWithSameDomain(
			accountName = "Business Account",
			assigneeName = "userfn",
			emailDomainName = "liferay.com",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn",
			validDomainNames = "liferay.com");

		AccountConfiguration.disableAccountEmailDomain();

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Business Account");

		AssertElementNotPresent(locator1 = "Account#VALID_DOMAINS_HEADING");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		LexiconEntry.gotoAdd();

		SelectFrame(
			key_title = "Assign Users to Business Account",
			locator1 = "IFrame#MODAL_ANY");

		LexiconEntry.gotoAdd();

		AssertElementNotPresent(
			key_text = "View Valid Domains",
			locator1 = "Button#ANY",
			value1 = "View Valid Domains");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_SCREEN_NAME_FIELD",
			value1 = "usersn1");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_EMAIL_ADDRESS_FIELD",
			value1 = "userea1@liferay.com");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_FIRST_NAME_FIELD",
			value1 = "userfn1");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#DETAILS_LAST_NAME_FIELD",
			value1 = "userln1");

		AssertClick(
			locator1 = "Button#SAVE",
			value1 = "Save");

		Alert.viewSuccessMessage();
	}

	@description = "This test asserts that a user can filter addresses by billing type"
	@priority = "4"
	test FilterAddressesByBillingType {
		property testray.component.names = "Address";

		task ("Add an account") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Accounts Name",
				accountEntryType = "Business");
		}

		task ("Add a billing address and a shipping address to account") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Accounts Name");

			Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

			Accounts.addAddress(
				addressCity = "Chicago",
				addressCountry = "United States",
				addressName = "Chicago",
				addressPostalCode = "60606",
				addressRegion = "Illinois",
				addressStreet1 = "205 W. Wacker Dr",
				addressStreet2 = "Suite 720",
				addressType = "Billing",
				phoneNumber = "+1-877-LIFERAY (1-877-543-3729)");

			Accounts.addAddress(
				addressCity = "Dalian",
				addressCountry = "China",
				addressName = "Liferay Dalian Software Co., Ltd.",
				addressPostalCode = "116023",
				addressRegion = "Liaoning Sheng",
				addressStreet1 = "537 Huangpu Road Taide Building,",
				addressStreet2 = "1005 High-Tech Zone",
				addressType = "Shipping",
				phoneNumber = "+86 (0)411 88120855");
		}

		task ("Assert the user can filter by billing address type") {
			ManagementBar.setFilterAndOrder(filterBy = "Billing");

			LexiconEntry.viewEntryName(rowEntry = "Chicago");

			LexiconEntry.viewNoEntry(rowEntry = "Liferay Dalian Software Co., Ltd.");
		}
	}

	@description = "This test asserts that a user can filter addresses by shipping type"
	@priority = "4"
	test FilterAddressesByShippingType {
		property testray.component.names = "Address";

		task ("Add an account") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Accounts Name",
				accountEntryType = "Business");
		}

		task ("Add a billing address and a shipping address to account") {
			Accounts.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Accounts Name");

			Accounts.gotoAssigneeTab(assigneeTab = "Addresses");

			Accounts.addAddress(
				addressCity = "Chicago",
				addressCountry = "United States",
				addressName = "Chicago",
				addressPostalCode = "60606",
				addressRegion = "Illinois",
				addressStreet1 = "205 W. Wacker Dr",
				addressStreet2 = "Suite 720",
				addressType = "Billing",
				phoneNumber = "+1-877-LIFERAY (1-877-543-3729)");

			Accounts.addAddress(
				addressCity = "Dalian",
				addressCountry = "China",
				addressName = "Liferay Dalian Software Co., Ltd.",
				addressPostalCode = "116023",
				addressRegion = "Liaoning Sheng",
				addressStreet1 = "537 Huangpu Road Taide Building,",
				addressStreet2 = "1005 High-Tech Zone",
				addressType = "Shipping",
				phoneNumber = "+86 (0)411 88120855");
		}

		task ("Assert the user can filter by shipping address type") {
			ManagementBar.setFilterAndOrder(filterBy = "Shipping");

			LexiconEntry.viewEntryName(rowEntry = "Liferay Dalian Software Co., Ltd.");

			LexiconEntry.viewNoEntry(rowEntry = "Chicago");
		}
	}

	@description = "This is a use case for LPS-117171. It asserts that Filter By Navigation does not display when assigning a user to a Person Account since domains are not applicable for this type of account."
	@priority = "3"
	test NoFilterByNavigationForPersonAccount {
		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Business Account",
			accountEntryType = "Business");

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Person Account",
			accountEntryType = "Person");

		for (var accountUser : list "1,2") {
			AccountUsers.openAccountUsersAdmin();

			AccountUsers.addUser(
				accountName = "Business Account",
				userEmailAddress = "userea${accountUser}@liferay.com",
				userFirstName = "userfn${accountUser}",
				userLastName = "userln${accountUser}",
				userScreenName = "usersn${accountUser}");
		}

		Accounts.openAccountsAdmin();

		Accounts.gotoEdit(accountName = "Person Account");

		AssertClick(
			locator1 = "Account#USER_SELECT_BUTTON",
			value1 = "Select");

		SelectFrame(locator1 = "IFrame#ASSIGN_USER");

		ManagementBar.viewNoSubheaderInFilterAndOrder(subheaderItem = "Filter by Navigation");
	}

	@description = "This test sets a valid domain for a business account. It adds a user with a same domain and asserts no warning displays."
	@priority = "3"
	test NoWarningDisplaysWhenAddingAUserWithValidDomain {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		AccountConfiguration.enableAccountEmailDomain();

		Accounts.openAccountsAdmin();

		Accounts.addAccountWithDomain(
			accountName = "AM Account",
			domainNames = "liferay.com,Google.com,9teen.com");

		AccountConfiguration.addAccountManager(
			accountName = "AM Account",
			orgName = "AM Organization",
			orgRoleTitle = "Account Manager",
			userEmailAddress = "useramea@liferay.com",
			userFirstName = "useramfn",
			userLastName = "useramln",
			userScreenName = "useramsn");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "useramea@liferay.com");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "AM Account");

		Accounts.addNewUserWithSameDomain(
			accountName = "AM Account",
			assigneeName = "userfn",
			emailDomainName = "9teen.com",
			userEmailAddress = "userea@9teen.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn",
			validDomainNames = "liferay.com,Google.com,9teen.com");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "AM Account");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		LexiconEntry.viewEntryName(rowEntry = "userfn userln");
	}

	@description = "This test asserts that only the account name field is required when making an account."
	@priority = "4"
	test OnlyAccountNameIsRequired {
		task ("Add account with account name only.") {
			Accounts.openAccountsAdmin();

			Accounts.addBusinessAccount(accountName = "Account Name Only");

			Accounts.openAccountsAdmin();

			LexiconEntry.viewEntryName(rowEntry = "Account Name Only");
		}

		task ("Assert that error message appears when attempting to add an account with description only.") {
			LexiconEntry.gotoAdd();

			PortletEntry.inputDescription(description = "This is an account description");

			Button.clickSave();

			AssertElementPresent(
				key_fieldFieldLabel = "Account Name",
				locator1 = "Message#ERROR_FIELD_REQUIRED");
		}
	}

	@description = "This test adds a global tag and adds it to account"
	@priority = "3"
	test OnlyGlobalTagCanBeAddedToAccount {
		JSONAssettag.addTag(
			groupName = "Guest",
			tagName = "Guest Tag");

		JSONAssettag.addTag(
			groupName = "Global",
			tagName = "Global Tag Name 1");

		JSONAssettag.addTag(
			groupName = "Global",
			tagName = "Global Tag Name 2");

		Accounts.openAccountsAdmin();

		Accounts.addBusinessAccountWithTag(
			accountName = "Account with Tags",
			addTagMethod = "Select",
			tagNameList = "Global Tag Name 1,Global Tag Name 2");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Tags");

		for (var tagName : list "Global Tag Name 1,Global Tag Name 2") {
			var tagName = StringUtil.lowerCase("${tagName}");

			AssetCategorization.viewTag(tagName = "${tagName}");
		}

		Click(locator1 = "AssetCategorization#TAGS_SELECT_BUTTON");

		IFrame.selectTagFrame();

		var rowEntry = StringUtil.lowerCase("${rowEntry}");

		LexiconEntry.viewNoEntry(rowEntry = StringUtil.lowerCase("Guest Tag"));
	}

	@description = "This test adds an Owned or account specific role and ensures this role is not shared across accounts"
	@priority = "4"
	test OwnedAccountRoleIsNotSharedAcrossAccounts {
		property portal.acceptance = "true";

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account with Role",
			accountEntryType = "Business");

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account without Role",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Role");

		Accounts.addOwnedAccountRole(accountRoleTitle = "Account Specific Role");

		Navigator.gotoBack();

		LexiconEntry.viewEntryName(rowEntry = "Account Specific Role");

		AssertTextEquals(
			key_columnName = "lfr-type",
			key_tableEntry = "Account Specific Role",
			locator1 = "LexiconTable#TABLE_ENTRY_COLUMN_LINK",
			value1 = "Owned");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account without Role");

		Accounts.gotoAssigneeTab(assigneeTab = "Roles");

		LexiconEntry.viewEntryName(rowEntry = "Account Administrator");

		LexiconEntry.viewNoEntry(rowEntry = "Account without Role");
	}

	@description = "Use case for LPS-139430. Asserts an account can be removed from a user through the Users Admin portlet"
	@priority = "3"
	test RemoveAccountFromUserViaUsersAdmin {
		task ("Given an account user is created under account") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Account Name",
				accountEntryType = "Business");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Account Name",
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("When removing this account through Users Admin") {
			User.removeAccountCP(
				accountName = "Account Name",
				userScreenName = "usersn");
		}

		task ("Then the user should no longer have this account listed in their memberships") {
			LexiconTable.viewTableEntryNotPresent(tableEntry = "Account Name");
		}
	}

	@description = "This test replaces user in Person Account with another existing user. It asserts that first user was replaced by the second user and isn't assigned to the account anymore."
	@priority = "5"
	test SelectingUserWillReplaceExistingUserInPersonAccount {
		property portal.acceptance = "true";

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Business Account",
			accountEntryType = "Business");

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Person Account",
			accountEntryType = "Person");

		for (var accountUser : list "1,2") {
			AccountUsers.openAccountUsersAdmin();

			AccountUsers.addUser(
				accountName = "Business Account",
				userEmailAddress = "userea${accountUser}@liferay.com",
				userFirstName = "userfn${accountUser}",
				userLastName = "userln${accountUser}",
				userScreenName = "usersn${accountUser}");
		}

		Accounts.openAccountsAdmin();

		Accounts.gotoEdit(accountName = "Person Account");

		for (var navTab : list "Details,Organizations,Roles") {
			Accounts.viewAssigneeTab(navTab = "${navTab}");
		}

		Accounts.viewNoAssigneeTab(navTab = "Users");

		Accounts.assignExistingUserToPersonAccount(accountUserName = "userfn1");

		Accounts.openAccountsAdmin();

		Accounts.gotoEdit(accountName = "Person Account");

		Accounts.assignExistingUserToPersonAccount(accountUserName = "userfn2");

		AssertElementNotPresent(
			key_userName = "userfn1",
			locator1 = "Account#USER_TABLE_NAME");
	}

	@description = "This test makes sure the default account roles are present in Roles Admin."
	@priority = "4"
	test SharedAccountRoleDisplaysInAllAccounts {
		Role.openRolesAdmin();

		Navigator.gotoNavItem(navItem = "Account Roles");

		LexiconEntry.gotoAdd();

		PortletEntry.inputTitle(title = "Shared Account Role");

		AssertClick(
			locator1 = "Button#SUBMIT",
			value1 = "Save");

		Alert.viewSuccessMessage();

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account 1",
			accountEntryType = "Business");

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account 2",
			accountEntryType = "Business");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account 1");

		Accounts.gotoAssigneeTab(assigneeTab = "Roles");

		LexiconEntry.viewEntryName(rowEntry = "Shared Account Role");

		AssertTextEquals(
			key_columnName = "lfr-type",
			key_tableEntry = "Shared Account Role",
			locator1 = "LexiconTable#TABLE_ENTRY_COLUMN_LINK",
			value1 = "Shared");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account 2");

		Accounts.gotoAssigneeTab(assigneeTab = "Roles");

		LexiconEntry.viewEntryName(rowEntry = "Shared Account Role");

		AssertTextEquals(
			key_columnName = "lfr-type",
			key_tableEntry = "Shared Account Role",
			locator1 = "LexiconTable#TABLE_ENTRY_COLUMN_LINK",
			value1 = "Shared");
	}

	@priority = "5"
	test Smoke {
		property portal.acceptance = "true";

		ApplicationsMenu.gotoPortlet(
			category = "Accounts",
			panel = "Control Panel",
			portlet = "Accounts");

		Accounts.addBusinessAccount(
			accountName = "Accounts Name for Test",
			accountTaxId = "Z9870654786390342199899Y");

		Accounts.openAccountsAdmin();

		Search.searchCP(searchTerm = "Accounts Name for Test");

		LexiconEntry.viewEntryName(rowEntry = "Accounts Name for Test");

		LexiconEntry.viewEntryStatus(
			rowEntry = "Accounts Name for Test",
			rowStatus = "Active");

		Accounts.viewAccountDetails(
			accountName = "Accounts Name for Test",
			accountTaxId = "Z9870654786390342199899Y");
	}

	@description = "This test assigns a user to an account with valid domain set. Manager can filter valid domain users and all users when assigning."
	@priority = "3"
	test UsersWithValidAndInvalidDomainsAreFilteredWhenAssigningUsers {
		AccountConfiguration.enableAccountEmailDomain();

		Accounts.openAccountsAdmin();

		Accounts.addAccountWithDomain(
			accountName = "Account with Domain",
			domainNames = "liferay.com");

		JSONAccountEntry.addAccountEntry(
			accountEntryName = "Account no Domain",
			accountEntryType = "Business");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Account no Domain",
			userEmailAddress = "userea1@different.com",
			userFirstName = "userfn1",
			userLastName = "userln1",
			userScreenName = "usersn1");

		AccountUsers.openAccountUsersAdmin();

		AccountUsers.addUser(
			accountName = "Account no Domain",
			userEmailAddress = "userea2@liferay.com",
			userFirstName = "userfn2",
			userLastName = "userln2",
			userScreenName = "usersn2");

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account no Domain");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		for (var assigneeName : list "userfn1,userfn2") {
			Accounts.viewAssignee(assigneeName = "${assigneeName}");
		}

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Domain");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		LexiconEntry.gotoAdd();

		Pause(locator1 = "3000");

		SelectFrame(
			key_title = "Assign Users to Account with Domain",
			locator1 = "IFrame#MODAL_ANY");

		LexiconEntry.viewEntryName(rowEntry = "userfn2 userln2");

		LexiconEntry.viewNoEntry(rowEntry = "userfn1 userln1");

		ManagementBar.setFilterAndOrder(filterBy = "All Users");

		LexiconEntry.viewEntryName(rowEntry = "userfn1 userln1");

		LexiconEntry.viewEntryName(rowEntry = "userfn2 userln2");

		PortletEntry.selectAll();

		SelectFrameTop();

		Button.click(button = "Assign");

		Alert.viewSuccessMessage();

		Accounts.openAccountsAdmin();

		LexiconEntry.gotoEntry(rowEntry = "Account with Domain");

		Accounts.gotoAssigneeTab(assigneeTab = "Users");

		LexiconEntry.viewNoEntry(rowEntry = "userfn1 userln1");

		LexiconEntry.viewEntryName(rowEntry = "userfn2 userln2");
	}

	@description = "This test asserts that domain validation is not present in Person Accounts."
	@priority = "4"
	test ValidDomainSectionDoesNotDisplayInPersonAccounts {
		AccountConfiguration.enableAccountEmailDomain();

		Accounts.openAccountsAdmin();

		Accounts.addPersonAccount(accountName = "Person Account");

		Accounts.openAccountsAdmin();

		Accounts.gotoEdit(accountName = "Person Account");

		AssertElementNotPresent(locator1 = "Account#VALID_DOMAINS_HEADING");
	}

}