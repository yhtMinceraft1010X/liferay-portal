@component-name = "data-engine"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Data Engine";

	setUp {
		TestCase.setUpPortalInstance();

		JSONGroup.addGroup(groupName = "Test Site Name");

		User.firstLoginPG();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeFieldNames = "Color",
			dmDocumentTypeName = "DM Document Type Name");

		DMNavigator.gotoEditDocumentType(dmDocumentTypeName = "DM Document Type Name");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			User.logoutPG();
		}
	}

	@description = "This test ensures its possible to delete the Color Field on a Document Type."
	@priority = "5"
	test DeleteColorFieldOnBuilder {
		property portal.acceptance = "false";

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DataEngine.delete(fieldFieldLabel = "Color");

		DDLDataDefinition.save();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Document Type Name");

		AssertElementNotPresent(
			key_fieldFieldLabel = "Color",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER");
	}

	@description = "This test ensures its possible to duplicate the Color Field on a Document Type."
	@priority = "4"
	test DuplicateColorFieldOnBuilder {
		property portal.acceptance = "false";

		DataEngine.duplicate(fieldFieldLabel = "Color");

		DDLDataDefinition.save();

		NavItem.click(navItem = "Files");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type Name");

		AssertElementPresent(
			key_fieldFieldLabel = "Color",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");

		AssertElementPresent(
			key_fieldFieldLabel = "Copy of Color",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
	}

	@description = "This test validates field reference input with and without invalid characters."
	@ignore = "true"
	@priority = "3"
	test EditColorFieldNameWithInvalidAndValidCharacters {
		property portal.acceptance = "false";

		DataEngine.editFieldReference(
			assertFieldReference = "ColorTest1",
			fieldFieldLabel = "Color",
			fieldReference = "%Color*Test @1");

		DDLDataDefinition.save();

		DMNavigator.gotoEditDocumentType(dmDocumentTypeName = "DM Document Type Name");

		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = "Color",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			value1 = "Color");

		Navigator.gotoNavTab(navTab = "Advanced");

		AssertTextEquals.assertValue(
			key_fieldLabel = "Field Reference",
			key_fieldName = "fieldReference",
			locator1 = "Sidebar#TEXT_INPUT",
			value1 = "ColorTest1");

		DataEngine.editFieldReference(
			assertFieldReference = "Color_Test",
			fieldFieldLabel = "Color",
			fieldReference = "Color_Test");

		DDLDataDefinition.save();

		DMNavigator.gotoEditDocumentType(dmDocumentTypeName = "DM Document Type Name");

		AssertClick.assertPartialTextClickAt(
			key_fieldFieldLabel = "Color",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER",
			value1 = "Color");

		Navigator.gotoNavTab(navTab = "Advanced");

		AssertTextEquals.assertValue(
			key_fieldLabel = "Field Reference",
			key_fieldName = "fieldReference",
			locator1 = "Sidebar#TEXT_INPUT",
			value1 = "Color_Test");
	}

	@description = "This test ensures that user can edit the label and help text of the color field."
	@priority = "5"
	test EditHelpTextAndLabelOfColorField {
		property portal.acceptance = "false";

		DataEngine.editFieldTip(
			fieldFieldLabel = "Color",
			fieldHelp = "Help Text");

		DDLDataDefinition.save();

		DMNavigator.gotoEditDocumentType(dmDocumentTypeName = "DM Document Type Name");

		DataEngine.viewField(
			fieldFieldLabel = "Color",
			fieldHelp = "Help Text",
			fieldName = "Color");

		DataEngine.editFieldLabel(
			fieldFieldLabel = "Color",
			fieldFieldLabelEdit = "Color Test Name");

		DDLDataDefinition.save();

		DMNavigator.gotoEditDocumentType(dmDocumentTypeName = "DM Document Type Name");

		AssertElementPresent(
			key_fieldFieldLabel = "Color Test Name",
			locator1 = "DDMEditStructure#FORM_FIELD_CONTAINER_LABEL");
	}

	@description = "This test ensures is possible to set color field as required."
	@priority = "4"
	test SetColorFieldAsRequired {
		property portal.acceptance = "false";

		DataEngine.editFieldRequired(fieldFieldLabel = "Color");

		DDLDataDefinition.save();

		NavItem.click(navItem = "Files");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type Name");

		PortletEntry.inputTitle(title = "DM Title Test");

		Button.clickPublish();

		AssertElementPresent(locator1 = "WCEditWebContent#FIELD_REQUIRED_ALERT");
	}

	@description = "This test ensures user can set a color on the color field."
	@priority = "5"
	test SetColorWithPicker {
		property portal.acceptance = "false";

		DDLDataDefinition.save();

		NavItem.click(navItem = "Files");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "DM Document Type Name");

		PortletEntry.inputTitle(title = "DM Title Test");

		DERenderer.inputDataInColorField(
			colorSelectionMethod = "RGB",
			fieldLabel = "Color",
			valueBlue = "248",
			valueGreen = "110",
			valueRed = "0");

		Button.clickPublish();

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Edit",
			rowEntry = "DM Title Test");

		DERenderer.assertDataInColorField(
			fieldLabel = "Color",
			value = "006ef8");
	}

	@description = "This test validates the set of searchable property on the color field."
	@priority = "4"
	test SetSearchablePropertyOfColorField {
		property portal.acceptance = "false";

		DataEngine.editFieldSearchable(
			fieldFieldLabel = "Color",
			searchableType = "Disable");

		DDLDataDefinition.save();

		DMNavigator.gotoEditDocumentType(dmDocumentTypeName = "DM Document Type Name");

		DataEngine.viewFieldSearchable(
			fieldFieldLabel = "Color",
			searchableType = "Disable");

		DataEngine.editFieldSearchable(
			fieldFieldLabel = "Color",
			searchableType = "Keyword");

		DDLDataDefinition.save();

		DMNavigator.gotoEditDocumentType(dmDocumentTypeName = "DM Document Type Name");

		DataEngine.viewFieldSearchable(
			fieldFieldLabel = "Color",
			searchableType = "Keyword");
	}

}