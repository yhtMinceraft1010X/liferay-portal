/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.product.model.impl;

import com.liferay.commerce.product.model.CPDefinitionOptionRel;
import com.liferay.commerce.product.model.CPDefinitionOptionRelModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CPDefinitionOptionRel service. Represents a row in the &quot;CPDefinitionOptionRel&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CPDefinitionOptionRelModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CPDefinitionOptionRelImpl}.
 * </p>
 *
 * @author Marco Leo
 * @see CPDefinitionOptionRelImpl
 * @generated
 */
@JSON(strict = true)
public class CPDefinitionOptionRelModelImpl
	extends BaseModelImpl<CPDefinitionOptionRel>
	implements CPDefinitionOptionRelModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cp definition option rel model instance should use the <code>CPDefinitionOptionRel</code> interface instead.
	 */
	public static final String TABLE_NAME = "CPDefinitionOptionRel";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"ctCollectionId", Types.BIGINT},
		{"uuid_", Types.VARCHAR}, {"CPDefinitionOptionRelId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"CPDefinitionId", Types.BIGINT}, {"CPOptionId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"DDMFormFieldTypeName", Types.VARCHAR}, {"priority", Types.DOUBLE},
		{"facetable", Types.BOOLEAN}, {"required", Types.BOOLEAN},
		{"skuContributor", Types.BOOLEAN}, {"key_", Types.VARCHAR},
		{"priceType", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ctCollectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CPDefinitionOptionRelId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CPDefinitionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("CPOptionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DDMFormFieldTypeName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("priority", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("facetable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("required", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("skuContributor", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("key_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("priceType", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CPDefinitionOptionRel (mvccVersion LONG default 0 not null,ctCollectionId LONG default 0 not null,uuid_ VARCHAR(75) null,CPDefinitionOptionRelId LONG not null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,CPDefinitionId LONG,CPOptionId LONG,name STRING null,description STRING null,DDMFormFieldTypeName VARCHAR(75) null,priority DOUBLE,facetable BOOLEAN,required BOOLEAN,skuContributor BOOLEAN,key_ VARCHAR(75) null,priceType VARCHAR(75) null,primary key (CPDefinitionOptionRelId, ctCollectionId))";

	public static final String TABLE_SQL_DROP =
		"drop table CPDefinitionOptionRel";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cpDefinitionOptionRel.priority ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CPDefinitionOptionRel.priority ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CPDEFINITIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CPOPTIONID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long KEY_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long REQUIRED_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SKUCONTRIBUTOR_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PRIORITY_COLUMN_BITMASK = 256L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.commerce.product.service.util.ServiceProps.get(
			"lock.expiration.time.com.liferay.commerce.product.model.CPDefinitionOptionRel"));

	public CPDefinitionOptionRelModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _CPDefinitionOptionRelId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCPDefinitionOptionRelId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _CPDefinitionOptionRelId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CPDefinitionOptionRel.class;
	}

	@Override
	public String getModelClassName() {
		return CPDefinitionOptionRel.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CPDefinitionOptionRel, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CPDefinitionOptionRel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPDefinitionOptionRel, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CPDefinitionOptionRel)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CPDefinitionOptionRel, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CPDefinitionOptionRel, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CPDefinitionOptionRel)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CPDefinitionOptionRel, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CPDefinitionOptionRel, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<CPDefinitionOptionRel, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CPDefinitionOptionRel, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CPDefinitionOptionRel, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<CPDefinitionOptionRel, Object>>();
		Map<String, BiConsumer<CPDefinitionOptionRel, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<CPDefinitionOptionRel, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", CPDefinitionOptionRel::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<CPDefinitionOptionRel, Long>)
				CPDefinitionOptionRel::setMvccVersion);
		attributeGetterFunctions.put(
			"ctCollectionId", CPDefinitionOptionRel::getCtCollectionId);
		attributeSetterBiConsumers.put(
			"ctCollectionId",
			(BiConsumer<CPDefinitionOptionRel, Long>)
				CPDefinitionOptionRel::setCtCollectionId);
		attributeGetterFunctions.put("uuid", CPDefinitionOptionRel::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<CPDefinitionOptionRel, String>)
				CPDefinitionOptionRel::setUuid);
		attributeGetterFunctions.put(
			"CPDefinitionOptionRelId",
			CPDefinitionOptionRel::getCPDefinitionOptionRelId);
		attributeSetterBiConsumers.put(
			"CPDefinitionOptionRelId",
			(BiConsumer<CPDefinitionOptionRel, Long>)
				CPDefinitionOptionRel::setCPDefinitionOptionRelId);
		attributeGetterFunctions.put(
			"groupId", CPDefinitionOptionRel::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<CPDefinitionOptionRel, Long>)
				CPDefinitionOptionRel::setGroupId);
		attributeGetterFunctions.put(
			"companyId", CPDefinitionOptionRel::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<CPDefinitionOptionRel, Long>)
				CPDefinitionOptionRel::setCompanyId);
		attributeGetterFunctions.put(
			"userId", CPDefinitionOptionRel::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<CPDefinitionOptionRel, Long>)
				CPDefinitionOptionRel::setUserId);
		attributeGetterFunctions.put(
			"userName", CPDefinitionOptionRel::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<CPDefinitionOptionRel, String>)
				CPDefinitionOptionRel::setUserName);
		attributeGetterFunctions.put(
			"createDate", CPDefinitionOptionRel::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<CPDefinitionOptionRel, Date>)
				CPDefinitionOptionRel::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", CPDefinitionOptionRel::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<CPDefinitionOptionRel, Date>)
				CPDefinitionOptionRel::setModifiedDate);
		attributeGetterFunctions.put(
			"CPDefinitionId", CPDefinitionOptionRel::getCPDefinitionId);
		attributeSetterBiConsumers.put(
			"CPDefinitionId",
			(BiConsumer<CPDefinitionOptionRel, Long>)
				CPDefinitionOptionRel::setCPDefinitionId);
		attributeGetterFunctions.put(
			"CPOptionId", CPDefinitionOptionRel::getCPOptionId);
		attributeSetterBiConsumers.put(
			"CPOptionId",
			(BiConsumer<CPDefinitionOptionRel, Long>)
				CPDefinitionOptionRel::setCPOptionId);
		attributeGetterFunctions.put("name", CPDefinitionOptionRel::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<CPDefinitionOptionRel, String>)
				CPDefinitionOptionRel::setName);
		attributeGetterFunctions.put(
			"description", CPDefinitionOptionRel::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<CPDefinitionOptionRel, String>)
				CPDefinitionOptionRel::setDescription);
		attributeGetterFunctions.put(
			"DDMFormFieldTypeName",
			CPDefinitionOptionRel::getDDMFormFieldTypeName);
		attributeSetterBiConsumers.put(
			"DDMFormFieldTypeName",
			(BiConsumer<CPDefinitionOptionRel, String>)
				CPDefinitionOptionRel::setDDMFormFieldTypeName);
		attributeGetterFunctions.put(
			"priority", CPDefinitionOptionRel::getPriority);
		attributeSetterBiConsumers.put(
			"priority",
			(BiConsumer<CPDefinitionOptionRel, Double>)
				CPDefinitionOptionRel::setPriority);
		attributeGetterFunctions.put(
			"facetable", CPDefinitionOptionRel::getFacetable);
		attributeSetterBiConsumers.put(
			"facetable",
			(BiConsumer<CPDefinitionOptionRel, Boolean>)
				CPDefinitionOptionRel::setFacetable);
		attributeGetterFunctions.put(
			"required", CPDefinitionOptionRel::getRequired);
		attributeSetterBiConsumers.put(
			"required",
			(BiConsumer<CPDefinitionOptionRel, Boolean>)
				CPDefinitionOptionRel::setRequired);
		attributeGetterFunctions.put(
			"skuContributor", CPDefinitionOptionRel::getSkuContributor);
		attributeSetterBiConsumers.put(
			"skuContributor",
			(BiConsumer<CPDefinitionOptionRel, Boolean>)
				CPDefinitionOptionRel::setSkuContributor);
		attributeGetterFunctions.put("key", CPDefinitionOptionRel::getKey);
		attributeSetterBiConsumers.put(
			"key",
			(BiConsumer<CPDefinitionOptionRel, String>)
				CPDefinitionOptionRel::setKey);
		attributeGetterFunctions.put(
			"priceType", CPDefinitionOptionRel::getPriceType);
		attributeSetterBiConsumers.put(
			"priceType",
			(BiConsumer<CPDefinitionOptionRel, String>)
				CPDefinitionOptionRel::setPriceType);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public long getCtCollectionId() {
		return _ctCollectionId;
	}

	@Override
	public void setCtCollectionId(long ctCollectionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ctCollectionId = ctCollectionId;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCPDefinitionOptionRelId() {
		return _CPDefinitionOptionRelId;
	}

	@Override
	public void setCPDefinitionOptionRelId(long CPDefinitionOptionRelId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CPDefinitionOptionRelId = CPDefinitionOptionRelId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCPDefinitionId() {
		return _CPDefinitionId;
	}

	@Override
	public void setCPDefinitionId(long CPDefinitionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CPDefinitionId = CPDefinitionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCPDefinitionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("CPDefinitionId"));
	}

	@JSON
	@Override
	public long getCPOptionId() {
		return _CPOptionId;
	}

	@Override
	public void setCPOptionId(long CPOptionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CPOptionId = CPOptionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCPOptionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("CPOptionId"));
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public String getName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId);
	}

	@Override
	public String getName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId, useDefault);
	}

	@Override
	public String getName(String languageId) {
		return LocalizationUtil.getLocalization(getName(), languageId);
	}

	@Override
	public String getName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getName(), languageId, useDefault);
	}

	@Override
	public String getNameCurrentLanguageId() {
		return _nameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNameCurrentValue() {
		Locale locale = getLocale(_nameCurrentLanguageId);

		return getName(locale);
	}

	@Override
	public Map<Locale, String> getNameMap() {
		return LocalizationUtil.getLocalizationMap(getName());
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public void setName(String name, Locale locale) {
		setName(name, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setName(String name, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(name)) {
			setName(
				LocalizationUtil.updateLocalization(
					getName(), "Name", name, languageId, defaultLanguageId));
		}
		else {
			setName(
				LocalizationUtil.removeLocalization(
					getName(), "Name", languageId));
		}
	}

	@Override
	public void setNameCurrentLanguageId(String languageId) {
		_nameCurrentLanguageId = languageId;
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap) {
		setNameMap(nameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
		if (nameMap == null) {
			return;
		}

		setName(
			LocalizationUtil.updateLocalization(
				nameMap, getName(), "Name",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDescription(), languageId, useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescription(
		String description, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(
				LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(
				LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionMap(
		Map<Locale, String> descriptionMap, Locale defaultLocale) {

		if (descriptionMap == null) {
			return;
		}

		setDescription(
			LocalizationUtil.updateLocalization(
				descriptionMap, getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDDMFormFieldTypeName() {
		if (_DDMFormFieldTypeName == null) {
			return "";
		}
		else {
			return _DDMFormFieldTypeName;
		}
	}

	@Override
	public void setDDMFormFieldTypeName(String DDMFormFieldTypeName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_DDMFormFieldTypeName = DDMFormFieldTypeName;
	}

	@JSON
	@Override
	public double getPriority() {
		return _priority;
	}

	@Override
	public void setPriority(double priority) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_priority = priority;
	}

	@JSON
	@Override
	public boolean getFacetable() {
		return _facetable;
	}

	@JSON
	@Override
	public boolean isFacetable() {
		return _facetable;
	}

	@Override
	public void setFacetable(boolean facetable) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_facetable = facetable;
	}

	@JSON
	@Override
	public boolean getRequired() {
		return _required;
	}

	@JSON
	@Override
	public boolean isRequired() {
		return _required;
	}

	@Override
	public void setRequired(boolean required) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_required = required;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalRequired() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("required"));
	}

	@JSON
	@Override
	public boolean getSkuContributor() {
		return _skuContributor;
	}

	@JSON
	@Override
	public boolean isSkuContributor() {
		return _skuContributor;
	}

	@Override
	public void setSkuContributor(boolean skuContributor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_skuContributor = skuContributor;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalSkuContributor() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("skuContributor"));
	}

	@JSON
	@Override
	public String getKey() {
		if (_key == null) {
			return "";
		}
		else {
			return _key;
		}
	}

	@Override
	public void setKey(String key) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_key = key;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalKey() {
		return getColumnOriginalValue("key_");
	}

	@JSON
	@Override
	public String getPriceType() {
		if (_priceType == null) {
			return "";
		}
		else {
			return _priceType;
		}
	}

	@Override
	public void setPriceType(String priceType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_priceType = priceType;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CPDefinitionOptionRel.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CPDefinitionOptionRel.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> nameMap = getNameMap();

		for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			CPDefinitionOptionRel.class.getName(), getPrimaryKey(),
			defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String name = getName(defaultLocale);

		if (Validator.isNull(name)) {
			setName(getName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setName(getName(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(
				getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(
				getDescription(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public CPDefinitionOptionRel toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CPDefinitionOptionRel>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CPDefinitionOptionRelImpl cpDefinitionOptionRelImpl =
			new CPDefinitionOptionRelImpl();

		cpDefinitionOptionRelImpl.setMvccVersion(getMvccVersion());
		cpDefinitionOptionRelImpl.setCtCollectionId(getCtCollectionId());
		cpDefinitionOptionRelImpl.setUuid(getUuid());
		cpDefinitionOptionRelImpl.setCPDefinitionOptionRelId(
			getCPDefinitionOptionRelId());
		cpDefinitionOptionRelImpl.setGroupId(getGroupId());
		cpDefinitionOptionRelImpl.setCompanyId(getCompanyId());
		cpDefinitionOptionRelImpl.setUserId(getUserId());
		cpDefinitionOptionRelImpl.setUserName(getUserName());
		cpDefinitionOptionRelImpl.setCreateDate(getCreateDate());
		cpDefinitionOptionRelImpl.setModifiedDate(getModifiedDate());
		cpDefinitionOptionRelImpl.setCPDefinitionId(getCPDefinitionId());
		cpDefinitionOptionRelImpl.setCPOptionId(getCPOptionId());
		cpDefinitionOptionRelImpl.setName(getName());
		cpDefinitionOptionRelImpl.setDescription(getDescription());
		cpDefinitionOptionRelImpl.setDDMFormFieldTypeName(
			getDDMFormFieldTypeName());
		cpDefinitionOptionRelImpl.setPriority(getPriority());
		cpDefinitionOptionRelImpl.setFacetable(isFacetable());
		cpDefinitionOptionRelImpl.setRequired(isRequired());
		cpDefinitionOptionRelImpl.setSkuContributor(isSkuContributor());
		cpDefinitionOptionRelImpl.setKey(getKey());
		cpDefinitionOptionRelImpl.setPriceType(getPriceType());

		cpDefinitionOptionRelImpl.resetOriginalValues();

		return cpDefinitionOptionRelImpl;
	}

	@Override
	public CPDefinitionOptionRel cloneWithOriginalValues() {
		CPDefinitionOptionRelImpl cpDefinitionOptionRelImpl =
			new CPDefinitionOptionRelImpl();

		cpDefinitionOptionRelImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		cpDefinitionOptionRelImpl.setCtCollectionId(
			this.<Long>getColumnOriginalValue("ctCollectionId"));
		cpDefinitionOptionRelImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		cpDefinitionOptionRelImpl.setCPDefinitionOptionRelId(
			this.<Long>getColumnOriginalValue("CPDefinitionOptionRelId"));
		cpDefinitionOptionRelImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		cpDefinitionOptionRelImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		cpDefinitionOptionRelImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		cpDefinitionOptionRelImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		cpDefinitionOptionRelImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		cpDefinitionOptionRelImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		cpDefinitionOptionRelImpl.setCPDefinitionId(
			this.<Long>getColumnOriginalValue("CPDefinitionId"));
		cpDefinitionOptionRelImpl.setCPOptionId(
			this.<Long>getColumnOriginalValue("CPOptionId"));
		cpDefinitionOptionRelImpl.setName(
			this.<String>getColumnOriginalValue("name"));
		cpDefinitionOptionRelImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		cpDefinitionOptionRelImpl.setDDMFormFieldTypeName(
			this.<String>getColumnOriginalValue("DDMFormFieldTypeName"));
		cpDefinitionOptionRelImpl.setPriority(
			this.<Double>getColumnOriginalValue("priority"));
		cpDefinitionOptionRelImpl.setFacetable(
			this.<Boolean>getColumnOriginalValue("facetable"));
		cpDefinitionOptionRelImpl.setRequired(
			this.<Boolean>getColumnOriginalValue("required"));
		cpDefinitionOptionRelImpl.setSkuContributor(
			this.<Boolean>getColumnOriginalValue("skuContributor"));
		cpDefinitionOptionRelImpl.setKey(
			this.<String>getColumnOriginalValue("key_"));
		cpDefinitionOptionRelImpl.setPriceType(
			this.<String>getColumnOriginalValue("priceType"));

		return cpDefinitionOptionRelImpl;
	}

	@Override
	public int compareTo(CPDefinitionOptionRel cpDefinitionOptionRel) {
		int value = 0;

		if (getPriority() < cpDefinitionOptionRel.getPriority()) {
			value = -1;
		}
		else if (getPriority() > cpDefinitionOptionRel.getPriority()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CPDefinitionOptionRel)) {
			return false;
		}

		CPDefinitionOptionRel cpDefinitionOptionRel =
			(CPDefinitionOptionRel)object;

		long primaryKey = cpDefinitionOptionRel.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CPDefinitionOptionRel> toCacheModel() {
		CPDefinitionOptionRelCacheModel cpDefinitionOptionRelCacheModel =
			new CPDefinitionOptionRelCacheModel();

		cpDefinitionOptionRelCacheModel.mvccVersion = getMvccVersion();

		cpDefinitionOptionRelCacheModel.ctCollectionId = getCtCollectionId();

		cpDefinitionOptionRelCacheModel.uuid = getUuid();

		String uuid = cpDefinitionOptionRelCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			cpDefinitionOptionRelCacheModel.uuid = null;
		}

		cpDefinitionOptionRelCacheModel.CPDefinitionOptionRelId =
			getCPDefinitionOptionRelId();

		cpDefinitionOptionRelCacheModel.groupId = getGroupId();

		cpDefinitionOptionRelCacheModel.companyId = getCompanyId();

		cpDefinitionOptionRelCacheModel.userId = getUserId();

		cpDefinitionOptionRelCacheModel.userName = getUserName();

		String userName = cpDefinitionOptionRelCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cpDefinitionOptionRelCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cpDefinitionOptionRelCacheModel.createDate = createDate.getTime();
		}
		else {
			cpDefinitionOptionRelCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cpDefinitionOptionRelCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			cpDefinitionOptionRelCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cpDefinitionOptionRelCacheModel.CPDefinitionId = getCPDefinitionId();

		cpDefinitionOptionRelCacheModel.CPOptionId = getCPOptionId();

		cpDefinitionOptionRelCacheModel.name = getName();

		String name = cpDefinitionOptionRelCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			cpDefinitionOptionRelCacheModel.name = null;
		}

		cpDefinitionOptionRelCacheModel.description = getDescription();

		String description = cpDefinitionOptionRelCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			cpDefinitionOptionRelCacheModel.description = null;
		}

		cpDefinitionOptionRelCacheModel.DDMFormFieldTypeName =
			getDDMFormFieldTypeName();

		String DDMFormFieldTypeName =
			cpDefinitionOptionRelCacheModel.DDMFormFieldTypeName;

		if ((DDMFormFieldTypeName != null) &&
			(DDMFormFieldTypeName.length() == 0)) {

			cpDefinitionOptionRelCacheModel.DDMFormFieldTypeName = null;
		}

		cpDefinitionOptionRelCacheModel.priority = getPriority();

		cpDefinitionOptionRelCacheModel.facetable = isFacetable();

		cpDefinitionOptionRelCacheModel.required = isRequired();

		cpDefinitionOptionRelCacheModel.skuContributor = isSkuContributor();

		cpDefinitionOptionRelCacheModel.key = getKey();

		String key = cpDefinitionOptionRelCacheModel.key;

		if ((key != null) && (key.length() == 0)) {
			cpDefinitionOptionRelCacheModel.key = null;
		}

		cpDefinitionOptionRelCacheModel.priceType = getPriceType();

		String priceType = cpDefinitionOptionRelCacheModel.priceType;

		if ((priceType != null) && (priceType.length() == 0)) {
			cpDefinitionOptionRelCacheModel.priceType = null;
		}

		return cpDefinitionOptionRelCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CPDefinitionOptionRel, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CPDefinitionOptionRel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPDefinitionOptionRel, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CPDefinitionOptionRel)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CPDefinitionOptionRel, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CPDefinitionOptionRel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPDefinitionOptionRel, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((CPDefinitionOptionRel)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CPDefinitionOptionRel>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CPDefinitionOptionRel.class, ModelWrapper.class);

	}

	private long _mvccVersion;
	private long _ctCollectionId;
	private String _uuid;
	private long _CPDefinitionOptionRelId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _CPDefinitionId;
	private long _CPOptionId;
	private String _name;
	private String _nameCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private String _DDMFormFieldTypeName;
	private double _priority;
	private boolean _facetable;
	private boolean _required;
	private boolean _skuContributor;
	private String _key;
	private String _priceType;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CPDefinitionOptionRel, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CPDefinitionOptionRel)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("ctCollectionId", _ctCollectionId);
		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"CPDefinitionOptionRelId", _CPDefinitionOptionRelId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("CPDefinitionId", _CPDefinitionId);
		_columnOriginalValues.put("CPOptionId", _CPOptionId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put(
			"DDMFormFieldTypeName", _DDMFormFieldTypeName);
		_columnOriginalValues.put("priority", _priority);
		_columnOriginalValues.put("facetable", _facetable);
		_columnOriginalValues.put("required", _required);
		_columnOriginalValues.put("skuContributor", _skuContributor);
		_columnOriginalValues.put("key_", _key);
		_columnOriginalValues.put("priceType", _priceType);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("key_", "key");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("ctCollectionId", 2L);

		columnBitmasks.put("uuid_", 4L);

		columnBitmasks.put("CPDefinitionOptionRelId", 8L);

		columnBitmasks.put("groupId", 16L);

		columnBitmasks.put("companyId", 32L);

		columnBitmasks.put("userId", 64L);

		columnBitmasks.put("userName", 128L);

		columnBitmasks.put("createDate", 256L);

		columnBitmasks.put("modifiedDate", 512L);

		columnBitmasks.put("CPDefinitionId", 1024L);

		columnBitmasks.put("CPOptionId", 2048L);

		columnBitmasks.put("name", 4096L);

		columnBitmasks.put("description", 8192L);

		columnBitmasks.put("DDMFormFieldTypeName", 16384L);

		columnBitmasks.put("priority", 32768L);

		columnBitmasks.put("facetable", 65536L);

		columnBitmasks.put("required", 131072L);

		columnBitmasks.put("skuContributor", 262144L);

		columnBitmasks.put("key_", 524288L);

		columnBitmasks.put("priceType", 1048576L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CPDefinitionOptionRel _escapedModel;

}