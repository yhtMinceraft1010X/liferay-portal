/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.product.model.impl;

import com.liferay.commerce.product.model.CPDefinitionOptionValueRel;
import com.liferay.commerce.product.model.CPDefinitionOptionValueRelModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.math.BigDecimal;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CPDefinitionOptionValueRel service. Represents a row in the &quot;CPDefinitionOptionValueRel&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CPDefinitionOptionValueRelModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CPDefinitionOptionValueRelImpl}.
 * </p>
 *
 * @author Marco Leo
 * @see CPDefinitionOptionValueRelImpl
 * @generated
 */
@JSON(strict = true)
public class CPDefinitionOptionValueRelModelImpl
	extends BaseModelImpl<CPDefinitionOptionValueRel>
	implements CPDefinitionOptionValueRelModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cp definition option value rel model instance should use the <code>CPDefinitionOptionValueRel</code> interface instead.
	 */
	public static final String TABLE_NAME = "CPDefinitionOptionValueRel";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"ctCollectionId", Types.BIGINT},
		{"uuid_", Types.VARCHAR},
		{"CPDefinitionOptionValueRelId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"CPDefinitionOptionRelId", Types.BIGINT},
		{"CPInstanceUuid", Types.VARCHAR}, {"CProductId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"priority", Types.DOUBLE},
		{"key_", Types.VARCHAR}, {"quantity", Types.INTEGER},
		{"preselected", Types.BOOLEAN}, {"price", Types.DECIMAL}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ctCollectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CPDefinitionOptionValueRelId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CPDefinitionOptionRelId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("CPInstanceUuid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CProductId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("priority", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("key_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("preselected", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("price", Types.DECIMAL);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CPDefinitionOptionValueRel (mvccVersion LONG default 0 not null,ctCollectionId LONG default 0 not null,uuid_ VARCHAR(75) null,CPDefinitionOptionValueRelId LONG not null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,CPDefinitionOptionRelId LONG,CPInstanceUuid VARCHAR(75) null,CProductId LONG,name STRING null,priority DOUBLE,key_ VARCHAR(75) null,quantity INTEGER,preselected BOOLEAN,price DECIMAL(30, 16) null,primary key (CPDefinitionOptionValueRelId, ctCollectionId))";

	public static final String TABLE_SQL_DROP =
		"drop table CPDefinitionOptionValueRel";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cpDefinitionOptionValueRel.priority ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CPDefinitionOptionValueRel.priority ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CPDEFINITIONOPTIONRELID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CPINSTANCEUUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long KEY_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PRESELECTED_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PRIORITY_COLUMN_BITMASK = 128L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.commerce.product.service.util.ServiceProps.get(
			"lock.expiration.time.com.liferay.commerce.product.model.CPDefinitionOptionValueRel"));

	public CPDefinitionOptionValueRelModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _CPDefinitionOptionValueRelId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCPDefinitionOptionValueRelId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _CPDefinitionOptionValueRelId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CPDefinitionOptionValueRel.class;
	}

	@Override
	public String getModelClassName() {
		return CPDefinitionOptionValueRel.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CPDefinitionOptionValueRel, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CPDefinitionOptionValueRel, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPDefinitionOptionValueRel, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(CPDefinitionOptionValueRel)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CPDefinitionOptionValueRel, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CPDefinitionOptionValueRel, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CPDefinitionOptionValueRel)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CPDefinitionOptionValueRel, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CPDefinitionOptionValueRel, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map
		<String, Function<CPDefinitionOptionValueRel, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<CPDefinitionOptionValueRel, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<CPDefinitionOptionValueRel, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<CPDefinitionOptionValueRel, Object>>();
		Map<String, BiConsumer<CPDefinitionOptionValueRel, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<CPDefinitionOptionValueRel, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", CPDefinitionOptionValueRel::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<CPDefinitionOptionValueRel, Long>)
				CPDefinitionOptionValueRel::setMvccVersion);
		attributeGetterFunctions.put(
			"ctCollectionId", CPDefinitionOptionValueRel::getCtCollectionId);
		attributeSetterBiConsumers.put(
			"ctCollectionId",
			(BiConsumer<CPDefinitionOptionValueRel, Long>)
				CPDefinitionOptionValueRel::setCtCollectionId);
		attributeGetterFunctions.put(
			"uuid", CPDefinitionOptionValueRel::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<CPDefinitionOptionValueRel, String>)
				CPDefinitionOptionValueRel::setUuid);
		attributeGetterFunctions.put(
			"CPDefinitionOptionValueRelId",
			CPDefinitionOptionValueRel::getCPDefinitionOptionValueRelId);
		attributeSetterBiConsumers.put(
			"CPDefinitionOptionValueRelId",
			(BiConsumer<CPDefinitionOptionValueRel, Long>)
				CPDefinitionOptionValueRel::setCPDefinitionOptionValueRelId);
		attributeGetterFunctions.put(
			"groupId", CPDefinitionOptionValueRel::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<CPDefinitionOptionValueRel, Long>)
				CPDefinitionOptionValueRel::setGroupId);
		attributeGetterFunctions.put(
			"companyId", CPDefinitionOptionValueRel::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<CPDefinitionOptionValueRel, Long>)
				CPDefinitionOptionValueRel::setCompanyId);
		attributeGetterFunctions.put(
			"userId", CPDefinitionOptionValueRel::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<CPDefinitionOptionValueRel, Long>)
				CPDefinitionOptionValueRel::setUserId);
		attributeGetterFunctions.put(
			"userName", CPDefinitionOptionValueRel::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<CPDefinitionOptionValueRel, String>)
				CPDefinitionOptionValueRel::setUserName);
		attributeGetterFunctions.put(
			"createDate", CPDefinitionOptionValueRel::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<CPDefinitionOptionValueRel, Date>)
				CPDefinitionOptionValueRel::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", CPDefinitionOptionValueRel::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<CPDefinitionOptionValueRel, Date>)
				CPDefinitionOptionValueRel::setModifiedDate);
		attributeGetterFunctions.put(
			"CPDefinitionOptionRelId",
			CPDefinitionOptionValueRel::getCPDefinitionOptionRelId);
		attributeSetterBiConsumers.put(
			"CPDefinitionOptionRelId",
			(BiConsumer<CPDefinitionOptionValueRel, Long>)
				CPDefinitionOptionValueRel::setCPDefinitionOptionRelId);
		attributeGetterFunctions.put(
			"CPInstanceUuid", CPDefinitionOptionValueRel::getCPInstanceUuid);
		attributeSetterBiConsumers.put(
			"CPInstanceUuid",
			(BiConsumer<CPDefinitionOptionValueRel, String>)
				CPDefinitionOptionValueRel::setCPInstanceUuid);
		attributeGetterFunctions.put(
			"CProductId", CPDefinitionOptionValueRel::getCProductId);
		attributeSetterBiConsumers.put(
			"CProductId",
			(BiConsumer<CPDefinitionOptionValueRel, Long>)
				CPDefinitionOptionValueRel::setCProductId);
		attributeGetterFunctions.put(
			"name", CPDefinitionOptionValueRel::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<CPDefinitionOptionValueRel, String>)
				CPDefinitionOptionValueRel::setName);
		attributeGetterFunctions.put(
			"priority", CPDefinitionOptionValueRel::getPriority);
		attributeSetterBiConsumers.put(
			"priority",
			(BiConsumer<CPDefinitionOptionValueRel, Double>)
				CPDefinitionOptionValueRel::setPriority);
		attributeGetterFunctions.put("key", CPDefinitionOptionValueRel::getKey);
		attributeSetterBiConsumers.put(
			"key",
			(BiConsumer<CPDefinitionOptionValueRel, String>)
				CPDefinitionOptionValueRel::setKey);
		attributeGetterFunctions.put(
			"quantity", CPDefinitionOptionValueRel::getQuantity);
		attributeSetterBiConsumers.put(
			"quantity",
			(BiConsumer<CPDefinitionOptionValueRel, Integer>)
				CPDefinitionOptionValueRel::setQuantity);
		attributeGetterFunctions.put(
			"preselected", CPDefinitionOptionValueRel::getPreselected);
		attributeSetterBiConsumers.put(
			"preselected",
			(BiConsumer<CPDefinitionOptionValueRel, Boolean>)
				CPDefinitionOptionValueRel::setPreselected);
		attributeGetterFunctions.put(
			"price", CPDefinitionOptionValueRel::getPrice);
		attributeSetterBiConsumers.put(
			"price",
			(BiConsumer<CPDefinitionOptionValueRel, BigDecimal>)
				CPDefinitionOptionValueRel::setPrice);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public long getCtCollectionId() {
		return _ctCollectionId;
	}

	@Override
	public void setCtCollectionId(long ctCollectionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ctCollectionId = ctCollectionId;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCPDefinitionOptionValueRelId() {
		return _CPDefinitionOptionValueRelId;
	}

	@Override
	public void setCPDefinitionOptionValueRelId(
		long CPDefinitionOptionValueRelId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CPDefinitionOptionValueRelId = CPDefinitionOptionValueRelId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCPDefinitionOptionRelId() {
		return _CPDefinitionOptionRelId;
	}

	@Override
	public void setCPDefinitionOptionRelId(long CPDefinitionOptionRelId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CPDefinitionOptionRelId = CPDefinitionOptionRelId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCPDefinitionOptionRelId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("CPDefinitionOptionRelId"));
	}

	@JSON
	@Override
	public String getCPInstanceUuid() {
		if (_CPInstanceUuid == null) {
			return "";
		}
		else {
			return _CPInstanceUuid;
		}
	}

	@Override
	public void setCPInstanceUuid(String CPInstanceUuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CPInstanceUuid = CPInstanceUuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCPInstanceUuid() {
		return getColumnOriginalValue("CPInstanceUuid");
	}

	@JSON
	@Override
	public long getCProductId() {
		return _CProductId;
	}

	@Override
	public void setCProductId(long CProductId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CProductId = CProductId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public String getName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId);
	}

	@Override
	public String getName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId, useDefault);
	}

	@Override
	public String getName(String languageId) {
		return LocalizationUtil.getLocalization(getName(), languageId);
	}

	@Override
	public String getName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getName(), languageId, useDefault);
	}

	@Override
	public String getNameCurrentLanguageId() {
		return _nameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNameCurrentValue() {
		Locale locale = getLocale(_nameCurrentLanguageId);

		return getName(locale);
	}

	@Override
	public Map<Locale, String> getNameMap() {
		return LocalizationUtil.getLocalizationMap(getName());
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public void setName(String name, Locale locale) {
		setName(name, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setName(String name, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(name)) {
			setName(
				LocalizationUtil.updateLocalization(
					getName(), "Name", name, languageId, defaultLanguageId));
		}
		else {
			setName(
				LocalizationUtil.removeLocalization(
					getName(), "Name", languageId));
		}
	}

	@Override
	public void setNameCurrentLanguageId(String languageId) {
		_nameCurrentLanguageId = languageId;
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap) {
		setNameMap(nameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
		if (nameMap == null) {
			return;
		}

		setName(
			LocalizationUtil.updateLocalization(
				nameMap, getName(), "Name",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public double getPriority() {
		return _priority;
	}

	@Override
	public void setPriority(double priority) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_priority = priority;
	}

	@JSON
	@Override
	public String getKey() {
		if (_key == null) {
			return "";
		}
		else {
			return _key;
		}
	}

	@Override
	public void setKey(String key) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_key = key;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalKey() {
		return getColumnOriginalValue("key_");
	}

	@JSON
	@Override
	public int getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(int quantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quantity = quantity;
	}

	@JSON
	@Override
	public boolean getPreselected() {
		return _preselected;
	}

	@JSON
	@Override
	public boolean isPreselected() {
		return _preselected;
	}

	@Override
	public void setPreselected(boolean preselected) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_preselected = preselected;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalPreselected() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("preselected"));
	}

	@JSON
	@Override
	public BigDecimal getPrice() {
		return _price;
	}

	@Override
	public void setPrice(BigDecimal price) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_price = price;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				CPDefinitionOptionValueRel.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CPDefinitionOptionValueRel.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> nameMap = getNameMap();

		for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			CPDefinitionOptionValueRel.class.getName(), getPrimaryKey(),
			defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String name = getName(defaultLocale);

		if (Validator.isNull(name)) {
			setName(getName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setName(getName(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public CPDefinitionOptionValueRel toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CPDefinitionOptionValueRel>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CPDefinitionOptionValueRelImpl cpDefinitionOptionValueRelImpl =
			new CPDefinitionOptionValueRelImpl();

		cpDefinitionOptionValueRelImpl.setMvccVersion(getMvccVersion());
		cpDefinitionOptionValueRelImpl.setCtCollectionId(getCtCollectionId());
		cpDefinitionOptionValueRelImpl.setUuid(getUuid());
		cpDefinitionOptionValueRelImpl.setCPDefinitionOptionValueRelId(
			getCPDefinitionOptionValueRelId());
		cpDefinitionOptionValueRelImpl.setGroupId(getGroupId());
		cpDefinitionOptionValueRelImpl.setCompanyId(getCompanyId());
		cpDefinitionOptionValueRelImpl.setUserId(getUserId());
		cpDefinitionOptionValueRelImpl.setUserName(getUserName());
		cpDefinitionOptionValueRelImpl.setCreateDate(getCreateDate());
		cpDefinitionOptionValueRelImpl.setModifiedDate(getModifiedDate());
		cpDefinitionOptionValueRelImpl.setCPDefinitionOptionRelId(
			getCPDefinitionOptionRelId());
		cpDefinitionOptionValueRelImpl.setCPInstanceUuid(getCPInstanceUuid());
		cpDefinitionOptionValueRelImpl.setCProductId(getCProductId());
		cpDefinitionOptionValueRelImpl.setName(getName());
		cpDefinitionOptionValueRelImpl.setPriority(getPriority());
		cpDefinitionOptionValueRelImpl.setKey(getKey());
		cpDefinitionOptionValueRelImpl.setQuantity(getQuantity());
		cpDefinitionOptionValueRelImpl.setPreselected(isPreselected());
		cpDefinitionOptionValueRelImpl.setPrice(getPrice());

		cpDefinitionOptionValueRelImpl.resetOriginalValues();

		return cpDefinitionOptionValueRelImpl;
	}

	@Override
	public CPDefinitionOptionValueRel cloneWithOriginalValues() {
		CPDefinitionOptionValueRelImpl cpDefinitionOptionValueRelImpl =
			new CPDefinitionOptionValueRelImpl();

		cpDefinitionOptionValueRelImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		cpDefinitionOptionValueRelImpl.setCtCollectionId(
			this.<Long>getColumnOriginalValue("ctCollectionId"));
		cpDefinitionOptionValueRelImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		cpDefinitionOptionValueRelImpl.setCPDefinitionOptionValueRelId(
			this.<Long>getColumnOriginalValue("CPDefinitionOptionValueRelId"));
		cpDefinitionOptionValueRelImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		cpDefinitionOptionValueRelImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		cpDefinitionOptionValueRelImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		cpDefinitionOptionValueRelImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		cpDefinitionOptionValueRelImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		cpDefinitionOptionValueRelImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		cpDefinitionOptionValueRelImpl.setCPDefinitionOptionRelId(
			this.<Long>getColumnOriginalValue("CPDefinitionOptionRelId"));
		cpDefinitionOptionValueRelImpl.setCPInstanceUuid(
			this.<String>getColumnOriginalValue("CPInstanceUuid"));
		cpDefinitionOptionValueRelImpl.setCProductId(
			this.<Long>getColumnOriginalValue("CProductId"));
		cpDefinitionOptionValueRelImpl.setName(
			this.<String>getColumnOriginalValue("name"));
		cpDefinitionOptionValueRelImpl.setPriority(
			this.<Double>getColumnOriginalValue("priority"));
		cpDefinitionOptionValueRelImpl.setKey(
			this.<String>getColumnOriginalValue("key_"));
		cpDefinitionOptionValueRelImpl.setQuantity(
			this.<Integer>getColumnOriginalValue("quantity"));
		cpDefinitionOptionValueRelImpl.setPreselected(
			this.<Boolean>getColumnOriginalValue("preselected"));
		cpDefinitionOptionValueRelImpl.setPrice(
			this.<BigDecimal>getColumnOriginalValue("price"));

		return cpDefinitionOptionValueRelImpl;
	}

	@Override
	public int compareTo(
		CPDefinitionOptionValueRel cpDefinitionOptionValueRel) {

		int value = 0;

		if (getPriority() < cpDefinitionOptionValueRel.getPriority()) {
			value = -1;
		}
		else if (getPriority() > cpDefinitionOptionValueRel.getPriority()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CPDefinitionOptionValueRel)) {
			return false;
		}

		CPDefinitionOptionValueRel cpDefinitionOptionValueRel =
			(CPDefinitionOptionValueRel)object;

		long primaryKey = cpDefinitionOptionValueRel.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CPDefinitionOptionValueRel> toCacheModel() {
		CPDefinitionOptionValueRelCacheModel
			cpDefinitionOptionValueRelCacheModel =
				new CPDefinitionOptionValueRelCacheModel();

		cpDefinitionOptionValueRelCacheModel.mvccVersion = getMvccVersion();

		cpDefinitionOptionValueRelCacheModel.ctCollectionId =
			getCtCollectionId();

		cpDefinitionOptionValueRelCacheModel.uuid = getUuid();

		String uuid = cpDefinitionOptionValueRelCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			cpDefinitionOptionValueRelCacheModel.uuid = null;
		}

		cpDefinitionOptionValueRelCacheModel.CPDefinitionOptionValueRelId =
			getCPDefinitionOptionValueRelId();

		cpDefinitionOptionValueRelCacheModel.groupId = getGroupId();

		cpDefinitionOptionValueRelCacheModel.companyId = getCompanyId();

		cpDefinitionOptionValueRelCacheModel.userId = getUserId();

		cpDefinitionOptionValueRelCacheModel.userName = getUserName();

		String userName = cpDefinitionOptionValueRelCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cpDefinitionOptionValueRelCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cpDefinitionOptionValueRelCacheModel.createDate =
				createDate.getTime();
		}
		else {
			cpDefinitionOptionValueRelCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cpDefinitionOptionValueRelCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			cpDefinitionOptionValueRelCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cpDefinitionOptionValueRelCacheModel.CPDefinitionOptionRelId =
			getCPDefinitionOptionRelId();

		cpDefinitionOptionValueRelCacheModel.CPInstanceUuid =
			getCPInstanceUuid();

		String CPInstanceUuid =
			cpDefinitionOptionValueRelCacheModel.CPInstanceUuid;

		if ((CPInstanceUuid != null) && (CPInstanceUuid.length() == 0)) {
			cpDefinitionOptionValueRelCacheModel.CPInstanceUuid = null;
		}

		cpDefinitionOptionValueRelCacheModel.CProductId = getCProductId();

		cpDefinitionOptionValueRelCacheModel.name = getName();

		String name = cpDefinitionOptionValueRelCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			cpDefinitionOptionValueRelCacheModel.name = null;
		}

		cpDefinitionOptionValueRelCacheModel.priority = getPriority();

		cpDefinitionOptionValueRelCacheModel.key = getKey();

		String key = cpDefinitionOptionValueRelCacheModel.key;

		if ((key != null) && (key.length() == 0)) {
			cpDefinitionOptionValueRelCacheModel.key = null;
		}

		cpDefinitionOptionValueRelCacheModel.quantity = getQuantity();

		cpDefinitionOptionValueRelCacheModel.preselected = isPreselected();

		cpDefinitionOptionValueRelCacheModel.price = getPrice();

		return cpDefinitionOptionValueRelCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CPDefinitionOptionValueRel, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CPDefinitionOptionValueRel, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPDefinitionOptionValueRel, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CPDefinitionOptionValueRel)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CPDefinitionOptionValueRel, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CPDefinitionOptionValueRel, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPDefinitionOptionValueRel, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply(
					(CPDefinitionOptionValueRel)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, CPDefinitionOptionValueRel>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						CPDefinitionOptionValueRel.class, ModelWrapper.class);

	}

	private long _mvccVersion;
	private long _ctCollectionId;
	private String _uuid;
	private long _CPDefinitionOptionValueRelId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _CPDefinitionOptionRelId;
	private String _CPInstanceUuid;
	private long _CProductId;
	private String _name;
	private String _nameCurrentLanguageId;
	private double _priority;
	private String _key;
	private int _quantity;
	private boolean _preselected;
	private BigDecimal _price;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CPDefinitionOptionValueRel, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CPDefinitionOptionValueRel)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("ctCollectionId", _ctCollectionId);
		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"CPDefinitionOptionValueRelId", _CPDefinitionOptionValueRelId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put(
			"CPDefinitionOptionRelId", _CPDefinitionOptionRelId);
		_columnOriginalValues.put("CPInstanceUuid", _CPInstanceUuid);
		_columnOriginalValues.put("CProductId", _CProductId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("priority", _priority);
		_columnOriginalValues.put("key_", _key);
		_columnOriginalValues.put("quantity", _quantity);
		_columnOriginalValues.put("preselected", _preselected);
		_columnOriginalValues.put("price", _price);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("key_", "key");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("ctCollectionId", 2L);

		columnBitmasks.put("uuid_", 4L);

		columnBitmasks.put("CPDefinitionOptionValueRelId", 8L);

		columnBitmasks.put("groupId", 16L);

		columnBitmasks.put("companyId", 32L);

		columnBitmasks.put("userId", 64L);

		columnBitmasks.put("userName", 128L);

		columnBitmasks.put("createDate", 256L);

		columnBitmasks.put("modifiedDate", 512L);

		columnBitmasks.put("CPDefinitionOptionRelId", 1024L);

		columnBitmasks.put("CPInstanceUuid", 2048L);

		columnBitmasks.put("CProductId", 4096L);

		columnBitmasks.put("name", 8192L);

		columnBitmasks.put("priority", 16384L);

		columnBitmasks.put("key_", 32768L);

		columnBitmasks.put("quantity", 65536L);

		columnBitmasks.put("preselected", 131072L);

		columnBitmasks.put("price", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CPDefinitionOptionValueRel _escapedModel;

}