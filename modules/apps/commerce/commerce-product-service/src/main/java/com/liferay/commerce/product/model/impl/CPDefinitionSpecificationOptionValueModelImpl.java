/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.product.model.impl;

import com.liferay.commerce.product.model.CPDefinitionSpecificationOptionValue;
import com.liferay.commerce.product.model.CPDefinitionSpecificationOptionValueModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CPDefinitionSpecificationOptionValue service. Represents a row in the &quot;CPDSpecificationOptionValue&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CPDefinitionSpecificationOptionValueModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CPDefinitionSpecificationOptionValueImpl}.
 * </p>
 *
 * @author Marco Leo
 * @see CPDefinitionSpecificationOptionValueImpl
 * @generated
 */
@JSON(strict = true)
public class CPDefinitionSpecificationOptionValueModelImpl
	extends BaseModelImpl<CPDefinitionSpecificationOptionValue>
	implements CPDefinitionSpecificationOptionValueModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cp definition specification option value model instance should use the <code>CPDefinitionSpecificationOptionValue</code> interface instead.
	 */
	public static final String TABLE_NAME = "CPDSpecificationOptionValue";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"ctCollectionId", Types.BIGINT},
		{"uuid_", Types.VARCHAR},
		{"CPDSpecificationOptionValueId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"CPDefinitionId", Types.BIGINT},
		{"CPSpecificationOptionId", Types.BIGINT},
		{"CPOptionCategoryId", Types.BIGINT}, {"value", Types.VARCHAR},
		{"priority", Types.DOUBLE}, {"lastPublishDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ctCollectionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CPDSpecificationOptionValueId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CPDefinitionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("CPSpecificationOptionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("CPOptionCategoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("value", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("priority", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CPDSpecificationOptionValue (mvccVersion LONG default 0 not null,ctCollectionId LONG default 0 not null,uuid_ VARCHAR(75) null,CPDSpecificationOptionValueId LONG not null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,CPDefinitionId LONG,CPSpecificationOptionId LONG,CPOptionCategoryId LONG,value STRING null,priority DOUBLE,lastPublishDate DATE null,primary key (CPDSpecificationOptionValueId, ctCollectionId))";

	public static final String TABLE_SQL_DROP =
		"drop table CPDSpecificationOptionValue";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cpDefinitionSpecificationOptionValue.priority ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CPDSpecificationOptionValue.priority ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CPDEFINITIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long
		CPDEFINITIONSPECIFICATIONOPTIONVALUEID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CPOPTIONCATEGORYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CPSPECIFICATIONOPTIONID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PRIORITY_COLUMN_BITMASK = 128L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.commerce.product.service.util.ServiceProps.get(
			"lock.expiration.time.com.liferay.commerce.product.model.CPDefinitionSpecificationOptionValue"));

	public CPDefinitionSpecificationOptionValueModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _CPDefinitionSpecificationOptionValueId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCPDefinitionSpecificationOptionValueId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _CPDefinitionSpecificationOptionValueId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CPDefinitionSpecificationOptionValue.class;
	}

	@Override
	public String getModelClassName() {
		return CPDefinitionSpecificationOptionValue.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CPDefinitionSpecificationOptionValue, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry
				<String, Function<CPDefinitionSpecificationOptionValue, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPDefinitionSpecificationOptionValue, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(CPDefinitionSpecificationOptionValue)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CPDefinitionSpecificationOptionValue, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CPDefinitionSpecificationOptionValue, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CPDefinitionSpecificationOptionValue)this,
					entry.getValue());
			}
		}
	}

	public Map<String, Function<CPDefinitionSpecificationOptionValue, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CPDefinitionSpecificationOptionValue, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map
		<String, Function<CPDefinitionSpecificationOptionValue, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<CPDefinitionSpecificationOptionValue, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<CPDefinitionSpecificationOptionValue, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String,
					 Function<CPDefinitionSpecificationOptionValue, Object>>();
		Map<String, BiConsumer<CPDefinitionSpecificationOptionValue, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String,
					 BiConsumer<CPDefinitionSpecificationOptionValue, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion",
			CPDefinitionSpecificationOptionValue::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<CPDefinitionSpecificationOptionValue, Long>)
				CPDefinitionSpecificationOptionValue::setMvccVersion);
		attributeGetterFunctions.put(
			"ctCollectionId",
			CPDefinitionSpecificationOptionValue::getCtCollectionId);
		attributeSetterBiConsumers.put(
			"ctCollectionId",
			(BiConsumer<CPDefinitionSpecificationOptionValue, Long>)
				CPDefinitionSpecificationOptionValue::setCtCollectionId);
		attributeGetterFunctions.put(
			"uuid", CPDefinitionSpecificationOptionValue::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<CPDefinitionSpecificationOptionValue, String>)
				CPDefinitionSpecificationOptionValue::setUuid);
		attributeGetterFunctions.put(
			"CPDefinitionSpecificationOptionValueId",
			CPDefinitionSpecificationOptionValue::
				getCPDefinitionSpecificationOptionValueId);
		attributeSetterBiConsumers.put(
			"CPDefinitionSpecificationOptionValueId",
			(BiConsumer<CPDefinitionSpecificationOptionValue, Long>)
				CPDefinitionSpecificationOptionValue::
					setCPDefinitionSpecificationOptionValueId);
		attributeGetterFunctions.put(
			"groupId", CPDefinitionSpecificationOptionValue::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<CPDefinitionSpecificationOptionValue, Long>)
				CPDefinitionSpecificationOptionValue::setGroupId);
		attributeGetterFunctions.put(
			"companyId", CPDefinitionSpecificationOptionValue::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<CPDefinitionSpecificationOptionValue, Long>)
				CPDefinitionSpecificationOptionValue::setCompanyId);
		attributeGetterFunctions.put(
			"userId", CPDefinitionSpecificationOptionValue::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<CPDefinitionSpecificationOptionValue, Long>)
				CPDefinitionSpecificationOptionValue::setUserId);
		attributeGetterFunctions.put(
			"userName", CPDefinitionSpecificationOptionValue::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<CPDefinitionSpecificationOptionValue, String>)
				CPDefinitionSpecificationOptionValue::setUserName);
		attributeGetterFunctions.put(
			"createDate", CPDefinitionSpecificationOptionValue::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<CPDefinitionSpecificationOptionValue, Date>)
				CPDefinitionSpecificationOptionValue::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate",
			CPDefinitionSpecificationOptionValue::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<CPDefinitionSpecificationOptionValue, Date>)
				CPDefinitionSpecificationOptionValue::setModifiedDate);
		attributeGetterFunctions.put(
			"CPDefinitionId",
			CPDefinitionSpecificationOptionValue::getCPDefinitionId);
		attributeSetterBiConsumers.put(
			"CPDefinitionId",
			(BiConsumer<CPDefinitionSpecificationOptionValue, Long>)
				CPDefinitionSpecificationOptionValue::setCPDefinitionId);
		attributeGetterFunctions.put(
			"CPSpecificationOptionId",
			CPDefinitionSpecificationOptionValue::getCPSpecificationOptionId);
		attributeSetterBiConsumers.put(
			"CPSpecificationOptionId",
			(BiConsumer<CPDefinitionSpecificationOptionValue, Long>)
				CPDefinitionSpecificationOptionValue::
					setCPSpecificationOptionId);
		attributeGetterFunctions.put(
			"CPOptionCategoryId",
			CPDefinitionSpecificationOptionValue::getCPOptionCategoryId);
		attributeSetterBiConsumers.put(
			"CPOptionCategoryId",
			(BiConsumer<CPDefinitionSpecificationOptionValue, Long>)
				CPDefinitionSpecificationOptionValue::setCPOptionCategoryId);
		attributeGetterFunctions.put(
			"value", CPDefinitionSpecificationOptionValue::getValue);
		attributeSetterBiConsumers.put(
			"value",
			(BiConsumer<CPDefinitionSpecificationOptionValue, String>)
				CPDefinitionSpecificationOptionValue::setValue);
		attributeGetterFunctions.put(
			"priority", CPDefinitionSpecificationOptionValue::getPriority);
		attributeSetterBiConsumers.put(
			"priority",
			(BiConsumer<CPDefinitionSpecificationOptionValue, Double>)
				CPDefinitionSpecificationOptionValue::setPriority);
		attributeGetterFunctions.put(
			"lastPublishDate",
			CPDefinitionSpecificationOptionValue::getLastPublishDate);
		attributeSetterBiConsumers.put(
			"lastPublishDate",
			(BiConsumer<CPDefinitionSpecificationOptionValue, Date>)
				CPDefinitionSpecificationOptionValue::setLastPublishDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public long getCtCollectionId() {
		return _ctCollectionId;
	}

	@Override
	public void setCtCollectionId(long ctCollectionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ctCollectionId = ctCollectionId;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCPDefinitionSpecificationOptionValueId() {
		return _CPDefinitionSpecificationOptionValueId;
	}

	@Override
	public void setCPDefinitionSpecificationOptionValueId(
		long CPDefinitionSpecificationOptionValueId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CPDefinitionSpecificationOptionValueId =
			CPDefinitionSpecificationOptionValueId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCPDefinitionSpecificationOptionValueId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("CPDSpecificationOptionValueId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCPDefinitionId() {
		return _CPDefinitionId;
	}

	@Override
	public void setCPDefinitionId(long CPDefinitionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CPDefinitionId = CPDefinitionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCPDefinitionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("CPDefinitionId"));
	}

	@JSON
	@Override
	public long getCPSpecificationOptionId() {
		return _CPSpecificationOptionId;
	}

	@Override
	public void setCPSpecificationOptionId(long CPSpecificationOptionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CPSpecificationOptionId = CPSpecificationOptionId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCPSpecificationOptionId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("CPSpecificationOptionId"));
	}

	@JSON
	@Override
	public long getCPOptionCategoryId() {
		return _CPOptionCategoryId;
	}

	@Override
	public void setCPOptionCategoryId(long CPOptionCategoryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CPOptionCategoryId = CPOptionCategoryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCPOptionCategoryId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("CPOptionCategoryId"));
	}

	@JSON
	@Override
	public String getValue() {
		if (_value == null) {
			return "";
		}
		else {
			return _value;
		}
	}

	@Override
	public String getValue(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getValue(languageId);
	}

	@Override
	public String getValue(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getValue(languageId, useDefault);
	}

	@Override
	public String getValue(String languageId) {
		return LocalizationUtil.getLocalization(getValue(), languageId);
	}

	@Override
	public String getValue(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getValue(), languageId, useDefault);
	}

	@Override
	public String getValueCurrentLanguageId() {
		return _valueCurrentLanguageId;
	}

	@JSON
	@Override
	public String getValueCurrentValue() {
		Locale locale = getLocale(_valueCurrentLanguageId);

		return getValue(locale);
	}

	@Override
	public Map<Locale, String> getValueMap() {
		return LocalizationUtil.getLocalizationMap(getValue());
	}

	@Override
	public void setValue(String value) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_value = value;
	}

	@Override
	public void setValue(String value, Locale locale) {
		setValue(value, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setValue(String value, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(value)) {
			setValue(
				LocalizationUtil.updateLocalization(
					getValue(), "Value", value, languageId, defaultLanguageId));
		}
		else {
			setValue(
				LocalizationUtil.removeLocalization(
					getValue(), "Value", languageId));
		}
	}

	@Override
	public void setValueCurrentLanguageId(String languageId) {
		_valueCurrentLanguageId = languageId;
	}

	@Override
	public void setValueMap(Map<Locale, String> valueMap) {
		setValueMap(valueMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setValueMap(
		Map<Locale, String> valueMap, Locale defaultLocale) {

		if (valueMap == null) {
			return;
		}

		setValue(
			LocalizationUtil.updateLocalization(
				valueMap, getValue(), "Value",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public double getPriority() {
		return _priority;
	}

	@Override
	public void setPriority(double priority) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_priority = priority;
	}

	@JSON
	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastPublishDate = lastPublishDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				CPDefinitionSpecificationOptionValue.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(),
			CPDefinitionSpecificationOptionValue.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> valueMap = getValueMap();

		for (Map.Entry<Locale, String> entry : valueMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getValue();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			CPDefinitionSpecificationOptionValue.class.getName(),
			getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String value = getValue(defaultLocale);

		if (Validator.isNull(value)) {
			setValue(getValue(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setValue(getValue(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public CPDefinitionSpecificationOptionValue toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CPDefinitionSpecificationOptionValue>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CPDefinitionSpecificationOptionValueImpl
			cpDefinitionSpecificationOptionValueImpl =
				new CPDefinitionSpecificationOptionValueImpl();

		cpDefinitionSpecificationOptionValueImpl.setMvccVersion(
			getMvccVersion());
		cpDefinitionSpecificationOptionValueImpl.setCtCollectionId(
			getCtCollectionId());
		cpDefinitionSpecificationOptionValueImpl.setUuid(getUuid());
		cpDefinitionSpecificationOptionValueImpl.
			setCPDefinitionSpecificationOptionValueId(
				getCPDefinitionSpecificationOptionValueId());
		cpDefinitionSpecificationOptionValueImpl.setGroupId(getGroupId());
		cpDefinitionSpecificationOptionValueImpl.setCompanyId(getCompanyId());
		cpDefinitionSpecificationOptionValueImpl.setUserId(getUserId());
		cpDefinitionSpecificationOptionValueImpl.setUserName(getUserName());
		cpDefinitionSpecificationOptionValueImpl.setCreateDate(getCreateDate());
		cpDefinitionSpecificationOptionValueImpl.setModifiedDate(
			getModifiedDate());
		cpDefinitionSpecificationOptionValueImpl.setCPDefinitionId(
			getCPDefinitionId());
		cpDefinitionSpecificationOptionValueImpl.setCPSpecificationOptionId(
			getCPSpecificationOptionId());
		cpDefinitionSpecificationOptionValueImpl.setCPOptionCategoryId(
			getCPOptionCategoryId());
		cpDefinitionSpecificationOptionValueImpl.setValue(getValue());
		cpDefinitionSpecificationOptionValueImpl.setPriority(getPriority());
		cpDefinitionSpecificationOptionValueImpl.setLastPublishDate(
			getLastPublishDate());

		cpDefinitionSpecificationOptionValueImpl.resetOriginalValues();

		return cpDefinitionSpecificationOptionValueImpl;
	}

	@Override
	public CPDefinitionSpecificationOptionValue cloneWithOriginalValues() {
		CPDefinitionSpecificationOptionValueImpl
			cpDefinitionSpecificationOptionValueImpl =
				new CPDefinitionSpecificationOptionValueImpl();

		cpDefinitionSpecificationOptionValueImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		cpDefinitionSpecificationOptionValueImpl.setCtCollectionId(
			this.<Long>getColumnOriginalValue("ctCollectionId"));
		cpDefinitionSpecificationOptionValueImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		cpDefinitionSpecificationOptionValueImpl.
			setCPDefinitionSpecificationOptionValueId(
				this.<Long>getColumnOriginalValue(
					"CPDSpecificationOptionValueId"));
		cpDefinitionSpecificationOptionValueImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		cpDefinitionSpecificationOptionValueImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		cpDefinitionSpecificationOptionValueImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		cpDefinitionSpecificationOptionValueImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		cpDefinitionSpecificationOptionValueImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		cpDefinitionSpecificationOptionValueImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		cpDefinitionSpecificationOptionValueImpl.setCPDefinitionId(
			this.<Long>getColumnOriginalValue("CPDefinitionId"));
		cpDefinitionSpecificationOptionValueImpl.setCPSpecificationOptionId(
			this.<Long>getColumnOriginalValue("CPSpecificationOptionId"));
		cpDefinitionSpecificationOptionValueImpl.setCPOptionCategoryId(
			this.<Long>getColumnOriginalValue("CPOptionCategoryId"));
		cpDefinitionSpecificationOptionValueImpl.setValue(
			this.<String>getColumnOriginalValue("value"));
		cpDefinitionSpecificationOptionValueImpl.setPriority(
			this.<Double>getColumnOriginalValue("priority"));
		cpDefinitionSpecificationOptionValueImpl.setLastPublishDate(
			this.<Date>getColumnOriginalValue("lastPublishDate"));

		return cpDefinitionSpecificationOptionValueImpl;
	}

	@Override
	public int compareTo(
		CPDefinitionSpecificationOptionValue
			cpDefinitionSpecificationOptionValue) {

		int value = 0;

		if (getPriority() <
				cpDefinitionSpecificationOptionValue.getPriority()) {

			value = -1;
		}
		else if (getPriority() >
					cpDefinitionSpecificationOptionValue.getPriority()) {

			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CPDefinitionSpecificationOptionValue)) {
			return false;
		}

		CPDefinitionSpecificationOptionValue
			cpDefinitionSpecificationOptionValue =
				(CPDefinitionSpecificationOptionValue)object;

		long primaryKey = cpDefinitionSpecificationOptionValue.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CPDefinitionSpecificationOptionValue> toCacheModel() {
		CPDefinitionSpecificationOptionValueCacheModel
			cpDefinitionSpecificationOptionValueCacheModel =
				new CPDefinitionSpecificationOptionValueCacheModel();

		cpDefinitionSpecificationOptionValueCacheModel.mvccVersion =
			getMvccVersion();

		cpDefinitionSpecificationOptionValueCacheModel.ctCollectionId =
			getCtCollectionId();

		cpDefinitionSpecificationOptionValueCacheModel.uuid = getUuid();

		String uuid = cpDefinitionSpecificationOptionValueCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			cpDefinitionSpecificationOptionValueCacheModel.uuid = null;
		}

		cpDefinitionSpecificationOptionValueCacheModel.
			CPDefinitionSpecificationOptionValueId =
				getCPDefinitionSpecificationOptionValueId();

		cpDefinitionSpecificationOptionValueCacheModel.groupId = getGroupId();

		cpDefinitionSpecificationOptionValueCacheModel.companyId =
			getCompanyId();

		cpDefinitionSpecificationOptionValueCacheModel.userId = getUserId();

		cpDefinitionSpecificationOptionValueCacheModel.userName = getUserName();

		String userName =
			cpDefinitionSpecificationOptionValueCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cpDefinitionSpecificationOptionValueCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cpDefinitionSpecificationOptionValueCacheModel.createDate =
				createDate.getTime();
		}
		else {
			cpDefinitionSpecificationOptionValueCacheModel.createDate =
				Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cpDefinitionSpecificationOptionValueCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			cpDefinitionSpecificationOptionValueCacheModel.modifiedDate =
				Long.MIN_VALUE;
		}

		cpDefinitionSpecificationOptionValueCacheModel.CPDefinitionId =
			getCPDefinitionId();

		cpDefinitionSpecificationOptionValueCacheModel.CPSpecificationOptionId =
			getCPSpecificationOptionId();

		cpDefinitionSpecificationOptionValueCacheModel.CPOptionCategoryId =
			getCPOptionCategoryId();

		cpDefinitionSpecificationOptionValueCacheModel.value = getValue();

		String value = cpDefinitionSpecificationOptionValueCacheModel.value;

		if ((value != null) && (value.length() == 0)) {
			cpDefinitionSpecificationOptionValueCacheModel.value = null;
		}

		cpDefinitionSpecificationOptionValueCacheModel.priority = getPriority();

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			cpDefinitionSpecificationOptionValueCacheModel.lastPublishDate =
				lastPublishDate.getTime();
		}
		else {
			cpDefinitionSpecificationOptionValueCacheModel.lastPublishDate =
				Long.MIN_VALUE;
		}

		return cpDefinitionSpecificationOptionValueCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CPDefinitionSpecificationOptionValue, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry
				<String, Function<CPDefinitionSpecificationOptionValue, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPDefinitionSpecificationOptionValue, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CPDefinitionSpecificationOptionValue)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CPDefinitionSpecificationOptionValue, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry
				<String, Function<CPDefinitionSpecificationOptionValue, Object>>
					entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPDefinitionSpecificationOptionValue, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply(
					(CPDefinitionSpecificationOptionValue)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, CPDefinitionSpecificationOptionValue>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						CPDefinitionSpecificationOptionValue.class,
						ModelWrapper.class);

	}

	private long _mvccVersion;
	private long _ctCollectionId;
	private String _uuid;
	private long _CPDefinitionSpecificationOptionValueId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _CPDefinitionId;
	private long _CPSpecificationOptionId;
	private long _CPOptionCategoryId;
	private String _value;
	private String _valueCurrentLanguageId;
	private double _priority;
	private Date _lastPublishDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CPDefinitionSpecificationOptionValue, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CPDefinitionSpecificationOptionValue)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("ctCollectionId", _ctCollectionId);
		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"CPDSpecificationOptionValueId",
			_CPDefinitionSpecificationOptionValueId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("CPDefinitionId", _CPDefinitionId);
		_columnOriginalValues.put(
			"CPSpecificationOptionId", _CPSpecificationOptionId);
		_columnOriginalValues.put("CPOptionCategoryId", _CPOptionCategoryId);
		_columnOriginalValues.put("value", _value);
		_columnOriginalValues.put("priority", _priority);
		_columnOriginalValues.put("lastPublishDate", _lastPublishDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put(
			"CPDSpecificationOptionValueId",
			"CPDefinitionSpecificationOptionValueId");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("ctCollectionId", 2L);

		columnBitmasks.put("uuid_", 4L);

		columnBitmasks.put("CPDSpecificationOptionValueId", 8L);

		columnBitmasks.put("groupId", 16L);

		columnBitmasks.put("companyId", 32L);

		columnBitmasks.put("userId", 64L);

		columnBitmasks.put("userName", 128L);

		columnBitmasks.put("createDate", 256L);

		columnBitmasks.put("modifiedDate", 512L);

		columnBitmasks.put("CPDefinitionId", 1024L);

		columnBitmasks.put("CPSpecificationOptionId", 2048L);

		columnBitmasks.put("CPOptionCategoryId", 4096L);

		columnBitmasks.put("value", 8192L);

		columnBitmasks.put("priority", 16384L);

		columnBitmasks.put("lastPublishDate", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CPDefinitionSpecificationOptionValue _escapedModel;

}