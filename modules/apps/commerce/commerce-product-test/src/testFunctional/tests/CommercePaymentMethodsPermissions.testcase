@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Setup: Create an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "Verify users with the 'Manage Commerce Order Payment Methods' permission can edit the payment method of an order"
	@priority = "3"
	test UsersWithManagePaymentMethodsPermissionCanEditSelectedPaymentMethod {
		property portal.acceptance = "false";

		task ("Given multiple active payment methods") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

			CommerceChannels.activatePaymentMethod(paymentMethod = "PayPal");
		}

		task ("And given a user with the Operations Manager role") {
			JSONUser.addUserWithRole(
				roleTitle = "Operations Manager",
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("And given the Operations Manager role is given the 'Manage Commerce Order Payment Methods' permission") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "MANAGE_COMMERCE_ORDER_PAYMENT_METHODS",
				resourceName = "com.liferay.commerce.order",
				roleTitle = "Operations Manager");
		}

		task ("And given a buyer has checked out an order using one of the active payment methods") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceNavigator.gotoMiniCart();

			Button.click(button = "View Details");

			Button.click(button = "Checkout");

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				paymentMethod = "Money Order",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("When the Operations Manager opens the order from the orders page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");
		}

		task ("Then the Operations Manager can edit the payment method of the order") {
			Click(
				key_menuTab = "Payments",
				locator1 = "CommerceEntry#MENU_TAB");

			AssertTextEquals.assertPartialText(
				key_paymentMethod = "Money Order",
				locator1 = "CommerceOrders#ORDER_DETAILS_PAYMENT_METHOD_NAME",
				value1 = "Money Order");

			CommerceOrders.editPaymentMethod(paymentMethod = "PayPal");

			AssertTextEquals.assertPartialText(
				locator1 = "CommerceOrders#ORDER_DETAILS_PAYMENT_METHOD_NAME",
				value1 = "PayPal");
		}
	}

	@description = "Verify users with the 'Manage Commerce Order Payment Methods' permission can select payment method during checkout"
	@priority = "3"
	test UsersWithManagePermissionCanSelectPaymentMethodDuringCheckout {
		property portal.acceptance = "false";

		task ("Given multiple active payment methods") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

			CommerceChannels.activatePaymentMethod(paymentMethod = "PayPal");
		}

		task ("When a buyer with 'Manage Commerce Order Payment Methods' permission checks out an order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceNavigator.gotoMiniCart();

			Button.click(button = "View Details");

			Button.click(button = "Checkout");

			CommerceCheckout.setAddress(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code");

			Click(locator1 = "Button#CONTINUE");

			Click(
				key_radioOption = "Standard",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			Click(locator1 = "Button#CONTINUE");
		}

		task ("Then at the Payment Method step, the buyer can select one of the active payment methods") {
			AssertElementPresent(
				key_radioOption = "Money Order",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			Click(
				key_radioOption = "PayPal",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			Click(locator1 = "Button#CONTINUE");

			AssertTextEquals(
				key_paymentMethod = "PayPal",
				locator1 = "CommerceAccelerators#CHECKOUT_SUMMARY_PAYMENT_METHOD",
				value1 = "PayPal");

			Click(locator1 = "Button#CONTINUE");
		}
	}

	@description = "Verify users without the 'Manage Commerce Order Payment Methods' permission cannot edit the payment method of an order"
	@priority = "3"
	test UsersWithoutManagePermissionCannotEditSelectedPaymentMethod {
		property portal.acceptance = "false";

		task ("Given multiple active payment methods") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

			CommerceChannels.activatePaymentMethod(paymentMethod = "PayPal");
		}

		task ("And given a user with the Operations Manager role") {
			JSONUser.addUserWithRole(
				roleTitle = "Operations Manager",
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("And given a buyer has checked out an order using one of the active payment methods") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceNavigator.gotoMiniCart();

			Button.click(button = "View Details");

			Button.click(button = "Checkout");

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				paymentMethod = "Money Order",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("When the Operations Manager opens the order from the orders page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");
		}

		task ("Then the Operations Manager cannot edit the payment method of the order") {
			Click(
				key_menuTab = "Payments",
				locator1 = "CommerceEntry#MENU_TAB");

			AssertTextEquals.assertPartialText(
				key_paymentMethod = "Money Order",
				locator1 = "CommerceOrders#ORDER_DETAILS_PAYMENT_METHOD_NAME",
				value1 = "Money Order");

			AssertElementNotPresent(
				key_titleName = "Payment Method",
				locator1 = "CommerceOrders#ORDER_DETAILS_EDIT_BUTTON");
		}
	}

	@description = "Verify the payment method selection step is skipped when a buyer without the 'Manage Commerce Order Payment Methods' permission checks out an order"
	@priority = "3"
	test UsersWithoutManagePermissionSkipsPaymentMethodStepDuringCheckout {
		property portal.acceptance = "false";

		task ("Given multiple active payment methods") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

			CommerceChannels.activatePaymentMethod(paymentMethod = "PayPal");
		}

		task ("When a buyer without 'Manage Commerce Order Payment Methods' permission checks out an order") {
			Permissions.removePermissionViaAPI(
				groupName = "Minium",
				resourceAction = "MANAGE_COMMERCE_ORDER_PAYMENT_METHODS",
				resourceName = "com.liferay.commerce.order",
				roleTitle = "Buyer",
				roleType = "account");

			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceNavigator.gotoMiniCart();

			Button.click(button = "View Details");

			Button.click(button = "Checkout");

			CommerceCheckout.setAddress(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code");

			Click(locator1 = "Button#CONTINUE");

			Click(
				key_radioOption = "Standard",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			Click(locator1 = "Button#CONTINUE");
		}

		task ("Then the payment method selection step is skipped and the default payment method is applied") {
			AssertElementNotPresent(
				key_radioOption = "Money Order",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			AssertElementNotPresent(
				key_radioOption = "PayPal",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			AssertTextEquals(
				key_paymentMethod = "Money Order",
				locator1 = "CommerceAccelerators#CHECKOUT_SUMMARY_PAYMENT_METHOD",
				value1 = "Money Order");

			Click(locator1 = "Button#CONTINUE");
		}
	}

}