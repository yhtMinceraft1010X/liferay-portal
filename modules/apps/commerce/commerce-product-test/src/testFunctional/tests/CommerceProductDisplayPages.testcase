@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp();
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-7833. Verify user is redirected to the Product Detail page when they click on a product in the catalog if Default Product Display Page is not set"
	@priority = "3"
	test AssertOldLogicIsAppliedIfDefaultProductDisplayPageIsNotSet {
		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And given no default product display page is set") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

			CommerceEntry.assertDefaultDisplayPage(pageName = "None");

			AssertTextEquals(
				locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER",
				value1 = "Sorry, no results were found.");
		}

		task ("When I click on a product in the catalog page") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoProductDetails(productName = "U-Joint");
		}

		task ("Then I should be redirected to the product detail page") {
			ControlMenu.viewHeaderTitle(headerTitle = "Product Detail");

			AssertLocation.assertPartialLocation(value1 = "group/minium/p/u-joint");

			FrontStore.assertProductDetails(
				productListPrice = "24.00",
				productName = "U-Joint",
				productSKU = "MIN55861");
		}
	}

	@description = "This is a test for COMMERCE-7950. Verify user can select, change, and remove a Default Product Display page"
	@priority = "5"
	test CanSelectChangeAndRemoveDefaultProductDisplayPage {
		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And given the Minium site has two pages with a Product Details widget") {
			for (var pageNum : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Minium",
					layoutName = "Test Public Widget Page ${pageNum}");
			}

			for (var widgetNum : list "1,2") {
				JSONLayout.addWidgetToPublicLayout(
					groupName = "Minium",
					layoutName = "Test Public Widget Page ${widgetNum}",
					widgetName = "Product Details");
			}
		}

		task ("And given the user set a widget page as Default Product Display Page by navigating to Channels page") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

			CommerceChannels.chooseDefaultDisplayPage(
				pageName = "Test Public Widget Page 1",
				pageType = "Public");

			CommerceEntry.assertDefaultDisplayPage(
				pageName = "Test Public Widget Page 1",
				pageType = "Public");
		}

		task ("And given the user changes the Default Product Display Page") {
			CommerceChannels.chooseDefaultDisplayPage(
				pageName = "Test Public Widget Page 2",
				pageType = "Public");

			CommerceEntry.assertDefaultDisplayPage(
				pageName = "Test Public Widget Page 2",
				pageType = "Public");
		}

		task ("When the user removes the Product Display Page") {
			CommerceChannels.removeDefaultDisplayPage();
		}

		task ("Then it should show Product Display Page as 'None'") {
			CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

			CommerceEntry.assertDefaultDisplayPage(pageName = "None");
		}
	}

	@description = "This is a test for COMMERCE-7951. Verify user can select, change, and remove a default product display page override"
	@priority = "5"
	test CanSelectChangeAndRemoveOverrideDefaultProductDisplayPage {
		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And given the Minium site has two pages with a Product Details widget") {
			for (var pageNum : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Minium",
					layoutName = "Test Public Widget Page ${pageNum}");
			}

			for (var widgetNum : list "1,2") {
				JSONLayout.addWidgetToPublicLayout(
					groupName = "Minium",
					layoutName = "Test Public Widget Page ${widgetNum}",
					widgetName = "Product Details");
			}
		}

		task ("When the user sets the first page as Override Default Product Display Page for a product") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

			CommerceChannels.overrideProductDisplayPage(
				pageName = "Test Public Widget Page 1",
				pageType = "Public",
				product = "Cams");
		}

		task ("Then the page should be correctly set as Override Default Prodct Display Page for that product") {
			CommerceEntry.assertDisplayPageOverride(
				entryName = "Cams",
				layout = "Test Public Widget Page 1");
		}

		task ("When the user edits the product and layout of the override") {
			CommerceChannels.editOverrideProductDisplayPage(
				newPageName = "Test Public Widget Page 2",
				newPageType = "Public",
				newProduct = "Bearings",
				product = "Cams");
		}

		task ("Then the new override should be shown under Override Default Product Display Page") {
			CommerceEntry.assertNoDisplayPageOverride(
				entryName = "Cams",
				layout = "Test Public Widget Page 1");

			CommerceEntry.assertDisplayPageOverride(
				entryName = "Bearings",
				layout = "Test Public Widget Page 2");
		}

		task ("When the user removes the Override Default Product Display Page") {
			CommerceEntry.deleteCommerceEntry(key_value = "Bearings");
		}

		task ("Then the product display page override should no longer be present") {
			CommerceEntry.assertNoDisplayPageOverride(
				entryName = "Bearings",
				layout = "Test Public Widget Page 2");

			AssertTextEquals(
				locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER",
				value1 = "Sorry, no results were found.");
		}
	}

	@description = "This is a test for COMMERCE-7842. Verify user can override the default product display page for different products."
	@priority = "3"
	test OverrideDefaultProductDisplayPageForDifferentProducts {
		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And given the Minium site has a public content page with a Product Details widget") {
			JSONLayout.addPublicLayout(
				groupName = "Minium",
				layoutName = "Test Public Content Page",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Public Content Page",
				siteName = "Minium");

			PageEditor.addWidget(portletName = "Product Details");

			PageEditor.clickPublish();
		}

		task ("And given the Minium site has a public widget page with a Product Details widget") {
			JSONLayout.addPublicLayout(
				groupName = "Minium",
				layoutName = "Test Public Widget Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Minium",
				layoutName = "Test Public Widget Page",
				widgetName = "Product Details");
		}

		task ("And given the Minium site has a private content page with a Product Details widget") {
			JSONLayout.addPrivateLayout(
				groupName = "Minium",
				layoutName = "Test Private Content Page",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Private Content Page",
				privateLayout = "true",
				siteName = "Minium");

			PageEditor.addWidget(portletName = "Product Details");

			Button.clickPublish();

			Alert.viewSuccessMessage();
		}

		task ("And given the Test Public Content Page is set as Default Product Display Page") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

			CommerceChannels.chooseDefaultDisplayPage(
				pageName = "Test Public Content Page",
				pageType = "Public");

			CommerceEntry.assertDefaultDisplayPage(
				pageName = "Test Public Content Page",
				pageType = "Public");
		}

		task ("And given the user can not override the default product display page by selecting only a product") {
			CommerceChannels.addProduct(product = "Torque Converters");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			Button.clickSave();

			Alert.viewErrorMessage(errorMessage = "Please select a valid layout.");
		}

		task ("And given the user can not override the default product display page by selecting only a page") {
			CommerceChannels.chooseDisplayPageFromSidePanel(
				pageName = "Test Public Widget Page",
				pageType = "Public");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			Button.clickSave();

			Alert.viewErrorMessage(errorMessage = "Please select a valid product.");
		}

		task ("And given the Test Public Widget Page is set as Override Default Product Display Page for Torque Converters") {
			Refresh();

			CommerceChannels.overrideProductDisplayPage(
				pageName = "Test Public Widget Page",
				pageType = "Public",
				product = "Torque Converters");

			CommerceEntry.assertDisplayPageOverride(
				entryName = "Torque Converters",
				layout = "Test Public Widget Page");
		}

		task ("And given the Test Private Content Page is set as Override Default Product Display Page for Transmission Cooler Line Assembly") {
			CommerceChannels.overrideProductDisplayPage(
				pageName = "Test Private Content Page",
				pageType = "Private",
				product = "Transmission Cooler Line Assembly");

			CommerceEntry.assertDisplayPageOverride(
				entryName = "Transmission Cooler Line Assembly",
				layout = "Test Private Content Page");
		}

		task ("When I click on U-Joint in the Catalog page") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "U-Joint");
		}

		task ("Then I should be redirected to the Test Public Content Page with the Product Details widget showing the product details") {
			ControlMenu.viewHeaderTitle(headerTitle = "Test Public Content Page");

			AssertLocation.assertPartialLocation(value1 = "web/minium/p/u-joint");

			FrontStore.assertProductDetails(
				productListPrice = "24.00",
				productName = "U-Joint",
				productSKU = "MIN55861");
		}

		task ("When I click on Torque Converters in the Catalog page") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "Torque Converters");
		}

		task ("Then I should be redirected to the Test Public Widget Page with the Product Details widget showing the product details") {
			ControlMenu.viewHeaderTitle(headerTitle = "Test Public Widget Page");

			AssertLocation.assertPartialLocation(value1 = "web/minium/p/torque-converter");

			FrontStore.assertProductDetails(
				productListPrice = "34.00",
				productName = "Torque Converter",
				productSKU = "MIN55859");
		}

		task ("When I click on Transmission Cooler Line Assembly in the Catalog page") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "Transmission Cooler Line Assembly");
		}

		task ("Then I should be redirected to the Test Private Content Page with the Product Details widget showing the product details") {
			ControlMenu.viewHeaderTitle(headerTitle = "Test Private Content Page");

			AssertLocation.assertPartialLocation(value1 = "group/minium/p/transmission-cooler-line-assembly");

			FrontStore.assertProductDetails(
				productListPrice = "15.00",
				productName = "Transmission Cooler Line Assembly",
				productSKU = "MIN55860");
		}
	}

	@description = "This is a test for COMMERCE-7841. Assert user can override the private default product display page with a private widget page."
	@priority = "4"
	test OverridePrivateDefaultProductDisplayPageWithAPrivatePage {
		property portal.acceptance = "false";

		task ("Given that both a private content page and a private widget page are created with a product details widget") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			JSONLayout.addPrivateLayout(
				groupName = "Minium",
				layoutName = "Test Private Content Page",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Private Content Page",
				privateLayout = "true",
				siteName = "Minium");

			PageEditor.addWidget(portletName = "Product Details");

			Button.clickPublish();

			JSONLayout.addPrivateLayout(
				groupName = "Minium",
				layoutName = "Test Private Widget Page");

			JSONLayout.addWidgetToPrivateLayout(
				groupName = "Minium",
				layoutName = "Test Private Widget Page",
				widgetName = "Product Details");
		}

		task ("And given the private content page is set to be the default product display page") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

			CommerceChannels.chooseDefaultDisplayPage(
				pageName = "Test Private Content Page",
				pageType = "Private");

			CommerceEntry.assertDefaultDisplayPage(
				pageName = "Test Private Content Page",
				pageType = "Private");
		}

		task ("And given the private widget page is set as the override product display page for a selected product") {
			CommerceChannels.overrideProductDisplayPage(
				pageName = "Test Private Widget Page",
				pageType = "Private",
				product = "Torque Converters");

			CommerceEntry.assertDisplayPageOverride(
				entryName = "Torque Converters",
				layout = "Test Private Widget Page");
		}

		task ("When accessing the Minium catalog and viewing the selected product") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "Torque Converters");
		}

		task ("Then the site should redirect to the override page") {
			FrontStore.assertProductDetails(
				productListPrice = "$34.00",
				productName = "Torque Converters",
				productSKU = "MIN5589");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Private Widget Page");

			AssertLocation.assertPartialLocation(value1 = "group/minium/p/torque-converters");
		}

		task ("When accessing the Minium catalog and viewing another product") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "U-Joint");
		}

		task ("Then the site should redirect to the default product display page") {
			FrontStore.assertProductDetails(
				productListPrice = "$24.00",
				productName = "U-Joint",
				productSKU = "MIN55861");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Private Content Page");

			AssertLocation.assertPartialLocation(value1 = "group/minium/p/u-joint");
		}
	}

	@description = "This is a test for COMMERCE-7840. Assert user can override the private default product display page with a public content page."
	@priority = "4"
	test OverridePrivateDefaultProductDisplayPageWithAPublicPage {
		property portal.acceptance = "false";

		task ("Given that both a public content page and a private content page are created with a product details widget") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			JSONLayout.addPublicLayout(
				groupName = "Minium",
				layoutName = "Test Public Content Page",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Public Content Page",
				siteName = "Minium");

			PageEditor.addWidget(portletName = "Product Details");

			Button.clickPublish();

			JSONLayout.addPrivateLayout(
				groupName = "Minium",
				layoutName = "Test Private Content Page",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Private Content Page",
				privateLayout = "true",
				siteName = "Minium");

			PageEditor.addWidget(portletName = "Product Details");

			Button.clickPublish();
		}

		task ("And given the private content page is set to be the default product display page") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

			CommerceChannels.chooseDefaultDisplayPage(
				pageName = "Test Private Content Page",
				pageType = "Private");

			CommerceEntry.assertDefaultDisplayPage(
				pageName = "Test Private Content Page",
				pageType = "Private");
		}

		task ("And given the public content page is set as the override product display page for a selected product") {
			CommerceChannels.overrideProductDisplayPage(
				pageName = "Test Public Content Page",
				pageType = "Public",
				product = "Torque Converters");

			CommerceEntry.assertDisplayPageOverride(
				entryName = "Torque Converters",
				layout = "Test Public Content Page");
		}

		task ("When accessing the Minium catalog and viewing the selected product") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "Torque Converters");
		}

		task ("Then the site should redirect to the override page") {
			FrontStore.assertProductDetails(
				productListPrice = "$34.00",
				productName = "Torque Converters",
				productSKU = "MIN5589");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Public Content Page");

			AssertLocation.assertPartialLocation(value1 = "web/minium/p/torque-converters");
		}

		task ("When accessing the Minium catalog and viewing another product") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "U-Joint");
		}

		task ("Then the site should redirect to the default product display page") {
			FrontStore.assertProductDetails(
				productListPrice = "$24.00",
				productName = "U-Joint",
				productSKU = "MIN55861");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Private Content Page");

			AssertLocation.assertPartialLocation(value1 = "group/minium/p/u-joint");
		}
	}

	@description = "This is a test for COMMERCE-7839. Assert user can override the public default product display page with a private content page."
	@priority = "4"
	test OverridePublicDefaultProductDisplayPageWithAPrivatePage {
		property portal.acceptance = "false";

		task ("Given that both a public content page and a private content page are created with a product details widget") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			JSONLayout.addPublicLayout(
				groupName = "Minium",
				layoutName = "Test Public Content Page",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Public Content Page",
				siteName = "Minium");

			PageEditor.addWidget(portletName = "Product Details");

			Button.clickPublish();

			JSONLayout.addPrivateLayout(
				groupName = "Minium",
				layoutName = "Test Private Content Page",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Private Content Page",
				privateLayout = "true",
				siteName = "Minium");

			PageEditor.addWidget(portletName = "Product Details");

			Button.clickPublish();
		}

		task ("And given the public content page is set to be the default product display page") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

			CommerceChannels.chooseDefaultDisplayPage(
				pageName = "Test Public Content Page",
				pageType = "Public");

			CommerceEntry.assertDefaultDisplayPage(
				pageName = "Test Public Content Page",
				pageType = "Public");
		}

		task ("And given the private content page is set as the override product display page for a selected product") {
			CommerceChannels.overrideProductDisplayPage(
				pageName = "Test Private Content Page",
				pageType = "Private",
				product = "Torque Converters");

			CommerceEntry.assertDisplayPageOverride(
				entryName = "Torque Converters",
				layout = "Test Private Content Page");
		}

		task ("When accessing the Minium catalog and viewing the selected product") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "Torque Converters");
		}

		task ("Then the site should redirect to the override page") {
			FrontStore.assertProductDetails(
				productListPrice = "$34.00",
				productName = "Torque Converters",
				productSKU = "MIN5589");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Private Content Page");

			AssertLocation.assertPartialLocation(value1 = "group/minium/p/torque-converters");
		}

		task ("When accessing the Minium catalog and viewing another product") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "U-Joint");
		}

		task ("Then the site should redirect to the default product display page") {
			FrontStore.assertProductDetails(
				productListPrice = "$24.00",
				productName = "U-Joint",
				productSKU = "MIN55861");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Public Content Page");

			AssertLocation.assertPartialLocation(value1 = "group/minium/p/u-joint");
		}
	}

	@description = "This is a test for COMMERCE-7838. Assert user can override the public default product display page with a public widget page."
	@priority = "4"
	test OverridePublicDefaultProductDisplayPageWithAPublicPage {
		property portal.acceptance = "false";

		task ("Given that both a public widget page and a public content page are created with a product details widget") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			JSONLayout.addPublicLayout(
				groupName = "Minium",
				layoutName = "Test Public Widget Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Minium",
				layoutName = "Test Public Widget Page",
				widgetName = "Product Details");

			JSONLayout.addPublicLayout(
				groupName = "Minium",
				layoutName = "Test Public Content Page",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Public Content Page",
				siteName = "Minium");

			PageEditor.addWidget(portletName = "Product Details");

			Button.clickPublish();
		}

		task ("And given the public content page is set to be the default product display page") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

			CommerceChannels.chooseDefaultDisplayPage(
				pageName = "Test Public Content Page",
				pageType = "Public");

			CommerceEntry.assertDefaultDisplayPage(
				pageName = "Test Public Content Page",
				pageType = "Public");
		}

		task ("And given the public widget page is set as the override product display page for a selected product") {
			CommerceChannels.overrideProductDisplayPage(
				pageName = "Test Public Widget Page",
				pageType = "Public",
				product = "Torque Converters");

			CommerceEntry.assertDisplayPageOverride(
				entryName = "Torque Converters",
				layout = "Test Public Widget Page");
		}

		task ("When accessing the Minium catalog and viewing the selected product") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "Torque Converters");
		}

		task ("Then the site should redirect to the override page") {
			FrontStore.assertProductDetails(
				productListPrice = "$34.00",
				productName = "Torque Converters",
				productSKU = "MIN5589");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Public Widget Page");

			AssertLocation.assertPartialLocation(value1 = "web/minium/p/torque-converters");
		}

		task ("When accessing the Minium catalog and viewing another product") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceAcceleratorsInitializer.gotoMiniumProductDetailsPage(productName = "U-Joint");
		}

		task ("Then the site should redirect to the default product display page") {
			FrontStore.assertProductDetails(
				productListPrice = "$24.00",
				productName = "U-Joint",
				productSKU = "MIN55861");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Public Content Page");

			AssertLocation.assertPartialLocation(value1 = "web/minium/p/u-joint");
		}
	}

	@description = "Verify user is redirected to private content and widget pages with a Product Details widget when clicking on a catalog product after the page is defined as the Default Product Display Page."
	@priority = "3"
	test ViewDefaultProductDisplayPageWithPrivateContentAndWidgetPages {
		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And given the Minium site has a private content page with a Product Details widget") {
			JSONLayout.addPrivateLayout(
				groupName = "Minium",
				layoutName = "Test Private Content Page",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Private Content Page",
				privateLayout = "true",
				siteName = "Minium");

			PageEditor.addWidget(portletName = "Product Details");

			Button.clickPublish();

			Alert.viewSuccessMessage();
		}

		task ("And given the content page is set as the Default Product Display Page") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

			CommerceChannels.chooseDefaultDisplayPage(
				pageName = "Test Private Content Page",
				pageType = "Private");

			CommerceEntry.assertDefaultDisplayPage(
				pageName = "Test Private Content Page",
				pageType = "Private");
		}

		task ("When I click on a product in the catalog page") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoProductDetails(productName = "U-Joint");
		}

		task ("Then I should be redirected to the content page with the Product Details widget showing the product details") {
			FrontStore.assertProductDetails(
				productListPrice = "24.00",
				productName = "U-Joint",
				productSKU = "MIN55861");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Private Content Page");

			AssertLocation.assertPartialLocation(value1 = "group/minium/p/u-joint");
		}

		task ("Given the Minium site has a private widget page with a Product Details widget") {
			JSONLayout.addPrivateLayout(
				groupName = "Minium",
				layoutName = "Test Private Widget Page");

			JSONLayout.addWidgetToPrivateLayout(
				groupName = "Minium",
				layoutName = "Test Private Widget Page",
				widgetName = "Product Details");
		}

		task ("And given the widget page is set as the Default Product Display Page") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

			CommerceChannels.chooseDefaultDisplayPage(
				pageName = "Test Private Widget Page",
				pageType = "Private");

			CommerceEntry.assertDefaultDisplayPage(
				pageName = "Test Private Widget Page",
				pageType = "Private");
		}

		task ("When I click on a product in the catalog page") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoProductDetails(productName = "U-Joint");
		}

		task ("Then I should be redirected to the widget page with the Product Details widget showing the product details") {
			FrontStore.assertProductDetails(
				productListPrice = "24.00",
				productName = "U-Joint",
				productSKU = "MIN55861");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Private Widget Page");

			AssertLocation.assertPartialLocation(value1 = "group/minium/p/u-joint");
		}
	}

	@description = "Verify user is redirected to public content and widget pages with a Product Details widget when clicking on a catalog product after the page is defined as the Default Product Display Page."
	@priority = "3"
	test ViewDefaultProductDisplayPageWithPublicContentAndWidgetPages {
		task ("Given a Minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And given the Minium site has a public content page with a Product Details widget") {
			JSONLayout.addPublicLayout(
				groupName = "Minium",
				layoutName = "Test Public Content Page",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Public Content Page",
				siteName = "Minium");

			PageEditor.addWidget(portletName = "Product Details");

			Button.clickPublish();

			Alert.viewSuccessMessage();
		}

		task ("And given the content page is set as the Default Product Display Page") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

			CommerceChannels.chooseDefaultDisplayPage(
				pageName = "Test Public Content Page",
				pageType = "Public");

			CommerceEntry.assertDefaultDisplayPage(
				pageName = "Test Public Content Page",
				pageType = "Public");
		}

		task ("When I click on a product in the catalog page") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoProductDetails(productName = "U-Joint");
		}

		task ("Then I should be redirected to the content page with the Product Details widget showing the product details") {
			FrontStore.assertProductDetails(
				productListPrice = "24.00",
				productName = "U-Joint",
				productSKU = "MIN55861");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Public Content Page");

			AssertLocation.assertPartialLocation(value1 = "group/minium/p/u-joint");
		}

		task ("Given the Minium site has a public widget page with a Product Details widget") {
			JSONLayout.addPublicLayout(
				groupName = "Minium",
				layoutName = "Test Public Widget Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Minium",
				layoutName = "Test Public Widget Page",
				widgetName = "Product Details");
		}

		task ("And given the widget page is set as the Default Product Display Page") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceEntry.gotoMenuTab(menuTab = "Product Display Pages");

			CommerceChannels.chooseDefaultDisplayPage(
				pageName = "Test Public Widget Page",
				pageType = "Public");

			CommerceEntry.assertDefaultDisplayPage(
				pageName = "Test Public Widget Page",
				pageType = "Public");
		}

		task ("When I click on a product in the catalog page") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoProductDetails(productName = "U-Joint");
		}

		task ("Then I should be redirected to the widget page with the Product Details widget showing the product details") {
			FrontStore.assertProductDetails(
				productListPrice = "24.00",
				productName = "U-Joint",
				productSKU = "MIN55861");

			ControlMenu.viewHeaderTitle(headerTitle = "Test Public Widget Page");

			AssertLocation.assertPartialLocation(value1 = "web/minium/p/u-joint");
		}
	}

}