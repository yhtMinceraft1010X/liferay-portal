@component-name = "portal-commerce"
definition {

	property license.required = "true";
	property portal.release = "true";
	property portal.upstream = "false";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Commerce";

	setUp {
		CommerceConfiguration.commerceSetUp();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This is a test for covering the following LPS-121306 and LPS-128094."
	@priority = "5"
	test CommerceRemainsActiveOnRestarts {
		property test.name.skip.portal.instance = "CommerceLicense#CommerceRemainsActiveOnRestarts";

		CommerceLicense.viewCommerceAvailable();

		Portlet.shutdownServer();

		Portlet.startServer(deleteLiferayHome = "false");

		AssertConsoleTextNotPresent(value1 = "Unable to install bundle");

		Navigator.openURL();

		CommerceLicense.viewCommerceAvailable();
	}

	@priority = "3"
	test DeactivateCommerce {
		property test.name.skip.portal.instance = "CommerceLicense#DeactivateCommerce";

		ApplicationsMenuHelper.openApplicationsMenu();

		CommerceLicense.viewCommerceAvailable();

		Portlet.shutdownServer();

		AntCommand(
			locator1 = "build-test.xml",
			value1 = "portal-ext-properties-update -Dadd.new.properties=true -Dupdate.properties=enterprise.product.commerce.enabled=false");

		Portlet.startServer(commerceEnabled = "false");

		User.firstLoginPG();

		CommerceLicense.viewCommerceMissing();
	}

	@priority = "4"
	test DeleteEnterpriseLicenseModule {
		property test.name.skip.portal.instance = "CommerceLicense#DeleteEnterpriseLicenseModule";

		Portlet.shutdownServer();

		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		FileUtil.delete("${liferayHome}/osgi/static/com.liferay.portal.license.enterprise.app.jar");

		FileUtil.delete("${liferayHome}/osgi/marketplace/Liferay Foundation - Liferay License Manager - Impl.lpkg");

		FileUtil.delete("${liferayHome}/osgi/core/com.liferay.portal.app.license.api.jar");

		FileUtil.delete("${liferayHome}/osgi/core/com.liferay.portal.app.license.impl.jar");

		FileUtil.delete("${liferayHome}/osgi/core/com.liferay.portal.app.license.resolver.hook.jar");

		AntCommand(
			locator1 = "build-test.xml",
			value1 = "delete-static-impl-license-jar -DliferayHome=${liferayHome}");

		Portlet.startServer(keepOsGiState = "false");

		User.firstLoginPG();

		CommerceLicense.viewCommerceMissing();
	}

	@priority = "5"
	test EnableCommerceAfterPortalStarts {
		property commerce.enabled = "false";
		property test.name.skip.portal.instance = "CommerceLicense#EnableCommerceAfterPortalStarts";

		CommerceLicense.viewCommerceMissing();

		Portlet.shutdownServer();

		AntCommand(
			locator1 = "build-test.xml",
			value1 = "portal-ext-properties-update -Dupdate.properties.original=enterprise.product.commerce.enabled=false -Dupdate.properties=enterprise.product.commerce.enabled=true");

		Portlet.startServer(deleteLiferayHome = "false");

		CommerceLicense.executeSmoke();
	}

	@priority = "4"
	test TermsOfUseNotShownToNonAdminUser {
		property custom.properties = "enterprise.product.notification.enabled=true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "CommerceLicense#TermsOfUseNotShownToNonAdminUser";

		SelectFrame(value1 = "relative=top");

		Click(locator1 = "Button#DONE");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONUser.addUserToSite(
			groupName = "Guest",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignSiteRoleToUser(
			groupName = "Guest",
			roleTitle = "Site Administrator",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		AssertElementNotPresent(locator1 = "Modal#MODAL");
	}

	@priority = "4"
	test TermsOfUseShownToAdminOnFirstLoginOnly {
		property custom.properties = "enterprise.product.notification.enabled=true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "CommerceLicense#TermsOfUseShownToAdminOnFirstLoginOnly";

		SelectFrame(value1 = "relative=top");

		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "Terms of Use");

		AssertTextEquals.assertPartialText(
			locator1 = "Modal#BODY",
			value1 = "Use of Liferay Commerce apps is not covered by Liferay Support");

		Click(locator1 = "Button#DONE");

		AssertElementNotPresent(locator1 = "Modal#MODAL");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "test@liferay.com",
			userLoginFullName = "Test Test");

		AssertElementNotPresent(locator1 = "Modal#MODAL");
	}

	@priority = "4"
	test TermsOfUseShownToNewAdmin {
		property custom.properties = "enterprise.product.notification.enabled=true";
		property portal.upstream = "true";
		property test.name.skip.portal.instance = "CommerceLicense#TermsOfUseShownToNewAdmin";

		SelectFrame(value1 = "relative=top");

		Click(locator1 = "Button#DONE");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		SelectFrame(value1 = "relative=top");

		AssertTextEquals(
			locator1 = "Modal#HEADER",
			value1 = "Terms of Use");

		AssertTextEquals.assertPartialText(
			locator1 = "Modal#BODY",
			value1 = "Use of Liferay Commerce apps is not covered by Liferay Support");

		Click(locator1 = "Button#DONE");

		AssertElementNotPresent(locator1 = "Modal#MODAL");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		AssertElementNotPresent(locator1 = "Modal#MODAL");
	}

	@priority = "5"
	test ViewCommerceEnabled {
		property test.assert.warning.exceptions = "true";
		property test.name.skip.portal.instance = "CommerceLicense#ViewCommerceEnabled";

		CommerceLicense.executeSmoke();
	}

}