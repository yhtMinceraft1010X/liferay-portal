@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Order Management";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.openURL();

			if (IsElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE")) {
				User.logoutPG();
			}

			User.firstLoginPG();

			CommerceConfiguration.commerceAdminTearDown();

			CommerceConfiguration.commerceInitializersTearDown();
		}
	}

	@description = "Verify once created, users can navigate to the Payment Methods page where new Offline Payment Methods can be Edited and Activated."
	@priority = "3"
	test ActivateOfflinePaymentMethodsAndAddDescription {
		property portal.acceptance = "false";
		property test.name.skip.portal.instance = "CommercePaymentMethod#ActivateOfflinePaymentMethodsAndAddDescription";

		task ("Given a Channel") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = "Test Channel",
				channelType = "site",
				currencyCode = "USD");
		}

		task ("And given a new offline payment method") {
			CommercePaymentMethods.addOfflinePaymentMethod(key = "Test Offline Payment Method");
		}

		task ("And given the System Integrator navigates to the channel details") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Channel");
		}

		task ("When the offline payment method is activated and a description is set") {
			CommerceChannels.activatePaymentMethod(paymentMethod = "Test Offline Payment Method");
		}

		task ("Then the status for the payment method should be active and the description should be set") {
			AssertElementPresent(
				key_entryDescription = "Pay with Test Offline Payment Method.",
				key_entryName = "Test Offline Payment Method",
				key_table = "Payment Methods",
				locator1 = "CommerceEntry#TABLE_ENTRY_DESCRIPTION");

			AssertElementPresent(
				key_entryName = "Test Offline Payment Method",
				key_entryStatus = "Active",
				key_table = "Payment Methods",
				locator1 = "CommerceEntry#TABLE_ENTRY_STATUS");
		}
	}

	@description = "Verify an offline payment method can be added, edited, and deleted from system settings"
	@priority = "3"
	test AddEditAndDeleteOfflinePaymentMethod {
		property portal.acceptance = "false";
		property test.name.skip.portal.instance = "CommercePaymentMethod#AddEditAndDeleteOfflinePaymentMethod";

		task ("Given the System Integrator navigates to the Offline Payment Method Keys configuration under the Payment category in System Settings") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Payment",
				configurationName = "Offline Payment Method Keys",
				configurationScope = "System Scope");
		}

		task ("When the the System Integrator clicks add") {
			Button.clickAdd();
		}

		task ("And a key is provided for the offline payment method") {
			Type(
				locator1 = "SystemSettings#KEY",
				value1 = "Test Offline Payment Method");
		}

		task ("And the save button is clicked") {
			Button.clickSave();

			Alert.viewSuccessMessage();
		}

		task ("Then the new entry is listed") {
			AssertElementPresent(
				key_configurationEntry = "Test Offline Payment Method",
				locator1 = "SystemSettings#CONFIGURATION_ENTRY");
		}

		task ("When the the System Integrator edits the offline payment method and clicks update") {
			SystemSettings.gotoConfigurationEntry(configurationEntry = "Test Offline Payment Method");

			Type(
				locator1 = "SystemSettings#KEY",
				value1 = "Test Offline Payment Method 2");

			Button.clickUpdate();
		}

		task ("Then the updated entry is listed") {
			AssertElementPresent(
				key_configurationEntry = "Test Offline Payment Method 2",
				locator1 = "SystemSettings#CONFIGURATION_ENTRY");
		}

		task ("When the the System Integrator deletes the offline payment method") {
			SystemSettings.deleteConfigurationEntry(configurationEntry = "Test Offline Payment Method 2");
		}

		task ("Then the entry should no longer be listed") {
			AssertElementNotPresent(
				key_configurationEntry = "Test Offline Payment Method 2",
				locator1 = "SystemSettings#CONFIGURATION_ENTRY");
		}
	}

	@description = "Verify an activated offline payment method can be used for an order."
	@priority = "3"
	test AnOfflinePaymentMethodCanBeUsedForAnOrder {
		property portal.acceptance = "false";
		property test.name.skip.portal.instance = "CommercePaymentMethod#AnOfflinePaymentMethodCanBeUsedForAnOrder";

		task ("Given a Minium site with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given a new offline payment method is created and activated") {
			CommercePaymentMethods.addOfflinePaymentMethod(key = "Test Offline Payment Method");

			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceChannels.activatePaymentMethod(paymentMethod = "Test Offline Payment Method");
		}

		task ("When the buyer user makes an order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceCheckout.gotoCheckout();
		}

		task ("Then the new offline payment method should be visible in the checkout order summary") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				paymentMethod = "Test Offline Payment Method",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}
	}

	@description = "Verify offline payment methods display in the orders page for orders placed with a new offline payment method. Verify this payment method can be changed to another offline payment method."
	@priority = "3"
	test AssertAndEditNewPaymentMethodInOrdersPage {
		property portal.acceptance = "false";
		property test.name.skip.portal.instance = "CommercePaymentMethod#AssertAndEditNewPaymentMethodInOrdersPage";

		task ("Given a Minium site with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given 2 new offline payment methods are created and activated") {
			CommercePaymentMethods.addOfflinePaymentMethod(key = "Test Offline Payment Method 1");

			CommercePaymentMethods.addOfflinePaymentMethod(key = "Test Offline Payment Method 2");

			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceChannels.activatePaymentMethod(paymentMethod = "Test Offline Payment Method 1");

			CommerceChannels.activatePaymentMethod(paymentMethod = "Test Offline Payment Method 2");
		}

		task ("And give the buyer places an order using the first offline payment method") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				paymentMethod = "Test Offline Payment Method 1",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}

		task ("When the admin goes to the Orders page to view the pending order") {
			User.logoutAndLoginPG();

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");
		}

		task ("Then the selected offline payment method is present") {
			CommerceOrders.viewOrdersEntry(
				addressAddress = "Test Address",
				addressCity = "Test City",
				addressZipCode = "Test Zip Code",
				paymentMethod = "Test Offline Payment Method",
				productListPrice = "24.00",
				productName = "U-Joint",
				productQuantity = "1",
				productSku = "MIN55861",
				productTotalPrice = "24.00");
		}

		task ("When the admin changes the payment method to another offline payment method") {
			CommerceOrders.editPaymentMethod(paymentMethod = "Test Offline Payment Method 2");
		}

		task ("Then the payment method should be updated") {
			AssertTextEquals.assertPartialText(
				locator1 = "CommerceOrders#ORDER_DETAILS_PAYMENT_METHOD_NAME",
				value1 = "Test Offline Payment Method 2");
		}
	}

	@description = "Verify an activated offline payment method can be selected for an order when multiple payment methods are active."
	@priority = "3"
	test CreateOrderWithMultipleActivePaymentMethods {
		property portal.acceptance = "false";
		property test.name.skip.portal.instance = "CommercePaymentMethod#CreateOrderWithMultipleActivePaymentMethods";

		task ("Given a Minium site with a buyer user") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given a new offline payment method is created and activated") {
			CommercePaymentMethods.addOfflinePaymentMethod(key = "Test Offline Payment Method");

			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceChannels.activatePaymentMethod(paymentMethod = "Test Offline Payment Method");
		}

		task ("And given another payment method is activated") {
			CommerceChannels.activatePaymentMethod(paymentMethod = "PayPal");
		}

		task ("When the buyer user makes an order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = "1");

			CommerceCheckout.gotoCheckout();
		}

		task ("Then the new offline payment method should selectable during checkout") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				paymentMethod = "Test Offline Payment Method",
				productName = "U-Joint",
				productQuantity = "1",
				productUnitPrice = "24",
				shippingMethod = "Standard");
		}
	}

}