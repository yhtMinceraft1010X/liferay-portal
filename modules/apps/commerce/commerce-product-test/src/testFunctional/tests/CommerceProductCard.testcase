@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp();
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-5866. As a buyer, I want to be able to add a product to my wish list, by clicking on an Add To Wish List button"
	@priority = "3"
	test AddProductToWishListFromProductCard {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		Click(
			key_productName = "U-Joint",
			locator1 = "CommerceEntry#PRODUCT_CARD_ADD_TO_WISH_LIST_BUTTON");

		Navigator.openWithAppendToBaseURL(urlAppend = "group/minium/lists");

		AssertTextEquals(
			locator1 = "AppBuilder#ITEM_ON_THE_TABLE",
			value1 = "U-Joint");
	}

	@description = "COMMERCE-5859. As a buyer, I want to view the product price with the default channel currency"
	@priority = "3"
	test AssertDefaultChannelCurrencyIsAppliedToProductCard {
		property portal.acceptance = "false";

		var currencyName = "US Dollar";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		AssertSelectedLabel(
			key_title = "Currency",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "${currencyName}");

		Button.clickSave();

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Catalogs");

		CommerceNavigator.gotoEntry(entryName = "Minium");

		AssertSelectedLabel(
			key_title = "Currency",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "${currencyName}");

		ApplicationsMenu.gotoSite(site = "Minium");

		AssertTextEquals.assertPartialText(
			key_productName = "U-Joint",
			locator1 = "CommerceEntry#PRODUCT_CARD_LIST_PRICE",
			value1 = "$");
	}

	@description = "COMMERCE-6657. As a buyer, I want to be unable to add a bundled product(Price Type Dynamic) to cart directly"
	@priority = "3"
	test AssertDynamicPriceBundledProductCannotBeAddedToCartDirectly {
		property portal.acceptance = "false";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Options");

		CPCommerceCatalog.newOptionsEntry(
			optionDescription = "Option Description",
			optionFieldType = "Select from List",
			optionName = "Color");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Use in Faceted Navigation",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Required",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "SKU Contributor",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Click(locator1 = "Button#PLUS");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		CommerceEntry.addOptionValue(
			valueName = "Black",
			valuePosition = "");

		Button.click(button = "Submit");

		SelectFrameTop();

		Button.clickSave();

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Minium",
			productName = "Bundled Product",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		Type(
			key_title = "Add Options",
			locator1 = "CommerceEntry#ADD_RELATION_FIELD",
			value1 = "Color");

		Button.click(button = "Select");

		Refresh();

		CommerceNavigator.gotoEntry(entryName = "Color");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Select(
			key_fieldLabel = "Price Type",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Dynamic");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(
			key_index = "Black",
			locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");

		Type(
			key_fieldLabel = "SKU",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "MIN55861");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Refresh();

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		Click(locator1 = "Button#PLUS");

		Click(
			key_fieldName = "Add SKU",
			locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			key_fieldLabel = "SKU",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "BLACKSKU");

		Click(locator1 = "Dropdown#TRIGGER");

		Click(
			key_fieldName = "Black",
			locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Purchasable",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Type(
			key_fieldLabel = "Base Price",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "10.0");

		Button.click(button = "Publish");

		Pause(locator1 = "1000");

		Refresh();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "First Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		AssertElementNotPresent(
			key_productName = "Bundled Product",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD");

		AssertElementNotPresent(
			key_productName = "Bundled Product",
			locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");

		AssertElementNotPresent(
			key_productName = "Bundled Product",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_AVAILABLE_LABEL");

		AssertElementNotPresent(
			key_productName = "Bundled Product",
			key_productSku = "BLACKSKU",
			locator1 = "CommerceEntry#PRODUCT_CARD_SKU");
	}

	@description = "COMMERCE-5907. As a buyer, I want to be unable to add multiple SKU product to the cart directly, I want to be unable to select the quantity of the product directly and I want to be unable to check the availability of the product directly"
	@priority = "3"
	test AssertMultipleSKUProductCannotBeDirectlyAddedToCart {
		property portal.acceptance = "true";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		AssertElementNotPresent(
			key_productName = "Brake Fluid",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD");

		AssertElementNotPresent(
			key_productName = "Brake Fluid",
			locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");

		AssertElementNotPresent(
			key_productName = "Brake Fluid",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_AVAILABILITY_LABEL");

		AssertElementNotPresent(
			key_productSku = "MIN93016A",
			locator1 = "CommerceEntry#PRODUCT_CARD_SKU");
	}

	@description = "COMMERCE-6160. As a buyer, I want to be able to select only the allowed quantities of a product, if set"
	@priority = "3"
	test AssertOnlyAllowedQuantitiesAreSelectable {
		property portal.acceptance = "false";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceNavigator.searchEntry(entryName = "U-Joint");

		CommerceNavigator.gotoEntry(entryName = "U-Joint");

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		AssertElementPresent(
			key_fieldLabel = "Allowed Order Quantities",
			locator1 = "TextInput#GENERIC_TEXT_INPUT");

		Type(
			key_fieldLabel = "Allowed Order Quantities",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "1 4 5 7 11");

		Button.clickPublish();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Test");

		ApplicationsMenu.gotoSite(site = "Minium");

		Click(
			key_productName = "U-Joint",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_SELECT_FIELD");

		for (var number : list "1,4,5,7,11") {
			AssertElementPresent(
				key_optionValue = "${number}",
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_SELECT_FIELD_OPTION_VALUE");
		}
	}

	@description = "COMMERCE-6162. As a buyer, I want to be able to select the quantity of a product by multiple value, if set"
	@priority = "3"
	test AssertOnlyMultipleValuesAreSelectableQuantities {
		property portal.acceptance = "false";

		// TODO Review

		var multipleQuantity = "3";
		var product = "U-Joint";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceNavigator.searchEntry(entryName = "${product}");

		CommerceNavigator.gotoEntry(entryName = "${product}");

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		Type(
			key_text = "Multiple Order Quantity",
			locator1 = "TextInput#ANY",
			value1 = "${multipleQuantity}");

		Button.clickPublish();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		AssertTextEquals(
			key_productName = "${product}",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
			value1 = "${multipleQuantity}");

		for (var quantity : list "1,3,4,6,300") {
			Type(
				key_productName = "${product}",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "${quantity}");

			AssertTextEquals(
				key_productName = "${product}",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "${quantity}");

			if (("${quantity}" == "1") || ("${quantity}" == "4")) {
				var conditionNotSatisfied = "true";

				AssertElementPresent(
					key_productName = "${product}",
					locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD_HAS_ERROR");
			}
			else {
				var conditionNotSatisfied = "false";

				AssertElementNotPresent(
					key_productName = "${product}",
					locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD_HAS_ERROR");
			}

			FrontStore.viewQuantitySelectorPopoverListItem(
				conditionNotSatisfied = "${conditionNotSatisfied}",
				quantity = "${multipleQuantity}",
				quantityConfiguration = "multiple");
		}
	}

	@description = "COMMERCE-6164. As a buyer I want to be able to add a product to the cart regardless of the availability, if back ordererabilty of that product is enabled"
	@priority = "3"
	test AssertProductCanBeAddedToCartIfBackOrderIsEnabled {
		property portal.acceptance = "true";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Minium",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		AssertTextEquals(
			key_productQuantity = "0",
			locator1 = "CommerceEntry#PRODUCT_SKU_CONFIGURATION_AVAILABLE_QUANTITY",
			value1 = "0");

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Allow Back Order",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickPublish();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Test");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		AssertNotChecked.assertNotCheckedNotVisible(
			key_productName = "Simple T-Shirt",
			locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceNavigator.searchEntry(entryName = "Simple T-Shirt");

		CommerceNavigator.gotoEntry(entryName = "Simple T-Shirt");

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Allow Back Order",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickPublish();

		ApplicationsMenu.gotoSite(site = "Minium");

		AssertNotChecked.assertNotCheckedNotVisible(
			key_productName = "Simple T-Shirt",
			locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
	}

	@description = "COMMERCE-6163. As a buyer I don't want to be able to add a product to the cart if the product is not purchasable"
	@priority = "3"
	test AssertProductCannotBeAddedToCartIfProductIsNotPurchasable {
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceAcceleratorsInitializer.inviteNewMemberWithRoleToAccount(
			accountName = "Commerce Account",
			emailAddress = "buyer@liferay.com",
			role = "Buyer",
			userFirstName = "Buyer",
			userLastName = "User",
			userScreenName = "buyeruser");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceNavigator.searchEntry(entryName = "U-Joint");

		CommerceNavigator.gotoEntry(entryName = "U-Joint");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceNavigator.gotoEntry(entryName = "MIN55861");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Uncheck.uncheckToggleSwitch(
			key_checkSetupName = "Purchasable",
			locator1 = "ToggleSwitch#SHOW_SPECIFIC_TOGGLE_SWITCH");

		Button.clickPublish();

		SelectFrameTop(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Test");

		ApplicationsMenu.gotoSite(site = "Minium");

		AssertElementPresent(
			key_productName = "U-Joint",
			locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_DISABLED");
	}

	@description = "COMMERCE-5860. As a buyer, I want to change the channel currency and view the product price with the changed currency"
	@priority = "3"
	test AssertProductCardCurrencyAfterChannelCurrencyChanged {
		property portal.acceptance = "false";

		// TODO Review

		var currencyName = "Euro";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Minium Portal");

		Select(
			key_title = "Currency",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "${currencyName}");

		Button.clickSave();

		AssertSelectedLabel(
			key_title = "Currency",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "${currencyName}");

		ApplicationsMenu.gotoSite(site = "Minium");

		AssertTextEquals.assertPartialText(
			key_productName = "U-Joint",
			locator1 = "CommerceEntry#PRODUCT_CARD_LIST_PRICE",
			value1 = "€");
	}

	@description = "COMMERCE-5856. As a buyer, I want to view the product image container in the top area and I want to be able to click on the product image to navigate to the product detail page"
	@priority = "3"
	test AssertProductCardImageRedirectsToProductDetailsPage {
		property portal.acceptance = "Intern Test";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		Click(
			key_productName = "u-joint",
			locator1 = "CommerceFrontStore#PRODUCT_CARD_IMAGE");

		AssertTextEquals(
			locator1 = "Publications#MANAGE_PUBLICATIONS_PAGE_TITLE",
			value1 = "Product Detail");
	}

	@description = "COMMERCE-5858. As a buyer, I want to view the catalog default product image if set"
	@priority = "3"
	test AssertProductCardShowsCatalogDefaultImage {
		property portal.acceptance = "false";

		var productName = "Simple T-Shirt";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Catalogs");

		CommerceNavigator.gotoEntry(entryName = "Minium");

		var catalog_default_img = "//img[@class='current-image']";
		var catalog_default_img_src = selenium.getAttribute("${catalog_default_img}@src");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Minium",
			productName = "${productName}",
			productType = "Simple");

		ApplicationsMenu.gotoSite(site = "Minium");

		WaitForPageLoad();

		var minium_catalog_default_img = "//a[contains(@href,'simple-t-shirt')]//img[contains(@class,'card-picture')]";
		var minium_catalog_default_img_src = selenium.getAttribute("${minium_catalog_default_img}@src");

		TestUtils.assertEquals(
			actual = "${minium_catalog_default_img_src}",
			expected = "${catalog_default_img_src}");
	}

	@description = "COMMERCE-5857. As a buyer, I want to view the product's own image if set"
	@priority = "3"
	test AssertProductCardShowsCustomImageIfSet {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Minium",
			productName = "Blue T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceProductImages.addProductImages(
			imageTitles = "Blue",
			validationImage = "true");

		CommerceNavigator.gotoEntry(entryName = "Commerce_Blue.jpg");

		var fileEntryId = CommerceEntry.getFileEntryIDFromProductMedia();

		ApplicationsMenu.gotoSite(site = "Minium");

		AssertElementPresent(
			key_fileEntryId = "${fileEntryId}",
			key_itemName = "Blue T-Shirt",
			locator1 = "CommerceEntry#PRODUCT_CARD_CUSTOM_IMAGE");
	}

	@description = "COMMERCE-5872. As a buyer, I want to view the availability of the product, if set and configured admin-side(product available)"
	@priority = "3"
	test AssertProductIsAvailable {
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		AssertTextEquals(
			key_productName = "abs-sensor",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_AVAILABILITY_LABEL",
			value1 = "Available");
	}

	@description = "COMMERCE-5871. As a buyer, I want to view the availability of the product, if set and configured admin-side(product unavailable)"
	@priority = "3"
	test AssertProductIsUnavailable {
		property portal.acceptance = "false";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		AssertElementPresent(
			key_productName = "Catalytic Converters",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_UNAVAILABLE_LABEL");
	}

	@description = "COMMERCE-5861. As a buyer, I want to view the product name with the correct localization"
	@priority = "3"
	test AssertProductNameIsTranslated {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceNavigator.searchEntry(entryName = "Shock Absorber");

		CommerceNavigator.gotoEntry(entryName = "Shock Absorber");

		PortletEntry.changeLocale(
			fieldName = "Name",
			locale = "es-ES");

		Type(
			locator1 = "TextInput#NAME",
			value1 = "Amortiguador");

		Button.clickPublish();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceAcceleratorsInitializer.addPortlet(portletName = "Language Selector");

		LanguagePortlet.selectLanguagePG(
			locale = "es_ES",
			textIcon = "español-España");

		AssertElementPresent(
			key_productName = "Amortiguador",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_NAME");

		LanguagePortlet.selectLanguagePG(
			locale = "en_US",
			textIcon = "english-United States");

		AssertElementPresent(
			key_productName = "Shock Absorber",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_NAME");
	}

	@description = "COMMERCE-6318. As a buyer, I want to be able to select the quantity of a cart item up to a maximum quantity, if set"
	@priority = "3"
	test AssertQuantityCanBeSelectedUpToAMaximumQuantitySet {
		property portal.acceptance = "true";

		var maximumQuantity = "4";
		var product = "U-Joint";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceProducts.searchProduct(search = "${product}");

		CommerceNavigator.gotoEntry(entryName = "${product}");

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		Type(
			key_fieldLabel = "Maximum Order Quantity",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${maximumQuantity}");

		Button.clickPublish();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		AssertTextEquals(
			key_productName = "${product}",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
			value1 = "1");

		for (var quantity : list "4,5,10") {
			Type(
				key_productName = "${product}",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "${quantity}");

			AssertTextEquals(
				key_productName = "${product}",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "${quantity}");

			if (("${quantity}" == "5") || ("${quantity}" == "10")) {
				AssertElementPresent(
					key_productName = "${product}",
					locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD_HAS_ERROR");

				FrontStore.viewQuantitySelectorPopoverListItem(
					conditionNotSatisfied = "true",
					quantity = "${maximumQuantity}",
					quantityConfiguration = "max");
			}
			else {
				AssertElementNotPresent(
					key_productName = "${product}",
					locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD_HAS_ERROR");
			}
		}
	}

	@description = "COMMERCE-6161. As a buyer, I want to be able to select the quantity of a product starting from a minimum quantity, if set"
	@priority = "3"
	test AssertSelectableQuantitiesStartFromMinimumQuantitySet {
		property portal.acceptance = "false";

		// TODO Review

		var minimumQuantity = "3";
		var product = "U-Joint";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceNavigator.searchEntry(entryName = "${product}");

		CommerceNavigator.gotoEntry(entryName = "${product}");

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		Type(
			key_text = "Minimum Order Quantity",
			locator1 = "TextInput#ANY",
			value1 = "${minimumQuantity}");

		Button.clickPublish();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		AssertTextEquals(
			key_productName = "${product}",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
			value1 = "${minimumQuantity}");

		task ("On the product card, assert that the add to cart button is disabled if the quantity selector is empty") {
			Type(
				key_productName = "${product}",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "");

			AssertElementPresent(
				key_productName = "${product}",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_DISABLED");
		}

		for (var quantity : list "1,2,3") {
			Type(
				key_productName = "${product}",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "${quantity}");

			AssertTextEquals(
				key_productName = "${product}",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "${quantity}");

			if (("${quantity}" == "1") || ("${quantity}" == "2")) {
				var conditionNotSatisfied = "true";

				AssertElementPresent(
					key_productName = "${product}",
					locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD_HAS_ERROR");
			}
			else {
				var conditionNotSatisfied = "false";

				AssertElementNotPresent(
					key_productName = "${product}",
					locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD_HAS_ERROR");
			}

			FrontStore.viewQuantitySelectorPopoverListItem(
				conditionNotSatisfied = "${conditionNotSatisfied}",
				quantity = "${minimumQuantity}",
				quantityConfiguration = "min");
		}
	}

	@description = "COMMERCE-6656. As a buyer, I want to be unable to add a bundled product(Price Type Static) to cart directly"
	@priority = "3"
	test AssertStaticPriceBundledProductCannotBeAddedToCartDirectly {
		property portal.acceptance = "false";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Options");

		CPCommerceCatalog.newOptionsEntry(
			optionDescription = "Option Description",
			optionFieldType = "Select from List",
			optionName = "Color");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Use in Faceted Navigation",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Required",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "SKU Contributor",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Click(locator1 = "Button#PLUS");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		CommerceEntry.addOptionValue(
			valueName = "Black",
			valuePosition = "");

		Button.click(button = "Submit");

		SelectFrameTop();

		Button.clickSave();

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Minium",
			productName = "Bundled Product",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		Type(
			key_title = "Add Options",
			locator1 = "CommerceEntry#ADD_RELATION_FIELD",
			value1 = "Color");

		Button.click(button = "Select");

		Refresh();

		CommerceNavigator.gotoEntry(entryName = "Color");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Select(
			key_fieldLabel = "Price Type",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Static");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(
			key_index = "Black",
			locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");

		Type(
			key_fieldLabel = "Delta Price",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "60.00");

		Type(
			key_fieldLabel = "SKU",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "MIN55861");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Refresh();

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		Click(locator1 = "Button#PLUS");

		Click(
			key_fieldName = "Add SKU",
			locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			key_fieldLabel = "SKU",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "BLACKSKU");

		Click(locator1 = "Dropdown#TRIGGER");

		Click(
			key_fieldName = "Black",
			locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Purchasable",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Type(
			key_fieldLabel = "Base Price",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "10.0");

		Button.click(button = "Publish");

		Pause(locator1 = "1000");

		Refresh();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "First Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		AssertElementNotPresent(
			key_productName = "Bundled Product",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD");

		AssertElementNotPresent(
			key_productName = "Bundled Product",
			locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");

		AssertElementNotPresent(
			key_productName = "Bundled Product",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_AVAILABLE_LABEL");

		AssertElementNotPresent(
			key_productName = "Bundled Product",
			key_productSku = "BLACKSKU",
			locator1 = "CommerceEntry#PRODUCT_CARD_SKU");
	}

	@description = "COMMERCE-5873. As a buyer, I want to be able to navigate to the product detail page via primary CTA, to check its variants"
	@priority = "3"
	test AssertViewAllVariantsButtonRedirectsToProductDetailsPage {
		property portal.acceptance = "true";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		Click(
			key_productName = "Brake Fluid",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_VIEW_ALL_VARIANTS");

		AssertElementPresent(
			key_productSku = "MIN93016A",
			locator1 = "CommerceFrontStore#FS_PRODUCT_SKU");
	}

	@description = "COMMERCE-5868. As a buyer, I want to be able to compare a product with other ones in a product comparison items list, by checking the product via checkbox"
	@priority = "3"
	test CompareProductFromProductCard {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		Check.checkToggleSwitch(
			key_productName = "U-Joint",
			locator1 = "CommerceEntry#PRODUCT_CARD_COMPARE_CHECKBOX");

		AssertElementPresent(
			key_value = "0",
			locator1 = "CommerceEntry#MINI_COMPARE_ITEM_ACTIVE");
	}

	@description = "COMMERCE-5869. As a buyer, I want to be able to remove a product from a product comparison items list, by unchecking the product via checkbox"
	@priority = "3"
	test RemoveProductFromComparisonItems {
		property portal.acceptance = "false";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		Check.checkToggleSwitch(
			key_productName = "U-Joint",
			locator1 = "CommerceEntry#PRODUCT_CARD_COMPARE_CHECKBOX");

		Refresh();

		AssertChecked.assertCheckedNotVisible(
			key_productName = "U-Joint",
			locator1 = "CommerceEntry#PRODUCT_CARD_COMPARE_CHECKBOX");

		AssertElementPresent(locator1 = "CommerceEntry#MINI_COMPARE_ITEM_ACTIVE");

		Uncheck.uncheckToggleSwitch(
			key_productName = "U-Joint",
			locator1 = "CommerceEntry#PRODUCT_CARD_COMPARE_CHECKBOX");

		AssertElementNotPresent(locator1 = "CommerceEntry#MINI_COMPARE_ITEM_ACTIVE");
	}

	@description = "COMMERCE-5867. As a buyer, I want to be able to remove a product from my wish list, by clicking on an Add To Wish List button, if already active"
	@priority = "3"
	test RemoveProductFromWishList {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		ClickNoError(
			key_productName = "U-Joint",
			locator1 = "CommerceEntry#PRODUCT_CARD_ADD_TO_WISH_LIST_BUTTON");

		AssertElementPresent(
			key_productName = "U-Joint",
			locator1 = "CommerceEntry#PRODUCT_CARD_ASSERT_WISH_LIST_HEART_FULL");

		Refresh();

		AssertElementPresent(
			key_productName = "U-Joint",
			locator1 = "CommerceEntry#PRODUCT_CARD_ASSERT_WISH_LIST_HEART_FULL");

		ClickNoError(
			key_productName = "U-Joint",
			locator1 = "CommerceEntry#PRODUCT_CARD_ADD_TO_WISH_LIST_BUTTON");

		Navigator.openWithAppendToBaseURL(urlAppend = "group/minium/lists");

		AssertElementNotPresent(
			key_userName = "U-Joint",
			locator1 = "Account#USER_TABLE_NAME");
	}

	@description = "COMMERCE-6193. As a buyer, I want the first selectable quantity of a product to be the minimum multiple quantity if Minimum Order Quantity is higher than Multiple Order Quantity"
	@priority = "3"
	test ViewFirstSelectableQuantityWhenMinimumOrderQuantityIsHigherThanMultipleOrderQuantity {
		property portal.acceptance = "true";

		// TODO Review

		var minimumQuantity = "6";
		var multipleQuantity = "5";
		var product = "U-Joint";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		AppBuilderAdmin.searchByItem(itemName = "${product}");

		CommerceNavigator.gotoEntry(entryName = "${product}");

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		Type(
			key_fieldLabel = "Minimum Order Quantity",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${minimumQuantity}");

		Type(
			key_fieldLabel = "Multiple Order Quantity",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${multipleQuantity}");

		Button.clickPublish();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Commerce Account");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		AssertTextEquals(
			key_productName = "${product}",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
			value1 = "10");

		for (var quantity : list "5,20") {
			Type(
				key_productName = "${product}",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "${quantity}");

			AssertTextEquals(
				key_productName = "${product}",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "${quantity}");

			if ("${quantity}" == "5") {
				var minimumConditionNotSatisfied = "true";

				AssertElementPresent(
					key_productName = "${product}",
					locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD_HAS_ERROR");
			}
			else {
				var minimumConditionNotSatisfied = "false";
				var multipleConditionNotSatisfied = "false";

				AssertElementNotPresent(
					key_productName = "${product}",
					locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD_HAS_ERROR");
			}

			FrontStore.viewQuantitySelectorPopoverListItem(
				conditionNotSatisfied = "${minimumConditionNotSatisfied}",
				quantity = "${minimumQuantity}",
				quantityConfiguration = "min");

			FrontStore.viewQuantitySelectorPopoverListItem(
				conditionNotSatisfied = "${multipleConditionNotSatisfied}",
				quantity = "${multipleQuantity}",
				quantityConfiguration = "multiple");
		}
	}

	@description = "COMMERCE-6194. As a buyer, I want the first selectable quantity of a product to be the minimum multiple quantity if Minimum Order Quantity is lower than Multiple Order Quantity"
	@priority = "3"
	test ViewFirstSelectableQuantityWhenMinimumOrderQuantityIsLowerThanMultipleOrderQuantity {
		property portal.acceptance = "false";

		// TODO Review

		var minimumQuantity = "4";
		var multipleQuantity = "5";
		var product = "U-Joint";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceNavigator.searchEntry(entryName = "${product}");

		CommerceNavigator.gotoEntry(entryName = "${product}");

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		Type(
			key_fieldLabel = "Minimum Order Quantity",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${minimumQuantity}");

		Type(
			key_fieldLabel = "Multiple Order Quantity",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "${multipleQuantity}");

		Button.clickPublish();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");

		CommerceAcceleratorsInitializer.createNewAccountViaFront(accountName = "Test Test");

		CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

		AssertTextEquals(
			key_productName = "${product}",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
			value1 = "${multipleQuantity}");

		for (var quantity : list "1,4,5,20") {
			Type(
				key_productName = "${product}",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "${quantity}");

			AssertTextEquals(
				key_productName = "${product}",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "${quantity}");

			if (("${quantity}" == "1") || ("${quantity}" == "4")) {
				var multipleConditionNotSatisfied = "true";

				if ("${quantity}" == "1") {
					var minimumConditionNotSatisfied = "true";
				}
				else {
					var minimumConditionNotSatisfied = "false";
				}

				AssertElementPresent(
					key_productName = "${product}",
					locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD_HAS_ERROR");
			}
			else {
				var minimumConditionNotSatisfied = "false";
				var multipleConditionNotSatisfied = "false";

				AssertElementNotPresent(
					key_productName = "${product}",
					locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD_HAS_ERROR");
			}

			FrontStore.viewQuantitySelectorPopoverListItem(
				conditionNotSatisfied = "${minimumConditionNotSatisfied}",
				quantity = "${minimumQuantity}",
				quantityConfiguration = "min");

			FrontStore.viewQuantitySelectorPopoverListItem(
				conditionNotSatisfied = "${multipleConditionNotSatisfied}",
				quantity = "${multipleQuantity}",
				quantityConfiguration = "multiple");
		}
	}

	@description = "COMMERCE-5864. As a buyer, I want to view the product price"
	@priority = "3"
	test ViewProductCardPrice {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/minium");

		AssertTextEquals.assertPartialText(
			key_productName = "U-Joint",
			locator1 = "CommerceEntry#PRODUCT_CARD_LIST_PRICE",
			value1 = "$ 24.00");
	}

	@description = "COMMERCE-6158. As a buyer, I want to see the barred list price and a discount price of a product, if set"
	@priority = "3"
	test ViewProductCardPriceWithDiscount {
		property portal.acceptance = "false";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Pricing",
			portlet = "Discounts");

		Click(locator1 = "Button#PLUS");

		CommerceEntry.addNewDiscountsEntry(
			channelsEligibility = "Minium Portal",
			discountAmount = "20",
			discountName = "Test Discount",
			discountTarget = "Products",
			discountType = "Percentage");

		CommerceRelations.assignSingleRelationToProductsEntry(
			entryName = "ABS Sensor",
			title = "Add Products");

		Button.clickPublish();

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		AssertElementPresent(
			key_productName = "ABS Sensor",
			locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_VALUE_INACTIVE");

		AssertElementPresent(
			key_productName = "ABS Sensor",
			locator1 = "CommerceFrontStore#PRODUCT_DETAILS_PRICE_VALUE_FINAL");
	}

	@description = "COMMERCE-6157. As a buyer, I want to see the barred list price and a sale price of a product, if a promotion is set"
	@priority = "3"
	test ViewProductCardPriceWithPromotion {
		property portal.acceptance = "false";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		AssertElementPresent(
			key_productName = "Brake Pads",
			locator1 = "CommerceFrontStore#FS_PRODUCT_VALUE_PROMO_PRICE");

		AssertElementPresent(
			key_productName = "Brake Pads",
			locator1 = "CommerceFrontStore#FS_PRODUCT_VALUE_INACTIVE_PRICE");
	}

	@description = "COMMERCE-5862. As a buyer, I want to view the product SKU, if set(single SKU)"
	@priority = "3"
	test ViewProductCardSKU {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		AssertElementPresent(
			key_productName = "U-Joint",
			key_productSku = "MIN55861",
			locator1 = "CommerceEntry#PRODUCT_CARD_SKU");
	}

	@description = "COMMERCE-5865. As a buyer, I want to view starting price on product card when product has different SKUs with different prices"
	@priority = "3"
	test ViewProductCardStartingPrice {
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

		AssertTextEquals.assertPartialText(
			key_productName = "Brake Fluid",
			locator1 = "CommerceEntry#PRODUCT_CARD_LIST_PRICE",
			value1 = "From $ 80.00");
	}

}