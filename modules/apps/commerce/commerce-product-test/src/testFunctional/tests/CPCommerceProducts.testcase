@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(storeFront = "true");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-6269. AddAnOptionAndVerifyIfIsPresent"
	@priority = "3"
	test AddAnOptionAndVerifyIfIsPresent {
		property portal.acceptance = "false";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		Type(
			key_title = "Add Options",
			locator1 = "CommerceEntry#ADD_RELATION_FIELD",
			value1 = "Color");

		Button.click(button = "Create New");

		AssertElementPresent(
			key_entryName = "Color",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Options");

		AssertElementPresent(
			key_entryName = "Color",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");
	}

	@description = "This is a test for COMMERCE-6021. AddASKU"
	@ignore = "true"
	@priority = "3"
	test AddASKU {
		property portal.acceptance = "false";

		// TODO COMMERCE-6021 AddASKU

	}

	@description = "This is a test for COMMERCE-6287. AddASpecificationAndVerifyIfIsPresent"
	@priority = "3"
	test AddASpecificationAndVerifyIfIsPresent {
		property portal.acceptance = "false";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		Click(locator1 = "AppBuilder#SEARCH_BAR_INPUT");

		Type(
			key_text = "Find or create a specification",
			locator1 = "TextInput#CUSTOM_CANONICAL_URL_ENABLED",
			value1 = "Quantity");

		Click(
			key_text = "Select",
			locator1 = "Button#ANY_LAST");

		Alert.viewSuccessMessage();

		AssertElementPresent(
			key_entryName = "Quantity",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		Click(locator1 = "AppBuilder#SEARCH_BAR_INPUT");

		Type(
			key_text = "Find or create a specification",
			locator1 = "TextInput#CUSTOM_CANONICAL_URL_ENABLED",
			value1 = "Test Specification");

		Click(
			key_text = "Create New",
			locator1 = "Button#ANY");

		Alert.viewSuccessMessage();

		AssertElementPresent(
			key_entryName = "Test Specification",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Specifications");

		AssertElementPresent(
			key_entryName = "Test Specification",
			locator1 = "CommerceEntry#ENTRY_CONTENT_ROW_BY_NAME");
	}

	@description = "This is a test for COMMERCE-6302. AddGroupedProduct"
	@priority = "3"
	test AddGroupedProduct {
		property portal.acceptance = "true";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Grouped T-Shirt",
			productType = "Grouped");

		AssertElementPresent(locator1 = "Message#SUCCESS");

		Click(locator1 = "Icon#BACK");

		AssertElementPresent(
			key_entryName = "Grouped T-Shirt",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		AssertElementPresent(
			key_tableEntryURL = "Grouped",
			locator1 = "RemoteApps#TABLE_ENTRY_URL_REMOTE_TABLE");
	}

	@description = "This is a test for COMMERCE-6301. AddVirtualProduct"
	@priority = "3"
	test AddVirtualProduct {
		property portal.acceptance = "Intern Test";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Virtual Book",
			productType = "Virtual");

		Alert.viewSuccessMessage();

		Click(locator1 = "Icon#BACK");

		AssertElementPresent(
			key_productName = "Virtual Book",
			locator1 = "CommerceOrders#ORDER_DETAILS_PRODUCT_NAME");

		AssertElementPresent(
			key_productName = "Virtual Book",
			key_value = "Virtual",
			locator1 = "CommerceEntry#TABLE_SEARCH_BY_NAME_AND_CONTENT");
	}

	@description = "This is a test for COMMERCE-6020. AssertProductBundleCanBeCreatedWithPriceTypeStaticAndDynamic"
	@priority = "3"
	test AssertProductBundleCanBeCreatedWithPriceTypeStaticAndDynamic {
		property portal.acceptance = "true";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Options");

		CPCommerceCatalog.newOptionsEntry(
			optionDescription = "Option Description",
			optionFieldType = "Select from List",
			optionName = "Color");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Use in Faceted Navigation",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Required",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "SKU Contributor",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Click(locator1 = "Button#PLUS");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		CommerceEntry.addOptionValue(
			valueName = "Black",
			valuePosition = "");

		Button.click(button = "Submit");

		SelectFrameTop();

		Button.clickSave();

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Shoes",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			key_fieldLabel = "SKU",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "SHOESSKU");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Purchasable",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Type(
			key_fieldLabel = "Base Price",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "50.0");

		Button.clickPublish();

		Refresh();

		Click(locator1 = "Icon#BACK");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		Type(
			key_title = "Add Options",
			locator1 = "CommerceEntry#ADD_RELATION_FIELD",
			value1 = "Color");

		Button.click(button = "Select");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		Click(locator1 = "Button#PLUS");

		Click(
			key_fieldName = "Add SKU",
			locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			key_fieldLabel = "SKU",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "BLACKSKU");

		Click(locator1 = "Dropdown#TRIGGER");

		Click(
			key_fieldName = "Black",
			locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Purchasable",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Type(
			key_fieldLabel = "Base Price",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "10.0");

		Button.click(button = "Publish");

		Refresh();

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		Click(
			key_index = "Color",
			locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Select(
			key_fieldLabel = "Price Type",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Static");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(
			key_value = "Black",
			locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

		CommerceEntry.clickNoError(menuItem = "Delete");

		Alert.viewSuccessMessage();

		Select(
			key_fieldLabel = "Price Type",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Dynamic");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Select(
			key_fieldLabel = "Price Type",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Static");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for COMMERCE-6912. Bulk delete Products"
	@priority = "3"
	test BulkDeleteProducts {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		Pagination.changePagination(itemsPerPage = "60 items");

		while (IsElementNotPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER")) {
			CommerceProducts.deleteEntries();
		}

		AssertElementPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER");
	}

	@description = "This is a test for COMMERCE-9191. CheckTheFirstStatusForSingleApproverWorkflow"
	@priority = "3"
	test CheckTheFirstStatusForSingleApproverWorkflow {
		property portal.acceptance = "false";

		ApplicationsMenu.gotoPortlet(
			category = "Workflow",
			panel = "Applications",
			portlet = "Process Builder");

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		Workflow.configureWorkflow(
			workflowDefinition = "Single Approver",
			workflowResourceValue = "Commerce Product");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			compileDescription = "false",
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple",
			publishProduct = "false");

		task ("Disable Single Approver for avoid issue on CI") {
			ApplicationsMenu.gotoPortlet(
				category = "Workflow",
				panel = "Applications",
				portlet = "Process Builder");

			CommerceEntry.gotoMenuTab(menuTab = "Configuration");

			Workflow.configureWorkflow(
				workflowDefinition = "No Workflow",
				workflowResourceValue = "Commerce Product");
		}
	}

	@description = "This is a test for COMMERCE-6747. ConfigureGroupedProduct"
	@ignore = "true"
	@priority = "3"
	test ConfigureGroupedProduct {
		property portal.acceptance = "false";

		// TODO COMMERCE-6747 ConfigureGroupedProduct

	}

	@description = "This is a test for COMMERCE-6751. ConfigureVirtualProduct"
	@priority = "3"
	test ConfigureVirtualProduct {
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Minium",
			productName = "Virtual T-Shirt",
			productType = "Virtual");

		CommerceEntry.gotoMenuTab(menuTab = "Virtual");

		Click(locator1 = "FormFields#SELECT_UPLOAD_FIELD");

		SelectFrameTop();

		SelectFrame(
			key_frameTitle = "Select File",
			locator1 = "CommerceEntry#ANY_IFRAME");

		UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
			locator1 = "TextInput#FILE",
			value1 = "Commerce_Black.jpg");

		Click(
			key_filterOption = "Add",
			locator1 = "AppBuilder#CHOOSE_SEARCH_FILTER_BY_OPTION");

		Pause(locator1 = "3000");

		if (IsElementPresent(key_contentType = "Base Information", locator1 = "CommerceEntry#NOTIFICATION_DELIVERY_PANEL_CLOSED")) {
			Click(
				key_contentType = "Base Information",
				locator1 = "CommerceEntry#NOTIFICATION_DELIVERY_PANEL_CLOSED");
		}

		Type(
			key_fieldLabel = "Max Number of Downloads",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "10");

		if (IsElementPresent(key_contentType = "Sample", locator1 = "CommerceEntry#NOTIFICATION_DELIVERY_PANEL_CLOSED")) {
			Click(
				key_contentType = "Sample",
				locator1 = "CommerceEntry#NOTIFICATION_DELIVERY_PANEL_CLOSED");
		}

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Enable Sample",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Click(
			key_panel = "Sample",
			locator1 = "CommerceEntry#VIRTUAL_SELECT_BY_PANEL");

		SelectFrame.selectFrameNoLoading(
			key_frameTitle = "Select File",
			locator1 = "CommerceEntry#ANY_IFRAME");

		UploadCommonFile.uploadCommonFileHiddenNoMouseOver(
			locator1 = "TextInput#FILE",
			value1 = "Commerce_Black.jpg");

		Click(
			key_filterOption = "Add",
			locator1 = "AppBuilder#CHOOSE_SEARCH_FILTER_BY_OPTION");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Refresh();

		AssertElementPresent(
			key_index = "Commerce_Black.jpg",
			locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");

		AssertElementPresent(
			key_index = "Commerce_Black (1).jpg",
			locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");

		AssertTextEquals(
			key_fieldLabel = "Max Number of Downloads",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "10");
	}

	test CreateProductBundleWithPriceTypeDynamic {
		property portal.acceptance = "quarantine";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Options");

		CPCommerceCatalog.newOptionsEntry(
			optionDescription = "Option Description",
			optionFieldType = "Select from List",
			optionName = "Color");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		CommerceEntry.viewOptionsEntry(
			optionDescription = "Option Description",
			optionName = "Color");

		CPCommerceCatalog.addOptionValues(
			optionEntryName = "Color",
			optionValuesList = "Black:1");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Shoes",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceSKUs.addSKU(
			noOption = "true",
			optionValuesList = "Shoes:50.0");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		CommerceRelations.assignSingleRelationToProductsEntry(
			entryName = "Color",
			title = "Add Option");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceSKUs.addSKU(optionValuesList = "Black:10.0");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		CommerceNavigator.gotoEntry(entryName = "Color");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Select(
			key_fieldLabel = "Price Type",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Dynamic");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		CommerceNavigator.gotoEntry(entryName = "Black");

		CommerceEntry.selectAutoCompleteField(
			entryName = "SHOESSKU",
			label = "SKU");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	@description = "This is a test for COMMERCE-6018. CreateProductBundleWithPriceTypeStatic"
	@priority = "3"
	test CreateProductBundleWithPriceTypeStatic {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Options");

		CPCommerceCatalog.newOptionsEntry(
			optionDescription = "Option Description",
			optionFieldType = "Select from List",
			optionName = "Color");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Use in Faceted Navigation",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Required",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "SKU Contributor",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickSave();

		Click(locator1 = "Button#PLUS");

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		CommerceEntry.addOptionValue(
			valueName = "Black",
			valuePosition = "");

		Button.click(button = "Submit");

		SelectFrameTop();

		Button.clickSave();

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Shoes",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		Click(locator1 = "Button#PLUS");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			key_fieldLabel = "SKU",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "SHOESSKU");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Purchasable",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Type(
			key_fieldLabel = "Base Price",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "50.0");

		Button.clickPublish();

		Refresh();

		Click(locator1 = "Icon#BACK");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		Type(
			key_title = "Add Options",
			locator1 = "CommerceEntry#ADD_RELATION_FIELD",
			value1 = "Color");

		Button.click(button = "Select");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		Click(locator1 = "Button#PLUS");

		Click(
			key_fieldName = "Add SKU",
			locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			key_fieldLabel = "SKU",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "BLACKSKU");

		Click(locator1 = "Dropdown#TRIGGER");

		Click(
			key_fieldName = "Black",
			locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Purchasable",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Type(
			key_fieldLabel = "Base Price",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "10.0");

		Button.click(button = "Publish");

		Refresh();

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		Click(
			key_index = "Color",
			locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Select(
			key_fieldLabel = "Price Type",
			locator1 = "Select#GENERIC_SELECT_FIELD",
			value1 = "Static");

		Button.clickSave();

		Alert.viewSuccessMessage();

		Click(
			key_index = "Black",
			locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");

		Type(
			key_fieldLabel = "Delta Price",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "60.0");

		Type(
			key_fieldLabel = "SKU",
			locator1 = "TextInput#GENERIC_TEXT_INPUT",
			value1 = "SHOESSKU");

		Button.clickSave();

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for COMMERCE-9190. DuplicateADraftProduct"
	@priority = "3"
	test DuplicateADraftProduct {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			compileDescription = "false",
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple",
			publishProduct = "false");

		Click(
			key_itemName = "",
			locator1 = "CommerceEntry#SPECIFIC_MENU_ITEM");

		Click(
			key_optionValue = "Duplicate",
			locator1 = "CommerceFrontStore#FS_PRODUCT_OPTION");

		CommerceEntry.addProductsEntry(
			productCatalog = "Master",
			productFullDescription = "",
			productName = "Copy of Simple T-Shirt",
			productShortDescription = "",
			publishProduct = "false");

		AssertElementPresent(
			key_status = "Draft",
			locator1 = "CommerceEntry#WORKFLOW_STATUS");
	}

	@description = "This is a test for COMMERCE-9189. DuplicateAnApprovedProduct"
	@priority = "3"
	test DuplicateAnApprovedProduct {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		Click(
			key_itemName = "",
			locator1 = "CommerceEntry#SPECIFIC_MENU_ITEM");

		Click(
			key_optionValue = "Duplicate",
			locator1 = "CommerceFrontStore#FS_PRODUCT_OPTION");

		CommerceEntry.addProductsEntry(
			productCatalog = "Master",
			productFullDescription = "",
			productName = "Copy of Simple T-Shirt",
			productShortDescription = "",
			publishProduct = "false");

		AssertElementPresent(
			key_status = "Draft",
			locator1 = "CommerceEntry#WORKFLOW_STATUS");
	}

	@description = "This is a test for COMMERCE-8425. DuplicateAProductAndVerifyIfSkuPriceIsUnique"
	@priority = "3"
	test DuplicateAProductAndVerifyIfSkuPriceIsUnique {
		property portal.acceptance = "false";

		task ("Given a minium site") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("When I duplicate ABS Sensor") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CommerceNavigator.gotoEntry(entryName = "ABS Sensor");

			Click(
				key_itemName = "",
				locator1 = "CommerceEntry#SPECIFIC_MENU_ITEM");

			Click(
				key_optionValue = "Duplicate",
				locator1 = "CommerceFrontStore#FS_PRODUCT_OPTION");

			CommerceEntry.addProductsEntry(
				productCatalog = "Minium",
				productFullDescription = "",
				productName = "Copy of ABS Sensor",
				productShortDescription = "");

			Button.clickPublish();
		}

		task ("And if I change the SKU price of the original product") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CommerceNavigator.gotoEntry(entryName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.addPriceToSKU(price = "60.00");

			Button.clickPublish();

			Refresh();
		}

		task ("Then if I go back to the duplicate product the price hasn't changed") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Products");

			CommerceNavigator.searchEntry(entryName = "Copy of ABS Sensor");

			CommerceNavigator.gotoEntry(entryName = "Copy of ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertTextEquals(
				locator1 = "CommerceEntry#PRICE_FIELD",
				value1 = "50.00");

			echo("The price hasn't changed");
		}
	}

	@description = "This is a test for COMMERCE-5808. EditAProduct"
	@priority = "3"
	test EditAProduct {
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceNavigator.gotoEntry(entryName = "ABS Sensor");

		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = "ABS");

		Button.clickPublish();

		Alert.viewSuccessMessage();

		AssertTextEquals(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = "ABS");
	}

	@description = "This is a test for COMMERCE-6022. EditASKU"
	@ignore = "true"
	@priority = "3"
	test EditASKU {
		property portal.acceptance = "false";

		// TODO COMMERCE-6022 EditASKU

	}

	@description = "This is a test for COMMERCE-5807. EditSkuAndDelete"
	@priority = "3"
	test EditSkuAndDelete {
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceNavigator.searchEntry(entryName = "MIN93017");

		CommerceNavigator.gotoEntry(entryName = "MIN93017");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			locator1 = "CommerceEntry#SKU_FIELD",
			value1 = "MIN930178");

		Button.clickPublish();

		AssertVisible(locator1 = "Message#SUCCESS");

		Click(locator1 = "Icon#CLOSE");

		Refresh();

		CommerceNavigator.searchEntry(entryName = "MIN930178");

		if (IsElementPresent(locator1 = "CommerceNavigation#ANY_ENTRY_NAME")) {
			CommerceEntry.deleteCommerceEntry();

			AssertVisible(locator1 = "Message#SUCCESS");
		}
	}

	test ProductPublishing {
		property environment.acceptance = "true";
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Minium",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		CommerceRelations.assignSingleRelationToProductsEntry(
			entryName = "Package Quantity",
			title = "Add Option");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceSKUs.addSKU(optionValuesList = "6:10.0,12:20.0,24:30.0,48:40.0,112:50.0");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceProductImages.addProductImages(
			imageTitles = "Black,Black:1,Blue,Blue:1,White",
			optionValues = "6,12,24,48,112",
			validationImage = "true");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Specifications");

		CommerceNavigator.gotoCommercePortletNavItem(navItem = "Specification Groups");

		CommerceEntry.createNewSpecificationGroups(
			specificationDescription = "SpecificationGroups",
			specificationTitle = "SpecificationGroups");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Specifications");

		CommerceEntry.createNewSpecificationLabels(
			specificationDescription = "SpecificationLabel",
			specificationGroupTitle = "SpecificationGroups",
			specificationTitle = "SpecificationLabel");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		Pause(locator1 = "2000");

		CommerceNavigator.searchEntry(entryName = "Simple T-Shirt");

		CommerceNavigator.gotoEntry(entryName = "Simple T-Shirt");

		CommerceRelations.assignSingleRelationToProductsEntry(
			entryName = "SpecificationLabel",
			title = "Specifications");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		CommerceEntry.viewProductOptions(
			optionList = "6,12,24,48,112",
			optionName = "Package Quantity");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		CommerceEntry.viewProductSkus(skusList = "6:10.00,12:20.00,24:30.00,48:40.00,112:50.00");
	}

	@description = "This is a test for COMMERCE-9181. SaveAsDraftAnAlreadyDraftProduct"
	@priority = "3"
	test SaveAsDraftAnAlreadyDraftProduct {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			compileDescription = "false",
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple",
			publishProduct = "false");

		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = "Simple T-Shirt 01");

		Click(
			key_text = "Save as Draft",
			locator1 = "Button#ANY");

		AssertElementPresent(
			key_status = "Draft",
			locator1 = "CommerceEntry#WORKFLOW_STATUS");

		AssertTextEquals(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = "Simple T-Shirt 01");
	}

	@description = "This is a test for COMMERCE-9183. SaveAsDraftAnApprovedProduct"
	@priority = "3"
	test SaveAsDraftAnApprovedProduct {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		Type(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = "Simple T-Shirt 01");

		Click(
			key_text = "Save as Draft",
			locator1 = "Button#ANY");

		AssertElementPresent(
			key_status = "Draft",
			locator1 = "CommerceEntry#WORKFLOW_STATUS");

		AssertTextEquals(
			locator1 = "CommerceEntry#NAME_FIELD",
			value1 = "Simple T-Shirt 01");
	}

	test TranslateProductName {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceNavigator.searchEntry(entryName = "Shock Absorber");

		CommerceNavigator.gotoEntry(entryName = "Shock Absorber");

		PortletEntry.changeLocale(
			fieldName = "Name",
			locale = "es-ES");

		Type(
			locator1 = "TextInput#NAME",
			value1 = "Amortiguador");

		Button.clickPublish();

		PortletEntry.changeLocale(
			fieldName = "Name",
			locale = "es-ES");

		AssertTextEquals(
			locator1 = "TextInput#NAME",
			value1 = "Amortiguador");
	}

	@description = "COMMERCE-5802. Use a filter always check that the results are correct"
	@priority = "3"
	test UseFilters {
		property portal.acceptance = "false";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(
			key_categoryFilter = "Category",
			locator1 = "CommerceEntry#FILTER_SELECT_CATEGORY");

		Check.checkNotVisible(
			checkboxName = "Brake System",
			locator1 = "Checkbox#ANY_CHECKBOX");

		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		AssertElementNotPresent(
			key_entryName = "Timing Chain",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		Button.click(button = "Reset Filters");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(locator1 = "CommerceEntry#FILTER_BACK_ARROW");

		Click(
			key_categoryFilter = "Catalog",
			locator1 = "CommerceEntry#FILTER_SELECT_CATEGORY");

		Click(
			key_fieldType = "Master",
			locator1 = "FormViewBuilder#FIELD_LABEL_MULTIPLE_SELECTION");

		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");

		AssertElementNotPresent(
			key_entryName = "Hoses",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		Button.click(button = "Reset Filters");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(locator1 = "CommerceEntry#FILTER_BACK_ARROW");

		Click(
			key_categoryFilter = "Channel",
			locator1 = "CommerceEntry#FILTER_SELECT_CATEGORY");

		Check.checkNotVisible(
			checkboxName = "Test Channel",
			locator1 = "Checkbox#ANY_CHECKBOX");

		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");

		AssertElementPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER");

		Button.click(button = "Reset Filters");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(locator1 = "CommerceEntry#FILTER_BACK_ARROW");

		Click(
			key_categoryFilter = "Product Type",
			locator1 = "CommerceEntry#FILTER_SELECT_CATEGORY");

		Click(
			key_fieldType = "Virtual",
			locator1 = "FormViewBuilder#FIELD_LABEL_MULTIPLE_SELECTION");

		Click(
			key_menuItem = "Add Filter",
			locator1 = "CommerceEntry#ANY_MENU_ITEM");

		AssertElementPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER");

		Button.click(button = "Reset Filters");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");

		Click(locator1 = "CommerceEntry#FILTER_BACK_ARROW");

		Click(locator1 = "CommerceEntry#FILTER_DROPDOWN_MENU");
	}

	@description = "This is a test for COMMERCE-6304. UseFriendlyURL"
	@priority = "3"
	test UseFriendlyURL {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Test Channel");

		for (var fixIssueButtonName : list "Product Detail") {
			if (IsElementPresent(key_fixIssueButtonName = "${fixIssueButtonName}", locator1 = "CommerceEntry#FIX_ISSUE_BUTTON")) {
				Click(
					key_fixIssueButtonName = "${fixIssueButtonName}",
					locator1 = "CommerceEntry#FIX_ISSUE_BUTTON");

				Alert.viewSuccessMessage();
			}
		}

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Orange",
			productType = "Simple");

		var baseURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${baseURL}/web/guest/p/orange");

		AssertTextEquals(
			locator1 = "CommerceFrontStore#FS_PRODUCT_NAME",
			value1 = "Orange");
	}

	@description = "This is a test for COMMERCE-6303. UseSchedule"
	@priority = "3"
	test UseSchedule {
		property portal.acceptance = "false";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		AppBuilderAdmin.searchByItem(itemName = '''"Brake Fluid"''');

		Click(
			key_entryName = "Brake Fluid",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Never Expire",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Click(locator1 = "CommerceEntry#EXPIRATION_DATE_FIELD");

		var displayDateDay = DateUtil.getCurrentDate();
		var displayDateMonth = DateUtil.getCurrentMonth();
		var displayDateYear = DateUtil.getCurrentYear();
		var futureYear = ${displayDateYear} + 1;
		var displayDate = "${displayDateMonth}/${displayDateDay}/${futureYear}";

		Type(
			locator1 = "CommerceEntry#EXPIRATION_DATE_FIELD",
			value1 = "${displayDate}");

		Button.clickPublish();

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

	@description = "This is a test for COMMERCE-5805. UseSearchBarAndPagination"
	@priority = "3"
	test UseSearchBarAndPagination {
		property portal.acceptance = "false";

		// TODO Review

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		Click(locator1 = "Pagination#NEXT_LINK");

		AssertTextEquals(
			locator1 = "Pagination#PAGINATION_ITEMS_PER_PAGE",
			value1 = "10 items");

		Pagination.viewResults(results = "Showing 11 to 20 of 50");

		CommerceProducts.searchProduct(search = "U-Joint");

		AssertElementPresent(locator1 = "//a[contains(text(),'Ball Joints')]");

		AssertElementPresent(locator1 = "//a[contains(text(),'U-Joint')]");

		Pagination.viewResults(results = "Showing 1 to 2 of 2");
	}

	@description = "This is a test for COMMERCE-5801. UseSkuSearchBarAndPagination"
	@priority = "3"
	test UseSkuSearchBarAndPagination {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceEntry.gotoMenuTab(menuTab = "SKUs");

		Click(locator1 = "Pagination#NEXT_LINK");

		CommerceEntry.viewPaginationResults(results = "Showing 11 to 20 of 54");

		CommerceProducts.searchProduct(search = "MIN55861");

		AssertElementPresent(
			key_entryName = "MIN55861",
			locator1 = "CommerceEntry#TABLE_LIST_TITLE");
	}

	@description = "This is a test for COMMERCE-5803. UseSortingByNameAndDate"
	@priority = "3"
	test UseSortingByNameAndDate {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CommerceNavigator.sortField(sortFieldName = "Name");

		CommerceNavigator.viewFilterResultsSpecificOrder(resultsList = "ABS Sensor,Ball Joints,Bearings");

		CommerceNavigator.sortField(sortFieldName = "Name");

		CommerceNavigator.viewFilterResultsSpecificOrder(resultsList = "Wheel Seal - Front,Wheel Bearing Grease,Wear Sensors");

		CommerceNavigator.sortField(sortFieldName = "Modified Date");

		CommerceNavigator.viewFilterResultsSpecificOrder(resultsList = "ABS Sensor,Brake Fluid,Premium Brake Fluid");

		CommerceNavigator.sortField(sortFieldName = "Modified Date");

		CommerceNavigator.viewFilterResultsSpecificOrder(resultsList = "U-Joint,Transmission Cooler Line Assembly,Torque Converters");
	}

	@description = "This is a test for COMMERCE-9182. VerifyDraftProductNotAppearOnMiniumCatalogPage"
	@priority = "3"
	test VerifyDraftProductNotAppearOnMiniumCatalogPage {
		property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		ApplicationsMenu.gotoSite(site = "Minium");

		CommerceEntry.addAccountEntryUser(
			accountName = "Commerce Account",
			accountType = "Business",
			agreeToTermsAndAnswerReminderQuery = "true",
			createNewAccount = "true",
			requireReset = "false",
			userEmailAddress = "buyer@liferay.com",
			userFirstName = "Buyer",
			userLastName = "User",
			userRole = "Buyer",
			userScreenName = "buyeruser",
			userSiteMembership = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Minium",
			productName = "Simple T-Shirt",
			productType = "Simple",
			publishProduct = "false");

		User.logoutPG();

		CommerceLogin.miniumLogin(
			password = "test",
			urlAppend = "web/minium",
			userEmailAddress = "buyer@liferay.com");

		Type(
			locator1 = "Search#EMBEDDED_SEARCH_BAR",
			value1 = "Simple T-Shirt");

		Button.clickSubmitButton();

		AssertElementNotPresent(
			key_productName = "Simple T-Shirt",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_NAME");

		User.logoutPG();

		User.firstLoginPG();

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		AppBuilderAdmin.searchByItem(itemName = "Simple T-Shirt");

		CommerceNavigator.gotoEntry(entryName = "Simple T-Shirt");

		CommerceEntry.publishEntry(status = "Approved");

		User.logoutPG();

		CommerceLogin.miniumLogin(
			password = "test",
			urlAppend = "web/minium",
			userEmailAddress = "buyer@liferay.com");

		Type(
			locator1 = "Search#EMBEDDED_SEARCH_BAR",
			value1 = "Simple T-Shirt");

		Button.clickSubmitButton();

		AssertElementPresent(
			key_productName = "Simple T-Shirt",
			locator1 = "CommerceAccelerators#PRODUCT_CARD_NAME");
	}

	@description = "This is a test for COMMERCE-9179. VerifyDraftStatus"
	@priority = "3"
	test VerifyDraftStatus {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			compileDescription = "false",
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple",
			publishProduct = "false");

		AssertElementPresent(
			key_text = "Publish",
			locator1 = "Button#ANY");

		AssertElementPresent(
			key_text = "Save as Draft",
			locator1 = "Button#ANY");
	}

	@description = "This is a test for COMMERCE-9180. VerifyDraftStatusNormalWorkflow"
	@priority = "3"
	test VerifyDraftStatusNormalWorkflow {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");
	}

	@description = "[Please Update]"
	@ignore = "true"
	@priority = "4"
	test VerifyIfCategorizationIsWorking {
		property portal.acceptance = "false";

		// TODO COMMERCE-7075 VerifyIfCategorizationIsWorking

	}

}