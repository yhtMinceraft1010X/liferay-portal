/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.commerce.product.type.virtual.model.impl;

import com.liferay.commerce.product.type.virtual.model.CPDefinitionVirtualSetting;
import com.liferay.commerce.product.type.virtual.model.CPDefinitionVirtualSettingModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CPDefinitionVirtualSetting service. Represents a row in the &quot;CPDefinitionVirtualSetting&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CPDefinitionVirtualSettingModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CPDefinitionVirtualSettingImpl}.
 * </p>
 *
 * @author Marco Leo
 * @see CPDefinitionVirtualSettingImpl
 * @generated
 */
@JSON(strict = true)
public class CPDefinitionVirtualSettingModelImpl
	extends BaseModelImpl<CPDefinitionVirtualSetting>
	implements CPDefinitionVirtualSettingModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cp definition virtual setting model instance should use the <code>CPDefinitionVirtualSetting</code> interface instead.
	 */
	public static final String TABLE_NAME = "CPDefinitionVirtualSetting";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"CPDefinitionVirtualSettingId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"classNameId", Types.BIGINT}, {"classPK", Types.BIGINT},
		{"fileEntryId", Types.BIGINT}, {"url", Types.VARCHAR},
		{"activationStatus", Types.INTEGER}, {"duration", Types.BIGINT},
		{"maxUsages", Types.INTEGER}, {"useSample", Types.BOOLEAN},
		{"sampleFileEntryId", Types.BIGINT}, {"sampleUrl", Types.VARCHAR},
		{"termsOfUseRequired", Types.BOOLEAN},
		{"termsOfUseContent", Types.VARCHAR},
		{"termsOfUseArticleResourcePK", Types.BIGINT},
		{"override", Types.BOOLEAN}, {"lastPublishDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CPDefinitionVirtualSettingId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("classNameId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("activationStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("duration", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("maxUsages", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("useSample", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("sampleFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sampleUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("termsOfUseRequired", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("termsOfUseContent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("termsOfUseArticleResourcePK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("override", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("lastPublishDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CPDefinitionVirtualSetting (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,CPDefinitionVirtualSettingId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,classNameId LONG,classPK LONG,fileEntryId LONG,url VARCHAR(255) null,activationStatus INTEGER,duration LONG,maxUsages INTEGER,useSample BOOLEAN,sampleFileEntryId LONG,sampleUrl VARCHAR(255) null,termsOfUseRequired BOOLEAN,termsOfUseContent STRING null,termsOfUseArticleResourcePK LONG,override BOOLEAN,lastPublishDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table CPDefinitionVirtualSetting";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cpDefinitionVirtualSetting.CPDefinitionVirtualSettingId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CPDefinitionVirtualSetting.CPDefinitionVirtualSettingId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CLASSNAMEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CLASSPK_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CPDEFINITIONVIRTUALSETTINGID_COLUMN_BITMASK = 32L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.commerce.product.type.virtual.service.util.ServiceProps.get(
			"lock.expiration.time.com.liferay.commerce.product.type.virtual.model.CPDefinitionVirtualSetting"));

	public CPDefinitionVirtualSettingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _CPDefinitionVirtualSettingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCPDefinitionVirtualSettingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _CPDefinitionVirtualSettingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CPDefinitionVirtualSetting.class;
	}

	@Override
	public String getModelClassName() {
		return CPDefinitionVirtualSetting.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CPDefinitionVirtualSetting, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CPDefinitionVirtualSetting, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPDefinitionVirtualSetting, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply(
					(CPDefinitionVirtualSetting)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CPDefinitionVirtualSetting, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CPDefinitionVirtualSetting, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CPDefinitionVirtualSetting)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CPDefinitionVirtualSetting, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CPDefinitionVirtualSetting, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map
		<String, Function<CPDefinitionVirtualSetting, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<CPDefinitionVirtualSetting, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<CPDefinitionVirtualSetting, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<CPDefinitionVirtualSetting, Object>>();
		Map<String, BiConsumer<CPDefinitionVirtualSetting, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<CPDefinitionVirtualSetting, ?>>();

		attributeGetterFunctions.put(
			"mvccVersion", CPDefinitionVirtualSetting::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<CPDefinitionVirtualSetting, Long>)
				CPDefinitionVirtualSetting::setMvccVersion);
		attributeGetterFunctions.put(
			"uuid", CPDefinitionVirtualSetting::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<CPDefinitionVirtualSetting, String>)
				CPDefinitionVirtualSetting::setUuid);
		attributeGetterFunctions.put(
			"CPDefinitionVirtualSettingId",
			CPDefinitionVirtualSetting::getCPDefinitionVirtualSettingId);
		attributeSetterBiConsumers.put(
			"CPDefinitionVirtualSettingId",
			(BiConsumer<CPDefinitionVirtualSetting, Long>)
				CPDefinitionVirtualSetting::setCPDefinitionVirtualSettingId);
		attributeGetterFunctions.put(
			"groupId", CPDefinitionVirtualSetting::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<CPDefinitionVirtualSetting, Long>)
				CPDefinitionVirtualSetting::setGroupId);
		attributeGetterFunctions.put(
			"companyId", CPDefinitionVirtualSetting::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<CPDefinitionVirtualSetting, Long>)
				CPDefinitionVirtualSetting::setCompanyId);
		attributeGetterFunctions.put(
			"userId", CPDefinitionVirtualSetting::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<CPDefinitionVirtualSetting, Long>)
				CPDefinitionVirtualSetting::setUserId);
		attributeGetterFunctions.put(
			"userName", CPDefinitionVirtualSetting::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<CPDefinitionVirtualSetting, String>)
				CPDefinitionVirtualSetting::setUserName);
		attributeGetterFunctions.put(
			"createDate", CPDefinitionVirtualSetting::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<CPDefinitionVirtualSetting, Date>)
				CPDefinitionVirtualSetting::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", CPDefinitionVirtualSetting::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<CPDefinitionVirtualSetting, Date>)
				CPDefinitionVirtualSetting::setModifiedDate);
		attributeGetterFunctions.put(
			"classNameId", CPDefinitionVirtualSetting::getClassNameId);
		attributeSetterBiConsumers.put(
			"classNameId",
			(BiConsumer<CPDefinitionVirtualSetting, Long>)
				CPDefinitionVirtualSetting::setClassNameId);
		attributeGetterFunctions.put(
			"classPK", CPDefinitionVirtualSetting::getClassPK);
		attributeSetterBiConsumers.put(
			"classPK",
			(BiConsumer<CPDefinitionVirtualSetting, Long>)
				CPDefinitionVirtualSetting::setClassPK);
		attributeGetterFunctions.put(
			"fileEntryId", CPDefinitionVirtualSetting::getFileEntryId);
		attributeSetterBiConsumers.put(
			"fileEntryId",
			(BiConsumer<CPDefinitionVirtualSetting, Long>)
				CPDefinitionVirtualSetting::setFileEntryId);
		attributeGetterFunctions.put("url", CPDefinitionVirtualSetting::getUrl);
		attributeSetterBiConsumers.put(
			"url",
			(BiConsumer<CPDefinitionVirtualSetting, String>)
				CPDefinitionVirtualSetting::setUrl);
		attributeGetterFunctions.put(
			"activationStatus",
			CPDefinitionVirtualSetting::getActivationStatus);
		attributeSetterBiConsumers.put(
			"activationStatus",
			(BiConsumer<CPDefinitionVirtualSetting, Integer>)
				CPDefinitionVirtualSetting::setActivationStatus);
		attributeGetterFunctions.put(
			"duration", CPDefinitionVirtualSetting::getDuration);
		attributeSetterBiConsumers.put(
			"duration",
			(BiConsumer<CPDefinitionVirtualSetting, Long>)
				CPDefinitionVirtualSetting::setDuration);
		attributeGetterFunctions.put(
			"maxUsages", CPDefinitionVirtualSetting::getMaxUsages);
		attributeSetterBiConsumers.put(
			"maxUsages",
			(BiConsumer<CPDefinitionVirtualSetting, Integer>)
				CPDefinitionVirtualSetting::setMaxUsages);
		attributeGetterFunctions.put(
			"useSample", CPDefinitionVirtualSetting::getUseSample);
		attributeSetterBiConsumers.put(
			"useSample",
			(BiConsumer<CPDefinitionVirtualSetting, Boolean>)
				CPDefinitionVirtualSetting::setUseSample);
		attributeGetterFunctions.put(
			"sampleFileEntryId",
			CPDefinitionVirtualSetting::getSampleFileEntryId);
		attributeSetterBiConsumers.put(
			"sampleFileEntryId",
			(BiConsumer<CPDefinitionVirtualSetting, Long>)
				CPDefinitionVirtualSetting::setSampleFileEntryId);
		attributeGetterFunctions.put(
			"sampleUrl", CPDefinitionVirtualSetting::getSampleUrl);
		attributeSetterBiConsumers.put(
			"sampleUrl",
			(BiConsumer<CPDefinitionVirtualSetting, String>)
				CPDefinitionVirtualSetting::setSampleUrl);
		attributeGetterFunctions.put(
			"termsOfUseRequired",
			CPDefinitionVirtualSetting::getTermsOfUseRequired);
		attributeSetterBiConsumers.put(
			"termsOfUseRequired",
			(BiConsumer<CPDefinitionVirtualSetting, Boolean>)
				CPDefinitionVirtualSetting::setTermsOfUseRequired);
		attributeGetterFunctions.put(
			"termsOfUseContent",
			CPDefinitionVirtualSetting::getTermsOfUseContent);
		attributeSetterBiConsumers.put(
			"termsOfUseContent",
			(BiConsumer<CPDefinitionVirtualSetting, String>)
				CPDefinitionVirtualSetting::setTermsOfUseContent);
		attributeGetterFunctions.put(
			"termsOfUseJournalArticleResourcePrimKey",
			CPDefinitionVirtualSetting::
				getTermsOfUseJournalArticleResourcePrimKey);
		attributeSetterBiConsumers.put(
			"termsOfUseJournalArticleResourcePrimKey",
			(BiConsumer<CPDefinitionVirtualSetting, Long>)
				CPDefinitionVirtualSetting::
					setTermsOfUseJournalArticleResourcePrimKey);
		attributeGetterFunctions.put(
			"override", CPDefinitionVirtualSetting::getOverride);
		attributeSetterBiConsumers.put(
			"override",
			(BiConsumer<CPDefinitionVirtualSetting, Boolean>)
				CPDefinitionVirtualSetting::setOverride);
		attributeGetterFunctions.put(
			"lastPublishDate", CPDefinitionVirtualSetting::getLastPublishDate);
		attributeSetterBiConsumers.put(
			"lastPublishDate",
			(BiConsumer<CPDefinitionVirtualSetting, Date>)
				CPDefinitionVirtualSetting::setLastPublishDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCPDefinitionVirtualSettingId() {
		return _CPDefinitionVirtualSettingId;
	}

	@Override
	public void setCPDefinitionVirtualSettingId(
		long CPDefinitionVirtualSettingId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_CPDefinitionVirtualSettingId = CPDefinitionVirtualSettingId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return "";
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@JSON
	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_classNameId = classNameId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalClassNameId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("classNameId"));
	}

	@JSON
	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_classPK = classPK;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalClassPK() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("classPK"));
	}

	@JSON
	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileEntryId = fileEntryId;
	}

	@JSON
	@Override
	public String getUrl() {
		if (_url == null) {
			return "";
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_url = url;
	}

	@JSON
	@Override
	public int getActivationStatus() {
		return _activationStatus;
	}

	@Override
	public void setActivationStatus(int activationStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_activationStatus = activationStatus;
	}

	@JSON
	@Override
	public long getDuration() {
		return _duration;
	}

	@Override
	public void setDuration(long duration) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_duration = duration;
	}

	@JSON
	@Override
	public int getMaxUsages() {
		return _maxUsages;
	}

	@Override
	public void setMaxUsages(int maxUsages) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maxUsages = maxUsages;
	}

	@JSON
	@Override
	public boolean getUseSample() {
		return _useSample;
	}

	@JSON
	@Override
	public boolean isUseSample() {
		return _useSample;
	}

	@Override
	public void setUseSample(boolean useSample) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_useSample = useSample;
	}

	@JSON
	@Override
	public long getSampleFileEntryId() {
		return _sampleFileEntryId;
	}

	@Override
	public void setSampleFileEntryId(long sampleFileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sampleFileEntryId = sampleFileEntryId;
	}

	@JSON
	@Override
	public String getSampleUrl() {
		if (_sampleUrl == null) {
			return "";
		}
		else {
			return _sampleUrl;
		}
	}

	@Override
	public void setSampleUrl(String sampleUrl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sampleUrl = sampleUrl;
	}

	@JSON
	@Override
	public boolean getTermsOfUseRequired() {
		return _termsOfUseRequired;
	}

	@JSON
	@Override
	public boolean isTermsOfUseRequired() {
		return _termsOfUseRequired;
	}

	@Override
	public void setTermsOfUseRequired(boolean termsOfUseRequired) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_termsOfUseRequired = termsOfUseRequired;
	}

	@JSON
	@Override
	public String getTermsOfUseContent() {
		if (_termsOfUseContent == null) {
			return "";
		}
		else {
			return _termsOfUseContent;
		}
	}

	@Override
	public String getTermsOfUseContent(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTermsOfUseContent(languageId);
	}

	@Override
	public String getTermsOfUseContent(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getTermsOfUseContent(languageId, useDefault);
	}

	@Override
	public String getTermsOfUseContent(String languageId) {
		return LocalizationUtil.getLocalization(
			getTermsOfUseContent(), languageId);
	}

	@Override
	public String getTermsOfUseContent(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getTermsOfUseContent(), languageId, useDefault);
	}

	@Override
	public String getTermsOfUseContentCurrentLanguageId() {
		return _termsOfUseContentCurrentLanguageId;
	}

	@JSON
	@Override
	public String getTermsOfUseContentCurrentValue() {
		Locale locale = getLocale(_termsOfUseContentCurrentLanguageId);

		return getTermsOfUseContent(locale);
	}

	@Override
	public Map<Locale, String> getTermsOfUseContentMap() {
		return LocalizationUtil.getLocalizationMap(getTermsOfUseContent());
	}

	@Override
	public void setTermsOfUseContent(String termsOfUseContent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_termsOfUseContent = termsOfUseContent;
	}

	@Override
	public void setTermsOfUseContent(String termsOfUseContent, Locale locale) {
		setTermsOfUseContent(
			termsOfUseContent, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTermsOfUseContent(
		String termsOfUseContent, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(termsOfUseContent)) {
			setTermsOfUseContent(
				LocalizationUtil.updateLocalization(
					getTermsOfUseContent(), "TermsOfUseContent",
					termsOfUseContent, languageId, defaultLanguageId));
		}
		else {
			setTermsOfUseContent(
				LocalizationUtil.removeLocalization(
					getTermsOfUseContent(), "TermsOfUseContent", languageId));
		}
	}

	@Override
	public void setTermsOfUseContentCurrentLanguageId(String languageId) {
		_termsOfUseContentCurrentLanguageId = languageId;
	}

	@Override
	public void setTermsOfUseContentMap(
		Map<Locale, String> termsOfUseContentMap) {

		setTermsOfUseContentMap(
			termsOfUseContentMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setTermsOfUseContentMap(
		Map<Locale, String> termsOfUseContentMap, Locale defaultLocale) {

		if (termsOfUseContentMap == null) {
			return;
		}

		setTermsOfUseContent(
			LocalizationUtil.updateLocalization(
				termsOfUseContentMap, getTermsOfUseContent(),
				"TermsOfUseContent", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getTermsOfUseJournalArticleResourcePrimKey() {
		return _termsOfUseJournalArticleResourcePrimKey;
	}

	@Override
	public void setTermsOfUseJournalArticleResourcePrimKey(
		long termsOfUseJournalArticleResourcePrimKey) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_termsOfUseJournalArticleResourcePrimKey =
			termsOfUseJournalArticleResourcePrimKey;
	}

	@JSON
	@Override
	public boolean getOverride() {
		return _override;
	}

	@JSON
	@Override
	public boolean isOverride() {
		return _override;
	}

	@Override
	public void setOverride(boolean override) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_override = override;
	}

	@JSON
	@Override
	public Date getLastPublishDate() {
		return _lastPublishDate;
	}

	@Override
	public void setLastPublishDate(Date lastPublishDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastPublishDate = lastPublishDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				CPDefinitionVirtualSetting.class.getName()),
			getClassNameId());
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CPDefinitionVirtualSetting.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> termsOfUseContentMap = getTermsOfUseContentMap();

		for (Map.Entry<Locale, String> entry :
				termsOfUseContentMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getTermsOfUseContent();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			CPDefinitionVirtualSetting.class.getName(), getPrimaryKey(),
			defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String termsOfUseContent = getTermsOfUseContent(defaultLocale);

		if (Validator.isNull(termsOfUseContent)) {
			setTermsOfUseContent(
				getTermsOfUseContent(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setTermsOfUseContent(
				getTermsOfUseContent(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public CPDefinitionVirtualSetting toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CPDefinitionVirtualSetting>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CPDefinitionVirtualSettingImpl cpDefinitionVirtualSettingImpl =
			new CPDefinitionVirtualSettingImpl();

		cpDefinitionVirtualSettingImpl.setMvccVersion(getMvccVersion());
		cpDefinitionVirtualSettingImpl.setUuid(getUuid());
		cpDefinitionVirtualSettingImpl.setCPDefinitionVirtualSettingId(
			getCPDefinitionVirtualSettingId());
		cpDefinitionVirtualSettingImpl.setGroupId(getGroupId());
		cpDefinitionVirtualSettingImpl.setCompanyId(getCompanyId());
		cpDefinitionVirtualSettingImpl.setUserId(getUserId());
		cpDefinitionVirtualSettingImpl.setUserName(getUserName());
		cpDefinitionVirtualSettingImpl.setCreateDate(getCreateDate());
		cpDefinitionVirtualSettingImpl.setModifiedDate(getModifiedDate());
		cpDefinitionVirtualSettingImpl.setClassNameId(getClassNameId());
		cpDefinitionVirtualSettingImpl.setClassPK(getClassPK());
		cpDefinitionVirtualSettingImpl.setFileEntryId(getFileEntryId());
		cpDefinitionVirtualSettingImpl.setUrl(getUrl());
		cpDefinitionVirtualSettingImpl.setActivationStatus(
			getActivationStatus());
		cpDefinitionVirtualSettingImpl.setDuration(getDuration());
		cpDefinitionVirtualSettingImpl.setMaxUsages(getMaxUsages());
		cpDefinitionVirtualSettingImpl.setUseSample(isUseSample());
		cpDefinitionVirtualSettingImpl.setSampleFileEntryId(
			getSampleFileEntryId());
		cpDefinitionVirtualSettingImpl.setSampleUrl(getSampleUrl());
		cpDefinitionVirtualSettingImpl.setTermsOfUseRequired(
			isTermsOfUseRequired());
		cpDefinitionVirtualSettingImpl.setTermsOfUseContent(
			getTermsOfUseContent());
		cpDefinitionVirtualSettingImpl.
			setTermsOfUseJournalArticleResourcePrimKey(
				getTermsOfUseJournalArticleResourcePrimKey());
		cpDefinitionVirtualSettingImpl.setOverride(isOverride());
		cpDefinitionVirtualSettingImpl.setLastPublishDate(getLastPublishDate());

		cpDefinitionVirtualSettingImpl.resetOriginalValues();

		return cpDefinitionVirtualSettingImpl;
	}

	@Override
	public CPDefinitionVirtualSetting cloneWithOriginalValues() {
		CPDefinitionVirtualSettingImpl cpDefinitionVirtualSettingImpl =
			new CPDefinitionVirtualSettingImpl();

		cpDefinitionVirtualSettingImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		cpDefinitionVirtualSettingImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		cpDefinitionVirtualSettingImpl.setCPDefinitionVirtualSettingId(
			this.<Long>getColumnOriginalValue("CPDefinitionVirtualSettingId"));
		cpDefinitionVirtualSettingImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		cpDefinitionVirtualSettingImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		cpDefinitionVirtualSettingImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		cpDefinitionVirtualSettingImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		cpDefinitionVirtualSettingImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		cpDefinitionVirtualSettingImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		cpDefinitionVirtualSettingImpl.setClassNameId(
			this.<Long>getColumnOriginalValue("classNameId"));
		cpDefinitionVirtualSettingImpl.setClassPK(
			this.<Long>getColumnOriginalValue("classPK"));
		cpDefinitionVirtualSettingImpl.setFileEntryId(
			this.<Long>getColumnOriginalValue("fileEntryId"));
		cpDefinitionVirtualSettingImpl.setUrl(
			this.<String>getColumnOriginalValue("url"));
		cpDefinitionVirtualSettingImpl.setActivationStatus(
			this.<Integer>getColumnOriginalValue("activationStatus"));
		cpDefinitionVirtualSettingImpl.setDuration(
			this.<Long>getColumnOriginalValue("duration"));
		cpDefinitionVirtualSettingImpl.setMaxUsages(
			this.<Integer>getColumnOriginalValue("maxUsages"));
		cpDefinitionVirtualSettingImpl.setUseSample(
			this.<Boolean>getColumnOriginalValue("useSample"));
		cpDefinitionVirtualSettingImpl.setSampleFileEntryId(
			this.<Long>getColumnOriginalValue("sampleFileEntryId"));
		cpDefinitionVirtualSettingImpl.setSampleUrl(
			this.<String>getColumnOriginalValue("sampleUrl"));
		cpDefinitionVirtualSettingImpl.setTermsOfUseRequired(
			this.<Boolean>getColumnOriginalValue("termsOfUseRequired"));
		cpDefinitionVirtualSettingImpl.setTermsOfUseContent(
			this.<String>getColumnOriginalValue("termsOfUseContent"));
		cpDefinitionVirtualSettingImpl.
			setTermsOfUseJournalArticleResourcePrimKey(
				this.<Long>getColumnOriginalValue(
					"termsOfUseArticleResourcePK"));
		cpDefinitionVirtualSettingImpl.setOverride(
			this.<Boolean>getColumnOriginalValue("override"));
		cpDefinitionVirtualSettingImpl.setLastPublishDate(
			this.<Date>getColumnOriginalValue("lastPublishDate"));

		return cpDefinitionVirtualSettingImpl;
	}

	@Override
	public int compareTo(
		CPDefinitionVirtualSetting cpDefinitionVirtualSetting) {

		long primaryKey = cpDefinitionVirtualSetting.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CPDefinitionVirtualSetting)) {
			return false;
		}

		CPDefinitionVirtualSetting cpDefinitionVirtualSetting =
			(CPDefinitionVirtualSetting)object;

		long primaryKey = cpDefinitionVirtualSetting.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CPDefinitionVirtualSetting> toCacheModel() {
		CPDefinitionVirtualSettingCacheModel
			cpDefinitionVirtualSettingCacheModel =
				new CPDefinitionVirtualSettingCacheModel();

		cpDefinitionVirtualSettingCacheModel.mvccVersion = getMvccVersion();

		cpDefinitionVirtualSettingCacheModel.uuid = getUuid();

		String uuid = cpDefinitionVirtualSettingCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			cpDefinitionVirtualSettingCacheModel.uuid = null;
		}

		cpDefinitionVirtualSettingCacheModel.CPDefinitionVirtualSettingId =
			getCPDefinitionVirtualSettingId();

		cpDefinitionVirtualSettingCacheModel.groupId = getGroupId();

		cpDefinitionVirtualSettingCacheModel.companyId = getCompanyId();

		cpDefinitionVirtualSettingCacheModel.userId = getUserId();

		cpDefinitionVirtualSettingCacheModel.userName = getUserName();

		String userName = cpDefinitionVirtualSettingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cpDefinitionVirtualSettingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cpDefinitionVirtualSettingCacheModel.createDate =
				createDate.getTime();
		}
		else {
			cpDefinitionVirtualSettingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cpDefinitionVirtualSettingCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			cpDefinitionVirtualSettingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cpDefinitionVirtualSettingCacheModel.classNameId = getClassNameId();

		cpDefinitionVirtualSettingCacheModel.classPK = getClassPK();

		cpDefinitionVirtualSettingCacheModel.fileEntryId = getFileEntryId();

		cpDefinitionVirtualSettingCacheModel.url = getUrl();

		String url = cpDefinitionVirtualSettingCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			cpDefinitionVirtualSettingCacheModel.url = null;
		}

		cpDefinitionVirtualSettingCacheModel.activationStatus =
			getActivationStatus();

		cpDefinitionVirtualSettingCacheModel.duration = getDuration();

		cpDefinitionVirtualSettingCacheModel.maxUsages = getMaxUsages();

		cpDefinitionVirtualSettingCacheModel.useSample = isUseSample();

		cpDefinitionVirtualSettingCacheModel.sampleFileEntryId =
			getSampleFileEntryId();

		cpDefinitionVirtualSettingCacheModel.sampleUrl = getSampleUrl();

		String sampleUrl = cpDefinitionVirtualSettingCacheModel.sampleUrl;

		if ((sampleUrl != null) && (sampleUrl.length() == 0)) {
			cpDefinitionVirtualSettingCacheModel.sampleUrl = null;
		}

		cpDefinitionVirtualSettingCacheModel.termsOfUseRequired =
			isTermsOfUseRequired();

		cpDefinitionVirtualSettingCacheModel.termsOfUseContent =
			getTermsOfUseContent();

		String termsOfUseContent =
			cpDefinitionVirtualSettingCacheModel.termsOfUseContent;

		if ((termsOfUseContent != null) && (termsOfUseContent.length() == 0)) {
			cpDefinitionVirtualSettingCacheModel.termsOfUseContent = null;
		}

		cpDefinitionVirtualSettingCacheModel.
			termsOfUseJournalArticleResourcePrimKey =
				getTermsOfUseJournalArticleResourcePrimKey();

		cpDefinitionVirtualSettingCacheModel.override = isOverride();

		Date lastPublishDate = getLastPublishDate();

		if (lastPublishDate != null) {
			cpDefinitionVirtualSettingCacheModel.lastPublishDate =
				lastPublishDate.getTime();
		}
		else {
			cpDefinitionVirtualSettingCacheModel.lastPublishDate =
				Long.MIN_VALUE;
		}

		return cpDefinitionVirtualSettingCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CPDefinitionVirtualSetting, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CPDefinitionVirtualSetting, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPDefinitionVirtualSetting, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CPDefinitionVirtualSetting)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CPDefinitionVirtualSetting, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CPDefinitionVirtualSetting, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CPDefinitionVirtualSetting, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply(
					(CPDefinitionVirtualSetting)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, CPDefinitionVirtualSetting>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						CPDefinitionVirtualSetting.class, ModelWrapper.class);

	}

	private long _mvccVersion;
	private String _uuid;
	private long _CPDefinitionVirtualSettingId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _classNameId;
	private long _classPK;
	private long _fileEntryId;
	private String _url;
	private int _activationStatus;
	private long _duration;
	private int _maxUsages;
	private boolean _useSample;
	private long _sampleFileEntryId;
	private String _sampleUrl;
	private boolean _termsOfUseRequired;
	private String _termsOfUseContent;
	private String _termsOfUseContentCurrentLanguageId;
	private long _termsOfUseJournalArticleResourcePrimKey;
	private boolean _override;
	private Date _lastPublishDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CPDefinitionVirtualSetting, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CPDefinitionVirtualSetting)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"CPDefinitionVirtualSettingId", _CPDefinitionVirtualSettingId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("classNameId", _classNameId);
		_columnOriginalValues.put("classPK", _classPK);
		_columnOriginalValues.put("fileEntryId", _fileEntryId);
		_columnOriginalValues.put("url", _url);
		_columnOriginalValues.put("activationStatus", _activationStatus);
		_columnOriginalValues.put("duration", _duration);
		_columnOriginalValues.put("maxUsages", _maxUsages);
		_columnOriginalValues.put("useSample", _useSample);
		_columnOriginalValues.put("sampleFileEntryId", _sampleFileEntryId);
		_columnOriginalValues.put("sampleUrl", _sampleUrl);
		_columnOriginalValues.put("termsOfUseRequired", _termsOfUseRequired);
		_columnOriginalValues.put("termsOfUseContent", _termsOfUseContent);
		_columnOriginalValues.put(
			"termsOfUseArticleResourcePK",
			_termsOfUseJournalArticleResourcePrimKey);
		_columnOriginalValues.put("override", _override);
		_columnOriginalValues.put("lastPublishDate", _lastPublishDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put(
			"termsOfUseArticleResourcePK",
			"termsOfUseJournalArticleResourcePrimKey");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("uuid_", 2L);

		columnBitmasks.put("CPDefinitionVirtualSettingId", 4L);

		columnBitmasks.put("groupId", 8L);

		columnBitmasks.put("companyId", 16L);

		columnBitmasks.put("userId", 32L);

		columnBitmasks.put("userName", 64L);

		columnBitmasks.put("createDate", 128L);

		columnBitmasks.put("modifiedDate", 256L);

		columnBitmasks.put("classNameId", 512L);

		columnBitmasks.put("classPK", 1024L);

		columnBitmasks.put("fileEntryId", 2048L);

		columnBitmasks.put("url", 4096L);

		columnBitmasks.put("activationStatus", 8192L);

		columnBitmasks.put("duration", 16384L);

		columnBitmasks.put("maxUsages", 32768L);

		columnBitmasks.put("useSample", 65536L);

		columnBitmasks.put("sampleFileEntryId", 131072L);

		columnBitmasks.put("sampleUrl", 262144L);

		columnBitmasks.put("termsOfUseRequired", 524288L);

		columnBitmasks.put("termsOfUseContent", 1048576L);

		columnBitmasks.put("termsOfUseArticleResourcePK", 2097152L);

		columnBitmasks.put("override", 4194304L);

		columnBitmasks.put("lastPublishDate", 8388608L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CPDefinitionVirtualSetting _escapedModel;

}