@component-name = "portal-lima"
definition {

	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Redirect";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONGroup.addGroup(groupName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Source Page");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Destination Page");
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			User.logoutPG();
		}
	}

	@description = "This ensures that a user will be redirected to the target URL of a permanent redirection."
	@priority = "5"
	@refactordone
	test CanAccessPermanentEntry {
		var portalURL = PropsUtil.get("portal.url");

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			groupName = "Test Site Name",
			permanent = "true",
			sourceURL = "test-source-page");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page");

		SelectWindow(locator1 = "title=Test Destination Page - Test Site Name - ${siteName}");

		AssertLocation(value1 = "${portalURL}/web/test-site-name/test-destination-page");

		var curl = '''
			${portalURL}/web/test-site-name/test-source-page \
				-w %{http_code}
		''';
		var output = JSONCurlUtil.post("${curl}");

		if (contains("${output}", "301")) {
			echo("This is a permanent redirect.");
		}
		else {
			fail("FAIL! This redirect should be permanent.");
		}
	}

	@description = "This ensures that a user will be redirected to the target URL of a temporary redirection."
	@priority = "5"
	@refactordone
	test CanAccessTemporaryEntry {
		var portalURL = PropsUtil.get("portal.url");

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			groupName = "Test Site Name",
			sourceURL = "test-source-page");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page");

		AssertLocation(value1 = "${portalURL}/web/test-site-name/test-destination-page");

		var curl = '''
			${portalURL}/web/test-site-name/test-source-page \
				-w %{http_code}
		''';
		var output = JSONCurlUtil.post("${curl}");

		if (contains("${output}", "302")) {
			echo("This is a temporary redirect.");
		}
		else {
			fail("FAIL! This redirect should be temporary.");
		}
	}

	@description = "This ensures that the user will be redirected to the cached target URL of a permanent redirection after it is updated."
	@priority = "5"
	@refactordone
	test CanAccessUpdatedPermanentEntry {
		var portalURL = PropsUtil.get("portal.url");

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "New Test Destination Page");

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			groupName = "Test Site Name",
			permanent = "true",
			sourceURL = "test-source-page");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.editEntry(
			destinationURLEdit = "${portalURL}/web/test-site-name/new-test-destination-page",
			permanentEntryEdit = "true",
			sourceURL = "test-source-page");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page");

		AssertLocation(value1 = "${portalURL}/web/test-site-name/test-destination-page");
	}

	@description = "This ensures that the user will be redirected to the latest target URL of a temporary redirection after it is updated."
	@priority = "5"
	@refactordone
	test CanAccessUpdatedTemporaryEntry {
		var portalURL = PropsUtil.get("portal.url");

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "New Test Destination Page");

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			groupName = "Test Site Name",
			sourceURL = "test-source-page");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.editEntry(
			destinationURLEdit = "${portalURL}/web/test-site-name/new-test-destination-page",
			sourceURL = "test-source-page");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page");

		AssertLocation(value1 = "${portalURL}/web/test-site-name/new-test-destination-page");
	}

	@description = "This ensures that an entry can be added without update references."
	@priority = "5"
	@refactordone
	test CanAddEntryWithoutReferences {
		var portalURL = PropsUtil.get("portal.url");

		for (var i : list "1,2,3") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page${i}");
		}

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-page2",
			groupName = "Test Site Name",
			sourceURL = "test-page1");

		Redirect.openToAddEntry(siteURLKey = "test-site-name");

		Redirect.addEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-page3",
			noUpdateReferences = "true",
			redirectChain = "true",
			siteName = "test-site-name",
			skipNavigation = "true",
			sourceURL = "test-page2");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-page2",
			redirectType = "Temporary",
			sourceURL = "${portalURL}/web/test-site-name/test-page1");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-page3",
			redirectType = "Temporary",
			sourceURL = "${portalURL}/web/test-site-name/test-page2");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-page1");

		AssertLocation(value1 = "${portalURL}/web/test-site-name/test-page3");
	}

	@description = "This ensures that an entry can be added with update references."
	@priority = "5"
	@refactordone
	test CanAddEntryWithReferences {
		var portalURL = PropsUtil.get("portal.url");

		for (var i : list "1,2,3") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page${i}");
		}

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-page2",
			groupName = "Test Site Name",
			sourceURL = "test-page1");

		Redirect.openToAddEntry(siteURLKey = "test-site-name");

		Redirect.addEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-page3",
			redirectChain = "true",
			siteName = "test-site-name",
			skipNavigation = "true",
			sourceURL = "test-page2");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-page3",
			redirectType = "Temporary",
			sourceURL = "${portalURL}/web/test-site-name/test-page1");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-page3",
			redirectType = "Temporary",
			sourceURL = "${portalURL}/web/test-site-name/test-page2");

		AssertElementNotPresent(
			key_destinationURL = "${portalURL}/web/test-site-name/test-page2",
			locator1 = "ContentRow#ENTRY_CONTENT_REDIRECT_DESTINATION_URL_COLUMN");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-page1");

		AssertLocation(value1 = "${portalURL}/web/test-site-name/test-page3");
	}

	@description = "This ensures that an expired permanent redirect can be added from an active 404 URL."
	@priority = "4"
	@refactordone
	test CanAddExpiredEntryFromActive404 {
		property test.name.skip.portal.instance = "Redirect#CanAddExpiredEntryFromActive404";

		var portalURL = PropsUtil.get("portal.url");

		Redirect.openToConfigInSystemSettings();

		FormFields.enableCheckbox(fieldName = "enabled");

		PortletEntry.save();

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page1",
			groupName = "Test Site Name",
			sourceURL = "test-source-page");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page");

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		Redirect.addEntryVia404URLs(
			activeIgnoreURL = "${portalURL}/web/test-site-name/test-destination-page1",
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			expirationDate = "12/31/2013",
			redirectType = "Permanent (301)",
			siteName = "test-site-name",
			skipNavigation = "true",
			sourceURL = "test-destination-page1");

		Redirect.view404URLsDefault();

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			expirationDate = "Expired",
			redirectType = "Permanent",
			sourceURL = "${portalURL}/web/test-site-name/test-destination-page1");
	}

	@description = "This ensures that an expired temporary redirect can be added from an ignored 404 URL."
	@priority = "4"
	@refactordone
	test CanAddExpiredEntryFromIgnored404 {
		property test.name.skip.portal.instance = "Redirect#CanAddExpiredEntryFromIgnored404";

		var portalURL = PropsUtil.get("portal.url");

		Redirect.openToConfigInSystemSettings();

		FormFields.enableCheckbox(fieldName = "enabled");

		PortletEntry.save();

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page1",
			groupName = "Test Site Name",
			permanent = "true",
			sourceURL = "test-source-page");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page");

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		Redirect.ignoreEntry(
			ignoreURL = "${portalURL}/web/test-site-name/test-destination-page1",
			skipNavigation = "true");

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		Redirect.addEntryVia404URLs(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			expirationDate = "12/31/2013",
			ignoredURL = "${portalURL}/web/test-site-name/test-destination-page1",
			siteName = "test-site-name",
			skipNavigation = "true",
			sourceURL = "test-destination-page1");

		Redirect.view404URLsDefault();

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			expirationDate = "Expired",
			redirectType = "Temporary",
			sourceURL = "${portalURL}/web/test-site-name/test-destination-page1");
	}

	@description = "This ensures that a permanent redirect can be added from an active 404 URL."
	@priority = "5"
	@refactordone
	test CanAddPermanentEntryFromActive404 {
		property test.name.skip.portal.instance = "Redirect#CanAddPermanentEntryFromActive404";

		var portalURL = PropsUtil.get("portal.url");

		Redirect.openToConfigInSystemSettings();

		FormFields.enableCheckbox(fieldName = "enabled");

		PortletEntry.save();

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page1",
			groupName = "Test Site Name",
			sourceURL = "test-source-page");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page");

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		Redirect.addEntryVia404URLs(
			activeIgnoreURL = "${portalURL}/web/test-site-name/test-destination-page1",
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			noUpdateReferences = "true",
			redirectType = "Permanent (301)",
			siteName = "test-site-name",
			skipNavigation = "true",
			sourceURL = "test-destination-page1");

		Redirect.view404URLsDefault();

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			redirectType = "Permanent",
			sourceURL = "${portalURL}/web/test-site-name/test-destination-page1");
	}

	@description = "This ensures that a permanent redirect can be added from an ignored 404 URL."
	@priority = "5"
	@refactordone
	test CanAddPermanentEntryFromIgnored404 {
		property test.name.skip.portal.instance = "Redirect#CanAddPermanentEntryFromIgnored404";

		var portalURL = PropsUtil.get("portal.url");

		Redirect.openToConfigInSystemSettings();

		FormFields.enableCheckbox(fieldName = "enabled");

		PortletEntry.save();

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page1",
			groupName = "Test Site Name",
			sourceURL = "test-source-page");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page");

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		Redirect.ignoreEntry(
			ignoreURL = "${portalURL}/web/test-site-name/test-destination-page1",
			skipNavigation = "true");

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		Redirect.addEntryVia404URLs(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			ignoredURL = "${portalURL}/web/test-site-name/test-destination-page1",
			redirectType = "Permanent (301)",
			siteName = "test-site-name",
			skipNavigation = "true",
			sourceURL = "test-destination-page1");

		Redirect.view404URLsDefault();

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			redirectType = "Permanent",
			sourceURL = "${portalURL}/web/test-site-name/test-destination-page1");
	}

	@description = "This ensures that a temporary redirect can be added from an active 404 URL."
	@priority = "5"
	@refactordone
	test CanAddTempEntryFromActive404 {
		property test.name.skip.portal.instance = "Redirect#CanAddTempEntryFromActive404";

		var portalURL = PropsUtil.get("portal.url");

		Redirect.openToConfigInSystemSettings();

		FormFields.enableCheckbox(fieldName = "enabled");

		PortletEntry.save();

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page1",
			groupName = "Test Site Name",
			permanent = "true",
			sourceURL = "test-source-page");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page");

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		Redirect.addEntryVia404URLs(
			activeIgnoreURL = "${portalURL}/web/test-site-name/test-destination-page1",
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			siteName = "test-site-name",
			skipNavigation = "true",
			sourceURL = "test-destination-page1");

		Redirect.view404URLsDefault();

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			redirectType = "Temporary",
			sourceURL = "${portalURL}/web/test-site-name/test-destination-page1");
	}

	@description = "This ensures that a temporary redirect can be added from an ignored 404 URL."
	@priority = "5"
	@refactordone
	test CanAddTempEntryFromIgnored404 {
		property test.name.skip.portal.instance = "Redirect#CanAddTempEntryFromIgnored404";

		var portalURL = PropsUtil.get("portal.url");

		Redirect.openToConfigInSystemSettings();

		FormFields.enableCheckbox(fieldName = "enabled");

		PortletEntry.save();

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page1",
			groupName = "Test Site Name",
			permanent = "true",
			sourceURL = "test-source-page");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.ignoreEntry(ignoreURL = "${portalURL}/web/test-site-name/test-destination-page1");

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		Redirect.addEntryVia404URLs(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			ignoredURL = "${portalURL}/web/test-site-name/test-destination-page1",
			noUpdateReferences = "true",
			siteName = "test-site-name",
			skipNavigation = "true",
			sourceURL = "test-destination-page1");

		Redirect.view404URLsDefault();

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			redirectType = "Temporary",
			sourceURL = "${portalURL}/web/test-site-name/test-destination-page1");
	}

	@description = "This ensures that a redirection chain can be avoided."
	@priority = "5"
	@refactordone
	test CanAvoidRedirectChain {
		var portalURL = PropsUtil.get("portal.url");

		for (var i : list "1,2,3") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page${i}");
		}

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-page2",
			groupName = "Test Site Name",
			sourceURL = "test-page1");

		Redirect.openToAddEntry(siteURLKey = "test-site-name");

		Redirect.addEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-page1",
			redirectChain = "true",
			siteName = "test-site-name",
			skipNavigation = "true",
			sourceURL = "test-page3",
			updateRedirect = "true");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-page2",
			redirectType = "Temporary",
			sourceURL = "${portalURL}/web/test-site-name/test-page3");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-page2",
			redirectType = "Temporary",
			sourceURL = "${portalURL}/web/test-site-name/test-page1");

		AssertElementNotPresent(
			key_destinationURL = "${portalURL}/web/test-site-name/test-page1",
			locator1 = "ContentRow#ENTRY_CONTENT_REDIRECT_DESTINATION_URL_COLUMN");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-page3");

		AssertLocation(value1 = "${portalURL}/web/test-site-name/test-page2");
	}

	@description = "This ensures that the destination URL passes validation before it can be used."
	@priority = "5"
	@refactordone
	test CanCheckDestinationURL {
		var portalURL = PropsUtil.get("portal.url");

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Source Page1");

		for (var destinationURL : list " ,liferay.com,test,redirect/test") {
			Redirect.openToAddEntry(siteURLKey = "test-site-name");

			Redirect.addEntry(
				destinationURL = "${destinationURL}",
				destinationURLVariation = "RelativeURL",
				siteName = "test-site-name",
				skipNavigation = "true",
				sourceURL = "test-source-page");
		}

		Redirect.openToAddEntry(siteURLKey = "test-site-name");

		Redirect.addEntry(
			destinationURL = "www.liferay.com",
			siteName = "test-site-name",
			skipNavigation = "true",
			sourceURL = "test-source-page1");

		Redirect.viewEntryFloatingURL(redirectURL = "http://www.liferay.com");

		Redirect.openToAddEntry(siteURLKey = "test-site-name");

		Redirect.addEntry(
			checkDestinationURL = "true",
			destinationPageName = "Test Destination Page",
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			groupName = "Test Site Name",
			portalName = "${siteName}",
			siteName = "test-site-name",
			skipNavigation = "true",
			sourceURL = "test-source-page");
	}

	@description = "This ensures that a redirection chain will be created."
	@priority = "5"
	@refactordone
	test CanCreateRedirectChain {
		var portalURL = PropsUtil.get("portal.url");

		for (var i : list "1,2,3") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page${i}");
		}

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-page2",
			groupName = "Test Site Name",
			sourceURL = "test-page1");

		Redirect.openToAddEntry(siteURLKey = "test-site-name");

		Redirect.addEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-page1",
			noUpdateRedirect = "true",
			noUpdateReferences = "true",
			redirectChain = "true",
			siteName = "test-site-name",
			skipNavigation = "true",
			sourceURL = "test-page3",
			updateRedirect = "true");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-page1",
			redirectType = "Temporary",
			sourceURL = "${portalURL}/web/test-site-name/test-page3");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-page2",
			redirectType = "Temporary",
			sourceURL = "${portalURL}/web/test-site-name/test-page1");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-page3");

		AssertLocation(value1 = "${portalURL}/web/test-site-name/test-page2");
	}

	@description = "This ensures that a redirect entry can be deleted."
	@priority = "5"
	@refactordone
	test CanDeleteEntry {
		var portalURL = PropsUtil.get("portal.url");

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			groupName = "Test Site Name",
			permanent = "true",
			sourceURL = "test-source-page");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			redirectType = "Permanent",
			sourceURL = "${portalURL}/web/test-site-name/test-source-page");

		Redirect.deleteEntry(sourceURL = "${portalURL}/web/test-site-name/test-source-page");

		Redirect.viewDefault();
	}

	@description = "This ensures that all redirect entries can be deleted simultaneously."
	@priority = "5"
	@refactordone
	test CanDeleteMultipleEntries {
		var portalURL = PropsUtil.get("portal.url");

		for (var pageCount : list "1,2,3") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Source Page${pageCount}");
		}

		for (var pageCount : list "1,2,3") {
			JSONRedirect.addRedirect(
				destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
				groupName = "Test Site Name",
				permanent = "true",
				sourceURL = "test-source-page${pageCount}");
		}

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		PortletEntry.selectAll();

		Redirect.deleteEntry(
			deletions = "true",
			sourceURL = "${portalURL}/web/test-site-name/test-source-page");

		Redirect.viewDefault();
	}

	@description = "This ensures that a temporary entry can be deleted."
	@priority = "4"
	test CanDeleteTemporaryEntry {
		var portalURL = PropsUtil.get("portal.url");

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			groupName = "Test Site Name",
			sourceURL = "test-source-page");

		JSONRedirect.deleteEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			groupName = "Test Site Name");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.viewDefault();
	}

	@description = "This ensures that no new 404 tracking is performed when the option is manually disabled at system settings."
	@priority = "4"
	test CanDisable404InSystemSettings {
		property test.name.skip.portal.instance = "Redirect#CanDisable404InSystemSettings";

		var portalURL = PropsUtil.get("portal.url");

		Redirect.openToConfigInSystemSettings();

		FormFields.enableCheckbox(fieldName = "enabled");

		SystemSettings.saveConfiguration();

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/my-url-that-does-not-exist");

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		Redirect.view404URLs(
			ignoreURL = "${portalURL}/web/test-site-name/my-url-that-does-not-exist",
			requestNumber = "1");

		Redirect.openToConfigInSystemSettings();

		FormFields.disableCheckbox(fieldName = "enabled");

		SystemSettings.saveConfiguration();

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.view404URLsTab(disabled404Tracking = "true");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/my-url-that-does-not-exist");

		Redirect.openToConfigInSystemSettings();

		FormFields.enableCheckbox(fieldName = "enabled");

		SystemSettings.saveConfiguration();

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		Redirect.view404URLs(
			ignoreURL = "${portalURL}/web/test-site-name/my-url-that-does-not-exist",
			requestNumber = "1");
	}

	@description = "This ensures that an unexpired redirect can be edited."
	@priority = "5"
	@refactordone
	test CanEditEntry {
		var portalURL = PropsUtil.get("portal.url");

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			expirationDate = "2024-12-31",
			groupName = "Test Site Name",
			permanent = "true",
			sourceURL = "test-source-page");

		Redirect.openToEditEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			groupName = "Test Site Name",
			siteURLKey = "test-site-name");

		Redirect.editEntry(
			destinationURLEdit = "${portalURL}/web/test-site-name/new-destination-page",
			expirationDate = "12/31/2013",
			permanentEntryEdit = "true",
			redirectTypeEdit = "Temporary (302)",
			skipNavigation = "true",
			sourceURL = "test-source-page",
			sourceURLEdit = "new-source-page",
			toolTip = "true");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/new-destination-page",
			expirationDate = "Expired",
			redirectType = "Temporary",
			sourceURL = "${portalURL}/web/test-site-name/new-source-page");
	}

	@description = "This ensures that a URL can be ignored after reactivation."
	@priority = "5"
	@refactordone
	test CanIgnoreURLAfterReactivation {
		property test.name.skip.portal.instance = "Redirect#CanIgnoreURLAfterReactivation";

		var portalURL = PropsUtil.get("portal.url");

		Redirect.openToConfigInSystemSettings();

		FormFields.enableCheckbox(fieldName = "enabled");

		PortletEntry.save();

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page1",
			groupName = "Test Site Name",
			sourceURL = "test-source-page");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page");

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		Redirect.ignoreEntry(
			ignoreURL = "${portalURL}/web/test-site-name/test-destination-page1",
			skipNavigation = "true");

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		Redirect.ignoreEntry(
			ignoreURL = "${portalURL}/web/test-site-name/test-destination-page1",
			skipNavigation = "true",
			unignore = "true");

		Redirect.view404URLsDefault();

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		Redirect.ignoreEntry(
			ignoreURL = "${portalURL}/web/test-site-name/test-destination-page1",
			skipNavigation = "true");

		Click(locator1 = "Dropdown#FILTER_AND_ORDER");

		MenuItem.click(menuItem = "Ignored URLs");

		Redirect.view404URLs(
			ignoreURL = "${portalURL}/web/test-site-name/test-destination-page1",
			requestNumber = "1");
	}

	@description = "This ensures that a user cannot create more than one redirection with the same sourceURL."
	@priority = "5"
	@refactordone
	test CannotAddEntryWithDuplicateSourceURL {
		var portalURL = PropsUtil.get("portal.url");

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			groupName = "Test Site Name",
			sourceURL = "test-source-page");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.addEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			redirectType = "Temporary (302)",
			siteName = "test-site-name",
			sourceURL = "test-source-page",
			sourceURLVariation = "Duplicate");
	}

	@description = "This ensures that a user cannot create a redirect if the sourceURL is too long."
	@priority = "4"
	test CannotAddEntryWithTooLongSourceURL {
		var portalURL = PropsUtil.get("portal.url");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.addEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			redirectType = "Temporary (302)",
			siteName = "test-site-name",
			sourceURL = "test-source-page-too-long-test-source-page-too-long-test-source-page-too-long-test-source-page-too-long-test-source-page-too-long-test-source-page-too-long-test-source-page-too-long-test-source-page-too-long-test-source-page-too-long-test-source-page-too-long",
			sourceURLVariation = "LengthLimit");
	}

	@description = "This ensures that a user cannot create a redirect if the sourceURL has invalid characters."
	@priority = "5"
	@refactordone
	test CannotPublishWithInvalidSourceURL {
		var portalURL = PropsUtil.get("portal.url");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.addEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			siteName = "test-site-name",
			sourceURL = "test-source-page!@#$",
			sourceURLVariation = "Invalid");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		AssertElementNotPresent(
			key_destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			locator1 = "ContentRow#ENTRY_CONTENT_REDIRECT_DESTINATION_URL_COLUMN");
	}

	@description = "This ensures that the 404 tab is not shown and no new 404 tracking is performed when 404 tracking is disabled. Also covers LPS-121346, it ensures that the home page is not shown when accessing a not existing page."
	@priority = "5"
	test CannotView404ByDefault {
		property test.name.skip.portal.instance = "Redirect#CannotView404ByDefault";

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/my-url-that-does-not-exist");

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_ALERT_ERROR",
			value1 = "Not Found");

		AssertElementNotPresent(
			key_title = "Welcome to Liferay",
			locator1 = "Masterclass#FRAGMENT_HEADING");

		Redirect.openRedirectAdmin(siteURLKey = "guest");

		Redirect.view404URLsTab(disabled404Tracking = "true");

		Redirect.openToConfigInSystemSettings();

		FormFields.enableCheckbox(fieldName = "enabled");

		PortletEntry.save();

		Redirect.open404URLsAdmin(siteURLKey = "guest");

		Redirect.view404URLsDefault();
	}

	@description = "This ensures that the 404 URLs can be ordered by requests."
	@priority = "5"
	@refactordone
	test CanOrder404URLsByRequests {
		property portal.acceptance = "false";
		property test.name.skip.portal.instance = "Redirect#CanOrder404URLsByRequests";

		var portalURL = PropsUtil.get("portal.url");

		Redirect.openToConfigInSystemSettings();

		FormFields.enableCheckbox(fieldName = "enabled");

		SystemSettings.saveConfiguration();

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Source Page2");

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page1",
			groupName = "Test Site Name",
			sourceURL = "test-source-page");

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page2",
			groupName = "Test Site Name",
			sourceURL = "test-source-page2");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page2");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page2");

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		TestUtils.hardRefresh();

		Redirect.view404URLs(
			ignoreURL = "${portalURL}/web/test-site-name/test-destination-page1",
			requestNumber = "1");

		Redirect.view404URLs(
			ignoreURL = "${portalURL}/web/test-site-name/test-destination-page2",
			requestNumber = "2");

		Click(locator1 = "ManagementBar#ORDER_ICON_GENERIC");

		Redirect.viewOrderedURLs(
			entry1 = "1",
			entry2 = "2");
	}

	@description = "This ensures that accessing a nonexistent URL redirects the user to the home of the current site."
	@priority = "4"
	@refactordone
	test CanRedirect404sToSiteHomePage {
		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/fakepage");

		AssertLocation(value1 = "${portalURL}/web/test-site-name/fakepage");

		AssertVisible(
			key_pageName = "Test Source Page",
			locator1 = "Home#PAGE_ACTIVE");

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_ALERT_ERROR",
			value1 = "Not Found");
	}

	@description = "This ensures that an expired permanent redirect can be reset."
	@priority = "5"
	@refactordone
	test CanResetExpiredEntry {
		var portalURL = PropsUtil.get("portal.url");

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			expirationDate = "2013-12-31",
			groupName = "Test Site Name",
			permanent = "true",
			sourceURL = "test-source-page");

		JSONRedirect.updateEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			expirationDate = "2024-12-31",
			groupName = "Test Site Name",
			permanent = "true",
			sourceURL = "test-source-page");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			expirationDate = "12/31/24",
			redirectType = "Permanent",
			sourceURL = "${portalURL}/web/test-site-name/test-source-page");
	}

	@description = "This test covers LPS-110773. It ensures that a redirect entry can be found by search."
	@priority = "3"
	@refactordone
	test CanSearchForEntry {
		property portal.acceptance = "false";

		var portalURL = PropsUtil.get("portal.url");

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			groupName = "Test Site Name",
			sourceURL = "test-source-page");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		for (var searchTerm : list "source,destination") {
			Redirect.viewResultEntryTitle(
				searchEntryTitle = "${portalURL}/web/test-site-name/test-source-page",
				searchTerm = "${searchTerm}");
		}
	}

	@description = "This ensures that the redirect can be set."
	@priority = "5"
	@refactordone
	test CanSetRedirectEntry {
		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Redirection",
			site = "Guest");

		Redirect.viewDefault();

		Redirect.addEntry(
			destinationURL = "",
			redirectURLVariation = "Null",
			siteName = "guest",
			sourceURL = "sourceURL");

		Redirect.openRedirectAdmin(siteURLKey = "guest");

		Redirect.addEntry(
			destinationURL = "http://localhost:8080",
			redirectURLVariation = "Null",
			siteName = "guest",
			sourceURL = "");

		AssertSelectedLabel(
			locator1 = "Select#REDIRECT_TYPE",
			value1 = "Temporary (302)");
	}

	@description = "This ensures that an entry can be updated with checking update redirect."
	@priority = "5"
	@refactordone
	test CanUpdateEntryWithCheckingUpdateRedirect {
		var portalURL = PropsUtil.get("portal.url");

		for (var i : list "1,2,3,4") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Page${i}");
		}

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-page2",
			groupName = "Test Site Name",
			sourceURL = "test-page1");

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-page4",
			groupName = "Test Site Name",
			sourceURL = "test-page3");

		Redirect.openToEditEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-page4",
			groupName = "Test Site Name",
			siteURLKey = "test-site-name");

		Redirect.editEntry(
			destinationURLEdit = "${portalURL}/web/test-site-name/test-page1",
			redirectChain = "true",
			skipNavigation = "true",
			updateRedirect = "true");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-page2",
			redirectType = "Temporary",
			sourceURL = "${portalURL}/web/test-site-name/test-page3");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-page2",
			redirectType = "Temporary",
			sourceURL = "${portalURL}/web/test-site-name/test-page1");

		for (var i : list "1,4") {
			AssertElementNotPresent(
				key_destinationURL = "${portalURL}/web/test-site-name/test-page${i}",
				locator1 = "ContentRow#ENTRY_CONTENT_REDIRECT_DESTINATION_URL_COLUMN");
		}

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-page3");

		AssertLocation(value1 = "${portalURL}/web/test-site-name/test-page2");
	}

	@description = "This ensures that the 404 URLs can be viewed after reactivating."
	@priority = "5"
	@refactordone
	test CanView404URLsAfterReactivating {
		property test.name.skip.portal.instance = "Redirect#CanView404URLsAfterReactivating";

		var portalURL = PropsUtil.get("portal.url");

		Redirect.openToConfigInSystemSettings();

		FormFields.enableCheckbox(fieldName = "enabled");

		PortletEntry.save();

		for (var i : list "1,2,3") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Source Page${i}");
		}

		for (var i : list "1,2,3") {
			JSONRedirect.addRedirect(
				destinationURL = "${portalURL}/web/test-site-name/test-destination-page${i}",
				groupName = "Test Site Name",
				permanent = "true",
				sourceURL = "test-source-page${i}");
		}

		for (var i : list "1,2,3") {
			Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page${i}");
		}

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		Redirect.ignoreEntry(
			ignoreAllEntries = "true",
			skipNavigation = "true");

		Redirect.view404URLsDefault();

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		Redirect.ignoreEntry(
			skipNavigation = "true",
			unignore = "true",
			unignoreAllEntries = "true");

		Redirect.view404URLsDefault();

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		for (var i : list "1,2,3") {
			Redirect.view404URLs(
				ignoreURL = "${portalURL}/web/test-site-name/test-destination-page${i}",
				multipleUrLs = "true");
		}
	}

	@description = "This ensures that the information related to the redirection can be viewed."
	@priority = "5"
	@refactordone
	test CanViewEntryInfo {
		property custom.properties = "company.default.time.zone=America/Los_Angeles";

		var portalURL = PropsUtil.get("portal.url");

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			groupName = "Test Site Name",
			sourceURL = "test-source-page");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		for (var redirectURL : list "${portalURL}/web/test-site-name/test-source-page,${portalURL}/web/test-site-name/test-destination-page") {
			Redirect.viewEntryFloatingURL(redirectURL = "${redirectURL}");
		}

		var currentYear = DateUtil.getFormattedCurrentDate("yyyy");

		Redirect.viewEntryInfo(
			createDate = "${currentYear}",
			createdBy = "Test Test",
			expirationDate = "January 1, 2100",
			latestOccurrence = "Never",
			type = "Temporary");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.viewEntryInfo(
			createDate = "${currentYear}",
			createdBy = "Test Test",
			expirationDate = "January 1, 2100",
			latestOccurrence = "${currentYear}",
			type = "Temporary");
	}

	@description = "This ensures that an expired temporary redirect can be reactivated."
	@priority = "5"
	@refactordone
	test CanViewExpiredAndActiveEntries {
		var portalURL = PropsUtil.get("portal.url");

		var siteName = TestCase.getSiteName(siteName = "${siteName}");

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			expirationDate = "2013-12-31",
			groupName = "Test Site Name",
			sourceURL = "test-source-page");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page");

		SelectWindow(locator1 = "title=Test Source Page - Test Site Name - ${siteName}");

		AssertLocation(value1 = "${portalURL}/web/test-site-name/test-source-page");

		JSONRedirect.updateEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			expirationDate = "2024-12-31",
			groupName = "Test Site Name",
			sourceURL = "test-source-page");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page");

		SelectWindow(locator1 = "title=Test Destination Page - Test Site Name - ${siteName}");

		AssertLocation(value1 = "${portalURL}/web/test-site-name/test-destination-page");
	}

	@description = "This ensures that an expired permanent redirect can be viewed."
	@priority = "5"
	@refactordone
	test CanViewExpiredPermanentEntry {
		var portalURL = PropsUtil.get("portal.url");

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			expirationDate = "2013-12-31",
			groupName = "Test Site Name",
			permanent = "true",
			sourceURL = "test-source-page");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			expirationDate = "Expired",
			redirectType = "Permanent",
			sourceURL = "${portalURL}/web/test-site-name/test-source-page");
	}

	@description = "This ensures that an expired temporary redirect can be viewed."
	@priority = "5"
	@refactordone
	test CanViewExpiredTempEntry {
		var portalURL = PropsUtil.get("portal.url");

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			expirationDate = "2013-12-31",
			groupName = "Test Site Name",
			sourceURL = "test-source-page");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			expirationDate = "Expired",
			redirectType = "Temporary",
			sourceURL = "${portalURL}/web/test-site-name/test-source-page");
	}

	@description = "This ensures that an ignored URL can be viewed."
	@priority = "5"
	@refactordone
	test CanViewIgnoredURL {
		property test.name.skip.portal.instance = "Redirect#CanViewIgnoredURL";

		var portalURL = PropsUtil.get("portal.url");

		Redirect.openToConfigInSystemSettings();

		FormFields.enableCheckbox(fieldName = "enabled");

		PortletEntry.save();

		JSONRedirect.addRedirect(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page1",
			groupName = "Test Site Name",
			permanent = "true",
			sourceURL = "test-source-page");

		Navigator.openSpecificURL(url = "${portalURL}/web/test-site-name/test-source-page");

		Redirect.open404URLsAdmin(siteURLKey = "test-site-name");

		Redirect.ignoreEntry(
			ignoreURL = "${portalURL}/web/test-site-name/test-destination-page1",
			skipNavigation = "true");

		Redirect.view404URLsDefault();

		Click(locator1 = "Dropdown#FILTER_AND_ORDER");

		MenuItem.click(menuItem = "Ignored URLs");

		Redirect.view404URLs(
			ignoreURL = "${portalURL}/web/test-site-name/test-destination-page1",
			requestNumber = "1");

		Search.clearSearchResult();

		Redirect.view404URLsDefault();
	}

	@description = "This ensures that a permanent redirect can be added."
	@priority = "5"
	@refactordone
	test CanViewPermanentEntryInAdmin {
		var portalURL = PropsUtil.get("portal.url");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.addEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			redirectType = "Permanent (301)",
			siteName = "test-site-name",
			sourceURL = "test-source-page");

		Redirect.openRedirectAdmin(siteURLKey = "test-site-name");

		Redirect.viewEntry(
			destinationURL = "${portalURL}/web/test-site-name/test-destination-page",
			redirectType = "Permanent",
			sourceURL = "${portalURL}/web/test-site-name/test-source-page");
	}

}