<?xml version="1.0"?>

<project basedir="." name="portal-test-db-upgrade-client" xmlns:antelope="antlib:ise.antelope.tasks">
	<import file="../../../../../../build-test.xml" />
	<import file="util/build-test-expect.xml" />

	<macrodef name="clean-database-upgrade-client">
		<sequential>
			<stop-one-java-process process.name="LocalProcess" />
			<stop-one-java-process process.name="DBUpgrader" />

			<delete file="${db.upgrade.client.log}" />
			<delete file="temp.log" />
		</sequential>
	</macrodef>

	<macrodef name="get-database-upgrade-client-paths">
		<sequential>
			<property name="db.upgrade.client.home" value="${liferay.home}/tools/portal-tools-db-upgrade-client" />

			<property name="db.upgrade.client.dist.dir" value="${project.dir}/tools/sdk/dist" />
			<property name="db.upgrade.client.jar" value="${db.upgrade.client.home}/com.liferay.portal.tools.db.upgrade.client.jar" />
			<property name="db.upgrade.client.log" value="${db.upgrade.client.home}/logs/upgrade.log" />
			<property name="db.upgrade.client.src.dir" value="${project.dir}/modules/util/portal-tools-db-upgrade-client" />
		</sequential>
	</macrodef>

	<macrodef name="rebuild-upgrade-database">
		<sequential>
			<antcall target="rebuild-legacy-database">
				<param name="portal.version" value="6.2.10.21" />
				<param name="data.archive.type" value="data-archive-portal" />
				<param name="skip.get.testcase.database.properties" value="true" />
			</antcall>
		</sequential>
	</macrodef>

	<macrodef name="send-sighup-to-upgrade-process">
		<sequential>
			<exec executable="/bin/bash" logError="true" output="true">
				<arg value="-c" />
				<arg value="pkill -1 -f db_upgrade" />
			</exec>

			<exec executable="/bin/bash" logError="true" output="true">
				<arg value="-c" />
				<arg value="pkill -1 -f com.liferay.portal.tools.db.upgrade.client.jar" />
			</exec>

			<echo>SIGHUP signals sent to db_upgrade script and upgrade client jar.</echo>
		</sequential>
	</macrodef>

	<target name="check-upgrade-client-additional-settings">
		<get-database-upgrade-client-paths />

		<parallel failonany="true">
			<execute dir="${db.upgrade.client.home}" failonerror="true">
				db_upgrade${file.suffix.bat} -j "-Dfile.encoding=UTF8 -Duser.country=US -Duser.language=en -Duser.timezone=GMT -Xmx4096m"
			</execute>
			<sequential>
				<waitfor maxwait="60000">
					<available file="${db.upgrade.client.log}" />
				</waitfor>

				<sleep seconds="5" />

				<get-jinfo-output process.name="DBUpgrader" />

				<echo>${jinfo.output}</echo>

				<if>
					<contains string="${jinfo.output}" substring="MaxHeapSize=4294967296" />
					<then>
						<echo>Java memory was successfully set to 4GB during the upgrade process.</echo>
					</then>
					<else>
						<fail message="Could not verify that Java memory was set to 4GB" />
					</else>
				</if>
			</sequential>
		</parallel>

		<clean-database-upgrade-client />
	</target>

	<target name="check-upgrade-client-custom-log">
		<get-database-upgrade-client-paths />

		<execute dir="${db.upgrade.client.home}" failonerror="true">
			db_upgrade${file.suffix.bat} -l log_file.txt
		</execute>
		<if>
			<not>
				<available file="${db.upgrade.client.home}/logs/log_file.txt" />
			</not>
			<then>
				<fail message="The upgrade client custom log file was not created successfully." />
			</then>
		</if>

		<local name="custom.log.file.output" />

		<loadfile
			property="custom.log.file.output"
			srcfile="${db.upgrade.client.home}/logs/log_file.txt"
		/>

		<if>
			<not>
				<contains string="${custom.log.file.output}" substring="com.liferay.portal.tools.db.upgrade.client.jar" />
			</not>
			<then>
				<fail message="The upgrade client custom log file is missing some data." />
			</then>
		</if>

		<echo>The upgrade client custom log file was created successfully.</echo>

		<delete file="${db.upgrade.client.home}/logs/log_file.txt" />

		<clean-database-upgrade-client />
	</target>

	<target name="check-upgrade-client-gogoshell">
		<get-database-upgrade-client-paths />

		<parallel failonany="true">
			<java
				dir="${db.upgrade.client.home}"
				fork="true"
				jar="${db.upgrade.client.jar}"
				timeout="900000"
			>
				<arg value="-s" />
			</java>

			<sequential>
				<waitfor maxwait="900000" timeoutproperty="gogoshell.not.started">
					<resourcecontains
						resource="${db.upgrade.client.log}"
						substring="Connecting to Gogo shell"
					/>
				</waitfor>

				<sleep seconds="20" />

				<if>
					<isset property="gogoshell.not.started" />
					<then>
						<fail message="The Gogo shell failed to open before the test timed out." />
					</then>
					<elseif>
						<resourcecontains
							resource="${db.upgrade.client.log}"
							substring="Unable to open Gogo shell"
						/>
						<then>
							<fail message="The Gogo shell connection failed" />
						</then>
					</elseif>
				</if>

				<echo>A Gogo shell opened successfully.</echo>

				<stop-one-java-process process.name="jar" />
			</sequential>
		</parallel>

		<clean-database-upgrade-client />
	</target>

	<target name="check-upgrade-client-gogoshell-command-output">
		<rebuild-upgrade-database />

		<get-database-upgrade-client-paths />

		<run-expect
			db.upgrade.client.home="${db.upgrade.client.home}"
			file.suffix.bat="${file.suffix.bat}"
			expect.file="check-upgrade-client-gogoshell-command-output.expect"
		/>

		<fail message="Prefix g! for command does not exist!">
			<condition>
				<not>
					<resourcecontains
						resource="${db.upgrade.client.log}"
						substring="g! upgrade:check"
					/>
				</not>
			</condition>
		</fail>

		<clean-database-upgrade-client />
	</target>

	<target name="check-upgrade-client-gogoshell-failed-upgrade">
		<rebuild-upgrade-database />

		<get-database-upgrade-client-paths />

		<parallel>
			<java
				dir="${db.upgrade.client.home}"
				fork="true"
				jar="${db.upgrade.client.jar}"
				timeout="900000"
			>
			</java>

			<sequential>
				<waitfor maxwait="30" maxwaitunit="second" timeoutproperty="upgrade.startfailed">
					<available file="${db.upgrade.client.log}" />
				</waitfor>

				<fail if="upgrade.startfailed" message="Upgrade has failed to start." />

				<sql classpath="${app.server.shielded-container-lib.portal.dir}/${jdbc.mysql.driver}" driver="${database.mysql.driver}" onerror="continue" output="output.txt" password="${database.mysql.password}" print="true" url="${database.mysql.url}" userid="${database.mysql.username}">
					<![CDATA[
						ALTER TABLE JournalArticle DROP type_;
					]]>
				</sql>

				<waitfor maxwait="900000" timeoutproperty="upgrade.notfailed">
					<resourcecontains
						resource="${db.upgrade.client.log}"
						substring="Checking to see if all upgrades have completed... your upgrades have failed, have not started, or are still running"
					/>
				</waitfor>

				<if>
					<isset property="upgrade.notfailed" />
					<then>
						<fail message="The upgrade process failure has timed out." />
					</then>
				</if>

				<waitfor maxwait="300" maxwaitunit="second" timeoutproperty="gogoshell.timeout">
					<resourcecontains
						resource="${db.upgrade.client.log}"
						substring="Type &quot;help&quot; to get available upgrade and verify commands"
					/>
				</waitfor>

				<fail if="gogoshell.timeout" message="The Gogo shell connection did not connect as expected." />

				<stop-one-java-process process.name="jar" />
			</sequential>
		</parallel>

		<rebuild-upgrade-database />

		<clean-database-upgrade-client />
	</target>

	<target name="check-upgrade-client-gogoshell-help-output">
		<rebuild-upgrade-database />

		<get-database-upgrade-client-paths />

		<run-expect
			db.upgrade.client.home="${db.upgrade.client.home}"
			file.suffix.bat="${file.suffix.bat}"
			expect.file="check-upgrade-client-gogoshell-help-output.expect"
		/>

		<clean-database-upgrade-client />
	</target>

	<target name="check-upgrade-client-help">
		<get-database-upgrade-client-paths />

		<local name="upgrade.help.output" />

		<execute dir="${db.upgrade.client.home}" failonerror="true">
			db_upgrade${file.suffix.bat} -h > help.output
		</execute>

		<loadfile
			property="upgrade.help.output"
			srcFile="help.output"
		/>

		<echo>${upgrade.help.output}</echo>

		<if>
			<contains string="${upgrade.help.output}" substring="-h,--help" />
			<then>
				<echo>The upgrade client help screen appeared successfully</echo>
			</then>
			<else>
				<fail message="The upgrade client help screen failed to appear." />
			</else>
		</if>

		<delete file="help.output" />

		<clean-database-upgrade-client />
	</target>

	<target name="check-upgrade-client-java-version">
		<get-database-upgrade-client-paths />

		<parallel failonany="true">
			<execute dir="${db.upgrade.client.home}" failonerror="true">
				JAVA_HOME=${java.jdk.7.x64.home} echo JAVA_HOME=${JAVA_HOME}
				db_upgrade${file.suffix.bat}
			</execute>

			<sequential>
				<local name="java.error.available" />

				<waitfor maxwait="15000" timeoutproperty="java.error.available">
					<resourcecontains
						resource="${db.upgrade.client.log}"
						substring="Unsupported major.minor version"
					/>
				</waitfor>

				<if>
					<isset property="java.error.available" />
					<then>
						<clean-database-upgrade-client />

						<echo>The upgrade client correctly failed to run on a version older than Java SE 8.</echo>
					</then>
					<else>
						<fail message="The upgrade client should not be able to run on versions older than Java SE 8." />
					</else>
				</if>

				<echo>${java.error.available}: Unsupported major.minor version</echo>
			</sequential>
		</parallel>

		<clean-database-upgrade-client />
	</target>

	<target name="check-upgrade-client-second-process">
		<get-database-upgrade-client-paths />

		<parallel failonany="true">
			<exec executable="/bin/bash" spawn="true">
				<arg value="-c" />
				<arg value="${db.upgrade.client.home}/db_upgrade${file.suffix.bat}" />
			</exec>

			<sequential>
				<waitfor maxwait="300" maxwaitunit="second" timeoutproperty="upgrade.startfailed">
					<available file="${db.upgrade.client.log}" />
				</waitfor>

				<fail if="upgrade.startfailed" message="Upgrade has failed to start." />

				<exec executable="/bin/bash">
					<arg value="-c" />
					<arg value="${db.upgrade.client.home}/db_upgrade${file.suffix.bat} > temp.log" />
				</exec>

				<loadfile
					property="upgrade.process.output"
					srcFile="temp.log"
				/>

				<echo>${upgrade.process.output}</echo>

				<if>
					<contains string="${upgrade.process.output}" substring="Database upgrade client is already running" />
					<then>
						<echo>Second upgrade process did not start.</echo>
					</then>
					<else>
						<fail message="Upgrade client is attempting to start a second upgrade process." />
					</else>
				</if>
			</sequential>
		</parallel>

		<clean-database-upgrade-client />
	</target>

	<target name="check-upgrade-client-sh-disconnect">
		<get-database-upgrade-client-paths />

		<parallel failonany="true">
			<exec executable="/bin/bash" spawn="true">
				<arg value="-c" />
				<arg value="${db.upgrade.client.home}/db_upgrade${file.suffix.bat}" />
			</exec>

			<sequential>
				<waitfor maxwait="30" maxwaitunit="second" timeoutproperty="upgrade.startfailed">
					<available file="${db.upgrade.client.log}" />
				</waitfor>

				<fail if="upgrade.startfailed" message="Upgrade has failed to start." />

				<send-sighup-to-upgrade-process />

				<waitfor maxwait="300" maxwaitunit="second" timeoutproperty="upgrade.failed">
					<resourcecontains
						resource="${db.upgrade.client.log}"
						substring="Checking to see if all upgrades have completed... done"
					/>
				</waitfor>

				<loadfile
					property="upgrade.log.contents"
					srcFile="${db.upgrade.client.log}"
				/>

				<echo>${upgrade.log.contents}</echo>

				<fail if="upgrade.failed" message="Upgrade has failed." />
			</sequential>
		</parallel>

		<clean-database-upgrade-client />
	</target>

	<target name="check-upgrade-client-upgrade-core-only">
		<rebuild-upgrade-database />

		<get-database-upgrade-client-paths />

		<echo append="true" file="${db.upgrade.client.home}/portal-upgrade-ext.properties">
upgrade.database.auto.run=false</echo>

		<parallel failonany="true">
			<java
				dir="${db.upgrade.client.home}"
				fork="true"
				jar="${db.upgrade.client.jar}"
				timeout="900000"
			>
			</java>

			<sequential>
				<waitfor maxwait="900000">
					<resourcecontains
						resource="${db.upgrade.client.log}"
						substring="Checking to see if all upgrades have completed... your upgrades have failed, have not started, or are still running."
					/>
				</waitfor>

				<sleep seconds="20" />

				<sql classpath="${app.server.shielded-container-lib.portal.dir}/${jdbc.mysql.driver}" driver="${database.mysql.driver}" onerror="continue" output="output.txt" password="${database.mysql.password}" print="true" url="${database.mysql.url}" userid="${database.mysql.username}">
					<![CDATA[
						select schemaVersion from Release_ where servletContextName = 'com.liferay.journal.web';
					]]>
				</sql>

				<loadfile
					property="select.result"
					srcFile="output.txt"
				/>

				<if>
					<contains string="${select.result}" substring="0.0.1" />
					<then>
						<echo>The upgrade client only upgrades core.</echo>
					</then>
					<else>
						<fail message="The upgrade client upgrades core and modules." />
					</else>
				</if>

				<stop-one-java-process process.name="jar" />
			</sequential>
		</parallel>

		<delete file="${db.upgrade.client.home}/portal-upgrade-ext.properties" />

		<prepare-database-upgrade-configuration />

		<clean-database-upgrade-client />
	</target>

	<target name="check-upgrade-client-zip-content">
		<get-database-upgrade-client-paths />

		<delete dir="${db.upgrade.client.home}/" />

		<sequential>
			<gradle-execute dir="${db.upgrade.client.src.dir}" task="distZip" />

			<unzip
				dest="${db.upgrade.client.home}"
			>
				<fileset
					dir="${db.upgrade.client.dist.dir}"
					includes="**/portal-tools-db-upgrade-client*.zip"
				/>
			</unzip>

			<delete>
				<fileset
					dir="${db.upgrade.client.dist.dir}"
					includes="**/portal-tools-db-upgrade-client*.zip"
				/>
			</delete>

			<for list="app-server.properties,com.liferay.portal.tools.db.upgrade.client.jar,db_upgrade.bat,db_upgrade.sh,portal-upgrade-database.properties,portal-upgrade-ext.properties" param="upgrade.file">
				<sequential>
					<if>
						<available file="${db.upgrade.client.home}/@{upgrade.file}" />
						<then>
							<echo>@{upgrade.file} is present.</echo>
						</then>
						<else>
							<fail message="@{upgrade.file} is not present." />
						</else>
					</if>
				</sequential>
			</for>
		</sequential>

		<clean-database-upgrade-client />
	</target>

	<target name="check-upgrade-properties-app-db-set">
		<get-database-upgrade-client-paths />

		<prepare-database-upgrade-configuration />

		<delete file="${db.upgrade.client.home}/portal-upgrade-ext.properties" />

		<run-expect
			db.upgrade.client.home="${db.upgrade.client.home}"
			file.suffix.bat="${file.suffix.bat}"
			expect.file="check-upgrade-properties-app-db-set.expect"
		/>

		<fail message="Exception thrown, failing.">
			<condition>
				<resourcecontains
					resource="${db.upgrade.client.log}"
					substring="Exception"
				/>
			</condition>
		</fail>

		<clean-database-upgrade-client />
	</target>

	<target name="check-upgrade-properties-app-ext-set">
		<get-database-upgrade-client-paths />

		<prepare-database-upgrade-configuration />

		<delete file="${db.upgrade.client.home}/portal-upgrade-database.properties" />

		<run-expect
			db.upgrade.client.home="${db.upgrade.client.home}"
			file.suffix.bat="${file.suffix.bat}"
			expect.file="check-upgrade-properties-app-ext-set.expect"
		/>

		<fail message="Exception thrown, failing.">
			<condition>
				<resourcecontains
					resource="${db.upgrade.client.log}"
					substring="Exception"
				/>
			</condition>
		</fail>

		<clean-database-upgrade-client />
	</target>

	<target name="check-upgrade-properties-db-ext-set">
		<get-database-upgrade-client-paths />

		<prepare-database-upgrade-configuration />

		<delete file="${db.upgrade.client.home}/app-server.properties" />

		<run-expect
			db.upgrade.client.home="${db.upgrade.client.home}"
			file.suffix.bat="${file.suffix.bat}"
			expect.file="check-upgrade-properties-db-ext-set.expect"
		/>

		<fail message="Exception thrown, failing.">
			<condition>
				<resourcecontains
					resource="${db.upgrade.client.log}"
					substring="Exception"
				/>
			</condition>
		</fail>

		<clean-database-upgrade-client />
	</target>

	<target name="check-upgrade-properties-none-set">
		<get-database-upgrade-client-paths />

		<prepare-database-upgrade-configuration />

		<delete file="${db.upgrade.client.home}/app-server.properties" />

		<delete file="${db.upgrade.client.home}/portal-upgrade-database.properties" />

		<delete file="${db.upgrade.client.home}/portal-upgrade-ext.properties" />

		<run-expect
			db.upgrade.client.home="${db.upgrade.client.home}"
			file.suffix.bat="${file.suffix.bat}"
			expect.file="check-upgrade-properties-none-set.expect"
		/>

		<fail message="Exception thrown, failing.">
			<condition>
				<resourcecontains
					resource="${db.upgrade.client.log}"
					substring="Exception"
				/>
			</condition>
		</fail>

		<clean-database-upgrade-client />
	</target>
</project>