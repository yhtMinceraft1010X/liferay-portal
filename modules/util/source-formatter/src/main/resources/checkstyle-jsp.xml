<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN" "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">
	<module name="TreeWalker">
		<property name="tabWidth" value="4" />
		<module name="ArrayTypeStyleCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks the style of array type definitions." />
			<property name="documentationLocation" value="config_misc.html#ArrayTypeStyle" />
		</module>
		<module name="AvoidNestedBlocksCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Finds nested blocks (blocks that are used freely in the code)." />
			<property name="documentationLocation" value="config_blocks.html#AvoidNestedBlocks" />
		</module>
		<module name="DefaultComesLastCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that the `default` is after all the cases in a `switch` statement." />
			<property name="documentationLocation" value="config_coding.html#DefaultComesLast" />
		</module>
		<module name="LocalFinalVariableNameCheck">
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that local final variable names conform to a specified pattern." />
			<property name="documentationLocation" value="config_naming.html#LocalFinalVariableName" />
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Local final variable ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="LocalVariableNameCheck">
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that local, non-final variable names conform to a specified pattern." />
			<property name="documentationLocation" value="config_naming.html#LocalVariableName" />
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Local non-final variable ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="MemberNameCheck">
			<property name="applyToPackage" value="false" />
			<property name="applyToPrivate" value="false" />
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that instance variable names conform to a specified pattern." />
			<property name="documentationLocation" value="config_naming.html#MemberName" />
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Protected or public non-static field ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="MemberNameCheck">
			<property name="applyToProtected" value="false" />
			<property name="applyToPublic" value="false" />
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that instance variable names conform to a specified pattern." />
			<property name="documentationLocation" value="config_naming.html#MemberName" />
			<property name="format" value="^_[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Private non-static field ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="MethodNameCheck">
			<property name="applyToPackage" value="false" />
			<property name="applyToPrivate" value="false" />
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that method names conform to a specified pattern." />
			<property name="documentationLocation" value="config_naming.html#MethodName" />
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Protected or public method ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="MethodNameCheck">
			<property name="applyToProtected" value="false" />
			<property name="applyToPublic" value="false" />
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that method names conform to a specified pattern." />
			<property name="documentationLocation" value="config_naming.html#MethodName" />
			<property name="format" value="^_[a-z0-9][_a-zA-Z0-9]*$|readObject|writeObject" />
			<message key="name.invalidPattern" value="Private method ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="MethodParamPadCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks the padding between the identifier of a method definition, constructor definition, method call, or constructor invocation; and the left parenthesis of the parameter list." />
			<property name="documentationLocation" value="config_whitespace.html#MethodParamPad" />
		</module>
		<module name="ModifierOrderCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that the order of modifiers conforms to the suggestions in the Java Language specification, ยง 8.1.1, 8.3.1, 8.4.3 and 9.4." />
			<property name="documentationLocation" value="config_modifier.html#ModifierOrder" />
		</module>
		<module name="MultipleVariableDeclarationsCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that each variable declaration is in its own statement and on its own line." />
			<property name="documentationLocation" value="config_coding.html#MultipleVariableDeclarations" />
		</module>
		<module name="NoLineWrapCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that chosen statements are not line-wrapped." />
			<property name="documentationLocation" value="config_whitespace.html#NoLineWrap" />
		</module>
		<module name="NoWhitespaceAfterCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that there is no whitespace after a token." />
			<property name="documentationLocation" value="config_whitespace.html#NoWhitespaceAfter" />
			<property name="tokens" value="ARRAY_DECLARATOR, ARRAY_INIT, BNOT, DEC, DOT, INC, INDEX_OP, LNOT, TYPECAST, UNARY_MINUS, UNARY_PLUS" />
		</module>
		<module name="NoWhitespaceBeforeCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that there is no whitespace before a token." />
			<property name="documentationLocation" value="config_whitespace.html#NoWhitespaceBefore" />
		</module>
		<module name="OneStatementPerLineCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that there is only one statement per line." />
			<property name="documentationLocation" value="config_coding.html#OneStatementPerLine" />
		</module>
		<module name="OperatorWrapCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks the policy on how to wrap lines on operators." />
			<property name="documentationLocation" value="config_whitespace.html#OperatorWrap" />
			<property name="option" value="eol" />
			<property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND" />
		</module>
		<module name="ParameterNameCheck">
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that method parameter names conform to a specified pattern." />
			<property name="documentationLocation" value="config_naming.html#ParameterName" />
			<message key="name.invalidPattern" value="Parameter ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="StaticVariableNameCheck">
			<property name="applyToPackage" value="false" />
			<property name="applyToPrivate" value="false" />
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that static, non-final variable names conform to a specified pattern." />
			<property name="documentationLocation" value="config_naming.html#StaticVariableName" />
			<property name="format" value="^[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Protected or public static non-final field ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="StaticVariableNameCheck">
			<property name="applyToProtected" value="false" />
			<property name="applyToPublic" value="false" />
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that static, non-final variable names conform to a specified pattern." />
			<property name="documentationLocation" value="config_naming.html#StaticVariableName" />
			<property name="format" value="^_[a-z0-9][_a-zA-Z0-9]*$" />
			<message key="name.invalidPattern" value="Private static non-final field ''{0}'' must match pattern ''{1}''" />
		</module>
		<module name="StringLiteralEqualityCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that string literals are not used with == or !=." />
			<property name="documentationLocation" value="config_coding.html#StringLiteralEquality" />
		</module>
		<module name="UnnecessaryParenthesesCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks if unnecessary parentheses are used in a statement or expression." />
			<property name="documentationLocation" value="config_coding.html#UnnecessaryParentheses" />
		</module>
		<module name="WhitespaceAfterCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that a token is followed by whitespace, with the exception that it does not check for whitespace after the semicolon of an empty for iterator." />
			<property name="documentationLocation" value="config_whitespace.html#WhitespaceAfter" />
			<property name="tokens" value="COMMA, SEMI" />
		</module>
		<module name="WhitespaceAroundCheck">
			<property name="allowEmptyTypes" value="true" />
			<property name="category" value="Styling" />
			<property name="description" value="Checks that a token is surrounded by whitespace." />
			<property name="documentationLocation" value="config_whitespace.html#WhitespaceAround" />
		</module>

		<!-- Custom checks -->

		<module name="com.liferay.source.formatter.checkstyle.check.AppendCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks instances where literal Strings are appended." />
			<message key="end.character.invalid" value="When appending multiple literal strings, only the last literal string can end with ''{0}''" />
			<message key="line.break.incorrect" value="Avoid using line break when appending multiple literal strings" />
			<message key="literal.string.combine" value="Combine the literal strings ''{0}'' and ''{1}''" />
			<message key="literal.string.move" value="Add the string ''{0}'' to the {1} literal string" />
			<message key="plus.incorrect" value="Incorrect use of ''+'' inside StringBundler" />
			<message key="start.character.invalid" value="When appending multiple literal strings, only the first literal string can start with ''{0}''" />
			<message key="string.combine" value="Combine the literal string ''{0}'' with ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.CamelCaseNameCheck">
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks variable names for correct use of `CamelCase`." />
			<property name="enabled" value="false" />
			<message key="following.underscore.incorrect" value="''{0}'' should not be followed by ''_'' for variable ''{1}''" />
			<message key="following.uppercase.incorrect" value="''{0}'' should not be followed by an uppercase character for {1} ''{2}''" />
			<message key="preceding.underscore.required" value="''{0}'' should be preceded by ''_'' for variable ''{1}''" />
			<message key="starting.uppercase.required" value="''{0}'' should start with an uppercase character for {1} ''{2}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.ChainingCheck">
			<property name="allowConcatChain" value="true" />
			<property name="allowedClassNames" value="ActionSemantics,.*[Bb]uilder(s)?,Assertions,Awaitility,.*Consumer,CreationMenuBuilder,DSL.+FactoryUtil,EasyMock,Either,Filter,FormNavigatorEntryConfigurationRetriever,GenericUtil,InfoFieldSet,InfoForm,InfoFormValues,JSONUtil,List,MemberMatcher,Option,Optional,OSGi,Response,RestAssured,(Double|Int|Long)?Stream,.+Table,Try,Validation" />
			<property name="allowedMethodNames" value="bind,builder,newBuilder" />
			<property name="allowedMockitoMethodNames" value="doAnswer,doCallRealMethod,doNothing,doReturn,doThrow,field,replace,stub,verify,verifyPrivate,when" />
			<property name="allowedVariableTypeNames" value="^(?!String).+Builder(Impl)?,Column,CompletableFuture,.*Consumer,ContactsEngineClient,Dataset,Description,ExecuteActionRequest,(FormsEventDataset)?Filter,.*Function[0-9]*,HttpSecurity,InOrder,JSONArray,JSONObject,JsonPath,.*Mapper,NestedRepresentor.*,Optional,Predicate,RequestSpecification,Response,SoyContext,.+Step,(Double|Int|Long)?Stream,Try,UpdateFieldPropertyRequest,ValidatableResponse,WebTarget" />
			<property name="applyToTypeCast" value="true" />
			<property name="category" value="Styling" />
			<property name="description" value="Checks that chaining is only applied on certain types and methods." />
			<message key="chaining.allowed" value="Chaining is allowed on ''{0}''" />
			<message key="chaining.avoid.method" value="Avoid chaining on method ''{0}''" />
			<message key="chaining.avoid.new.instance" value="Avoid chaining on new class instantiation" />
			<message key="chaining.avoid.parentheses" value="Avoid chaining on expressions with parentheses" />
			<message key="chaining.avoid.type.cast" value="Avoid chaining on Type Cast" />
			<message key="chaining.required" value="Chaining on ''{0}'' is preferred" />
			<message key="concat.avoid.too.many" value="Avoid chaining on method 'concat'. Use StringBundler when there are more than 3 parts" />
			<message key="response.unsorted" value="Method calls between ''Response.status'' and ''Response.build'' should be sorted" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.CompanyIterationCheck">
			<property name="category" value="Bug Prevention" />
			<property name="description" value="Checks that `CompanyLocalService.forEachCompany` or `CompanyLocalService.forEachCompanyId` is used when iterating over companies" />
			<property name="enabled" value="false" />
			<message key="company.local.service.use" value="Use ''CompanyLocalService.{0}'' when iterating over ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.ConcatCheck">
			<property name="category" value="Performance" />
			<property name="description" value="Checks for correct use of `StringBundler.concat`." />
			<message key="end.character.invalid" value="When concatenating multiple literal strings, only the last literal string can end with ''{0}''" />
			<message key="literal.string.combine" value="Combine the literal strings ''{0}'' and ''{1}''" />
			<message key="literal.string.move" value="Add the string ''{0}'' to the {1} literal string" />
			<message key="plus.incorrect" value="Do not use ''+'' inside ''StringBundler.concat''" />
			<message key="start.character.invalid" value="When concatenating multiple literal strings, only the first literal string can start with ''{0}''" />
			<message key="string.combine" value="Combine the literal string ''{0}'' with ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.ConstantNameCheck">
			<property name="camelCaseTypeNames" value="AggregateTestRule,Atomic.*,CodeCoverageAssertor,LiferayIntegrationTestRule,Log,Pattern,TestRule" />
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that variable names of constants follow correct naming rules." />
			<property name="immutableFieldTypes" value="boolean,byte,char,double,float,int,long,short,Boolean,Byte,Character,Class,Double,Float,Int,Long,Number,Short,String" />
			<message key="name.invalidConstantPattern" value="{0} constant ''{1}'' must match pattern ''{2}''" />
			<message key="name.invalidConstantTypePattern" value="{0} constant ''{1}'' of type ''{2}'' must match pattern ''{3}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.ContractionsCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Finds contractions in Strings (such as `can't` or `you're`)." />
			<message key="contraction.avoid" value="Avoid using contraction ''{0}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.ExceptionMessageCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Validates messages that are passed to exceptions." />
			<message key="message.incorrect" value="Incorrect exception message" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.FactoryCheck">
			<property name="category" value="Bug Prevention" />
			<property name="description" value="Finds cases where `*Factory` should be used when creating new instances of an object." />
			<message key="factory.use" value="Use ''{0}'' to create new instance of ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.GenericTypeCheck">
			<property name="category" value="Bug Prevention" />
			<property name="description" value="Checks that generics are always specified to provide compile-time checking and removing the risk of `ClassCastException` during runtime." />
			<property name="enabled" value="false" />
			<property name="populateTypeNames" value="false" />
			<message key="generic.type.parameterize" value="Parameterize the generic {0} for ''{1}'" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.InstanceofOrderCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Check the order of `instanceof` calls." />
			<message key="instanceof.order" value="''{0}'' should come before ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.JSONNamingCheck">
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks if variable names follow naming conventions." />
			<message key="variable.name.reserved" value="{0} name ending with ''{1}'' is reserved for object ''{2}''" />
			<message key="variable.rename" value="Rename {0} ''{1}'' to ''{2}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.JSONUtilCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks for utilization of class `JSONUtil`." />
			<message key="json.util.put.all.use" value="Use ''JSONUtil.putAll'' instead of chaining on ''JSONUtil.put''" />
			<message key="json.util.put.use" value="Combine calls ''{0}'' ({1}) and ''{2}'' ({3}) into single call ''{4}''" />
			<message key="json.util.to.string.use.1" value="Use ''toString'' instead of ''String.valueOf''" />
			<message key="json.util.to.string.use.2" value="Use ''toString'' instead of ''toJSONString''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.LambdaCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks that `lambda` statements are as simple as possible." />
			<message key="lambda.simplify" value="Simplify lambda statement with single statement" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.ListUtilCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks for utilization of class `ListUtil`." />
			<message key="array.unneeded" value="Pass arguments directly to ''ListUtil.fromArray'' instead of passing new array" />
			<message key="list.util.from.array.use" value="Use ''ListUtil.fromArray'' to simplify code" />
			<message key="list.util.is.empty.use" value="Use ''ListUtil.isEmpty({0})'' to simplify code" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.LiteralStringEqualsCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Finds cases where `Objects.equals` should be used." />
			<message key="objects.equals.use.1" value="Use ''Objects.equals'' instead of calling ''equals'' on a literal String" />
			<message key="objects.equals.use.2" value="Either use ''{0}'' or use ''Objects.equals'' if ''{1}'' can have a ''null'' value, instead of calling ''equals'' on a literal String" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.MapBuilderCheck">
			<property name="category" value="Miscellaneous" />
			<property name="description" value="Checks that `ConcurrentHashMapBuilder`, `HashMapBuilder`, `LinkedHashMapBuilder` or `TreeMapBuilder` is used when possible." />
			<property name="enforceBuilderNames" value="" />
			<message key="builder.include" value="Include method call ''{0}'' ({1}) in ''{2}'' ({3})" />
			<message key="builder.use" value="Use ''{0}'' ({1}, {2})" />
			<message key="builder.use.instead" value="Use ''{0}'' instead of new instance of ''{1}''" />
			<message key="null.value.incorrect" value="Null values are not allowed in ''{0}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.MapIterationCheck">
			<property name="category" value="Performance" />
			<property name="description" value="Checks that there are no unnecessary map iterations." />
			<message key="entry.set.use" value="Use Map.entrySet() to retrieve values" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.MethodNamingCheck">
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks that method names follow naming conventions." />
			<message key="method.rename" value="Rename method ''{0}'' to ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.MissingDiamondOperatorCheck">
			<property name="category" value="Bug Prevention" />
			<property name="description" value="Checks for missing diamond operator for types that require diamond operator." />
			<property name="enforceDiamondOperatorClassNames" value="" />
			<message key="diamond.operator.missing" value="Missing diamond operator ''&lt;&gt;'' for type ''{0}''" />
			<message key="generic.types.missing" value="Missing generic types ''{0}'' for type ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.MissingEmptyLineCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Checks for missing line breaks around variable declarations." />
			<message key="empty.line.missing.after.method.name" value="There should be an empty line after ''{0}''" />
			<message key="empty.line.missing.after.variable.definition" value="There should be an empty line after variable definition of type ''{0}''" />
			<message key="empty.line.missing.after.variable.reference" value="There should be an empty line before line ''{0}'', as we finished referencing variable ''{1}''" />
			<message key="empty.line.missing.before.variable.assign" value="There should be an empty line before assigning value to variable ''{0}''" />
			<message key="empty.line.missing.before.variable.use" value="There should be an empty line between assigning and using variable ''{0}''" />
			<message key="empty.line.missing.line.number" value="There should be an empty line {0} line ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.MissingParenthesesCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Finds missing parentheses in conditional statement." />
			<message key="parentheses.missing.1" value="Missing parentheses between the ''{0}'' operator and the ''{1}'' operator" />
			<message key="parentheses.missing.2" value="Missing parentheses around the {0} hand side argument of the ''{1}'' operator" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.NestedIfStatementCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Finds nested if statements that can be combined." />
			<message key="if.statements.combine" value="Combine nested if-statements" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.NumberSuffixCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Verifies that uppercase `D`, `F`, or `L` is used when denoting Double/Float/Long." />
			<message key="suffix.incorrect" value="Use uppercase ''{0}'' as suffix for the type ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.OperatorOperandCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Verifies that operand do not go over too many lines and make the operator hard to read." />
			<property name="enabled" value="false" />
			<message key="readability.improve" value="Create a new variable for the {0} hand side operand of the ''{1}'' operator for better readability" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.ParsePrimitiveTypeCheck">
			<property name="category" value="Performance" />
			<property name="description" value="Verifies that `GetterUtil.parse*` is used to parse primitive types, when possible." />
			<message key="getter.util.method.use" value="Use ''GetterUtil.{0}'' or properly catch ''NumberFormatException'' when calling ''{1}.{2}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.PersistenceCallCheck">
			<property name="category" value="Bug Prevention" />
			<property name="description" value="Finds illegal persistence calls across component boundaries." />
			<message key="persistence.call.illegal" value="Illegal call to class ''{0}'', see LPS-68923" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.PlusStatementCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Performs several checks to statements where `+` is used for concatenation." />
			<message key="end.character.invalid" value="When concatenating multiple literal strings using '+', only the last literal string can end with ''{0}''" />
			<message key="literal.string.combine" value="Combine the literal strings ''{0}'' and ''{1}''" />
			<message key="literal.string.move" value="Add the string ''{0}'' to the {1} literal string" />
			<message key="start.character.invalid" value="When concatenating multiple literal strings using '+', only the first literal string can start with ''{0}''" />
			<message key="string.combine" value="Combine the literal string ''{0}'' with ''{1}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.PortletURLBuilderCheck">
			<property name="category" value="Miscellaneous" />
			<property name="description" value="Checks that `PortletURLBuilder` is used when possible." />
			<property name="enforceBuilderNames" value="" />
			<message key="builder.include" value="Include method call ''{0}'' ({1}) in ''{2}'' ({3})" />
			<message key="builder.inline.1" value="Inline variable definition ''{0}'' ({1}) inside ''{2}'' ({3}), possibly by using a lambda function" />
			<message key="builder.inline.2" value="Inline variable definition ''{0}'' ({1}) and dependent statements ({2}) inside ''{3}'' ({4}) by using a lambda function" />
			<message key="builder.use" value="Use ''{0}'' ({1}, {2})" />
			<message key="builder.use.instead" value="Use ''{0}'' instead of new instance of ''{1}''" />
			<message key="keyword.reserved" value="Do not use ''{0}'' to set parameter ''{1}'', use ''{2}'' instead" />
			<message key="string.cast.unneeded" value="No need to cast parameter to ''String'' when passing to method ''{0}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.SemiColonCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Finds cases of unnecessary semicolon." />
			<message key="semi.colon.unnecessary" value="Unnecessary semi colon" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.SizeIsZeroCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Finds cases of calls like `list.size() == 0` (use `list.isEmpty()` instead)." />
			<message key="method.use" value="Use method ''{0}'' instead" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.StringBundlerNamingCheck">
			<property name="category" value="Naming Conventions" />
			<property name="description" value="Checks for consistent naming on variables of type 'StringBundler'." />
			<message key="variable.name.incorrect" value="StringBundler {0} ''{1}'' should end with either ''sb'' or ''SB''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.StringCastCheck">
			<property name="category" value="Performance" />
			<property name="description" value="Finds cases where a redundant `toString()` is called on variable type `String`." />
			<message key="string.cast.unneeded" value="No need to call ''.toString()'' on type String" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.TernaryOperatorCheck">
			<property name="category" value="Styling" />
			<property name="description" value="Finds use of ternary operator in `java` files (use if statement instead)." />
			<message key="ternary.operator.avoid" value="Use if-else-statement instead of ternary conditional operator for better readability" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.UnnecessaryTypeCastCheck">
			<property name="category" value="Performance" />
			<property name="description" value="Finds unnecessary Type Casting." />
			<message key="type.cast.unnecessary" value="No need to apply Type Cast to method ''{0}''" />
		</module>
		<module name="com.liferay.source.formatter.checkstyle.check.ValidatorIsNullCheck">
			<property name="category" value="Bug Prevention" />
			<property name="description" value="Ensures that only variable of type `Long`, `Serializable` or `String` is passed to method `com.liferay.portal.kernel.util.Validator.isNull`." />
			<message key="method.invalidName" value="Avoid using method ''{0}''" />
			<message key="method.reserved" value="Method ''{0}'' should only be used for type ''Long'', ''Serializable'' or ''String''" />
		</module>
	</module>
</module>