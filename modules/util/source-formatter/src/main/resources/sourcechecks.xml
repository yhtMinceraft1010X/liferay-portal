<?xml version="1.0"?>

<source-formatter>
	<source-processor name="all">
		<check name="CDNCheck">
			<category name="Bug Prevention" />
			<description name="Checks the URL in `artifact.properties` files." />
		</check>
		<check name="IncorrectFileLocationCheck">
			<category name="Bug Prevention" />
			<description name="Checks that `/src/*/java/` only contains `.java` files." />
		</check>
		<check name="IncorrectFilePathCheck">
			<category name="Bug Prevention" />
			<description name="Checks that file path contains illegal characters." />
		</check>
		<check name="NonbreakingSpaceCheck">
			<category name="Styling" />
			<description name="Finds `no break space` (`\u00a0`) characters." />
		</check>
		<check name="SlantedQuotesCheck">
			<category name="Styling" />
			<description name="Finds `slanted quote` (`\u201a`, `\u201b`, `\u201c`, `\u201d`, `\u201e`, `\u201f`, `\u2018` or `\u2019`) characters." />
		</check>

		<!-- Liferay Source Checks -->

		<check name="NewFileCheck">
			<category name="Bug Prevention" />
			<description name="Finds new files in directories that should not have added files." />
		</check>
	</source-processor>
	<source-processor name="BNDRunSourceProcessor">
		<check name="BNDRunInstructionsOrderCheck">
			<category name="Styling" />
			<description name="Sorts definition keys alphabetically." />
		</check>
	</source-processor>
	<source-processor name="BNDSourceProcessor">
		<check name="BNDBundleCheck">
			<category name="Bug Prevention" />
			<description name="Validates `Liferay-Releng-*` properties." />
		</check>
		<check name="BNDCapabilityCheck">
			<category name="Styling" />
			<description name="Sorts and applies logic to fix line breaks to property values for `Provide-Capability` and `Require-Capability`." />
		</check>
		<check name="BNDDefinitionKeysCheck">
			<category name="Bug Prevention" />
			<description name="Validates definition keys in `.bnd` files." />
		</check>
		<check name="BNDDeprecatedAppBNDsCheck">
			<category name="Miscellaneous" />
			<description name="Checks for redundant `app.bnd` in deprecated or archived modules." />
		</check>
		<check name="BNDLineBreaksCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary line breaks in `.bnd` files." />
		</check>
		<check name="BNDMultipleAppBNDsCheck">
			<category name="Bug Prevention" />
			<description name="Checks for duplicate `app.bnd` (when both `/apps/` and `/apps/dxp/` contain the same module)." />
		</check>
		<check name="BNDRangeCheck">
			<category name="Bug Prevention" />
			<description name="Checks for use or range expressions." />
		</check>
		<check name="BNDSchemaVersionCheck">
			<category name="Bug Prevention" />
			<description name="Checks for incorrect use of property `Liferay-Require-SchemaVersion`." />
		</check>
		<check name="BNDStylingCheck">
			<category name="Styling" />
			<description name="Applies rules to enforce consistency in code style." />
		</check>
		<check name="BNDWhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace in `.bnd` files." />
		</check>

		<!-- Liferay Source Checks -->

		<check name="BNDExportsCheck">
			<category name="Bug Prevention" />
			<description name="Checks that modules not ending with `-api`, `-client`, `-spi`, `-taglib`, `-test-util` do not export packages." />
		</check>
		<check name="BNDImportsCheck">
			<category name="Styling" />
			<description name="Sorts class names and checks for use of wildcards in property values for `-conditionalpackage`, `-exportcontents` and `Export-Package`." />
		</check>
		<check name="BNDSuiteCheck">
			<category name="Miscellaneous" />
			<description name="Checks that deprecated apps are moved to the `archived` folder." />
		</check>

		<!-- Module Source Checks -->

		<check name="BNDBundleActivatorCheck">
			<category name="Bug Prevention" />
			<description name="Validates property value for `Bundle-Activator`." />
		</check>
		<check name="BNDBundleInformationCheck">
			<category name="Bug Prevention" />
			<description name="Validates property values for `Bundle-Version`, `Bundle-Name` and `Bundle-SymbolicName`." />
		</check>
		<check name="BNDDirectoryNameCheck">
			<category name="Bug Prevention" />
			<description name="Checks if the directory names of the submodules match the parent module name." />
		</check>
		<check name="BNDIncludeResourceCheck">
			<category name="Bug Prevention" />
			<description name="Checks for unnecessary including of `test-classes/integration`." />
			<property name="checkTestIncludeResource" value="true" />
		</check>
		<check name="BNDLiferayEnterpriseAppCheck">
			<category name="Bug Prevention" />
			<description name="Checks for correct use of property `Liferay-Enterprise-App`." />
		</check>
		<check name="BNDLiferayRelengBundleCheck">
			<category name="Bug Prevention" />
			<description name="Checks if `.lfrbuild-release-src` file exists for DXP module with `Liferay-Releng-Bundle: true`" />
		</check>
		<check name="BNDLiferayRelengCategoryCheck">
			<category name="Bug Prevention" />
			<description name="Validates `Liferay-Releng-Category` properties" />
		</check>
		<check name="BNDWebContextPathCheck">
			<category name="Bug Prevention" />
			<description name="Checks if the property value for `Web-ContextPath` matches the module directory." />
		</check>
	</source-processor>
	<source-processor name="CodeownersSourceProcessor">
		<check name="CodeownersFileLocationCheck">
			<category name="Bug Prevention" />
			<description name="Checks that `CODEOWNERS` files are located in `.github` directory." />
		</check>
		<check name="CodeownersWhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace in `CODEOWNERS` files." />
			<property name="allowLeadingSpaces" value="true" />
		</check>
	</source-processor>
	<source-processor name="ConfigSourceProcessor">
		<check name="ConfigDefinitionKeysCheck">
			<category name="Styling" />
			<description name="Sorts definition keys in `.config` files." />
		</check>
		<check name="WhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace." />
		</check>
	</source-processor>
	<source-processor name="CQLSourceProcessor">
		<check name="CQLKeywordCheck">
			<category name="Bug Prevention" />
			<description name="Checks that Cassandra keywords are upper case." />
		</check>
		<check name="WhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace." />
			<property name="allowLeadingSpaces" value="true" />
		</check>
	</source-processor>
	<source-processor name="CSSSourceProcessor">
		<check name="CSSCommentsCheck">
			<category name="Styling" />
			<description name="Validates comments in `.css` files." />
		</check>
		<check name="CSSImportsCheck">
			<category name="Styling" />
			<description name="Sorts and groups imports in `.css` files." />
		</check>
		<check name="CSSPropertiesOrderCheck">
			<category name="Styling" />
			<description name="Sorts properties in `.css` files." />
		</check>
		<check name="WhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace." />
			<property name="enabled" value="false" />
		</check>
	</source-processor>
	<source-processor name="DockerfileSourceProcessor">
		<check name="DockerfileEmptyLinesCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary empty lines." />
		</check>
		<check name="DockerfileInstructionCheck">
			<category name="Styling" />
			<description name="Performs styling rules on instructions in `Dockerfile` files." />
		</check>
		<check name="WhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace." />
			<property name="allowLeadingSpaces" value="true" />
		</check>
	</source-processor>
	<source-processor name="DTDSourceProcessor">
		<check name="WhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace." />
			<property name="allowLeadingSpaces" value="true" />
		</check>
	</source-processor>
	<source-processor name="FTLSourceProcessor">
		<check name="FTLEmptyLinesCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary empty lines." />
		</check>
		<check name="FTLIfStatementCheck">
			<category name="Styling" />
			<description name="Finds incorrect use of parentheses in statement." />
		</check>
		<check name="FTLImportsCheck">
			<category name="Styling" />
			<description name="Sorts and groups imports in `.ftl` files." />
		</check>
		<check name="FTLLiferayVariableOrderCheck">
			<category name="Styling" />
			<description name="Sorts assign statement of `liferay_*` variables." />
		</check>
		<check name="FTLStringRelationalOperatorCheck">
			<category name="Styling" />
			<description name="Finds cases of `==` or `!=` where `stringUtil.equals`, `validator.isNotNull` or `validator.isNull` can be used instead." />
		</check>
		<check name="FTLStylingCheck">
			<category name="Styling" />
			<description name="Applies rules to enforce consistency in code style." />
		</check>
		<check name="FTLTagAttributesCheck">
			<category name="Styling" />
			<description name="Sorts and formats attributes values in tags." />
		</check>
		<check name="FTLTagCheck">
			<category name="Styling" />
			<description name="Finds cases where consecutive `#assign` can be combined." />
		</check>
		<check name="FTLWhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace in `.ftl` files." />
		</check>
	</source-processor>
	<source-processor name="GradleSourceProcessor">
		<check name="GradleBlockOrderCheck">
			<category name="Styling" />
			<description name="Sorts logic in gradle build files." />
		</check>
		<check name="GradleBodyCheck">
			<category name="Styling" />
			<description name="Applies rules to enforce consistency in the body of gradle build files." />
		</check>
		<check name="GradleDependenciesCheck">
			<category name="Performance" />
			<description name="Checks that modules are not depending on other modules." />
			<property name="checkPetraDependencies" value="true" />
			<property name="checkTestIntegrationCompileDependencies" value="false" />
		</check>
		<check name="GradleDependencyArtifactsCheck">
			<category name="Bug Prevention" />
			<description name="Checks that value `default` is not used for attribute `version`." />
		</check>
		<check name="GradleDependencyConfigurationCheck">
			<category name="Bug Prevention" />
			<description name="Validates the scope of dependencies in build gradle files." />
		</check>
		<check name="GradleDependencyVersionCheck">
			<category name="Bug Prevention" />
			<description name="Checks the version for dependencies in gradle build files." />
		</check>
		<check name="GradleExportedPackageDependenciesCheck">
			<category name="Bug Prevention" />
			<description name="Validates dependencies in gradle build files." />
		</check>
		<check name="GradleImportsCheck">
			<category name="Styling" />
			<description name="Sorts and groups imports in `.gradle` files." />
		</check>
		<check name="GradleIndentationCheck">
			<category name="Styling" />
			<description name="Finds incorrect indentation in gradle build files." />
		</check>
		<check name="GradleJavaVersionCheck">
			<category name="Bug Prevention" />
			<description name="Checks values of properties `sourceCompatibility` and `targetCompatibility` in gradle build files." />
		</check>
		<check name="GradlePropertiesCheck">
			<category name="Bug Prevention" />
			<description name="Validates property values in gradle build files." />
		</check>
		<check name="GradleProvidedDependenciesCheck">
			<category name="Bug Prevention" />
			<description name="Validates the scope of dependencies in build gradle files." />
		</check>
		<check name="GradleRequiredDependenciesCheck">
			<category name="Bug Prevention" />
			<description name="Validates the dependencies in `/required-dependencies/required-dependencies/build.gradle`." />
		</check>
		<check name="GradleStylingCheck">
			<category name="Styling" />
			<description name="Applies rules to enforce consistency in code style." />
		</check>
		<check name="GradleTaskCreationCheck">
			<category name="Styling" />
			<description name="Checks that a task is declared on a separate line before the closure." />
		</check>
		<check name="GradleTestDependencyVersionCheck">
			<category name="Bug Prevention" />
			<description name="Checks the version for dependencies in gradle build files." />
			<property name="allowedDependencyNames" value="com.liferay.arquillian.arquillian-container-liferay" />
			<property name="allowedDependencyNames" value="com.liferay.arquillian.arquillian-deployment-generator-bnd" />
			<property name="allowedDependencyNames" value="com.liferay.arquillian.extension.junit.bridge" />
			<property name="allowedDependencyNames" value="com.liferay.portal.cache.test.util" />
		</check>
		<check name="WhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace." />
		</check>
	</source-processor>
	<source-processor name="GroovySourceProcessor">
		<check name="WhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace." />
		</check>
	</source-processor>
	<source-processor name="HTMLSourceProcessor">
		<check name="HTMLEmptyLinesCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary empty lines." />
		</check>
		<check name="HTMLWhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace in `.html` files." />
		</check>
		<check name="XMLTagAttributesCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on tag attributes." />
		</check>
	</source-processor>
	<source-processor name="JavaSourceProcessor">
		<check name="ArrayCheck">
			<category name="Performance" />
			<description name="Checks if performance can be improved by using different methods that can be used by collections." />
		</check>
		<check name="CopyrightCheck">
			<category name="Styling" />
			<description name="Validates `copyright` header." />
			<property name="copyrightFileName" value="copyright.txt" />
		</check>
		<check name="EmptyCollectionCheck">
			<category name="Styling" />
			<description name="Checks that there are no calls to `Collections.EMPTY_LIST`, `Collections.EMPTY_MAP` or `Collections.EMPTY_SET`." />
		</check>
		<check name="GetterUtilCheck">
			<category name="Styling" />
			<description name="Finds cases where the default value is passed to `GetterUtil.get*` or `ParamUtil.get*`." />
		</check>
		<check name="IfStatementCheck">
			<category name="Styling" />
			<description name="Finds empty if-statements and consecutive if-statements with identical bodies" />
			<property name="enabled" value="false" />
		</check>
		<check name="Java2HTMLCheck">
			<category name="Miscellaneous" />
			<description name="Finds incorrect use of `.java.html` in `.jsp` files." />
		</check>
		<check name="JavaAbstractMethodCheck">
			<category name="Bug Prevention" />
			<description name="Finds incorrect `abstract` methods in `interface`." />
		</check>
		<check name="JavaAggregateTestRuleParameterOrderCheck">
			<category name="Styling" />
			<description name="Checks the order of parameters in `new AggregateTestRule` calls." />
		</check>
		<check name="JavaAnnotationDefaultAttributeCheck">
			<category name="Styling" />
			<description name="Finds cases where the default value is passed to annotations in package `*.bnd.annotations` or `*.bind.annotations`." />
		</check>
		<check name="JavaAnnotationsCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on annotations." />
		</check>
		<check name="JavaAssertEqualsCheck">
			<category name="Styling" />
			<description name="Validates `Assert.assertEquals` calls." />
		</check>
		<check name="JavaBooleanStatementCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on variable declaration of type `Boolean`." />
		</check>
		<check name="JavaBooleanUsageCheck">
			<category name="Bug Prevention" />
			<description name="Finds incorrect use of passing boolean values in `setAttribute` calls." />
		</check>
		<check name="JavaClassNameCheck">
			<category name="Naming Conventions" />
			<description name="Checks if class names follow naming conventions." />
		</check>
		<check name="JavaCollapseImportsCheck">
			<category name="Performance" />
			<description name="Collapses imports that use wildcard" />
		</check>
		<check name="JavaCollatorUtilCheck">
			<category name="Bug Prevention" />
			<description name="Checks for correct use of `Collator`." />
		</check>
		<check name="JavaConfigurationAdminCheck">
			<category name="Bug Prevention" />
			<description name="Checks for correct use of `location == ?` when calling `org.osgi.service.cm.ConfigurationAdmin#createFactoryConfiguration`." />
		</check>
		<check name="JavaConfigurationCategoryCheck">
			<category name="Bug Prevention" />
			<description name="Checks that the value of `category` in `@ExtendedObjectClassDefinition` matches the `categoryKey` of the corresponding class in `configuration-admin-web`." />
		</check>
		<check name="JavaConstructorParametersCheck">
			<category name="Styling" />
			<description name="Checks that the order of variable assignments matches the order of the parameters in the constructor signature." />
		</check>
		<check name="JavaConstructorSuperCallCheck">
			<category name="Styling" />
			<description name="Finds unnecessary call to no-argument constructor of the superclass." />
		</check>
		<check name="JavaDeserializationSecurityCheck">
			<category name="Security" />
			<description name="Finds Java serialization vulnerabilities." />
		</check>
		<check name="JavaDiamondOperatorCheck">
			<category name="Miscellaneous" />
			<description name="Finds cases where Diamond Operator is not used." />
		</check>
		<check name="JavaDuplicateVariableCheck">
			<category name="Miscellaneous" />
			<description name="Finds variables where a variable with the same name already exists in an extended class." />
		</check>
		<check name="JavaElseStatementCheck">
			<category name="Miscellaneous" />
			<description name="Finds unnecessary `else` statements (when the `if` statement ends with a `return` statement)." />
		</check>
		<check name="JavaEmptyLineAfterSuperCallCheck">
			<category name="Miscellaneous" />
			<description name="Finds missing empty line after a `super` call." />
		</check>
		<check name="JavaEmptyLinesCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary empty lines." />
		</check>
		<check name="JavaExceptionCheck">
			<category name="Naming Conventions" />
			<description name="Checks that variable names of exceptions in `catch` statements follow naming conventions." />
			<property name="enabled" value="false" />
		</check>
		<check name="JavaFinalVariableCheck">
			<category name="Styling" />
			<description name="Finds cases of unneeded `final` modifiers for variables and parameters." />
			<property name="enabled" value="false" />
		</check>
		<check name="JavaForLoopCheck">
			<category name="Styling" />
			<description name="Checks if a Enhanced For Loop can be used instead of a Simple For Loop." />
		</check>
		<check name="JavaHibernateSQLCheck">
			<category name="Performance" />
			<description name="Finds calls to `com.liferay.portal.kernel.dao.orm.Session.createSQLQuery` (use `Session.createSynchronizedSQLQuery` instead)." />
		</check>
		<check name="JavaImportsCheck">
			<category name="Styling" />
			<description name="Sorts and groups imports in `.java` files." />
		</check>
		<check name="JavaIndexableCheck">
			<category name="Bug Prevention" />
			<description name="Checks that the type gets returned when using annotation `@Indexable`." />
		</check>
		<check name="JavaInnerClassImportsCheck">
			<category name="Styling" />
			<description name="Finds cases where inner classes are imported." />
			<property name="upperCasePackageNames" value="com.microsoft.webservices.SharePoint.QueryService" />
		</check>
		<check name="JavaInterfaceCheck">
			<category name="Bug Prevention" />
			<description name="Checks that `interface` is not `static`." />
		</check>
		<check name="JavaIOExceptionCheck">
			<category name="Styling" />
			<description name="Validates use of `IOException`." />
		</check>
		<check name="JavaLocalSensitiveComparisonCheck">
			<category name="Bug Prevention" />
			<description name="Checks that `java.text.Collator` is used when comparing localized values." />
		</check>
		<check name="JavaLongLinesCheck">
			<category name="Styling" />
			<description name="Finds lines that are longer than the specified maximum line length." />
		</check>
		<check name="JavaMapBuilderGenericsCheck">
			<category name="Bug Prevention" />
			<description name="Finds missing or unnecessary generics on `*MapBuilder.put` calls." />
		</check>
		<check name="JavaMetaAnnotationsCheck">
			<category name="Bug Prevention" />
			<description name="Checks for correct use of attributes `description` and `name` in annotation `@aQute.bnd.annotation.metatype.Meta`." />
			<property name="checkConfigurationName" value="false" />
		</check>
		<check name="JavaModifiedServiceMethodCheck">
			<category name="Bug Prevention" />
			<description name="Finds missing empty lines before `removedService` or `addingService` calls." />
		</check>
		<check name="JavaPackagePathCheck">
			<category name="Bug Prevention" />
			<description name="Checks that the package name matches the file location." />
			<property name="checkServicePath" value="false" />
		</check>
		<check name="JavaProcessCallableCheck">
			<category name="Bug Prevention" />
			<description name="Checks that a class implementing `ProcessCallable` assigns a `serialVersionUID`." />
		</check>
		<check name="JavaRedundantConstructorCheck">
			<category name="Bug Prevention" />
			<description name="Finds unnecessary empty constructor." />
		</check>
		<check name="JavaResultSetCheck">
			<category name="Bug Prevention" />
			<description name="Checks for correct use `java.sql.ResultSet.getInt(int)`." />
		</check>
		<check name="JavaReturnStatementCheck">
			<category name="Styling" />
			<description name="Finds unnecessary `else` statement (when `if` and `else` statement both end with `return` statement)." />
		</check>
		<check name="JavaSeeAnnotationCheck">
			<category name="Bug Prevention" />
			<description name="Checks for nested annotations inside `@see`." />
		</check>
		<check name="JavaServiceImplCheck">
			<category name="Bug Prevention" />
			<description name="Ensures that `afterPropertiesSet` and `destroy` methods in `*ServiceImpl` always call the method with the same name in the superclass." />
		</check>
		<check name="JavaSessionCheck">
			<category name="Performance" />
			<description name="Finds unnecessary calls to `Session.flush()` (calls that are followed by `Session.clear()`)." />
		</check>
		<check name="JavaStaticBlockCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on `static` blocks." />
		</check>
		<check name="JavaStaticImportsCheck">
			<category name="Styling" />
			<description name="Checks that there are no static imports." />
		</check>
		<check name="JavaStaticMethodCheck">
			<category name="Bug Prevention" />
			<description name="Finds cases where methods are unnecessarily declared static." />
		</check>
		<check name="JavaStaticVariableDependencyCheck">
			<category name="Bug Prevention" />
			<description name="Checks that static variables in the same class that depend on each other are correctly defined." />
		</check>
		<check name="JavaStopWatchCheck">
			<category name="Bug Prevention" />
			<description name="Checks for potential NullPointerException when using `StopWatch`." />
		</check>
		<check name="JavaStylingCheck">
			<category name="Styling" />
			<description name="Applies rules to enforce consistency in code style." />
		</check>
		<check name="JavaSystemExceptionCheck">
			<category name="Bug Prevention" />
			<description name="Finds unnecessary SystemExceptions." />
		</check>
		<check name="JavaTermDividersCheck">
			<category name="Styling" />
			<description name="Finds missing or unnecessary empty lines between javaterms." />
		</check>
		<check name="JavaTermOrderCheck">
			<category name="Styling" />
			<description name="Checks the order of javaterms." />
		</check>
		<check name="JavaTermStylingCheck">
			<category name="Styling" />
			<description name="Applies rules to enforce consistency in code style." />
		</check>
		<check name="MethodCallsOrderCheck">
			<category name="Styling" />
			<description name="Sorts method calls for certain object (for example, `put` calls in `java.util.HashMap`)." />
		</check>
		<check name="PrimitiveWrapperInstantiationCheck">
			<category name="Bug Prevention" />
			<description name="Finds cases where `new Type` is used for primitive types (use `Type.valueOf` instead)." />
		</check>
		<check name="PrincipalExceptionCheck">
			<category name="Bug Prevention" />
			<description name="Finds calls to `PrincipalException.class.getName()` (use `PrincipalException.getNestedClasses()` instead)." />
		</check>
		<check name="SessionKeysCheck">
			<category name="Naming Conventions" />
			<description name="Checks that messages send to `SessionsErrors` or `SessionMessages` follow naming conventions." />
		</check>
		<check name="UnparameterizedClassCheck">
			<category name="Bug Prevention" />
			<description name="Finds `Class` instantiation without generic type." />
		</check>
		<check name="ValidatorEqualsCheck">
			<category name="Performance" />
			<description name="Checks that there are no calls to `Validator.equals(Object, Object)`." />
		</check>

		<!-- Liferay Source Checks -->

		<check name="JavaAnonymousInnerClassCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on anonymous classes." />
		</check>
		<check name="JavaBaseUpgradeCallableCheck">
			<category name="Bug Prevention" />
			<description name="Checks that BaseUpgradeCallable is used instead of Callable or Runnable in Upgrade and Verify classes." />
			<property name="enabled" value="false" />
		</check>
		<check name="JavaCleanUpMethodSuperCleanUpCheck">
			<category name="Bug Prevention" />
			<description name="Checks that `cleanUp` method in `*Tag` class with `@Override` annotation calls the `cleanUp` method of the superclass." />
		</check>
		<check name="JavaCleanUpMethodVariablesCheck">
			<category name="Bug Prevention" />
			<description name="Checks that variables in `Tag` classes get cleaned up properly." />
		</check>
		<check name="JavaComponentActivateCheck">
			<category name="Naming Conventions" />
			<description name="Checks if methods with annotation `@Activate` or `@Deactivate` follow naming conventions." />
		</check>
		<check name="JavaComponentAnnotationsCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on classes with `@Component` annotation." />
			<property name="checkConfigurationPolicyAttribute" value="false" />
			<property name="checkMismatchedServiceAttribute" value="false" />
			<property name="checkSelfRegistration" value="false" />
		</check>
		<check name="JavaDeprecatedJavadocCheck">
			<category name="Javadoc" />
			<description name="Checks if the `@deprecated` javadoc is pointing to the correct version." />
		</check>
		<check name="JavaDeprecatedKernelClassesCheck">
			<category name="Bug Prevention" />
			<description name="Finds calls to deprecated classes `com.liferay.portal.kernel.util.CharPool` and `com.liferay.portal.kernel.util.StringPool`." />
		</check>
		<check name="JavaFinderCacheCheck">
			<category name="Bug Prevention" />
			<description name="Checks that the method `BasePersistenceImpl.fetchByPrimaryKey` is overridden, when using `FinderPath`." />
		</check>
		<check name="JavaFinderImplCustomSQLCheck">
			<category name="Bug Prevention" />
			<description name="Checks that hardcoded SQL values in `*FinderImpl` classes match the SQL in the `.xml` file in the `custom-sql` directory." />
		</check>
		<check name="JavaHelperUtilCheck">
			<category name="Naming Conventions" />
			<description name="Finds incorrect use of `*Helper` or `*Util` classes." />
		</check>
		<check name="JavaIgnoreAnnotationCheck">
			<category name="Bug Prevention" />
			<description name="Finds methods with `@Ignore` annotation in test classes." />
		</check>
		<check name="JavaIllegalImportsCheck">
			<category name="Bug Prevention" />
			<description name="Finds cases of incorrect use of certain classes." />
			<property name="enforceJavaUtilFunctionImports" value="true" />
		</check>
		<check name="JavaInternalPackageCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on class in `internal` package." />
		</check>
		<check name="JavaJSPDynamicIncludeCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on `*JSPDynamicInclude` class." />
		</check>
		<check name="JavaLogClassNameCheck">
			<category name="Bug Prevention" />
			<description name="Checks the name of the class that is passed in `LogFactoryUtil.getLog`." />
		</check>
		<check name="JavaLogLevelCheck">
			<category name="Bug Prevention" />
			<description name="Checks that the correct log messages are printed." />
		</check>
		<check name="JavaMissingOverrideCheck">
			<category name="Bug Prevention" />
			<description name="Finds missing @Override annotations." />
			<property name="enabled" value="false" />
		</check>
		<check name="JavaMissingXMLPublicIdsCheck">
			<category name="Bug Prevention" />
			<description name="Finds missing public IDs for check XML files." />
		</check>
		<check name="JavaMultiPlusConcatCheck">
			<category name="Performance" />
			<description name="Checks that we do not concatenate more than 3 String objects." />
		</check>
		<check name="JavaProviderTypeAnnotationCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on classes with `@ProviderType` annotation." />
		</check>
		<check name="JavaReleaseInfoCheck">
			<category name="Bug Prevention" />
			<description name="Validates information in `ReleaseInfo.java`." />
		</check>
		<check name="JavaServiceObjectCheck">
			<category name="Styling" />
			<description name="Checks for correct use of `*.is*` instead of `*.get*` when calling methods generated by ServiceBuilder." />
		</check>
		<check name="JavaServiceTrackerFactoryCheck">
			<category name="Performance" />
			<description name="Checks that there are no calls to deprecated method `ServiceTrackerFactory.open(java.lang.Class)`." />
		</check>
		<check name="JavaServiceUtilCheck">
			<category name="Bug Prevention" />
			<description name="Checks that there are no calls to `*ServiceImpl` from a `*ServiceUtil` class." />
		</check>
		<check name="JavaSignatureParametersCheck">
			<category name="Styling" />
			<description name="Checks the order of parameters." />
		</check>
		<check name="JavaSourceFormatterDocumentationCheck">
			<category name="Documentation" />
			<description name="Finds SourceFormatter checks that have no documentation." />
		</check>
		<check name="JavaStagedModelDataHandlerCheck">
			<category name="Bug Prevention" />
			<description name="Finds missing method `setMvccVersion` in class extending `BaseStagedModelDataHandler` in module that has `mvcc-enabled=true` in `service.xml`." />
		</check>
		<check name="JavaStringBundlerConcatCheck">
			<category name="Performance" />
			<description name="Finds calls to `StringBundler.concat` with less than 3 parameters." />
		</check>
		<check name="JavaStringBundlerInitialCapacityCheck">
			<category name="Performance" />
			<description name="Checks the initial capacity of new instances of `StringBundler`." />
		</check>
		<check name="JavaStringStartsWithSubstringCheck">
			<category name="Bug Prevention" />
			<description name="Checks for uses of `contains` followed by `substring`, which should be `startsWith` instead." />
		</check>
		<check name="JavaSwitchCheck">
			<category name="Styling" />
			<description name="Checks that `if/else` statement is used instead of `switch` statement." />
		</check>
		<check name="JavaSystemEventAnnotationCheck">
			<category name="Bug Prevention" />
			<description name="Finds missing method `setDeletionSystemEventStagedModelTypes` in class with annotation @SystemEvent." />
		</check>
		<check name="JavaTaglibMethodCheck">
			<category name="Bug Prevention" />
			<description name="Checks that a `*Tag` class has a `set*` and `get*` or `is*` method for each attribute." />
		</check>
		<check name="JavaTestMethodAnnotationsCheck">
			<category name="Naming Conventions" />
			<description name="Checks if methods with test annotations follow the naming conventions." />
		</check>
		<check name="JavaTransactionBoundaryCheck">
			<category name="Bug Prevention" />
			<description name="Finds direct `add*` or `get*` calls in `*ServiceImpl` (those should use the `*service` global variable instead)." />
		</check>
		<check name="JavaUnsafeCastingCheck">
			<category name="Bug Prevention" />
			<description name="Checks for potential ClassCastException." />
		</check>
		<check name="JavaUnusedSourceFormatterChecksCheck">
			<category name="Miscellaneous" />
			<description name="Finds `*Check` classes that are not configured." />
		</check>
		<check name="JavaUpgradeAlterCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on `alter` calls in Upgrade classes." />
		</check>
		<check name="JavaUpgradeClassCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on Upgrade classes." />
		</check>
		<check name="JavaUpgradeConnectionCheck">
			<category name="Bug Prevention" />
			<description name="Finds cases where `DataAccess.getConnection` is used (instead of using the available global variable `connection`)." />
		</check>
		<check name="JavaUpgradeIndexCheck">
			<category name="Bug Prevention" />
			<description name="Finds cases where the service builder indexes are updated manually in Upgrade classes. This is not needed because Liferay takes care of it." />
			<property name="enabled" value="false" />
		</check>
		<check name="JavaUpgradeVersionCheck">
			<category name="Bug Prevention" />
			<description name="Verifies that the correct upgrade versions are used in classes that implement `UpgradeStepRegistrator`." />
		</check>
		<check name="JavaVariableTypeCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on the modifiers on variables." />
			<property name="checkVolatileFields" value="false" />
			<property name="immutableFieldTypes" value="boolean,byte,char,double,float,int,long,short,Boolean,Byte,Character,Class,Double,Float,Int,Long,Number,Short,String" />
		</check>
		<check name="JavaVerifyUpgradeConnectionCheck">
			<category name="Bug Prevention" />
			<description name="Finds cases where `DataAccess.getConnection` is used (instead of using the available global variable `connection`)." />
		</check>
		<check name="JavaXMLSecurityCheck">
			<category name="Security" />
			<description name="Finds possible XXE or Quadratic Blowup security vulnerabilities." />
		</check>
		<check name="LanguageKeysCheck">
			<category name="Bug Prevention" />
			<description name="Finds missing language keys in `Language.properties`." />
		</check>
		<check name="LocaleUtilCheck">
			<category name="Bug Prevention" />
			<description name="Finds cases where `com.liferay.portal.kernel.util.LocaleUtil` should be used (instead of `java.util.Locale`)." />
		</check>
		<check name="LogParametersCheck">
			<category name="Bug Prevention" />
			<description name="Validates the values of parameters passed to `_log.*` calls." />
			<property name="enabled" value="false" />
		</check>
		<check name="ResourceBundleCheck">
			<category name="Bug Prevention" />
			<description name="Checks that there are no calls to `java.util.ResourceBundle.getBundle`." />
		</check>
		<check name="SetUtilMethodsCheck">
			<category name="Performance" />
			<description name="Finds cases of inefficient SetUtil operations." />
			<property name="enabled" value="false" />
		</check>
		<check name="StringMethodsCheck">
			<category name="Performance" />
			<description name="Checks if performance can be improved by using different String operation methods." />
		</check>
		<check name="SubstringCheck">
			<category name="Performance" />
			<description name="Finds cases like `s.substring(1, s.length())` (use `s.substring(1)` instead)." />
		</check>

		<!-- Module Source Checks -->

		<check name="JavaModuleComponentCheck">
			<category name="Bug Prevention" />
			<description name="Checks for use of `@Component` in `-api` or `-spi` modules." />
		</check>
		<check name="JavaModuleExposureCheck">
			<category name="Bug Prevention" />
			<description name="Checks for exposure of `SPI` types in `API`." />
		</check>
		<check name="JavaModuleIllegalImportsCheck">
			<category name="Bug Prevention" />
			<description name="Finds cases of incorrect use of certain classes in modules." />
			<property name="checkRegistryInTestClasses" value="false" />
		</check>
		<check name="JavaModuleInternalImportsCheck">
			<category name="Bug Prevention" />
			<description name="Finds cases where a module imports an `internal` class from another class." />
		</check>
		<check name="JavaModuleJavaxPortletInitParamTemplatePathCheck">
			<category name="Bug Prevention" />
			<description name="Validates the value of `javax.portlet.init-param.template-path`." />
		</check>
		<check name="JavaModuleServiceReferenceCheck">
			<category name="Bug Prevention" />
			<description name="Finds cases where `@BeanReference` annotation should be used instead of `@ServiceReference` annotation." />
		</check>
		<check name="JavaModuleTestCheck">
			<category name="Bug Prevention" />
			<description name="Checks package names in tests." />
		</check>
		<check name="JavaOSGiReferenceCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on classes with `@Component` annotation." />
		</check>

		<!-- Plugin Source Checks -->

		<check name="CompatClassImportsCheck">
			<category name="Bug Prevention" />
			<description name="Checks that classes are imported from `compat` modules, when possible." />
		</check>
	</source-processor>
	<source-processor name="JSONSourceProcessor">
		<check name="JSONStylingCheck">
			<category name="Styling" />
			<description name="Applies rules to enforce consistency in code style." />
		</check>
		<check name="JSONValidationCheck">
			<category name="Bug Prevention" />
			<description name="Validates content of `.json` files." />
		</check>

		<!-- Liferay Source Checks -->

		<check name="JSONDeprecatedPackagesCheck">
			<category name="Bug Prevention" />
			<description name="Finds incorrect use of deprecated packages in `package.json` files." />
			<property name="deprecatedPackageNames" value="@clayui/checkbox,liferay-module-config-generator,metal-cli" />
		</check>
		<check name="JSONPackageJSONBNDVersionCheck">
			<category name="Bug Prevention" />
			<description name="Checks the version for dependencies in `package.json` files." />
		</check>
		<check name="JSONPackageJSONCheck">
			<category name="Bug Prevention" />
			<description name="Checks content of `package.json` files." />
		</check>
		<check name="JSONPackageJSONDependencyVersionCheck">
			<category name="Bug Prevention" />
			<description name="Checks the version for dependencies in `package.json` files." />
		</check>
		<check name="JSONPackageJSONRedundantDependenciesCheck">
			<category name="Performance" />
			<description name="Checks for preventing internal dependencies from being added to `package.json`." />
			<property name="enabled" value="false" />
		</check>
	</source-processor>
	<source-processor name="JSPSourceProcessor">
		<check name="ArrayCheck">
			<category name="Performance" />
			<description name="Checks if performance can be improved by using different methods that can be used by collections." />
		</check>
		<check name="CopyrightCheck">
			<category name="Styling" />
			<description name="Validates `copyright` header." />
			<property name="copyrightFileName" value="copyright.txt" />
		</check>
		<check name="EmptyCollectionCheck">
			<category name="Styling" />
			<description name="Checks that there are no calls to `Collections.EMPTY_LIST`, `Collections.EMPTY_MAP` or `Collections.EMPTY_SET`." />
		</check>
		<check name="GetterUtilCheck">
			<category name="Styling" />
			<description name="Finds cases where the default value is passed to `GetterUtil.get*` or `ParamUtil.get*`." />
		</check>
		<check name="IfStatementCheck">
			<category name="Styling" />
			<description name="Finds empty if-statements and consecutive if-statements with identical bodies" />
			<property name="enabled" value="false" />
		</check>
		<check name="JSPArrowFunctionCheck">
			<category name="Bug Prevention" />
			<description name="Checks that there are no array functions." />
		</check>
		<check name="JSPDefineObjectsCheck">
			<category name="Performance" />
			<description name="Checks for unnecessary duplication of code that already exists in `defineObjects`." />
		</check>
		<check name="JSPEmptyLinesCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary empty lines." />
		</check>
		<check name="JSPExceptionOrderCheck">
			<category name="Styling" />
			<description name="Checks the order of exceptions in `.jsp` files." />
		</check>
		<check name="JSPFileNameCheck">
			<category name="Naming Conventions" />
			<description name="Checks if the file name of `.jsp` or `.jspf` follows the naming conventions." />
		</check>
		<check name="JSPIllegalSyntaxCheck">
			<category name="Bug Prevention" />
			<description name="Finds incorrect use of `System.out.print`, `console.log` or `debugger.*` in `.jsp` files." />
		</check>
		<check name="JSPImportsCheck">
			<category name="Styling" />
			<description name="Sorts and groups imports in `.jsp` files." />
		</check>
		<check name="JSPIncludeCheck">
			<category name="Bug Prevention" />
			<description name="Validates values of `include` in `.jsp` files." />
		</check>
		<check name="JSPIndentationCheck">
			<category name="Styling" />
			<description name="Finds incorrect indentation in `.jsp` files." />
		</check>
		<check name="JSPInlineVariableCheck">
			<category name="Styling" />
			<description name="Finds cases where variables can be inlined." />
		</check>
		<check name="JSPJavaParserCheck">
			<category name="Styling" />
			<description name="Performs JavaParser on `.java` files." />
		</check>
		<check name="JSPLanguageUtilCheck">
			<category name="Bug Prevention" />
			<description name="Finds cases where Locale is passed to `LanguageUtil.get` instead of `HttpServletRequest`." />
		</check>
		<check name="JSPLineBreakCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary line breaks in `.jsp` lines." />
		</check>
		<check name="JSPLogFileNameCheck">
			<category name="Bug Prevention" />
			<description name="Validates the value that is passed to `LogFactoryUtil.getLog` in `.jsp`." />
		</check>
		<check name="JSPMethodCallsCheck">
			<category name="Bug Prevention" />
			<description name="Checks that type `LiferayPortletResponse` is used to call `getNamespace()`." />
		</check>
		<check name="JSPParenthesesCheck">
			<category name="Miscellaneous" />
			<description name="Finds incorrect use of parentheses in statement." />
		</check>
		<check name="JSPRedirectBackURLCheck">
			<category name="Miscellaneous" />
			<description name="Validates values of variable `redirect`." />
		</check>
		<check name="JSPSessionKeysCheck">
			<category name="Bug Prevention" />
			<description name="Checks that messages send to `SessionsErrors` or `SessionMessages` follow naming conventions." />
		</check>
		<check name="JSPStylingCheck">
			<category name="Styling" />
			<description name="Applies rules to enforce consistency in code style." />
		</check>
		<check name="JSPTagAttributesCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on tag attributes." />
		</check>
		<check name="JSPTaglibVariableCheck">
			<category name="Naming Conventions" />
			<description name="Checks if variable names follow naming conventions." />
		</check>
		<check name="JSPUnusedTermsCheck">
			<category name="Performance" />
			<description name="Finds taglibs, variables and imports that are unused." />
		</check>
		<check name="JSPUpgradeRemovedTagsCheck">
			<category name="Upgrade" />
			<description name="Finds removed tags when upgrading." />
		</check>
		<check name="JSPVariableOrderCheck">
			<category name="Styling" />
			<description name="Checks if variable names are in alphabetical order." />
		</check>
		<check name="JSPWhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace in `.jsp` files." />
		</check>
		<check name="JSPXSSVulnerabilitiesCheck">
			<category name="Security" />
			<description name="Finds xss vulnerabilities." />
		</check>
		<check name="MethodCallsOrderCheck">
			<category name="Styling" />
			<description name="Sorts method calls for certain object (for example, `put` calls in `java.util.HashMap`)." />
		</check>
		<check name="PrimitiveWrapperInstantiationCheck">
			<category name="Bug Prevention" />
			<description name="Finds cases where `new Type` is used for primitive types (use `Type.valueOf` instead)." />
		</check>
		<check name="PrincipalExceptionCheck">
			<category name="Bug Prevention" />
			<description name="Finds calls to `PrincipalException.class.getName()` (use `PrincipalException.getNestedClasses()` instead)." />
		</check>
		<check name="UnparameterizedClassCheck">
			<category name="Bug Prevention" />
			<description name="Finds `Class` instantiation without generic type." />
		</check>
		<check name="ValidatorEqualsCheck">
			<category name="Performance" />
			<description name="Checks that there are no calls to `Validator.equals(Object, Object)`." />
		</check>

		<!-- Liferay Source Checks -->

		<check name="JSPCoreTaglibCheck">
			<category name="Styling" />
			<description name="Finds cases where a `c:choose` or `c:if` tag can be used instead of an if-statement." />
		</check>
		<check name="JSPFunctionNameCheck">
			<category name="Naming Conventions" />
			<description name="Check if the names of functions in `.jsp` files follow naming conventions." />
		</check>
		<check name="JSPLanguageKeysCheck">
			<category name="Bug Prevention" />
			<description name="Finds missing language keys in `Language.properties`." />
		</check>
		<check name="JSPMissingTaglibsCheck">
			<category name="Bug Prevention" />
			<description name="Checks for missing taglibs." />
		</check>
		<check name="JSPSendRedirectCheck">
			<category name="Bug Prevention" />
			<description name="Checks that there are no calls to `HttpServletResponse.sendRedirect` from `jsp` files." />
		</check>
		<check name="JSPUnusedJSPFCheck">
			<category name="Performance" />
			<description name="Finds `.jspf` files that are not used." />
		</check>
		<check name="JSPVarNameCheck">
			<category name="Styling" />
			<description name="Checks that values of attribute `var` follow naming conventions." />
		</check>
		<check name="LocaleUtilCheck">
			<category name="Bug Prevention" />
			<description name="Finds cases where `com.liferay.portal.kernel.util.LocaleUtil` should be used (instead of `java.util.Locale`)." />
		</check>
		<check name="LogParametersCheck">
			<category name="Bug Prevention" />
			<description name="Validates the values of parameters passed to `_log.*` calls." />
			<property name="enabled" value="false" />
		</check>
		<check name="ResourceBundleCheck">
			<category name="Bug Prevention" />
			<description name="Checks that there are no calls to `java.util.ResourceBundle.getBundle`." />
		</check>
		<check name="SetUtilMethodsCheck">
			<category name="Performance" />
			<description name="Finds cases of inefficient SetUtil operations." />
			<property name="enabled" value="false" />
		</check>
		<check name="StringMethodsCheck">
			<category name="Performance" />
			<description name="Finds cases of inefficient String operations." />
		</check>
		<check name="SubstringCheck">
			<category name="Performance" />
			<description name="Finds cases like `s.substring(1, s.length())` (use `s.substring(1)` instead)." />
		</check>

		<!-- Module Source Checks -->

		<check name="JSPModuleIllegalImportsCheck">
			<category name="Miscellaneous" />
			<description name="Finds incorrect use of `com.liferay.registry.Registry` or `com.liferay.util.ContentUtil`." />
		</check>
		<check name="JSPServiceUtilCheck">
			<category name="Miscellaneous" />
			<description name="Finds incorrect use of `*ServiceUtil` in `.jsp` files in modules." />
		</check>

		<!-- Plugin Source Checks -->

		<check name="CompatClassImportsCheck">
			<category name="Bug Prevention" />
			<description name="Checks that classes are imported from `compat` modules, when possible." />
		</check>
	</source-processor>
	<source-processor name="JSSourceProcessor">
		<check name="JSLodashDependencyCheck">
			<category name="Bug Prevention" />
			<description name="Finds incorrect use of `AUI._`." />
			<property name="enabled" value="false" />
		</check>
		<check name="JSStylingCheck">
			<category name="Styling" />
			<description name="Applies rules to enforce consistency in code style." />
			<property name="enabled" value="false" />
		</check>
		<check name="JSWhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace in `.js` files." />
			<property name="enabled" value="false" />
		</check>

		<!-- Liferay Source Checks -->

		<check name="LanguageKeysCheck">
			<category name="Bug Prevention" />
			<description name="Finds missing language keys in `Language.properties`." />
		</check>
	</source-processor>
	<source-processor name="LFRBuildSourceProcessor">
		<check name="LFRBuildContentCheck">
			<category name="Bug Prevention" />
			<description name="Finds `.lfrbuild*` files that are not empty." />
			<property name="nonemptyMarkerFileNames" value=".lfrbuild-lowest-major-version" />
			<property name="nonemptyMarkerFileNames" value=".lfrbuild-packageinfo" />
		</check>
		<check name="LFRBuildReadmeCheck">
			<category name="Documentation" />
			<description name="Checks that `.lfrbuild*` files are documented in a marker file." />
		</check>
	</source-processor>
	<source-processor name="MarkdownSourceProcessor">
		<check name="MarkdownFileExtensionCheck">
			<category name="Styling" />
			<description name="Finds `markdown` files with `.md` extension (use `.markdown`)." />
		</check>
		<check name="MarkdownSourceFormatterDocumentationCheck">
			<category name="Documentation" />
			<description name="Validates the header of Source Formatter documentation files." />
		</check>
		<check name="MarkdownSourceFormatterReadmeCheck">
			<category name="Documentation" />
			<description name="Generates Source Formatter documentation index files." />
		</check>
		<check name="MarkdownStylingCheck">
			<category name="Styling" />
			<description name="Applies rules to enforce consistency in code style." />
		</check>
		<check name="MarkdownWhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace in `.markdown` files." />
			<property name="allowLeadingSpaces" value="true" />
			<property name="allowTrailingDoubleSpace" value="true" />
		</check>
	</source-processor>
	<source-processor name="PackageinfoSourceProcessor">
		<check name="PackageinfoBNDExportPackageCheck">
			<category name="Bug Prevention" />
			<description name="Finds legacy `packageinfo` files." />
		</check>
		<check name="WhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace." />
		</check>
	</source-processor>
	<source-processor name="PoshiSourceProcessor">
		<check name="PoshiDependenciesFileLocationCheck">
			<category name="Bug Prevention" />
			<description name="Checks that dependencies files are located in the correct directory." />
			<property name="enabled" value="false" />
		</check>
		<check name="PoshiPauseUsageCheck">
			<category name="Performance" />
			<description name="Finds missing comment with JIRA project when using `Pause`." />
			<property name="enabled" value="false" />
		</check>
		<check name="PoshiStylingCheck">
			<category name="Styling" />
			<description name="Applies rules to enforce consistency in code style." />
		</check>
		<check name="PoshiVariableNameCheck">
			<category name="Styling" />
			<description name="Checks variable names for correct use of `camelCase`." />
			<property name="enabled" value="false" />
		</check>
	</source-processor>
	<source-processor name="PropertiesSourceProcessor">
		<check name="PropertiesCommentsCheck">
			<category name="Styling" />
			<description name="Validates comments in `.properties` files." />
		</check>
		<check name="PropertiesDefinitionKeysCheck">
			<category name="Styling" />
			<description name="Sorts definition keys in `liferay-plugin-package.properties` file." />
		</check>
		<check name="PropertiesDependenciesFileCheck">
			<category name="Styling" />
			<description name="Sorts the properties in `dependencies.properties` file." />
		</check>
		<check name="PropertiesEmptyLinesCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary empty lines." />
		</check>
		<check name="PropertiesImportedFilesContentCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on `imported-files.properties` file." />
		</check>
		<check name="PropertiesLanguageKeysOrderCheck">
			<category name="Styling" />
			<description name="Sort language keys in `Language.properties` file." />
		</check>
		<check name="PropertiesLiferayPluginPackageFileCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on `liferay-plugin-package.properties` file." />
		</check>
		<check name="PropertiesLiferayPluginPackageLiferayVersionsCheck">
			<category name="Bug Prevention" />
			<description name="Validates the version in `liferay-plugin-package.properties` file." />
		</check>
		<check name="PropertiesLongLinesCheck">
			<category name="Styling" />
			<description name="Finds lines that are longer than the specified maximum line length." />
		</check>
		<check name="PropertiesMultiLineValuesOrderCheck">
			<category name="Styling" />
			<description name="Verifies that property with multiple values is not on a single line." />
		</check>
		<check name="PropertiesPortalEnvironmentVariablesCheck">
			<category name="Documentation" />
			<description name="Verifies that the environment property in the documentation matches the property name." />
		</check>
		<check name="PropertiesPortalFileCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on `portal.properties` or `portal-*.properties` file." />
		</check>
		<check name="PropertiesPortletFileCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on `portlet.properties` file." />
		</check>
		<check name="PropertiesSourceFormatterContentCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on `source-formatter.properties` file." />
		</check>
		<check name="PropertiesSourceFormatterFileCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on `source-formatter.properties` file." />
		</check>
		<check name="PropertiesSQLStylingCheck">
			<category name="Styling" />
			<description name="Applies rules to enforce consistency in code style." />
		</check>
		<check name="PropertiesStylingCheck">
			<category name="Styling" />
			<description name="Applies rules to enforce consistency in code style." />
		</check>
		<check name="PropertiesWhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace in `.properties` files." />
			<property name="allowDoubleSpace" value="true" />
			<property name="allowLeadingSpaces" value="true" />
		</check>

		<!-- Liferay Source Checks -->

		<check name="PropertiesArchivedModulesCheck">
			<category name="Bug Prevention" />
			<description name="Finds `test.batch.class.names.includes` property value pointing to archived modules in `test.properties`." />
		</check>
		<check name="PropertiesBuildIncludeDirsCheck">
			<category name="Bug Prevention" />
			<description name="Verifies property value of `build.include.dirs` in `build.properties`." />
		</check>
		<check name="PropertiesLanguageKeysCheck">
			<category name="Bug Prevention" />
			<description name="Checks that there is no HTML markup in language keys." />
		</check>
		<check name="PropertiesReleaseBuildCheck">
			<category name="Bug Prevention" />
			<description name="Verifies that the information in `release.properties` matches the information in `ReleaseInfo.java`." />
		</check>
		<check name="PropertiesServiceKeysCheck">
			<category name="Bug Prevention" />
			<description name="Finds usage of legacy properties in `service.properties`." />
		</check>
		<check name="PropertiesVerifyPropertiesCheck">
			<category name="Bug Prevention" />
			<description name="Finds usage of legacy properties in `portal.properties` or `system.properties`." />
		</check>
	</source-processor>
	<source-processor name="PythonSourceProcessor">
		<check name="PythonClassesAndMethodsOrderCheck">
			<category name="Styling" />
			<description name="Checks the order of classes and methods." />
		</check>
		<check name="PythonImportsCheck">
			<category name="Styling" />
			<description name="Sorts and groups imports in `.py` files." />
		</check>
		<check name="PythonStylingCheck">
			<category name="Styling" />
			<description name="Applies rules to enforce consistency in code style." />
			<property name="maxLineLength" value="80" />
		</check>
		<check name="PythonWhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace." />
		</check>
	</source-processor>
	<source-processor name="SHSourceProcessor">
		<check name="WhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace." />
		</check>
	</source-processor>
	<source-processor name="SoySourceProcessor">
		<check name="SoyEmptyLinesCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary empty lines." />
		</check>
		<check name="WhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace." />
		</check>
	</source-processor>
	<source-processor name="SQLSourceProcessor">
		<check name="SQLEmptyLinesCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary empty lines." />
		</check>
		<check name="SQLLongNamesCheck">
			<category name="Bug Prevention" />
			<description name="Checks for table and column names that exceed 30 characters." />
		</check>
		<check name="SQLStylingCheck">
			<category name="Styling" />
			<description name="Applies rules to enforce consistency in code style." />
		</check>
		<check name="WhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace." />
		</check>
	</source-processor>
	<source-processor name="TFSourceProcessor">
		<check name="TFBlockOrderCheck">
			<category name="Styling" />
			<description name="Checks the order of blocks in `.tf` file." />
		</check>
	</source-processor>
	<source-processor name="TLDSourceProcessor">
		<check name="TLDElementOrderCheck">
			<category name="Styling" />
			<description name="Checks the order of attributes in `.tld` file." />
		</check>
		<check name="TLDTypeCheck">
			<category name="Bug Prevention" />
			<description name="Ensures the fully qualified name is used for types in `.tld` file." />
		</check>
		<check name="WhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace." />
		</check>
		<check name="XMLIndentationCheck">
			<category name="Styling" />
			<description name="Finds incorrect indentation in `.xml` files." />
		</check>
	</source-processor>
	<source-processor name="TSSourceProcessor">
		<check name="WhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace." />
			<property name="allowTrailingEmptyLines" value="true" />
			<property name="enabled" value="false" />
		</check>
	</source-processor>
	<source-processor name="TXTSourceProcessor">
		<check name="TXTEmptyLinesCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary empty lines." />
		</check>
		<check name="TXTStylingCheck">
			<category name="Styling" />
			<description name="Applies rules to enforce consistency in code style." />
		</check>
	</source-processor>
	<source-processor name="UpgradeSourceProcessor">
		<check name="UpgradeJavaCheck">
			<category name="Upgrade" />
			<description name="Performs upgrade checks for `java` files" />
		</check>
	</source-processor>
	<source-processor name="XMLSourceProcessor">
		<check name="XMLBuildFileCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on `build.xml`." />
		</check>
		<check name="XMLCDATACheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on `CDATA` inside `xml`." />
		</check>
		<check name="XMLCustomSQLOrderCheck">
			<category name="Styling" />
			<description name="Checks the order of attributes in `custom-sql` file." />
		</check>
		<check name="XMLCustomSQLStylingCheck">
			<category name="Styling" />
			<description name="Applies rules to enforce consistency in code style for `.xml` files in directory `custom-sql`." />
		</check>
		<check name="XMLDDLStructuresFileCheck">
			<category name="Styling" />
			<description name="Checks the order of attributes in `-structures.xml` file." />
		</check>
		<check name="XMLDTDVersionCheck">
			<category name="Styling" />
			<description name="Checks the DTD version in `*.xml` file." />
		</check>
		<check name="XMLEchoMessageCheck">
			<category name="Styling" />
			<description name="Checks the echo message attributes in `*.xml` file." />
		</check>
		<check name="XMLFriendlyURLRoutesFileCheck">
			<category name="Styling" />
			<description name="Performs several checks on `*-routes.xml` file." />
		</check>
		<check name="XMLFSBExcludeFileCheck">
			<category name="Styling" />
			<description name="Checks the order of attributes in `fsb-exclude.xml` file." />
		</check>
		<check name="XMLHBMFileCheck">
			<category name="Styling" />
			<description name="Checks the order of imports in `*-hbm.xml` file." />
		</check>
		<check name="XMLImportsCheck">
			<category name="Styling" />
			<description name="Sorts and groups imports in `.xml` files." />
		</check>
		<check name="XMLIndentationCheck">
			<category name="Styling" />
			<description name="Finds incorrect indentation in `.xml` files." />
		</check>
		<check name="XMLLog4jFileCheck">
			<category name="Styling" />
			<description name="Checks the order of categories in `*-log4j.xml` file." />
		</check>
		<check name="XMLLookAndFeelCompatibilityVersionCheck">
			<category name="Bug Prevention" />
			<description name="Finds missing attribute `version` in `compatibility` element in `*--look-and-feel.xml` file." />
		</check>
		<check name="XMLLookAndFeelFileCheck">
			<category name="Styling" />
			<description name="Checks the order of attributes in `*--look-and-feel.xml` file." />
		</check>
		<check name="XMLModelHintsFileCheck">
			<category name="Styling" />
			<description name="Checks the order of attributes in `*-model-hints.xml` file." />
		</check>
		<check name="XMLPomFileCheck">
			<category name="Styling" />
			<description name="Checks the order of dependencies in `pom.xml` file." />
		</check>
		<check name="XMLPortletFileCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on `portlet.xml` file." />
		</check>
		<check name="XMLPortletPreferencesFileCheck">
			<category name="Styling" />
			<description name="Checks the order of elements in files in directory `resource-actions`." />
		</check>
		<check name="XMLPoshiFileCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on poshi files." />
		</check>
		<check name="XMLProjectElementCheck">
			<category name="Bug Prevention" />
			<description name="Checks the project name in `.pom` file." />
		</check>
		<check name="XMLResourceActionsFileCheck">
			<category name="Styling" />
			<description name="Checks the order of elements in files in directory `resource-actions`." />
		</check>
		<check name="XMLServiceEntityNameCheck">
			<category name="Bug Prevention" />
			<description name="Checks that the `entity name` in `service.xml` does not equal the `package name`." />
		</check>
		<check name="XMLServiceFileCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on `service.xml` file." />
			<property name="allowedIncorrectLastPublishDateEntities" value="CommerceCountry,CPDefinition,CPInstance,PollsQuestion,PollsVote" />
			<property name="checkMVCCEnabled" value="false" />
		</check>
		<check name="XMLServiceFinderNameCheck">
			<category name="Bug Prevention" />
			<description name="Checks that the `finder name` in `service.xml`." />
			<property name="enabled" value="false" />
		</check>
		<check name="XMLStylingCheck">
			<category name="Styling" />
			<description name="Applies rules to enforce consistency in code style." />
		</check>
		<check name="XMLSuppressionsFileCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on `source-formatter-suppressions.xml` file." />
		</check>
		<check name="XMLTagAttributesCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on tag attributes." />
		</check>
		<check name="XMLToggleFileCheck">
			<category name="Styling" />
			<description name="Checks the order of elements in `.toggle` file." />
		</check>
		<check name="XMLUpgradeRemovedDefinitionsCheck">
			<category name="Upgrade" />
			<description name="Finds removed XML definitions when upgrading." />
		</check>
		<check name="XMLWhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace in `.xml` files." />
		</check>
		<check name="XMLWorkflowDefinitionFileNameCheck">
			<category name="Styling" />
			<description name="Checks the file name of workflow definition files." />
			<property name="enabled" value="false" />
		</check>

		<!-- Liferay Source Checks -->

		<check name="XMLCheckstyleFileCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on `checkstyle.xml` file." />
		</check>
		<check name="XMLEmptyLinesCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary empty lines." />
		</check>
		<check name="XMLIvyFileCheck">
			<category name="Styling" />
			<description name="Checks the order of dependencies in `ivy.xml` file." />
		</check>
		<check name="XMLServiceReferenceCheck">
			<category name="Bug Prevention" />
			<description name="Checks for unused references in `service.xml` file." />
			<property name="avoidReferences" value="false" />
		</check>
		<check name="XMLSourcechecksFileCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on `sourcechecks.xml` file." />
		</check>
		<check name="XMLSpringFileCheck">
			<category name="Styling" />
			<description name="Checks the order of elements in `*-spring.xml` file." />
		</check>
		<check name="XMLStrutsConfigFileCheck">
			<category name="Styling" />
			<description name="Checks the order of elements in `struts-config.xml` file." />
		</check>
		<check name="XMLTestIgnorableErrorLinesFileCheck">
			<category name="Styling" />
			<description name="Checks the order of elements in `test-ignorable-error-lines.xml` file." />
		</check>
		<check name="XMLTilesDefsFileCheck">
			<category name="Styling" />
			<description name="Checks the order of elements in `tiles-defs.xml` file." />
		</check>
		<check name="XMLWebFileCheck">
			<category name="Bug Prevention" />
			<description name="Performs several checks on `web.xml` file." />
		</check>
	</source-processor>
	<source-processor name="YMLSourceProcessor">
		<check name="YMLDefinitionOrderCheck">
			<category name="Styling" />
			<description name="Sorts definitions alphabetically in `.yml` files." />
		</check>
		<check name="YMLEmptyLinesCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary empty lines." />
		</check>
		<check name="YMLLongLinesCheck">
			<category name="Styling" />
			<description name="Finds lines that are longer than the specified maximum line length." />
			<property name="maxLineLength" value="120" />
		</check>
		<check name="YMLStylingCheck">
			<category name="Styling" />
			<description name="Applies rules to enforce consistency in code style." />
		</check>
		<check name="YMLWhitespaceCheck">
			<category name="Styling" />
			<description name="Finds missing and unnecessary whitespace in `.yml` files." />
			<property name="allowLeadingSpaces" value="true" />
		</check>
	</source-processor>
</source-formatter>