import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipInputStream

task runGradleTest

gradle.liferayWorkspace {
	bundleDistRootDirName = "foo/bar"
	environment = "production"
	modules.jspPrecompileEnabled = true
	product = "portal-7.4-ga8"
}

node {
	nodeVersion = "14.19.0"
}

runGradleTest {
	dependsOn distBundleZip

	doLast {
		int portalExtPropertiesCount = 0

		ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(distBundleZip.archivePath))

		ZipEntry nextZipEntry = zipInputStream.getNextEntry()

		while (nextZipEntry != null) {
			if (!nextZipEntry.isDirectory() && nextZipEntry.name.endsWith("portal-ext.properties")) {
				portalExtPropertiesCount++
			}

			nextZipEntry = zipInputStream.getNextEntry()
		}

		zipInputStream.closeEntry()

		zipInputStream.close()

		assert portalExtPropertiesCount == 1

		ZipFile zipFile = new ZipFile(distBundleZip.archivePath)

		String zipEntryRootName = gradle.liferayWorkspace.bundleDistRootDirName

		if (zipEntryRootName) {
			zipEntryRootName += "/"
		}
		else {
			zipEntryRootName = ""
		}

		zipFile.withCloseable {

			// Configs

			for (String fileName in ["common/common.txt", "production/production.txt", "production/license/copyright.txt", "production/portal-ext.properties"]) {
				File expectedFile = file("configs/" + fileName)

				String zipEntryName = zipEntryRootName + fileName.substring(fileName.indexOf('/') + 1)

				ZipEntry zipEntry = zipFile.getEntry(zipEntryName)

				assert zipEntry != null : zipEntryName

				InputStream inputStream = zipFile.getInputStream(zipEntry)

				assert expectedFile.text.normalize() == inputStream.text.normalize()
			}

			// Bundle

			String bundleFileName = downloadBundle.src.toString()

			bundleFileName = bundleFileName.substring(bundleFileName.lastIndexOf('/') + 1)

			File bundleFile = new File(downloadBundle.dest, bundleFileName)

			FileTree bundleFileTree

			if (bundleFileName.endsWith(".tar.gz")) {
				bundleFileTree = tarTree(bundleFile)
			}
			else {
				bundleFileTree = zipTree(bundleFile)
			}

			bundleFileTree.visit {

				// Skip root directory

				int pos = it.path.indexOf('/')

				if (pos == -1) {
					return
				}

				String zipEntryName = zipEntryRootName + it.path.substring(pos + 1)

				if (it.directory) {
					zipEntryName += "/"
				}

				ZipEntry zipEntry = zipFile.getEntry(zipEntryName)

				assert zipEntry != null : zipEntryName
			}

			// Projects

			for (String fileName : ["osgi/modules/com.liferay.foo.web-1.0.0.jar", "osgi/modules/qux-layouttpl-7.0.0.1.war", "osgi/war/baz-theme.war", "osgi/war/foo.war"]) {
				String zipEntryName = zipEntryRootName + fileName

				assert zipFile.getEntry(zipEntryName) != null : zipEntryName
			}
		}
	}
}